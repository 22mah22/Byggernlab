
ice_ice_arduino.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001d94  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000454  20000000  00081d94  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000c8  20000458  000821f0  00020458  2**3
                  ALLOC
  3 .stack        00000400  20000520  000822b8  00020458  2**0
                  ALLOC
  4 .heap         00000200  20000920  000826b8  00020458  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020454  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002047d  2**0
                  CONTENTS, READONLY
  7 .debug_info   00008c42  00000000  00000000  000204d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001b73  00000000  00000000  00029118  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000015a3  00000000  00000000  0002ac8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000348  00000000  00000000  0002c22e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002a0  00000000  00000000  0002c576  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001343a  00000000  00000000  0002c816  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00006906  00000000  00000000  0003fc50  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000547ea  00000000  00000000  00046556  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00000938  00000000  00000000  0009ad40  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	20 09 00 20 c9 05 08 00 c5 05 08 00 c5 05 08 00      .. ............
   80010:	c5 05 08 00 c5 05 08 00 c5 05 08 00 00 00 00 00     ................
	...
   8002c:	c5 05 08 00 c5 05 08 00 00 00 00 00 c5 05 08 00     ................
   8003c:	59 10 08 00 c5 05 08 00 c5 05 08 00 c5 05 08 00     Y...............
   8004c:	c5 05 08 00 c5 05 08 00 c5 05 08 00 c5 05 08 00     ................
   8005c:	c5 05 08 00 65 12 08 00 c5 05 08 00 00 00 00 00     ....e...........
   8006c:	c5 05 08 00 c5 05 08 00 c5 05 08 00 c5 05 08 00     ................
	...
   80084:	c5 05 08 00 c5 05 08 00 c5 05 08 00 c5 05 08 00     ................
   80094:	c5 05 08 00 c5 05 08 00 c5 05 08 00 c5 05 08 00     ................
   800a4:	00 00 00 00 c5 05 08 00 c5 05 08 00 11 0c 08 00     ................
   800b4:	55 11 08 00 c5 05 08 00 c5 05 08 00 c5 05 08 00     U...............
   800c4:	c5 05 08 00 c5 05 08 00 c5 05 08 00 c5 05 08 00     ................
   800d4:	c1 01 08 00 c5 05 08 00 c5 05 08 00 c5 05 08 00     ................
   800e4:	c5 05 08 00 c5 05 08 00 21 04 08 00 c5 05 08 00     ........!.......

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20000458 	.word	0x20000458
   80110:	00000000 	.word	0x00000000
   80114:	00081d94 	.word	0x00081d94

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00081d94 	.word	0x00081d94
   80154:	2000045c 	.word	0x2000045c
   80158:	00081d94 	.word	0x00081d94
   8015c:	00000000 	.word	0x00000000

00080160 <adc_init>:
   80160:	2320      	movs	r3, #32
   80162:	4a0b      	ldr	r2, [pc, #44]	; (80190 <adc_init+0x30>)
   80164:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   80168:	4a0a      	ldr	r2, [pc, #40]	; (80194 <adc_init+0x34>)
   8016a:	6053      	str	r3, [r2, #4]
   8016c:	4b0a      	ldr	r3, [pc, #40]	; (80198 <adc_init+0x38>)
   8016e:	2202      	movs	r2, #2
   80170:	611a      	str	r2, [r3, #16]
   80172:	2180      	movs	r1, #128	; 0x80
   80174:	6059      	str	r1, [r3, #4]
   80176:	601a      	str	r2, [r3, #0]
   80178:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   8017c:	625a      	str	r2, [r3, #36]	; 0x24
   8017e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   80180:	641a      	str	r2, [r3, #64]	; 0x40
   80182:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   80184:	f042 0210 	orr.w	r2, r2, #16
   80188:	641a      	str	r2, [r3, #64]	; 0x40
   8018a:	220f      	movs	r2, #15
   8018c:	645a      	str	r2, [r3, #68]	; 0x44
   8018e:	4770      	bx	lr
   80190:	400e0600 	.word	0x400e0600
   80194:	e000e100 	.word	0xe000e100
   80198:	400c0000 	.word	0x400c0000

0008019c <get_total_goals>:
uint8_t TOTAL_GOALS = 0;
static uint32_t last_goal_time = 0;

uint8_t get_total_goals(){
	 return TOTAL_GOALS;
 }
   8019c:	4b01      	ldr	r3, [pc, #4]	; (801a4 <get_total_goals+0x8>)
   8019e:	7818      	ldrb	r0, [r3, #0]
   801a0:	4770      	bx	lr
   801a2:	bf00      	nop
   801a4:	20000474 	.word	0x20000474

000801a8 <get_goal_flag>:

uint8_t get_goal_flag(){
	 return goal_flag;
 }
   801a8:	4b01      	ldr	r3, [pc, #4]	; (801b0 <get_goal_flag+0x8>)
   801aa:	7858      	ldrb	r0, [r3, #1]
   801ac:	4770      	bx	lr
   801ae:	bf00      	nop
   801b0:	20000474 	.word	0x20000474

000801b4 <reset_goal_flag>:

 void reset_goal_flag(){
	 goal_flag = 0;
   801b4:	2200      	movs	r2, #0
   801b6:	4b01      	ldr	r3, [pc, #4]	; (801bc <reset_goal_flag+0x8>)
   801b8:	705a      	strb	r2, [r3, #1]
   801ba:	4770      	bx	lr
   801bc:	20000474 	.word	0x20000474

000801c0 <ADC_Handler>:
 }

void ADC_Handler( void ){
   801c0:	b510      	push	{r4, lr}
	//printf("Aa");
	if(last_goal_time + 800 < return_milliseconds()){
   801c2:	4b0e      	ldr	r3, [pc, #56]	; (801fc <ADC_Handler+0x3c>)
   801c4:	685c      	ldr	r4, [r3, #4]
   801c6:	f504 7448 	add.w	r4, r4, #800	; 0x320
   801ca:	4b0d      	ldr	r3, [pc, #52]	; (80200 <ADC_Handler+0x40>)
   801cc:	4798      	blx	r3
   801ce:	4284      	cmp	r4, r0
   801d0:	d309      	bcc.n	801e6 <ADC_Handler+0x26>
		TOTAL_GOALS += 1;
		last_goal_time = return_milliseconds();
		goal_flag = 1;
	}

	change_motor_speed_using_paadrag(0);
   801d2:	2000      	movs	r0, #0
   801d4:	4b0b      	ldr	r3, [pc, #44]	; (80204 <ADC_Handler+0x44>)
   801d6:	4798      	blx	r3

	int i = ADC->ADC_ISR;
   801d8:	4b0b      	ldr	r3, [pc, #44]	; (80208 <ADC_Handler+0x48>)
   801da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   801dc:	2220      	movs	r2, #32
   801de:	4b0b      	ldr	r3, [pc, #44]	; (8020c <ADC_Handler+0x4c>)
   801e0:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   801e4:	bd10      	pop	{r4, pc}
		TOTAL_GOALS += 1;
   801e6:	4c05      	ldr	r4, [pc, #20]	; (801fc <ADC_Handler+0x3c>)
   801e8:	7823      	ldrb	r3, [r4, #0]
   801ea:	3301      	adds	r3, #1
   801ec:	7023      	strb	r3, [r4, #0]
		last_goal_time = return_milliseconds();
   801ee:	4b04      	ldr	r3, [pc, #16]	; (80200 <ADC_Handler+0x40>)
   801f0:	4798      	blx	r3
   801f2:	6060      	str	r0, [r4, #4]
		goal_flag = 1;
   801f4:	2301      	movs	r3, #1
   801f6:	7063      	strb	r3, [r4, #1]
   801f8:	e7eb      	b.n	801d2 <ADC_Handler+0x12>
   801fa:	bf00      	nop
   801fc:	20000474 	.word	0x20000474
   80200:	00081069 	.word	0x00081069
   80204:	00080875 	.word	0x00080875
   80208:	400c0000 	.word	0x400c0000
   8020c:	e000e100 	.word	0xe000e100

00080210 <can_init>:
 * \retval Success(0) or failure(1)
 */


uint8_t can_init(uint32_t can_br, uint8_t num_tx_mb, uint8_t num_rx_mb)
{
   80210:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	
	//Make sure num_rx_mb and num_tx_mb is valid
	if(num_rx_mb > 8 | num_tx_mb > 8 | num_rx_mb + num_tx_mb > 8)
   80214:	1855      	adds	r5, r2, r1
   80216:	2908      	cmp	r1, #8
   80218:	bf98      	it	ls
   8021a:	2a08      	cmpls	r2, #8
   8021c:	d864      	bhi.n	802e8 <can_init+0xd8>
   8021e:	460e      	mov	r6, r1
   80220:	2d08      	cmp	r5, #8
   80222:	dc61      	bgt.n	802e8 <can_init+0xd8>


	uint32_t ul_status; 
	
	//Disable can
	CAN0->CAN_MR &= ~CAN_MR_CANEN; 
   80224:	4a32      	ldr	r2, [pc, #200]	; (802f0 <can_init+0xe0>)
   80226:	6813      	ldr	r3, [r2, #0]
   80228:	f023 0301 	bic.w	r3, r3, #1
   8022c:	6013      	str	r3, [r2, #0]
	//Clear status register on read
	ul_status = CAN0->CAN_SR; 
   8022e:	6913      	ldr	r3, [r2, #16]
	
	
	// Disable interrupts on CANH and CANL pins
	PIOA->PIO_IDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80230:	4b30      	ldr	r3, [pc, #192]	; (802f4 <can_init+0xe4>)
   80232:	f44f 7440 	mov.w	r4, #768	; 0x300
   80236:	645c      	str	r4, [r3, #68]	; 0x44
	
	//Select CAN0 RX and TX in PIOA
	uint32_t ul_sr = PIOA->PIO_ABSR;
   80238:	6f1c      	ldr	r4, [r3, #112]	; 0x70
	PIOA->PIO_ABSR = ~(PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0) & ul_sr;
   8023a:	f024 0403 	bic.w	r4, r4, #3
   8023e:	671c      	str	r4, [r3, #112]	; 0x70
	
	// Disable the Parallel IO (PIO) of the Rx and Tx pins so that the peripheral controller can use them
	PIOA->PIO_PDR = PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0;
   80240:	2403      	movs	r4, #3
   80242:	605c      	str	r4, [r3, #4]
	
	// Enable pull up on CANH and CANL pin
	PIOA->PIO_PUER = (PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0);
   80244:	665c      	str	r4, [r3, #100]	; 0x64
	
	
	//Enable Clock for CAN0 in PMC
	PMC->PMC_PCR = PMC_PCR_EN | (0 << PMC_PCR_DIV_Pos) | PMC_PCR_CMD | (ID_CAN0 << PMC_PCR_PID_Pos); // DIV = 1(can clk = MCK/2), CMD = 1 (write), PID = 2B (CAN0)
   80246:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   8024a:	4c2b      	ldr	r4, [pc, #172]	; (802f8 <can_init+0xe8>)
   8024c:	f8c3 410c 	str.w	r4, [r3, #268]	; 0x10c
	PMC->PMC_PCER1 |= 1 << (ID_CAN0 - 32);
   80250:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
   80254:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
   80258:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
	
	//Set baudrate, Phase1, phase2 and propagation delay for can bus. Must match on all nodes!
	CAN0->CAN_BR = can_br; 
   8025c:	6150      	str	r0, [r2, #20]
	/****** Start of mailbox configuration ******/

	uint32_t can_ier = 0;

	/* Configure receive mailboxes */
	for (int n = num_tx_mb; n <= num_rx_mb + num_tx_mb; n++)  //Simply one mailbox setup for all messages. You might want to apply filter for them.
   8025e:	42a9      	cmp	r1, r5
   80260:	dc40      	bgt.n	802e4 <can_init+0xd4>
   80262:	460a      	mov	r2, r1
   80264:	2400      	movs	r4, #0
	{
		CAN0->CAN_MB[n].CAN_MAM = 0; //Accept all messages
   80266:	46a1      	mov	r9, r4
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   80268:	f8df 8084 	ldr.w	r8, [pc, #132]	; 802f0 <can_init+0xe0>
   8026c:	f04f 5c00 	mov.w	ip, #536870912	; 0x20000000
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_RX);
   80270:	f04f 7e80 	mov.w	lr, #16777216	; 0x1000000
		CAN0->CAN_MB[n].CAN_MCR |= CAN_MCR_MTCR;

		can_ier |= 1 << n; //Enable interrupt on rx mailbox
   80274:	2701      	movs	r7, #1
   80276:	0153      	lsls	r3, r2, #5
   80278:	f103 2040 	add.w	r0, r3, #1073758208	; 0x40004000
   8027c:	f500 2030 	add.w	r0, r0, #720896	; 0xb0000
		CAN0->CAN_MB[n].CAN_MAM = 0; //Accept all messages
   80280:	f8c0 9204 	str.w	r9, [r0, #516]	; 0x204
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   80284:	4443      	add	r3, r8
   80286:	f8c3 c208 	str.w	ip, [r3, #520]	; 0x208
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_RX);
   8028a:	f8c0 e200 	str.w	lr, [r0, #512]	; 0x200
		CAN0->CAN_MB[n].CAN_MCR |= CAN_MCR_MTCR;
   8028e:	f8d3 021c 	ldr.w	r0, [r3, #540]	; 0x21c
   80292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   80296:	f8c3 021c 	str.w	r0, [r3, #540]	; 0x21c
		can_ier |= 1 << n; //Enable interrupt on rx mailbox
   8029a:	fa07 f302 	lsl.w	r3, r7, r2
   8029e:	431c      	orrs	r4, r3
	for (int n = num_tx_mb; n <= num_rx_mb + num_tx_mb; n++)  //Simply one mailbox setup for all messages. You might want to apply filter for them.
   802a0:	3201      	adds	r2, #1
   802a2:	4295      	cmp	r5, r2
   802a4:	dae7      	bge.n	80276 <can_init+0x66>
	}
	
	/*Configure transmit mailboxes */
	for (int n = 0; n < num_tx_mb; n++)
   802a6:	b181      	cbz	r1, 802ca <can_init+0xba>
   802a8:	2300      	movs	r3, #0
	{
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   802aa:	4911      	ldr	r1, [pc, #68]	; (802f0 <can_init+0xe0>)
   802ac:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_TX);
   802b0:	f04f 7040 	mov.w	r0, #50331648	; 0x3000000
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   802b4:	eb01 1243 	add.w	r2, r1, r3, lsl #5
   802b8:	f8c2 5208 	str.w	r5, [r2, #520]	; 0x208
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_TX);
   802bc:	f103 0210 	add.w	r2, r3, #16
   802c0:	0152      	lsls	r2, r2, #5
   802c2:	5088      	str	r0, [r1, r2]
	for (int n = 0; n < num_tx_mb; n++)
   802c4:	3301      	adds	r3, #1
   802c6:	429e      	cmp	r6, r3
   802c8:	d1f4      	bne.n	802b4 <can_init+0xa4>
	}
	
	/****** End of mailbox configuraion ******/

	//Enable interrupt on receive mailboxes
	CAN0->CAN_IER = can_ier;
   802ca:	4b09      	ldr	r3, [pc, #36]	; (802f0 <can_init+0xe0>)
   802cc:	605c      	str	r4, [r3, #4]
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   802ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
   802d2:	4a0a      	ldr	r2, [pc, #40]	; (802fc <can_init+0xec>)
   802d4:	6051      	str	r1, [r2, #4]

	//Enable interrupt in NVIC 
	NVIC_EnableIRQ(ID_CAN0);

	//enable CAN
	CAN0->CAN_MR |= CAN_MR_CANEN;
   802d6:	681a      	ldr	r2, [r3, #0]
   802d8:	f042 0201 	orr.w	r2, r2, #1
   802dc:	601a      	str	r2, [r3, #0]

	return 0;
   802de:	2000      	movs	r0, #0
   802e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint32_t can_ier = 0;
   802e4:	2400      	movs	r4, #0
   802e6:	e7de      	b.n	802a6 <can_init+0x96>
		return 1; //Too many mailboxes is configured
   802e8:	2001      	movs	r0, #1
}
   802ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   802ee:	bf00      	nop
   802f0:	400b4000 	.word	0x400b4000
   802f4:	400e0e00 	.word	0x400e0e00
   802f8:	1000102b 	.word	0x1000102b
   802fc:	e000e100 	.word	0xe000e100

00080300 <can_init_def_tx_rx_mb>:
{
   80300:	b508      	push	{r3, lr}
	return can_init(can_br, 1, 2);
   80302:	2202      	movs	r2, #2
   80304:	2101      	movs	r1, #1
   80306:	4b01      	ldr	r3, [pc, #4]	; (8030c <can_init_def_tx_rx_mb+0xc>)
   80308:	4798      	blx	r3
}
   8030a:	bd08      	pop	{r3, pc}
   8030c:	00080211 	.word	0x00080211

00080310 <can_send>:
 * \retval Success(0) or failure(1)
 */
uint8_t can_send(CAN_MESSAGE* can_msg, uint8_t tx_mb_id)
{
	//Check that mailbox is ready
	if(CAN0->CAN_MB[tx_mb_id].CAN_MSR & CAN_MSR_MRDY)
   80310:	014b      	lsls	r3, r1, #5
   80312:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   80316:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   8031a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   8031e:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   80322:	d036      	beq.n	80392 <can_send+0x82>
	{
		//Set message ID and use CAN 2.0B protocol
		CAN0->CAN_MB[tx_mb_id].CAN_MID = CAN_MID_MIDvA(can_msg->id) | CAN_MID_MIDE ;
   80324:	8803      	ldrh	r3, [r0, #0]
   80326:	4a1c      	ldr	r2, [pc, #112]	; (80398 <can_send+0x88>)
   80328:	ea02 4283 	and.w	r2, r2, r3, lsl #18
   8032c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   80330:	014b      	lsls	r3, r1, #5
   80332:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   80336:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   8033a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
		
		//Make sure message is not to long
		if(can_msg->data_length > 7){
   8033e:	7883      	ldrb	r3, [r0, #2]
   80340:	2b07      	cmp	r3, #7
			can_msg->data_length = 7;
   80342:	bf84      	itt	hi
   80344:	2307      	movhi	r3, #7
   80346:	7083      	strbhi	r3, [r0, #2]
			//Message is to long, sending only the first 8 bytes
		}
		//Put message in can data registers
		CAN0->CAN_MB[tx_mb_id].CAN_MDL = can_msg->data[3] << 24 | can_msg->data[2] << 16 | can_msg->data[1] << 8 | can_msg->data[0];
   80348:	7982      	ldrb	r2, [r0, #6]
   8034a:	7943      	ldrb	r3, [r0, #5]
   8034c:	041b      	lsls	r3, r3, #16
   8034e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   80352:	78c2      	ldrb	r2, [r0, #3]
   80354:	4313      	orrs	r3, r2
   80356:	7902      	ldrb	r2, [r0, #4]
   80358:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   8035c:	0149      	lsls	r1, r1, #5
   8035e:	f101 2140 	add.w	r1, r1, #1073758208	; 0x40004000
   80362:	f501 2130 	add.w	r1, r1, #720896	; 0xb0000
   80366:	f8c1 3214 	str.w	r3, [r1, #532]	; 0x214
		CAN0->CAN_MB[tx_mb_id].CAN_MDH = can_msg->data[7] << 24 | can_msg->data[6] << 16 | can_msg->data[5] << 8 | can_msg->data[4];
   8036a:	7a82      	ldrb	r2, [r0, #10]
   8036c:	7a43      	ldrb	r3, [r0, #9]
   8036e:	041b      	lsls	r3, r3, #16
   80370:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   80374:	79c2      	ldrb	r2, [r0, #7]
   80376:	4313      	orrs	r3, r2
   80378:	7a02      	ldrb	r2, [r0, #8]
   8037a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   8037e:	f8c1 3218 	str.w	r3, [r1, #536]	; 0x218
		
		//Set message length and mailbox ready to send
		CAN0->CAN_MB[tx_mb_id].CAN_MCR = (can_msg->data_length << CAN_MCR_MDLC_Pos) | CAN_MCR_MTCR;
   80382:	7883      	ldrb	r3, [r0, #2]
   80384:	041b      	lsls	r3, r3, #16
   80386:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   8038a:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c
		return 0;
   8038e:	2000      	movs	r0, #0
   80390:	4770      	bx	lr
	}
	
	else //Mailbox busy
	{
		return 1;
   80392:	2001      	movs	r0, #1
	}
	
}
   80394:	4770      	bx	lr
   80396:	bf00      	nop
   80398:	1ffc0000 	.word	0x1ffc0000

0008039c <can_receive>:
 */
uint8_t can_receive(CAN_MESSAGE* can_msg, uint8_t rx_mb_id)
{	
	
	//Check that mailbox is ready
	if(CAN0->CAN_MB[rx_mb_id].CAN_MSR & CAN_MSR_MRDY)
   8039c:	014b      	lsls	r3, r1, #5
   8039e:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   803a2:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   803a6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   803aa:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   803ae:	d033      	beq.n	80418 <can_receive+0x7c>
{	
   803b0:	b430      	push	{r4, r5}
	{
		//Get data from CAN mailbox
		uint32_t data_low = CAN0->CAN_MB[rx_mb_id].CAN_MDL;
   803b2:	014b      	lsls	r3, r1, #5
   803b4:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   803b8:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   803bc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
		uint32_t data_high = CAN0->CAN_MB[rx_mb_id].CAN_MDH;
   803c0:	f8d3 4218 	ldr.w	r4, [r3, #536]	; 0x218
		
		//Get message ID
		can_msg->id = (uint16_t)((CAN0->CAN_MB[rx_mb_id].CAN_MID & CAN_MID_MIDvA_Msk) >> CAN_MID_MIDvA_Pos);
   803c4:	f8d3 5208 	ldr.w	r5, [r3, #520]	; 0x208
   803c8:	f3c5 458a 	ubfx	r5, r5, #18, #11
   803cc:	8005      	strh	r5, [r0, #0]
		
		//Get data length
		can_msg->data_length = (uint8_t)((CAN0->CAN_MB[rx_mb_id].CAN_MSR & CAN_MSR_MDLC_Msk) >> CAN_MSR_MDLC_Pos);
   803ce:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   803d2:	f3c3 4303 	ubfx	r3, r3, #16, #4
   803d6:	7083      	strb	r3, [r0, #2]
		
		//Put data in CAN_MESSAGE object
		for(int i = 0; i < can_msg->data_length;i++)
   803d8:	461d      	mov	r5, r3
   803da:	b15b      	cbz	r3, 803f4 <can_receive+0x58>
   803dc:	3003      	adds	r0, #3
   803de:	2300      	movs	r3, #0
		{
			if(i < 4)
   803e0:	2b03      	cmp	r3, #3
			{
				can_msg->data[i] = (char)(data_low & 0xff);
   803e2:	bfd9      	ittee	le
   803e4:	7002      	strble	r2, [r0, #0]
				data_low = data_low >> 8;
   803e6:	0a12      	lsrle	r2, r2, #8
			}
			else
			{
				can_msg->data[i] = (uint8_t)(data_high & 0xff);
   803e8:	7004      	strbgt	r4, [r0, #0]
				data_high = data_high >> 8;
   803ea:	0a24      	lsrgt	r4, r4, #8
		for(int i = 0; i < can_msg->data_length;i++)
   803ec:	3301      	adds	r3, #1
   803ee:	3001      	adds	r0, #1
   803f0:	42ab      	cmp	r3, r5
   803f2:	d1f5      	bne.n	803e0 <can_receive+0x44>
			}
		}
		
		//Reset for new receive
		CAN0->CAN_MB[rx_mb_id].CAN_MMR = CAN_MMR_MOT_MB_RX;
   803f4:	4b09      	ldr	r3, [pc, #36]	; (8041c <can_receive+0x80>)
   803f6:	f101 0210 	add.w	r2, r1, #16
   803fa:	0152      	lsls	r2, r2, #5
   803fc:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   80400:	5098      	str	r0, [r3, r2]
		CAN0->CAN_MB[rx_mb_id].CAN_MCR |= CAN_MCR_MTCR;
   80402:	eb03 1141 	add.w	r1, r3, r1, lsl #5
   80406:	f8d1 321c 	ldr.w	r3, [r1, #540]	; 0x21c
   8040a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   8040e:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c
		return 0;
   80412:	2000      	movs	r0, #0
	}
	else //Mailbox busy
	{
		return 1;
	}
}
   80414:	bc30      	pop	{r4, r5}
   80416:	4770      	bx	lr
		return 1;
   80418:	2001      	movs	r0, #1
   8041a:	4770      	bx	lr
   8041c:	400b4000 	.word	0x400b4000

00080420 <CAN0_Handler>:
 * \param void
 *
 * \retval 
 */
void CAN0_Handler( void )
{
   80420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80424:	b084      	sub	sp, #16
	if(DEBUG_INTERRUPT){}/*printf("CAN0 interrupt\n\r")*/;
	char can_sr = CAN0->CAN_SR; 
   80426:	4b4d      	ldr	r3, [pc, #308]	; (8055c <CAN0_Handler+0x13c>)
   80428:	691c      	ldr	r4, [r3, #16]
	
	//RX interrupt
	if(can_sr & (CAN_SR_MB1 | CAN_SR_MB2) )//Only mailbox 1 and 2 specified for receiving
   8042a:	f014 0f06 	tst.w	r4, #6
   8042e:	d039      	beq.n	804a4 <CAN0_Handler+0x84>
	{
		CAN_MESSAGE message;
		if(can_sr & CAN_SR_MB1)  //Mailbox 1 event
   80430:	f014 0f02 	tst.w	r4, #2
   80434:	d144      	bne.n	804c0 <CAN0_Handler+0xa0>
		{
			can_receive(&message, 1);

		}
		else if(can_sr & CAN_SR_MB2) //Mailbox 2 event
   80436:	f014 0f04 	tst.w	r4, #4
   8043a:	d046      	beq.n	804ca <CAN0_Handler+0xaa>
		
		{
			can_receive(&message, 2);
   8043c:	2102      	movs	r1, #2
   8043e:	a801      	add	r0, sp, #4
   80440:	4b47      	ldr	r3, [pc, #284]	; (80560 <CAN0_Handler+0x140>)
   80442:	4798      	blx	r3
		else
		{
			printf("CAN0 message arrived in non-used mailbox\n\r");
		}
		
		if(message.id < 0x00ff && message.id > 0x000f){
   80444:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   80448:	f1a1 0310 	sub.w	r3, r1, #16
   8044c:	b29b      	uxth	r3, r3
   8044e:	2bee      	cmp	r3, #238	; 0xee
   80450:	d83f      	bhi.n	804d2 <CAN0_Handler+0xb2>
			//interpret_joystick
/*
			printf("Joystick %d \n\r", message.id);
			printf("Joystick %d \n\r", message.data[5]);
*/
			joystick.x_val = (message.data[3] == 0x11) ? message.data[0] : message.data[0]*-1;
   80452:	f89d 300a 	ldrb.w	r3, [sp, #10]
   80456:	2b11      	cmp	r3, #17
   80458:	bf0f      	iteee	eq
   8045a:	f99d 3007 	ldrsbeq.w	r3, [sp, #7]
   8045e:	f89d 3007 	ldrbne.w	r3, [sp, #7]
   80462:	425b      	negne	r3, r3
   80464:	b25b      	sxtbne	r3, r3
   80466:	4a3f      	ldr	r2, [pc, #252]	; (80564 <CAN0_Handler+0x144>)
   80468:	7013      	strb	r3, [r2, #0]
			joystick.y_val = (message.data[4] == 0x11) ? message.data[1] : message.data[1]*-1;
   8046a:	f89d 300b 	ldrb.w	r3, [sp, #11]
   8046e:	2b11      	cmp	r3, #17
   80470:	bf0f      	iteee	eq
   80472:	f99d 2008 	ldrsbeq.w	r2, [sp, #8]
   80476:	f89d 2008 	ldrbne.w	r2, [sp, #8]
   8047a:	4252      	negne	r2, r2
   8047c:	b252      	sxtbne	r2, r2
   8047e:	4b39      	ldr	r3, [pc, #228]	; (80564 <CAN0_Handler+0x144>)
   80480:	705a      	strb	r2, [r3, #1]
			joystick.butt_pressed = message.data[2];
   80482:	f89d 2009 	ldrb.w	r2, [sp, #9]
   80486:	709a      	strb	r2, [r3, #2]
			joystick.left_val = message.data[5];
   80488:	f89d 200c 	ldrb.w	r2, [sp, #12]
   8048c:	70da      	strb	r2, [r3, #3]
			joystick.right_val = message.data[6];
   8048e:	f89d 200d 	ldrb.w	r2, [sp, #13]
   80492:	711a      	strb	r2, [r3, #4]
			joystick.left_button = message.data[7] & 0b00000010;
   80494:	f99d 200e 	ldrsb.w	r2, [sp, #14]
   80498:	f002 0102 	and.w	r1, r2, #2
   8049c:	7159      	strb	r1, [r3, #5]
			joystick.right_button = message.data[7] & 0b00000001;
   8049e:	f002 0201 	and.w	r2, r2, #1
   804a2:	719a      	strb	r2, [r3, #6]
			if(DEBUG_INTERRUPT)printf("\n\r");
		}
		
	}
	
	if(can_sr & CAN_SR_MB0)
   804a4:	f014 0f01 	tst.w	r4, #1
   804a8:	d002      	beq.n	804b0 <CAN0_Handler+0x90>
	{
		/*if(DEBUG_INTERRUPT) printf("CAN0 MB0 ready to send \n\r");*/
		
	//Disable interrupt
		CAN0->CAN_IDR = CAN_IER_MB0;
   804aa:	2201      	movs	r2, #1
   804ac:	4b2b      	ldr	r3, [pc, #172]	; (8055c <CAN0_Handler+0x13c>)
   804ae:	609a      	str	r2, [r3, #8]
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   804b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
   804b4:	4b2c      	ldr	r3, [pc, #176]	; (80568 <CAN0_Handler+0x148>)
   804b6:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184

	}
	
	NVIC_ClearPendingIRQ(ID_CAN0);
	//sei();*/
}
   804ba:	b004      	add	sp, #16
   804bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			can_receive(&message, 1);
   804c0:	2101      	movs	r1, #1
   804c2:	a801      	add	r0, sp, #4
   804c4:	4b26      	ldr	r3, [pc, #152]	; (80560 <CAN0_Handler+0x140>)
   804c6:	4798      	blx	r3
   804c8:	e7bc      	b.n	80444 <CAN0_Handler+0x24>
			printf("CAN0 message arrived in non-used mailbox\n\r");
   804ca:	4828      	ldr	r0, [pc, #160]	; (8056c <CAN0_Handler+0x14c>)
   804cc:	4b28      	ldr	r3, [pc, #160]	; (80570 <CAN0_Handler+0x150>)
   804ce:	4798      	blx	r3
   804d0:	e7b8      	b.n	80444 <CAN0_Handler+0x24>
		else if(message.id == 0x6){
   804d2:	2906      	cmp	r1, #6
   804d4:	d022      	beq.n	8051c <CAN0_Handler+0xfc>
		else if(message.id == 0x4){//start signal
   804d6:	2904      	cmp	r1, #4
   804d8:	d02f      	beq.n	8053a <CAN0_Handler+0x11a>
		else if(message.id == 0x3){//stop signal
   804da:	2903      	cmp	r1, #3
   804dc:	d032      	beq.n	80544 <CAN0_Handler+0x124>
		else if(message.id == 0x2){//game start signal
   804de:	2902      	cmp	r1, #2
   804e0:	d039      	beq.n	80556 <CAN0_Handler+0x136>
			if(DEBUG_INTERRUPT)printf("message id: %d\n\r", message.id);
   804e2:	4824      	ldr	r0, [pc, #144]	; (80574 <CAN0_Handler+0x154>)
   804e4:	4d22      	ldr	r5, [pc, #136]	; (80570 <CAN0_Handler+0x150>)
   804e6:	47a8      	blx	r5
			if(DEBUG_INTERRUPT)printf("message data length: %d\n\r", message.data_length);
   804e8:	f89d 1006 	ldrb.w	r1, [sp, #6]
   804ec:	4822      	ldr	r0, [pc, #136]	; (80578 <CAN0_Handler+0x158>)
   804ee:	47a8      	blx	r5
			for (int i = 0; i < message.data_length; i++)
   804f0:	f89d 3006 	ldrb.w	r3, [sp, #6]
   804f4:	b173      	cbz	r3, 80514 <CAN0_Handler+0xf4>
   804f6:	f10d 0607 	add.w	r6, sp, #7
   804fa:	2500      	movs	r5, #0
				if(DEBUG_INTERRUPT)printf("%d ", message.data[i]);
   804fc:	f8df 8094 	ldr.w	r8, [pc, #148]	; 80594 <CAN0_Handler+0x174>
   80500:	4f1b      	ldr	r7, [pc, #108]	; (80570 <CAN0_Handler+0x150>)
   80502:	f816 1b01 	ldrb.w	r1, [r6], #1
   80506:	4640      	mov	r0, r8
   80508:	47b8      	blx	r7
			for (int i = 0; i < message.data_length; i++)
   8050a:	3501      	adds	r5, #1
   8050c:	f89d 3006 	ldrb.w	r3, [sp, #6]
   80510:	42ab      	cmp	r3, r5
   80512:	dcf6      	bgt.n	80502 <CAN0_Handler+0xe2>
			if(DEBUG_INTERRUPT)printf("\n\r");
   80514:	4819      	ldr	r0, [pc, #100]	; (8057c <CAN0_Handler+0x15c>)
   80516:	4b16      	ldr	r3, [pc, #88]	; (80570 <CAN0_Handler+0x150>)
   80518:	4798      	blx	r3
   8051a:	e7c3      	b.n	804a4 <CAN0_Handler+0x84>
			if(message.data[0] == 1){ //easy
   8051c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   80520:	2b01      	cmp	r3, #1
   80522:	d006      	beq.n	80532 <CAN0_Handler+0x112>
			else if(message.data[0] == 3){ //hard
   80524:	2b03      	cmp	r3, #3
				set_difficulty(3);
   80526:	bf0c      	ite	eq
   80528:	2003      	moveq	r0, #3
				set_difficulty(2);
   8052a:	2002      	movne	r0, #2
   8052c:	4b14      	ldr	r3, [pc, #80]	; (80580 <CAN0_Handler+0x160>)
   8052e:	4798      	blx	r3
   80530:	e7b8      	b.n	804a4 <CAN0_Handler+0x84>
				set_difficulty(1);
   80532:	2001      	movs	r0, #1
   80534:	4b12      	ldr	r3, [pc, #72]	; (80580 <CAN0_Handler+0x160>)
   80536:	4798      	blx	r3
   80538:	e7b4      	b.n	804a4 <CAN0_Handler+0x84>
			starttime = return_milliseconds();
   8053a:	4b12      	ldr	r3, [pc, #72]	; (80584 <CAN0_Handler+0x164>)
   8053c:	4798      	blx	r3
   8053e:	4b12      	ldr	r3, [pc, #72]	; (80588 <CAN0_Handler+0x168>)
   80540:	8018      	strh	r0, [r3, #0]
   80542:	e7af      	b.n	804a4 <CAN0_Handler+0x84>
			send_reaction_time_to_node_1(&message, return_milliseconds()-starttime);
   80544:	4b0f      	ldr	r3, [pc, #60]	; (80584 <CAN0_Handler+0x164>)
   80546:	4798      	blx	r3
   80548:	4b0f      	ldr	r3, [pc, #60]	; (80588 <CAN0_Handler+0x168>)
   8054a:	8819      	ldrh	r1, [r3, #0]
   8054c:	1a41      	subs	r1, r0, r1
   8054e:	a801      	add	r0, sp, #4
   80550:	4b0e      	ldr	r3, [pc, #56]	; (8058c <CAN0_Handler+0x16c>)
   80552:	4798      	blx	r3
   80554:	e7a6      	b.n	804a4 <CAN0_Handler+0x84>
			set_starttime();
   80556:	4b0e      	ldr	r3, [pc, #56]	; (80590 <CAN0_Handler+0x170>)
   80558:	4798      	blx	r3
   8055a:	e7a3      	b.n	804a4 <CAN0_Handler+0x84>
   8055c:	400b4000 	.word	0x400b4000
   80560:	0008039d 	.word	0x0008039d
   80564:	200004b0 	.word	0x200004b0
   80568:	e000e100 	.word	0xe000e100
   8056c:	00081c60 	.word	0x00081c60
   80570:	00081021 	.word	0x00081021
   80574:	00081c8c 	.word	0x00081c8c
   80578:	00081ca0 	.word	0x00081ca0
   8057c:	00081c88 	.word	0x00081c88
   80580:	00080d4d 	.word	0x00080d4d
   80584:	00081069 	.word	0x00081069
   80588:	2000047c 	.word	0x2000047c
   8058c:	000807bd 	.word	0x000807bd
   80590:	00081099 	.word	0x00081099
   80594:	00081cbc 	.word	0x00081cbc

00080598 <dac_init>:
   80598:	2240      	movs	r2, #64	; 0x40
   8059a:	4b09      	ldr	r3, [pc, #36]	; (805c0 <dac_init+0x28>)
   8059c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   805a0:	f5a3 33c3 	sub.w	r3, r3, #99840	; 0x18600
   805a4:	685a      	ldr	r2, [r3, #4]
   805a6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
   805aa:	605a      	str	r2, [r3, #4]
   805ac:	685a      	ldr	r2, [r3, #4]
   805ae:	f022 0201 	bic.w	r2, r2, #1
   805b2:	605a      	str	r2, [r3, #4]
   805b4:	2202      	movs	r2, #2
   805b6:	611a      	str	r2, [r3, #16]
   805b8:	f240 52ff 	movw	r2, #1535	; 0x5ff
   805bc:	621a      	str	r2, [r3, #32]
   805be:	4770      	bx	lr
   805c0:	400e0600 	.word	0x400e0600

000805c4 <Dummy_Handler>:
   805c4:	e7fe      	b.n	805c4 <Dummy_Handler>
	...

000805c8 <Reset_Handler>:
   805c8:	b508      	push	{r3, lr}
   805ca:	4b18      	ldr	r3, [pc, #96]	; (8062c <Reset_Handler+0x64>)
   805cc:	4a18      	ldr	r2, [pc, #96]	; (80630 <Reset_Handler+0x68>)
   805ce:	429a      	cmp	r2, r3
   805d0:	d010      	beq.n	805f4 <Reset_Handler+0x2c>
   805d2:	4b18      	ldr	r3, [pc, #96]	; (80634 <Reset_Handler+0x6c>)
   805d4:	4a15      	ldr	r2, [pc, #84]	; (8062c <Reset_Handler+0x64>)
   805d6:	429a      	cmp	r2, r3
   805d8:	d20c      	bcs.n	805f4 <Reset_Handler+0x2c>
   805da:	3b01      	subs	r3, #1
   805dc:	1a9b      	subs	r3, r3, r2
   805de:	f023 0303 	bic.w	r3, r3, #3
   805e2:	3304      	adds	r3, #4
   805e4:	4413      	add	r3, r2
   805e6:	4912      	ldr	r1, [pc, #72]	; (80630 <Reset_Handler+0x68>)
   805e8:	f851 0b04 	ldr.w	r0, [r1], #4
   805ec:	f842 0b04 	str.w	r0, [r2], #4
   805f0:	429a      	cmp	r2, r3
   805f2:	d1f9      	bne.n	805e8 <Reset_Handler+0x20>
   805f4:	4b10      	ldr	r3, [pc, #64]	; (80638 <Reset_Handler+0x70>)
   805f6:	4a11      	ldr	r2, [pc, #68]	; (8063c <Reset_Handler+0x74>)
   805f8:	429a      	cmp	r2, r3
   805fa:	d20a      	bcs.n	80612 <Reset_Handler+0x4a>
   805fc:	3b01      	subs	r3, #1
   805fe:	1a9b      	subs	r3, r3, r2
   80600:	f023 0303 	bic.w	r3, r3, #3
   80604:	3304      	adds	r3, #4
   80606:	4413      	add	r3, r2
   80608:	2100      	movs	r1, #0
   8060a:	f842 1b04 	str.w	r1, [r2], #4
   8060e:	4293      	cmp	r3, r2
   80610:	d1fb      	bne.n	8060a <Reset_Handler+0x42>
   80612:	4b0b      	ldr	r3, [pc, #44]	; (80640 <Reset_Handler+0x78>)
   80614:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   80618:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   8061c:	4a09      	ldr	r2, [pc, #36]	; (80644 <Reset_Handler+0x7c>)
   8061e:	6093      	str	r3, [r2, #8]
   80620:	4b09      	ldr	r3, [pc, #36]	; (80648 <Reset_Handler+0x80>)
   80622:	4798      	blx	r3
   80624:	4b09      	ldr	r3, [pc, #36]	; (8064c <Reset_Handler+0x84>)
   80626:	4798      	blx	r3
   80628:	e7fe      	b.n	80628 <Reset_Handler+0x60>
   8062a:	bf00      	nop
   8062c:	20000000 	.word	0x20000000
   80630:	00081d94 	.word	0x00081d94
   80634:	20000454 	.word	0x20000454
   80638:	20000520 	.word	0x20000520
   8063c:	20000458 	.word	0x20000458
   80640:	00080000 	.word	0x00080000
   80644:	e000ed00 	.word	0xe000ed00
   80648:	00081af1 	.word	0x00081af1
   8064c:	00080a69 	.word	0x00080a69

00080650 <SystemInit>:
   80650:	f44f 6380 	mov.w	r3, #1024	; 0x400
   80654:	4a20      	ldr	r2, [pc, #128]	; (806d8 <SystemInit+0x88>)
   80656:	6013      	str	r3, [r2, #0]
   80658:	f502 7200 	add.w	r2, r2, #512	; 0x200
   8065c:	6013      	str	r3, [r2, #0]
   8065e:	4b1f      	ldr	r3, [pc, #124]	; (806dc <SystemInit+0x8c>)
   80660:	6a1b      	ldr	r3, [r3, #32]
   80662:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80666:	d107      	bne.n	80678 <SystemInit+0x28>
   80668:	4a1d      	ldr	r2, [pc, #116]	; (806e0 <SystemInit+0x90>)
   8066a:	4b1c      	ldr	r3, [pc, #112]	; (806dc <SystemInit+0x8c>)
   8066c:	621a      	str	r2, [r3, #32]
   8066e:	461a      	mov	r2, r3
   80670:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80672:	f013 0f01 	tst.w	r3, #1
   80676:	d0fb      	beq.n	80670 <SystemInit+0x20>
   80678:	4a1a      	ldr	r2, [pc, #104]	; (806e4 <SystemInit+0x94>)
   8067a:	4b18      	ldr	r3, [pc, #96]	; (806dc <SystemInit+0x8c>)
   8067c:	621a      	str	r2, [r3, #32]
   8067e:	461a      	mov	r2, r3
   80680:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80682:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   80686:	d0fb      	beq.n	80680 <SystemInit+0x30>
   80688:	4a14      	ldr	r2, [pc, #80]	; (806dc <SystemInit+0x8c>)
   8068a:	6b13      	ldr	r3, [r2, #48]	; 0x30
   8068c:	f023 0303 	bic.w	r3, r3, #3
   80690:	f043 0301 	orr.w	r3, r3, #1
   80694:	6313      	str	r3, [r2, #48]	; 0x30
   80696:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80698:	f013 0f08 	tst.w	r3, #8
   8069c:	d0fb      	beq.n	80696 <SystemInit+0x46>
   8069e:	4a12      	ldr	r2, [pc, #72]	; (806e8 <SystemInit+0x98>)
   806a0:	4b0e      	ldr	r3, [pc, #56]	; (806dc <SystemInit+0x8c>)
   806a2:	629a      	str	r2, [r3, #40]	; 0x28
   806a4:	461a      	mov	r2, r3
   806a6:	6e93      	ldr	r3, [r2, #104]	; 0x68
   806a8:	f013 0f02 	tst.w	r3, #2
   806ac:	d0fb      	beq.n	806a6 <SystemInit+0x56>
   806ae:	2211      	movs	r2, #17
   806b0:	4b0a      	ldr	r3, [pc, #40]	; (806dc <SystemInit+0x8c>)
   806b2:	631a      	str	r2, [r3, #48]	; 0x30
   806b4:	461a      	mov	r2, r3
   806b6:	6e93      	ldr	r3, [r2, #104]	; 0x68
   806b8:	f013 0f08 	tst.w	r3, #8
   806bc:	d0fb      	beq.n	806b6 <SystemInit+0x66>
   806be:	2212      	movs	r2, #18
   806c0:	4b06      	ldr	r3, [pc, #24]	; (806dc <SystemInit+0x8c>)
   806c2:	631a      	str	r2, [r3, #48]	; 0x30
   806c4:	461a      	mov	r2, r3
   806c6:	6e93      	ldr	r3, [r2, #104]	; 0x68
   806c8:	f013 0f08 	tst.w	r3, #8
   806cc:	d0fb      	beq.n	806c6 <SystemInit+0x76>
   806ce:	4a07      	ldr	r2, [pc, #28]	; (806ec <SystemInit+0x9c>)
   806d0:	4b07      	ldr	r3, [pc, #28]	; (806f0 <SystemInit+0xa0>)
   806d2:	601a      	str	r2, [r3, #0]
   806d4:	4770      	bx	lr
   806d6:	bf00      	nop
   806d8:	400e0a00 	.word	0x400e0a00
   806dc:	400e0600 	.word	0x400e0600
   806e0:	00370809 	.word	0x00370809
   806e4:	01370809 	.word	0x01370809
   806e8:	200d3f01 	.word	0x200d3f01
   806ec:	0501bd00 	.word	0x0501bd00
   806f0:	20000000 	.word	0x20000000

000806f4 <send_time_to_node_1>:
#include "feedback.h"
#include "can_controller.h"
#include "timer.h"

void send_time_to_node_1(CAN_MESSAGE* msgToSend){
   806f4:	b538      	push	{r3, r4, r5, lr}
   806f6:	4604      	mov	r4, r0
    //Somewhat random test that fails 75% of the time to avoid spamming the CAN bus
	if(!(return_milliseconds()%4)){ 
   806f8:	4b0e      	ldr	r3, [pc, #56]	; (80734 <send_time_to_node_1+0x40>)
   806fa:	4798      	blx	r3
   806fc:	f010 0f03 	tst.w	r0, #3
   80700:	d000      	beq.n	80704 <send_time_to_node_1+0x10>
   80702:	bd38      	pop	{r3, r4, r5, pc}
        msgToSend->data_length = 2;
   80704:	2302      	movs	r3, #2
   80706:	70a3      	strb	r3, [r4, #2]
        //High ID  since this is a non-urgent message
		uint16_t temp = 0x8;
        msgToSend->id = temp;
   80708:	2308      	movs	r3, #8
   8070a:	8023      	strh	r3, [r4, #0]
        msgToSend->data[0] = (uint8_t) (return_seconds() & 0x00FF);
   8070c:	4d0a      	ldr	r5, [pc, #40]	; (80738 <send_time_to_node_1+0x44>)
   8070e:	47a8      	blx	r5
   80710:	70e0      	strb	r0, [r4, #3]
        msgToSend->data[1] = (uint8_t) (return_seconds() & 0xFF00);
   80712:	47a8      	blx	r5
   80714:	2100      	movs	r1, #0
   80716:	7121      	strb	r1, [r4, #4]
		can_send(msgToSend, 0);
   80718:	4620      	mov	r0, r4
   8071a:	4b08      	ldr	r3, [pc, #32]	; (8073c <send_time_to_node_1+0x48>)
   8071c:	4798      	blx	r3
		printf("message id: %x \r\n", msgToSend->id);
   8071e:	8821      	ldrh	r1, [r4, #0]
   80720:	4807      	ldr	r0, [pc, #28]	; (80740 <send_time_to_node_1+0x4c>)
   80722:	4d08      	ldr	r5, [pc, #32]	; (80744 <send_time_to_node_1+0x50>)
   80724:	47a8      	blx	r5
		printf("message length: %x \r\n", msgToSend->data_length);
   80726:	78a1      	ldrb	r1, [r4, #2]
   80728:	4807      	ldr	r0, [pc, #28]	; (80748 <send_time_to_node_1+0x54>)
   8072a:	47a8      	blx	r5
		printf("message data: %d \r\n", msgToSend->data[0]);
   8072c:	78e1      	ldrb	r1, [r4, #3]
   8072e:	4807      	ldr	r0, [pc, #28]	; (8074c <send_time_to_node_1+0x58>)
   80730:	47a8      	blx	r5
	}
}
   80732:	e7e6      	b.n	80702 <send_time_to_node_1+0xe>
   80734:	00081069 	.word	0x00081069
   80738:	00081075 	.word	0x00081075
   8073c:	00080311 	.word	0x00080311
   80740:	00081cc0 	.word	0x00081cc0
   80744:	00081021 	.word	0x00081021
   80748:	00081cd4 	.word	0x00081cd4
   8074c:	00081cec 	.word	0x00081cec

00080750 <send_goal_to_node_1>:

void send_goal_to_node_1(CAN_MESSAGE* msgToSend){
   80750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80752:	4604      	mov	r4, r0
    msgToSend->data_length = 2;
   80754:	2302      	movs	r3, #2
   80756:	7083      	strb	r3, [r0, #2]
    //Low ID  since this is an urgent message
    msgToSend->id = 0x1;    
   80758:	2301      	movs	r3, #1
   8075a:	8003      	strh	r3, [r0, #0]
    msgToSend->data[0] = (uint8_t) ((return_seconds()-return_starttime()) & 0x00FF);
   8075c:	4f09      	ldr	r7, [pc, #36]	; (80784 <send_goal_to_node_1+0x34>)
   8075e:	47b8      	blx	r7
   80760:	4605      	mov	r5, r0
   80762:	4e09      	ldr	r6, [pc, #36]	; (80788 <send_goal_to_node_1+0x38>)
   80764:	47b0      	blx	r6
   80766:	1a28      	subs	r0, r5, r0
   80768:	70e0      	strb	r0, [r4, #3]
    msgToSend->data[1] = (uint8_t) (((return_seconds()-return_starttime()) & 0xFF00) >> 8);
   8076a:	47b8      	blx	r7
   8076c:	4605      	mov	r5, r0
   8076e:	47b0      	blx	r6
   80770:	1a28      	subs	r0, r5, r0
   80772:	f3c0 2007 	ubfx	r0, r0, #8, #8
   80776:	7120      	strb	r0, [r4, #4]
	can_send(msgToSend, 0);
   80778:	2100      	movs	r1, #0
   8077a:	4620      	mov	r0, r4
   8077c:	4b03      	ldr	r3, [pc, #12]	; (8078c <send_goal_to_node_1+0x3c>)
   8077e:	4798      	blx	r3
   80780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80782:	bf00      	nop
   80784:	00081075 	.word	0x00081075
   80788:	0008108d 	.word	0x0008108d
   8078c:	00080311 	.word	0x00080311

00080790 <send_motor_info_to_node_1>:
}

void send_motor_info_to_node_1(CAN_MESSAGE* msgToSend, uint8_t y_pos, uint8_t solenoide){
   80790:	b510      	push	{r4, lr}
   80792:	4604      	mov	r4, r0
    msgToSend->data_length = 2;
   80794:	2302      	movs	r3, #2
   80796:	7083      	strb	r3, [r0, #2]
	uint16_t temp = 0x4;
    msgToSend->id = temp;
   80798:	2304      	movs	r3, #4
   8079a:	8003      	strh	r3, [r0, #0]
    msgToSend->data[0] = y_pos;
   8079c:	70c1      	strb	r1, [r0, #3]
    msgToSend->data[1] = solenoide;
   8079e:	7102      	strb	r2, [r0, #4]
	can_send(msgToSend, 0);
   807a0:	2100      	movs	r1, #0
   807a2:	4b03      	ldr	r3, [pc, #12]	; (807b0 <send_motor_info_to_node_1+0x20>)
   807a4:	4798      	blx	r3
	printf("message length: %x \r\n", msgToSend->data_length);
   807a6:	78a1      	ldrb	r1, [r4, #2]
   807a8:	4802      	ldr	r0, [pc, #8]	; (807b4 <send_motor_info_to_node_1+0x24>)
   807aa:	4b03      	ldr	r3, [pc, #12]	; (807b8 <send_motor_info_to_node_1+0x28>)
   807ac:	4798      	blx	r3
   807ae:	bd10      	pop	{r4, pc}
   807b0:	00080311 	.word	0x00080311
   807b4:	00081cd4 	.word	0x00081cd4
   807b8:	00081021 	.word	0x00081021

000807bc <send_reaction_time_to_node_1>:
}

void send_reaction_time_to_node_1(CAN_MESSAGE* msgToSend, uint16_t ms){
   807bc:	b508      	push	{r3, lr}
    msgToSend->data_length = 2;
   807be:	2202      	movs	r2, #2
   807c0:	7082      	strb	r2, [r0, #2]
    //Low ID  since this is an urgent message
    msgToSend->id = 0x2;    
   807c2:	8002      	strh	r2, [r0, #0]
    msgToSend->data[0] = (uint8_t) (ms & 0x00FF);
   807c4:	70c1      	strb	r1, [r0, #3]
    msgToSend->data[1] = (uint8_t) ((ms & 0xFF00) >> 8);
   807c6:	0a09      	lsrs	r1, r1, #8
   807c8:	7101      	strb	r1, [r0, #4]
	can_send(msgToSend, 0);
   807ca:	2100      	movs	r1, #0
   807cc:	4b01      	ldr	r3, [pc, #4]	; (807d4 <send_reaction_time_to_node_1+0x18>)
   807ce:	4798      	blx	r3
   807d0:	bd08      	pop	{r3, pc}
   807d2:	bf00      	nop
   807d4:	00080311 	.word	0x00080311

000807d8 <get_pi_value>:
	  y_value_pi = val;
  }
 
 uint8_t get_pi_value(){
	 return y_value_pi;
 }
   807d8:	4b01      	ldr	r3, [pc, #4]	; (807e0 <get_pi_value+0x8>)
   807da:	7818      	ldrb	r0, [r3, #0]
   807dc:	4770      	bx	lr
   807de:	bf00      	nop
   807e0:	20000480 	.word	0x20000480

000807e4 <get_solenoid_status>:

 uint8_t get_solenoid_status(){
	 return solenoide_status;
 }
   807e4:	4b01      	ldr	r3, [pc, #4]	; (807ec <get_solenoid_status+0x8>)
   807e6:	7858      	ldrb	r0, [r3, #1]
   807e8:	4770      	bx	lr
   807ea:	bf00      	nop
   807ec:	20000480 	.word	0x20000480

000807f0 <move_solenoid>:

void reset_solenoid_status(){
	solenoide_status = 0;
 }
 
 void move_solenoid(){
   807f0:	b510      	push	{r4, lr}
	 //printf("joystick.x_val : %d \n\r", joystick.x_val);
	 
	  
	 
	 if(joystick.x_val < 0){
   807f2:	4b17      	ldr	r3, [pc, #92]	; (80850 <move_solenoid+0x60>)
   807f4:	f993 0000 	ldrsb.w	r0, [r3]
   807f8:	2800      	cmp	r0, #0
   807fa:	db0f      	blt.n	8081c <move_solenoid+0x2c>
		 uint8_t val = 45-abs(joystick.x_val)*0.5; //using 45 instead of 50 since motor is skeiv
		 timer_change_duty(val);
	 }
	 if(joystick.x_val >= 0){
		 uint8_t val2 = 45+joystick.x_val*0.5; //using 45 instead of 50 since motor is skeiv
   807fc:	4b15      	ldr	r3, [pc, #84]	; (80854 <move_solenoid+0x64>)
   807fe:	4798      	blx	r3
   80800:	2200      	movs	r2, #0
   80802:	4b15      	ldr	r3, [pc, #84]	; (80858 <move_solenoid+0x68>)
   80804:	4c15      	ldr	r4, [pc, #84]	; (8085c <move_solenoid+0x6c>)
   80806:	47a0      	blx	r4
   80808:	2200      	movs	r2, #0
   8080a:	4b15      	ldr	r3, [pc, #84]	; (80860 <move_solenoid+0x70>)
   8080c:	4c15      	ldr	r4, [pc, #84]	; (80864 <move_solenoid+0x74>)
   8080e:	47a0      	blx	r4
   80810:	4b15      	ldr	r3, [pc, #84]	; (80868 <move_solenoid+0x78>)
   80812:	4798      	blx	r3
		 timer_change_duty(val2);
   80814:	b2c0      	uxtb	r0, r0
   80816:	4b15      	ldr	r3, [pc, #84]	; (8086c <move_solenoid+0x7c>)
   80818:	4798      	blx	r3
   8081a:	bd10      	pop	{r4, pc}
		 uint8_t val = 45-abs(joystick.x_val)*0.5; //using 45 instead of 50 since motor is skeiv
   8081c:	2800      	cmp	r0, #0
   8081e:	bfb8      	it	lt
   80820:	4240      	neglt	r0, r0
   80822:	4b0c      	ldr	r3, [pc, #48]	; (80854 <move_solenoid+0x64>)
   80824:	4798      	blx	r3
   80826:	2200      	movs	r2, #0
   80828:	4b0b      	ldr	r3, [pc, #44]	; (80858 <move_solenoid+0x68>)
   8082a:	4c0c      	ldr	r4, [pc, #48]	; (8085c <move_solenoid+0x6c>)
   8082c:	47a0      	blx	r4
   8082e:	4602      	mov	r2, r0
   80830:	460b      	mov	r3, r1
   80832:	2000      	movs	r0, #0
   80834:	490a      	ldr	r1, [pc, #40]	; (80860 <move_solenoid+0x70>)
   80836:	4c0e      	ldr	r4, [pc, #56]	; (80870 <move_solenoid+0x80>)
   80838:	47a0      	blx	r4
   8083a:	4b0b      	ldr	r3, [pc, #44]	; (80868 <move_solenoid+0x78>)
   8083c:	4798      	blx	r3
		 timer_change_duty(val);
   8083e:	b2c0      	uxtb	r0, r0
   80840:	4b0a      	ldr	r3, [pc, #40]	; (8086c <move_solenoid+0x7c>)
   80842:	4798      	blx	r3
	 if(joystick.x_val >= 0){
   80844:	4b02      	ldr	r3, [pc, #8]	; (80850 <move_solenoid+0x60>)
   80846:	f993 0000 	ldrsb.w	r0, [r3]
   8084a:	2800      	cmp	r0, #0
   8084c:	dbe5      	blt.n	8081a <move_solenoid+0x2a>
   8084e:	e7d5      	b.n	807fc <move_solenoid+0xc>
   80850:	200004b0 	.word	0x200004b0
   80854:	00081571 	.word	0x00081571
   80858:	3fe00000 	.word	0x3fe00000
   8085c:	0008163d 	.word	0x0008163d
   80860:	40468000 	.word	0x40468000
   80864:	000812d9 	.word	0x000812d9
   80868:	00081ab1 	.word	0x00081ab1
   8086c:	00081131 	.word	0x00081131
   80870:	000812d5 	.word	0x000812d5

00080874 <change_motor_speed_using_paadrag>:
 }

void change_motor_speed_using_paadrag(int paadrag){
	//printf("joystick.y_val : %d \n\r", joystick.y_val);
	
	if(paadrag < 0){
   80874:	2800      	cmp	r0, #0
		PIOD->PIO_CODR = PIO_CODR_P10; //set direction left
   80876:	f44f 6280 	mov.w	r2, #1024	; 0x400
   8087a:	4b06      	ldr	r3, [pc, #24]	; (80894 <change_motor_speed_using_paadrag+0x20>)
   8087c:	bfb4      	ite	lt
   8087e:	635a      	strlt	r2, [r3, #52]	; 0x34
		uint16_t val = abs(paadrag);
		DACC->DACC_CDR = val;
	}else{
		PIOD->PIO_SODR = PIO_SODR_P10; //set direction right
   80880:	631a      	strge	r2, [r3, #48]	; 0x30
		uint16_t val2 = abs(paadrag);
   80882:	2800      	cmp	r0, #0
   80884:	bfb8      	it	lt
   80886:	4240      	neglt	r0, r0
		DACC->DACC_CDR = val2;
   80888:	b280      	uxth	r0, r0
   8088a:	f5a3 33ca 	sub.w	r3, r3, #103424	; 0x19400
   8088e:	6218      	str	r0, [r3, #32]
   80890:	4770      	bx	lr
   80892:	bf00      	nop
   80894:	400e1400 	.word	0x400e1400

00080898 <motor_box_init>:
	}
}
 

void motor_box_init(){
	PIOD->PIO_PER |= PIO_PER_P10; //PIO Enable Register, PIO Enable //pin32 DIR PD10
   80898:	4b20      	ldr	r3, [pc, #128]	; (8091c <motor_box_init+0x84>)
   8089a:	681a      	ldr	r2, [r3, #0]
   8089c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   808a0:	601a      	str	r2, [r3, #0]
	PIOD->PIO_OER |= PIO_OER_P10; //Output Enable Register, Output Enable //pin32 DIR PD10
   808a2:	691a      	ldr	r2, [r3, #16]
   808a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   808a8:	611a      	str	r2, [r3, #16]
	PIOD->PIO_PER |= PIO_PER_P9; //PIO Enable Register, PIO Enable //pin30 EN PD9
   808aa:	681a      	ldr	r2, [r3, #0]
   808ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   808b0:	601a      	str	r2, [r3, #0]
	PIOD->PIO_OER |= PIO_OER_P9; //Output Enable Register, Output Enable //pin30 EN PD9
   808b2:	691a      	ldr	r2, [r3, #16]
   808b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   808b8:	611a      	str	r2, [r3, #16]
	
	PIOD->PIO_SODR = PIO_SODR_P9; //Set Output Data Register, Set Output Data
   808ba:	f44f 7200 	mov.w	r2, #512	; 0x200
   808be:	631a      	str	r2, [r3, #48]	; 0x30
	PIOD->PIO_CODR = PIO_CODR_P10; //Clear Output Data Register, Set Output Data
   808c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
   808c4:	635a      	str	r2, [r3, #52]	; 0x34
	
	PMC->PMC_PCER0 = PMC_PCER0_PID13;
   808c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   808ca:	4a15      	ldr	r2, [pc, #84]	; (80920 <motor_box_init+0x88>)
   808cc:	6111      	str	r1, [r2, #16]

	
	//allow counter to start
	PIOD->PIO_SODR |= PIO_SODR_P1; //!RST high
   808ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   808d0:	f042 0202 	orr.w	r2, r2, #2
   808d4:	631a      	str	r2, [r3, #48]	; 0x30
	
	//enable pins for reading encoder
	PIOC->PIO_PER |= PIO_PER_P8; //DO7
   808d6:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
   808da:	681a      	ldr	r2, [r3, #0]
   808dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   808e0:	601a      	str	r2, [r3, #0]
	PIOC->PIO_PER |= PIO_PER_P7; //DO6
   808e2:	681a      	ldr	r2, [r3, #0]
   808e4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   808e8:	601a      	str	r2, [r3, #0]
	PIOC->PIO_PER |= PIO_PER_P6; //DO5
   808ea:	681a      	ldr	r2, [r3, #0]
   808ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   808f0:	601a      	str	r2, [r3, #0]
	PIOC->PIO_PER |= PIO_PER_P5; //DO4
   808f2:	681a      	ldr	r2, [r3, #0]
   808f4:	f042 0220 	orr.w	r2, r2, #32
   808f8:	601a      	str	r2, [r3, #0]
	PIOC->PIO_PER |= PIO_PER_P4; //DO3
   808fa:	681a      	ldr	r2, [r3, #0]
   808fc:	f042 0210 	orr.w	r2, r2, #16
   80900:	601a      	str	r2, [r3, #0]
	PIOC->PIO_PER |= PIO_PER_P3; //DO2
   80902:	681a      	ldr	r2, [r3, #0]
   80904:	f042 0208 	orr.w	r2, r2, #8
   80908:	601a      	str	r2, [r3, #0]
	PIOC->PIO_PER |= PIO_PER_P2; //DO1
   8090a:	681a      	ldr	r2, [r3, #0]
   8090c:	f042 0204 	orr.w	r2, r2, #4
   80910:	601a      	str	r2, [r3, #0]
	PIOC->PIO_PER |= PIO_PER_P1; //DO0
   80912:	681a      	ldr	r2, [r3, #0]
   80914:	f042 0202 	orr.w	r2, r2, #2
   80918:	601a      	str	r2, [r3, #0]
   8091a:	4770      	bx	lr
   8091c:	400e1400 	.word	0x400e1400
   80920:	400e0600 	.word	0x400e0600

00080924 <encoder_read>:
}


uint8_t encoder_read(){
   80924:	b508      	push	{r3, lr}
	// PIO (Output) Enable Register, PIO Enable
	PIOD->PIO_PER |= PIO_PER_P2; // Pin 27 sel PD2 SEL
   80926:	4b2a      	ldr	r3, [pc, #168]	; (809d0 <encoder_read+0xac>)
   80928:	681a      	ldr	r2, [r3, #0]
   8092a:	f042 0204 	orr.w	r2, r2, #4
   8092e:	601a      	str	r2, [r3, #0]
	PIOD->PIO_OER |= PIO_OER_P2; // 
   80930:	691a      	ldr	r2, [r3, #16]
   80932:	f042 0204 	orr.w	r2, r2, #4
   80936:	611a      	str	r2, [r3, #16]
	PIOD->PIO_PER |= PIO_PER_P1; // Pin 26 not_rst PD1 !RST
   80938:	681a      	ldr	r2, [r3, #0]
   8093a:	f042 0202 	orr.w	r2, r2, #2
   8093e:	601a      	str	r2, [r3, #0]
	PIOD->PIO_OER |= PIO_OER_P1; // 
   80940:	691a      	ldr	r2, [r3, #16]
   80942:	f042 0202 	orr.w	r2, r2, #2
   80946:	611a      	str	r2, [r3, #16]
	PIOD->PIO_PER |= PIO_PER_P0; // Pin 25 not_oe PD0 !OE
   80948:	681a      	ldr	r2, [r3, #0]
   8094a:	f042 0201 	orr.w	r2, r2, #1
   8094e:	601a      	str	r2, [r3, #0]
	PIOD->PIO_OER |= PIO_OER_P0; // 
   80950:	691a      	ldr	r2, [r3, #16]
   80952:	f042 0201 	orr.w	r2, r2, #1
   80956:	611a      	str	r2, [r3, #16]
	
	PIOD->PIO_CODR |= PIO_CODR_P0; //!OE low
   80958:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   8095a:	f042 0201 	orr.w	r2, r2, #1
   8095e:	635a      	str	r2, [r3, #52]	; 0x34
	PIOD->PIO_CODR |= PIO_CODR_P2; //SEL low
   80960:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   80962:	f042 0204 	orr.w	r2, r2, #4
   80966:	635a      	str	r2, [r3, #52]	; 0x34
   80968:	f44f 6348 	mov.w	r3, #3200	; 0xc80
	
	//10 microsec
	for(int i = 0; i < 3200; i++){
   8096c:	3b01      	subs	r3, #1
   8096e:	d1fd      	bne.n	8096c <encoder_read+0x48>
	}
	
	uint8_t MSB = (PIOC->PIO_PDSR >> 1);
   80970:	4b18      	ldr	r3, [pc, #96]	; (809d4 <encoder_read+0xb0>)
   80972:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   80974:	0849      	lsrs	r1, r1, #1
	//printf("PIO_PDSR: -----%x \n\r", PIOC->PIO_PDSR);
	PIOD->PIO_SODR |= PIO_SODR_P2; //SEL high
   80976:	4a16      	ldr	r2, [pc, #88]	; (809d0 <encoder_read+0xac>)
   80978:	6b13      	ldr	r3, [r2, #48]	; 0x30
   8097a:	f043 0304 	orr.w	r3, r3, #4
   8097e:	6313      	str	r3, [r2, #48]	; 0x30
   80980:	f44f 6348 	mov.w	r3, #3200	; 0xc80
	
	//10 microsec
	for(int i = 0; i < 3200; i++){
   80984:	3b01      	subs	r3, #1
   80986:	d1fd      	bne.n	80984 <encoder_read+0x60>
	}
	uint8_t LSB = PIOC->PIO_PDSR >> 1;
   80988:	4b12      	ldr	r3, [pc, #72]	; (809d4 <encoder_read+0xb0>)
   8098a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	
	PIOD->PIO_CODR |= PIO_CODR_P1; //!RST low
   8098c:	f503 7300 	add.w	r3, r3, #512	; 0x200
   80990:	6b58      	ldr	r0, [r3, #52]	; 0x34
   80992:	f040 0002 	orr.w	r0, r0, #2
   80996:	6358      	str	r0, [r3, #52]	; 0x34
	PIOD->PIO_SODR |= PIO_SODR_P1; //!RST high
   80998:	6b18      	ldr	r0, [r3, #48]	; 0x30
   8099a:	f040 0002 	orr.w	r0, r0, #2
   8099e:	6318      	str	r0, [r3, #48]	; 0x30
	PIOD->PIO_SODR |= PIO_SODR_P0; //!OE high
   809a0:	6b18      	ldr	r0, [r3, #48]	; 0x30
   809a2:	f040 0001 	orr.w	r0, r0, #1
   809a6:	6318      	str	r0, [r3, #48]	; 0x30
	
	uint16_t encoder_data = (LSB | (MSB << 8));
   809a8:	0209      	lsls	r1, r1, #8
   809aa:	b289      	uxth	r1, r1
	int encoder_data_int = LSB | (MSB << 8);
   809ac:	f3c2 0347 	ubfx	r3, r2, #1, #8
   809b0:	4319      	orrs	r1, r3
	set_pi_value((8888-encoder_data_int)/88); //scaled so that value is 0-100;
   809b2:	f5c1 530a 	rsb	r3, r1, #8832	; 0x2280
   809b6:	3338      	adds	r3, #56	; 0x38
   809b8:	4a07      	ldr	r2, [pc, #28]	; (809d8 <encoder_read+0xb4>)
   809ba:	fb82 0203 	smull	r0, r2, r2, r3
   809be:	17db      	asrs	r3, r3, #31
   809c0:	ebc3 1322 	rsb	r3, r3, r2, asr #4
   809c4:	4a05      	ldr	r2, [pc, #20]	; (809dc <encoder_read+0xb8>)
   809c6:	7013      	strb	r3, [r2, #0]
 	printf("Encoder             data: %x \n\r", encoder_data_int);
   809c8:	4805      	ldr	r0, [pc, #20]	; (809e0 <encoder_read+0xbc>)
   809ca:	4b06      	ldr	r3, [pc, #24]	; (809e4 <encoder_read+0xc0>)
   809cc:	4798      	blx	r3
// 		printf("Data negative: -%d \n\r", encoder_data);
// 	}
// 	else{
// 		printf("Data positive: %d \n\r", encoder_data);
// 	}
}
   809ce:	bd08      	pop	{r3, pc}
   809d0:	400e1400 	.word	0x400e1400
   809d4:	400e1200 	.word	0x400e1200
   809d8:	2e8ba2e9 	.word	0x2e8ba2e9
   809dc:	20000480 	.word	0x20000480
   809e0:	00081d00 	.word	0x00081d00
   809e4:	00081021 	.word	0x00081021

000809e8 <button_check>:

uint8_t button_check(uint8_t current){
	if(current == 0 && previous == 1){
   809e8:	4603      	mov	r3, r0
   809ea:	b948      	cbnz	r0, 80a00 <button_check+0x18>
   809ec:	4a07      	ldr	r2, [pc, #28]	; (80a0c <button_check+0x24>)
   809ee:	7810      	ldrb	r0, [r2, #0]
   809f0:	2801      	cmp	r0, #1
   809f2:	d001      	beq.n	809f8 <button_check+0x10>
		return 1;
		}else if(current != 0){
		previous = 1;
		//printf("%s", "C");
	}
	return 0;
   809f4:	4618      	mov	r0, r3
   809f6:	4770      	bx	lr
		previous = 0;
   809f8:	2200      	movs	r2, #0
   809fa:	4b04      	ldr	r3, [pc, #16]	; (80a0c <button_check+0x24>)
   809fc:	701a      	strb	r2, [r3, #0]
		return 1;
   809fe:	4770      	bx	lr
		previous = 1;
   80a00:	2201      	movs	r2, #1
   80a02:	4b02      	ldr	r3, [pc, #8]	; (80a0c <button_check+0x24>)
   80a04:	701a      	strb	r2, [r3, #0]
	return 0;
   80a06:	2000      	movs	r0, #0
   80a08:	4770      	bx	lr
   80a0a:	bf00      	nop
   80a0c:	20000004 	.word	0x20000004

00080a10 <check_solenoid_shot>:
 void check_solenoid_shot(){
   80a10:	b508      	push	{r3, lr}
	if(button_check(joystick.butt_pressed)){
   80a12:	4b10      	ldr	r3, [pc, #64]	; (80a54 <check_solenoid_shot+0x44>)
   80a14:	7898      	ldrb	r0, [r3, #2]
   80a16:	4b10      	ldr	r3, [pc, #64]	; (80a58 <check_solenoid_shot+0x48>)
   80a18:	4798      	blx	r3
   80a1a:	b978      	cbnz	r0, 80a3c <check_solenoid_shot+0x2c>
		if(return_milliseconds() > (last_time_pressed + 10)){
   80a1c:	4b0f      	ldr	r3, [pc, #60]	; (80a5c <check_solenoid_shot+0x4c>)
   80a1e:	4798      	blx	r3
   80a20:	4b0f      	ldr	r3, [pc, #60]	; (80a60 <check_solenoid_shot+0x50>)
   80a22:	685b      	ldr	r3, [r3, #4]
   80a24:	330a      	adds	r3, #10
   80a26:	4298      	cmp	r0, r3
   80a28:	d907      	bls.n	80a3a <check_solenoid_shot+0x2a>
			PIOC->PIO_SODR |= PIO_SODR_P13;
   80a2a:	4a0e      	ldr	r2, [pc, #56]	; (80a64 <check_solenoid_shot+0x54>)
   80a2c:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80a2e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   80a32:	6313      	str	r3, [r2, #48]	; 0x30
			solenoide_status = 0;
   80a34:	2200      	movs	r2, #0
   80a36:	4b0a      	ldr	r3, [pc, #40]	; (80a60 <check_solenoid_shot+0x50>)
   80a38:	705a      	strb	r2, [r3, #1]
   80a3a:	bd08      	pop	{r3, pc}
		last_time_pressed = return_milliseconds();
   80a3c:	4b07      	ldr	r3, [pc, #28]	; (80a5c <check_solenoid_shot+0x4c>)
   80a3e:	4798      	blx	r3
   80a40:	4a07      	ldr	r2, [pc, #28]	; (80a60 <check_solenoid_shot+0x50>)
   80a42:	6050      	str	r0, [r2, #4]
		PIOC->PIO_CODR |= PIO_CODR_P13;
   80a44:	4907      	ldr	r1, [pc, #28]	; (80a64 <check_solenoid_shot+0x54>)
   80a46:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   80a48:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   80a4c:	634b      	str	r3, [r1, #52]	; 0x34
		solenoide_status = 1;
   80a4e:	2301      	movs	r3, #1
   80a50:	7053      	strb	r3, [r2, #1]
   80a52:	bd08      	pop	{r3, pc}
   80a54:	200004b0 	.word	0x200004b0
   80a58:	000809e9 	.word	0x000809e9
   80a5c:	00081069 	.word	0x00081069
   80a60:	20000480 	.word	0x20000480
   80a64:	400e1200 	.word	0x400e1200

00080a68 <main>:
#include "timer.h"
#include "feedback.h"
#include "pid.h"

int main(void)
{
   80a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80a6c:	b087      	sub	sp, #28
    /* Initialize the SAM system */
    SystemInit();
   80a6e:	4b48      	ldr	r3, [pc, #288]	; (80b90 <main+0x128>)
   80a70:	4798      	blx	r3
	WDT->WDT_MR |= 1 << 15;
   80a72:	4a48      	ldr	r2, [pc, #288]	; (80b94 <main+0x12c>)
   80a74:	6853      	ldr	r3, [r2, #4]
   80a76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
   80a7a:	6053      	str	r3, [r2, #4]
	configure_uart();
   80a7c:	4b46      	ldr	r3, [pc, #280]	; (80b98 <main+0x130>)
   80a7e:	4798      	blx	r3
	can_init_def_tx_rx_mb(0x00290561); // 0x00290561 = 0b 00000000001010010000010101100001// 0b000000000000100100010001000100010
   80a80:	4846      	ldr	r0, [pc, #280]	; (80b9c <main+0x134>)
   80a82:	4b47      	ldr	r3, [pc, #284]	; (80ba0 <main+0x138>)
   80a84:	4798      	blx	r3
	
	printf("hello\n\r");
   80a86:	4847      	ldr	r0, [pc, #284]	; (80ba4 <main+0x13c>)
   80a88:	4b47      	ldr	r3, [pc, #284]	; (80ba8 <main+0x140>)
   80a8a:	4798      	blx	r3
	PWM->PWM_CH_NUM[2].PWM_CMR &= ~PWM_CMR_CPOL;
	
	PIOA->PIO_ABSR |= PIO_ABSR_P5; //PIO set peripheral b on pin 5*/
	
	
	timer_init();
   80a8c:	4b47      	ldr	r3, [pc, #284]	; (80bac <main+0x144>)
   80a8e:	4798      	blx	r3
	timer_change_duty(100);
   80a90:	2064      	movs	r0, #100	; 0x64
   80a92:	4b47      	ldr	r3, [pc, #284]	; (80bb0 <main+0x148>)
   80a94:	4798      	blx	r3
	//init_interrupt_PI();
	init_ch1_PI();
   80a96:	4b47      	ldr	r3, [pc, #284]	; (80bb4 <main+0x14c>)
   80a98:	4798      	blx	r3
	
	
	adc_init();
   80a9a:	4b47      	ldr	r3, [pc, #284]	; (80bb8 <main+0x150>)
   80a9c:	4798      	blx	r3
	dac_init();
   80a9e:	4b47      	ldr	r3, [pc, #284]	; (80bbc <main+0x154>)
   80aa0:	4798      	blx	r3
	
	
	motor_box_init();
   80aa2:	4b47      	ldr	r3, [pc, #284]	; (80bc0 <main+0x158>)
   80aa4:	4798      	blx	r3
	
	
	
	
	//enable and set high, pin to controll servo shoot, pin50 on shield
	PIOC->PIO_PER |= PIO_PER_P13; 
   80aa6:	4b47      	ldr	r3, [pc, #284]	; (80bc4 <main+0x15c>)
   80aa8:	681a      	ldr	r2, [r3, #0]
   80aaa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   80aae:	601a      	str	r2, [r3, #0]
	PIOC->PIO_OER |= PIO_OER_P13; 
   80ab0:	691a      	ldr	r2, [r3, #16]
   80ab2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   80ab6:	611a      	str	r2, [r3, #16]
	PIOC->PIO_SODR |= PIO_SODR_P13;
   80ab8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80aba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   80abe:	631a      	str	r2, [r3, #48]	; 0x30
	
	
	
	
	PIOA->PIO_PER |= PIO_PER_P19; //PIO Enable Register, PIO Enable
   80ac0:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
   80ac4:	681a      	ldr	r2, [r3, #0]
   80ac6:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   80aca:	601a      	str	r2, [r3, #0]
	PIOA->PIO_OER |= PIO_OER_P19; //Output Enable Register, Output Enable
   80acc:	691a      	ldr	r2, [r3, #16]
   80ace:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   80ad2:	611a      	str	r2, [r3, #16]
	
	PIOA->PIO_PER |= PIO_PER_P20; //PIO Enable Register, PIO Enable
   80ad4:	681a      	ldr	r2, [r3, #0]
   80ad6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   80ada:	601a      	str	r2, [r3, #0]
	PIOA->PIO_OER |= PIO_OER_P20; //Output Enable Register, Output Enable
   80adc:	691a      	ldr	r2, [r3, #16]
   80ade:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   80ae2:	611a      	str	r2, [r3, #16]
	PIOA->PIO_PER |= PIO_PER_P9; //PIO Enable Register, PIO Enable
	PIOA->PIO_OER |= PIO_OER_P9; //Output Enable Register, Output Enable*/
	volatile CAN_MESSAGE msg;
	CAN_MESSAGE msgToSend;
	uint8_t solenoide_pressed = 0;
	SysTick_init();
   80ae4:	4b38      	ldr	r3, [pc, #224]	; (80bc8 <main+0x160>)
   80ae6:	4798      	blx	r3
    while (1) 
    {
		
		PIOA->PIO_SODR = PIO_SODR_P19; //Set Output Data Register, Set Output Data
   80ae8:	4c38      	ldr	r4, [pc, #224]	; (80bcc <main+0x164>)
		//printf("%x ", tc->TC_CHANNEL[0].TC_SR);
		PIOA->PIO_CODR |= PIO_CODR_P20; //Clear Output Data Register,
		
		
		
		move_solenoid();
   80aea:	f8df a11c 	ldr.w	sl, [pc, #284]	; 80c08 <main+0x1a0>
		//change_motor_speed();
		encoder_read();
   80aee:	f8df 911c 	ldr.w	r9, [pc, #284]	; 80c0c <main+0x1a4>

		send_time_to_node_1(&msgToSend);

		//limits to fewer OLED updates a second, can be tweaked
		if(!(get_controller_runs()%3)){
			send_motor_info_to_node_1(&msgToSend, get_pi_value(), get_solenoid_status());
   80af2:	4d37      	ldr	r5, [pc, #220]	; (80bd0 <main+0x168>)
   80af4:	e046      	b.n	80b84 <main+0x11c>
			//Make sure 8 bit doesen't overflow as it would break logic
			if(get_controller_runs > 250){
				reset_controller_runs();
			}
		}
		send_motor_info_to_node_1(&msgToSend, get_pi_value(), get_solenoid_status());
   80af6:	47a8      	blx	r5
   80af8:	9001      	str	r0, [sp, #4]
   80afa:	47b8      	blx	r7
   80afc:	4602      	mov	r2, r0
   80afe:	9901      	ldr	r1, [sp, #4]
   80b00:	a803      	add	r0, sp, #12
   80b02:	47b0      	blx	r6
		
		if(get_goal_flag()){
   80b04:	4b33      	ldr	r3, [pc, #204]	; (80bd4 <main+0x16c>)
   80b06:	4798      	blx	r3
   80b08:	2800      	cmp	r0, #0
   80b0a:	d136      	bne.n	80b7a <main+0x112>
		PIOA->PIO_SODR = PIO_SODR_P19; //Set Output Data Register, Set Output Data
   80b0c:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
   80b10:	4b31      	ldr	r3, [pc, #196]	; (80bd8 <main+0x170>)
		for(int i = 0; i < 1600000; i++){
   80b12:	3b01      	subs	r3, #1
   80b14:	d1fd      	bne.n	80b12 <main+0xaa>
		PIOA->PIO_CODR = PIO_CODR_P19; //Clear Output Data Register, Set Output Data
   80b16:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
		PIOA->PIO_SODR = PIO_SODR_P20; //Set Output Data Register, Set Output Data
   80b1a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   80b1e:	6323      	str	r3, [r4, #48]	; 0x30
   80b20:	4b2d      	ldr	r3, [pc, #180]	; (80bd8 <main+0x170>)
		for(int i = 0; i < 1600000; i++){
   80b22:	3b01      	subs	r3, #1
   80b24:	d1fd      	bne.n	80b22 <main+0xba>
		PIOA->PIO_CODR |= PIO_CODR_P20; //Clear Output Data Register,
   80b26:	6b63      	ldr	r3, [r4, #52]	; 0x34
   80b28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   80b2c:	6363      	str	r3, [r4, #52]	; 0x34
		move_solenoid();
   80b2e:	47d0      	blx	sl
		encoder_read();
   80b30:	47c8      	blx	r9
		check_solenoid_shot();
   80b32:	4b2a      	ldr	r3, [pc, #168]	; (80bdc <main+0x174>)
   80b34:	4798      	blx	r3
		printf("goals : %d   \n\r", get_total_goals());
   80b36:	4b2a      	ldr	r3, [pc, #168]	; (80be0 <main+0x178>)
   80b38:	4798      	blx	r3
   80b3a:	4601      	mov	r1, r0
   80b3c:	4829      	ldr	r0, [pc, #164]	; (80be4 <main+0x17c>)
   80b3e:	4b1a      	ldr	r3, [pc, #104]	; (80ba8 <main+0x140>)
   80b40:	4798      	blx	r3
		send_time_to_node_1(&msgToSend);
   80b42:	a803      	add	r0, sp, #12
   80b44:	4b28      	ldr	r3, [pc, #160]	; (80be8 <main+0x180>)
   80b46:	4798      	blx	r3
		if(!(get_controller_runs()%3)){
   80b48:	4b28      	ldr	r3, [pc, #160]	; (80bec <main+0x184>)
   80b4a:	4798      	blx	r3
   80b4c:	4b28      	ldr	r3, [pc, #160]	; (80bf0 <main+0x188>)
   80b4e:	fba3 2300 	umull	r2, r3, r3, r0
   80b52:	085b      	lsrs	r3, r3, #1
   80b54:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   80b58:	1ac3      	subs	r3, r0, r3
   80b5a:	f013 0fff 	tst.w	r3, #255	; 0xff
   80b5e:	d1ca      	bne.n	80af6 <main+0x8e>
			send_motor_info_to_node_1(&msgToSend, get_pi_value(), get_solenoid_status());
   80b60:	47a8      	blx	r5
   80b62:	9001      	str	r0, [sp, #4]
   80b64:	47b8      	blx	r7
   80b66:	4602      	mov	r2, r0
   80b68:	9901      	ldr	r1, [sp, #4]
   80b6a:	a803      	add	r0, sp, #12
   80b6c:	47b0      	blx	r6
			if(get_controller_runs > 250){
   80b6e:	4b1f      	ldr	r3, [pc, #124]	; (80bec <main+0x184>)
   80b70:	2bfa      	cmp	r3, #250	; 0xfa
   80b72:	d9c0      	bls.n	80af6 <main+0x8e>
				reset_controller_runs();
   80b74:	4b1f      	ldr	r3, [pc, #124]	; (80bf4 <main+0x18c>)
   80b76:	4798      	blx	r3
   80b78:	e7bd      	b.n	80af6 <main+0x8e>
			send_goal_to_node_1(&msgToSend);
   80b7a:	a803      	add	r0, sp, #12
   80b7c:	4b1e      	ldr	r3, [pc, #120]	; (80bf8 <main+0x190>)
   80b7e:	4798      	blx	r3
			reset_goal_flag();
   80b80:	4b1e      	ldr	r3, [pc, #120]	; (80bfc <main+0x194>)
   80b82:	4798      	blx	r3
		PIOA->PIO_SODR = PIO_SODR_P19; //Set Output Data Register, Set Output Data
   80b84:	f44f 2800 	mov.w	r8, #524288	; 0x80000
   80b88:	46c3      	mov	fp, r8
			send_motor_info_to_node_1(&msgToSend, get_pi_value(), get_solenoid_status());
   80b8a:	4f1d      	ldr	r7, [pc, #116]	; (80c00 <main+0x198>)
   80b8c:	4e1d      	ldr	r6, [pc, #116]	; (80c04 <main+0x19c>)
   80b8e:	e7bd      	b.n	80b0c <main+0xa4>
   80b90:	00080651 	.word	0x00080651
   80b94:	400e1a50 	.word	0x400e1a50
   80b98:	000811d9 	.word	0x000811d9
   80b9c:	00290561 	.word	0x00290561
   80ba0:	00080301 	.word	0x00080301
   80ba4:	00081d20 	.word	0x00081d20
   80ba8:	00081021 	.word	0x00081021
   80bac:	000810d9 	.word	0x000810d9
   80bb0:	00081131 	.word	0x00081131
   80bb4:	00081181 	.word	0x00081181
   80bb8:	00080161 	.word	0x00080161
   80bbc:	00080599 	.word	0x00080599
   80bc0:	00080899 	.word	0x00080899
   80bc4:	400e1200 	.word	0x400e1200
   80bc8:	00081045 	.word	0x00081045
   80bcc:	400e0e00 	.word	0x400e0e00
   80bd0:	000807d9 	.word	0x000807d9
   80bd4:	000801a9 	.word	0x000801a9
   80bd8:	00186a00 	.word	0x00186a00
   80bdc:	00080a11 	.word	0x00080a11
   80be0:	0008019d 	.word	0x0008019d
   80be4:	00081d28 	.word	0x00081d28
   80be8:	000806f5 	.word	0x000806f5
   80bec:	000810b1 	.word	0x000810b1
   80bf0:	aaaaaaab 	.word	0xaaaaaaab
   80bf4:	000810cd 	.word	0x000810cd
   80bf8:	00080751 	.word	0x00080751
   80bfc:	000801b5 	.word	0x000801b5
   80c00:	000807e5 	.word	0x000807e5
   80c04:	00080791 	.word	0x00080791
   80c08:	000807f1 	.word	0x000807f1
   80c0c:	00080925 	.word	0x00080925

00080c10 <TC1_Handler>:
double sum_error = 0;
double T_periode = 0.02;

uint8_t difficulty = 0;

void TC1_Handler( void ){
   80c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80c14:	b087      	sub	sp, #28
	
	prev_error = error;
   80c16:	4c3f      	ldr	r4, [pc, #252]	; (80d14 <TC1_Handler+0x104>)
   80c18:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   80c1c:	e9c4 2300 	strd	r2, r3, [r4]
	error = joystick.left_val - get_pi_value();
   80c20:	f8df a120 	ldr.w	sl, [pc, #288]	; 80d44 <TC1_Handler+0x134>
   80c24:	f99a 5003 	ldrsb.w	r5, [sl, #3]
   80c28:	4b3b      	ldr	r3, [pc, #236]	; (80d18 <TC1_Handler+0x108>)
   80c2a:	4798      	blx	r3
   80c2c:	f8df 8118 	ldr.w	r8, [pc, #280]	; 80d48 <TC1_Handler+0x138>
   80c30:	1a28      	subs	r0, r5, r0
   80c32:	47c0      	blx	r8
   80c34:	4602      	mov	r2, r0
   80c36:	460b      	mov	r3, r1
   80c38:	e9cd 2300 	strd	r2, r3, [sp]
   80c3c:	e9c4 2302 	strd	r2, r3, [r4, #8]
	sum_error += error;
   80c40:	4d36      	ldr	r5, [pc, #216]	; (80d1c <TC1_Handler+0x10c>)
   80c42:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   80c46:	47a8      	blx	r5
   80c48:	e9cd 0104 	strd	r0, r1, [sp, #16]
   80c4c:	460a      	mov	r2, r1
   80c4e:	4601      	mov	r1, r0
   80c50:	e9c4 1204 	strd	r1, r2, [r4, #16]
	paadrag = (kp+difficulty*10)*error+T_periode*(ki-difficulty*4)*sum_error+((kd + difficulty*1)/T_periode)*(error-prev_error);
   80c54:	f894 b018 	ldrb.w	fp, [r4, #24]
   80c58:	4f31      	ldr	r7, [pc, #196]	; (80d20 <TC1_Handler+0x110>)
   80c5a:	e9d7 0100 	ldrd	r0, r1, [r7]
   80c5e:	e9cd 0102 	strd	r0, r1, [sp, #8]
   80c62:	ea4f 098b 	mov.w	r9, fp, lsl #2
   80c66:	4648      	mov	r0, r9
   80c68:	47c0      	blx	r8
   80c6a:	4602      	mov	r2, r0
   80c6c:	460b      	mov	r3, r1
   80c6e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   80c72:	4e2c      	ldr	r6, [pc, #176]	; (80d24 <TC1_Handler+0x114>)
   80c74:	47b0      	blx	r6
   80c76:	4e2c      	ldr	r6, [pc, #176]	; (80d28 <TC1_Handler+0x118>)
   80c78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   80c7c:	47b0      	blx	r6
   80c7e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   80c82:	47b0      	blx	r6
   80c84:	e9cd 0104 	strd	r0, r1, [sp, #16]
   80c88:	eb09 000b 	add.w	r0, r9, fp
   80c8c:	0040      	lsls	r0, r0, #1
   80c8e:	47c0      	blx	r8
   80c90:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   80c94:	47a8      	blx	r5
   80c96:	e9dd 2300 	ldrd	r2, r3, [sp]
   80c9a:	47b0      	blx	r6
   80c9c:	4602      	mov	r2, r0
   80c9e:	460b      	mov	r3, r1
   80ca0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   80ca4:	47a8      	blx	r5
   80ca6:	e9cd 0104 	strd	r0, r1, [sp, #16]
   80caa:	4658      	mov	r0, fp
   80cac:	47c0      	blx	r8
   80cae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   80cb2:	47a8      	blx	r5
   80cb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   80cb8:	4f1c      	ldr	r7, [pc, #112]	; (80d2c <TC1_Handler+0x11c>)
   80cba:	47b8      	blx	r7
   80cbc:	4680      	mov	r8, r0
   80cbe:	4689      	mov	r9, r1
   80cc0:	e9d4 2300 	ldrd	r2, r3, [r4]
   80cc4:	e9dd 0100 	ldrd	r0, r1, [sp]
   80cc8:	4f16      	ldr	r7, [pc, #88]	; (80d24 <TC1_Handler+0x114>)
   80cca:	47b8      	blx	r7
   80ccc:	4602      	mov	r2, r0
   80cce:	460b      	mov	r3, r1
   80cd0:	4640      	mov	r0, r8
   80cd2:	4649      	mov	r1, r9
   80cd4:	47b0      	blx	r6
   80cd6:	4602      	mov	r2, r0
   80cd8:	460b      	mov	r3, r1
   80cda:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   80cde:	47a8      	blx	r5
   80ce0:	4b13      	ldr	r3, [pc, #76]	; (80d30 <TC1_Handler+0x120>)
   80ce2:	4798      	blx	r3
   80ce4:	61e0      	str	r0, [r4, #28]
	if(joystick.left_button){
   80ce6:	f99a 3005 	ldrsb.w	r3, [sl, #5]
   80cea:	b123      	cbz	r3, 80cf6 <TC1_Handler+0xe6>
		sum_error = 0; 
   80cec:	2400      	movs	r4, #0
   80cee:	2500      	movs	r5, #0
   80cf0:	4b08      	ldr	r3, [pc, #32]	; (80d14 <TC1_Handler+0x104>)
   80cf2:	e9c3 4504 	strd	r4, r5, [r3, #16]
	}
	change_motor_speed_using_paadrag(paadrag);
   80cf6:	4b0f      	ldr	r3, [pc, #60]	; (80d34 <TC1_Handler+0x124>)
   80cf8:	4798      	blx	r3
	//printf("x: %d \n\r",paadrag);
	int a = tc->TC_CHANNEL[1].TC_SR; // funker uten?!
   80cfa:	4b0f      	ldr	r3, [pc, #60]	; (80d38 <TC1_Handler+0x128>)
   80cfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   80cfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80d02:	4b0e      	ldr	r3, [pc, #56]	; (80d3c <TC1_Handler+0x12c>)
   80d04:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ClearPendingIRQ(ID_TC1);
	increment_controller_runs();
   80d08:	4b0d      	ldr	r3, [pc, #52]	; (80d40 <TC1_Handler+0x130>)
   80d0a:	4798      	blx	r3
}
   80d0c:	b007      	add	sp, #28
   80d0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80d12:	bf00      	nop
   80d14:	20000488 	.word	0x20000488
   80d18:	000807d9 	.word	0x000807d9
   80d1c:	000812d9 	.word	0x000812d9
   80d20:	20000008 	.word	0x20000008
   80d24:	000812d5 	.word	0x000812d5
   80d28:	0008163d 	.word	0x0008163d
   80d2c:	00081891 	.word	0x00081891
   80d30:	00081a61 	.word	0x00081a61
   80d34:	00080875 	.word	0x00080875
   80d38:	40080000 	.word	0x40080000
   80d3c:	e000e100 	.word	0xe000e100
   80d40:	000810bd 	.word	0x000810bd
   80d44:	200004b0 	.word	0x200004b0
   80d48:	00081571 	.word	0x00081571

00080d4c <set_difficulty>:
uint8_t get_difficulty(){
	return difficulty;
};
void set_difficulty(uint8_t difficulty_to_set){
	difficulty = difficulty_to_set;
   80d4c:	4b01      	ldr	r3, [pc, #4]	; (80d54 <set_difficulty+0x8>)
   80d4e:	7618      	strb	r0, [r3, #24]
   80d50:	4770      	bx	lr
   80d52:	bf00      	nop
   80d54:	20000488 	.word	0x20000488

00080d58 <prints>:
   80d58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   80d5c:	460d      	mov	r5, r1
   80d5e:	1e16      	subs	r6, r2, #0
   80d60:	dd48      	ble.n	80df4 <prints+0x9c>
   80d62:	780a      	ldrb	r2, [r1, #0]
   80d64:	2a00      	cmp	r2, #0
   80d66:	d035      	beq.n	80dd4 <prints+0x7c>
   80d68:	460a      	mov	r2, r1
   80d6a:	2400      	movs	r4, #0
   80d6c:	3401      	adds	r4, #1
   80d6e:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   80d72:	2900      	cmp	r1, #0
   80d74:	d1fa      	bne.n	80d6c <prints+0x14>
   80d76:	42a6      	cmp	r6, r4
   80d78:	dc2d      	bgt.n	80dd6 <prints+0x7e>
   80d7a:	2400      	movs	r4, #0
   80d7c:	f003 0202 	and.w	r2, r3, #2
   80d80:	2a00      	cmp	r2, #0
   80d82:	bf0c      	ite	eq
   80d84:	f04f 0820 	moveq.w	r8, #32
   80d88:	f04f 0830 	movne.w	r8, #48	; 0x30
   80d8c:	f013 0301 	ands.w	r3, r3, #1
   80d90:	d123      	bne.n	80dda <prints+0x82>
   80d92:	2c00      	cmp	r4, #0
   80d94:	dd28      	ble.n	80de8 <prints+0x90>
   80d96:	4626      	mov	r6, r4
   80d98:	fa5f f988 	uxtb.w	r9, r8
   80d9c:	4f18      	ldr	r7, [pc, #96]	; (80e00 <prints+0xa8>)
   80d9e:	4648      	mov	r0, r9
   80da0:	47b8      	blx	r7
   80da2:	3e01      	subs	r6, #1
   80da4:	d1fb      	bne.n	80d9e <prints+0x46>
   80da6:	7828      	ldrb	r0, [r5, #0]
   80da8:	b188      	cbz	r0, 80dce <prints+0x76>
   80daa:	4f15      	ldr	r7, [pc, #84]	; (80e00 <prints+0xa8>)
   80dac:	47b8      	blx	r7
   80dae:	3401      	adds	r4, #1
   80db0:	f815 0f01 	ldrb.w	r0, [r5, #1]!
   80db4:	2800      	cmp	r0, #0
   80db6:	d1f9      	bne.n	80dac <prints+0x54>
   80db8:	2e00      	cmp	r6, #0
   80dba:	dd08      	ble.n	80dce <prints+0x76>
   80dbc:	4635      	mov	r5, r6
   80dbe:	fa5f f888 	uxtb.w	r8, r8
   80dc2:	4f0f      	ldr	r7, [pc, #60]	; (80e00 <prints+0xa8>)
   80dc4:	4640      	mov	r0, r8
   80dc6:	47b8      	blx	r7
   80dc8:	3d01      	subs	r5, #1
   80dca:	d1fb      	bne.n	80dc4 <prints+0x6c>
   80dcc:	4434      	add	r4, r6
   80dce:	4620      	mov	r0, r4
   80dd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80dd4:	2400      	movs	r4, #0
   80dd6:	1b34      	subs	r4, r6, r4
   80dd8:	e7d0      	b.n	80d7c <prints+0x24>
   80dda:	4626      	mov	r6, r4
   80ddc:	7828      	ldrb	r0, [r5, #0]
   80dde:	b108      	cbz	r0, 80de4 <prints+0x8c>
   80de0:	2400      	movs	r4, #0
   80de2:	e7e2      	b.n	80daa <prints+0x52>
   80de4:	2400      	movs	r4, #0
   80de6:	e7e7      	b.n	80db8 <prints+0x60>
   80de8:	4626      	mov	r6, r4
   80dea:	461c      	mov	r4, r3
   80dec:	e7db      	b.n	80da6 <prints+0x4e>
   80dee:	f04f 0820 	mov.w	r8, #32
   80df2:	e7d8      	b.n	80da6 <prints+0x4e>
   80df4:	f013 0401 	ands.w	r4, r3, #1
   80df8:	d0f9      	beq.n	80dee <prints+0x96>
   80dfa:	f04f 0820 	mov.w	r8, #32
   80dfe:	e7ed      	b.n	80ddc <prints+0x84>
   80e00:	00081241 	.word	0x00081241

00080e04 <printi>:
   80e04:	b5f0      	push	{r4, r5, r6, r7, lr}
   80e06:	b085      	sub	sp, #20
   80e08:	4607      	mov	r7, r0
   80e0a:	b381      	cbz	r1, 80e6e <printi+0x6a>
   80e0c:	460c      	mov	r4, r1
   80e0e:	b10b      	cbz	r3, 80e14 <printi+0x10>
   80e10:	2a0a      	cmp	r2, #10
   80e12:	d038      	beq.n	80e86 <printi+0x82>
   80e14:	2300      	movs	r3, #0
   80e16:	f88d 300f 	strb.w	r3, [sp, #15]
   80e1a:	2600      	movs	r6, #0
   80e1c:	2900      	cmp	r1, #0
   80e1e:	d046      	beq.n	80eae <printi+0xaa>
   80e20:	f10d 050f 	add.w	r5, sp, #15
   80e24:	990c      	ldr	r1, [sp, #48]	; 0x30
   80e26:	393a      	subs	r1, #58	; 0x3a
   80e28:	fbb4 f3f2 	udiv	r3, r4, r2
   80e2c:	fb02 4313 	mls	r3, r2, r3, r4
   80e30:	2b09      	cmp	r3, #9
   80e32:	bfc8      	it	gt
   80e34:	185b      	addgt	r3, r3, r1
   80e36:	3330      	adds	r3, #48	; 0x30
   80e38:	f805 3d01 	strb.w	r3, [r5, #-1]!
   80e3c:	fbb4 f4f2 	udiv	r4, r4, r2
   80e40:	2c00      	cmp	r4, #0
   80e42:	d1f1      	bne.n	80e28 <printi+0x24>
   80e44:	b156      	cbz	r6, 80e5c <printi+0x58>
   80e46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   80e48:	b11b      	cbz	r3, 80e52 <printi+0x4e>
   80e4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80e4c:	f013 0f02 	tst.w	r3, #2
   80e50:	d125      	bne.n	80e9e <printi+0x9a>
   80e52:	232d      	movs	r3, #45	; 0x2d
   80e54:	f805 3c01 	strb.w	r3, [r5, #-1]
   80e58:	3d01      	subs	r5, #1
   80e5a:	2600      	movs	r6, #0
   80e5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80e5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   80e60:	4629      	mov	r1, r5
   80e62:	4638      	mov	r0, r7
   80e64:	4c14      	ldr	r4, [pc, #80]	; (80eb8 <printi+0xb4>)
   80e66:	47a0      	blx	r4
   80e68:	4430      	add	r0, r6
   80e6a:	b005      	add	sp, #20
   80e6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80e6e:	2330      	movs	r3, #48	; 0x30
   80e70:	f88d 3004 	strb.w	r3, [sp, #4]
   80e74:	2300      	movs	r3, #0
   80e76:	f88d 3005 	strb.w	r3, [sp, #5]
   80e7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80e7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   80e7e:	a901      	add	r1, sp, #4
   80e80:	4c0d      	ldr	r4, [pc, #52]	; (80eb8 <printi+0xb4>)
   80e82:	47a0      	blx	r4
   80e84:	e7f1      	b.n	80e6a <printi+0x66>
   80e86:	2900      	cmp	r1, #0
   80e88:	dac4      	bge.n	80e14 <printi+0x10>
   80e8a:	424c      	negs	r4, r1
   80e8c:	2300      	movs	r3, #0
   80e8e:	f88d 300f 	strb.w	r3, [sp, #15]
   80e92:	f10d 050f 	add.w	r5, sp, #15
   80e96:	2c00      	cmp	r4, #0
   80e98:	d0d5      	beq.n	80e46 <printi+0x42>
   80e9a:	2601      	movs	r6, #1
   80e9c:	e7c0      	b.n	80e20 <printi+0x1c>
   80e9e:	202d      	movs	r0, #45	; 0x2d
   80ea0:	4b06      	ldr	r3, [pc, #24]	; (80ebc <printi+0xb8>)
   80ea2:	4798      	blx	r3
   80ea4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   80ea6:	3b01      	subs	r3, #1
   80ea8:	930a      	str	r3, [sp, #40]	; 0x28
   80eaa:	2601      	movs	r6, #1
   80eac:	e7d6      	b.n	80e5c <printi+0x58>
   80eae:	461e      	mov	r6, r3
   80eb0:	f10d 050f 	add.w	r5, sp, #15
   80eb4:	e7d2      	b.n	80e5c <printi+0x58>
   80eb6:	bf00      	nop
   80eb8:	00080d59 	.word	0x00080d59
   80ebc:	00081241 	.word	0x00081241

00080ec0 <print>:
   80ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80ec4:	b087      	sub	sp, #28
   80ec6:	4680      	mov	r8, r0
   80ec8:	780b      	ldrb	r3, [r1, #0]
   80eca:	2b00      	cmp	r3, #0
   80ecc:	f000 8094 	beq.w	80ff8 <print+0x138>
   80ed0:	468b      	mov	fp, r1
   80ed2:	4617      	mov	r7, r2
   80ed4:	2500      	movs	r5, #0
   80ed6:	4e4e      	ldr	r6, [pc, #312]	; (81010 <print+0x150>)
   80ed8:	f8df a13c 	ldr.w	sl, [pc, #316]	; 81018 <print+0x158>
   80edc:	f8df 913c 	ldr.w	r9, [pc, #316]	; 8101c <print+0x15c>
   80ee0:	e046      	b.n	80f70 <print+0xb0>
   80ee2:	2200      	movs	r2, #0
   80ee4:	e070      	b.n	80fc8 <print+0x108>
   80ee6:	6839      	ldr	r1, [r7, #0]
   80ee8:	3704      	adds	r7, #4
   80eea:	484a      	ldr	r0, [pc, #296]	; (81014 <print+0x154>)
   80eec:	2900      	cmp	r1, #0
   80eee:	bf08      	it	eq
   80ef0:	4601      	moveq	r1, r0
   80ef2:	4640      	mov	r0, r8
   80ef4:	47d0      	blx	sl
   80ef6:	4405      	add	r5, r0
   80ef8:	e035      	b.n	80f66 <print+0xa6>
   80efa:	6839      	ldr	r1, [r7, #0]
   80efc:	3704      	adds	r7, #4
   80efe:	2061      	movs	r0, #97	; 0x61
   80f00:	9002      	str	r0, [sp, #8]
   80f02:	9301      	str	r3, [sp, #4]
   80f04:	9200      	str	r2, [sp, #0]
   80f06:	2301      	movs	r3, #1
   80f08:	220a      	movs	r2, #10
   80f0a:	4640      	mov	r0, r8
   80f0c:	47c8      	blx	r9
   80f0e:	4405      	add	r5, r0
   80f10:	e029      	b.n	80f66 <print+0xa6>
   80f12:	6839      	ldr	r1, [r7, #0]
   80f14:	3704      	adds	r7, #4
   80f16:	2061      	movs	r0, #97	; 0x61
   80f18:	9002      	str	r0, [sp, #8]
   80f1a:	9301      	str	r3, [sp, #4]
   80f1c:	9200      	str	r2, [sp, #0]
   80f1e:	2300      	movs	r3, #0
   80f20:	2210      	movs	r2, #16
   80f22:	4640      	mov	r0, r8
   80f24:	47c8      	blx	r9
   80f26:	4405      	add	r5, r0
   80f28:	e01d      	b.n	80f66 <print+0xa6>
   80f2a:	6839      	ldr	r1, [r7, #0]
   80f2c:	3704      	adds	r7, #4
   80f2e:	2041      	movs	r0, #65	; 0x41
   80f30:	9002      	str	r0, [sp, #8]
   80f32:	9301      	str	r3, [sp, #4]
   80f34:	9200      	str	r2, [sp, #0]
   80f36:	2300      	movs	r3, #0
   80f38:	2210      	movs	r2, #16
   80f3a:	4640      	mov	r0, r8
   80f3c:	47c8      	blx	r9
   80f3e:	4405      	add	r5, r0
   80f40:	e011      	b.n	80f66 <print+0xa6>
   80f42:	6839      	ldr	r1, [r7, #0]
   80f44:	3704      	adds	r7, #4
   80f46:	2061      	movs	r0, #97	; 0x61
   80f48:	9002      	str	r0, [sp, #8]
   80f4a:	9301      	str	r3, [sp, #4]
   80f4c:	9200      	str	r2, [sp, #0]
   80f4e:	2300      	movs	r3, #0
   80f50:	220a      	movs	r2, #10
   80f52:	4640      	mov	r0, r8
   80f54:	47c8      	blx	r9
   80f56:	4405      	add	r5, r0
   80f58:	e005      	b.n	80f66 <print+0xa6>
   80f5a:	46a3      	mov	fp, r4
   80f5c:	f89b 0000 	ldrb.w	r0, [fp]
   80f60:	47b0      	blx	r6
   80f62:	3501      	adds	r5, #1
   80f64:	465c      	mov	r4, fp
   80f66:	f104 0b01 	add.w	fp, r4, #1
   80f6a:	7863      	ldrb	r3, [r4, #1]
   80f6c:	2b00      	cmp	r3, #0
   80f6e:	d044      	beq.n	80ffa <print+0x13a>
   80f70:	2b25      	cmp	r3, #37	; 0x25
   80f72:	d1f3      	bne.n	80f5c <print+0x9c>
   80f74:	f10b 0401 	add.w	r4, fp, #1
   80f78:	f89b 3001 	ldrb.w	r3, [fp, #1]
   80f7c:	2b00      	cmp	r3, #0
   80f7e:	d03c      	beq.n	80ffa <print+0x13a>
   80f80:	2b25      	cmp	r3, #37	; 0x25
   80f82:	d0ea      	beq.n	80f5a <print+0x9a>
   80f84:	2b2d      	cmp	r3, #45	; 0x2d
   80f86:	bf06      	itte	eq
   80f88:	f10b 0402 	addeq.w	r4, fp, #2
   80f8c:	2301      	moveq	r3, #1
   80f8e:	2300      	movne	r3, #0
   80f90:	7822      	ldrb	r2, [r4, #0]
   80f92:	2a30      	cmp	r2, #48	; 0x30
   80f94:	d105      	bne.n	80fa2 <print+0xe2>
   80f96:	f043 0302 	orr.w	r3, r3, #2
   80f9a:	f814 2f01 	ldrb.w	r2, [r4, #1]!
   80f9e:	2a30      	cmp	r2, #48	; 0x30
   80fa0:	d0f9      	beq.n	80f96 <print+0xd6>
   80fa2:	7821      	ldrb	r1, [r4, #0]
   80fa4:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   80fa8:	b2d2      	uxtb	r2, r2
   80faa:	2a09      	cmp	r2, #9
   80fac:	d899      	bhi.n	80ee2 <print+0x22>
   80fae:	2200      	movs	r2, #0
   80fb0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   80fb4:	3930      	subs	r1, #48	; 0x30
   80fb6:	eb01 0242 	add.w	r2, r1, r2, lsl #1
   80fba:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   80fbe:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
   80fc2:	b2c0      	uxtb	r0, r0
   80fc4:	2809      	cmp	r0, #9
   80fc6:	d9f3      	bls.n	80fb0 <print+0xf0>
   80fc8:	2973      	cmp	r1, #115	; 0x73
   80fca:	d08c      	beq.n	80ee6 <print+0x26>
   80fcc:	2964      	cmp	r1, #100	; 0x64
   80fce:	d094      	beq.n	80efa <print+0x3a>
   80fd0:	2978      	cmp	r1, #120	; 0x78
   80fd2:	d09e      	beq.n	80f12 <print+0x52>
   80fd4:	2958      	cmp	r1, #88	; 0x58
   80fd6:	d0a8      	beq.n	80f2a <print+0x6a>
   80fd8:	2975      	cmp	r1, #117	; 0x75
   80fda:	d0b2      	beq.n	80f42 <print+0x82>
   80fdc:	2963      	cmp	r1, #99	; 0x63
   80fde:	d1c2      	bne.n	80f66 <print+0xa6>
   80fe0:	6839      	ldr	r1, [r7, #0]
   80fe2:	3704      	adds	r7, #4
   80fe4:	f88d 1014 	strb.w	r1, [sp, #20]
   80fe8:	2100      	movs	r1, #0
   80fea:	f88d 1015 	strb.w	r1, [sp, #21]
   80fee:	a905      	add	r1, sp, #20
   80ff0:	4640      	mov	r0, r8
   80ff2:	47d0      	blx	sl
   80ff4:	4405      	add	r5, r0
   80ff6:	e7b6      	b.n	80f66 <print+0xa6>
   80ff8:	2500      	movs	r5, #0
   80ffa:	f1b8 0f00 	cmp.w	r8, #0
   80ffe:	d003      	beq.n	81008 <print+0x148>
   81000:	f8d8 3000 	ldr.w	r3, [r8]
   81004:	2200      	movs	r2, #0
   81006:	701a      	strb	r2, [r3, #0]
   81008:	4628      	mov	r0, r5
   8100a:	b007      	add	sp, #28
   8100c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81010:	00081241 	.word	0x00081241
   81014:	00081d38 	.word	0x00081d38
   81018:	00080d59 	.word	0x00080d59
   8101c:	00080e05 	.word	0x00080e05

00081020 <printf>:
   81020:	b40f      	push	{r0, r1, r2, r3}
   81022:	b500      	push	{lr}
   81024:	b083      	sub	sp, #12
   81026:	aa04      	add	r2, sp, #16
   81028:	f852 1b04 	ldr.w	r1, [r2], #4
   8102c:	9201      	str	r2, [sp, #4]
   8102e:	2000      	movs	r0, #0
   81030:	4b03      	ldr	r3, [pc, #12]	; (81040 <printf+0x20>)
   81032:	4798      	blx	r3
   81034:	b003      	add	sp, #12
   81036:	f85d eb04 	ldr.w	lr, [sp], #4
   8103a:	b004      	add	sp, #16
   8103c:	4770      	bx	lr
   8103e:	bf00      	nop
   81040:	00080ec1 	.word	0x00080ec1

00081044 <SysTick_init>:
static uint32_t milliseconds;
static uint16_t starttime = 0;
//SysTick_Type* SysTick = SysTick_BASE;

void SysTick_init(){
    SysTick->CTRL = 0b011;
   81044:	4b03      	ldr	r3, [pc, #12]	; (81054 <SysTick_init+0x10>)
   81046:	2203      	movs	r2, #3
   81048:	601a      	str	r2, [r3, #0]
    SysTick->LOAD = 0x2904;
   8104a:	f642 1204 	movw	r2, #10500	; 0x2904
   8104e:	605a      	str	r2, [r3, #4]
   81050:	4770      	bx	lr
   81052:	bf00      	nop
   81054:	e000e010 	.word	0xe000e010

00081058 <SysTick_Handler>:
}

void SysTick_Handler       ( void ){
    milliseconds++;
   81058:	4a02      	ldr	r2, [pc, #8]	; (81064 <SysTick_Handler+0xc>)
   8105a:	6813      	ldr	r3, [r2, #0]
   8105c:	3301      	adds	r3, #1
   8105e:	6013      	str	r3, [r2, #0]
   81060:	4770      	bx	lr
   81062:	bf00      	nop
   81064:	200004a8 	.word	0x200004a8

00081068 <return_milliseconds>:
}

uint32_t return_milliseconds(){
	return milliseconds;
}
   81068:	4b01      	ldr	r3, [pc, #4]	; (81070 <return_milliseconds+0x8>)
   8106a:	6818      	ldr	r0, [r3, #0]
   8106c:	4770      	bx	lr
   8106e:	bf00      	nop
   81070:	200004a8 	.word	0x200004a8

00081074 <return_seconds>:

uint16_t return_seconds(){
  uint16_t secs = (milliseconds/1000);
   81074:	4b03      	ldr	r3, [pc, #12]	; (81084 <return_seconds+0x10>)
   81076:	6818      	ldr	r0, [r3, #0]
   81078:	4b03      	ldr	r3, [pc, #12]	; (81088 <return_seconds+0x14>)
   8107a:	fba3 3000 	umull	r3, r0, r3, r0
  return secs;
}
   8107e:	f3c0 108f 	ubfx	r0, r0, #6, #16
   81082:	4770      	bx	lr
   81084:	200004a8 	.word	0x200004a8
   81088:	10624dd3 	.word	0x10624dd3

0008108c <return_starttime>:

uint16_t return_starttime(){
	return starttime;
}
   8108c:	4b01      	ldr	r3, [pc, #4]	; (81094 <return_starttime+0x8>)
   8108e:	8898      	ldrh	r0, [r3, #4]
   81090:	4770      	bx	lr
   81092:	bf00      	nop
   81094:	200004a8 	.word	0x200004a8

00081098 <set_starttime>:

void set_starttime(){
	starttime = return_seconds();
   81098:	4a03      	ldr	r2, [pc, #12]	; (810a8 <set_starttime+0x10>)
  uint16_t secs = (milliseconds/1000);
   8109a:	6813      	ldr	r3, [r2, #0]
   8109c:	4903      	ldr	r1, [pc, #12]	; (810ac <set_starttime+0x14>)
   8109e:	fba1 1303 	umull	r1, r3, r1, r3
   810a2:	099b      	lsrs	r3, r3, #6
   810a4:	8093      	strh	r3, [r2, #4]
   810a6:	4770      	bx	lr
   810a8:	200004a8 	.word	0x200004a8
   810ac:	10624dd3 	.word	0x10624dd3

000810b0 <get_controller_runs>:
	
#define DEBUG_INTERRUPT 1

uint8_t get_controller_runs(){
	return ti_counter;
}
   810b0:	4b01      	ldr	r3, [pc, #4]	; (810b8 <get_controller_runs+0x8>)
   810b2:	7818      	ldrb	r0, [r3, #0]
   810b4:	4770      	bx	lr
   810b6:	bf00      	nop
   810b8:	200004ae 	.word	0x200004ae

000810bc <increment_controller_runs>:

void increment_controller_runs(){
	ti_counter++;
   810bc:	4a02      	ldr	r2, [pc, #8]	; (810c8 <increment_controller_runs+0xc>)
   810be:	7813      	ldrb	r3, [r2, #0]
   810c0:	3301      	adds	r3, #1
   810c2:	7013      	strb	r3, [r2, #0]
   810c4:	4770      	bx	lr
   810c6:	bf00      	nop
   810c8:	200004ae 	.word	0x200004ae

000810cc <reset_controller_runs>:
}

void reset_controller_runs(){
	ti_counter = 0;
   810cc:	2200      	movs	r2, #0
   810ce:	4b01      	ldr	r3, [pc, #4]	; (810d4 <reset_controller_runs+0x8>)
   810d0:	701a      	strb	r2, [r3, #0]
   810d2:	4770      	bx	lr
   810d4:	200004ae 	.word	0x200004ae

000810d8 <timer_init>:
}

void timer_init(){
		
	PMC->PMC_PCER0 |= PMC_PCER0_PID27; //enable timer counter channel 0
   810d8:	4a11      	ldr	r2, [pc, #68]	; (81120 <timer_init+0x48>)
   810da:	6913      	ldr	r3, [r2, #16]
   810dc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
   810e0:	6113      	str	r3, [r2, #16]
		
	PIOB->PIO_PDR |= PIO_PDR_P25; //disable io on pinb 25
   810e2:	4b10      	ldr	r3, [pc, #64]	; (81124 <timer_init+0x4c>)
   810e4:	685a      	ldr	r2, [r3, #4]
   810e6:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   810ea:	605a      	str	r2, [r3, #4]
	PIOB->PIO_ABSR |= PIO_ABSR_P25; //PIO set peripheral b on pinb 25*/
   810ec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   810ee:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   810f2:	671a      	str	r2, [r3, #112]	; 0x70

	PIOB->PIO_PDR |= PIO_PDR_P27; //disable io on pinb 27
   810f4:	685a      	ldr	r2, [r3, #4]
   810f6:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
   810fa:	605a      	str	r2, [r3, #4]
	PIOB->PIO_ABSR |= PIO_ABSR_P27; //PIO set peripheral b on pinb 27*/
   810fc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   810fe:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
   81102:	671a      	str	r2, [r3, #112]	; 0x70
	
	tc->TC_CHANNEL[0].TC_CMR = 0x0909C000;
   81104:	f5a3 23c2 	sub.w	r3, r3, #397312	; 0x61000
   81108:	4a07      	ldr	r2, [pc, #28]	; (81128 <timer_init+0x50>)
   8110a:	605a      	str	r2, [r3, #4]
	tc->TC_CHANNEL[0].TC_RC = 0x000CD140;
   8110c:	4a07      	ldr	r2, [pc, #28]	; (8112c <timer_init+0x54>)
   8110e:	61da      	str	r2, [r3, #28]
	
	
	
	tc->TC_CHANNEL[0].TC_CCR = 0x00000001; //enables the clock
   81110:	2201      	movs	r2, #1
   81112:	601a      	str	r2, [r3, #0]
	tc->TC_CHANNEL[0].TC_CCR |= 0x1 << 2;
   81114:	681a      	ldr	r2, [r3, #0]
   81116:	f042 0204 	orr.w	r2, r2, #4
   8111a:	601a      	str	r2, [r3, #0]
   8111c:	4770      	bx	lr
   8111e:	bf00      	nop
   81120:	400e0600 	.word	0x400e0600
   81124:	400e1000 	.word	0x400e1000
   81128:	0909c000 	.word	0x0909c000
   8112c:	000cd140 	.word	0x000cd140

00081130 <timer_change_duty>:
	}
	if(dutyCycle > 100){
		dutyCycle = 100;
	}
	
	tc->TC_CHANNEL[0].TC_RA = 0x000CD140 - (0xA410 + 0x1A4*dutyCycle); // TC_RA - (min_value + dutyCycle*1prosentOfDifference)
   81130:	2864      	cmp	r0, #100	; 0x64
   81132:	bf28      	it	cs
   81134:	2064      	movcs	r0, #100	; 0x64
   81136:	4b05      	ldr	r3, [pc, #20]	; (8114c <timer_change_duty+0x1c>)
   81138:	fb03 f000 	mul.w	r0, r3, r0
   8113c:	f500 2042 	add.w	r0, r0, #794624	; 0xc2000
   81140:	f500 6053 	add.w	r0, r0, #3376	; 0xd30
   81144:	4b02      	ldr	r3, [pc, #8]	; (81150 <timer_change_duty+0x20>)
   81146:	6158      	str	r0, [r3, #20]
   81148:	4770      	bx	lr
   8114a:	bf00      	nop
   8114c:	fffffe5c 	.word	0xfffffe5c
   81150:	40080000 	.word	0x40080000

00081154 <TC2_Handler>:
	int a = tc->TC_CHANNEL[1].TC_SR; // funker uten?!
	NVIC_ClearPendingIRQ(ID_TC1);
	ti_counter++;
}*/

void TC2_Handler( void ){
   81154:	b508      	push	{r3, lr}
	
	
	printf("wtrffffff\n\r");
   81156:	4806      	ldr	r0, [pc, #24]	; (81170 <TC2_Handler+0x1c>)
   81158:	4b06      	ldr	r3, [pc, #24]	; (81174 <TC2_Handler+0x20>)
   8115a:	4798      	blx	r3
	int a = tc->TC_CHANNEL[2].TC_SR; // funker uten?!
   8115c:	4b06      	ldr	r3, [pc, #24]	; (81178 <TC2_Handler+0x24>)
   8115e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   81162:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   81166:	4b05      	ldr	r3, [pc, #20]	; (8117c <TC2_Handler+0x28>)
   81168:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   8116c:	bd08      	pop	{r3, pc}
   8116e:	bf00      	nop
   81170:	00081d40 	.word	0x00081d40
   81174:	00081021 	.word	0x00081021
   81178:	40080000 	.word	0x40080000
   8117c:	e000e100 	.word	0xe000e100

00081180 <init_ch1_PI>:
}

void init_ch1_PI(){
	
	
	PMC->PMC_PCER0 |= PMC_PCER0_PID28; //enable timer counter channel 1
   81180:	4a11      	ldr	r2, [pc, #68]	; (811c8 <init_ch1_PI+0x48>)
   81182:	6913      	ldr	r3, [r2, #16]
   81184:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   81188:	6113      	str	r3, [r2, #16]
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   8118a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   8118e:	4b0f      	ldr	r3, [pc, #60]	; (811cc <init_ch1_PI+0x4c>)
   81190:	601a      	str	r2, [r3, #0]
	
	NVIC_EnableIRQ(ID_TC1);
	
	PIOB->PIO_PDR |= PIO_PDR_P0; //disable io on pinb 0
   81192:	4b0f      	ldr	r3, [pc, #60]	; (811d0 <init_ch1_PI+0x50>)
   81194:	685a      	ldr	r2, [r3, #4]
   81196:	f042 0201 	orr.w	r2, r2, #1
   8119a:	605a      	str	r2, [r3, #4]
	PIOB->PIO_ABSR |= PIO_ABSR_P0; //PIO set peripheral b on pinb 0*/
   8119c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   8119e:	f042 0201 	orr.w	r2, r2, #1
   811a2:	671a      	str	r2, [r3, #112]	; 0x70
	
	tc->TC_CHANNEL[1].TC_CMR = 0x0009C000;
   811a4:	f5a3 23c2 	sub.w	r3, r3, #397312	; 0x61000
   811a8:	f44f 221c 	mov.w	r2, #638976	; 0x9c000
   811ac:	645a      	str	r2, [r3, #68]	; 0x44
	tc->TC_CHANNEL[1].TC_RC = 0x000CD140;
   811ae:	4a09      	ldr	r2, [pc, #36]	; (811d4 <init_ch1_PI+0x54>)
   811b0:	65da      	str	r2, [r3, #92]	; 0x5c
	
	tc->TC_CHANNEL[1].TC_IER |= TC_IER_CPCS; // enable interrupt on compare with RC
   811b2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
   811b4:	f042 0210 	orr.w	r2, r2, #16
   811b8:	665a      	str	r2, [r3, #100]	; 0x64
	
	tc->TC_CHANNEL[1].TC_CCR = 0x00000001; //enables the clock
   811ba:	2201      	movs	r2, #1
   811bc:	641a      	str	r2, [r3, #64]	; 0x40
	tc->TC_CHANNEL[1].TC_CCR |= 0x1 << 2;
   811be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   811c0:	f042 0204 	orr.w	r2, r2, #4
   811c4:	641a      	str	r2, [r3, #64]	; 0x40
   811c6:	4770      	bx	lr
   811c8:	400e0600 	.word	0x400e0600
   811cc:	e000e100 	.word	0xe000e100
   811d0:	400e1000 	.word	0x400e1000
   811d4:	000cd140 	.word	0x000cd140

000811d8 <configure_uart>:
   811d8:	4b16      	ldr	r3, [pc, #88]	; (81234 <configure_uart+0x5c>)
   811da:	2200      	movs	r2, #0
   811dc:	701a      	strb	r2, [r3, #0]
   811de:	705a      	strb	r2, [r3, #1]
   811e0:	4b15      	ldr	r3, [pc, #84]	; (81238 <configure_uart+0x60>)
   811e2:	f44f 7140 	mov.w	r1, #768	; 0x300
   811e6:	6459      	str	r1, [r3, #68]	; 0x44
   811e8:	6059      	str	r1, [r3, #4]
   811ea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   811ec:	6f18      	ldr	r0, [r3, #112]	; 0x70
   811ee:	4002      	ands	r2, r0
   811f0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   811f4:	671a      	str	r2, [r3, #112]	; 0x70
   811f6:	6659      	str	r1, [r3, #100]	; 0x64
   811f8:	f44f 7280 	mov.w	r2, #256	; 0x100
   811fc:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   81200:	611a      	str	r2, [r3, #16]
   81202:	f503 7300 	add.w	r3, r3, #512	; 0x200
   81206:	21ac      	movs	r1, #172	; 0xac
   81208:	6019      	str	r1, [r3, #0]
   8120a:	f240 2123 	movw	r1, #547	; 0x223
   8120e:	6219      	str	r1, [r3, #32]
   81210:	f44f 6100 	mov.w	r1, #2048	; 0x800
   81214:	6059      	str	r1, [r3, #4]
   81216:	f240 2102 	movw	r1, #514	; 0x202
   8121a:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   8121e:	f04f 31ff 	mov.w	r1, #4294967295
   81222:	60d9      	str	r1, [r3, #12]
   81224:	21e1      	movs	r1, #225	; 0xe1
   81226:	6099      	str	r1, [r3, #8]
   81228:	4904      	ldr	r1, [pc, #16]	; (8123c <configure_uart+0x64>)
   8122a:	600a      	str	r2, [r1, #0]
   8122c:	2250      	movs	r2, #80	; 0x50
   8122e:	601a      	str	r2, [r3, #0]
   81230:	4770      	bx	lr
   81232:	bf00      	nop
   81234:	200004b8 	.word	0x200004b8
   81238:	400e0e00 	.word	0x400e0e00
   8123c:	e000e100 	.word	0xe000e100

00081240 <uart_putchar>:
   81240:	4b07      	ldr	r3, [pc, #28]	; (81260 <uart_putchar+0x20>)
   81242:	695b      	ldr	r3, [r3, #20]
   81244:	f013 0f02 	tst.w	r3, #2
   81248:	d008      	beq.n	8125c <uart_putchar+0x1c>
   8124a:	4b05      	ldr	r3, [pc, #20]	; (81260 <uart_putchar+0x20>)
   8124c:	61d8      	str	r0, [r3, #28]
   8124e:	461a      	mov	r2, r3
   81250:	6953      	ldr	r3, [r2, #20]
   81252:	f413 7f00 	tst.w	r3, #512	; 0x200
   81256:	d0fb      	beq.n	81250 <uart_putchar+0x10>
   81258:	2000      	movs	r0, #0
   8125a:	4770      	bx	lr
   8125c:	2001      	movs	r0, #1
   8125e:	4770      	bx	lr
   81260:	400e0800 	.word	0x400e0800

00081264 <UART_Handler>:
   81264:	b508      	push	{r3, lr}
   81266:	4b15      	ldr	r3, [pc, #84]	; (812bc <UART_Handler+0x58>)
   81268:	695b      	ldr	r3, [r3, #20]
   8126a:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   8126e:	d003      	beq.n	81278 <UART_Handler+0x14>
   81270:	f44f 71a8 	mov.w	r1, #336	; 0x150
   81274:	4a11      	ldr	r2, [pc, #68]	; (812bc <UART_Handler+0x58>)
   81276:	6011      	str	r1, [r2, #0]
   81278:	f013 0f01 	tst.w	r3, #1
   8127c:	d012      	beq.n	812a4 <UART_Handler+0x40>
   8127e:	4810      	ldr	r0, [pc, #64]	; (812c0 <UART_Handler+0x5c>)
   81280:	7842      	ldrb	r2, [r0, #1]
   81282:	1c53      	adds	r3, r2, #1
   81284:	4259      	negs	r1, r3
   81286:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   8128a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   8128e:	bf58      	it	pl
   81290:	424b      	negpl	r3, r1
   81292:	7801      	ldrb	r1, [r0, #0]
   81294:	428b      	cmp	r3, r1
   81296:	d006      	beq.n	812a6 <UART_Handler+0x42>
   81298:	4908      	ldr	r1, [pc, #32]	; (812bc <UART_Handler+0x58>)
   8129a:	6988      	ldr	r0, [r1, #24]
   8129c:	4908      	ldr	r1, [pc, #32]	; (812c0 <UART_Handler+0x5c>)
   8129e:	440a      	add	r2, r1
   812a0:	7090      	strb	r0, [r2, #2]
   812a2:	704b      	strb	r3, [r1, #1]
   812a4:	bd08      	pop	{r3, pc}
   812a6:	4807      	ldr	r0, [pc, #28]	; (812c4 <UART_Handler+0x60>)
   812a8:	4b07      	ldr	r3, [pc, #28]	; (812c8 <UART_Handler+0x64>)
   812aa:	4798      	blx	r3
   812ac:	4b03      	ldr	r3, [pc, #12]	; (812bc <UART_Handler+0x58>)
   812ae:	699a      	ldr	r2, [r3, #24]
   812b0:	4b03      	ldr	r3, [pc, #12]	; (812c0 <UART_Handler+0x5c>)
   812b2:	7859      	ldrb	r1, [r3, #1]
   812b4:	440b      	add	r3, r1
   812b6:	709a      	strb	r2, [r3, #2]
   812b8:	bd08      	pop	{r3, pc}
   812ba:	bf00      	nop
   812bc:	400e0800 	.word	0x400e0800
   812c0:	200004b8 	.word	0x200004b8
   812c4:	00081d4c 	.word	0x00081d4c
   812c8:	00081021 	.word	0x00081021

000812cc <__aeabi_drsub>:
   812cc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   812d0:	e002      	b.n	812d8 <__adddf3>
   812d2:	bf00      	nop

000812d4 <__aeabi_dsub>:
   812d4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000812d8 <__adddf3>:
   812d8:	b530      	push	{r4, r5, lr}
   812da:	ea4f 0441 	mov.w	r4, r1, lsl #1
   812de:	ea4f 0543 	mov.w	r5, r3, lsl #1
   812e2:	ea94 0f05 	teq	r4, r5
   812e6:	bf08      	it	eq
   812e8:	ea90 0f02 	teqeq	r0, r2
   812ec:	bf1f      	itttt	ne
   812ee:	ea54 0c00 	orrsne.w	ip, r4, r0
   812f2:	ea55 0c02 	orrsne.w	ip, r5, r2
   812f6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   812fa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   812fe:	f000 80e2 	beq.w	814c6 <__adddf3+0x1ee>
   81302:	ea4f 5454 	mov.w	r4, r4, lsr #21
   81306:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   8130a:	bfb8      	it	lt
   8130c:	426d      	neglt	r5, r5
   8130e:	dd0c      	ble.n	8132a <__adddf3+0x52>
   81310:	442c      	add	r4, r5
   81312:	ea80 0202 	eor.w	r2, r0, r2
   81316:	ea81 0303 	eor.w	r3, r1, r3
   8131a:	ea82 0000 	eor.w	r0, r2, r0
   8131e:	ea83 0101 	eor.w	r1, r3, r1
   81322:	ea80 0202 	eor.w	r2, r0, r2
   81326:	ea81 0303 	eor.w	r3, r1, r3
   8132a:	2d36      	cmp	r5, #54	; 0x36
   8132c:	bf88      	it	hi
   8132e:	bd30      	pophi	{r4, r5, pc}
   81330:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   81334:	ea4f 3101 	mov.w	r1, r1, lsl #12
   81338:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   8133c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   81340:	d002      	beq.n	81348 <__adddf3+0x70>
   81342:	4240      	negs	r0, r0
   81344:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   81348:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   8134c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   81350:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   81354:	d002      	beq.n	8135c <__adddf3+0x84>
   81356:	4252      	negs	r2, r2
   81358:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   8135c:	ea94 0f05 	teq	r4, r5
   81360:	f000 80a7 	beq.w	814b2 <__adddf3+0x1da>
   81364:	f1a4 0401 	sub.w	r4, r4, #1
   81368:	f1d5 0e20 	rsbs	lr, r5, #32
   8136c:	db0d      	blt.n	8138a <__adddf3+0xb2>
   8136e:	fa02 fc0e 	lsl.w	ip, r2, lr
   81372:	fa22 f205 	lsr.w	r2, r2, r5
   81376:	1880      	adds	r0, r0, r2
   81378:	f141 0100 	adc.w	r1, r1, #0
   8137c:	fa03 f20e 	lsl.w	r2, r3, lr
   81380:	1880      	adds	r0, r0, r2
   81382:	fa43 f305 	asr.w	r3, r3, r5
   81386:	4159      	adcs	r1, r3
   81388:	e00e      	b.n	813a8 <__adddf3+0xd0>
   8138a:	f1a5 0520 	sub.w	r5, r5, #32
   8138e:	f10e 0e20 	add.w	lr, lr, #32
   81392:	2a01      	cmp	r2, #1
   81394:	fa03 fc0e 	lsl.w	ip, r3, lr
   81398:	bf28      	it	cs
   8139a:	f04c 0c02 	orrcs.w	ip, ip, #2
   8139e:	fa43 f305 	asr.w	r3, r3, r5
   813a2:	18c0      	adds	r0, r0, r3
   813a4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   813a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   813ac:	d507      	bpl.n	813be <__adddf3+0xe6>
   813ae:	f04f 0e00 	mov.w	lr, #0
   813b2:	f1dc 0c00 	rsbs	ip, ip, #0
   813b6:	eb7e 0000 	sbcs.w	r0, lr, r0
   813ba:	eb6e 0101 	sbc.w	r1, lr, r1
   813be:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   813c2:	d31b      	bcc.n	813fc <__adddf3+0x124>
   813c4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   813c8:	d30c      	bcc.n	813e4 <__adddf3+0x10c>
   813ca:	0849      	lsrs	r1, r1, #1
   813cc:	ea5f 0030 	movs.w	r0, r0, rrx
   813d0:	ea4f 0c3c 	mov.w	ip, ip, rrx
   813d4:	f104 0401 	add.w	r4, r4, #1
   813d8:	ea4f 5244 	mov.w	r2, r4, lsl #21
   813dc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   813e0:	f080 809a 	bcs.w	81518 <__adddf3+0x240>
   813e4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   813e8:	bf08      	it	eq
   813ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   813ee:	f150 0000 	adcs.w	r0, r0, #0
   813f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   813f6:	ea41 0105 	orr.w	r1, r1, r5
   813fa:	bd30      	pop	{r4, r5, pc}
   813fc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   81400:	4140      	adcs	r0, r0
   81402:	eb41 0101 	adc.w	r1, r1, r1
   81406:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8140a:	f1a4 0401 	sub.w	r4, r4, #1
   8140e:	d1e9      	bne.n	813e4 <__adddf3+0x10c>
   81410:	f091 0f00 	teq	r1, #0
   81414:	bf04      	itt	eq
   81416:	4601      	moveq	r1, r0
   81418:	2000      	moveq	r0, #0
   8141a:	fab1 f381 	clz	r3, r1
   8141e:	bf08      	it	eq
   81420:	3320      	addeq	r3, #32
   81422:	f1a3 030b 	sub.w	r3, r3, #11
   81426:	f1b3 0220 	subs.w	r2, r3, #32
   8142a:	da0c      	bge.n	81446 <__adddf3+0x16e>
   8142c:	320c      	adds	r2, #12
   8142e:	dd08      	ble.n	81442 <__adddf3+0x16a>
   81430:	f102 0c14 	add.w	ip, r2, #20
   81434:	f1c2 020c 	rsb	r2, r2, #12
   81438:	fa01 f00c 	lsl.w	r0, r1, ip
   8143c:	fa21 f102 	lsr.w	r1, r1, r2
   81440:	e00c      	b.n	8145c <__adddf3+0x184>
   81442:	f102 0214 	add.w	r2, r2, #20
   81446:	bfd8      	it	le
   81448:	f1c2 0c20 	rsble	ip, r2, #32
   8144c:	fa01 f102 	lsl.w	r1, r1, r2
   81450:	fa20 fc0c 	lsr.w	ip, r0, ip
   81454:	bfdc      	itt	le
   81456:	ea41 010c 	orrle.w	r1, r1, ip
   8145a:	4090      	lslle	r0, r2
   8145c:	1ae4      	subs	r4, r4, r3
   8145e:	bfa2      	ittt	ge
   81460:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   81464:	4329      	orrge	r1, r5
   81466:	bd30      	popge	{r4, r5, pc}
   81468:	ea6f 0404 	mvn.w	r4, r4
   8146c:	3c1f      	subs	r4, #31
   8146e:	da1c      	bge.n	814aa <__adddf3+0x1d2>
   81470:	340c      	adds	r4, #12
   81472:	dc0e      	bgt.n	81492 <__adddf3+0x1ba>
   81474:	f104 0414 	add.w	r4, r4, #20
   81478:	f1c4 0220 	rsb	r2, r4, #32
   8147c:	fa20 f004 	lsr.w	r0, r0, r4
   81480:	fa01 f302 	lsl.w	r3, r1, r2
   81484:	ea40 0003 	orr.w	r0, r0, r3
   81488:	fa21 f304 	lsr.w	r3, r1, r4
   8148c:	ea45 0103 	orr.w	r1, r5, r3
   81490:	bd30      	pop	{r4, r5, pc}
   81492:	f1c4 040c 	rsb	r4, r4, #12
   81496:	f1c4 0220 	rsb	r2, r4, #32
   8149a:	fa20 f002 	lsr.w	r0, r0, r2
   8149e:	fa01 f304 	lsl.w	r3, r1, r4
   814a2:	ea40 0003 	orr.w	r0, r0, r3
   814a6:	4629      	mov	r1, r5
   814a8:	bd30      	pop	{r4, r5, pc}
   814aa:	fa21 f004 	lsr.w	r0, r1, r4
   814ae:	4629      	mov	r1, r5
   814b0:	bd30      	pop	{r4, r5, pc}
   814b2:	f094 0f00 	teq	r4, #0
   814b6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   814ba:	bf06      	itte	eq
   814bc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   814c0:	3401      	addeq	r4, #1
   814c2:	3d01      	subne	r5, #1
   814c4:	e74e      	b.n	81364 <__adddf3+0x8c>
   814c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   814ca:	bf18      	it	ne
   814cc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   814d0:	d029      	beq.n	81526 <__adddf3+0x24e>
   814d2:	ea94 0f05 	teq	r4, r5
   814d6:	bf08      	it	eq
   814d8:	ea90 0f02 	teqeq	r0, r2
   814dc:	d005      	beq.n	814ea <__adddf3+0x212>
   814de:	ea54 0c00 	orrs.w	ip, r4, r0
   814e2:	bf04      	itt	eq
   814e4:	4619      	moveq	r1, r3
   814e6:	4610      	moveq	r0, r2
   814e8:	bd30      	pop	{r4, r5, pc}
   814ea:	ea91 0f03 	teq	r1, r3
   814ee:	bf1e      	ittt	ne
   814f0:	2100      	movne	r1, #0
   814f2:	2000      	movne	r0, #0
   814f4:	bd30      	popne	{r4, r5, pc}
   814f6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   814fa:	d105      	bne.n	81508 <__adddf3+0x230>
   814fc:	0040      	lsls	r0, r0, #1
   814fe:	4149      	adcs	r1, r1
   81500:	bf28      	it	cs
   81502:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   81506:	bd30      	pop	{r4, r5, pc}
   81508:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   8150c:	bf3c      	itt	cc
   8150e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   81512:	bd30      	popcc	{r4, r5, pc}
   81514:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   81518:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   8151c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   81520:	f04f 0000 	mov.w	r0, #0
   81524:	bd30      	pop	{r4, r5, pc}
   81526:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8152a:	bf1a      	itte	ne
   8152c:	4619      	movne	r1, r3
   8152e:	4610      	movne	r0, r2
   81530:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   81534:	bf1c      	itt	ne
   81536:	460b      	movne	r3, r1
   81538:	4602      	movne	r2, r0
   8153a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8153e:	bf06      	itte	eq
   81540:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   81544:	ea91 0f03 	teqeq	r1, r3
   81548:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   8154c:	bd30      	pop	{r4, r5, pc}
   8154e:	bf00      	nop

00081550 <__aeabi_ui2d>:
   81550:	f090 0f00 	teq	r0, #0
   81554:	bf04      	itt	eq
   81556:	2100      	moveq	r1, #0
   81558:	4770      	bxeq	lr
   8155a:	b530      	push	{r4, r5, lr}
   8155c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   81560:	f104 0432 	add.w	r4, r4, #50	; 0x32
   81564:	f04f 0500 	mov.w	r5, #0
   81568:	f04f 0100 	mov.w	r1, #0
   8156c:	e750      	b.n	81410 <__adddf3+0x138>
   8156e:	bf00      	nop

00081570 <__aeabi_i2d>:
   81570:	f090 0f00 	teq	r0, #0
   81574:	bf04      	itt	eq
   81576:	2100      	moveq	r1, #0
   81578:	4770      	bxeq	lr
   8157a:	b530      	push	{r4, r5, lr}
   8157c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   81580:	f104 0432 	add.w	r4, r4, #50	; 0x32
   81584:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   81588:	bf48      	it	mi
   8158a:	4240      	negmi	r0, r0
   8158c:	f04f 0100 	mov.w	r1, #0
   81590:	e73e      	b.n	81410 <__adddf3+0x138>
   81592:	bf00      	nop

00081594 <__aeabi_f2d>:
   81594:	0042      	lsls	r2, r0, #1
   81596:	ea4f 01e2 	mov.w	r1, r2, asr #3
   8159a:	ea4f 0131 	mov.w	r1, r1, rrx
   8159e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   815a2:	bf1f      	itttt	ne
   815a4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   815a8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   815ac:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   815b0:	4770      	bxne	lr
   815b2:	f092 0f00 	teq	r2, #0
   815b6:	bf14      	ite	ne
   815b8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   815bc:	4770      	bxeq	lr
   815be:	b530      	push	{r4, r5, lr}
   815c0:	f44f 7460 	mov.w	r4, #896	; 0x380
   815c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   815c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   815cc:	e720      	b.n	81410 <__adddf3+0x138>
   815ce:	bf00      	nop

000815d0 <__aeabi_ul2d>:
   815d0:	ea50 0201 	orrs.w	r2, r0, r1
   815d4:	bf08      	it	eq
   815d6:	4770      	bxeq	lr
   815d8:	b530      	push	{r4, r5, lr}
   815da:	f04f 0500 	mov.w	r5, #0
   815de:	e00a      	b.n	815f6 <__aeabi_l2d+0x16>

000815e0 <__aeabi_l2d>:
   815e0:	ea50 0201 	orrs.w	r2, r0, r1
   815e4:	bf08      	it	eq
   815e6:	4770      	bxeq	lr
   815e8:	b530      	push	{r4, r5, lr}
   815ea:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   815ee:	d502      	bpl.n	815f6 <__aeabi_l2d+0x16>
   815f0:	4240      	negs	r0, r0
   815f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   815f6:	f44f 6480 	mov.w	r4, #1024	; 0x400
   815fa:	f104 0432 	add.w	r4, r4, #50	; 0x32
   815fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   81602:	f43f aedc 	beq.w	813be <__adddf3+0xe6>
   81606:	f04f 0203 	mov.w	r2, #3
   8160a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8160e:	bf18      	it	ne
   81610:	3203      	addne	r2, #3
   81612:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   81616:	bf18      	it	ne
   81618:	3203      	addne	r2, #3
   8161a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   8161e:	f1c2 0320 	rsb	r3, r2, #32
   81622:	fa00 fc03 	lsl.w	ip, r0, r3
   81626:	fa20 f002 	lsr.w	r0, r0, r2
   8162a:	fa01 fe03 	lsl.w	lr, r1, r3
   8162e:	ea40 000e 	orr.w	r0, r0, lr
   81632:	fa21 f102 	lsr.w	r1, r1, r2
   81636:	4414      	add	r4, r2
   81638:	e6c1      	b.n	813be <__adddf3+0xe6>
   8163a:	bf00      	nop

0008163c <__aeabi_dmul>:
   8163c:	b570      	push	{r4, r5, r6, lr}
   8163e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   81642:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   81646:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8164a:	bf1d      	ittte	ne
   8164c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   81650:	ea94 0f0c 	teqne	r4, ip
   81654:	ea95 0f0c 	teqne	r5, ip
   81658:	f000 f8de 	bleq	81818 <__aeabi_dmul+0x1dc>
   8165c:	442c      	add	r4, r5
   8165e:	ea81 0603 	eor.w	r6, r1, r3
   81662:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   81666:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   8166a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   8166e:	bf18      	it	ne
   81670:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   81674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   81678:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   8167c:	d038      	beq.n	816f0 <__aeabi_dmul+0xb4>
   8167e:	fba0 ce02 	umull	ip, lr, r0, r2
   81682:	f04f 0500 	mov.w	r5, #0
   81686:	fbe1 e502 	umlal	lr, r5, r1, r2
   8168a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   8168e:	fbe0 e503 	umlal	lr, r5, r0, r3
   81692:	f04f 0600 	mov.w	r6, #0
   81696:	fbe1 5603 	umlal	r5, r6, r1, r3
   8169a:	f09c 0f00 	teq	ip, #0
   8169e:	bf18      	it	ne
   816a0:	f04e 0e01 	orrne.w	lr, lr, #1
   816a4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   816a8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   816ac:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   816b0:	d204      	bcs.n	816bc <__aeabi_dmul+0x80>
   816b2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   816b6:	416d      	adcs	r5, r5
   816b8:	eb46 0606 	adc.w	r6, r6, r6
   816bc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   816c0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   816c4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   816c8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   816cc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   816d0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   816d4:	bf88      	it	hi
   816d6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   816da:	d81e      	bhi.n	8171a <__aeabi_dmul+0xde>
   816dc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   816e0:	bf08      	it	eq
   816e2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   816e6:	f150 0000 	adcs.w	r0, r0, #0
   816ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   816ee:	bd70      	pop	{r4, r5, r6, pc}
   816f0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   816f4:	ea46 0101 	orr.w	r1, r6, r1
   816f8:	ea40 0002 	orr.w	r0, r0, r2
   816fc:	ea81 0103 	eor.w	r1, r1, r3
   81700:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   81704:	bfc2      	ittt	gt
   81706:	ebd4 050c 	rsbsgt	r5, r4, ip
   8170a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8170e:	bd70      	popgt	{r4, r5, r6, pc}
   81710:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   81714:	f04f 0e00 	mov.w	lr, #0
   81718:	3c01      	subs	r4, #1
   8171a:	f300 80ab 	bgt.w	81874 <__aeabi_dmul+0x238>
   8171e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   81722:	bfde      	ittt	le
   81724:	2000      	movle	r0, #0
   81726:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   8172a:	bd70      	pople	{r4, r5, r6, pc}
   8172c:	f1c4 0400 	rsb	r4, r4, #0
   81730:	3c20      	subs	r4, #32
   81732:	da35      	bge.n	817a0 <__aeabi_dmul+0x164>
   81734:	340c      	adds	r4, #12
   81736:	dc1b      	bgt.n	81770 <__aeabi_dmul+0x134>
   81738:	f104 0414 	add.w	r4, r4, #20
   8173c:	f1c4 0520 	rsb	r5, r4, #32
   81740:	fa00 f305 	lsl.w	r3, r0, r5
   81744:	fa20 f004 	lsr.w	r0, r0, r4
   81748:	fa01 f205 	lsl.w	r2, r1, r5
   8174c:	ea40 0002 	orr.w	r0, r0, r2
   81750:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   81754:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   81758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   8175c:	fa21 f604 	lsr.w	r6, r1, r4
   81760:	eb42 0106 	adc.w	r1, r2, r6
   81764:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   81768:	bf08      	it	eq
   8176a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8176e:	bd70      	pop	{r4, r5, r6, pc}
   81770:	f1c4 040c 	rsb	r4, r4, #12
   81774:	f1c4 0520 	rsb	r5, r4, #32
   81778:	fa00 f304 	lsl.w	r3, r0, r4
   8177c:	fa20 f005 	lsr.w	r0, r0, r5
   81780:	fa01 f204 	lsl.w	r2, r1, r4
   81784:	ea40 0002 	orr.w	r0, r0, r2
   81788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8178c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   81790:	f141 0100 	adc.w	r1, r1, #0
   81794:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   81798:	bf08      	it	eq
   8179a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8179e:	bd70      	pop	{r4, r5, r6, pc}
   817a0:	f1c4 0520 	rsb	r5, r4, #32
   817a4:	fa00 f205 	lsl.w	r2, r0, r5
   817a8:	ea4e 0e02 	orr.w	lr, lr, r2
   817ac:	fa20 f304 	lsr.w	r3, r0, r4
   817b0:	fa01 f205 	lsl.w	r2, r1, r5
   817b4:	ea43 0302 	orr.w	r3, r3, r2
   817b8:	fa21 f004 	lsr.w	r0, r1, r4
   817bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   817c0:	fa21 f204 	lsr.w	r2, r1, r4
   817c4:	ea20 0002 	bic.w	r0, r0, r2
   817c8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   817cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   817d0:	bf08      	it	eq
   817d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   817d6:	bd70      	pop	{r4, r5, r6, pc}
   817d8:	f094 0f00 	teq	r4, #0
   817dc:	d10f      	bne.n	817fe <__aeabi_dmul+0x1c2>
   817de:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   817e2:	0040      	lsls	r0, r0, #1
   817e4:	eb41 0101 	adc.w	r1, r1, r1
   817e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   817ec:	bf08      	it	eq
   817ee:	3c01      	subeq	r4, #1
   817f0:	d0f7      	beq.n	817e2 <__aeabi_dmul+0x1a6>
   817f2:	ea41 0106 	orr.w	r1, r1, r6
   817f6:	f095 0f00 	teq	r5, #0
   817fa:	bf18      	it	ne
   817fc:	4770      	bxne	lr
   817fe:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   81802:	0052      	lsls	r2, r2, #1
   81804:	eb43 0303 	adc.w	r3, r3, r3
   81808:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   8180c:	bf08      	it	eq
   8180e:	3d01      	subeq	r5, #1
   81810:	d0f7      	beq.n	81802 <__aeabi_dmul+0x1c6>
   81812:	ea43 0306 	orr.w	r3, r3, r6
   81816:	4770      	bx	lr
   81818:	ea94 0f0c 	teq	r4, ip
   8181c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   81820:	bf18      	it	ne
   81822:	ea95 0f0c 	teqne	r5, ip
   81826:	d00c      	beq.n	81842 <__aeabi_dmul+0x206>
   81828:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8182c:	bf18      	it	ne
   8182e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   81832:	d1d1      	bne.n	817d8 <__aeabi_dmul+0x19c>
   81834:	ea81 0103 	eor.w	r1, r1, r3
   81838:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8183c:	f04f 0000 	mov.w	r0, #0
   81840:	bd70      	pop	{r4, r5, r6, pc}
   81842:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   81846:	bf06      	itte	eq
   81848:	4610      	moveq	r0, r2
   8184a:	4619      	moveq	r1, r3
   8184c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   81850:	d019      	beq.n	81886 <__aeabi_dmul+0x24a>
   81852:	ea94 0f0c 	teq	r4, ip
   81856:	d102      	bne.n	8185e <__aeabi_dmul+0x222>
   81858:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   8185c:	d113      	bne.n	81886 <__aeabi_dmul+0x24a>
   8185e:	ea95 0f0c 	teq	r5, ip
   81862:	d105      	bne.n	81870 <__aeabi_dmul+0x234>
   81864:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   81868:	bf1c      	itt	ne
   8186a:	4610      	movne	r0, r2
   8186c:	4619      	movne	r1, r3
   8186e:	d10a      	bne.n	81886 <__aeabi_dmul+0x24a>
   81870:	ea81 0103 	eor.w	r1, r1, r3
   81874:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   81878:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8187c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   81880:	f04f 0000 	mov.w	r0, #0
   81884:	bd70      	pop	{r4, r5, r6, pc}
   81886:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8188a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   8188e:	bd70      	pop	{r4, r5, r6, pc}

00081890 <__aeabi_ddiv>:
   81890:	b570      	push	{r4, r5, r6, lr}
   81892:	f04f 0cff 	mov.w	ip, #255	; 0xff
   81896:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8189a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8189e:	bf1d      	ittte	ne
   818a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   818a4:	ea94 0f0c 	teqne	r4, ip
   818a8:	ea95 0f0c 	teqne	r5, ip
   818ac:	f000 f8a7 	bleq	819fe <__aeabi_ddiv+0x16e>
   818b0:	eba4 0405 	sub.w	r4, r4, r5
   818b4:	ea81 0e03 	eor.w	lr, r1, r3
   818b8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   818bc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   818c0:	f000 8088 	beq.w	819d4 <__aeabi_ddiv+0x144>
   818c4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   818c8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   818cc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   818d0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   818d4:	ea4f 2202 	mov.w	r2, r2, lsl #8
   818d8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   818dc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   818e0:	ea4f 2600 	mov.w	r6, r0, lsl #8
   818e4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   818e8:	429d      	cmp	r5, r3
   818ea:	bf08      	it	eq
   818ec:	4296      	cmpeq	r6, r2
   818ee:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   818f2:	f504 7440 	add.w	r4, r4, #768	; 0x300
   818f6:	d202      	bcs.n	818fe <__aeabi_ddiv+0x6e>
   818f8:	085b      	lsrs	r3, r3, #1
   818fa:	ea4f 0232 	mov.w	r2, r2, rrx
   818fe:	1ab6      	subs	r6, r6, r2
   81900:	eb65 0503 	sbc.w	r5, r5, r3
   81904:	085b      	lsrs	r3, r3, #1
   81906:	ea4f 0232 	mov.w	r2, r2, rrx
   8190a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   8190e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   81912:	ebb6 0e02 	subs.w	lr, r6, r2
   81916:	eb75 0e03 	sbcs.w	lr, r5, r3
   8191a:	bf22      	ittt	cs
   8191c:	1ab6      	subcs	r6, r6, r2
   8191e:	4675      	movcs	r5, lr
   81920:	ea40 000c 	orrcs.w	r0, r0, ip
   81924:	085b      	lsrs	r3, r3, #1
   81926:	ea4f 0232 	mov.w	r2, r2, rrx
   8192a:	ebb6 0e02 	subs.w	lr, r6, r2
   8192e:	eb75 0e03 	sbcs.w	lr, r5, r3
   81932:	bf22      	ittt	cs
   81934:	1ab6      	subcs	r6, r6, r2
   81936:	4675      	movcs	r5, lr
   81938:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   8193c:	085b      	lsrs	r3, r3, #1
   8193e:	ea4f 0232 	mov.w	r2, r2, rrx
   81942:	ebb6 0e02 	subs.w	lr, r6, r2
   81946:	eb75 0e03 	sbcs.w	lr, r5, r3
   8194a:	bf22      	ittt	cs
   8194c:	1ab6      	subcs	r6, r6, r2
   8194e:	4675      	movcs	r5, lr
   81950:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   81954:	085b      	lsrs	r3, r3, #1
   81956:	ea4f 0232 	mov.w	r2, r2, rrx
   8195a:	ebb6 0e02 	subs.w	lr, r6, r2
   8195e:	eb75 0e03 	sbcs.w	lr, r5, r3
   81962:	bf22      	ittt	cs
   81964:	1ab6      	subcs	r6, r6, r2
   81966:	4675      	movcs	r5, lr
   81968:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   8196c:	ea55 0e06 	orrs.w	lr, r5, r6
   81970:	d018      	beq.n	819a4 <__aeabi_ddiv+0x114>
   81972:	ea4f 1505 	mov.w	r5, r5, lsl #4
   81976:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   8197a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   8197e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   81982:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   81986:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   8198a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   8198e:	d1c0      	bne.n	81912 <__aeabi_ddiv+0x82>
   81990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   81994:	d10b      	bne.n	819ae <__aeabi_ddiv+0x11e>
   81996:	ea41 0100 	orr.w	r1, r1, r0
   8199a:	f04f 0000 	mov.w	r0, #0
   8199e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   819a2:	e7b6      	b.n	81912 <__aeabi_ddiv+0x82>
   819a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   819a8:	bf04      	itt	eq
   819aa:	4301      	orreq	r1, r0
   819ac:	2000      	moveq	r0, #0
   819ae:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   819b2:	bf88      	it	hi
   819b4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   819b8:	f63f aeaf 	bhi.w	8171a <__aeabi_dmul+0xde>
   819bc:	ebb5 0c03 	subs.w	ip, r5, r3
   819c0:	bf04      	itt	eq
   819c2:	ebb6 0c02 	subseq.w	ip, r6, r2
   819c6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   819ca:	f150 0000 	adcs.w	r0, r0, #0
   819ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   819d2:	bd70      	pop	{r4, r5, r6, pc}
   819d4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   819d8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   819dc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   819e0:	bfc2      	ittt	gt
   819e2:	ebd4 050c 	rsbsgt	r5, r4, ip
   819e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   819ea:	bd70      	popgt	{r4, r5, r6, pc}
   819ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   819f0:	f04f 0e00 	mov.w	lr, #0
   819f4:	3c01      	subs	r4, #1
   819f6:	e690      	b.n	8171a <__aeabi_dmul+0xde>
   819f8:	ea45 0e06 	orr.w	lr, r5, r6
   819fc:	e68d      	b.n	8171a <__aeabi_dmul+0xde>
   819fe:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   81a02:	ea94 0f0c 	teq	r4, ip
   81a06:	bf08      	it	eq
   81a08:	ea95 0f0c 	teqeq	r5, ip
   81a0c:	f43f af3b 	beq.w	81886 <__aeabi_dmul+0x24a>
   81a10:	ea94 0f0c 	teq	r4, ip
   81a14:	d10a      	bne.n	81a2c <__aeabi_ddiv+0x19c>
   81a16:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   81a1a:	f47f af34 	bne.w	81886 <__aeabi_dmul+0x24a>
   81a1e:	ea95 0f0c 	teq	r5, ip
   81a22:	f47f af25 	bne.w	81870 <__aeabi_dmul+0x234>
   81a26:	4610      	mov	r0, r2
   81a28:	4619      	mov	r1, r3
   81a2a:	e72c      	b.n	81886 <__aeabi_dmul+0x24a>
   81a2c:	ea95 0f0c 	teq	r5, ip
   81a30:	d106      	bne.n	81a40 <__aeabi_ddiv+0x1b0>
   81a32:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   81a36:	f43f aefd 	beq.w	81834 <__aeabi_dmul+0x1f8>
   81a3a:	4610      	mov	r0, r2
   81a3c:	4619      	mov	r1, r3
   81a3e:	e722      	b.n	81886 <__aeabi_dmul+0x24a>
   81a40:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   81a44:	bf18      	it	ne
   81a46:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   81a4a:	f47f aec5 	bne.w	817d8 <__aeabi_dmul+0x19c>
   81a4e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   81a52:	f47f af0d 	bne.w	81870 <__aeabi_dmul+0x234>
   81a56:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   81a5a:	f47f aeeb 	bne.w	81834 <__aeabi_dmul+0x1f8>
   81a5e:	e712      	b.n	81886 <__aeabi_dmul+0x24a>

00081a60 <__aeabi_d2iz>:
   81a60:	ea4f 0241 	mov.w	r2, r1, lsl #1
   81a64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   81a68:	d215      	bcs.n	81a96 <__aeabi_d2iz+0x36>
   81a6a:	d511      	bpl.n	81a90 <__aeabi_d2iz+0x30>
   81a6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   81a70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   81a74:	d912      	bls.n	81a9c <__aeabi_d2iz+0x3c>
   81a76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   81a7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   81a7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   81a82:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   81a86:	fa23 f002 	lsr.w	r0, r3, r2
   81a8a:	bf18      	it	ne
   81a8c:	4240      	negne	r0, r0
   81a8e:	4770      	bx	lr
   81a90:	f04f 0000 	mov.w	r0, #0
   81a94:	4770      	bx	lr
   81a96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   81a9a:	d105      	bne.n	81aa8 <__aeabi_d2iz+0x48>
   81a9c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   81aa0:	bf08      	it	eq
   81aa2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   81aa6:	4770      	bx	lr
   81aa8:	f04f 0000 	mov.w	r0, #0
   81aac:	4770      	bx	lr
   81aae:	bf00      	nop

00081ab0 <__aeabi_d2uiz>:
   81ab0:	004a      	lsls	r2, r1, #1
   81ab2:	d211      	bcs.n	81ad8 <__aeabi_d2uiz+0x28>
   81ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   81ab8:	d211      	bcs.n	81ade <__aeabi_d2uiz+0x2e>
   81aba:	d50d      	bpl.n	81ad8 <__aeabi_d2uiz+0x28>
   81abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   81ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   81ac4:	d40e      	bmi.n	81ae4 <__aeabi_d2uiz+0x34>
   81ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   81aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   81ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   81ad2:	fa23 f002 	lsr.w	r0, r3, r2
   81ad6:	4770      	bx	lr
   81ad8:	f04f 0000 	mov.w	r0, #0
   81adc:	4770      	bx	lr
   81ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   81ae2:	d102      	bne.n	81aea <__aeabi_d2uiz+0x3a>
   81ae4:	f04f 30ff 	mov.w	r0, #4294967295
   81ae8:	4770      	bx	lr
   81aea:	f04f 0000 	mov.w	r0, #0
   81aee:	4770      	bx	lr

00081af0 <__libc_init_array>:
   81af0:	b570      	push	{r4, r5, r6, lr}
   81af2:	4e0f      	ldr	r6, [pc, #60]	; (81b30 <__libc_init_array+0x40>)
   81af4:	4d0f      	ldr	r5, [pc, #60]	; (81b34 <__libc_init_array+0x44>)
   81af6:	1b76      	subs	r6, r6, r5
   81af8:	10b6      	asrs	r6, r6, #2
   81afa:	bf18      	it	ne
   81afc:	2400      	movne	r4, #0
   81afe:	d005      	beq.n	81b0c <__libc_init_array+0x1c>
   81b00:	3401      	adds	r4, #1
   81b02:	f855 3b04 	ldr.w	r3, [r5], #4
   81b06:	4798      	blx	r3
   81b08:	42a6      	cmp	r6, r4
   81b0a:	d1f9      	bne.n	81b00 <__libc_init_array+0x10>
   81b0c:	4e0a      	ldr	r6, [pc, #40]	; (81b38 <__libc_init_array+0x48>)
   81b0e:	4d0b      	ldr	r5, [pc, #44]	; (81b3c <__libc_init_array+0x4c>)
   81b10:	f000 f92e 	bl	81d70 <_init>
   81b14:	1b76      	subs	r6, r6, r5
   81b16:	10b6      	asrs	r6, r6, #2
   81b18:	bf18      	it	ne
   81b1a:	2400      	movne	r4, #0
   81b1c:	d006      	beq.n	81b2c <__libc_init_array+0x3c>
   81b1e:	3401      	adds	r4, #1
   81b20:	f855 3b04 	ldr.w	r3, [r5], #4
   81b24:	4798      	blx	r3
   81b26:	42a6      	cmp	r6, r4
   81b28:	d1f9      	bne.n	81b1e <__libc_init_array+0x2e>
   81b2a:	bd70      	pop	{r4, r5, r6, pc}
   81b2c:	bd70      	pop	{r4, r5, r6, pc}
   81b2e:	bf00      	nop
   81b30:	00081d7c 	.word	0x00081d7c
   81b34:	00081d7c 	.word	0x00081d7c
   81b38:	00081d84 	.word	0x00081d84
   81b3c:	00081d7c 	.word	0x00081d7c

00081b40 <register_fini>:
   81b40:	4b02      	ldr	r3, [pc, #8]	; (81b4c <register_fini+0xc>)
   81b42:	b113      	cbz	r3, 81b4a <register_fini+0xa>
   81b44:	4802      	ldr	r0, [pc, #8]	; (81b50 <register_fini+0x10>)
   81b46:	f000 b805 	b.w	81b54 <atexit>
   81b4a:	4770      	bx	lr
   81b4c:	00000000 	.word	0x00000000
   81b50:	00081b61 	.word	0x00081b61

00081b54 <atexit>:
   81b54:	2300      	movs	r3, #0
   81b56:	4601      	mov	r1, r0
   81b58:	461a      	mov	r2, r3
   81b5a:	4618      	mov	r0, r3
   81b5c:	f000 b81e 	b.w	81b9c <__register_exitproc>

00081b60 <__libc_fini_array>:
   81b60:	b538      	push	{r3, r4, r5, lr}
   81b62:	4c0a      	ldr	r4, [pc, #40]	; (81b8c <__libc_fini_array+0x2c>)
   81b64:	4d0a      	ldr	r5, [pc, #40]	; (81b90 <__libc_fini_array+0x30>)
   81b66:	1b64      	subs	r4, r4, r5
   81b68:	10a4      	asrs	r4, r4, #2
   81b6a:	d00a      	beq.n	81b82 <__libc_fini_array+0x22>
   81b6c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   81b70:	3b01      	subs	r3, #1
   81b72:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   81b76:	3c01      	subs	r4, #1
   81b78:	f855 3904 	ldr.w	r3, [r5], #-4
   81b7c:	4798      	blx	r3
   81b7e:	2c00      	cmp	r4, #0
   81b80:	d1f9      	bne.n	81b76 <__libc_fini_array+0x16>
   81b82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   81b86:	f000 b8fd 	b.w	81d84 <_fini>
   81b8a:	bf00      	nop
   81b8c:	00081d94 	.word	0x00081d94
   81b90:	00081d90 	.word	0x00081d90

00081b94 <__retarget_lock_acquire_recursive>:
   81b94:	4770      	bx	lr
   81b96:	bf00      	nop

00081b98 <__retarget_lock_release_recursive>:
   81b98:	4770      	bx	lr
   81b9a:	bf00      	nop

00081b9c <__register_exitproc>:
   81b9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   81ba0:	4d2c      	ldr	r5, [pc, #176]	; (81c54 <__register_exitproc+0xb8>)
   81ba2:	4606      	mov	r6, r0
   81ba4:	6828      	ldr	r0, [r5, #0]
   81ba6:	4698      	mov	r8, r3
   81ba8:	460f      	mov	r7, r1
   81baa:	4691      	mov	r9, r2
   81bac:	f7ff fff2 	bl	81b94 <__retarget_lock_acquire_recursive>
   81bb0:	4b29      	ldr	r3, [pc, #164]	; (81c58 <__register_exitproc+0xbc>)
   81bb2:	681c      	ldr	r4, [r3, #0]
   81bb4:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   81bb8:	2b00      	cmp	r3, #0
   81bba:	d03e      	beq.n	81c3a <__register_exitproc+0x9e>
   81bbc:	685a      	ldr	r2, [r3, #4]
   81bbe:	2a1f      	cmp	r2, #31
   81bc0:	dc1c      	bgt.n	81bfc <__register_exitproc+0x60>
   81bc2:	f102 0e01 	add.w	lr, r2, #1
   81bc6:	b176      	cbz	r6, 81be6 <__register_exitproc+0x4a>
   81bc8:	2101      	movs	r1, #1
   81bca:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   81bce:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   81bd2:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   81bd6:	4091      	lsls	r1, r2
   81bd8:	4308      	orrs	r0, r1
   81bda:	2e02      	cmp	r6, #2
   81bdc:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   81be0:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   81be4:	d023      	beq.n	81c2e <__register_exitproc+0x92>
   81be6:	3202      	adds	r2, #2
   81be8:	f8c3 e004 	str.w	lr, [r3, #4]
   81bec:	6828      	ldr	r0, [r5, #0]
   81bee:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   81bf2:	f7ff ffd1 	bl	81b98 <__retarget_lock_release_recursive>
   81bf6:	2000      	movs	r0, #0
   81bf8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   81bfc:	4b17      	ldr	r3, [pc, #92]	; (81c5c <__register_exitproc+0xc0>)
   81bfe:	b30b      	cbz	r3, 81c44 <__register_exitproc+0xa8>
   81c00:	f44f 70c8 	mov.w	r0, #400	; 0x190
   81c04:	f3af 8000 	nop.w
   81c08:	4603      	mov	r3, r0
   81c0a:	b1d8      	cbz	r0, 81c44 <__register_exitproc+0xa8>
   81c0c:	2000      	movs	r0, #0
   81c0e:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   81c12:	f04f 0e01 	mov.w	lr, #1
   81c16:	6058      	str	r0, [r3, #4]
   81c18:	6019      	str	r1, [r3, #0]
   81c1a:	4602      	mov	r2, r0
   81c1c:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   81c20:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   81c24:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   81c28:	2e00      	cmp	r6, #0
   81c2a:	d0dc      	beq.n	81be6 <__register_exitproc+0x4a>
   81c2c:	e7cc      	b.n	81bc8 <__register_exitproc+0x2c>
   81c2e:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   81c32:	4301      	orrs	r1, r0
   81c34:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   81c38:	e7d5      	b.n	81be6 <__register_exitproc+0x4a>
   81c3a:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   81c3e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   81c42:	e7bb      	b.n	81bbc <__register_exitproc+0x20>
   81c44:	6828      	ldr	r0, [r5, #0]
   81c46:	f7ff ffa7 	bl	81b98 <__retarget_lock_release_recursive>
   81c4a:	f04f 30ff 	mov.w	r0, #4294967295
   81c4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   81c52:	bf00      	nop
   81c54:	20000450 	.word	0x20000450
   81c58:	00081d6c 	.word	0x00081d6c
   81c5c:	00000000 	.word	0x00000000
   81c60:	304e4143 	.word	0x304e4143
   81c64:	73656d20 	.word	0x73656d20
   81c68:	65676173 	.word	0x65676173
   81c6c:	72726120 	.word	0x72726120
   81c70:	64657669 	.word	0x64657669
   81c74:	206e6920 	.word	0x206e6920
   81c78:	2d6e6f6e 	.word	0x2d6e6f6e
   81c7c:	64657375 	.word	0x64657375
   81c80:	69616d20 	.word	0x69616d20
   81c84:	786f626c 	.word	0x786f626c
   81c88:	00000d0a 	.word	0x00000d0a
   81c8c:	7373656d 	.word	0x7373656d
   81c90:	20656761 	.word	0x20656761
   81c94:	203a6469 	.word	0x203a6469
   81c98:	0d0a6425 	.word	0x0d0a6425
   81c9c:	00000000 	.word	0x00000000
   81ca0:	7373656d 	.word	0x7373656d
   81ca4:	20656761 	.word	0x20656761
   81ca8:	61746164 	.word	0x61746164
   81cac:	6e656c20 	.word	0x6e656c20
   81cb0:	3a687467 	.word	0x3a687467
   81cb4:	0a642520 	.word	0x0a642520
   81cb8:	0000000d 	.word	0x0000000d
   81cbc:	00206425 	.word	0x00206425
   81cc0:	7373656d 	.word	0x7373656d
   81cc4:	20656761 	.word	0x20656761
   81cc8:	203a6469 	.word	0x203a6469
   81ccc:	0d207825 	.word	0x0d207825
   81cd0:	0000000a 	.word	0x0000000a
   81cd4:	7373656d 	.word	0x7373656d
   81cd8:	20656761 	.word	0x20656761
   81cdc:	676e656c 	.word	0x676e656c
   81ce0:	203a6874 	.word	0x203a6874
   81ce4:	0d207825 	.word	0x0d207825
   81ce8:	0000000a 	.word	0x0000000a
   81cec:	7373656d 	.word	0x7373656d
   81cf0:	20656761 	.word	0x20656761
   81cf4:	61746164 	.word	0x61746164
   81cf8:	6425203a 	.word	0x6425203a
   81cfc:	000a0d20 	.word	0x000a0d20
   81d00:	6f636e45 	.word	0x6f636e45
   81d04:	20726564 	.word	0x20726564
   81d08:	20202020 	.word	0x20202020
   81d0c:	20202020 	.word	0x20202020
   81d10:	20202020 	.word	0x20202020
   81d14:	61746164 	.word	0x61746164
   81d18:	7825203a 	.word	0x7825203a
   81d1c:	000d0a20 	.word	0x000d0a20
   81d20:	6c6c6568 	.word	0x6c6c6568
   81d24:	000d0a6f 	.word	0x000d0a6f
   81d28:	6c616f67 	.word	0x6c616f67
   81d2c:	203a2073 	.word	0x203a2073
   81d30:	20206425 	.word	0x20206425
   81d34:	000d0a20 	.word	0x000d0a20
   81d38:	6c756e28 	.word	0x6c756e28
   81d3c:	0000296c 	.word	0x0000296c
   81d40:	66727477 	.word	0x66727477
   81d44:	66666666 	.word	0x66666666
   81d48:	000d0a66 	.word	0x000d0a66
   81d4c:	3a525245 	.word	0x3a525245
   81d50:	52415520 	.word	0x52415520
   81d54:	58522054 	.word	0x58522054
   81d58:	66756220 	.word	0x66756220
   81d5c:	20726566 	.word	0x20726566
   81d60:	66207369 	.word	0x66207369
   81d64:	0a6c6c75 	.word	0x0a6c6c75
   81d68:	0000000d 	.word	0x0000000d

00081d6c <_global_impure_ptr>:
   81d6c:	20000028                                (.. 

00081d70 <_init>:
   81d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81d72:	bf00      	nop
   81d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
   81d76:	bc08      	pop	{r3}
   81d78:	469e      	mov	lr, r3
   81d7a:	4770      	bx	lr

00081d7c <__init_array_start>:
   81d7c:	00081b41 	.word	0x00081b41

00081d80 <__frame_dummy_init_array_entry>:
   81d80:	00080119                                ....

00081d84 <_fini>:
   81d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81d86:	bf00      	nop
   81d88:	bcf8      	pop	{r3, r4, r5, r6, r7}
   81d8a:	bc08      	pop	{r3}
   81d8c:	469e      	mov	lr, r3
   81d8e:	4770      	bx	lr

00081d90 <__fini_array_start>:
   81d90:	000800f5 	.word	0x000800f5
