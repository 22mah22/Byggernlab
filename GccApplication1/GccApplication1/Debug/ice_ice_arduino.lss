
ice_ice_arduino.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001840  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000434  20000000  00081840  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000094  20000434  00081c74  00020434  2**2
                  ALLOC
  3 .stack        00000400  200004c8  00081d08  00020434  2**0
                  ALLOC
  4 .heap         00000200  200008c8  00082108  00020434  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002045d  2**0
                  CONTENTS, READONLY
  7 .debug_info   00007958  00000000  00000000  000204b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000157a  00000000  00000000  00027e0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000013a8  00000000  00000000  00029388  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000230  00000000  00000000  0002a730  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001b8  00000000  00000000  0002a960  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00012cd9  00000000  00000000  0002ab18  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00005648  00000000  00000000  0003d7f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00054590  00000000  00000000  00042e39  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000006ec  00000000  00000000  000973cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	c8 08 00 20 ad 04 08 00 a9 04 08 00 a9 04 08 00     ... ............
   80010:	a9 04 08 00 a9 04 08 00 a9 04 08 00 00 00 00 00     ................
	...
   8002c:	a9 04 08 00 a9 04 08 00 00 00 00 00 a9 04 08 00     ................
   8003c:	a9 04 08 00 a9 04 08 00 a9 04 08 00 a9 04 08 00     ................
   8004c:	a9 04 08 00 a9 04 08 00 a9 04 08 00 a9 04 08 00     ................
   8005c:	a9 04 08 00 91 0d 08 00 a9 04 08 00 00 00 00 00     ................
   8006c:	a9 04 08 00 a9 04 08 00 a9 04 08 00 a9 04 08 00     ................
	...
   80084:	a9 04 08 00 a9 04 08 00 a9 04 08 00 a9 04 08 00     ................
   80094:	a9 04 08 00 a9 04 08 00 a9 04 08 00 a9 04 08 00     ................
   800a4:	00 00 00 00 a9 04 08 00 d9 0c 08 00 a9 04 08 00     ................
   800b4:	a9 04 08 00 a9 04 08 00 a9 04 08 00 a9 04 08 00     ................
   800c4:	a9 04 08 00 a9 04 08 00 a9 04 08 00 a9 04 08 00     ................
   800d4:	9d 01 08 00 a9 04 08 00 a9 04 08 00 a9 04 08 00     ................
   800e4:	a9 04 08 00 a9 04 08 00 79 03 08 00 a9 04 08 00     ........y.......

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20000434 	.word	0x20000434
   80110:	00000000 	.word	0x00000000
   80114:	00081840 	.word	0x00081840

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00081840 	.word	0x00081840
   80154:	20000438 	.word	0x20000438
   80158:	00081840 	.word	0x00081840
   8015c:	00000000 	.word	0x00000000

00080160 <adc_init>:

#include "sam.h"

void adc_init(){
	
	PMC->PMC_PCER1 = PMC_PCER1_PID37; //enable adc controller
   80160:	2320      	movs	r3, #32
   80162:	4a0b      	ldr	r2, [pc, #44]	; (80190 <adc_init+0x30>)
   80164:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   80168:	4a0a      	ldr	r2, [pc, #40]	; (80194 <adc_init+0x34>)
   8016a:	6053      	str	r3, [r2, #4]
	
	//Enable interrupt in NVIC
	NVIC_EnableIRQ(ID_ADC);
	
	
	ADC->ADC_CHER = ADC_CHER_CH1; //pin a6 på arduino due
   8016c:	4b0a      	ldr	r3, [pc, #40]	; (80198 <adc_init+0x38>)
   8016e:	2202      	movs	r2, #2
   80170:	611a      	str	r2, [r3, #16]
	//ADC->ADC_MR = ADC_MR_TRGEN_EN;
	ADC->ADC_MR = ADC_MR_FREERUN;
   80172:	2180      	movs	r1, #128	; 0x80
   80174:	6059      	str	r1, [r3, #4]
	
	ADC->ADC_CR = ADC_CR_START;
   80176:	601a      	str	r2, [r3, #0]
	ADC->ADC_IER = ADC_IER_COMPE;
   80178:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   8017c:	625a      	str	r2, [r3, #36]	; 0x24
	//ADC->ADC_IER |= ADC_IER_DRDY;
	ADC->ADC_EMR |= ADC_EMR_CMPMODE_LOW;
   8017e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   80180:	641a      	str	r2, [r3, #64]	; 0x40

	//ADC->ADC_EMR = (0x0u << 9);
	ADC->ADC_EMR |= ADC_EMR_CMPSEL(1);
   80182:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   80184:	f042 0210 	orr.w	r2, r2, #16
   80188:	641a      	str	r2, [r3, #64]	; 0x40
	ADC->ADC_CWR = ADC_CWR_LOWTHRES(0x0ff);
   8018a:	22ff      	movs	r2, #255	; 0xff
   8018c:	645a      	str	r2, [r3, #68]	; 0x44
   8018e:	4770      	bx	lr
   80190:	400e0600 	.word	0x400e0600
   80194:	e000e100 	.word	0xe000e100
   80198:	400c0000 	.word	0x400c0000

0008019c <ADC_Handler>:
uint8_t TOTAL_GOALS = 0;

void ADC_Handler( void ){
	//printf("Aa");

	TO_INCREMENT = 1; 
   8019c:	2201      	movs	r2, #1
   8019e:	4b04      	ldr	r3, [pc, #16]	; (801b0 <ADC_Handler+0x14>)
   801a0:	701a      	strb	r2, [r3, #0]
	int i = ADC->ADC_ISR;
   801a2:	4b04      	ldr	r3, [pc, #16]	; (801b4 <ADC_Handler+0x18>)
   801a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   801a6:	2220      	movs	r2, #32
   801a8:	4b03      	ldr	r3, [pc, #12]	; (801b8 <ADC_Handler+0x1c>)
   801aa:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   801ae:	4770      	bx	lr
   801b0:	20000450 	.word	0x20000450
   801b4:	400c0000 	.word	0x400c0000
   801b8:	e000e100 	.word	0xe000e100

000801bc <goal_counter>:
	
}


void goal_counter(){
	if(GOAL_IN_ACTION == 0 && TO_INCREMENT){
   801bc:	4b0b      	ldr	r3, [pc, #44]	; (801ec <goal_counter+0x30>)
   801be:	785b      	ldrb	r3, [r3, #1]
   801c0:	b943      	cbnz	r3, 801d4 <goal_counter+0x18>
   801c2:	4b0a      	ldr	r3, [pc, #40]	; (801ec <goal_counter+0x30>)
   801c4:	781b      	ldrb	r3, [r3, #0]
   801c6:	b12b      	cbz	r3, 801d4 <goal_counter+0x18>
		TOTAL_GOALS += 1;
   801c8:	4b08      	ldr	r3, [pc, #32]	; (801ec <goal_counter+0x30>)
   801ca:	789a      	ldrb	r2, [r3, #2]
   801cc:	3201      	adds	r2, #1
   801ce:	709a      	strb	r2, [r3, #2]
		GOAL_IN_ACTION = 1;
   801d0:	2201      	movs	r2, #1
   801d2:	705a      	strb	r2, [r3, #1]
		
	}
	if(ADC->ADC_CDR[1] > 0x0ff){
   801d4:	4b06      	ldr	r3, [pc, #24]	; (801f0 <goal_counter+0x34>)
   801d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   801d8:	2bff      	cmp	r3, #255	; 0xff
   801da:	d902      	bls.n	801e2 <goal_counter+0x26>
		GOAL_IN_ACTION = 0;
   801dc:	2200      	movs	r2, #0
   801de:	4b03      	ldr	r3, [pc, #12]	; (801ec <goal_counter+0x30>)
   801e0:	705a      	strb	r2, [r3, #1]
	}
	TO_INCREMENT = 0;
   801e2:	2200      	movs	r2, #0
   801e4:	4b01      	ldr	r3, [pc, #4]	; (801ec <goal_counter+0x30>)
   801e6:	701a      	strb	r2, [r3, #0]
   801e8:	4770      	bx	lr
   801ea:	bf00      	nop
   801ec:	20000450 	.word	0x20000450
   801f0:	400c0000 	.word	0x400c0000

000801f4 <can_init>:
   801f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   801f8:	1855      	adds	r5, r2, r1
   801fa:	2908      	cmp	r1, #8
   801fc:	bf98      	it	ls
   801fe:	2a08      	cmpls	r2, #8
   80200:	d864      	bhi.n	802cc <can_init+0xd8>
   80202:	460e      	mov	r6, r1
   80204:	2d08      	cmp	r5, #8
   80206:	dc61      	bgt.n	802cc <can_init+0xd8>
   80208:	4a32      	ldr	r2, [pc, #200]	; (802d4 <can_init+0xe0>)
   8020a:	6813      	ldr	r3, [r2, #0]
   8020c:	f023 0301 	bic.w	r3, r3, #1
   80210:	6013      	str	r3, [r2, #0]
   80212:	6913      	ldr	r3, [r2, #16]
   80214:	4b30      	ldr	r3, [pc, #192]	; (802d8 <can_init+0xe4>)
   80216:	f44f 7440 	mov.w	r4, #768	; 0x300
   8021a:	645c      	str	r4, [r3, #68]	; 0x44
   8021c:	6f1c      	ldr	r4, [r3, #112]	; 0x70
   8021e:	f024 0403 	bic.w	r4, r4, #3
   80222:	671c      	str	r4, [r3, #112]	; 0x70
   80224:	2403      	movs	r4, #3
   80226:	605c      	str	r4, [r3, #4]
   80228:	665c      	str	r4, [r3, #100]	; 0x64
   8022a:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   8022e:	4c2b      	ldr	r4, [pc, #172]	; (802dc <can_init+0xe8>)
   80230:	f8c3 410c 	str.w	r4, [r3, #268]	; 0x10c
   80234:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
   80238:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
   8023c:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
   80240:	6150      	str	r0, [r2, #20]
   80242:	42a9      	cmp	r1, r5
   80244:	dc40      	bgt.n	802c8 <can_init+0xd4>
   80246:	460a      	mov	r2, r1
   80248:	2400      	movs	r4, #0
   8024a:	46a1      	mov	r9, r4
   8024c:	f8df 8084 	ldr.w	r8, [pc, #132]	; 802d4 <can_init+0xe0>
   80250:	f04f 5c00 	mov.w	ip, #536870912	; 0x20000000
   80254:	f04f 7e80 	mov.w	lr, #16777216	; 0x1000000
   80258:	2701      	movs	r7, #1
   8025a:	0153      	lsls	r3, r2, #5
   8025c:	f103 2040 	add.w	r0, r3, #1073758208	; 0x40004000
   80260:	f500 2030 	add.w	r0, r0, #720896	; 0xb0000
   80264:	f8c0 9204 	str.w	r9, [r0, #516]	; 0x204
   80268:	4443      	add	r3, r8
   8026a:	f8c3 c208 	str.w	ip, [r3, #520]	; 0x208
   8026e:	f8c0 e200 	str.w	lr, [r0, #512]	; 0x200
   80272:	f8d3 021c 	ldr.w	r0, [r3, #540]	; 0x21c
   80276:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   8027a:	f8c3 021c 	str.w	r0, [r3, #540]	; 0x21c
   8027e:	fa07 f302 	lsl.w	r3, r7, r2
   80282:	431c      	orrs	r4, r3
   80284:	3201      	adds	r2, #1
   80286:	4295      	cmp	r5, r2
   80288:	dae7      	bge.n	8025a <can_init+0x66>
   8028a:	b181      	cbz	r1, 802ae <can_init+0xba>
   8028c:	2300      	movs	r3, #0
   8028e:	4911      	ldr	r1, [pc, #68]	; (802d4 <can_init+0xe0>)
   80290:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
   80294:	f04f 7040 	mov.w	r0, #50331648	; 0x3000000
   80298:	eb01 1243 	add.w	r2, r1, r3, lsl #5
   8029c:	f8c2 5208 	str.w	r5, [r2, #520]	; 0x208
   802a0:	f103 0210 	add.w	r2, r3, #16
   802a4:	0152      	lsls	r2, r2, #5
   802a6:	5088      	str	r0, [r1, r2]
   802a8:	3301      	adds	r3, #1
   802aa:	429e      	cmp	r6, r3
   802ac:	d1f4      	bne.n	80298 <can_init+0xa4>
   802ae:	4b09      	ldr	r3, [pc, #36]	; (802d4 <can_init+0xe0>)
   802b0:	605c      	str	r4, [r3, #4]
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   802b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
   802b6:	4a0a      	ldr	r2, [pc, #40]	; (802e0 <can_init+0xec>)
   802b8:	6051      	str	r1, [r2, #4]
   802ba:	681a      	ldr	r2, [r3, #0]
   802bc:	f042 0201 	orr.w	r2, r2, #1
   802c0:	601a      	str	r2, [r3, #0]
   802c2:	2000      	movs	r0, #0
   802c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   802c8:	2400      	movs	r4, #0
   802ca:	e7de      	b.n	8028a <can_init+0x96>
   802cc:	2001      	movs	r0, #1
   802ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   802d2:	bf00      	nop
   802d4:	400b4000 	.word	0x400b4000
   802d8:	400e0e00 	.word	0x400e0e00
   802dc:	1000102b 	.word	0x1000102b
   802e0:	e000e100 	.word	0xe000e100

000802e4 <can_init_def_tx_rx_mb>:
   802e4:	b508      	push	{r3, lr}
   802e6:	2202      	movs	r2, #2
   802e8:	2101      	movs	r1, #1
   802ea:	4b01      	ldr	r3, [pc, #4]	; (802f0 <can_init_def_tx_rx_mb+0xc>)
   802ec:	4798      	blx	r3
   802ee:	bd08      	pop	{r3, pc}
   802f0:	000801f5 	.word	0x000801f5

000802f4 <can_receive>:
   802f4:	014b      	lsls	r3, r1, #5
   802f6:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   802fa:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   802fe:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   80302:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   80306:	d033      	beq.n	80370 <can_receive+0x7c>
   80308:	b430      	push	{r4, r5}
   8030a:	014b      	lsls	r3, r1, #5
   8030c:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   80310:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   80314:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
   80318:	f8d3 4218 	ldr.w	r4, [r3, #536]	; 0x218
   8031c:	f8d3 5208 	ldr.w	r5, [r3, #520]	; 0x208
   80320:	f3c5 458a 	ubfx	r5, r5, #18, #11
   80324:	8005      	strh	r5, [r0, #0]
   80326:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   8032a:	f3c3 4303 	ubfx	r3, r3, #16, #4
   8032e:	7083      	strb	r3, [r0, #2]
   80330:	461d      	mov	r5, r3
   80332:	b15b      	cbz	r3, 8034c <can_receive+0x58>
   80334:	3003      	adds	r0, #3
   80336:	2300      	movs	r3, #0
   80338:	2b03      	cmp	r3, #3
   8033a:	bfd9      	ittee	le
   8033c:	7002      	strble	r2, [r0, #0]
   8033e:	0a12      	lsrle	r2, r2, #8
   80340:	7004      	strbgt	r4, [r0, #0]
   80342:	0a24      	lsrgt	r4, r4, #8
   80344:	3301      	adds	r3, #1
   80346:	3001      	adds	r0, #1
   80348:	42ab      	cmp	r3, r5
   8034a:	d1f5      	bne.n	80338 <can_receive+0x44>
   8034c:	4b09      	ldr	r3, [pc, #36]	; (80374 <can_receive+0x80>)
   8034e:	f101 0210 	add.w	r2, r1, #16
   80352:	0152      	lsls	r2, r2, #5
   80354:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   80358:	5098      	str	r0, [r3, r2]
   8035a:	eb03 1141 	add.w	r1, r3, r1, lsl #5
   8035e:	f8d1 321c 	ldr.w	r3, [r1, #540]	; 0x21c
   80362:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   80366:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c
   8036a:	2000      	movs	r0, #0
   8036c:	bc30      	pop	{r4, r5}
   8036e:	4770      	bx	lr
   80370:	2001      	movs	r0, #1
   80372:	4770      	bx	lr
   80374:	400b4000 	.word	0x400b4000

00080378 <CAN0_Handler>:
 * \param void
 *
 * \retval 
 */
void CAN0_Handler( void )
{
   80378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8037c:	b084      	sub	sp, #16
	if(DEBUG_INTERRUPT){}/*printf("CAN0 interrupt\n\r")*/;
	char can_sr = CAN0->CAN_SR; 
   8037e:	4b35      	ldr	r3, [pc, #212]	; (80454 <CAN0_Handler+0xdc>)
   80380:	691c      	ldr	r4, [r3, #16]
	
	//RX interrupt
	if(can_sr & (CAN_SR_MB1 | CAN_SR_MB2) )//Only mailbox 1 and 2 specified for receiving
   80382:	f014 0f06 	tst.w	r4, #6
   80386:	d031      	beq.n	803ec <CAN0_Handler+0x74>
	{
		CAN_MESSAGE message;
		if(can_sr & CAN_SR_MB1)  //Mailbox 1 event
   80388:	f014 0f02 	tst.w	r4, #2
   8038c:	d13c      	bne.n	80408 <CAN0_Handler+0x90>
		{
			can_receive(&message, 1);

		}
		else if(can_sr & CAN_SR_MB2) //Mailbox 2 event
   8038e:	f014 0f04 	tst.w	r4, #4
   80392:	d03e      	beq.n	80412 <CAN0_Handler+0x9a>
		
		{
			can_receive(&message, 2);
   80394:	2102      	movs	r1, #2
   80396:	a801      	add	r0, sp, #4
   80398:	4b2f      	ldr	r3, [pc, #188]	; (80458 <CAN0_Handler+0xe0>)
   8039a:	4798      	blx	r3
		else
		{
			printf("CAN0 message arrived in non-used mailbox\n\r");
		}
		
		if(message.id < 0x00ff && message.id > 0x000f){
   8039c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   803a0:	f1a1 0310 	sub.w	r3, r1, #16
   803a4:	b29b      	uxth	r3, r3
   803a6:	2bee      	cmp	r3, #238	; 0xee
   803a8:	d837      	bhi.n	8041a <CAN0_Handler+0xa2>
			//interpret_joystick
			joystick.x_val = (message.data[3] == 0x11) ? message.data[0] : message.data[0]*-1;
   803aa:	f89d 300a 	ldrb.w	r3, [sp, #10]
   803ae:	2b11      	cmp	r3, #17
   803b0:	bf0f      	iteee	eq
   803b2:	f99d 3007 	ldrsbeq.w	r3, [sp, #7]
   803b6:	f89d 3007 	ldrbne.w	r3, [sp, #7]
   803ba:	425b      	negne	r3, r3
   803bc:	b25b      	sxtbne	r3, r3
   803be:	4a27      	ldr	r2, [pc, #156]	; (8045c <CAN0_Handler+0xe4>)
   803c0:	7013      	strb	r3, [r2, #0]
			joystick.y_val = (message.data[4] == 0x11) ? message.data[1] : message.data[1]*-1;
   803c2:	f89d 300b 	ldrb.w	r3, [sp, #11]
   803c6:	2b11      	cmp	r3, #17
   803c8:	bf0f      	iteee	eq
   803ca:	f99d 2008 	ldrsbeq.w	r2, [sp, #8]
   803ce:	f89d 2008 	ldrbne.w	r2, [sp, #8]
   803d2:	4252      	negne	r2, r2
   803d4:	b252      	sxtbne	r2, r2
   803d6:	4b21      	ldr	r3, [pc, #132]	; (8045c <CAN0_Handler+0xe4>)
   803d8:	705a      	strb	r2, [r3, #1]
			joystick.butt_pressed = message.data[2];
   803da:	f89d 2009 	ldrb.w	r2, [sp, #9]
   803de:	709a      	strb	r2, [r3, #2]
			joystick.left_val = message.data[5];
   803e0:	f89d 200c 	ldrb.w	r2, [sp, #12]
   803e4:	70da      	strb	r2, [r3, #3]
			joystick.right_val = message.data[6];
   803e6:	f89d 200d 	ldrb.w	r2, [sp, #13]
   803ea:	711a      	strb	r2, [r3, #4]
			if(DEBUG_INTERRUPT)printf("\n\r");
		}
		
	}
	
	if(can_sr & CAN_SR_MB0)
   803ec:	f014 0f01 	tst.w	r4, #1
   803f0:	d002      	beq.n	803f8 <CAN0_Handler+0x80>
	{
		/*if(DEBUG_INTERRUPT) printf("CAN0 MB0 ready to send \n\r");*/
		
	//Disable interrupt
		CAN0->CAN_IDR = CAN_IER_MB0;
   803f2:	2201      	movs	r2, #1
   803f4:	4b17      	ldr	r3, [pc, #92]	; (80454 <CAN0_Handler+0xdc>)
   803f6:	609a      	str	r2, [r3, #8]
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   803f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
   803fc:	4b18      	ldr	r3, [pc, #96]	; (80460 <CAN0_Handler+0xe8>)
   803fe:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184

	}
	
	NVIC_ClearPendingIRQ(ID_CAN0);
	//sei();*/
}
   80402:	b004      	add	sp, #16
   80404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			can_receive(&message, 1);
   80408:	2101      	movs	r1, #1
   8040a:	a801      	add	r0, sp, #4
   8040c:	4b12      	ldr	r3, [pc, #72]	; (80458 <CAN0_Handler+0xe0>)
   8040e:	4798      	blx	r3
   80410:	e7c4      	b.n	8039c <CAN0_Handler+0x24>
			printf("CAN0 message arrived in non-used mailbox\n\r");
   80412:	4814      	ldr	r0, [pc, #80]	; (80464 <CAN0_Handler+0xec>)
   80414:	4b14      	ldr	r3, [pc, #80]	; (80468 <CAN0_Handler+0xf0>)
   80416:	4798      	blx	r3
   80418:	e7c0      	b.n	8039c <CAN0_Handler+0x24>
			if(DEBUG_INTERRUPT)printf("message id: %d\n\r", message.id);
   8041a:	4814      	ldr	r0, [pc, #80]	; (8046c <CAN0_Handler+0xf4>)
   8041c:	4d12      	ldr	r5, [pc, #72]	; (80468 <CAN0_Handler+0xf0>)
   8041e:	47a8      	blx	r5
			if(DEBUG_INTERRUPT)printf("message data length: %d\n\r", message.data_length);
   80420:	f89d 1006 	ldrb.w	r1, [sp, #6]
   80424:	4812      	ldr	r0, [pc, #72]	; (80470 <CAN0_Handler+0xf8>)
   80426:	47a8      	blx	r5
			for (int i = 0; i < message.data_length; i++)
   80428:	f89d 3006 	ldrb.w	r3, [sp, #6]
   8042c:	b173      	cbz	r3, 8044c <CAN0_Handler+0xd4>
   8042e:	f10d 0607 	add.w	r6, sp, #7
   80432:	2500      	movs	r5, #0
				if(DEBUG_INTERRUPT)printf("%d ", message.data[i]);
   80434:	f8df 8040 	ldr.w	r8, [pc, #64]	; 80478 <CAN0_Handler+0x100>
   80438:	4f0b      	ldr	r7, [pc, #44]	; (80468 <CAN0_Handler+0xf0>)
   8043a:	f816 1b01 	ldrb.w	r1, [r6], #1
   8043e:	4640      	mov	r0, r8
   80440:	47b8      	blx	r7
			for (int i = 0; i < message.data_length; i++)
   80442:	3501      	adds	r5, #1
   80444:	f89d 3006 	ldrb.w	r3, [sp, #6]
   80448:	42ab      	cmp	r3, r5
   8044a:	dcf6      	bgt.n	8043a <CAN0_Handler+0xc2>
			if(DEBUG_INTERRUPT)printf("\n\r");
   8044c:	4809      	ldr	r0, [pc, #36]	; (80474 <CAN0_Handler+0xfc>)
   8044e:	4b06      	ldr	r3, [pc, #24]	; (80468 <CAN0_Handler+0xf0>)
   80450:	4798      	blx	r3
   80452:	e7cb      	b.n	803ec <CAN0_Handler+0x74>
   80454:	400b4000 	.word	0x400b4000
   80458:	000802f5 	.word	0x000802f5
   8045c:	20000458 	.word	0x20000458
   80460:	e000e100 	.word	0xe000e100
   80464:	0008173c 	.word	0x0008173c
   80468:	00080c41 	.word	0x00080c41
   8046c:	00081768 	.word	0x00081768
   80470:	0008177c 	.word	0x0008177c
   80474:	00081764 	.word	0x00081764
   80478:	00081798 	.word	0x00081798

0008047c <dac_init>:



void dac_init(){
	
	PMC->PMC_PCER1 = PMC_PCER1_PID38;
   8047c:	2240      	movs	r2, #64	; 0x40
   8047e:	4b09      	ldr	r3, [pc, #36]	; (804a4 <dac_init+0x28>)
   80480:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	
	
	DACC->DACC_MR |= DACC_MR_USER_SEL_CHANNEL1;
   80484:	f5a3 33c3 	sub.w	r3, r3, #99840	; 0x18600
   80488:	685a      	ldr	r2, [r3, #4]
   8048a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
   8048e:	605a      	str	r2, [r3, #4]
	DACC->DACC_MR &= ~(1<<0); //disable trigger, set freemode
   80490:	685a      	ldr	r2, [r3, #4]
   80492:	f022 0201 	bic.w	r2, r2, #1
   80496:	605a      	str	r2, [r3, #4]
	//DACC->DACC_MR |= DACC_MR_WORD_WORD;
	//DACC->DACC_CHER |= DACC_CHER_CH0;
	DACC->DACC_CHER = DACC_CHER_CH1;
   80498:	2202      	movs	r2, #2
   8049a:	611a      	str	r2, [r3, #16]
	
	DACC->DACC_CDR = 0x05ff;
   8049c:	f240 52ff 	movw	r2, #1535	; 0x5ff
   804a0:	621a      	str	r2, [r3, #32]
   804a2:	4770      	bx	lr
   804a4:	400e0600 	.word	0x400e0600

000804a8 <Dummy_Handler>:
   804a8:	e7fe      	b.n	804a8 <Dummy_Handler>
	...

000804ac <Reset_Handler>:
   804ac:	b508      	push	{r3, lr}
   804ae:	4b18      	ldr	r3, [pc, #96]	; (80510 <Reset_Handler+0x64>)
   804b0:	4a18      	ldr	r2, [pc, #96]	; (80514 <Reset_Handler+0x68>)
   804b2:	429a      	cmp	r2, r3
   804b4:	d010      	beq.n	804d8 <Reset_Handler+0x2c>
   804b6:	4b18      	ldr	r3, [pc, #96]	; (80518 <Reset_Handler+0x6c>)
   804b8:	4a15      	ldr	r2, [pc, #84]	; (80510 <Reset_Handler+0x64>)
   804ba:	429a      	cmp	r2, r3
   804bc:	d20c      	bcs.n	804d8 <Reset_Handler+0x2c>
   804be:	3b01      	subs	r3, #1
   804c0:	1a9b      	subs	r3, r3, r2
   804c2:	f023 0303 	bic.w	r3, r3, #3
   804c6:	3304      	adds	r3, #4
   804c8:	4413      	add	r3, r2
   804ca:	4912      	ldr	r1, [pc, #72]	; (80514 <Reset_Handler+0x68>)
   804cc:	f851 0b04 	ldr.w	r0, [r1], #4
   804d0:	f842 0b04 	str.w	r0, [r2], #4
   804d4:	429a      	cmp	r2, r3
   804d6:	d1f9      	bne.n	804cc <Reset_Handler+0x20>
   804d8:	4b10      	ldr	r3, [pc, #64]	; (8051c <Reset_Handler+0x70>)
   804da:	4a11      	ldr	r2, [pc, #68]	; (80520 <Reset_Handler+0x74>)
   804dc:	429a      	cmp	r2, r3
   804de:	d20a      	bcs.n	804f6 <Reset_Handler+0x4a>
   804e0:	3b01      	subs	r3, #1
   804e2:	1a9b      	subs	r3, r3, r2
   804e4:	f023 0303 	bic.w	r3, r3, #3
   804e8:	3304      	adds	r3, #4
   804ea:	4413      	add	r3, r2
   804ec:	2100      	movs	r1, #0
   804ee:	f842 1b04 	str.w	r1, [r2], #4
   804f2:	4293      	cmp	r3, r2
   804f4:	d1fb      	bne.n	804ee <Reset_Handler+0x42>
   804f6:	4b0b      	ldr	r3, [pc, #44]	; (80524 <Reset_Handler+0x78>)
   804f8:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   804fc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   80500:	4a09      	ldr	r2, [pc, #36]	; (80528 <Reset_Handler+0x7c>)
   80502:	6093      	str	r3, [r2, #8]
   80504:	4b09      	ldr	r3, [pc, #36]	; (8052c <Reset_Handler+0x80>)
   80506:	4798      	blx	r3
   80508:	4b09      	ldr	r3, [pc, #36]	; (80530 <Reset_Handler+0x84>)
   8050a:	4798      	blx	r3
   8050c:	e7fe      	b.n	8050c <Reset_Handler+0x60>
   8050e:	bf00      	nop
   80510:	20000000 	.word	0x20000000
   80514:	00081840 	.word	0x00081840
   80518:	20000434 	.word	0x20000434
   8051c:	200004c8 	.word	0x200004c8
   80520:	20000434 	.word	0x20000434
   80524:	00080000 	.word	0x00080000
   80528:	e000ed00 	.word	0xe000ed00
   8052c:	000815cd 	.word	0x000815cd
   80530:	00080821 	.word	0x00080821

00080534 <SystemInit>:
   80534:	f44f 6380 	mov.w	r3, #1024	; 0x400
   80538:	4a20      	ldr	r2, [pc, #128]	; (805bc <SystemInit+0x88>)
   8053a:	6013      	str	r3, [r2, #0]
   8053c:	f502 7200 	add.w	r2, r2, #512	; 0x200
   80540:	6013      	str	r3, [r2, #0]
   80542:	4b1f      	ldr	r3, [pc, #124]	; (805c0 <SystemInit+0x8c>)
   80544:	6a1b      	ldr	r3, [r3, #32]
   80546:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   8054a:	d107      	bne.n	8055c <SystemInit+0x28>
   8054c:	4a1d      	ldr	r2, [pc, #116]	; (805c4 <SystemInit+0x90>)
   8054e:	4b1c      	ldr	r3, [pc, #112]	; (805c0 <SystemInit+0x8c>)
   80550:	621a      	str	r2, [r3, #32]
   80552:	461a      	mov	r2, r3
   80554:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80556:	f013 0f01 	tst.w	r3, #1
   8055a:	d0fb      	beq.n	80554 <SystemInit+0x20>
   8055c:	4a1a      	ldr	r2, [pc, #104]	; (805c8 <SystemInit+0x94>)
   8055e:	4b18      	ldr	r3, [pc, #96]	; (805c0 <SystemInit+0x8c>)
   80560:	621a      	str	r2, [r3, #32]
   80562:	461a      	mov	r2, r3
   80564:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80566:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   8056a:	d0fb      	beq.n	80564 <SystemInit+0x30>
   8056c:	4a14      	ldr	r2, [pc, #80]	; (805c0 <SystemInit+0x8c>)
   8056e:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80570:	f023 0303 	bic.w	r3, r3, #3
   80574:	f043 0301 	orr.w	r3, r3, #1
   80578:	6313      	str	r3, [r2, #48]	; 0x30
   8057a:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8057c:	f013 0f08 	tst.w	r3, #8
   80580:	d0fb      	beq.n	8057a <SystemInit+0x46>
   80582:	4a12      	ldr	r2, [pc, #72]	; (805cc <SystemInit+0x98>)
   80584:	4b0e      	ldr	r3, [pc, #56]	; (805c0 <SystemInit+0x8c>)
   80586:	629a      	str	r2, [r3, #40]	; 0x28
   80588:	461a      	mov	r2, r3
   8058a:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8058c:	f013 0f02 	tst.w	r3, #2
   80590:	d0fb      	beq.n	8058a <SystemInit+0x56>
   80592:	2211      	movs	r2, #17
   80594:	4b0a      	ldr	r3, [pc, #40]	; (805c0 <SystemInit+0x8c>)
   80596:	631a      	str	r2, [r3, #48]	; 0x30
   80598:	461a      	mov	r2, r3
   8059a:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8059c:	f013 0f08 	tst.w	r3, #8
   805a0:	d0fb      	beq.n	8059a <SystemInit+0x66>
   805a2:	2212      	movs	r2, #18
   805a4:	4b06      	ldr	r3, [pc, #24]	; (805c0 <SystemInit+0x8c>)
   805a6:	631a      	str	r2, [r3, #48]	; 0x30
   805a8:	461a      	mov	r2, r3
   805aa:	6e93      	ldr	r3, [r2, #104]	; 0x68
   805ac:	f013 0f08 	tst.w	r3, #8
   805b0:	d0fb      	beq.n	805aa <SystemInit+0x76>
   805b2:	4a07      	ldr	r2, [pc, #28]	; (805d0 <SystemInit+0x9c>)
   805b4:	4b07      	ldr	r3, [pc, #28]	; (805d4 <SystemInit+0xa0>)
   805b6:	601a      	str	r2, [r3, #0]
   805b8:	4770      	bx	lr
   805ba:	bf00      	nop
   805bc:	400e0a00 	.word	0x400e0a00
   805c0:	400e0600 	.word	0x400e0600
   805c4:	00370809 	.word	0x00370809
   805c8:	01370809 	.word	0x01370809
   805cc:	200d3f01 	.word	0x200d3f01
   805d0:	0501bd00 	.word	0x0501bd00
   805d4:	20000000 	.word	0x20000000

000805d8 <move_solenoid>:
 #include "sam.h"
 
 uint8_t previous = 1;
 
 
 void move_solenoid(){
   805d8:	b510      	push	{r4, lr}
	 //printf("joystick.x_val : %d \n\r", joystick.x_val);
	 
	 if(joystick.x_val < 0){
   805da:	4b17      	ldr	r3, [pc, #92]	; (80638 <move_solenoid+0x60>)
   805dc:	f993 0000 	ldrsb.w	r0, [r3]
   805e0:	2800      	cmp	r0, #0
   805e2:	db0f      	blt.n	80604 <move_solenoid+0x2c>
		 uint8_t val = 50-abs(joystick.x_val)*0.5;
		 timer_change_duty(val);
	 }
	 if(joystick.x_val >= 0){
		 uint8_t val2 = 50+joystick.x_val*0.5;
   805e4:	4b15      	ldr	r3, [pc, #84]	; (8063c <move_solenoid+0x64>)
   805e6:	4798      	blx	r3
   805e8:	2200      	movs	r2, #0
   805ea:	4b15      	ldr	r3, [pc, #84]	; (80640 <move_solenoid+0x68>)
   805ec:	4c15      	ldr	r4, [pc, #84]	; (80644 <move_solenoid+0x6c>)
   805ee:	47a0      	blx	r4
   805f0:	2200      	movs	r2, #0
   805f2:	4b15      	ldr	r3, [pc, #84]	; (80648 <move_solenoid+0x70>)
   805f4:	4c15      	ldr	r4, [pc, #84]	; (8064c <move_solenoid+0x74>)
   805f6:	47a0      	blx	r4
   805f8:	4b15      	ldr	r3, [pc, #84]	; (80650 <move_solenoid+0x78>)
   805fa:	4798      	blx	r3
		 timer_change_duty(val2);
   805fc:	b2c0      	uxtb	r0, r0
   805fe:	4b15      	ldr	r3, [pc, #84]	; (80654 <move_solenoid+0x7c>)
   80600:	4798      	blx	r3
   80602:	bd10      	pop	{r4, pc}
		 uint8_t val = 50-abs(joystick.x_val)*0.5;
   80604:	2800      	cmp	r0, #0
   80606:	bfb8      	it	lt
   80608:	4240      	neglt	r0, r0
   8060a:	4b0c      	ldr	r3, [pc, #48]	; (8063c <move_solenoid+0x64>)
   8060c:	4798      	blx	r3
   8060e:	2200      	movs	r2, #0
   80610:	4b0b      	ldr	r3, [pc, #44]	; (80640 <move_solenoid+0x68>)
   80612:	4c0c      	ldr	r4, [pc, #48]	; (80644 <move_solenoid+0x6c>)
   80614:	47a0      	blx	r4
   80616:	4602      	mov	r2, r0
   80618:	460b      	mov	r3, r1
   8061a:	2000      	movs	r0, #0
   8061c:	490a      	ldr	r1, [pc, #40]	; (80648 <move_solenoid+0x70>)
   8061e:	4c0e      	ldr	r4, [pc, #56]	; (80658 <move_solenoid+0x80>)
   80620:	47a0      	blx	r4
   80622:	4b0b      	ldr	r3, [pc, #44]	; (80650 <move_solenoid+0x78>)
   80624:	4798      	blx	r3
		 timer_change_duty(val);
   80626:	b2c0      	uxtb	r0, r0
   80628:	4b0a      	ldr	r3, [pc, #40]	; (80654 <move_solenoid+0x7c>)
   8062a:	4798      	blx	r3
	 if(joystick.x_val >= 0){
   8062c:	4b02      	ldr	r3, [pc, #8]	; (80638 <move_solenoid+0x60>)
   8062e:	f993 0000 	ldrsb.w	r0, [r3]
   80632:	2800      	cmp	r0, #0
   80634:	dbe5      	blt.n	80602 <move_solenoid+0x2a>
   80636:	e7d5      	b.n	805e4 <move_solenoid+0xc>
   80638:	20000458 	.word	0x20000458
   8063c:	0008109d 	.word	0x0008109d
   80640:	3fe00000 	.word	0x3fe00000
   80644:	00081169 	.word	0x00081169
   80648:	40490000 	.word	0x40490000
   8064c:	00080e05 	.word	0x00080e05
   80650:	0008158d 	.word	0x0008158d
   80654:	00080cb5 	.word	0x00080cb5
   80658:	00080e01 	.word	0x00080e01

0008065c <change_motor_speed>:
 
 
 void change_motor_speed(){
	 //printf("joystick.y_val : %d \n\r", joystick.y_val);
	 
	 if(joystick.y_val < - 10){
   8065c:	4b16      	ldr	r3, [pc, #88]	; (806b8 <change_motor_speed+0x5c>)
   8065e:	f993 3001 	ldrsb.w	r3, [r3, #1]
   80662:	f113 0f0a 	cmn.w	r3, #10
   80666:	da0e      	bge.n	80686 <change_motor_speed+0x2a>
		 PIOD->PIO_CODR = PIO_CODR_P10; //set direction left
   80668:	f44f 6180 	mov.w	r1, #1024	; 0x400
   8066c:	4a13      	ldr	r2, [pc, #76]	; (806bc <change_motor_speed+0x60>)
   8066e:	6351      	str	r1, [r2, #52]	; 0x34
		 uint16_t val = 0x01ff+abs(joystick.y_val)*5;
   80670:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
   80674:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
   80678:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   8067c:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
		 DACC->DACC_CDR = val;
   80680:	b292      	uxth	r2, r2
   80682:	490f      	ldr	r1, [pc, #60]	; (806c0 <change_motor_speed+0x64>)
   80684:	620a      	str	r2, [r1, #32]
	 }
	 if(joystick.y_val >= 10){
   80686:	2b09      	cmp	r3, #9
   80688:	dd0e      	ble.n	806a8 <change_motor_speed+0x4c>
		 PIOD->PIO_SODR = PIO_SODR_P10; //set direction right
   8068a:	f44f 6180 	mov.w	r1, #1024	; 0x400
   8068e:	4a0b      	ldr	r2, [pc, #44]	; (806bc <change_motor_speed+0x60>)
   80690:	6311      	str	r1, [r2, #48]	; 0x30
		 uint16_t val2 = 0x01ff+abs(joystick.y_val)*5;
   80692:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
   80696:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
   8069a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   8069e:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
		 DACC->DACC_CDR = val2;
   806a2:	b292      	uxth	r2, r2
   806a4:	4906      	ldr	r1, [pc, #24]	; (806c0 <change_motor_speed+0x64>)
   806a6:	620a      	str	r2, [r1, #32]
	 }
	 
	 if(joystick.y_val > -10 && joystick.y_val < 10){
   806a8:	3309      	adds	r3, #9
   806aa:	b2db      	uxtb	r3, r3
   806ac:	2b12      	cmp	r3, #18
   806ae:	d802      	bhi.n	806b6 <change_motor_speed+0x5a>
		 DACC->DACC_CDR = 0;
   806b0:	2200      	movs	r2, #0
   806b2:	4b03      	ldr	r3, [pc, #12]	; (806c0 <change_motor_speed+0x64>)
   806b4:	621a      	str	r2, [r3, #32]
   806b6:	4770      	bx	lr
   806b8:	20000458 	.word	0x20000458
   806bc:	400e1400 	.word	0x400e1400
   806c0:	400c8000 	.word	0x400c8000

000806c4 <motor_box_init>:
	 }
 }
 

void motor_box_init(){
	PIOD->PIO_PER |= PIO_PER_P10; //PIO Enable Register, PIO Enable //pin32 DIR PD10
   806c4:	4b20      	ldr	r3, [pc, #128]	; (80748 <motor_box_init+0x84>)
   806c6:	681a      	ldr	r2, [r3, #0]
   806c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   806cc:	601a      	str	r2, [r3, #0]
	PIOD->PIO_OER |= PIO_OER_P10; //Output Enable Register, Output Enable //pin32 DIR PD10
   806ce:	691a      	ldr	r2, [r3, #16]
   806d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   806d4:	611a      	str	r2, [r3, #16]
	PIOD->PIO_PER |= PIO_PER_P9; //PIO Enable Register, PIO Enable //pin30 EN PD9
   806d6:	681a      	ldr	r2, [r3, #0]
   806d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   806dc:	601a      	str	r2, [r3, #0]
	PIOD->PIO_OER |= PIO_OER_P9; //Output Enable Register, Output Enable //pin30 EN PD9
   806de:	691a      	ldr	r2, [r3, #16]
   806e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   806e4:	611a      	str	r2, [r3, #16]
	
	PIOD->PIO_SODR = PIO_SODR_P9; //Set Output Data Register, Set Output Data
   806e6:	f44f 7200 	mov.w	r2, #512	; 0x200
   806ea:	631a      	str	r2, [r3, #48]	; 0x30
	PIOD->PIO_CODR = PIO_CODR_P10; //Clear Output Data Register, Set Output Data
   806ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
   806f0:	635a      	str	r2, [r3, #52]	; 0x34
	
	PMC->PMC_PCER0 = PMC_PCER0_PID13;
   806f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   806f6:	4a15      	ldr	r2, [pc, #84]	; (8074c <motor_box_init+0x88>)
   806f8:	6111      	str	r1, [r2, #16]

	
	//allow counter to start
	PIOD->PIO_SODR |= PIO_SODR_P1; //!RST high
   806fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   806fc:	f042 0202 	orr.w	r2, r2, #2
   80700:	631a      	str	r2, [r3, #48]	; 0x30
	
	//enable pins for reading encoder
	PIOC->PIO_PER |= PIO_PER_P8; //DO7
   80702:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
   80706:	681a      	ldr	r2, [r3, #0]
   80708:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   8070c:	601a      	str	r2, [r3, #0]
	PIOC->PIO_PER |= PIO_PER_P7; //DO6
   8070e:	681a      	ldr	r2, [r3, #0]
   80710:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   80714:	601a      	str	r2, [r3, #0]
	PIOC->PIO_PER |= PIO_PER_P6; //DO5
   80716:	681a      	ldr	r2, [r3, #0]
   80718:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   8071c:	601a      	str	r2, [r3, #0]
	PIOC->PIO_PER |= PIO_PER_P5; //DO4
   8071e:	681a      	ldr	r2, [r3, #0]
   80720:	f042 0220 	orr.w	r2, r2, #32
   80724:	601a      	str	r2, [r3, #0]
	PIOC->PIO_PER |= PIO_PER_P4; //DO3
   80726:	681a      	ldr	r2, [r3, #0]
   80728:	f042 0210 	orr.w	r2, r2, #16
   8072c:	601a      	str	r2, [r3, #0]
	PIOC->PIO_PER |= PIO_PER_P3; //DO2
   8072e:	681a      	ldr	r2, [r3, #0]
   80730:	f042 0208 	orr.w	r2, r2, #8
   80734:	601a      	str	r2, [r3, #0]
	PIOC->PIO_PER |= PIO_PER_P2; //DO1
   80736:	681a      	ldr	r2, [r3, #0]
   80738:	f042 0204 	orr.w	r2, r2, #4
   8073c:	601a      	str	r2, [r3, #0]
	PIOC->PIO_PER |= PIO_PER_P1; //DO0
   8073e:	681a      	ldr	r2, [r3, #0]
   80740:	f042 0202 	orr.w	r2, r2, #2
   80744:	601a      	str	r2, [r3, #0]
   80746:	4770      	bx	lr
   80748:	400e1400 	.word	0x400e1400
   8074c:	400e0600 	.word	0x400e0600

00080750 <encoder_read>:
}


uint8_t encoder_read(){
   80750:	b508      	push	{r3, lr}
	// PIO (Output) Enable Register, PIO Enable
	PIOD->PIO_PER |= PIO_PER_P2; // Pin 27 sel PD2 SEL
   80752:	4b25      	ldr	r3, [pc, #148]	; (807e8 <encoder_read+0x98>)
   80754:	681a      	ldr	r2, [r3, #0]
   80756:	f042 0204 	orr.w	r2, r2, #4
   8075a:	601a      	str	r2, [r3, #0]
	PIOD->PIO_OER |= PIO_OER_P2; // 
   8075c:	691a      	ldr	r2, [r3, #16]
   8075e:	f042 0204 	orr.w	r2, r2, #4
   80762:	611a      	str	r2, [r3, #16]
	PIOD->PIO_PER |= PIO_PER_P1; // Pin 26 not_rst PD1 !RST
   80764:	681a      	ldr	r2, [r3, #0]
   80766:	f042 0202 	orr.w	r2, r2, #2
   8076a:	601a      	str	r2, [r3, #0]
	PIOD->PIO_OER |= PIO_OER_P1; // 
   8076c:	691a      	ldr	r2, [r3, #16]
   8076e:	f042 0202 	orr.w	r2, r2, #2
   80772:	611a      	str	r2, [r3, #16]
	PIOD->PIO_PER |= PIO_PER_P0; // Pin 25 not_oe PD0 !OE
   80774:	681a      	ldr	r2, [r3, #0]
   80776:	f042 0201 	orr.w	r2, r2, #1
   8077a:	601a      	str	r2, [r3, #0]
	PIOD->PIO_OER |= PIO_OER_P0; // 
   8077c:	691a      	ldr	r2, [r3, #16]
   8077e:	f042 0201 	orr.w	r2, r2, #1
   80782:	611a      	str	r2, [r3, #16]
	
	PIOD->PIO_CODR |= PIO_CODR_P0; //!OE low
   80784:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   80786:	f042 0201 	orr.w	r2, r2, #1
   8078a:	635a      	str	r2, [r3, #52]	; 0x34
	PIOD->PIO_CODR |= PIO_CODR_P2; //SEL low
   8078c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   8078e:	f042 0204 	orr.w	r2, r2, #4
   80792:	635a      	str	r2, [r3, #52]	; 0x34
   80794:	f44f 6348 	mov.w	r3, #3200	; 0xc80
	
	//10 microsec
	for(int i = 0; i < 3200; i++){
   80798:	3b01      	subs	r3, #1
   8079a:	d1fd      	bne.n	80798 <encoder_read+0x48>
	}
	
	uint8_t MSB = (PIOC->PIO_PDSR >> 1);
   8079c:	4b13      	ldr	r3, [pc, #76]	; (807ec <encoder_read+0x9c>)
   8079e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   807a0:	0852      	lsrs	r2, r2, #1
	//printf("PIO_PDSR: -----%x \n\r", PIOC->PIO_PDSR);
	PIOD->PIO_SODR |= PIO_SODR_P2; //SEL high
   807a2:	4911      	ldr	r1, [pc, #68]	; (807e8 <encoder_read+0x98>)
   807a4:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   807a6:	f043 0304 	orr.w	r3, r3, #4
   807aa:	630b      	str	r3, [r1, #48]	; 0x30
   807ac:	f44f 6348 	mov.w	r3, #3200	; 0xc80
	
	//10 microsec
	for(int i = 0; i < 3200; i++){
   807b0:	3b01      	subs	r3, #1
   807b2:	d1fd      	bne.n	807b0 <encoder_read+0x60>
	}
	uint8_t LSB = PIOC->PIO_PDSR >> 1;
   807b4:	4b0d      	ldr	r3, [pc, #52]	; (807ec <encoder_read+0x9c>)
   807b6:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
	
	PIOD->PIO_CODR |= PIO_CODR_P1; //!RST low
   807b8:	f503 7300 	add.w	r3, r3, #512	; 0x200
   807bc:	6b58      	ldr	r0, [r3, #52]	; 0x34
   807be:	f040 0002 	orr.w	r0, r0, #2
   807c2:	6358      	str	r0, [r3, #52]	; 0x34
	PIOD->PIO_SODR |= PIO_SODR_P1; //!RST high
   807c4:	6b18      	ldr	r0, [r3, #48]	; 0x30
   807c6:	f040 0002 	orr.w	r0, r0, #2
   807ca:	6318      	str	r0, [r3, #48]	; 0x30
	PIOD->PIO_SODR |= PIO_SODR_P0; //!OE high
   807cc:	6b18      	ldr	r0, [r3, #48]	; 0x30
   807ce:	f040 0001 	orr.w	r0, r0, #1
   807d2:	6318      	str	r0, [r3, #48]	; 0x30
	
	uint16_t encoder_data = (LSB | (MSB << 8));
   807d4:	0213      	lsls	r3, r2, #8
   807d6:	b29b      	uxth	r3, r3
	int encoder_data_int = LSB | (MSB << 8);
   807d8:	f3c1 0147 	ubfx	r1, r1, #1, #8
 	printf("Encoder data: %x \n\r", encoder_data_int);
   807dc:	4319      	orrs	r1, r3
   807de:	4804      	ldr	r0, [pc, #16]	; (807f0 <encoder_read+0xa0>)
   807e0:	4b04      	ldr	r3, [pc, #16]	; (807f4 <encoder_read+0xa4>)
   807e2:	4798      	blx	r3
// 		printf("Data negative: -%d \n\r", encoder_data);
// 	}
// 	else{
// 		printf("Data positive: %d \n\r", encoder_data);
// 	}
}
   807e4:	bd08      	pop	{r3, pc}
   807e6:	bf00      	nop
   807e8:	400e1400 	.word	0x400e1400
   807ec:	400e1200 	.word	0x400e1200
   807f0:	0008179c 	.word	0x0008179c
   807f4:	00080c41 	.word	0x00080c41

000807f8 <button_check>:

uint8_t button_check(uint8_t current){
	if(current == 0 && previous == 1){
   807f8:	4603      	mov	r3, r0
   807fa:	b948      	cbnz	r0, 80810 <button_check+0x18>
   807fc:	4a07      	ldr	r2, [pc, #28]	; (8081c <button_check+0x24>)
   807fe:	7810      	ldrb	r0, [r2, #0]
   80800:	2801      	cmp	r0, #1
   80802:	d001      	beq.n	80808 <button_check+0x10>
		return 1;
		}else if(current != 0){
		previous = 1;
		//printf("%s", "C");
	}
	return 0;
   80804:	4618      	mov	r0, r3
   80806:	4770      	bx	lr
		previous = 0;
   80808:	2200      	movs	r2, #0
   8080a:	4b04      	ldr	r3, [pc, #16]	; (8081c <button_check+0x24>)
   8080c:	701a      	strb	r2, [r3, #0]
		return 1;
   8080e:	4770      	bx	lr
		previous = 1;
   80810:	2201      	movs	r2, #1
   80812:	4b02      	ldr	r3, [pc, #8]	; (8081c <button_check+0x24>)
   80814:	701a      	strb	r2, [r3, #0]
	return 0;
   80816:	2000      	movs	r0, #0
   80818:	4770      	bx	lr
   8081a:	bf00      	nop
   8081c:	20000004 	.word	0x20000004

00080820 <main>:
#include "dac_controller.h"
#include "motor_controller.h"


int main(void)
{
   80820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    /* Initialize the SAM system */
    SystemInit();
   80824:	4b3b      	ldr	r3, [pc, #236]	; (80914 <main+0xf4>)
   80826:	4798      	blx	r3
	WDT->WDT_MR |= 1 << 15;
   80828:	4a3b      	ldr	r2, [pc, #236]	; (80918 <main+0xf8>)
   8082a:	6853      	ldr	r3, [r2, #4]
   8082c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
   80830:	6053      	str	r3, [r2, #4]
	configure_uart();
   80832:	4b3a      	ldr	r3, [pc, #232]	; (8091c <main+0xfc>)
   80834:	4798      	blx	r3
	can_init_def_tx_rx_mb(0x00290561); // 0x00290561 = 0b 00000000001010010000010101100001// 0b000000000000100100010001000100010
   80836:	483a      	ldr	r0, [pc, #232]	; (80920 <main+0x100>)
   80838:	4b3a      	ldr	r3, [pc, #232]	; (80924 <main+0x104>)
   8083a:	4798      	blx	r3
	
	printf("hello\n\r");
   8083c:	483a      	ldr	r0, [pc, #232]	; (80928 <main+0x108>)
   8083e:	4b3b      	ldr	r3, [pc, #236]	; (8092c <main+0x10c>)
   80840:	4798      	blx	r3
	PWM->PWM_CH_NUM[2].PWM_CMR &= ~PWM_CMR_CPOL;
	
	PIOA->PIO_ABSR |= PIO_ABSR_P5; //PIO set peripheral b on pin 5*/
	
	
	timer_init();
   80842:	4b3b      	ldr	r3, [pc, #236]	; (80930 <main+0x110>)
   80844:	4798      	blx	r3
	timer_change_duty(100);
   80846:	2064      	movs	r0, #100	; 0x64
   80848:	4b3a      	ldr	r3, [pc, #232]	; (80934 <main+0x114>)
   8084a:	4798      	blx	r3
	//init_interrupt_PI();
	
	adc_init();
   8084c:	4b3a      	ldr	r3, [pc, #232]	; (80938 <main+0x118>)
   8084e:	4798      	blx	r3
	dac_init();
   80850:	4b3a      	ldr	r3, [pc, #232]	; (8093c <main+0x11c>)
   80852:	4798      	blx	r3
	
	
	motor_box_init();
   80854:	4b3a      	ldr	r3, [pc, #232]	; (80940 <main+0x120>)
   80856:	4798      	blx	r3
	
	
	
	
	//enable and set high, pin to controll servo shoot, pin50 on shield
	PIOC->PIO_PER |= PIO_PER_P13; 
   80858:	4b3a      	ldr	r3, [pc, #232]	; (80944 <main+0x124>)
   8085a:	681a      	ldr	r2, [r3, #0]
   8085c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   80860:	601a      	str	r2, [r3, #0]
	PIOC->PIO_OER |= PIO_OER_P13; 
   80862:	691a      	ldr	r2, [r3, #16]
   80864:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   80868:	611a      	str	r2, [r3, #16]
	PIOC->PIO_SODR |= PIO_SODR_P13;
   8086a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   8086c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   80870:	631a      	str	r2, [r3, #48]	; 0x30
	
	
	
	
	PIOA->PIO_PER |= PIO_PER_P19; //PIO Enable Register, PIO Enable
   80872:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
   80876:	681a      	ldr	r2, [r3, #0]
   80878:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   8087c:	601a      	str	r2, [r3, #0]
	PIOA->PIO_OER |= PIO_OER_P19; //Output Enable Register, Output Enable
   8087e:	691a      	ldr	r2, [r3, #16]
   80880:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   80884:	611a      	str	r2, [r3, #16]
	
	PIOA->PIO_PER |= PIO_PER_P20; //PIO Enable Register, PIO Enable
   80886:	681a      	ldr	r2, [r3, #0]
   80888:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   8088c:	601a      	str	r2, [r3, #0]
	PIOA->PIO_OER |= PIO_OER_P20; //Output Enable Register, Output Enable
   8088e:	691a      	ldr	r2, [r3, #16]
   80890:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   80894:	611a      	str	r2, [r3, #16]
	PIOA->PIO_OER |= PIO_OER_P9; //Output Enable Register, Output Enable*/
	volatile CAN_MESSAGE msg;
    while (1) 
    {
		
		PIOA->PIO_SODR = PIO_SODR_P19; //Set Output Data Register, Set Output Data
   80896:	461c      	mov	r4, r3
		move_solenoid();
		change_motor_speed();
		encoder_read();
		
		if(button_check(joystick.butt_pressed)){
			PIOC->PIO_CODR |= PIO_CODR_P13;
   80898:	4d2a      	ldr	r5, [pc, #168]	; (80944 <main+0x124>)
   8089a:	e036      	b.n	8090a <main+0xea>
		}
		
		
		//printf("%d",ADC->ADC_ISR);
// 		printf("adc_input : %x   \n\r", ADC->ADC_CDR[1]);
 		printf("goals : %d   \n\r", TOTAL_GOALS);
   8089c:	4b2a      	ldr	r3, [pc, #168]	; (80948 <main+0x128>)
   8089e:	7819      	ldrb	r1, [r3, #0]
   808a0:	482a      	ldr	r0, [pc, #168]	; (8094c <main+0x12c>)
   808a2:	4b22      	ldr	r3, [pc, #136]	; (8092c <main+0x10c>)
   808a4:	4798      	blx	r3
		//printf("adc_input : %d ::::", ADC->ADC_LCDR & 0x00000CE4);
		
		
		if(TO_INCREMENT){
   808a6:	4b2a      	ldr	r3, [pc, #168]	; (80950 <main+0x130>)
   808a8:	781b      	ldrb	r3, [r3, #0]
   808aa:	bb33      	cbnz	r3, 808fa <main+0xda>
		PIOA->PIO_SODR = PIO_SODR_P19; //Set Output Data Register, Set Output Data
   808ac:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
   808b0:	4b28      	ldr	r3, [pc, #160]	; (80954 <main+0x134>)
		for(int i = 0; i < 1600000; i++){
   808b2:	3b01      	subs	r3, #1
   808b4:	d1fd      	bne.n	808b2 <main+0x92>
		PIOA->PIO_CODR = PIO_CODR_P19; //Clear Output Data Register, Set Output Data
   808b6:	6366      	str	r6, [r4, #52]	; 0x34
		PIOA->PIO_SODR = PIO_SODR_P20; //Set Output Data Register, Set Output Data
   808b8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   808bc:	6323      	str	r3, [r4, #48]	; 0x30
   808be:	4b25      	ldr	r3, [pc, #148]	; (80954 <main+0x134>)
		for(int i = 0; i < 1600000; i++){
   808c0:	3b01      	subs	r3, #1
   808c2:	d1fd      	bne.n	808c0 <main+0xa0>
		PIOA->PIO_CODR |= PIO_CODR_P20; //Clear Output Data Register,
   808c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
   808c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   808ca:	6363      	str	r3, [r4, #52]	; 0x34
		move_solenoid();
   808cc:	47b8      	blx	r7
		change_motor_speed();
   808ce:	4b22      	ldr	r3, [pc, #136]	; (80958 <main+0x138>)
   808d0:	4798      	blx	r3
		encoder_read();
   808d2:	4b22      	ldr	r3, [pc, #136]	; (8095c <main+0x13c>)
   808d4:	4798      	blx	r3
		if(button_check(joystick.butt_pressed)){
   808d6:	4b22      	ldr	r3, [pc, #136]	; (80960 <main+0x140>)
   808d8:	7898      	ldrb	r0, [r3, #2]
   808da:	4b22      	ldr	r3, [pc, #136]	; (80964 <main+0x144>)
   808dc:	4798      	blx	r3
   808de:	2800      	cmp	r0, #0
   808e0:	d0dc      	beq.n	8089c <main+0x7c>
			PIOC->PIO_CODR |= PIO_CODR_P13;
   808e2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   808e4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   808e8:	636b      	str	r3, [r5, #52]	; 0x34
   808ea:	4b1a      	ldr	r3, [pc, #104]	; (80954 <main+0x134>)
			for(int i = 0; i < 1600000; i++){
   808ec:	3b01      	subs	r3, #1
   808ee:	d1fd      	bne.n	808ec <main+0xcc>
			PIOC->PIO_SODR |= PIO_SODR_P13;
   808f0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   808f2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   808f6:	632b      	str	r3, [r5, #48]	; 0x30
   808f8:	e7d0      	b.n	8089c <main+0x7c>
			printf("to_increment");
   808fa:	481b      	ldr	r0, [pc, #108]	; (80968 <main+0x148>)
   808fc:	4b0b      	ldr	r3, [pc, #44]	; (8092c <main+0x10c>)
   808fe:	4798      	blx	r3
			goal_counter();
   80900:	4b1a      	ldr	r3, [pc, #104]	; (8096c <main+0x14c>)
   80902:	4798      	blx	r3
   80904:	4b1a      	ldr	r3, [pc, #104]	; (80970 <main+0x150>)
			for(int j = 0; j < 5*1600000; j++){
   80906:	3b01      	subs	r3, #1
   80908:	d1fd      	bne.n	80906 <main+0xe6>
		PIOA->PIO_SODR = PIO_SODR_P19; //Set Output Data Register, Set Output Data
   8090a:	f44f 2600 	mov.w	r6, #524288	; 0x80000
   8090e:	46b0      	mov	r8, r6
		move_solenoid();
   80910:	4f18      	ldr	r7, [pc, #96]	; (80974 <main+0x154>)
   80912:	e7cb      	b.n	808ac <main+0x8c>
   80914:	00080535 	.word	0x00080535
   80918:	400e1a50 	.word	0x400e1a50
   8091c:	00080d05 	.word	0x00080d05
   80920:	00290561 	.word	0x00290561
   80924:	000802e5 	.word	0x000802e5
   80928:	000817b0 	.word	0x000817b0
   8092c:	00080c41 	.word	0x00080c41
   80930:	00080c65 	.word	0x00080c65
   80934:	00080cb5 	.word	0x00080cb5
   80938:	00080161 	.word	0x00080161
   8093c:	0008047d 	.word	0x0008047d
   80940:	000806c5 	.word	0x000806c5
   80944:	400e1200 	.word	0x400e1200
   80948:	20000452 	.word	0x20000452
   8094c:	000817b8 	.word	0x000817b8
   80950:	20000450 	.word	0x20000450
   80954:	00186a00 	.word	0x00186a00
   80958:	0008065d 	.word	0x0008065d
   8095c:	00080751 	.word	0x00080751
   80960:	20000458 	.word	0x20000458
   80964:	000807f9 	.word	0x000807f9
   80968:	000817c8 	.word	0x000817c8
   8096c:	000801bd 	.word	0x000801bd
   80970:	007a1200 	.word	0x007a1200
   80974:	000805d9 	.word	0x000805d9

00080978 <prints>:
   80978:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8097c:	460d      	mov	r5, r1
   8097e:	1e16      	subs	r6, r2, #0
   80980:	dd48      	ble.n	80a14 <prints+0x9c>
   80982:	780a      	ldrb	r2, [r1, #0]
   80984:	2a00      	cmp	r2, #0
   80986:	d035      	beq.n	809f4 <prints+0x7c>
   80988:	460a      	mov	r2, r1
   8098a:	2400      	movs	r4, #0
   8098c:	3401      	adds	r4, #1
   8098e:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   80992:	2900      	cmp	r1, #0
   80994:	d1fa      	bne.n	8098c <prints+0x14>
   80996:	42a6      	cmp	r6, r4
   80998:	dc2d      	bgt.n	809f6 <prints+0x7e>
   8099a:	2400      	movs	r4, #0
   8099c:	f003 0202 	and.w	r2, r3, #2
   809a0:	2a00      	cmp	r2, #0
   809a2:	bf0c      	ite	eq
   809a4:	f04f 0820 	moveq.w	r8, #32
   809a8:	f04f 0830 	movne.w	r8, #48	; 0x30
   809ac:	f013 0301 	ands.w	r3, r3, #1
   809b0:	d123      	bne.n	809fa <prints+0x82>
   809b2:	2c00      	cmp	r4, #0
   809b4:	dd28      	ble.n	80a08 <prints+0x90>
   809b6:	4626      	mov	r6, r4
   809b8:	fa5f f988 	uxtb.w	r9, r8
   809bc:	4f18      	ldr	r7, [pc, #96]	; (80a20 <prints+0xa8>)
   809be:	4648      	mov	r0, r9
   809c0:	47b8      	blx	r7
   809c2:	3e01      	subs	r6, #1
   809c4:	d1fb      	bne.n	809be <prints+0x46>
   809c6:	7828      	ldrb	r0, [r5, #0]
   809c8:	b188      	cbz	r0, 809ee <prints+0x76>
   809ca:	4f15      	ldr	r7, [pc, #84]	; (80a20 <prints+0xa8>)
   809cc:	47b8      	blx	r7
   809ce:	3401      	adds	r4, #1
   809d0:	f815 0f01 	ldrb.w	r0, [r5, #1]!
   809d4:	2800      	cmp	r0, #0
   809d6:	d1f9      	bne.n	809cc <prints+0x54>
   809d8:	2e00      	cmp	r6, #0
   809da:	dd08      	ble.n	809ee <prints+0x76>
   809dc:	4635      	mov	r5, r6
   809de:	fa5f f888 	uxtb.w	r8, r8
   809e2:	4f0f      	ldr	r7, [pc, #60]	; (80a20 <prints+0xa8>)
   809e4:	4640      	mov	r0, r8
   809e6:	47b8      	blx	r7
   809e8:	3d01      	subs	r5, #1
   809ea:	d1fb      	bne.n	809e4 <prints+0x6c>
   809ec:	4434      	add	r4, r6
   809ee:	4620      	mov	r0, r4
   809f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   809f4:	2400      	movs	r4, #0
   809f6:	1b34      	subs	r4, r6, r4
   809f8:	e7d0      	b.n	8099c <prints+0x24>
   809fa:	4626      	mov	r6, r4
   809fc:	7828      	ldrb	r0, [r5, #0]
   809fe:	b108      	cbz	r0, 80a04 <prints+0x8c>
   80a00:	2400      	movs	r4, #0
   80a02:	e7e2      	b.n	809ca <prints+0x52>
   80a04:	2400      	movs	r4, #0
   80a06:	e7e7      	b.n	809d8 <prints+0x60>
   80a08:	4626      	mov	r6, r4
   80a0a:	461c      	mov	r4, r3
   80a0c:	e7db      	b.n	809c6 <prints+0x4e>
   80a0e:	f04f 0820 	mov.w	r8, #32
   80a12:	e7d8      	b.n	809c6 <prints+0x4e>
   80a14:	f013 0401 	ands.w	r4, r3, #1
   80a18:	d0f9      	beq.n	80a0e <prints+0x96>
   80a1a:	f04f 0820 	mov.w	r8, #32
   80a1e:	e7ed      	b.n	809fc <prints+0x84>
   80a20:	00080d6d 	.word	0x00080d6d

00080a24 <printi>:
   80a24:	b5f0      	push	{r4, r5, r6, r7, lr}
   80a26:	b085      	sub	sp, #20
   80a28:	4607      	mov	r7, r0
   80a2a:	b381      	cbz	r1, 80a8e <printi+0x6a>
   80a2c:	460c      	mov	r4, r1
   80a2e:	b10b      	cbz	r3, 80a34 <printi+0x10>
   80a30:	2a0a      	cmp	r2, #10
   80a32:	d038      	beq.n	80aa6 <printi+0x82>
   80a34:	2300      	movs	r3, #0
   80a36:	f88d 300f 	strb.w	r3, [sp, #15]
   80a3a:	2600      	movs	r6, #0
   80a3c:	2900      	cmp	r1, #0
   80a3e:	d046      	beq.n	80ace <printi+0xaa>
   80a40:	f10d 050f 	add.w	r5, sp, #15
   80a44:	990c      	ldr	r1, [sp, #48]	; 0x30
   80a46:	393a      	subs	r1, #58	; 0x3a
   80a48:	fbb4 f3f2 	udiv	r3, r4, r2
   80a4c:	fb02 4313 	mls	r3, r2, r3, r4
   80a50:	2b09      	cmp	r3, #9
   80a52:	bfc8      	it	gt
   80a54:	185b      	addgt	r3, r3, r1
   80a56:	3330      	adds	r3, #48	; 0x30
   80a58:	f805 3d01 	strb.w	r3, [r5, #-1]!
   80a5c:	fbb4 f4f2 	udiv	r4, r4, r2
   80a60:	2c00      	cmp	r4, #0
   80a62:	d1f1      	bne.n	80a48 <printi+0x24>
   80a64:	b156      	cbz	r6, 80a7c <printi+0x58>
   80a66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   80a68:	b11b      	cbz	r3, 80a72 <printi+0x4e>
   80a6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80a6c:	f013 0f02 	tst.w	r3, #2
   80a70:	d125      	bne.n	80abe <printi+0x9a>
   80a72:	232d      	movs	r3, #45	; 0x2d
   80a74:	f805 3c01 	strb.w	r3, [r5, #-1]
   80a78:	3d01      	subs	r5, #1
   80a7a:	2600      	movs	r6, #0
   80a7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80a7e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   80a80:	4629      	mov	r1, r5
   80a82:	4638      	mov	r0, r7
   80a84:	4c14      	ldr	r4, [pc, #80]	; (80ad8 <printi+0xb4>)
   80a86:	47a0      	blx	r4
   80a88:	4430      	add	r0, r6
   80a8a:	b005      	add	sp, #20
   80a8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80a8e:	2330      	movs	r3, #48	; 0x30
   80a90:	f88d 3004 	strb.w	r3, [sp, #4]
   80a94:	2300      	movs	r3, #0
   80a96:	f88d 3005 	strb.w	r3, [sp, #5]
   80a9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80a9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   80a9e:	a901      	add	r1, sp, #4
   80aa0:	4c0d      	ldr	r4, [pc, #52]	; (80ad8 <printi+0xb4>)
   80aa2:	47a0      	blx	r4
   80aa4:	e7f1      	b.n	80a8a <printi+0x66>
   80aa6:	2900      	cmp	r1, #0
   80aa8:	dac4      	bge.n	80a34 <printi+0x10>
   80aaa:	424c      	negs	r4, r1
   80aac:	2300      	movs	r3, #0
   80aae:	f88d 300f 	strb.w	r3, [sp, #15]
   80ab2:	f10d 050f 	add.w	r5, sp, #15
   80ab6:	2c00      	cmp	r4, #0
   80ab8:	d0d5      	beq.n	80a66 <printi+0x42>
   80aba:	2601      	movs	r6, #1
   80abc:	e7c0      	b.n	80a40 <printi+0x1c>
   80abe:	202d      	movs	r0, #45	; 0x2d
   80ac0:	4b06      	ldr	r3, [pc, #24]	; (80adc <printi+0xb8>)
   80ac2:	4798      	blx	r3
   80ac4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   80ac6:	3b01      	subs	r3, #1
   80ac8:	930a      	str	r3, [sp, #40]	; 0x28
   80aca:	2601      	movs	r6, #1
   80acc:	e7d6      	b.n	80a7c <printi+0x58>
   80ace:	461e      	mov	r6, r3
   80ad0:	f10d 050f 	add.w	r5, sp, #15
   80ad4:	e7d2      	b.n	80a7c <printi+0x58>
   80ad6:	bf00      	nop
   80ad8:	00080979 	.word	0x00080979
   80adc:	00080d6d 	.word	0x00080d6d

00080ae0 <print>:
   80ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80ae4:	b087      	sub	sp, #28
   80ae6:	4680      	mov	r8, r0
   80ae8:	780b      	ldrb	r3, [r1, #0]
   80aea:	2b00      	cmp	r3, #0
   80aec:	f000 8094 	beq.w	80c18 <print+0x138>
   80af0:	468b      	mov	fp, r1
   80af2:	4617      	mov	r7, r2
   80af4:	2500      	movs	r5, #0
   80af6:	4e4e      	ldr	r6, [pc, #312]	; (80c30 <print+0x150>)
   80af8:	f8df a13c 	ldr.w	sl, [pc, #316]	; 80c38 <print+0x158>
   80afc:	f8df 913c 	ldr.w	r9, [pc, #316]	; 80c3c <print+0x15c>
   80b00:	e046      	b.n	80b90 <print+0xb0>
   80b02:	2200      	movs	r2, #0
   80b04:	e070      	b.n	80be8 <print+0x108>
   80b06:	6839      	ldr	r1, [r7, #0]
   80b08:	3704      	adds	r7, #4
   80b0a:	484a      	ldr	r0, [pc, #296]	; (80c34 <print+0x154>)
   80b0c:	2900      	cmp	r1, #0
   80b0e:	bf08      	it	eq
   80b10:	4601      	moveq	r1, r0
   80b12:	4640      	mov	r0, r8
   80b14:	47d0      	blx	sl
   80b16:	4405      	add	r5, r0
   80b18:	e035      	b.n	80b86 <print+0xa6>
   80b1a:	6839      	ldr	r1, [r7, #0]
   80b1c:	3704      	adds	r7, #4
   80b1e:	2061      	movs	r0, #97	; 0x61
   80b20:	9002      	str	r0, [sp, #8]
   80b22:	9301      	str	r3, [sp, #4]
   80b24:	9200      	str	r2, [sp, #0]
   80b26:	2301      	movs	r3, #1
   80b28:	220a      	movs	r2, #10
   80b2a:	4640      	mov	r0, r8
   80b2c:	47c8      	blx	r9
   80b2e:	4405      	add	r5, r0
   80b30:	e029      	b.n	80b86 <print+0xa6>
   80b32:	6839      	ldr	r1, [r7, #0]
   80b34:	3704      	adds	r7, #4
   80b36:	2061      	movs	r0, #97	; 0x61
   80b38:	9002      	str	r0, [sp, #8]
   80b3a:	9301      	str	r3, [sp, #4]
   80b3c:	9200      	str	r2, [sp, #0]
   80b3e:	2300      	movs	r3, #0
   80b40:	2210      	movs	r2, #16
   80b42:	4640      	mov	r0, r8
   80b44:	47c8      	blx	r9
   80b46:	4405      	add	r5, r0
   80b48:	e01d      	b.n	80b86 <print+0xa6>
   80b4a:	6839      	ldr	r1, [r7, #0]
   80b4c:	3704      	adds	r7, #4
   80b4e:	2041      	movs	r0, #65	; 0x41
   80b50:	9002      	str	r0, [sp, #8]
   80b52:	9301      	str	r3, [sp, #4]
   80b54:	9200      	str	r2, [sp, #0]
   80b56:	2300      	movs	r3, #0
   80b58:	2210      	movs	r2, #16
   80b5a:	4640      	mov	r0, r8
   80b5c:	47c8      	blx	r9
   80b5e:	4405      	add	r5, r0
   80b60:	e011      	b.n	80b86 <print+0xa6>
   80b62:	6839      	ldr	r1, [r7, #0]
   80b64:	3704      	adds	r7, #4
   80b66:	2061      	movs	r0, #97	; 0x61
   80b68:	9002      	str	r0, [sp, #8]
   80b6a:	9301      	str	r3, [sp, #4]
   80b6c:	9200      	str	r2, [sp, #0]
   80b6e:	2300      	movs	r3, #0
   80b70:	220a      	movs	r2, #10
   80b72:	4640      	mov	r0, r8
   80b74:	47c8      	blx	r9
   80b76:	4405      	add	r5, r0
   80b78:	e005      	b.n	80b86 <print+0xa6>
   80b7a:	46a3      	mov	fp, r4
   80b7c:	f89b 0000 	ldrb.w	r0, [fp]
   80b80:	47b0      	blx	r6
   80b82:	3501      	adds	r5, #1
   80b84:	465c      	mov	r4, fp
   80b86:	f104 0b01 	add.w	fp, r4, #1
   80b8a:	7863      	ldrb	r3, [r4, #1]
   80b8c:	2b00      	cmp	r3, #0
   80b8e:	d044      	beq.n	80c1a <print+0x13a>
   80b90:	2b25      	cmp	r3, #37	; 0x25
   80b92:	d1f3      	bne.n	80b7c <print+0x9c>
   80b94:	f10b 0401 	add.w	r4, fp, #1
   80b98:	f89b 3001 	ldrb.w	r3, [fp, #1]
   80b9c:	2b00      	cmp	r3, #0
   80b9e:	d03c      	beq.n	80c1a <print+0x13a>
   80ba0:	2b25      	cmp	r3, #37	; 0x25
   80ba2:	d0ea      	beq.n	80b7a <print+0x9a>
   80ba4:	2b2d      	cmp	r3, #45	; 0x2d
   80ba6:	bf06      	itte	eq
   80ba8:	f10b 0402 	addeq.w	r4, fp, #2
   80bac:	2301      	moveq	r3, #1
   80bae:	2300      	movne	r3, #0
   80bb0:	7822      	ldrb	r2, [r4, #0]
   80bb2:	2a30      	cmp	r2, #48	; 0x30
   80bb4:	d105      	bne.n	80bc2 <print+0xe2>
   80bb6:	f043 0302 	orr.w	r3, r3, #2
   80bba:	f814 2f01 	ldrb.w	r2, [r4, #1]!
   80bbe:	2a30      	cmp	r2, #48	; 0x30
   80bc0:	d0f9      	beq.n	80bb6 <print+0xd6>
   80bc2:	7821      	ldrb	r1, [r4, #0]
   80bc4:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   80bc8:	b2d2      	uxtb	r2, r2
   80bca:	2a09      	cmp	r2, #9
   80bcc:	d899      	bhi.n	80b02 <print+0x22>
   80bce:	2200      	movs	r2, #0
   80bd0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   80bd4:	3930      	subs	r1, #48	; 0x30
   80bd6:	eb01 0242 	add.w	r2, r1, r2, lsl #1
   80bda:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   80bde:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
   80be2:	b2c0      	uxtb	r0, r0
   80be4:	2809      	cmp	r0, #9
   80be6:	d9f3      	bls.n	80bd0 <print+0xf0>
   80be8:	2973      	cmp	r1, #115	; 0x73
   80bea:	d08c      	beq.n	80b06 <print+0x26>
   80bec:	2964      	cmp	r1, #100	; 0x64
   80bee:	d094      	beq.n	80b1a <print+0x3a>
   80bf0:	2978      	cmp	r1, #120	; 0x78
   80bf2:	d09e      	beq.n	80b32 <print+0x52>
   80bf4:	2958      	cmp	r1, #88	; 0x58
   80bf6:	d0a8      	beq.n	80b4a <print+0x6a>
   80bf8:	2975      	cmp	r1, #117	; 0x75
   80bfa:	d0b2      	beq.n	80b62 <print+0x82>
   80bfc:	2963      	cmp	r1, #99	; 0x63
   80bfe:	d1c2      	bne.n	80b86 <print+0xa6>
   80c00:	6839      	ldr	r1, [r7, #0]
   80c02:	3704      	adds	r7, #4
   80c04:	f88d 1014 	strb.w	r1, [sp, #20]
   80c08:	2100      	movs	r1, #0
   80c0a:	f88d 1015 	strb.w	r1, [sp, #21]
   80c0e:	a905      	add	r1, sp, #20
   80c10:	4640      	mov	r0, r8
   80c12:	47d0      	blx	sl
   80c14:	4405      	add	r5, r0
   80c16:	e7b6      	b.n	80b86 <print+0xa6>
   80c18:	2500      	movs	r5, #0
   80c1a:	f1b8 0f00 	cmp.w	r8, #0
   80c1e:	d003      	beq.n	80c28 <print+0x148>
   80c20:	f8d8 3000 	ldr.w	r3, [r8]
   80c24:	2200      	movs	r2, #0
   80c26:	701a      	strb	r2, [r3, #0]
   80c28:	4628      	mov	r0, r5
   80c2a:	b007      	add	sp, #28
   80c2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80c30:	00080d6d 	.word	0x00080d6d
   80c34:	000817d8 	.word	0x000817d8
   80c38:	00080979 	.word	0x00080979
   80c3c:	00080a25 	.word	0x00080a25

00080c40 <printf>:
   80c40:	b40f      	push	{r0, r1, r2, r3}
   80c42:	b500      	push	{lr}
   80c44:	b083      	sub	sp, #12
   80c46:	aa04      	add	r2, sp, #16
   80c48:	f852 1b04 	ldr.w	r1, [r2], #4
   80c4c:	9201      	str	r2, [sp, #4]
   80c4e:	2000      	movs	r0, #0
   80c50:	4b03      	ldr	r3, [pc, #12]	; (80c60 <printf+0x20>)
   80c52:	4798      	blx	r3
   80c54:	b003      	add	sp, #12
   80c56:	f85d eb04 	ldr.w	lr, [sp], #4
   80c5a:	b004      	add	sp, #16
   80c5c:	4770      	bx	lr
   80c5e:	bf00      	nop
   80c60:	00080ae1 	.word	0x00080ae1

00080c64 <timer_init>:
#define DEBUG_INTERRUPT 1

void timer_init(){
	
	
	PMC->PMC_PCER0 |= PMC_PCER0_PID27; //enable timer counter channel 0
   80c64:	4a0f      	ldr	r2, [pc, #60]	; (80ca4 <timer_init+0x40>)
   80c66:	6913      	ldr	r3, [r2, #16]
   80c68:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
   80c6c:	6113      	str	r3, [r2, #16]
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   80c6e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   80c72:	4b0d      	ldr	r3, [pc, #52]	; (80ca8 <timer_init+0x44>)
   80c74:	601a      	str	r2, [r3, #0]
	
	NVIC_EnableIRQ(ID_TC0);
	
	PIOB->PIO_PDR |= PIO_PDR_P25; //disable io on pinb 25
   80c76:	4b0d      	ldr	r3, [pc, #52]	; (80cac <timer_init+0x48>)
   80c78:	685a      	ldr	r2, [r3, #4]
   80c7a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   80c7e:	605a      	str	r2, [r3, #4]
	PIOB->PIO_ABSR |= PIO_ABSR_P25; //PIO set peripheral b on pinb 25*/
   80c80:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80c82:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   80c86:	671a      	str	r2, [r3, #112]	; 0x70
	
	tc->TC_CHANNEL[0].TC_CMR = 0x0009C000;
   80c88:	f5a3 23c2 	sub.w	r3, r3, #397312	; 0x61000
   80c8c:	f44f 221c 	mov.w	r2, #638976	; 0x9c000
   80c90:	605a      	str	r2, [r3, #4]
	tc->TC_CHANNEL[0].TC_RC = 0x000CD140;
   80c92:	4a07      	ldr	r2, [pc, #28]	; (80cb0 <timer_init+0x4c>)
   80c94:	61da      	str	r2, [r3, #28]
	
	//tc->TC_CHANNEL[0].TC_IER |= TC_IER_CPCS; // enable interrupt on compare with RC
	
	tc->TC_CHANNEL[0].TC_CCR = 0x00000001; //enables the clock
   80c96:	2201      	movs	r2, #1
   80c98:	601a      	str	r2, [r3, #0]
	tc->TC_CHANNEL[0].TC_CCR |= 0x1 << 2;
   80c9a:	681a      	ldr	r2, [r3, #0]
   80c9c:	f042 0204 	orr.w	r2, r2, #4
   80ca0:	601a      	str	r2, [r3, #0]
   80ca2:	4770      	bx	lr
   80ca4:	400e0600 	.word	0x400e0600
   80ca8:	e000e100 	.word	0xe000e100
   80cac:	400e1000 	.word	0x400e1000
   80cb0:	000cd140 	.word	0x000cd140

00080cb4 <timer_change_duty>:
	}
	if(dutyCycle > 100){
		dutyCycle = 100;
	}
	
	tc->TC_CHANNEL[0].TC_RA = 0x000CD140 - (0xA410 + 0x1A4*dutyCycle); // TC_RA - (min_value + dutyCycle*1prosentOfDifference)
   80cb4:	2864      	cmp	r0, #100	; 0x64
   80cb6:	bf28      	it	cs
   80cb8:	2064      	movcs	r0, #100	; 0x64
   80cba:	4b05      	ldr	r3, [pc, #20]	; (80cd0 <timer_change_duty+0x1c>)
   80cbc:	fb03 f000 	mul.w	r0, r3, r0
   80cc0:	f500 2042 	add.w	r0, r0, #794624	; 0xc2000
   80cc4:	f500 6053 	add.w	r0, r0, #3376	; 0xd30
   80cc8:	4b02      	ldr	r3, [pc, #8]	; (80cd4 <timer_change_duty+0x20>)
   80cca:	6158      	str	r0, [r3, #20]
   80ccc:	4770      	bx	lr
   80cce:	bf00      	nop
   80cd0:	fffffe5c 	.word	0xfffffe5c
   80cd4:	40080000 	.word	0x40080000

00080cd8 <TC0_Handler>:
	tc->TC_CHANNEL[0].TC_CCR |= 0x1 << 2;
	printf("Init PI done");
	
}
int counter = 0;
void TC0_Handler( void ){
   80cd8:	b508      	push	{r3, lr}
	printf("%d \n\r",counter++);
   80cda:	4b06      	ldr	r3, [pc, #24]	; (80cf4 <TC0_Handler+0x1c>)
   80cdc:	6819      	ldr	r1, [r3, #0]
   80cde:	1c4a      	adds	r2, r1, #1
   80ce0:	601a      	str	r2, [r3, #0]
   80ce2:	4805      	ldr	r0, [pc, #20]	; (80cf8 <TC0_Handler+0x20>)
   80ce4:	4b05      	ldr	r3, [pc, #20]	; (80cfc <TC0_Handler+0x24>)
   80ce6:	4798      	blx	r3
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   80ce8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   80cec:	4b04      	ldr	r3, [pc, #16]	; (80d00 <TC0_Handler+0x28>)
   80cee:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   80cf2:	bd08      	pop	{r3, pc}
   80cf4:	20000454 	.word	0x20000454
   80cf8:	000817f0 	.word	0x000817f0
   80cfc:	00080c41 	.word	0x00080c41
   80d00:	e000e100 	.word	0xe000e100

00080d04 <configure_uart>:
   80d04:	4b16      	ldr	r3, [pc, #88]	; (80d60 <configure_uart+0x5c>)
   80d06:	2200      	movs	r2, #0
   80d08:	701a      	strb	r2, [r3, #0]
   80d0a:	705a      	strb	r2, [r3, #1]
   80d0c:	4b15      	ldr	r3, [pc, #84]	; (80d64 <configure_uart+0x60>)
   80d0e:	f44f 7140 	mov.w	r1, #768	; 0x300
   80d12:	6459      	str	r1, [r3, #68]	; 0x44
   80d14:	6059      	str	r1, [r3, #4]
   80d16:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80d18:	6f18      	ldr	r0, [r3, #112]	; 0x70
   80d1a:	4002      	ands	r2, r0
   80d1c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   80d20:	671a      	str	r2, [r3, #112]	; 0x70
   80d22:	6659      	str	r1, [r3, #100]	; 0x64
   80d24:	f44f 7280 	mov.w	r2, #256	; 0x100
   80d28:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   80d2c:	611a      	str	r2, [r3, #16]
   80d2e:	f503 7300 	add.w	r3, r3, #512	; 0x200
   80d32:	21ac      	movs	r1, #172	; 0xac
   80d34:	6019      	str	r1, [r3, #0]
   80d36:	f240 2123 	movw	r1, #547	; 0x223
   80d3a:	6219      	str	r1, [r3, #32]
   80d3c:	f44f 6100 	mov.w	r1, #2048	; 0x800
   80d40:	6059      	str	r1, [r3, #4]
   80d42:	f240 2102 	movw	r1, #514	; 0x202
   80d46:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   80d4a:	f04f 31ff 	mov.w	r1, #4294967295
   80d4e:	60d9      	str	r1, [r3, #12]
   80d50:	21e1      	movs	r1, #225	; 0xe1
   80d52:	6099      	str	r1, [r3, #8]
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   80d54:	4904      	ldr	r1, [pc, #16]	; (80d68 <configure_uart+0x64>)
   80d56:	600a      	str	r2, [r1, #0]
   80d58:	2250      	movs	r2, #80	; 0x50
   80d5a:	601a      	str	r2, [r3, #0]
   80d5c:	4770      	bx	lr
   80d5e:	bf00      	nop
   80d60:	20000460 	.word	0x20000460
   80d64:	400e0e00 	.word	0x400e0e00
   80d68:	e000e100 	.word	0xe000e100

00080d6c <uart_putchar>:
   80d6c:	4b07      	ldr	r3, [pc, #28]	; (80d8c <uart_putchar+0x20>)
   80d6e:	695b      	ldr	r3, [r3, #20]
   80d70:	f013 0f02 	tst.w	r3, #2
   80d74:	d008      	beq.n	80d88 <uart_putchar+0x1c>
   80d76:	4b05      	ldr	r3, [pc, #20]	; (80d8c <uart_putchar+0x20>)
   80d78:	61d8      	str	r0, [r3, #28]
   80d7a:	461a      	mov	r2, r3
   80d7c:	6953      	ldr	r3, [r2, #20]
   80d7e:	f413 7f00 	tst.w	r3, #512	; 0x200
   80d82:	d0fb      	beq.n	80d7c <uart_putchar+0x10>
   80d84:	2000      	movs	r0, #0
   80d86:	4770      	bx	lr
   80d88:	2001      	movs	r0, #1
   80d8a:	4770      	bx	lr
   80d8c:	400e0800 	.word	0x400e0800

00080d90 <UART_Handler>:
   80d90:	b508      	push	{r3, lr}
   80d92:	4b15      	ldr	r3, [pc, #84]	; (80de8 <UART_Handler+0x58>)
   80d94:	695b      	ldr	r3, [r3, #20]
   80d96:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   80d9a:	d003      	beq.n	80da4 <UART_Handler+0x14>
   80d9c:	f44f 71a8 	mov.w	r1, #336	; 0x150
   80da0:	4a11      	ldr	r2, [pc, #68]	; (80de8 <UART_Handler+0x58>)
   80da2:	6011      	str	r1, [r2, #0]
   80da4:	f013 0f01 	tst.w	r3, #1
   80da8:	d012      	beq.n	80dd0 <UART_Handler+0x40>
   80daa:	4810      	ldr	r0, [pc, #64]	; (80dec <UART_Handler+0x5c>)
   80dac:	7842      	ldrb	r2, [r0, #1]
   80dae:	1c53      	adds	r3, r2, #1
   80db0:	4259      	negs	r1, r3
   80db2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   80db6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   80dba:	bf58      	it	pl
   80dbc:	424b      	negpl	r3, r1
   80dbe:	7801      	ldrb	r1, [r0, #0]
   80dc0:	428b      	cmp	r3, r1
   80dc2:	d006      	beq.n	80dd2 <UART_Handler+0x42>
   80dc4:	4908      	ldr	r1, [pc, #32]	; (80de8 <UART_Handler+0x58>)
   80dc6:	6988      	ldr	r0, [r1, #24]
   80dc8:	4908      	ldr	r1, [pc, #32]	; (80dec <UART_Handler+0x5c>)
   80dca:	440a      	add	r2, r1
   80dcc:	7090      	strb	r0, [r2, #2]
   80dce:	704b      	strb	r3, [r1, #1]
   80dd0:	bd08      	pop	{r3, pc}
   80dd2:	4807      	ldr	r0, [pc, #28]	; (80df0 <UART_Handler+0x60>)
   80dd4:	4b07      	ldr	r3, [pc, #28]	; (80df4 <UART_Handler+0x64>)
   80dd6:	4798      	blx	r3
   80dd8:	4b03      	ldr	r3, [pc, #12]	; (80de8 <UART_Handler+0x58>)
   80dda:	699a      	ldr	r2, [r3, #24]
   80ddc:	4b03      	ldr	r3, [pc, #12]	; (80dec <UART_Handler+0x5c>)
   80dde:	7859      	ldrb	r1, [r3, #1]
   80de0:	440b      	add	r3, r1
   80de2:	709a      	strb	r2, [r3, #2]
   80de4:	bd08      	pop	{r3, pc}
   80de6:	bf00      	nop
   80de8:	400e0800 	.word	0x400e0800
   80dec:	20000460 	.word	0x20000460
   80df0:	000817f8 	.word	0x000817f8
   80df4:	00080c41 	.word	0x00080c41

00080df8 <__aeabi_drsub>:
   80df8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   80dfc:	e002      	b.n	80e04 <__adddf3>
   80dfe:	bf00      	nop

00080e00 <__aeabi_dsub>:
   80e00:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00080e04 <__adddf3>:
   80e04:	b530      	push	{r4, r5, lr}
   80e06:	ea4f 0441 	mov.w	r4, r1, lsl #1
   80e0a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   80e0e:	ea94 0f05 	teq	r4, r5
   80e12:	bf08      	it	eq
   80e14:	ea90 0f02 	teqeq	r0, r2
   80e18:	bf1f      	itttt	ne
   80e1a:	ea54 0c00 	orrsne.w	ip, r4, r0
   80e1e:	ea55 0c02 	orrsne.w	ip, r5, r2
   80e22:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   80e26:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   80e2a:	f000 80e2 	beq.w	80ff2 <__adddf3+0x1ee>
   80e2e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   80e32:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   80e36:	bfb8      	it	lt
   80e38:	426d      	neglt	r5, r5
   80e3a:	dd0c      	ble.n	80e56 <__adddf3+0x52>
   80e3c:	442c      	add	r4, r5
   80e3e:	ea80 0202 	eor.w	r2, r0, r2
   80e42:	ea81 0303 	eor.w	r3, r1, r3
   80e46:	ea82 0000 	eor.w	r0, r2, r0
   80e4a:	ea83 0101 	eor.w	r1, r3, r1
   80e4e:	ea80 0202 	eor.w	r2, r0, r2
   80e52:	ea81 0303 	eor.w	r3, r1, r3
   80e56:	2d36      	cmp	r5, #54	; 0x36
   80e58:	bf88      	it	hi
   80e5a:	bd30      	pophi	{r4, r5, pc}
   80e5c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   80e60:	ea4f 3101 	mov.w	r1, r1, lsl #12
   80e64:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   80e68:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   80e6c:	d002      	beq.n	80e74 <__adddf3+0x70>
   80e6e:	4240      	negs	r0, r0
   80e70:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   80e74:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   80e78:	ea4f 3303 	mov.w	r3, r3, lsl #12
   80e7c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   80e80:	d002      	beq.n	80e88 <__adddf3+0x84>
   80e82:	4252      	negs	r2, r2
   80e84:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   80e88:	ea94 0f05 	teq	r4, r5
   80e8c:	f000 80a7 	beq.w	80fde <__adddf3+0x1da>
   80e90:	f1a4 0401 	sub.w	r4, r4, #1
   80e94:	f1d5 0e20 	rsbs	lr, r5, #32
   80e98:	db0d      	blt.n	80eb6 <__adddf3+0xb2>
   80e9a:	fa02 fc0e 	lsl.w	ip, r2, lr
   80e9e:	fa22 f205 	lsr.w	r2, r2, r5
   80ea2:	1880      	adds	r0, r0, r2
   80ea4:	f141 0100 	adc.w	r1, r1, #0
   80ea8:	fa03 f20e 	lsl.w	r2, r3, lr
   80eac:	1880      	adds	r0, r0, r2
   80eae:	fa43 f305 	asr.w	r3, r3, r5
   80eb2:	4159      	adcs	r1, r3
   80eb4:	e00e      	b.n	80ed4 <__adddf3+0xd0>
   80eb6:	f1a5 0520 	sub.w	r5, r5, #32
   80eba:	f10e 0e20 	add.w	lr, lr, #32
   80ebe:	2a01      	cmp	r2, #1
   80ec0:	fa03 fc0e 	lsl.w	ip, r3, lr
   80ec4:	bf28      	it	cs
   80ec6:	f04c 0c02 	orrcs.w	ip, ip, #2
   80eca:	fa43 f305 	asr.w	r3, r3, r5
   80ece:	18c0      	adds	r0, r0, r3
   80ed0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   80ed4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   80ed8:	d507      	bpl.n	80eea <__adddf3+0xe6>
   80eda:	f04f 0e00 	mov.w	lr, #0
   80ede:	f1dc 0c00 	rsbs	ip, ip, #0
   80ee2:	eb7e 0000 	sbcs.w	r0, lr, r0
   80ee6:	eb6e 0101 	sbc.w	r1, lr, r1
   80eea:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   80eee:	d31b      	bcc.n	80f28 <__adddf3+0x124>
   80ef0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   80ef4:	d30c      	bcc.n	80f10 <__adddf3+0x10c>
   80ef6:	0849      	lsrs	r1, r1, #1
   80ef8:	ea5f 0030 	movs.w	r0, r0, rrx
   80efc:	ea4f 0c3c 	mov.w	ip, ip, rrx
   80f00:	f104 0401 	add.w	r4, r4, #1
   80f04:	ea4f 5244 	mov.w	r2, r4, lsl #21
   80f08:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   80f0c:	f080 809a 	bcs.w	81044 <__adddf3+0x240>
   80f10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   80f14:	bf08      	it	eq
   80f16:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   80f1a:	f150 0000 	adcs.w	r0, r0, #0
   80f1e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   80f22:	ea41 0105 	orr.w	r1, r1, r5
   80f26:	bd30      	pop	{r4, r5, pc}
   80f28:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   80f2c:	4140      	adcs	r0, r0
   80f2e:	eb41 0101 	adc.w	r1, r1, r1
   80f32:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   80f36:	f1a4 0401 	sub.w	r4, r4, #1
   80f3a:	d1e9      	bne.n	80f10 <__adddf3+0x10c>
   80f3c:	f091 0f00 	teq	r1, #0
   80f40:	bf04      	itt	eq
   80f42:	4601      	moveq	r1, r0
   80f44:	2000      	moveq	r0, #0
   80f46:	fab1 f381 	clz	r3, r1
   80f4a:	bf08      	it	eq
   80f4c:	3320      	addeq	r3, #32
   80f4e:	f1a3 030b 	sub.w	r3, r3, #11
   80f52:	f1b3 0220 	subs.w	r2, r3, #32
   80f56:	da0c      	bge.n	80f72 <__adddf3+0x16e>
   80f58:	320c      	adds	r2, #12
   80f5a:	dd08      	ble.n	80f6e <__adddf3+0x16a>
   80f5c:	f102 0c14 	add.w	ip, r2, #20
   80f60:	f1c2 020c 	rsb	r2, r2, #12
   80f64:	fa01 f00c 	lsl.w	r0, r1, ip
   80f68:	fa21 f102 	lsr.w	r1, r1, r2
   80f6c:	e00c      	b.n	80f88 <__adddf3+0x184>
   80f6e:	f102 0214 	add.w	r2, r2, #20
   80f72:	bfd8      	it	le
   80f74:	f1c2 0c20 	rsble	ip, r2, #32
   80f78:	fa01 f102 	lsl.w	r1, r1, r2
   80f7c:	fa20 fc0c 	lsr.w	ip, r0, ip
   80f80:	bfdc      	itt	le
   80f82:	ea41 010c 	orrle.w	r1, r1, ip
   80f86:	4090      	lslle	r0, r2
   80f88:	1ae4      	subs	r4, r4, r3
   80f8a:	bfa2      	ittt	ge
   80f8c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   80f90:	4329      	orrge	r1, r5
   80f92:	bd30      	popge	{r4, r5, pc}
   80f94:	ea6f 0404 	mvn.w	r4, r4
   80f98:	3c1f      	subs	r4, #31
   80f9a:	da1c      	bge.n	80fd6 <__adddf3+0x1d2>
   80f9c:	340c      	adds	r4, #12
   80f9e:	dc0e      	bgt.n	80fbe <__adddf3+0x1ba>
   80fa0:	f104 0414 	add.w	r4, r4, #20
   80fa4:	f1c4 0220 	rsb	r2, r4, #32
   80fa8:	fa20 f004 	lsr.w	r0, r0, r4
   80fac:	fa01 f302 	lsl.w	r3, r1, r2
   80fb0:	ea40 0003 	orr.w	r0, r0, r3
   80fb4:	fa21 f304 	lsr.w	r3, r1, r4
   80fb8:	ea45 0103 	orr.w	r1, r5, r3
   80fbc:	bd30      	pop	{r4, r5, pc}
   80fbe:	f1c4 040c 	rsb	r4, r4, #12
   80fc2:	f1c4 0220 	rsb	r2, r4, #32
   80fc6:	fa20 f002 	lsr.w	r0, r0, r2
   80fca:	fa01 f304 	lsl.w	r3, r1, r4
   80fce:	ea40 0003 	orr.w	r0, r0, r3
   80fd2:	4629      	mov	r1, r5
   80fd4:	bd30      	pop	{r4, r5, pc}
   80fd6:	fa21 f004 	lsr.w	r0, r1, r4
   80fda:	4629      	mov	r1, r5
   80fdc:	bd30      	pop	{r4, r5, pc}
   80fde:	f094 0f00 	teq	r4, #0
   80fe2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   80fe6:	bf06      	itte	eq
   80fe8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   80fec:	3401      	addeq	r4, #1
   80fee:	3d01      	subne	r5, #1
   80ff0:	e74e      	b.n	80e90 <__adddf3+0x8c>
   80ff2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   80ff6:	bf18      	it	ne
   80ff8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   80ffc:	d029      	beq.n	81052 <__adddf3+0x24e>
   80ffe:	ea94 0f05 	teq	r4, r5
   81002:	bf08      	it	eq
   81004:	ea90 0f02 	teqeq	r0, r2
   81008:	d005      	beq.n	81016 <__adddf3+0x212>
   8100a:	ea54 0c00 	orrs.w	ip, r4, r0
   8100e:	bf04      	itt	eq
   81010:	4619      	moveq	r1, r3
   81012:	4610      	moveq	r0, r2
   81014:	bd30      	pop	{r4, r5, pc}
   81016:	ea91 0f03 	teq	r1, r3
   8101a:	bf1e      	ittt	ne
   8101c:	2100      	movne	r1, #0
   8101e:	2000      	movne	r0, #0
   81020:	bd30      	popne	{r4, r5, pc}
   81022:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   81026:	d105      	bne.n	81034 <__adddf3+0x230>
   81028:	0040      	lsls	r0, r0, #1
   8102a:	4149      	adcs	r1, r1
   8102c:	bf28      	it	cs
   8102e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   81032:	bd30      	pop	{r4, r5, pc}
   81034:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   81038:	bf3c      	itt	cc
   8103a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   8103e:	bd30      	popcc	{r4, r5, pc}
   81040:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   81044:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   81048:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   8104c:	f04f 0000 	mov.w	r0, #0
   81050:	bd30      	pop	{r4, r5, pc}
   81052:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   81056:	bf1a      	itte	ne
   81058:	4619      	movne	r1, r3
   8105a:	4610      	movne	r0, r2
   8105c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   81060:	bf1c      	itt	ne
   81062:	460b      	movne	r3, r1
   81064:	4602      	movne	r2, r0
   81066:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8106a:	bf06      	itte	eq
   8106c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   81070:	ea91 0f03 	teqeq	r1, r3
   81074:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   81078:	bd30      	pop	{r4, r5, pc}
   8107a:	bf00      	nop

0008107c <__aeabi_ui2d>:
   8107c:	f090 0f00 	teq	r0, #0
   81080:	bf04      	itt	eq
   81082:	2100      	moveq	r1, #0
   81084:	4770      	bxeq	lr
   81086:	b530      	push	{r4, r5, lr}
   81088:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8108c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   81090:	f04f 0500 	mov.w	r5, #0
   81094:	f04f 0100 	mov.w	r1, #0
   81098:	e750      	b.n	80f3c <__adddf3+0x138>
   8109a:	bf00      	nop

0008109c <__aeabi_i2d>:
   8109c:	f090 0f00 	teq	r0, #0
   810a0:	bf04      	itt	eq
   810a2:	2100      	moveq	r1, #0
   810a4:	4770      	bxeq	lr
   810a6:	b530      	push	{r4, r5, lr}
   810a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   810ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
   810b0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   810b4:	bf48      	it	mi
   810b6:	4240      	negmi	r0, r0
   810b8:	f04f 0100 	mov.w	r1, #0
   810bc:	e73e      	b.n	80f3c <__adddf3+0x138>
   810be:	bf00      	nop

000810c0 <__aeabi_f2d>:
   810c0:	0042      	lsls	r2, r0, #1
   810c2:	ea4f 01e2 	mov.w	r1, r2, asr #3
   810c6:	ea4f 0131 	mov.w	r1, r1, rrx
   810ca:	ea4f 7002 	mov.w	r0, r2, lsl #28
   810ce:	bf1f      	itttt	ne
   810d0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   810d4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   810d8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   810dc:	4770      	bxne	lr
   810de:	f092 0f00 	teq	r2, #0
   810e2:	bf14      	ite	ne
   810e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   810e8:	4770      	bxeq	lr
   810ea:	b530      	push	{r4, r5, lr}
   810ec:	f44f 7460 	mov.w	r4, #896	; 0x380
   810f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   810f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   810f8:	e720      	b.n	80f3c <__adddf3+0x138>
   810fa:	bf00      	nop

000810fc <__aeabi_ul2d>:
   810fc:	ea50 0201 	orrs.w	r2, r0, r1
   81100:	bf08      	it	eq
   81102:	4770      	bxeq	lr
   81104:	b530      	push	{r4, r5, lr}
   81106:	f04f 0500 	mov.w	r5, #0
   8110a:	e00a      	b.n	81122 <__aeabi_l2d+0x16>

0008110c <__aeabi_l2d>:
   8110c:	ea50 0201 	orrs.w	r2, r0, r1
   81110:	bf08      	it	eq
   81112:	4770      	bxeq	lr
   81114:	b530      	push	{r4, r5, lr}
   81116:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   8111a:	d502      	bpl.n	81122 <__aeabi_l2d+0x16>
   8111c:	4240      	negs	r0, r0
   8111e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   81122:	f44f 6480 	mov.w	r4, #1024	; 0x400
   81126:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8112a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   8112e:	f43f aedc 	beq.w	80eea <__adddf3+0xe6>
   81132:	f04f 0203 	mov.w	r2, #3
   81136:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8113a:	bf18      	it	ne
   8113c:	3203      	addne	r2, #3
   8113e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   81142:	bf18      	it	ne
   81144:	3203      	addne	r2, #3
   81146:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   8114a:	f1c2 0320 	rsb	r3, r2, #32
   8114e:	fa00 fc03 	lsl.w	ip, r0, r3
   81152:	fa20 f002 	lsr.w	r0, r0, r2
   81156:	fa01 fe03 	lsl.w	lr, r1, r3
   8115a:	ea40 000e 	orr.w	r0, r0, lr
   8115e:	fa21 f102 	lsr.w	r1, r1, r2
   81162:	4414      	add	r4, r2
   81164:	e6c1      	b.n	80eea <__adddf3+0xe6>
   81166:	bf00      	nop

00081168 <__aeabi_dmul>:
   81168:	b570      	push	{r4, r5, r6, lr}
   8116a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8116e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   81172:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   81176:	bf1d      	ittte	ne
   81178:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   8117c:	ea94 0f0c 	teqne	r4, ip
   81180:	ea95 0f0c 	teqne	r5, ip
   81184:	f000 f8de 	bleq	81344 <__aeabi_dmul+0x1dc>
   81188:	442c      	add	r4, r5
   8118a:	ea81 0603 	eor.w	r6, r1, r3
   8118e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   81192:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   81196:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   8119a:	bf18      	it	ne
   8119c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   811a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   811a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   811a8:	d038      	beq.n	8121c <__aeabi_dmul+0xb4>
   811aa:	fba0 ce02 	umull	ip, lr, r0, r2
   811ae:	f04f 0500 	mov.w	r5, #0
   811b2:	fbe1 e502 	umlal	lr, r5, r1, r2
   811b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   811ba:	fbe0 e503 	umlal	lr, r5, r0, r3
   811be:	f04f 0600 	mov.w	r6, #0
   811c2:	fbe1 5603 	umlal	r5, r6, r1, r3
   811c6:	f09c 0f00 	teq	ip, #0
   811ca:	bf18      	it	ne
   811cc:	f04e 0e01 	orrne.w	lr, lr, #1
   811d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   811d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   811d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   811dc:	d204      	bcs.n	811e8 <__aeabi_dmul+0x80>
   811de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   811e2:	416d      	adcs	r5, r5
   811e4:	eb46 0606 	adc.w	r6, r6, r6
   811e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   811ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   811f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   811f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   811f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   811fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   81200:	bf88      	it	hi
   81202:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   81206:	d81e      	bhi.n	81246 <__aeabi_dmul+0xde>
   81208:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   8120c:	bf08      	it	eq
   8120e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   81212:	f150 0000 	adcs.w	r0, r0, #0
   81216:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8121a:	bd70      	pop	{r4, r5, r6, pc}
   8121c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   81220:	ea46 0101 	orr.w	r1, r6, r1
   81224:	ea40 0002 	orr.w	r0, r0, r2
   81228:	ea81 0103 	eor.w	r1, r1, r3
   8122c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   81230:	bfc2      	ittt	gt
   81232:	ebd4 050c 	rsbsgt	r5, r4, ip
   81236:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8123a:	bd70      	popgt	{r4, r5, r6, pc}
   8123c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   81240:	f04f 0e00 	mov.w	lr, #0
   81244:	3c01      	subs	r4, #1
   81246:	f300 80ab 	bgt.w	813a0 <__aeabi_dmul+0x238>
   8124a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   8124e:	bfde      	ittt	le
   81250:	2000      	movle	r0, #0
   81252:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   81256:	bd70      	pople	{r4, r5, r6, pc}
   81258:	f1c4 0400 	rsb	r4, r4, #0
   8125c:	3c20      	subs	r4, #32
   8125e:	da35      	bge.n	812cc <__aeabi_dmul+0x164>
   81260:	340c      	adds	r4, #12
   81262:	dc1b      	bgt.n	8129c <__aeabi_dmul+0x134>
   81264:	f104 0414 	add.w	r4, r4, #20
   81268:	f1c4 0520 	rsb	r5, r4, #32
   8126c:	fa00 f305 	lsl.w	r3, r0, r5
   81270:	fa20 f004 	lsr.w	r0, r0, r4
   81274:	fa01 f205 	lsl.w	r2, r1, r5
   81278:	ea40 0002 	orr.w	r0, r0, r2
   8127c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   81280:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   81284:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   81288:	fa21 f604 	lsr.w	r6, r1, r4
   8128c:	eb42 0106 	adc.w	r1, r2, r6
   81290:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   81294:	bf08      	it	eq
   81296:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8129a:	bd70      	pop	{r4, r5, r6, pc}
   8129c:	f1c4 040c 	rsb	r4, r4, #12
   812a0:	f1c4 0520 	rsb	r5, r4, #32
   812a4:	fa00 f304 	lsl.w	r3, r0, r4
   812a8:	fa20 f005 	lsr.w	r0, r0, r5
   812ac:	fa01 f204 	lsl.w	r2, r1, r4
   812b0:	ea40 0002 	orr.w	r0, r0, r2
   812b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   812b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   812bc:	f141 0100 	adc.w	r1, r1, #0
   812c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   812c4:	bf08      	it	eq
   812c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   812ca:	bd70      	pop	{r4, r5, r6, pc}
   812cc:	f1c4 0520 	rsb	r5, r4, #32
   812d0:	fa00 f205 	lsl.w	r2, r0, r5
   812d4:	ea4e 0e02 	orr.w	lr, lr, r2
   812d8:	fa20 f304 	lsr.w	r3, r0, r4
   812dc:	fa01 f205 	lsl.w	r2, r1, r5
   812e0:	ea43 0302 	orr.w	r3, r3, r2
   812e4:	fa21 f004 	lsr.w	r0, r1, r4
   812e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   812ec:	fa21 f204 	lsr.w	r2, r1, r4
   812f0:	ea20 0002 	bic.w	r0, r0, r2
   812f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   812f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   812fc:	bf08      	it	eq
   812fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   81302:	bd70      	pop	{r4, r5, r6, pc}
   81304:	f094 0f00 	teq	r4, #0
   81308:	d10f      	bne.n	8132a <__aeabi_dmul+0x1c2>
   8130a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   8130e:	0040      	lsls	r0, r0, #1
   81310:	eb41 0101 	adc.w	r1, r1, r1
   81314:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   81318:	bf08      	it	eq
   8131a:	3c01      	subeq	r4, #1
   8131c:	d0f7      	beq.n	8130e <__aeabi_dmul+0x1a6>
   8131e:	ea41 0106 	orr.w	r1, r1, r6
   81322:	f095 0f00 	teq	r5, #0
   81326:	bf18      	it	ne
   81328:	4770      	bxne	lr
   8132a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   8132e:	0052      	lsls	r2, r2, #1
   81330:	eb43 0303 	adc.w	r3, r3, r3
   81334:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   81338:	bf08      	it	eq
   8133a:	3d01      	subeq	r5, #1
   8133c:	d0f7      	beq.n	8132e <__aeabi_dmul+0x1c6>
   8133e:	ea43 0306 	orr.w	r3, r3, r6
   81342:	4770      	bx	lr
   81344:	ea94 0f0c 	teq	r4, ip
   81348:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8134c:	bf18      	it	ne
   8134e:	ea95 0f0c 	teqne	r5, ip
   81352:	d00c      	beq.n	8136e <__aeabi_dmul+0x206>
   81354:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   81358:	bf18      	it	ne
   8135a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8135e:	d1d1      	bne.n	81304 <__aeabi_dmul+0x19c>
   81360:	ea81 0103 	eor.w	r1, r1, r3
   81364:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   81368:	f04f 0000 	mov.w	r0, #0
   8136c:	bd70      	pop	{r4, r5, r6, pc}
   8136e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   81372:	bf06      	itte	eq
   81374:	4610      	moveq	r0, r2
   81376:	4619      	moveq	r1, r3
   81378:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8137c:	d019      	beq.n	813b2 <__aeabi_dmul+0x24a>
   8137e:	ea94 0f0c 	teq	r4, ip
   81382:	d102      	bne.n	8138a <__aeabi_dmul+0x222>
   81384:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   81388:	d113      	bne.n	813b2 <__aeabi_dmul+0x24a>
   8138a:	ea95 0f0c 	teq	r5, ip
   8138e:	d105      	bne.n	8139c <__aeabi_dmul+0x234>
   81390:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   81394:	bf1c      	itt	ne
   81396:	4610      	movne	r0, r2
   81398:	4619      	movne	r1, r3
   8139a:	d10a      	bne.n	813b2 <__aeabi_dmul+0x24a>
   8139c:	ea81 0103 	eor.w	r1, r1, r3
   813a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   813a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   813a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   813ac:	f04f 0000 	mov.w	r0, #0
   813b0:	bd70      	pop	{r4, r5, r6, pc}
   813b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   813b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   813ba:	bd70      	pop	{r4, r5, r6, pc}

000813bc <__aeabi_ddiv>:
   813bc:	b570      	push	{r4, r5, r6, lr}
   813be:	f04f 0cff 	mov.w	ip, #255	; 0xff
   813c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   813c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   813ca:	bf1d      	ittte	ne
   813cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   813d0:	ea94 0f0c 	teqne	r4, ip
   813d4:	ea95 0f0c 	teqne	r5, ip
   813d8:	f000 f8a7 	bleq	8152a <__aeabi_ddiv+0x16e>
   813dc:	eba4 0405 	sub.w	r4, r4, r5
   813e0:	ea81 0e03 	eor.w	lr, r1, r3
   813e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   813e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   813ec:	f000 8088 	beq.w	81500 <__aeabi_ddiv+0x144>
   813f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   813f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   813f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   813fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   81400:	ea4f 2202 	mov.w	r2, r2, lsl #8
   81404:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   81408:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   8140c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   81410:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   81414:	429d      	cmp	r5, r3
   81416:	bf08      	it	eq
   81418:	4296      	cmpeq	r6, r2
   8141a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   8141e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   81422:	d202      	bcs.n	8142a <__aeabi_ddiv+0x6e>
   81424:	085b      	lsrs	r3, r3, #1
   81426:	ea4f 0232 	mov.w	r2, r2, rrx
   8142a:	1ab6      	subs	r6, r6, r2
   8142c:	eb65 0503 	sbc.w	r5, r5, r3
   81430:	085b      	lsrs	r3, r3, #1
   81432:	ea4f 0232 	mov.w	r2, r2, rrx
   81436:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   8143a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   8143e:	ebb6 0e02 	subs.w	lr, r6, r2
   81442:	eb75 0e03 	sbcs.w	lr, r5, r3
   81446:	bf22      	ittt	cs
   81448:	1ab6      	subcs	r6, r6, r2
   8144a:	4675      	movcs	r5, lr
   8144c:	ea40 000c 	orrcs.w	r0, r0, ip
   81450:	085b      	lsrs	r3, r3, #1
   81452:	ea4f 0232 	mov.w	r2, r2, rrx
   81456:	ebb6 0e02 	subs.w	lr, r6, r2
   8145a:	eb75 0e03 	sbcs.w	lr, r5, r3
   8145e:	bf22      	ittt	cs
   81460:	1ab6      	subcs	r6, r6, r2
   81462:	4675      	movcs	r5, lr
   81464:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   81468:	085b      	lsrs	r3, r3, #1
   8146a:	ea4f 0232 	mov.w	r2, r2, rrx
   8146e:	ebb6 0e02 	subs.w	lr, r6, r2
   81472:	eb75 0e03 	sbcs.w	lr, r5, r3
   81476:	bf22      	ittt	cs
   81478:	1ab6      	subcs	r6, r6, r2
   8147a:	4675      	movcs	r5, lr
   8147c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   81480:	085b      	lsrs	r3, r3, #1
   81482:	ea4f 0232 	mov.w	r2, r2, rrx
   81486:	ebb6 0e02 	subs.w	lr, r6, r2
   8148a:	eb75 0e03 	sbcs.w	lr, r5, r3
   8148e:	bf22      	ittt	cs
   81490:	1ab6      	subcs	r6, r6, r2
   81492:	4675      	movcs	r5, lr
   81494:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   81498:	ea55 0e06 	orrs.w	lr, r5, r6
   8149c:	d018      	beq.n	814d0 <__aeabi_ddiv+0x114>
   8149e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   814a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   814a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   814aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   814ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   814b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   814b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   814ba:	d1c0      	bne.n	8143e <__aeabi_ddiv+0x82>
   814bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   814c0:	d10b      	bne.n	814da <__aeabi_ddiv+0x11e>
   814c2:	ea41 0100 	orr.w	r1, r1, r0
   814c6:	f04f 0000 	mov.w	r0, #0
   814ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   814ce:	e7b6      	b.n	8143e <__aeabi_ddiv+0x82>
   814d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   814d4:	bf04      	itt	eq
   814d6:	4301      	orreq	r1, r0
   814d8:	2000      	moveq	r0, #0
   814da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   814de:	bf88      	it	hi
   814e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   814e4:	f63f aeaf 	bhi.w	81246 <__aeabi_dmul+0xde>
   814e8:	ebb5 0c03 	subs.w	ip, r5, r3
   814ec:	bf04      	itt	eq
   814ee:	ebb6 0c02 	subseq.w	ip, r6, r2
   814f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   814f6:	f150 0000 	adcs.w	r0, r0, #0
   814fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   814fe:	bd70      	pop	{r4, r5, r6, pc}
   81500:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   81504:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   81508:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   8150c:	bfc2      	ittt	gt
   8150e:	ebd4 050c 	rsbsgt	r5, r4, ip
   81512:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   81516:	bd70      	popgt	{r4, r5, r6, pc}
   81518:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8151c:	f04f 0e00 	mov.w	lr, #0
   81520:	3c01      	subs	r4, #1
   81522:	e690      	b.n	81246 <__aeabi_dmul+0xde>
   81524:	ea45 0e06 	orr.w	lr, r5, r6
   81528:	e68d      	b.n	81246 <__aeabi_dmul+0xde>
   8152a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8152e:	ea94 0f0c 	teq	r4, ip
   81532:	bf08      	it	eq
   81534:	ea95 0f0c 	teqeq	r5, ip
   81538:	f43f af3b 	beq.w	813b2 <__aeabi_dmul+0x24a>
   8153c:	ea94 0f0c 	teq	r4, ip
   81540:	d10a      	bne.n	81558 <__aeabi_ddiv+0x19c>
   81542:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   81546:	f47f af34 	bne.w	813b2 <__aeabi_dmul+0x24a>
   8154a:	ea95 0f0c 	teq	r5, ip
   8154e:	f47f af25 	bne.w	8139c <__aeabi_dmul+0x234>
   81552:	4610      	mov	r0, r2
   81554:	4619      	mov	r1, r3
   81556:	e72c      	b.n	813b2 <__aeabi_dmul+0x24a>
   81558:	ea95 0f0c 	teq	r5, ip
   8155c:	d106      	bne.n	8156c <__aeabi_ddiv+0x1b0>
   8155e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   81562:	f43f aefd 	beq.w	81360 <__aeabi_dmul+0x1f8>
   81566:	4610      	mov	r0, r2
   81568:	4619      	mov	r1, r3
   8156a:	e722      	b.n	813b2 <__aeabi_dmul+0x24a>
   8156c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   81570:	bf18      	it	ne
   81572:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   81576:	f47f aec5 	bne.w	81304 <__aeabi_dmul+0x19c>
   8157a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   8157e:	f47f af0d 	bne.w	8139c <__aeabi_dmul+0x234>
   81582:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   81586:	f47f aeeb 	bne.w	81360 <__aeabi_dmul+0x1f8>
   8158a:	e712      	b.n	813b2 <__aeabi_dmul+0x24a>

0008158c <__aeabi_d2uiz>:
   8158c:	004a      	lsls	r2, r1, #1
   8158e:	d211      	bcs.n	815b4 <__aeabi_d2uiz+0x28>
   81590:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   81594:	d211      	bcs.n	815ba <__aeabi_d2uiz+0x2e>
   81596:	d50d      	bpl.n	815b4 <__aeabi_d2uiz+0x28>
   81598:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   8159c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   815a0:	d40e      	bmi.n	815c0 <__aeabi_d2uiz+0x34>
   815a2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   815a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   815aa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   815ae:	fa23 f002 	lsr.w	r0, r3, r2
   815b2:	4770      	bx	lr
   815b4:	f04f 0000 	mov.w	r0, #0
   815b8:	4770      	bx	lr
   815ba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   815be:	d102      	bne.n	815c6 <__aeabi_d2uiz+0x3a>
   815c0:	f04f 30ff 	mov.w	r0, #4294967295
   815c4:	4770      	bx	lr
   815c6:	f04f 0000 	mov.w	r0, #0
   815ca:	4770      	bx	lr

000815cc <__libc_init_array>:
   815cc:	b570      	push	{r4, r5, r6, lr}
   815ce:	4e0f      	ldr	r6, [pc, #60]	; (8160c <__libc_init_array+0x40>)
   815d0:	4d0f      	ldr	r5, [pc, #60]	; (81610 <__libc_init_array+0x44>)
   815d2:	1b76      	subs	r6, r6, r5
   815d4:	10b6      	asrs	r6, r6, #2
   815d6:	bf18      	it	ne
   815d8:	2400      	movne	r4, #0
   815da:	d005      	beq.n	815e8 <__libc_init_array+0x1c>
   815dc:	3401      	adds	r4, #1
   815de:	f855 3b04 	ldr.w	r3, [r5], #4
   815e2:	4798      	blx	r3
   815e4:	42a6      	cmp	r6, r4
   815e6:	d1f9      	bne.n	815dc <__libc_init_array+0x10>
   815e8:	4e0a      	ldr	r6, [pc, #40]	; (81614 <__libc_init_array+0x48>)
   815ea:	4d0b      	ldr	r5, [pc, #44]	; (81618 <__libc_init_array+0x4c>)
   815ec:	f000 f916 	bl	8181c <_init>
   815f0:	1b76      	subs	r6, r6, r5
   815f2:	10b6      	asrs	r6, r6, #2
   815f4:	bf18      	it	ne
   815f6:	2400      	movne	r4, #0
   815f8:	d006      	beq.n	81608 <__libc_init_array+0x3c>
   815fa:	3401      	adds	r4, #1
   815fc:	f855 3b04 	ldr.w	r3, [r5], #4
   81600:	4798      	blx	r3
   81602:	42a6      	cmp	r6, r4
   81604:	d1f9      	bne.n	815fa <__libc_init_array+0x2e>
   81606:	bd70      	pop	{r4, r5, r6, pc}
   81608:	bd70      	pop	{r4, r5, r6, pc}
   8160a:	bf00      	nop
   8160c:	00081828 	.word	0x00081828
   81610:	00081828 	.word	0x00081828
   81614:	00081830 	.word	0x00081830
   81618:	00081828 	.word	0x00081828

0008161c <register_fini>:
   8161c:	4b02      	ldr	r3, [pc, #8]	; (81628 <register_fini+0xc>)
   8161e:	b113      	cbz	r3, 81626 <register_fini+0xa>
   81620:	4802      	ldr	r0, [pc, #8]	; (8162c <register_fini+0x10>)
   81622:	f000 b805 	b.w	81630 <atexit>
   81626:	4770      	bx	lr
   81628:	00000000 	.word	0x00000000
   8162c:	0008163d 	.word	0x0008163d

00081630 <atexit>:
   81630:	2300      	movs	r3, #0
   81632:	4601      	mov	r1, r0
   81634:	461a      	mov	r2, r3
   81636:	4618      	mov	r0, r3
   81638:	f000 b81e 	b.w	81678 <__register_exitproc>

0008163c <__libc_fini_array>:
   8163c:	b538      	push	{r3, r4, r5, lr}
   8163e:	4c0a      	ldr	r4, [pc, #40]	; (81668 <__libc_fini_array+0x2c>)
   81640:	4d0a      	ldr	r5, [pc, #40]	; (8166c <__libc_fini_array+0x30>)
   81642:	1b64      	subs	r4, r4, r5
   81644:	10a4      	asrs	r4, r4, #2
   81646:	d00a      	beq.n	8165e <__libc_fini_array+0x22>
   81648:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   8164c:	3b01      	subs	r3, #1
   8164e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   81652:	3c01      	subs	r4, #1
   81654:	f855 3904 	ldr.w	r3, [r5], #-4
   81658:	4798      	blx	r3
   8165a:	2c00      	cmp	r4, #0
   8165c:	d1f9      	bne.n	81652 <__libc_fini_array+0x16>
   8165e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   81662:	f000 b8e5 	b.w	81830 <_fini>
   81666:	bf00      	nop
   81668:	00081840 	.word	0x00081840
   8166c:	0008183c 	.word	0x0008183c

00081670 <__retarget_lock_acquire_recursive>:
   81670:	4770      	bx	lr
   81672:	bf00      	nop

00081674 <__retarget_lock_release_recursive>:
   81674:	4770      	bx	lr
   81676:	bf00      	nop

00081678 <__register_exitproc>:
   81678:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8167c:	4d2c      	ldr	r5, [pc, #176]	; (81730 <__register_exitproc+0xb8>)
   8167e:	4606      	mov	r6, r0
   81680:	6828      	ldr	r0, [r5, #0]
   81682:	4698      	mov	r8, r3
   81684:	460f      	mov	r7, r1
   81686:	4691      	mov	r9, r2
   81688:	f7ff fff2 	bl	81670 <__retarget_lock_acquire_recursive>
   8168c:	4b29      	ldr	r3, [pc, #164]	; (81734 <__register_exitproc+0xbc>)
   8168e:	681c      	ldr	r4, [r3, #0]
   81690:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   81694:	2b00      	cmp	r3, #0
   81696:	d03e      	beq.n	81716 <__register_exitproc+0x9e>
   81698:	685a      	ldr	r2, [r3, #4]
   8169a:	2a1f      	cmp	r2, #31
   8169c:	dc1c      	bgt.n	816d8 <__register_exitproc+0x60>
   8169e:	f102 0e01 	add.w	lr, r2, #1
   816a2:	b176      	cbz	r6, 816c2 <__register_exitproc+0x4a>
   816a4:	2101      	movs	r1, #1
   816a6:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   816aa:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   816ae:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   816b2:	4091      	lsls	r1, r2
   816b4:	4308      	orrs	r0, r1
   816b6:	2e02      	cmp	r6, #2
   816b8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   816bc:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   816c0:	d023      	beq.n	8170a <__register_exitproc+0x92>
   816c2:	3202      	adds	r2, #2
   816c4:	f8c3 e004 	str.w	lr, [r3, #4]
   816c8:	6828      	ldr	r0, [r5, #0]
   816ca:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   816ce:	f7ff ffd1 	bl	81674 <__retarget_lock_release_recursive>
   816d2:	2000      	movs	r0, #0
   816d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   816d8:	4b17      	ldr	r3, [pc, #92]	; (81738 <__register_exitproc+0xc0>)
   816da:	b30b      	cbz	r3, 81720 <__register_exitproc+0xa8>
   816dc:	f44f 70c8 	mov.w	r0, #400	; 0x190
   816e0:	f3af 8000 	nop.w
   816e4:	4603      	mov	r3, r0
   816e6:	b1d8      	cbz	r0, 81720 <__register_exitproc+0xa8>
   816e8:	2000      	movs	r0, #0
   816ea:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   816ee:	f04f 0e01 	mov.w	lr, #1
   816f2:	6058      	str	r0, [r3, #4]
   816f4:	6019      	str	r1, [r3, #0]
   816f6:	4602      	mov	r2, r0
   816f8:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   816fc:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   81700:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   81704:	2e00      	cmp	r6, #0
   81706:	d0dc      	beq.n	816c2 <__register_exitproc+0x4a>
   81708:	e7cc      	b.n	816a4 <__register_exitproc+0x2c>
   8170a:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   8170e:	4301      	orrs	r1, r0
   81710:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   81714:	e7d5      	b.n	816c2 <__register_exitproc+0x4a>
   81716:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   8171a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   8171e:	e7bb      	b.n	81698 <__register_exitproc+0x20>
   81720:	6828      	ldr	r0, [r5, #0]
   81722:	f7ff ffa7 	bl	81674 <__retarget_lock_release_recursive>
   81726:	f04f 30ff 	mov.w	r0, #4294967295
   8172a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8172e:	bf00      	nop
   81730:	20000430 	.word	0x20000430
   81734:	00081818 	.word	0x00081818
   81738:	00000000 	.word	0x00000000
   8173c:	304e4143 	.word	0x304e4143
   81740:	73656d20 	.word	0x73656d20
   81744:	65676173 	.word	0x65676173
   81748:	72726120 	.word	0x72726120
   8174c:	64657669 	.word	0x64657669
   81750:	206e6920 	.word	0x206e6920
   81754:	2d6e6f6e 	.word	0x2d6e6f6e
   81758:	64657375 	.word	0x64657375
   8175c:	69616d20 	.word	0x69616d20
   81760:	786f626c 	.word	0x786f626c
   81764:	00000d0a 	.word	0x00000d0a
   81768:	7373656d 	.word	0x7373656d
   8176c:	20656761 	.word	0x20656761
   81770:	203a6469 	.word	0x203a6469
   81774:	0d0a6425 	.word	0x0d0a6425
   81778:	00000000 	.word	0x00000000
   8177c:	7373656d 	.word	0x7373656d
   81780:	20656761 	.word	0x20656761
   81784:	61746164 	.word	0x61746164
   81788:	6e656c20 	.word	0x6e656c20
   8178c:	3a687467 	.word	0x3a687467
   81790:	0a642520 	.word	0x0a642520
   81794:	0000000d 	.word	0x0000000d
   81798:	00206425 	.word	0x00206425
   8179c:	6f636e45 	.word	0x6f636e45
   817a0:	20726564 	.word	0x20726564
   817a4:	61746164 	.word	0x61746164
   817a8:	7825203a 	.word	0x7825203a
   817ac:	000d0a20 	.word	0x000d0a20
   817b0:	6c6c6568 	.word	0x6c6c6568
   817b4:	000d0a6f 	.word	0x000d0a6f
   817b8:	6c616f67 	.word	0x6c616f67
   817bc:	203a2073 	.word	0x203a2073
   817c0:	20206425 	.word	0x20206425
   817c4:	000d0a20 	.word	0x000d0a20
   817c8:	695f6f74 	.word	0x695f6f74
   817cc:	6572636e 	.word	0x6572636e
   817d0:	746e656d 	.word	0x746e656d
   817d4:	00000000 	.word	0x00000000
   817d8:	6c756e28 	.word	0x6c756e28
   817dc:	0000296c 	.word	0x0000296c
   817e0:	74696e49 	.word	0x74696e49
   817e4:	20495020 	.word	0x20495020
   817e8:	656e6f64 	.word	0x656e6f64
   817ec:	00000000 	.word	0x00000000
   817f0:	0a206425 	.word	0x0a206425
   817f4:	0000000d 	.word	0x0000000d
   817f8:	3a525245 	.word	0x3a525245
   817fc:	52415520 	.word	0x52415520
   81800:	58522054 	.word	0x58522054
   81804:	66756220 	.word	0x66756220
   81808:	20726566 	.word	0x20726566
   8180c:	66207369 	.word	0x66207369
   81810:	0a6c6c75 	.word	0x0a6c6c75
   81814:	0000000d 	.word	0x0000000d

00081818 <_global_impure_ptr>:
   81818:	20000008                                ... 

0008181c <_init>:
   8181c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8181e:	bf00      	nop
   81820:	bcf8      	pop	{r3, r4, r5, r6, r7}
   81822:	bc08      	pop	{r3}
   81824:	469e      	mov	lr, r3
   81826:	4770      	bx	lr

00081828 <__init_array_start>:
   81828:	0008161d 	.word	0x0008161d

0008182c <__frame_dummy_init_array_entry>:
   8182c:	00080119                                ....

00081830 <_fini>:
   81830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81832:	bf00      	nop
   81834:	bcf8      	pop	{r3, r4, r5, r6, r7}
   81836:	bc08      	pop	{r3}
   81838:	469e      	mov	lr, r3
   8183a:	4770      	bx	lr

0008183c <__fini_array_start>:
   8183c:	000800f5 	.word	0x000800f5
