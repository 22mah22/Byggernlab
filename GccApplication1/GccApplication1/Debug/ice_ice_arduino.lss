
ice_ice_arduino.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001ce8  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000454  20000000  00081ce8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000cc  20000458  00082140  00020454  2**3
                  ALLOC
  3 .stack        00000404  20000524  0008220c  00020454  2**0
                  ALLOC
  4 .heap         00000200  20000928  00082610  00020454  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020454  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002047d  2**0
                  CONTENTS, READONLY
  7 .debug_info   000084bd  00000000  00000000  000204d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001958  00000000  00000000  00028993  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000015a2  00000000  00000000  0002a2eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000308  00000000  00000000  0002b88d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000270  00000000  00000000  0002bb95  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000130cb  00000000  00000000  0002be05  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000619f  00000000  00000000  0003eed0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00054780  00000000  00000000  0004506f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000008d4  00000000  00000000  000997f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	28 09 00 20 99 05 08 00 95 05 08 00 95 05 08 00     (.. ............
   80010:	95 05 08 00 95 05 08 00 95 05 08 00 00 00 00 00     ................
	...
   8002c:	95 05 08 00 95 05 08 00 00 00 00 00 95 05 08 00     ................
   8003c:	cd 0e 08 00 95 05 08 00 95 05 08 00 95 05 08 00     ................
   8004c:	95 05 08 00 95 05 08 00 95 05 08 00 95 05 08 00     ................
   8005c:	95 05 08 00 b9 11 08 00 95 05 08 00 00 00 00 00     ................
   8006c:	95 05 08 00 95 05 08 00 95 05 08 00 95 05 08 00     ................
	...
   80084:	95 05 08 00 95 05 08 00 95 05 08 00 95 05 08 00     ................
   80094:	95 05 08 00 95 05 08 00 95 05 08 00 95 05 08 00     ................
   800a4:	00 00 00 00 95 05 08 00 95 05 08 00 95 0f 08 00     ................
   800b4:	a9 10 08 00 95 05 08 00 95 05 08 00 95 05 08 00     ................
   800c4:	95 05 08 00 95 05 08 00 95 05 08 00 95 05 08 00     ................
   800d4:	c1 01 08 00 95 05 08 00 95 05 08 00 95 05 08 00     ................
   800e4:	95 05 08 00 95 05 08 00 21 04 08 00 95 05 08 00     ........!.......

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20000458 	.word	0x20000458
   80110:	00000000 	.word	0x00000000
   80114:	00081ce8 	.word	0x00081ce8

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00081ce8 	.word	0x00081ce8
   80154:	2000045c 	.word	0x2000045c
   80158:	00081ce8 	.word	0x00081ce8
   8015c:	00000000 	.word	0x00000000

00080160 <adc_init>:
   80160:	2320      	movs	r3, #32
   80162:	4a0b      	ldr	r2, [pc, #44]	; (80190 <adc_init+0x30>)
   80164:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   80168:	4a0a      	ldr	r2, [pc, #40]	; (80194 <adc_init+0x34>)
   8016a:	6053      	str	r3, [r2, #4]
   8016c:	4b0a      	ldr	r3, [pc, #40]	; (80198 <adc_init+0x38>)
   8016e:	2202      	movs	r2, #2
   80170:	611a      	str	r2, [r3, #16]
   80172:	2180      	movs	r1, #128	; 0x80
   80174:	6059      	str	r1, [r3, #4]
   80176:	601a      	str	r2, [r3, #0]
   80178:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   8017c:	625a      	str	r2, [r3, #36]	; 0x24
   8017e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   80180:	641a      	str	r2, [r3, #64]	; 0x40
   80182:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   80184:	f042 0210 	orr.w	r2, r2, #16
   80188:	641a      	str	r2, [r3, #64]	; 0x40
   8018a:	220f      	movs	r2, #15
   8018c:	645a      	str	r2, [r3, #68]	; 0x44
   8018e:	4770      	bx	lr
   80190:	400e0600 	.word	0x400e0600
   80194:	e000e100 	.word	0xe000e100
   80198:	400c0000 	.word	0x400c0000

0008019c <get_total_goals>:
uint8_t TOTAL_GOALS = 0;
static uint32_t last_goal_time = 0;

uint8_t get_total_goals(){
	 return TOTAL_GOALS;
 }
   8019c:	4b01      	ldr	r3, [pc, #4]	; (801a4 <get_total_goals+0x8>)
   8019e:	7818      	ldrb	r0, [r3, #0]
   801a0:	4770      	bx	lr
   801a2:	bf00      	nop
   801a4:	20000474 	.word	0x20000474

000801a8 <get_goal_flag>:

uint8_t get_goal_flag(){
	 return goal_flag;
 }
   801a8:	4b01      	ldr	r3, [pc, #4]	; (801b0 <get_goal_flag+0x8>)
   801aa:	7858      	ldrb	r0, [r3, #1]
   801ac:	4770      	bx	lr
   801ae:	bf00      	nop
   801b0:	20000474 	.word	0x20000474

000801b4 <reset_goal_flag>:

 void reset_goal_flag(){
	 goal_flag = 0;
   801b4:	2200      	movs	r2, #0
   801b6:	4b01      	ldr	r3, [pc, #4]	; (801bc <reset_goal_flag+0x8>)
   801b8:	705a      	strb	r2, [r3, #1]
   801ba:	4770      	bx	lr
   801bc:	20000474 	.word	0x20000474

000801c0 <ADC_Handler>:
 }

void ADC_Handler( void ){
   801c0:	b510      	push	{r4, lr}
	//printf("Aa");
	if(last_goal_time + 800 < return_milliseconds()){
   801c2:	4b0e      	ldr	r3, [pc, #56]	; (801fc <ADC_Handler+0x3c>)
   801c4:	685c      	ldr	r4, [r3, #4]
   801c6:	f504 7448 	add.w	r4, r4, #800	; 0x320
   801ca:	4b0d      	ldr	r3, [pc, #52]	; (80200 <ADC_Handler+0x40>)
   801cc:	4798      	blx	r3
   801ce:	4284      	cmp	r4, r0
   801d0:	d309      	bcc.n	801e6 <ADC_Handler+0x26>
		TOTAL_GOALS += 1;
		last_goal_time = return_milliseconds();
		goal_flag = 1;
	}

	change_motor_speed_using_paadrag(0);
   801d2:	2000      	movs	r0, #0
   801d4:	4b0b      	ldr	r3, [pc, #44]	; (80204 <ADC_Handler+0x44>)
   801d6:	4798      	blx	r3

	int i = ADC->ADC_ISR;
   801d8:	4b0b      	ldr	r3, [pc, #44]	; (80208 <ADC_Handler+0x48>)
   801da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   801dc:	2220      	movs	r2, #32
   801de:	4b0b      	ldr	r3, [pc, #44]	; (8020c <ADC_Handler+0x4c>)
   801e0:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   801e4:	bd10      	pop	{r4, pc}
		TOTAL_GOALS += 1;
   801e6:	4c05      	ldr	r4, [pc, #20]	; (801fc <ADC_Handler+0x3c>)
   801e8:	7823      	ldrb	r3, [r4, #0]
   801ea:	3301      	adds	r3, #1
   801ec:	7023      	strb	r3, [r4, #0]
		last_goal_time = return_milliseconds();
   801ee:	4b04      	ldr	r3, [pc, #16]	; (80200 <ADC_Handler+0x40>)
   801f0:	4798      	blx	r3
   801f2:	6060      	str	r0, [r4, #4]
		goal_flag = 1;
   801f4:	2301      	movs	r3, #1
   801f6:	7063      	strb	r3, [r4, #1]
   801f8:	e7eb      	b.n	801d2 <ADC_Handler+0x12>
   801fa:	bf00      	nop
   801fc:	20000474 	.word	0x20000474
   80200:	00080edd 	.word	0x00080edd
   80204:	00080831 	.word	0x00080831
   80208:	400c0000 	.word	0x400c0000
   8020c:	e000e100 	.word	0xe000e100

00080210 <can_init>:
   80210:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   80214:	1855      	adds	r5, r2, r1
   80216:	2908      	cmp	r1, #8
   80218:	bf98      	it	ls
   8021a:	2a08      	cmpls	r2, #8
   8021c:	d864      	bhi.n	802e8 <can_init+0xd8>
   8021e:	460e      	mov	r6, r1
   80220:	2d08      	cmp	r5, #8
   80222:	dc61      	bgt.n	802e8 <can_init+0xd8>
   80224:	4a32      	ldr	r2, [pc, #200]	; (802f0 <can_init+0xe0>)
   80226:	6813      	ldr	r3, [r2, #0]
   80228:	f023 0301 	bic.w	r3, r3, #1
   8022c:	6013      	str	r3, [r2, #0]
   8022e:	6913      	ldr	r3, [r2, #16]
   80230:	4b30      	ldr	r3, [pc, #192]	; (802f4 <can_init+0xe4>)
   80232:	f44f 7440 	mov.w	r4, #768	; 0x300
   80236:	645c      	str	r4, [r3, #68]	; 0x44
   80238:	6f1c      	ldr	r4, [r3, #112]	; 0x70
   8023a:	f024 0403 	bic.w	r4, r4, #3
   8023e:	671c      	str	r4, [r3, #112]	; 0x70
   80240:	2403      	movs	r4, #3
   80242:	605c      	str	r4, [r3, #4]
   80244:	665c      	str	r4, [r3, #100]	; 0x64
   80246:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   8024a:	4c2b      	ldr	r4, [pc, #172]	; (802f8 <can_init+0xe8>)
   8024c:	f8c3 410c 	str.w	r4, [r3, #268]	; 0x10c
   80250:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
   80254:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
   80258:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
   8025c:	6150      	str	r0, [r2, #20]
   8025e:	42a9      	cmp	r1, r5
   80260:	dc40      	bgt.n	802e4 <can_init+0xd4>
   80262:	460a      	mov	r2, r1
   80264:	2400      	movs	r4, #0
   80266:	46a1      	mov	r9, r4
   80268:	f8df 8084 	ldr.w	r8, [pc, #132]	; 802f0 <can_init+0xe0>
   8026c:	f04f 5c00 	mov.w	ip, #536870912	; 0x20000000
   80270:	f04f 7e80 	mov.w	lr, #16777216	; 0x1000000
   80274:	2701      	movs	r7, #1
   80276:	0153      	lsls	r3, r2, #5
   80278:	f103 2040 	add.w	r0, r3, #1073758208	; 0x40004000
   8027c:	f500 2030 	add.w	r0, r0, #720896	; 0xb0000
   80280:	f8c0 9204 	str.w	r9, [r0, #516]	; 0x204
   80284:	4443      	add	r3, r8
   80286:	f8c3 c208 	str.w	ip, [r3, #520]	; 0x208
   8028a:	f8c0 e200 	str.w	lr, [r0, #512]	; 0x200
   8028e:	f8d3 021c 	ldr.w	r0, [r3, #540]	; 0x21c
   80292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   80296:	f8c3 021c 	str.w	r0, [r3, #540]	; 0x21c
   8029a:	fa07 f302 	lsl.w	r3, r7, r2
   8029e:	431c      	orrs	r4, r3
   802a0:	3201      	adds	r2, #1
   802a2:	4295      	cmp	r5, r2
   802a4:	dae7      	bge.n	80276 <can_init+0x66>
   802a6:	b181      	cbz	r1, 802ca <can_init+0xba>
   802a8:	2300      	movs	r3, #0
   802aa:	4911      	ldr	r1, [pc, #68]	; (802f0 <can_init+0xe0>)
   802ac:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
   802b0:	f04f 7040 	mov.w	r0, #50331648	; 0x3000000
   802b4:	eb01 1243 	add.w	r2, r1, r3, lsl #5
   802b8:	f8c2 5208 	str.w	r5, [r2, #520]	; 0x208
   802bc:	f103 0210 	add.w	r2, r3, #16
   802c0:	0152      	lsls	r2, r2, #5
   802c2:	5088      	str	r0, [r1, r2]
   802c4:	3301      	adds	r3, #1
   802c6:	429e      	cmp	r6, r3
   802c8:	d1f4      	bne.n	802b4 <can_init+0xa4>
   802ca:	4b09      	ldr	r3, [pc, #36]	; (802f0 <can_init+0xe0>)
   802cc:	605c      	str	r4, [r3, #4]
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   802ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
   802d2:	4a0a      	ldr	r2, [pc, #40]	; (802fc <can_init+0xec>)
   802d4:	6051      	str	r1, [r2, #4]
   802d6:	681a      	ldr	r2, [r3, #0]
   802d8:	f042 0201 	orr.w	r2, r2, #1
   802dc:	601a      	str	r2, [r3, #0]
   802de:	2000      	movs	r0, #0
   802e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   802e4:	2400      	movs	r4, #0
   802e6:	e7de      	b.n	802a6 <can_init+0x96>
   802e8:	2001      	movs	r0, #1
   802ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   802ee:	bf00      	nop
   802f0:	400b4000 	.word	0x400b4000
   802f4:	400e0e00 	.word	0x400e0e00
   802f8:	1000102b 	.word	0x1000102b
   802fc:	e000e100 	.word	0xe000e100

00080300 <can_init_def_tx_rx_mb>:
   80300:	b508      	push	{r3, lr}
   80302:	2202      	movs	r2, #2
   80304:	2101      	movs	r1, #1
   80306:	4b01      	ldr	r3, [pc, #4]	; (8030c <can_init_def_tx_rx_mb+0xc>)
   80308:	4798      	blx	r3
   8030a:	bd08      	pop	{r3, pc}
   8030c:	00080211 	.word	0x00080211

00080310 <can_send>:
   80310:	014b      	lsls	r3, r1, #5
   80312:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   80316:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   8031a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   8031e:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   80322:	d036      	beq.n	80392 <can_send+0x82>
   80324:	8803      	ldrh	r3, [r0, #0]
   80326:	4a1c      	ldr	r2, [pc, #112]	; (80398 <can_send+0x88>)
   80328:	ea02 4283 	and.w	r2, r2, r3, lsl #18
   8032c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   80330:	014b      	lsls	r3, r1, #5
   80332:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   80336:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   8033a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
   8033e:	7883      	ldrb	r3, [r0, #2]
   80340:	2b07      	cmp	r3, #7
   80342:	bf84      	itt	hi
   80344:	2307      	movhi	r3, #7
   80346:	7083      	strbhi	r3, [r0, #2]
   80348:	7982      	ldrb	r2, [r0, #6]
   8034a:	7943      	ldrb	r3, [r0, #5]
   8034c:	041b      	lsls	r3, r3, #16
   8034e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   80352:	78c2      	ldrb	r2, [r0, #3]
   80354:	4313      	orrs	r3, r2
   80356:	7902      	ldrb	r2, [r0, #4]
   80358:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   8035c:	0149      	lsls	r1, r1, #5
   8035e:	f101 2140 	add.w	r1, r1, #1073758208	; 0x40004000
   80362:	f501 2130 	add.w	r1, r1, #720896	; 0xb0000
   80366:	f8c1 3214 	str.w	r3, [r1, #532]	; 0x214
   8036a:	7a82      	ldrb	r2, [r0, #10]
   8036c:	7a43      	ldrb	r3, [r0, #9]
   8036e:	041b      	lsls	r3, r3, #16
   80370:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   80374:	79c2      	ldrb	r2, [r0, #7]
   80376:	4313      	orrs	r3, r2
   80378:	7a02      	ldrb	r2, [r0, #8]
   8037a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   8037e:	f8c1 3218 	str.w	r3, [r1, #536]	; 0x218
   80382:	7883      	ldrb	r3, [r0, #2]
   80384:	041b      	lsls	r3, r3, #16
   80386:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   8038a:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c
   8038e:	2000      	movs	r0, #0
   80390:	4770      	bx	lr
   80392:	2001      	movs	r0, #1
   80394:	4770      	bx	lr
   80396:	bf00      	nop
   80398:	1ffc0000 	.word	0x1ffc0000

0008039c <can_receive>:
   8039c:	014b      	lsls	r3, r1, #5
   8039e:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   803a2:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   803a6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   803aa:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   803ae:	d033      	beq.n	80418 <can_receive+0x7c>
   803b0:	b430      	push	{r4, r5}
   803b2:	014b      	lsls	r3, r1, #5
   803b4:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   803b8:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   803bc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
   803c0:	f8d3 4218 	ldr.w	r4, [r3, #536]	; 0x218
   803c4:	f8d3 5208 	ldr.w	r5, [r3, #520]	; 0x208
   803c8:	f3c5 458a 	ubfx	r5, r5, #18, #11
   803cc:	8005      	strh	r5, [r0, #0]
   803ce:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   803d2:	f3c3 4303 	ubfx	r3, r3, #16, #4
   803d6:	7083      	strb	r3, [r0, #2]
   803d8:	461d      	mov	r5, r3
   803da:	b15b      	cbz	r3, 803f4 <can_receive+0x58>
   803dc:	3003      	adds	r0, #3
   803de:	2300      	movs	r3, #0
   803e0:	2b03      	cmp	r3, #3
   803e2:	bfd9      	ittee	le
   803e4:	7002      	strble	r2, [r0, #0]
   803e6:	0a12      	lsrle	r2, r2, #8
   803e8:	7004      	strbgt	r4, [r0, #0]
   803ea:	0a24      	lsrgt	r4, r4, #8
   803ec:	3301      	adds	r3, #1
   803ee:	3001      	adds	r0, #1
   803f0:	42ab      	cmp	r3, r5
   803f2:	d1f5      	bne.n	803e0 <can_receive+0x44>
   803f4:	4b09      	ldr	r3, [pc, #36]	; (8041c <can_receive+0x80>)
   803f6:	f101 0210 	add.w	r2, r1, #16
   803fa:	0152      	lsls	r2, r2, #5
   803fc:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   80400:	5098      	str	r0, [r3, r2]
   80402:	eb03 1141 	add.w	r1, r3, r1, lsl #5
   80406:	f8d1 321c 	ldr.w	r3, [r1, #540]	; 0x21c
   8040a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   8040e:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c
   80412:	2000      	movs	r0, #0
   80414:	bc30      	pop	{r4, r5}
   80416:	4770      	bx	lr
   80418:	2001      	movs	r0, #1
   8041a:	4770      	bx	lr
   8041c:	400b4000 	.word	0x400b4000

00080420 <CAN0_Handler>:
 * \param void
 *
 * \retval 
 */
void CAN0_Handler( void )
{
   80420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80424:	b084      	sub	sp, #16
	if(DEBUG_INTERRUPT){}/*printf("CAN0 interrupt\n\r")*/;
	char can_sr = CAN0->CAN_SR; 
   80426:	4b43      	ldr	r3, [pc, #268]	; (80534 <CAN0_Handler+0x114>)
   80428:	691c      	ldr	r4, [r3, #16]
	
	//RX interrupt
	if(can_sr & (CAN_SR_MB1 | CAN_SR_MB2) )//Only mailbox 1 and 2 specified for receiving
   8042a:	f014 0f06 	tst.w	r4, #6
   8042e:	d039      	beq.n	804a4 <CAN0_Handler+0x84>
	{
		CAN_MESSAGE message;
		if(can_sr & CAN_SR_MB1)  //Mailbox 1 event
   80430:	f014 0f02 	tst.w	r4, #2
   80434:	d144      	bne.n	804c0 <CAN0_Handler+0xa0>
		{
			can_receive(&message, 1);

		}
		else if(can_sr & CAN_SR_MB2) //Mailbox 2 event
   80436:	f014 0f04 	tst.w	r4, #4
   8043a:	d046      	beq.n	804ca <CAN0_Handler+0xaa>
		
		{
			can_receive(&message, 2);
   8043c:	2102      	movs	r1, #2
   8043e:	a801      	add	r0, sp, #4
   80440:	4b3d      	ldr	r3, [pc, #244]	; (80538 <CAN0_Handler+0x118>)
   80442:	4798      	blx	r3
		else
		{
			printf("CAN0 message arrived in non-used mailbox\n\r");
		}
		
		if(message.id < 0x00ff && message.id > 0x000f){
   80444:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   80448:	f1a1 0310 	sub.w	r3, r1, #16
   8044c:	b29b      	uxth	r3, r3
   8044e:	2bee      	cmp	r3, #238	; 0xee
   80450:	d83f      	bhi.n	804d2 <CAN0_Handler+0xb2>
			//interpret_joystick
/*
			printf("Joystick %d \n\r", message.id);
			printf("Joystick %d \n\r", message.data[5]);
*/
			joystick.x_val = (message.data[3] == 0x11) ? message.data[0] : message.data[0]*-1;
   80452:	f89d 300a 	ldrb.w	r3, [sp, #10]
   80456:	2b11      	cmp	r3, #17
   80458:	bf0f      	iteee	eq
   8045a:	f99d 3007 	ldrsbeq.w	r3, [sp, #7]
   8045e:	f89d 3007 	ldrbne.w	r3, [sp, #7]
   80462:	425b      	negne	r3, r3
   80464:	b25b      	sxtbne	r3, r3
   80466:	4a35      	ldr	r2, [pc, #212]	; (8053c <CAN0_Handler+0x11c>)
   80468:	7013      	strb	r3, [r2, #0]
			joystick.y_val = (message.data[4] == 0x11) ? message.data[1] : message.data[1]*-1;
   8046a:	f89d 300b 	ldrb.w	r3, [sp, #11]
   8046e:	2b11      	cmp	r3, #17
   80470:	bf0f      	iteee	eq
   80472:	f99d 2008 	ldrsbeq.w	r2, [sp, #8]
   80476:	f89d 2008 	ldrbne.w	r2, [sp, #8]
   8047a:	4252      	negne	r2, r2
   8047c:	b252      	sxtbne	r2, r2
   8047e:	4b2f      	ldr	r3, [pc, #188]	; (8053c <CAN0_Handler+0x11c>)
   80480:	705a      	strb	r2, [r3, #1]
			joystick.butt_pressed = message.data[2];
   80482:	f89d 2009 	ldrb.w	r2, [sp, #9]
   80486:	709a      	strb	r2, [r3, #2]
			joystick.left_val = message.data[5];
   80488:	f89d 200c 	ldrb.w	r2, [sp, #12]
   8048c:	70da      	strb	r2, [r3, #3]
			joystick.right_val = message.data[6];
   8048e:	f89d 200d 	ldrb.w	r2, [sp, #13]
   80492:	711a      	strb	r2, [r3, #4]
			joystick.left_button = message.data[7] & 0b00000010;
   80494:	f99d 200e 	ldrsb.w	r2, [sp, #14]
   80498:	f002 0102 	and.w	r1, r2, #2
   8049c:	7159      	strb	r1, [r3, #5]
			joystick.right_button = message.data[7] & 0b00000001;
   8049e:	f002 0201 	and.w	r2, r2, #1
   804a2:	719a      	strb	r2, [r3, #6]
			if(DEBUG_INTERRUPT)printf("\n\r");
		}
		
	}
	
	if(can_sr & CAN_SR_MB0)
   804a4:	f014 0f01 	tst.w	r4, #1
   804a8:	d002      	beq.n	804b0 <CAN0_Handler+0x90>
	{
		/*if(DEBUG_INTERRUPT) printf("CAN0 MB0 ready to send \n\r");*/
		
	//Disable interrupt
		CAN0->CAN_IDR = CAN_IER_MB0;
   804aa:	2201      	movs	r2, #1
   804ac:	4b21      	ldr	r3, [pc, #132]	; (80534 <CAN0_Handler+0x114>)
   804ae:	609a      	str	r2, [r3, #8]
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   804b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
   804b4:	4b22      	ldr	r3, [pc, #136]	; (80540 <CAN0_Handler+0x120>)
   804b6:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184

	}
	
	NVIC_ClearPendingIRQ(ID_CAN0);
	//sei();*/
}
   804ba:	b004      	add	sp, #16
   804bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			can_receive(&message, 1);
   804c0:	2101      	movs	r1, #1
   804c2:	a801      	add	r0, sp, #4
   804c4:	4b1c      	ldr	r3, [pc, #112]	; (80538 <CAN0_Handler+0x118>)
   804c6:	4798      	blx	r3
   804c8:	e7bc      	b.n	80444 <CAN0_Handler+0x24>
			printf("CAN0 message arrived in non-used mailbox\n\r");
   804ca:	481e      	ldr	r0, [pc, #120]	; (80544 <CAN0_Handler+0x124>)
   804cc:	4b1e      	ldr	r3, [pc, #120]	; (80548 <CAN0_Handler+0x128>)
   804ce:	4798      	blx	r3
   804d0:	e7b8      	b.n	80444 <CAN0_Handler+0x24>
		else if(message.id == 0x6){
   804d2:	2906      	cmp	r1, #6
   804d4:	d0e6      	beq.n	804a4 <CAN0_Handler+0x84>
		else if(message.id == 0x4){//start signal
   804d6:	2904      	cmp	r1, #4
   804d8:	d01e      	beq.n	80518 <CAN0_Handler+0xf8>
		else if(message.id == 0x3){//stop signal
   804da:	2903      	cmp	r1, #3
   804dc:	d021      	beq.n	80522 <CAN0_Handler+0x102>
			if(DEBUG_INTERRUPT)printf("message id: %d\n\r", message.id);
   804de:	481b      	ldr	r0, [pc, #108]	; (8054c <CAN0_Handler+0x12c>)
   804e0:	4d19      	ldr	r5, [pc, #100]	; (80548 <CAN0_Handler+0x128>)
   804e2:	47a8      	blx	r5
			if(DEBUG_INTERRUPT)printf("message data length: %d\n\r", message.data_length);
   804e4:	f89d 1006 	ldrb.w	r1, [sp, #6]
   804e8:	4819      	ldr	r0, [pc, #100]	; (80550 <CAN0_Handler+0x130>)
   804ea:	47a8      	blx	r5
			for (int i = 0; i < message.data_length; i++)
   804ec:	f89d 3006 	ldrb.w	r3, [sp, #6]
   804f0:	b173      	cbz	r3, 80510 <CAN0_Handler+0xf0>
   804f2:	f10d 0607 	add.w	r6, sp, #7
   804f6:	2500      	movs	r5, #0
				if(DEBUG_INTERRUPT)printf("%d ", message.data[i]);
   804f8:	f8df 8068 	ldr.w	r8, [pc, #104]	; 80564 <CAN0_Handler+0x144>
   804fc:	4f12      	ldr	r7, [pc, #72]	; (80548 <CAN0_Handler+0x128>)
   804fe:	f816 1b01 	ldrb.w	r1, [r6], #1
   80502:	4640      	mov	r0, r8
   80504:	47b8      	blx	r7
			for (int i = 0; i < message.data_length; i++)
   80506:	3501      	adds	r5, #1
   80508:	f89d 3006 	ldrb.w	r3, [sp, #6]
   8050c:	42ab      	cmp	r3, r5
   8050e:	dcf6      	bgt.n	804fe <CAN0_Handler+0xde>
			if(DEBUG_INTERRUPT)printf("\n\r");
   80510:	4810      	ldr	r0, [pc, #64]	; (80554 <CAN0_Handler+0x134>)
   80512:	4b0d      	ldr	r3, [pc, #52]	; (80548 <CAN0_Handler+0x128>)
   80514:	4798      	blx	r3
   80516:	e7c5      	b.n	804a4 <CAN0_Handler+0x84>
			starttime = return_milliseconds();
   80518:	4b0f      	ldr	r3, [pc, #60]	; (80558 <CAN0_Handler+0x138>)
   8051a:	4798      	blx	r3
   8051c:	4b0f      	ldr	r3, [pc, #60]	; (8055c <CAN0_Handler+0x13c>)
   8051e:	8018      	strh	r0, [r3, #0]
   80520:	e7c0      	b.n	804a4 <CAN0_Handler+0x84>
			send_reaction_time_to_node_1(&message, return_milliseconds()-starttime);
   80522:	4b0d      	ldr	r3, [pc, #52]	; (80558 <CAN0_Handler+0x138>)
   80524:	4798      	blx	r3
   80526:	4b0d      	ldr	r3, [pc, #52]	; (8055c <CAN0_Handler+0x13c>)
   80528:	8819      	ldrh	r1, [r3, #0]
   8052a:	1a41      	subs	r1, r0, r1
   8052c:	a801      	add	r0, sp, #4
   8052e:	4b0c      	ldr	r3, [pc, #48]	; (80560 <CAN0_Handler+0x140>)
   80530:	4798      	blx	r3
   80532:	e7b7      	b.n	804a4 <CAN0_Handler+0x84>
   80534:	400b4000 	.word	0x400b4000
   80538:	0008039d 	.word	0x0008039d
   8053c:	200004b4 	.word	0x200004b4
   80540:	e000e100 	.word	0xe000e100
   80544:	00081bb4 	.word	0x00081bb4
   80548:	00080e95 	.word	0x00080e95
   8054c:	00081be0 	.word	0x00081be0
   80550:	00081bf4 	.word	0x00081bf4
   80554:	00081bdc 	.word	0x00081bdc
   80558:	00080edd 	.word	0x00080edd
   8055c:	2000047c 	.word	0x2000047c
   80560:	00080779 	.word	0x00080779
   80564:	00081c10 	.word	0x00081c10

00080568 <dac_init>:
   80568:	2240      	movs	r2, #64	; 0x40
   8056a:	4b09      	ldr	r3, [pc, #36]	; (80590 <dac_init+0x28>)
   8056c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   80570:	f5a3 33c3 	sub.w	r3, r3, #99840	; 0x18600
   80574:	685a      	ldr	r2, [r3, #4]
   80576:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
   8057a:	605a      	str	r2, [r3, #4]
   8057c:	685a      	ldr	r2, [r3, #4]
   8057e:	f022 0201 	bic.w	r2, r2, #1
   80582:	605a      	str	r2, [r3, #4]
   80584:	2202      	movs	r2, #2
   80586:	611a      	str	r2, [r3, #16]
   80588:	f240 52ff 	movw	r2, #1535	; 0x5ff
   8058c:	621a      	str	r2, [r3, #32]
   8058e:	4770      	bx	lr
   80590:	400e0600 	.word	0x400e0600

00080594 <Dummy_Handler>:
   80594:	e7fe      	b.n	80594 <Dummy_Handler>
	...

00080598 <Reset_Handler>:
   80598:	b508      	push	{r3, lr}
   8059a:	4b18      	ldr	r3, [pc, #96]	; (805fc <Reset_Handler+0x64>)
   8059c:	4a18      	ldr	r2, [pc, #96]	; (80600 <Reset_Handler+0x68>)
   8059e:	429a      	cmp	r2, r3
   805a0:	d010      	beq.n	805c4 <Reset_Handler+0x2c>
   805a2:	4b18      	ldr	r3, [pc, #96]	; (80604 <Reset_Handler+0x6c>)
   805a4:	4a15      	ldr	r2, [pc, #84]	; (805fc <Reset_Handler+0x64>)
   805a6:	429a      	cmp	r2, r3
   805a8:	d20c      	bcs.n	805c4 <Reset_Handler+0x2c>
   805aa:	3b01      	subs	r3, #1
   805ac:	1a9b      	subs	r3, r3, r2
   805ae:	f023 0303 	bic.w	r3, r3, #3
   805b2:	3304      	adds	r3, #4
   805b4:	4413      	add	r3, r2
   805b6:	4912      	ldr	r1, [pc, #72]	; (80600 <Reset_Handler+0x68>)
   805b8:	f851 0b04 	ldr.w	r0, [r1], #4
   805bc:	f842 0b04 	str.w	r0, [r2], #4
   805c0:	429a      	cmp	r2, r3
   805c2:	d1f9      	bne.n	805b8 <Reset_Handler+0x20>
   805c4:	4b10      	ldr	r3, [pc, #64]	; (80608 <Reset_Handler+0x70>)
   805c6:	4a11      	ldr	r2, [pc, #68]	; (8060c <Reset_Handler+0x74>)
   805c8:	429a      	cmp	r2, r3
   805ca:	d20a      	bcs.n	805e2 <Reset_Handler+0x4a>
   805cc:	3b01      	subs	r3, #1
   805ce:	1a9b      	subs	r3, r3, r2
   805d0:	f023 0303 	bic.w	r3, r3, #3
   805d4:	3304      	adds	r3, #4
   805d6:	4413      	add	r3, r2
   805d8:	2100      	movs	r1, #0
   805da:	f842 1b04 	str.w	r1, [r2], #4
   805de:	4293      	cmp	r3, r2
   805e0:	d1fb      	bne.n	805da <Reset_Handler+0x42>
   805e2:	4b0b      	ldr	r3, [pc, #44]	; (80610 <Reset_Handler+0x78>)
   805e4:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   805e8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   805ec:	4a09      	ldr	r2, [pc, #36]	; (80614 <Reset_Handler+0x7c>)
   805ee:	6093      	str	r3, [r2, #8]
   805f0:	4b09      	ldr	r3, [pc, #36]	; (80618 <Reset_Handler+0x80>)
   805f2:	4798      	blx	r3
   805f4:	4b09      	ldr	r3, [pc, #36]	; (8061c <Reset_Handler+0x84>)
   805f6:	4798      	blx	r3
   805f8:	e7fe      	b.n	805f8 <Reset_Handler+0x60>
   805fa:	bf00      	nop
   805fc:	20000000 	.word	0x20000000
   80600:	00081ce8 	.word	0x00081ce8
   80604:	20000454 	.word	0x20000454
   80608:	20000524 	.word	0x20000524
   8060c:	20000458 	.word	0x20000458
   80610:	00080000 	.word	0x00080000
   80614:	e000ed00 	.word	0xe000ed00
   80618:	00081a45 	.word	0x00081a45
   8061c:	00080a25 	.word	0x00080a25

00080620 <SystemInit>:
   80620:	f44f 6380 	mov.w	r3, #1024	; 0x400
   80624:	4a20      	ldr	r2, [pc, #128]	; (806a8 <SystemInit+0x88>)
   80626:	6013      	str	r3, [r2, #0]
   80628:	f502 7200 	add.w	r2, r2, #512	; 0x200
   8062c:	6013      	str	r3, [r2, #0]
   8062e:	4b1f      	ldr	r3, [pc, #124]	; (806ac <SystemInit+0x8c>)
   80630:	6a1b      	ldr	r3, [r3, #32]
   80632:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80636:	d107      	bne.n	80648 <SystemInit+0x28>
   80638:	4a1d      	ldr	r2, [pc, #116]	; (806b0 <SystemInit+0x90>)
   8063a:	4b1c      	ldr	r3, [pc, #112]	; (806ac <SystemInit+0x8c>)
   8063c:	621a      	str	r2, [r3, #32]
   8063e:	461a      	mov	r2, r3
   80640:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80642:	f013 0f01 	tst.w	r3, #1
   80646:	d0fb      	beq.n	80640 <SystemInit+0x20>
   80648:	4a1a      	ldr	r2, [pc, #104]	; (806b4 <SystemInit+0x94>)
   8064a:	4b18      	ldr	r3, [pc, #96]	; (806ac <SystemInit+0x8c>)
   8064c:	621a      	str	r2, [r3, #32]
   8064e:	461a      	mov	r2, r3
   80650:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80652:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   80656:	d0fb      	beq.n	80650 <SystemInit+0x30>
   80658:	4a14      	ldr	r2, [pc, #80]	; (806ac <SystemInit+0x8c>)
   8065a:	6b13      	ldr	r3, [r2, #48]	; 0x30
   8065c:	f023 0303 	bic.w	r3, r3, #3
   80660:	f043 0301 	orr.w	r3, r3, #1
   80664:	6313      	str	r3, [r2, #48]	; 0x30
   80666:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80668:	f013 0f08 	tst.w	r3, #8
   8066c:	d0fb      	beq.n	80666 <SystemInit+0x46>
   8066e:	4a12      	ldr	r2, [pc, #72]	; (806b8 <SystemInit+0x98>)
   80670:	4b0e      	ldr	r3, [pc, #56]	; (806ac <SystemInit+0x8c>)
   80672:	629a      	str	r2, [r3, #40]	; 0x28
   80674:	461a      	mov	r2, r3
   80676:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80678:	f013 0f02 	tst.w	r3, #2
   8067c:	d0fb      	beq.n	80676 <SystemInit+0x56>
   8067e:	2211      	movs	r2, #17
   80680:	4b0a      	ldr	r3, [pc, #40]	; (806ac <SystemInit+0x8c>)
   80682:	631a      	str	r2, [r3, #48]	; 0x30
   80684:	461a      	mov	r2, r3
   80686:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80688:	f013 0f08 	tst.w	r3, #8
   8068c:	d0fb      	beq.n	80686 <SystemInit+0x66>
   8068e:	2212      	movs	r2, #18
   80690:	4b06      	ldr	r3, [pc, #24]	; (806ac <SystemInit+0x8c>)
   80692:	631a      	str	r2, [r3, #48]	; 0x30
   80694:	461a      	mov	r2, r3
   80696:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80698:	f013 0f08 	tst.w	r3, #8
   8069c:	d0fb      	beq.n	80696 <SystemInit+0x76>
   8069e:	4a07      	ldr	r2, [pc, #28]	; (806bc <SystemInit+0x9c>)
   806a0:	4b07      	ldr	r3, [pc, #28]	; (806c0 <SystemInit+0xa0>)
   806a2:	601a      	str	r2, [r3, #0]
   806a4:	4770      	bx	lr
   806a6:	bf00      	nop
   806a8:	400e0a00 	.word	0x400e0a00
   806ac:	400e0600 	.word	0x400e0600
   806b0:	00370809 	.word	0x00370809
   806b4:	01370809 	.word	0x01370809
   806b8:	200d3f01 	.word	0x200d3f01
   806bc:	0501bd00 	.word	0x0501bd00
   806c0:	20000000 	.word	0x20000000

000806c4 <send_time_to_node_1>:
#include "feedback.h"
#include "can_controller.h"
#include "timer.h"

void send_time_to_node_1(CAN_MESSAGE* msgToSend){
   806c4:	b538      	push	{r3, r4, r5, lr}
   806c6:	4604      	mov	r4, r0
    //Somewhat random test that fails 75% of the time to avoid spamming the CAN bus
	if(!(return_milliseconds()%4)){ 
   806c8:	4b0e      	ldr	r3, [pc, #56]	; (80704 <send_time_to_node_1+0x40>)
   806ca:	4798      	blx	r3
   806cc:	f010 0f03 	tst.w	r0, #3
   806d0:	d000      	beq.n	806d4 <send_time_to_node_1+0x10>
   806d2:	bd38      	pop	{r3, r4, r5, pc}
        msgToSend->data_length = 2;
   806d4:	2302      	movs	r3, #2
   806d6:	70a3      	strb	r3, [r4, #2]
        //High ID  since this is a non-urgent message
		uint16_t temp = 0x8;
        msgToSend->id = temp;
   806d8:	2308      	movs	r3, #8
   806da:	8023      	strh	r3, [r4, #0]
        msgToSend->data[0] = (uint8_t) (return_seconds() & 0x00FF);
   806dc:	4d0a      	ldr	r5, [pc, #40]	; (80708 <send_time_to_node_1+0x44>)
   806de:	47a8      	blx	r5
   806e0:	70e0      	strb	r0, [r4, #3]
        msgToSend->data[1] = (uint8_t) (return_seconds() & 0xFF00);
   806e2:	47a8      	blx	r5
   806e4:	2100      	movs	r1, #0
   806e6:	7121      	strb	r1, [r4, #4]
		can_send(msgToSend, 0);
   806e8:	4620      	mov	r0, r4
   806ea:	4b08      	ldr	r3, [pc, #32]	; (8070c <send_time_to_node_1+0x48>)
   806ec:	4798      	blx	r3
		printf("message id: %x \r\n", msgToSend->id);
   806ee:	8821      	ldrh	r1, [r4, #0]
   806f0:	4807      	ldr	r0, [pc, #28]	; (80710 <send_time_to_node_1+0x4c>)
   806f2:	4d08      	ldr	r5, [pc, #32]	; (80714 <send_time_to_node_1+0x50>)
   806f4:	47a8      	blx	r5
		printf("message length: %x \r\n", msgToSend->data_length);
   806f6:	78a1      	ldrb	r1, [r4, #2]
   806f8:	4807      	ldr	r0, [pc, #28]	; (80718 <send_time_to_node_1+0x54>)
   806fa:	47a8      	blx	r5
		printf("message data: %d \r\n", msgToSend->data[0]);
   806fc:	78e1      	ldrb	r1, [r4, #3]
   806fe:	4807      	ldr	r0, [pc, #28]	; (8071c <send_time_to_node_1+0x58>)
   80700:	47a8      	blx	r5
	}
}
   80702:	e7e6      	b.n	806d2 <send_time_to_node_1+0xe>
   80704:	00080edd 	.word	0x00080edd
   80708:	00080ee9 	.word	0x00080ee9
   8070c:	00080311 	.word	0x00080311
   80710:	00081c14 	.word	0x00081c14
   80714:	00080e95 	.word	0x00080e95
   80718:	00081c28 	.word	0x00081c28
   8071c:	00081c40 	.word	0x00081c40

00080720 <send_goal_to_node_1>:

void send_goal_to_node_1(CAN_MESSAGE* msgToSend){
   80720:	b538      	push	{r3, r4, r5, lr}
   80722:	4604      	mov	r4, r0
    msgToSend->data_length = 2;
   80724:	2302      	movs	r3, #2
   80726:	7083      	strb	r3, [r0, #2]
    //Low ID  since this is an urgent message
    msgToSend->id = 0x1;    
   80728:	2301      	movs	r3, #1
   8072a:	8003      	strh	r3, [r0, #0]
    msgToSend->data[0] = (uint8_t) (return_seconds() & 0x00FF);
   8072c:	4d05      	ldr	r5, [pc, #20]	; (80744 <send_goal_to_node_1+0x24>)
   8072e:	47a8      	blx	r5
   80730:	70e0      	strb	r0, [r4, #3]
    msgToSend->data[1] = (uint8_t) ((return_seconds() & 0xFF00) >> 8);
   80732:	47a8      	blx	r5
   80734:	1200      	asrs	r0, r0, #8
   80736:	7120      	strb	r0, [r4, #4]
	can_send(msgToSend, 0);
   80738:	2100      	movs	r1, #0
   8073a:	4620      	mov	r0, r4
   8073c:	4b02      	ldr	r3, [pc, #8]	; (80748 <send_goal_to_node_1+0x28>)
   8073e:	4798      	blx	r3
   80740:	bd38      	pop	{r3, r4, r5, pc}
   80742:	bf00      	nop
   80744:	00080ee9 	.word	0x00080ee9
   80748:	00080311 	.word	0x00080311

0008074c <send_motor_info_to_node_1>:
}

void send_motor_info_to_node_1(CAN_MESSAGE* msgToSend, uint8_t y_pos, uint8_t solenoide){
   8074c:	b510      	push	{r4, lr}
   8074e:	4604      	mov	r4, r0
    msgToSend->data_length = 2;
   80750:	2302      	movs	r3, #2
   80752:	7083      	strb	r3, [r0, #2]
	uint16_t temp = 0x4;
    msgToSend->id = temp;
   80754:	2304      	movs	r3, #4
   80756:	8003      	strh	r3, [r0, #0]
    msgToSend->data[0] = y_pos;
   80758:	70c1      	strb	r1, [r0, #3]
    msgToSend->data[1] = solenoide;
   8075a:	7102      	strb	r2, [r0, #4]
	can_send(msgToSend, 0);
   8075c:	2100      	movs	r1, #0
   8075e:	4b03      	ldr	r3, [pc, #12]	; (8076c <send_motor_info_to_node_1+0x20>)
   80760:	4798      	blx	r3
	printf("message length: %x \r\n", msgToSend->data_length);
   80762:	78a1      	ldrb	r1, [r4, #2]
   80764:	4802      	ldr	r0, [pc, #8]	; (80770 <send_motor_info_to_node_1+0x24>)
   80766:	4b03      	ldr	r3, [pc, #12]	; (80774 <send_motor_info_to_node_1+0x28>)
   80768:	4798      	blx	r3
   8076a:	bd10      	pop	{r4, pc}
   8076c:	00080311 	.word	0x00080311
   80770:	00081c28 	.word	0x00081c28
   80774:	00080e95 	.word	0x00080e95

00080778 <send_reaction_time_to_node_1>:
}

void send_reaction_time_to_node_1(CAN_MESSAGE* msgToSend, uint16_t ms){
   80778:	b508      	push	{r3, lr}
    msgToSend->data_length = 2;
   8077a:	2202      	movs	r2, #2
   8077c:	7082      	strb	r2, [r0, #2]
    //Low ID  since this is an urgent message
    msgToSend->id = 0x2;    
   8077e:	8002      	strh	r2, [r0, #0]
    msgToSend->data[0] = (uint8_t) (ms & 0x00FF);
   80780:	70c1      	strb	r1, [r0, #3]
    msgToSend->data[1] = (uint8_t) ((ms & 0xFF00) >> 8);
   80782:	0a09      	lsrs	r1, r1, #8
   80784:	7101      	strb	r1, [r0, #4]
	can_send(msgToSend, 0);
   80786:	2100      	movs	r1, #0
   80788:	4b01      	ldr	r3, [pc, #4]	; (80790 <send_reaction_time_to_node_1+0x18>)
   8078a:	4798      	blx	r3
   8078c:	bd08      	pop	{r3, pc}
   8078e:	bf00      	nop
   80790:	00080311 	.word	0x00080311

00080794 <get_pi_value>:
	  y_value_pi = val;
  }
 
 uint8_t get_pi_value(){
	 return y_value_pi;
 }
   80794:	4b01      	ldr	r3, [pc, #4]	; (8079c <get_pi_value+0x8>)
   80796:	7818      	ldrb	r0, [r3, #0]
   80798:	4770      	bx	lr
   8079a:	bf00      	nop
   8079c:	20000480 	.word	0x20000480

000807a0 <get_solenoid_status>:

 uint8_t get_solenoid_status(){
	 return solenoide_status;
 }
   807a0:	4b01      	ldr	r3, [pc, #4]	; (807a8 <get_solenoid_status+0x8>)
   807a2:	7858      	ldrb	r0, [r3, #1]
   807a4:	4770      	bx	lr
   807a6:	bf00      	nop
   807a8:	20000480 	.word	0x20000480

000807ac <move_solenoid>:

void reset_solenoid_status(){
	solenoide_status = 0;
 }
 
 void move_solenoid(){
   807ac:	b510      	push	{r4, lr}
	 //printf("joystick.x_val : %d \n\r", joystick.x_val);
	 
	  
	 
	 if(joystick.x_val < 0){
   807ae:	4b17      	ldr	r3, [pc, #92]	; (8080c <move_solenoid+0x60>)
   807b0:	f993 0000 	ldrsb.w	r0, [r3]
   807b4:	2800      	cmp	r0, #0
   807b6:	db0f      	blt.n	807d8 <move_solenoid+0x2c>
		 uint8_t val = 45-abs(joystick.x_val)*0.5; //using 45 instead of 50 since motor is skeiv
		 timer_change_duty(val);
	 }
	 if(joystick.x_val >= 0){
		 uint8_t val2 = 45+joystick.x_val*0.5; //using 45 instead of 50 since motor is skeiv
   807b8:	4b15      	ldr	r3, [pc, #84]	; (80810 <move_solenoid+0x64>)
   807ba:	4798      	blx	r3
   807bc:	2200      	movs	r2, #0
   807be:	4b15      	ldr	r3, [pc, #84]	; (80814 <move_solenoid+0x68>)
   807c0:	4c15      	ldr	r4, [pc, #84]	; (80818 <move_solenoid+0x6c>)
   807c2:	47a0      	blx	r4
   807c4:	2200      	movs	r2, #0
   807c6:	4b15      	ldr	r3, [pc, #84]	; (8081c <move_solenoid+0x70>)
   807c8:	4c15      	ldr	r4, [pc, #84]	; (80820 <move_solenoid+0x74>)
   807ca:	47a0      	blx	r4
   807cc:	4b15      	ldr	r3, [pc, #84]	; (80824 <move_solenoid+0x78>)
   807ce:	4798      	blx	r3
		 timer_change_duty(val2);
   807d0:	b2c0      	uxtb	r0, r0
   807d2:	4b15      	ldr	r3, [pc, #84]	; (80828 <move_solenoid+0x7c>)
   807d4:	4798      	blx	r3
   807d6:	bd10      	pop	{r4, pc}
		 uint8_t val = 45-abs(joystick.x_val)*0.5; //using 45 instead of 50 since motor is skeiv
   807d8:	2800      	cmp	r0, #0
   807da:	bfb8      	it	lt
   807dc:	4240      	neglt	r0, r0
   807de:	4b0c      	ldr	r3, [pc, #48]	; (80810 <move_solenoid+0x64>)
   807e0:	4798      	blx	r3
   807e2:	2200      	movs	r2, #0
   807e4:	4b0b      	ldr	r3, [pc, #44]	; (80814 <move_solenoid+0x68>)
   807e6:	4c0c      	ldr	r4, [pc, #48]	; (80818 <move_solenoid+0x6c>)
   807e8:	47a0      	blx	r4
   807ea:	4602      	mov	r2, r0
   807ec:	460b      	mov	r3, r1
   807ee:	2000      	movs	r0, #0
   807f0:	490a      	ldr	r1, [pc, #40]	; (8081c <move_solenoid+0x70>)
   807f2:	4c0e      	ldr	r4, [pc, #56]	; (8082c <move_solenoid+0x80>)
   807f4:	47a0      	blx	r4
   807f6:	4b0b      	ldr	r3, [pc, #44]	; (80824 <move_solenoid+0x78>)
   807f8:	4798      	blx	r3
		 timer_change_duty(val);
   807fa:	b2c0      	uxtb	r0, r0
   807fc:	4b0a      	ldr	r3, [pc, #40]	; (80828 <move_solenoid+0x7c>)
   807fe:	4798      	blx	r3
	 if(joystick.x_val >= 0){
   80800:	4b02      	ldr	r3, [pc, #8]	; (8080c <move_solenoid+0x60>)
   80802:	f993 0000 	ldrsb.w	r0, [r3]
   80806:	2800      	cmp	r0, #0
   80808:	dbe5      	blt.n	807d6 <move_solenoid+0x2a>
   8080a:	e7d5      	b.n	807b8 <move_solenoid+0xc>
   8080c:	200004b4 	.word	0x200004b4
   80810:	000814c5 	.word	0x000814c5
   80814:	3fe00000 	.word	0x3fe00000
   80818:	00081591 	.word	0x00081591
   8081c:	40468000 	.word	0x40468000
   80820:	0008122d 	.word	0x0008122d
   80824:	00081a05 	.word	0x00081a05
   80828:	00080f71 	.word	0x00080f71
   8082c:	00081229 	.word	0x00081229

00080830 <change_motor_speed_using_paadrag>:
 }

void change_motor_speed_using_paadrag(int paadrag){
	//printf("joystick.y_val : %d \n\r", joystick.y_val);
	
	if(paadrag < 0){
   80830:	2800      	cmp	r0, #0
		PIOD->PIO_CODR = PIO_CODR_P10; //set direction left
   80832:	f44f 6280 	mov.w	r2, #1024	; 0x400
   80836:	4b06      	ldr	r3, [pc, #24]	; (80850 <change_motor_speed_using_paadrag+0x20>)
   80838:	bfb4      	ite	lt
   8083a:	635a      	strlt	r2, [r3, #52]	; 0x34
		uint16_t val = abs(paadrag);
		DACC->DACC_CDR = val;
	}else{
		PIOD->PIO_SODR = PIO_SODR_P10; //set direction right
   8083c:	631a      	strge	r2, [r3, #48]	; 0x30
		uint16_t val2 = abs(paadrag);
   8083e:	2800      	cmp	r0, #0
   80840:	bfb8      	it	lt
   80842:	4240      	neglt	r0, r0
		DACC->DACC_CDR = val2;
   80844:	b280      	uxth	r0, r0
   80846:	f5a3 33ca 	sub.w	r3, r3, #103424	; 0x19400
   8084a:	6218      	str	r0, [r3, #32]
   8084c:	4770      	bx	lr
   8084e:	bf00      	nop
   80850:	400e1400 	.word	0x400e1400

00080854 <motor_box_init>:
	}
}
 

void motor_box_init(){
	PIOD->PIO_PER |= PIO_PER_P10; //PIO Enable Register, PIO Enable //pin32 DIR PD10
   80854:	4b20      	ldr	r3, [pc, #128]	; (808d8 <motor_box_init+0x84>)
   80856:	681a      	ldr	r2, [r3, #0]
   80858:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   8085c:	601a      	str	r2, [r3, #0]
	PIOD->PIO_OER |= PIO_OER_P10; //Output Enable Register, Output Enable //pin32 DIR PD10
   8085e:	691a      	ldr	r2, [r3, #16]
   80860:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   80864:	611a      	str	r2, [r3, #16]
	PIOD->PIO_PER |= PIO_PER_P9; //PIO Enable Register, PIO Enable //pin30 EN PD9
   80866:	681a      	ldr	r2, [r3, #0]
   80868:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   8086c:	601a      	str	r2, [r3, #0]
	PIOD->PIO_OER |= PIO_OER_P9; //Output Enable Register, Output Enable //pin30 EN PD9
   8086e:	691a      	ldr	r2, [r3, #16]
   80870:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   80874:	611a      	str	r2, [r3, #16]
	
	PIOD->PIO_SODR = PIO_SODR_P9; //Set Output Data Register, Set Output Data
   80876:	f44f 7200 	mov.w	r2, #512	; 0x200
   8087a:	631a      	str	r2, [r3, #48]	; 0x30
	PIOD->PIO_CODR = PIO_CODR_P10; //Clear Output Data Register, Set Output Data
   8087c:	f44f 6280 	mov.w	r2, #1024	; 0x400
   80880:	635a      	str	r2, [r3, #52]	; 0x34
	
	PMC->PMC_PCER0 = PMC_PCER0_PID13;
   80882:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   80886:	4a15      	ldr	r2, [pc, #84]	; (808dc <motor_box_init+0x88>)
   80888:	6111      	str	r1, [r2, #16]

	
	//allow counter to start
	PIOD->PIO_SODR |= PIO_SODR_P1; //!RST high
   8088a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   8088c:	f042 0202 	orr.w	r2, r2, #2
   80890:	631a      	str	r2, [r3, #48]	; 0x30
	
	//enable pins for reading encoder
	PIOC->PIO_PER |= PIO_PER_P8; //DO7
   80892:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
   80896:	681a      	ldr	r2, [r3, #0]
   80898:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   8089c:	601a      	str	r2, [r3, #0]
	PIOC->PIO_PER |= PIO_PER_P7; //DO6
   8089e:	681a      	ldr	r2, [r3, #0]
   808a0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   808a4:	601a      	str	r2, [r3, #0]
	PIOC->PIO_PER |= PIO_PER_P6; //DO5
   808a6:	681a      	ldr	r2, [r3, #0]
   808a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   808ac:	601a      	str	r2, [r3, #0]
	PIOC->PIO_PER |= PIO_PER_P5; //DO4
   808ae:	681a      	ldr	r2, [r3, #0]
   808b0:	f042 0220 	orr.w	r2, r2, #32
   808b4:	601a      	str	r2, [r3, #0]
	PIOC->PIO_PER |= PIO_PER_P4; //DO3
   808b6:	681a      	ldr	r2, [r3, #0]
   808b8:	f042 0210 	orr.w	r2, r2, #16
   808bc:	601a      	str	r2, [r3, #0]
	PIOC->PIO_PER |= PIO_PER_P3; //DO2
   808be:	681a      	ldr	r2, [r3, #0]
   808c0:	f042 0208 	orr.w	r2, r2, #8
   808c4:	601a      	str	r2, [r3, #0]
	PIOC->PIO_PER |= PIO_PER_P2; //DO1
   808c6:	681a      	ldr	r2, [r3, #0]
   808c8:	f042 0204 	orr.w	r2, r2, #4
   808cc:	601a      	str	r2, [r3, #0]
	PIOC->PIO_PER |= PIO_PER_P1; //DO0
   808ce:	681a      	ldr	r2, [r3, #0]
   808d0:	f042 0202 	orr.w	r2, r2, #2
   808d4:	601a      	str	r2, [r3, #0]
   808d6:	4770      	bx	lr
   808d8:	400e1400 	.word	0x400e1400
   808dc:	400e0600 	.word	0x400e0600

000808e0 <encoder_read>:
}


uint8_t encoder_read(){
   808e0:	b508      	push	{r3, lr}
	// PIO (Output) Enable Register, PIO Enable
	PIOD->PIO_PER |= PIO_PER_P2; // Pin 27 sel PD2 SEL
   808e2:	4b2a      	ldr	r3, [pc, #168]	; (8098c <encoder_read+0xac>)
   808e4:	681a      	ldr	r2, [r3, #0]
   808e6:	f042 0204 	orr.w	r2, r2, #4
   808ea:	601a      	str	r2, [r3, #0]
	PIOD->PIO_OER |= PIO_OER_P2; // 
   808ec:	691a      	ldr	r2, [r3, #16]
   808ee:	f042 0204 	orr.w	r2, r2, #4
   808f2:	611a      	str	r2, [r3, #16]
	PIOD->PIO_PER |= PIO_PER_P1; // Pin 26 not_rst PD1 !RST
   808f4:	681a      	ldr	r2, [r3, #0]
   808f6:	f042 0202 	orr.w	r2, r2, #2
   808fa:	601a      	str	r2, [r3, #0]
	PIOD->PIO_OER |= PIO_OER_P1; // 
   808fc:	691a      	ldr	r2, [r3, #16]
   808fe:	f042 0202 	orr.w	r2, r2, #2
   80902:	611a      	str	r2, [r3, #16]
	PIOD->PIO_PER |= PIO_PER_P0; // Pin 25 not_oe PD0 !OE
   80904:	681a      	ldr	r2, [r3, #0]
   80906:	f042 0201 	orr.w	r2, r2, #1
   8090a:	601a      	str	r2, [r3, #0]
	PIOD->PIO_OER |= PIO_OER_P0; // 
   8090c:	691a      	ldr	r2, [r3, #16]
   8090e:	f042 0201 	orr.w	r2, r2, #1
   80912:	611a      	str	r2, [r3, #16]
	
	PIOD->PIO_CODR |= PIO_CODR_P0; //!OE low
   80914:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   80916:	f042 0201 	orr.w	r2, r2, #1
   8091a:	635a      	str	r2, [r3, #52]	; 0x34
	PIOD->PIO_CODR |= PIO_CODR_P2; //SEL low
   8091c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   8091e:	f042 0204 	orr.w	r2, r2, #4
   80922:	635a      	str	r2, [r3, #52]	; 0x34
   80924:	f44f 6348 	mov.w	r3, #3200	; 0xc80
	
	//10 microsec
	for(int i = 0; i < 3200; i++){
   80928:	3b01      	subs	r3, #1
   8092a:	d1fd      	bne.n	80928 <encoder_read+0x48>
	}
	
	uint8_t MSB = (PIOC->PIO_PDSR >> 1);
   8092c:	4b18      	ldr	r3, [pc, #96]	; (80990 <encoder_read+0xb0>)
   8092e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   80930:	0849      	lsrs	r1, r1, #1
	//printf("PIO_PDSR: -----%x \n\r", PIOC->PIO_PDSR);
	PIOD->PIO_SODR |= PIO_SODR_P2; //SEL high
   80932:	4a16      	ldr	r2, [pc, #88]	; (8098c <encoder_read+0xac>)
   80934:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80936:	f043 0304 	orr.w	r3, r3, #4
   8093a:	6313      	str	r3, [r2, #48]	; 0x30
   8093c:	f44f 6348 	mov.w	r3, #3200	; 0xc80
	
	//10 microsec
	for(int i = 0; i < 3200; i++){
   80940:	3b01      	subs	r3, #1
   80942:	d1fd      	bne.n	80940 <encoder_read+0x60>
	}
	uint8_t LSB = PIOC->PIO_PDSR >> 1;
   80944:	4b12      	ldr	r3, [pc, #72]	; (80990 <encoder_read+0xb0>)
   80946:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	
	PIOD->PIO_CODR |= PIO_CODR_P1; //!RST low
   80948:	f503 7300 	add.w	r3, r3, #512	; 0x200
   8094c:	6b58      	ldr	r0, [r3, #52]	; 0x34
   8094e:	f040 0002 	orr.w	r0, r0, #2
   80952:	6358      	str	r0, [r3, #52]	; 0x34
	PIOD->PIO_SODR |= PIO_SODR_P1; //!RST high
   80954:	6b18      	ldr	r0, [r3, #48]	; 0x30
   80956:	f040 0002 	orr.w	r0, r0, #2
   8095a:	6318      	str	r0, [r3, #48]	; 0x30
	PIOD->PIO_SODR |= PIO_SODR_P0; //!OE high
   8095c:	6b18      	ldr	r0, [r3, #48]	; 0x30
   8095e:	f040 0001 	orr.w	r0, r0, #1
   80962:	6318      	str	r0, [r3, #48]	; 0x30
	
	uint16_t encoder_data = (LSB | (MSB << 8));
   80964:	0209      	lsls	r1, r1, #8
   80966:	b289      	uxth	r1, r1
	int encoder_data_int = LSB | (MSB << 8);
   80968:	f3c2 0347 	ubfx	r3, r2, #1, #8
   8096c:	4319      	orrs	r1, r3
	set_pi_value((8888-encoder_data_int)/88); //scaled so that value is 0-100;
   8096e:	f5c1 530a 	rsb	r3, r1, #8832	; 0x2280
   80972:	3338      	adds	r3, #56	; 0x38
   80974:	4a07      	ldr	r2, [pc, #28]	; (80994 <encoder_read+0xb4>)
   80976:	fb82 0203 	smull	r0, r2, r2, r3
   8097a:	17db      	asrs	r3, r3, #31
   8097c:	ebc3 1322 	rsb	r3, r3, r2, asr #4
   80980:	4a05      	ldr	r2, [pc, #20]	; (80998 <encoder_read+0xb8>)
   80982:	7013      	strb	r3, [r2, #0]
 	printf("Encoder             data: %x \n\r", encoder_data_int);
   80984:	4805      	ldr	r0, [pc, #20]	; (8099c <encoder_read+0xbc>)
   80986:	4b06      	ldr	r3, [pc, #24]	; (809a0 <encoder_read+0xc0>)
   80988:	4798      	blx	r3
// 		printf("Data negative: -%d \n\r", encoder_data);
// 	}
// 	else{
// 		printf("Data positive: %d \n\r", encoder_data);
// 	}
}
   8098a:	bd08      	pop	{r3, pc}
   8098c:	400e1400 	.word	0x400e1400
   80990:	400e1200 	.word	0x400e1200
   80994:	2e8ba2e9 	.word	0x2e8ba2e9
   80998:	20000480 	.word	0x20000480
   8099c:	00081c54 	.word	0x00081c54
   809a0:	00080e95 	.word	0x00080e95

000809a4 <button_check>:

uint8_t button_check(uint8_t current){
	if(current == 0 && previous == 1){
   809a4:	4603      	mov	r3, r0
   809a6:	b948      	cbnz	r0, 809bc <button_check+0x18>
   809a8:	4a07      	ldr	r2, [pc, #28]	; (809c8 <button_check+0x24>)
   809aa:	7810      	ldrb	r0, [r2, #0]
   809ac:	2801      	cmp	r0, #1
   809ae:	d001      	beq.n	809b4 <button_check+0x10>
		return 1;
		}else if(current != 0){
		previous = 1;
		//printf("%s", "C");
	}
	return 0;
   809b0:	4618      	mov	r0, r3
   809b2:	4770      	bx	lr
		previous = 0;
   809b4:	2200      	movs	r2, #0
   809b6:	4b04      	ldr	r3, [pc, #16]	; (809c8 <button_check+0x24>)
   809b8:	701a      	strb	r2, [r3, #0]
		return 1;
   809ba:	4770      	bx	lr
		previous = 1;
   809bc:	2201      	movs	r2, #1
   809be:	4b02      	ldr	r3, [pc, #8]	; (809c8 <button_check+0x24>)
   809c0:	701a      	strb	r2, [r3, #0]
	return 0;
   809c2:	2000      	movs	r0, #0
   809c4:	4770      	bx	lr
   809c6:	bf00      	nop
   809c8:	20000004 	.word	0x20000004

000809cc <check_solenoid_shot>:
 void check_solenoid_shot(){
   809cc:	b508      	push	{r3, lr}
	if(button_check(joystick.butt_pressed)){
   809ce:	4b10      	ldr	r3, [pc, #64]	; (80a10 <check_solenoid_shot+0x44>)
   809d0:	7898      	ldrb	r0, [r3, #2]
   809d2:	4b10      	ldr	r3, [pc, #64]	; (80a14 <check_solenoid_shot+0x48>)
   809d4:	4798      	blx	r3
   809d6:	b978      	cbnz	r0, 809f8 <check_solenoid_shot+0x2c>
		if(return_milliseconds() > (last_time_pressed + 10)){
   809d8:	4b0f      	ldr	r3, [pc, #60]	; (80a18 <check_solenoid_shot+0x4c>)
   809da:	4798      	blx	r3
   809dc:	4b0f      	ldr	r3, [pc, #60]	; (80a1c <check_solenoid_shot+0x50>)
   809de:	685b      	ldr	r3, [r3, #4]
   809e0:	330a      	adds	r3, #10
   809e2:	4298      	cmp	r0, r3
   809e4:	d907      	bls.n	809f6 <check_solenoid_shot+0x2a>
			PIOC->PIO_SODR |= PIO_SODR_P13;
   809e6:	4a0e      	ldr	r2, [pc, #56]	; (80a20 <check_solenoid_shot+0x54>)
   809e8:	6b13      	ldr	r3, [r2, #48]	; 0x30
   809ea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   809ee:	6313      	str	r3, [r2, #48]	; 0x30
			solenoide_status = 0;
   809f0:	2200      	movs	r2, #0
   809f2:	4b0a      	ldr	r3, [pc, #40]	; (80a1c <check_solenoid_shot+0x50>)
   809f4:	705a      	strb	r2, [r3, #1]
   809f6:	bd08      	pop	{r3, pc}
		last_time_pressed = return_milliseconds();
   809f8:	4b07      	ldr	r3, [pc, #28]	; (80a18 <check_solenoid_shot+0x4c>)
   809fa:	4798      	blx	r3
   809fc:	4a07      	ldr	r2, [pc, #28]	; (80a1c <check_solenoid_shot+0x50>)
   809fe:	6050      	str	r0, [r2, #4]
		PIOC->PIO_CODR |= PIO_CODR_P13;
   80a00:	4907      	ldr	r1, [pc, #28]	; (80a20 <check_solenoid_shot+0x54>)
   80a02:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   80a04:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   80a08:	634b      	str	r3, [r1, #52]	; 0x34
		solenoide_status = 1;
   80a0a:	2301      	movs	r3, #1
   80a0c:	7053      	strb	r3, [r2, #1]
   80a0e:	bd08      	pop	{r3, pc}
   80a10:	200004b4 	.word	0x200004b4
   80a14:	000809a5 	.word	0x000809a5
   80a18:	00080edd 	.word	0x00080edd
   80a1c:	20000480 	.word	0x20000480
   80a20:	400e1200 	.word	0x400e1200

00080a24 <main>:
#include "motor_controller.h"
#include "timer.h"
#include "feedback.h"

int main(void)
{
   80a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80a28:	b087      	sub	sp, #28
    /* Initialize the SAM system */
    SystemInit();
   80a2a:	4b48      	ldr	r3, [pc, #288]	; (80b4c <main+0x128>)
   80a2c:	4798      	blx	r3
	WDT->WDT_MR |= 1 << 15;
   80a2e:	4a48      	ldr	r2, [pc, #288]	; (80b50 <main+0x12c>)
   80a30:	6853      	ldr	r3, [r2, #4]
   80a32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
   80a36:	6053      	str	r3, [r2, #4]
	configure_uart();
   80a38:	4b46      	ldr	r3, [pc, #280]	; (80b54 <main+0x130>)
   80a3a:	4798      	blx	r3
	can_init_def_tx_rx_mb(0x00290561); // 0x00290561 = 0b 00000000001010010000010101100001// 0b000000000000100100010001000100010
   80a3c:	4846      	ldr	r0, [pc, #280]	; (80b58 <main+0x134>)
   80a3e:	4b47      	ldr	r3, [pc, #284]	; (80b5c <main+0x138>)
   80a40:	4798      	blx	r3
	
	printf("hello\n\r");
   80a42:	4847      	ldr	r0, [pc, #284]	; (80b60 <main+0x13c>)
   80a44:	4b47      	ldr	r3, [pc, #284]	; (80b64 <main+0x140>)
   80a46:	4798      	blx	r3
	PWM->PWM_CH_NUM[2].PWM_CMR &= ~PWM_CMR_CPOL;
	
	PIOA->PIO_ABSR |= PIO_ABSR_P5; //PIO set peripheral b on pin 5*/
	
	
	timer_init();
   80a48:	4b47      	ldr	r3, [pc, #284]	; (80b68 <main+0x144>)
   80a4a:	4798      	blx	r3
	timer_change_duty(100);
   80a4c:	2064      	movs	r0, #100	; 0x64
   80a4e:	4b47      	ldr	r3, [pc, #284]	; (80b6c <main+0x148>)
   80a50:	4798      	blx	r3
	//init_interrupt_PI();
	init_ch1_PI();
   80a52:	4b47      	ldr	r3, [pc, #284]	; (80b70 <main+0x14c>)
   80a54:	4798      	blx	r3
	
	
	adc_init();
   80a56:	4b47      	ldr	r3, [pc, #284]	; (80b74 <main+0x150>)
   80a58:	4798      	blx	r3
	dac_init();
   80a5a:	4b47      	ldr	r3, [pc, #284]	; (80b78 <main+0x154>)
   80a5c:	4798      	blx	r3
	
	
	motor_box_init();
   80a5e:	4b47      	ldr	r3, [pc, #284]	; (80b7c <main+0x158>)
   80a60:	4798      	blx	r3
	
	
	
	
	//enable and set high, pin to controll servo shoot, pin50 on shield
	PIOC->PIO_PER |= PIO_PER_P13; 
   80a62:	4b47      	ldr	r3, [pc, #284]	; (80b80 <main+0x15c>)
   80a64:	681a      	ldr	r2, [r3, #0]
   80a66:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   80a6a:	601a      	str	r2, [r3, #0]
	PIOC->PIO_OER |= PIO_OER_P13; 
   80a6c:	691a      	ldr	r2, [r3, #16]
   80a6e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   80a72:	611a      	str	r2, [r3, #16]
	PIOC->PIO_SODR |= PIO_SODR_P13;
   80a74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80a76:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   80a7a:	631a      	str	r2, [r3, #48]	; 0x30
	
	
	
	
	PIOA->PIO_PER |= PIO_PER_P19; //PIO Enable Register, PIO Enable
   80a7c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
   80a80:	681a      	ldr	r2, [r3, #0]
   80a82:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   80a86:	601a      	str	r2, [r3, #0]
	PIOA->PIO_OER |= PIO_OER_P19; //Output Enable Register, Output Enable
   80a88:	691a      	ldr	r2, [r3, #16]
   80a8a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   80a8e:	611a      	str	r2, [r3, #16]
	
	PIOA->PIO_PER |= PIO_PER_P20; //PIO Enable Register, PIO Enable
   80a90:	681a      	ldr	r2, [r3, #0]
   80a92:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   80a96:	601a      	str	r2, [r3, #0]
	PIOA->PIO_OER |= PIO_OER_P20; //Output Enable Register, Output Enable
   80a98:	691a      	ldr	r2, [r3, #16]
   80a9a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   80a9e:	611a      	str	r2, [r3, #16]
	PIOA->PIO_PER |= PIO_PER_P9; //PIO Enable Register, PIO Enable
	PIOA->PIO_OER |= PIO_OER_P9; //Output Enable Register, Output Enable*/
	volatile CAN_MESSAGE msg;
	CAN_MESSAGE msgToSend;
	uint8_t solenoide_pressed = 0;
	SysTick_init();
   80aa0:	4b38      	ldr	r3, [pc, #224]	; (80b84 <main+0x160>)
   80aa2:	4798      	blx	r3
    while (1) 
    {
		
		PIOA->PIO_SODR = PIO_SODR_P19; //Set Output Data Register, Set Output Data
   80aa4:	4c38      	ldr	r4, [pc, #224]	; (80b88 <main+0x164>)
		//printf("%x ", tc->TC_CHANNEL[0].TC_SR);
		PIOA->PIO_CODR |= PIO_CODR_P20; //Clear Output Data Register,
		
		
		
		move_solenoid();
   80aa6:	f8df a11c 	ldr.w	sl, [pc, #284]	; 80bc4 <main+0x1a0>
		//change_motor_speed();
		encoder_read();
   80aaa:	f8df 911c 	ldr.w	r9, [pc, #284]	; 80bc8 <main+0x1a4>

		send_time_to_node_1(&msgToSend);

		//limits to fewer OLED updates a second, can be tweaked
		if(!(get_controller_runs()%3)){
			send_motor_info_to_node_1(&msgToSend, get_pi_value(), get_solenoid_status());
   80aae:	4d37      	ldr	r5, [pc, #220]	; (80b8c <main+0x168>)
   80ab0:	e046      	b.n	80b40 <main+0x11c>
			//Make sure 8 bit doesen't overflow as it would break logic
			if(get_controller_runs > 250){
				reset_controller_runs();
			}
		}
		send_motor_info_to_node_1(&msgToSend, get_pi_value(), get_solenoid_status());
   80ab2:	47a8      	blx	r5
   80ab4:	9001      	str	r0, [sp, #4]
   80ab6:	47b8      	blx	r7
   80ab8:	4602      	mov	r2, r0
   80aba:	9901      	ldr	r1, [sp, #4]
   80abc:	a803      	add	r0, sp, #12
   80abe:	47b0      	blx	r6
		
		if(get_goal_flag()){
   80ac0:	4b33      	ldr	r3, [pc, #204]	; (80b90 <main+0x16c>)
   80ac2:	4798      	blx	r3
   80ac4:	2800      	cmp	r0, #0
   80ac6:	d136      	bne.n	80b36 <main+0x112>
		PIOA->PIO_SODR = PIO_SODR_P19; //Set Output Data Register, Set Output Data
   80ac8:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
   80acc:	4b31      	ldr	r3, [pc, #196]	; (80b94 <main+0x170>)
		for(int i = 0; i < 1600000; i++){
   80ace:	3b01      	subs	r3, #1
   80ad0:	d1fd      	bne.n	80ace <main+0xaa>
		PIOA->PIO_CODR = PIO_CODR_P19; //Clear Output Data Register, Set Output Data
   80ad2:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
		PIOA->PIO_SODR = PIO_SODR_P20; //Set Output Data Register, Set Output Data
   80ad6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   80ada:	6323      	str	r3, [r4, #48]	; 0x30
   80adc:	4b2d      	ldr	r3, [pc, #180]	; (80b94 <main+0x170>)
		for(int i = 0; i < 1600000; i++){
   80ade:	3b01      	subs	r3, #1
   80ae0:	d1fd      	bne.n	80ade <main+0xba>
		PIOA->PIO_CODR |= PIO_CODR_P20; //Clear Output Data Register,
   80ae2:	6b63      	ldr	r3, [r4, #52]	; 0x34
   80ae4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   80ae8:	6363      	str	r3, [r4, #52]	; 0x34
		move_solenoid();
   80aea:	47d0      	blx	sl
		encoder_read();
   80aec:	47c8      	blx	r9
		check_solenoid_shot();
   80aee:	4b2a      	ldr	r3, [pc, #168]	; (80b98 <main+0x174>)
   80af0:	4798      	blx	r3
		printf("goals : %d   \n\r", get_total_goals());
   80af2:	4b2a      	ldr	r3, [pc, #168]	; (80b9c <main+0x178>)
   80af4:	4798      	blx	r3
   80af6:	4601      	mov	r1, r0
   80af8:	4829      	ldr	r0, [pc, #164]	; (80ba0 <main+0x17c>)
   80afa:	4b1a      	ldr	r3, [pc, #104]	; (80b64 <main+0x140>)
   80afc:	4798      	blx	r3
		send_time_to_node_1(&msgToSend);
   80afe:	a803      	add	r0, sp, #12
   80b00:	4b28      	ldr	r3, [pc, #160]	; (80ba4 <main+0x180>)
   80b02:	4798      	blx	r3
		if(!(get_controller_runs()%3)){
   80b04:	4b28      	ldr	r3, [pc, #160]	; (80ba8 <main+0x184>)
   80b06:	4798      	blx	r3
   80b08:	4b28      	ldr	r3, [pc, #160]	; (80bac <main+0x188>)
   80b0a:	fba3 2300 	umull	r2, r3, r3, r0
   80b0e:	085b      	lsrs	r3, r3, #1
   80b10:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   80b14:	1ac3      	subs	r3, r0, r3
   80b16:	f013 0fff 	tst.w	r3, #255	; 0xff
   80b1a:	d1ca      	bne.n	80ab2 <main+0x8e>
			send_motor_info_to_node_1(&msgToSend, get_pi_value(), get_solenoid_status());
   80b1c:	47a8      	blx	r5
   80b1e:	9001      	str	r0, [sp, #4]
   80b20:	47b8      	blx	r7
   80b22:	4602      	mov	r2, r0
   80b24:	9901      	ldr	r1, [sp, #4]
   80b26:	a803      	add	r0, sp, #12
   80b28:	47b0      	blx	r6
			if(get_controller_runs > 250){
   80b2a:	4b1f      	ldr	r3, [pc, #124]	; (80ba8 <main+0x184>)
   80b2c:	2bfa      	cmp	r3, #250	; 0xfa
   80b2e:	d9c0      	bls.n	80ab2 <main+0x8e>
				reset_controller_runs();
   80b30:	4b1f      	ldr	r3, [pc, #124]	; (80bb0 <main+0x18c>)
   80b32:	4798      	blx	r3
   80b34:	e7bd      	b.n	80ab2 <main+0x8e>
			send_goal_to_node_1(&msgToSend);
   80b36:	a803      	add	r0, sp, #12
   80b38:	4b1e      	ldr	r3, [pc, #120]	; (80bb4 <main+0x190>)
   80b3a:	4798      	blx	r3
			reset_goal_flag();
   80b3c:	4b1e      	ldr	r3, [pc, #120]	; (80bb8 <main+0x194>)
   80b3e:	4798      	blx	r3
		PIOA->PIO_SODR = PIO_SODR_P19; //Set Output Data Register, Set Output Data
   80b40:	f44f 2800 	mov.w	r8, #524288	; 0x80000
   80b44:	46c3      	mov	fp, r8
			send_motor_info_to_node_1(&msgToSend, get_pi_value(), get_solenoid_status());
   80b46:	4f1d      	ldr	r7, [pc, #116]	; (80bbc <main+0x198>)
   80b48:	4e1d      	ldr	r6, [pc, #116]	; (80bc0 <main+0x19c>)
   80b4a:	e7bd      	b.n	80ac8 <main+0xa4>
   80b4c:	00080621 	.word	0x00080621
   80b50:	400e1a50 	.word	0x400e1a50
   80b54:	0008112d 	.word	0x0008112d
   80b58:	00290561 	.word	0x00290561
   80b5c:	00080301 	.word	0x00080301
   80b60:	00081c74 	.word	0x00081c74
   80b64:	00080e95 	.word	0x00080e95
   80b68:	00080f19 	.word	0x00080f19
   80b6c:	00080f71 	.word	0x00080f71
   80b70:	000810d5 	.word	0x000810d5
   80b74:	00080161 	.word	0x00080161
   80b78:	00080569 	.word	0x00080569
   80b7c:	00080855 	.word	0x00080855
   80b80:	400e1200 	.word	0x400e1200
   80b84:	00080eb9 	.word	0x00080eb9
   80b88:	400e0e00 	.word	0x400e0e00
   80b8c:	00080795 	.word	0x00080795
   80b90:	000801a9 	.word	0x000801a9
   80b94:	00186a00 	.word	0x00186a00
   80b98:	000809cd 	.word	0x000809cd
   80b9c:	0008019d 	.word	0x0008019d
   80ba0:	00081c7c 	.word	0x00081c7c
   80ba4:	000806c5 	.word	0x000806c5
   80ba8:	00080f01 	.word	0x00080f01
   80bac:	aaaaaaab 	.word	0xaaaaaaab
   80bb0:	00080f0d 	.word	0x00080f0d
   80bb4:	00080721 	.word	0x00080721
   80bb8:	000801b5 	.word	0x000801b5
   80bbc:	000807a1 	.word	0x000807a1
   80bc0:	0008074d 	.word	0x0008074d
   80bc4:	000807ad 	.word	0x000807ad
   80bc8:	000808e1 	.word	0x000808e1

00080bcc <prints>:
   80bcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   80bd0:	460d      	mov	r5, r1
   80bd2:	1e16      	subs	r6, r2, #0
   80bd4:	dd48      	ble.n	80c68 <prints+0x9c>
   80bd6:	780a      	ldrb	r2, [r1, #0]
   80bd8:	2a00      	cmp	r2, #0
   80bda:	d035      	beq.n	80c48 <prints+0x7c>
   80bdc:	460a      	mov	r2, r1
   80bde:	2400      	movs	r4, #0
   80be0:	3401      	adds	r4, #1
   80be2:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   80be6:	2900      	cmp	r1, #0
   80be8:	d1fa      	bne.n	80be0 <prints+0x14>
   80bea:	42a6      	cmp	r6, r4
   80bec:	dc2d      	bgt.n	80c4a <prints+0x7e>
   80bee:	2400      	movs	r4, #0
   80bf0:	f003 0202 	and.w	r2, r3, #2
   80bf4:	2a00      	cmp	r2, #0
   80bf6:	bf0c      	ite	eq
   80bf8:	f04f 0820 	moveq.w	r8, #32
   80bfc:	f04f 0830 	movne.w	r8, #48	; 0x30
   80c00:	f013 0301 	ands.w	r3, r3, #1
   80c04:	d123      	bne.n	80c4e <prints+0x82>
   80c06:	2c00      	cmp	r4, #0
   80c08:	dd28      	ble.n	80c5c <prints+0x90>
   80c0a:	4626      	mov	r6, r4
   80c0c:	fa5f f988 	uxtb.w	r9, r8
   80c10:	4f18      	ldr	r7, [pc, #96]	; (80c74 <prints+0xa8>)
   80c12:	4648      	mov	r0, r9
   80c14:	47b8      	blx	r7
   80c16:	3e01      	subs	r6, #1
   80c18:	d1fb      	bne.n	80c12 <prints+0x46>
   80c1a:	7828      	ldrb	r0, [r5, #0]
   80c1c:	b188      	cbz	r0, 80c42 <prints+0x76>
   80c1e:	4f15      	ldr	r7, [pc, #84]	; (80c74 <prints+0xa8>)
   80c20:	47b8      	blx	r7
   80c22:	3401      	adds	r4, #1
   80c24:	f815 0f01 	ldrb.w	r0, [r5, #1]!
   80c28:	2800      	cmp	r0, #0
   80c2a:	d1f9      	bne.n	80c20 <prints+0x54>
   80c2c:	2e00      	cmp	r6, #0
   80c2e:	dd08      	ble.n	80c42 <prints+0x76>
   80c30:	4635      	mov	r5, r6
   80c32:	fa5f f888 	uxtb.w	r8, r8
   80c36:	4f0f      	ldr	r7, [pc, #60]	; (80c74 <prints+0xa8>)
   80c38:	4640      	mov	r0, r8
   80c3a:	47b8      	blx	r7
   80c3c:	3d01      	subs	r5, #1
   80c3e:	d1fb      	bne.n	80c38 <prints+0x6c>
   80c40:	4434      	add	r4, r6
   80c42:	4620      	mov	r0, r4
   80c44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80c48:	2400      	movs	r4, #0
   80c4a:	1b34      	subs	r4, r6, r4
   80c4c:	e7d0      	b.n	80bf0 <prints+0x24>
   80c4e:	4626      	mov	r6, r4
   80c50:	7828      	ldrb	r0, [r5, #0]
   80c52:	b108      	cbz	r0, 80c58 <prints+0x8c>
   80c54:	2400      	movs	r4, #0
   80c56:	e7e2      	b.n	80c1e <prints+0x52>
   80c58:	2400      	movs	r4, #0
   80c5a:	e7e7      	b.n	80c2c <prints+0x60>
   80c5c:	4626      	mov	r6, r4
   80c5e:	461c      	mov	r4, r3
   80c60:	e7db      	b.n	80c1a <prints+0x4e>
   80c62:	f04f 0820 	mov.w	r8, #32
   80c66:	e7d8      	b.n	80c1a <prints+0x4e>
   80c68:	f013 0401 	ands.w	r4, r3, #1
   80c6c:	d0f9      	beq.n	80c62 <prints+0x96>
   80c6e:	f04f 0820 	mov.w	r8, #32
   80c72:	e7ed      	b.n	80c50 <prints+0x84>
   80c74:	00081195 	.word	0x00081195

00080c78 <printi>:
   80c78:	b5f0      	push	{r4, r5, r6, r7, lr}
   80c7a:	b085      	sub	sp, #20
   80c7c:	4607      	mov	r7, r0
   80c7e:	b381      	cbz	r1, 80ce2 <printi+0x6a>
   80c80:	460c      	mov	r4, r1
   80c82:	b10b      	cbz	r3, 80c88 <printi+0x10>
   80c84:	2a0a      	cmp	r2, #10
   80c86:	d038      	beq.n	80cfa <printi+0x82>
   80c88:	2300      	movs	r3, #0
   80c8a:	f88d 300f 	strb.w	r3, [sp, #15]
   80c8e:	2600      	movs	r6, #0
   80c90:	2900      	cmp	r1, #0
   80c92:	d046      	beq.n	80d22 <printi+0xaa>
   80c94:	f10d 050f 	add.w	r5, sp, #15
   80c98:	990c      	ldr	r1, [sp, #48]	; 0x30
   80c9a:	393a      	subs	r1, #58	; 0x3a
   80c9c:	fbb4 f3f2 	udiv	r3, r4, r2
   80ca0:	fb02 4313 	mls	r3, r2, r3, r4
   80ca4:	2b09      	cmp	r3, #9
   80ca6:	bfc8      	it	gt
   80ca8:	185b      	addgt	r3, r3, r1
   80caa:	3330      	adds	r3, #48	; 0x30
   80cac:	f805 3d01 	strb.w	r3, [r5, #-1]!
   80cb0:	fbb4 f4f2 	udiv	r4, r4, r2
   80cb4:	2c00      	cmp	r4, #0
   80cb6:	d1f1      	bne.n	80c9c <printi+0x24>
   80cb8:	b156      	cbz	r6, 80cd0 <printi+0x58>
   80cba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   80cbc:	b11b      	cbz	r3, 80cc6 <printi+0x4e>
   80cbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80cc0:	f013 0f02 	tst.w	r3, #2
   80cc4:	d125      	bne.n	80d12 <printi+0x9a>
   80cc6:	232d      	movs	r3, #45	; 0x2d
   80cc8:	f805 3c01 	strb.w	r3, [r5, #-1]
   80ccc:	3d01      	subs	r5, #1
   80cce:	2600      	movs	r6, #0
   80cd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80cd2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   80cd4:	4629      	mov	r1, r5
   80cd6:	4638      	mov	r0, r7
   80cd8:	4c14      	ldr	r4, [pc, #80]	; (80d2c <printi+0xb4>)
   80cda:	47a0      	blx	r4
   80cdc:	4430      	add	r0, r6
   80cde:	b005      	add	sp, #20
   80ce0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80ce2:	2330      	movs	r3, #48	; 0x30
   80ce4:	f88d 3004 	strb.w	r3, [sp, #4]
   80ce8:	2300      	movs	r3, #0
   80cea:	f88d 3005 	strb.w	r3, [sp, #5]
   80cee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80cf0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   80cf2:	a901      	add	r1, sp, #4
   80cf4:	4c0d      	ldr	r4, [pc, #52]	; (80d2c <printi+0xb4>)
   80cf6:	47a0      	blx	r4
   80cf8:	e7f1      	b.n	80cde <printi+0x66>
   80cfa:	2900      	cmp	r1, #0
   80cfc:	dac4      	bge.n	80c88 <printi+0x10>
   80cfe:	424c      	negs	r4, r1
   80d00:	2300      	movs	r3, #0
   80d02:	f88d 300f 	strb.w	r3, [sp, #15]
   80d06:	f10d 050f 	add.w	r5, sp, #15
   80d0a:	2c00      	cmp	r4, #0
   80d0c:	d0d5      	beq.n	80cba <printi+0x42>
   80d0e:	2601      	movs	r6, #1
   80d10:	e7c0      	b.n	80c94 <printi+0x1c>
   80d12:	202d      	movs	r0, #45	; 0x2d
   80d14:	4b06      	ldr	r3, [pc, #24]	; (80d30 <printi+0xb8>)
   80d16:	4798      	blx	r3
   80d18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   80d1a:	3b01      	subs	r3, #1
   80d1c:	930a      	str	r3, [sp, #40]	; 0x28
   80d1e:	2601      	movs	r6, #1
   80d20:	e7d6      	b.n	80cd0 <printi+0x58>
   80d22:	461e      	mov	r6, r3
   80d24:	f10d 050f 	add.w	r5, sp, #15
   80d28:	e7d2      	b.n	80cd0 <printi+0x58>
   80d2a:	bf00      	nop
   80d2c:	00080bcd 	.word	0x00080bcd
   80d30:	00081195 	.word	0x00081195

00080d34 <print>:
   80d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80d38:	b087      	sub	sp, #28
   80d3a:	4680      	mov	r8, r0
   80d3c:	780b      	ldrb	r3, [r1, #0]
   80d3e:	2b00      	cmp	r3, #0
   80d40:	f000 8094 	beq.w	80e6c <print+0x138>
   80d44:	468b      	mov	fp, r1
   80d46:	4617      	mov	r7, r2
   80d48:	2500      	movs	r5, #0
   80d4a:	4e4e      	ldr	r6, [pc, #312]	; (80e84 <print+0x150>)
   80d4c:	f8df a13c 	ldr.w	sl, [pc, #316]	; 80e8c <print+0x158>
   80d50:	f8df 913c 	ldr.w	r9, [pc, #316]	; 80e90 <print+0x15c>
   80d54:	e046      	b.n	80de4 <print+0xb0>
   80d56:	2200      	movs	r2, #0
   80d58:	e070      	b.n	80e3c <print+0x108>
   80d5a:	6839      	ldr	r1, [r7, #0]
   80d5c:	3704      	adds	r7, #4
   80d5e:	484a      	ldr	r0, [pc, #296]	; (80e88 <print+0x154>)
   80d60:	2900      	cmp	r1, #0
   80d62:	bf08      	it	eq
   80d64:	4601      	moveq	r1, r0
   80d66:	4640      	mov	r0, r8
   80d68:	47d0      	blx	sl
   80d6a:	4405      	add	r5, r0
   80d6c:	e035      	b.n	80dda <print+0xa6>
   80d6e:	6839      	ldr	r1, [r7, #0]
   80d70:	3704      	adds	r7, #4
   80d72:	2061      	movs	r0, #97	; 0x61
   80d74:	9002      	str	r0, [sp, #8]
   80d76:	9301      	str	r3, [sp, #4]
   80d78:	9200      	str	r2, [sp, #0]
   80d7a:	2301      	movs	r3, #1
   80d7c:	220a      	movs	r2, #10
   80d7e:	4640      	mov	r0, r8
   80d80:	47c8      	blx	r9
   80d82:	4405      	add	r5, r0
   80d84:	e029      	b.n	80dda <print+0xa6>
   80d86:	6839      	ldr	r1, [r7, #0]
   80d88:	3704      	adds	r7, #4
   80d8a:	2061      	movs	r0, #97	; 0x61
   80d8c:	9002      	str	r0, [sp, #8]
   80d8e:	9301      	str	r3, [sp, #4]
   80d90:	9200      	str	r2, [sp, #0]
   80d92:	2300      	movs	r3, #0
   80d94:	2210      	movs	r2, #16
   80d96:	4640      	mov	r0, r8
   80d98:	47c8      	blx	r9
   80d9a:	4405      	add	r5, r0
   80d9c:	e01d      	b.n	80dda <print+0xa6>
   80d9e:	6839      	ldr	r1, [r7, #0]
   80da0:	3704      	adds	r7, #4
   80da2:	2041      	movs	r0, #65	; 0x41
   80da4:	9002      	str	r0, [sp, #8]
   80da6:	9301      	str	r3, [sp, #4]
   80da8:	9200      	str	r2, [sp, #0]
   80daa:	2300      	movs	r3, #0
   80dac:	2210      	movs	r2, #16
   80dae:	4640      	mov	r0, r8
   80db0:	47c8      	blx	r9
   80db2:	4405      	add	r5, r0
   80db4:	e011      	b.n	80dda <print+0xa6>
   80db6:	6839      	ldr	r1, [r7, #0]
   80db8:	3704      	adds	r7, #4
   80dba:	2061      	movs	r0, #97	; 0x61
   80dbc:	9002      	str	r0, [sp, #8]
   80dbe:	9301      	str	r3, [sp, #4]
   80dc0:	9200      	str	r2, [sp, #0]
   80dc2:	2300      	movs	r3, #0
   80dc4:	220a      	movs	r2, #10
   80dc6:	4640      	mov	r0, r8
   80dc8:	47c8      	blx	r9
   80dca:	4405      	add	r5, r0
   80dcc:	e005      	b.n	80dda <print+0xa6>
   80dce:	46a3      	mov	fp, r4
   80dd0:	f89b 0000 	ldrb.w	r0, [fp]
   80dd4:	47b0      	blx	r6
   80dd6:	3501      	adds	r5, #1
   80dd8:	465c      	mov	r4, fp
   80dda:	f104 0b01 	add.w	fp, r4, #1
   80dde:	7863      	ldrb	r3, [r4, #1]
   80de0:	2b00      	cmp	r3, #0
   80de2:	d044      	beq.n	80e6e <print+0x13a>
   80de4:	2b25      	cmp	r3, #37	; 0x25
   80de6:	d1f3      	bne.n	80dd0 <print+0x9c>
   80de8:	f10b 0401 	add.w	r4, fp, #1
   80dec:	f89b 3001 	ldrb.w	r3, [fp, #1]
   80df0:	2b00      	cmp	r3, #0
   80df2:	d03c      	beq.n	80e6e <print+0x13a>
   80df4:	2b25      	cmp	r3, #37	; 0x25
   80df6:	d0ea      	beq.n	80dce <print+0x9a>
   80df8:	2b2d      	cmp	r3, #45	; 0x2d
   80dfa:	bf06      	itte	eq
   80dfc:	f10b 0402 	addeq.w	r4, fp, #2
   80e00:	2301      	moveq	r3, #1
   80e02:	2300      	movne	r3, #0
   80e04:	7822      	ldrb	r2, [r4, #0]
   80e06:	2a30      	cmp	r2, #48	; 0x30
   80e08:	d105      	bne.n	80e16 <print+0xe2>
   80e0a:	f043 0302 	orr.w	r3, r3, #2
   80e0e:	f814 2f01 	ldrb.w	r2, [r4, #1]!
   80e12:	2a30      	cmp	r2, #48	; 0x30
   80e14:	d0f9      	beq.n	80e0a <print+0xd6>
   80e16:	7821      	ldrb	r1, [r4, #0]
   80e18:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   80e1c:	b2d2      	uxtb	r2, r2
   80e1e:	2a09      	cmp	r2, #9
   80e20:	d899      	bhi.n	80d56 <print+0x22>
   80e22:	2200      	movs	r2, #0
   80e24:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   80e28:	3930      	subs	r1, #48	; 0x30
   80e2a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
   80e2e:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   80e32:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
   80e36:	b2c0      	uxtb	r0, r0
   80e38:	2809      	cmp	r0, #9
   80e3a:	d9f3      	bls.n	80e24 <print+0xf0>
   80e3c:	2973      	cmp	r1, #115	; 0x73
   80e3e:	d08c      	beq.n	80d5a <print+0x26>
   80e40:	2964      	cmp	r1, #100	; 0x64
   80e42:	d094      	beq.n	80d6e <print+0x3a>
   80e44:	2978      	cmp	r1, #120	; 0x78
   80e46:	d09e      	beq.n	80d86 <print+0x52>
   80e48:	2958      	cmp	r1, #88	; 0x58
   80e4a:	d0a8      	beq.n	80d9e <print+0x6a>
   80e4c:	2975      	cmp	r1, #117	; 0x75
   80e4e:	d0b2      	beq.n	80db6 <print+0x82>
   80e50:	2963      	cmp	r1, #99	; 0x63
   80e52:	d1c2      	bne.n	80dda <print+0xa6>
   80e54:	6839      	ldr	r1, [r7, #0]
   80e56:	3704      	adds	r7, #4
   80e58:	f88d 1014 	strb.w	r1, [sp, #20]
   80e5c:	2100      	movs	r1, #0
   80e5e:	f88d 1015 	strb.w	r1, [sp, #21]
   80e62:	a905      	add	r1, sp, #20
   80e64:	4640      	mov	r0, r8
   80e66:	47d0      	blx	sl
   80e68:	4405      	add	r5, r0
   80e6a:	e7b6      	b.n	80dda <print+0xa6>
   80e6c:	2500      	movs	r5, #0
   80e6e:	f1b8 0f00 	cmp.w	r8, #0
   80e72:	d003      	beq.n	80e7c <print+0x148>
   80e74:	f8d8 3000 	ldr.w	r3, [r8]
   80e78:	2200      	movs	r2, #0
   80e7a:	701a      	strb	r2, [r3, #0]
   80e7c:	4628      	mov	r0, r5
   80e7e:	b007      	add	sp, #28
   80e80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80e84:	00081195 	.word	0x00081195
   80e88:	00081c8c 	.word	0x00081c8c
   80e8c:	00080bcd 	.word	0x00080bcd
   80e90:	00080c79 	.word	0x00080c79

00080e94 <printf>:
   80e94:	b40f      	push	{r0, r1, r2, r3}
   80e96:	b500      	push	{lr}
   80e98:	b083      	sub	sp, #12
   80e9a:	aa04      	add	r2, sp, #16
   80e9c:	f852 1b04 	ldr.w	r1, [r2], #4
   80ea0:	9201      	str	r2, [sp, #4]
   80ea2:	2000      	movs	r0, #0
   80ea4:	4b03      	ldr	r3, [pc, #12]	; (80eb4 <printf+0x20>)
   80ea6:	4798      	blx	r3
   80ea8:	b003      	add	sp, #12
   80eaa:	f85d eb04 	ldr.w	lr, [sp], #4
   80eae:	b004      	add	sp, #16
   80eb0:	4770      	bx	lr
   80eb2:	bf00      	nop
   80eb4:	00080d35 	.word	0x00080d35

00080eb8 <SysTick_init>:
   80eb8:	4b03      	ldr	r3, [pc, #12]	; (80ec8 <SysTick_init+0x10>)
   80eba:	2203      	movs	r2, #3
   80ebc:	601a      	str	r2, [r3, #0]
   80ebe:	f642 1204 	movw	r2, #10500	; 0x2904
   80ec2:	605a      	str	r2, [r3, #4]
   80ec4:	4770      	bx	lr
   80ec6:	bf00      	nop
   80ec8:	e000e010 	.word	0xe000e010

00080ecc <SysTick_Handler>:
   80ecc:	4a02      	ldr	r2, [pc, #8]	; (80ed8 <SysTick_Handler+0xc>)
   80ece:	6813      	ldr	r3, [r2, #0]
   80ed0:	3301      	adds	r3, #1
   80ed2:	6013      	str	r3, [r2, #0]
   80ed4:	4770      	bx	lr
   80ed6:	bf00      	nop
   80ed8:	20000488 	.word	0x20000488

00080edc <return_milliseconds>:
   80edc:	4b01      	ldr	r3, [pc, #4]	; (80ee4 <return_milliseconds+0x8>)
   80ede:	6818      	ldr	r0, [r3, #0]
   80ee0:	4770      	bx	lr
   80ee2:	bf00      	nop
   80ee4:	20000488 	.word	0x20000488

00080ee8 <return_seconds>:
   80ee8:	4b03      	ldr	r3, [pc, #12]	; (80ef8 <return_seconds+0x10>)
   80eea:	6818      	ldr	r0, [r3, #0]
   80eec:	4b03      	ldr	r3, [pc, #12]	; (80efc <return_seconds+0x14>)
   80eee:	fba3 3000 	umull	r3, r0, r3, r0
   80ef2:	f3c0 108f 	ubfx	r0, r0, #6, #16
   80ef6:	4770      	bx	lr
   80ef8:	20000488 	.word	0x20000488
   80efc:	10624dd3 	.word	0x10624dd3

00080f00 <get_controller_runs>:
   80f00:	4b01      	ldr	r3, [pc, #4]	; (80f08 <get_controller_runs+0x8>)
   80f02:	7818      	ldrb	r0, [r3, #0]
   80f04:	4770      	bx	lr
   80f06:	bf00      	nop
   80f08:	20000490 	.word	0x20000490

00080f0c <reset_controller_runs>:
   80f0c:	2200      	movs	r2, #0
   80f0e:	4b01      	ldr	r3, [pc, #4]	; (80f14 <reset_controller_runs+0x8>)
   80f10:	701a      	strb	r2, [r3, #0]
   80f12:	4770      	bx	lr
   80f14:	20000490 	.word	0x20000490

00080f18 <timer_init>:
   80f18:	4a11      	ldr	r2, [pc, #68]	; (80f60 <timer_init+0x48>)
   80f1a:	6913      	ldr	r3, [r2, #16]
   80f1c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
   80f20:	6113      	str	r3, [r2, #16]
   80f22:	4b10      	ldr	r3, [pc, #64]	; (80f64 <timer_init+0x4c>)
   80f24:	685a      	ldr	r2, [r3, #4]
   80f26:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   80f2a:	605a      	str	r2, [r3, #4]
   80f2c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80f2e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   80f32:	671a      	str	r2, [r3, #112]	; 0x70
   80f34:	685a      	ldr	r2, [r3, #4]
   80f36:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
   80f3a:	605a      	str	r2, [r3, #4]
   80f3c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80f3e:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
   80f42:	671a      	str	r2, [r3, #112]	; 0x70
   80f44:	f5a3 23c2 	sub.w	r3, r3, #397312	; 0x61000
   80f48:	4a07      	ldr	r2, [pc, #28]	; (80f68 <timer_init+0x50>)
   80f4a:	605a      	str	r2, [r3, #4]
   80f4c:	4a07      	ldr	r2, [pc, #28]	; (80f6c <timer_init+0x54>)
   80f4e:	61da      	str	r2, [r3, #28]
   80f50:	2201      	movs	r2, #1
   80f52:	601a      	str	r2, [r3, #0]
   80f54:	681a      	ldr	r2, [r3, #0]
   80f56:	f042 0204 	orr.w	r2, r2, #4
   80f5a:	601a      	str	r2, [r3, #0]
   80f5c:	4770      	bx	lr
   80f5e:	bf00      	nop
   80f60:	400e0600 	.word	0x400e0600
   80f64:	400e1000 	.word	0x400e1000
   80f68:	0909c000 	.word	0x0909c000
   80f6c:	000cd140 	.word	0x000cd140

00080f70 <timer_change_duty>:
   80f70:	2864      	cmp	r0, #100	; 0x64
   80f72:	bf28      	it	cs
   80f74:	2064      	movcs	r0, #100	; 0x64
   80f76:	4b05      	ldr	r3, [pc, #20]	; (80f8c <timer_change_duty+0x1c>)
   80f78:	fb03 f000 	mul.w	r0, r3, r0
   80f7c:	f500 2042 	add.w	r0, r0, #794624	; 0xc2000
   80f80:	f500 6053 	add.w	r0, r0, #3376	; 0xd30
   80f84:	4b02      	ldr	r3, [pc, #8]	; (80f90 <timer_change_duty+0x20>)
   80f86:	6158      	str	r0, [r3, #20]
   80f88:	4770      	bx	lr
   80f8a:	bf00      	nop
   80f8c:	fffffe5c 	.word	0xfffffe5c
   80f90:	40080000 	.word	0x40080000

00080f94 <TC1_Handler>:
   80f94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   80f98:	b086      	sub	sp, #24
   80f9a:	4c36      	ldr	r4, [pc, #216]	; (81074 <TC1_Handler+0xe0>)
   80f9c:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   80fa0:	e9c4 2302 	strd	r2, r3, [r4, #8]
   80fa4:	4f34      	ldr	r7, [pc, #208]	; (81078 <TC1_Handler+0xe4>)
   80fa6:	f997 5003 	ldrsb.w	r5, [r7, #3]
   80faa:	4b34      	ldr	r3, [pc, #208]	; (8107c <TC1_Handler+0xe8>)
   80fac:	4798      	blx	r3
   80fae:	1a28      	subs	r0, r5, r0
   80fb0:	4b33      	ldr	r3, [pc, #204]	; (81080 <TC1_Handler+0xec>)
   80fb2:	4798      	blx	r3
   80fb4:	4602      	mov	r2, r0
   80fb6:	460b      	mov	r3, r1
   80fb8:	e9cd 2300 	strd	r2, r3, [sp]
   80fbc:	e9c4 2304 	strd	r2, r3, [r4, #16]
   80fc0:	4e30      	ldr	r6, [pc, #192]	; (81084 <TC1_Handler+0xf0>)
   80fc2:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
   80fc6:	47b0      	blx	r6
   80fc8:	4680      	mov	r8, r0
   80fca:	4689      	mov	r9, r1
   80fcc:	e9c4 8906 	strd	r8, r9, [r4, #24]
   80fd0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8109c <TC1_Handler+0x108>
   80fd4:	e9da 1200 	ldrd	r1, r2, [sl]
   80fd8:	4608      	mov	r0, r1
   80fda:	4611      	mov	r1, r2
   80fdc:	4d2a      	ldr	r5, [pc, #168]	; (81088 <TC1_Handler+0xf4>)
   80fde:	e9da 2302 	ldrd	r2, r3, [sl, #8]
   80fe2:	e9cd 0102 	strd	r0, r1, [sp, #8]
   80fe6:	47a8      	blx	r5
   80fe8:	4642      	mov	r2, r8
   80fea:	464b      	mov	r3, r9
   80fec:	47a8      	blx	r5
   80fee:	4680      	mov	r8, r0
   80ff0:	4689      	mov	r9, r1
   80ff2:	e9da 2304 	ldrd	r2, r3, [sl, #16]
   80ff6:	e9dd 0100 	ldrd	r0, r1, [sp]
   80ffa:	47a8      	blx	r5
   80ffc:	4602      	mov	r2, r0
   80ffe:	460b      	mov	r3, r1
   81000:	4640      	mov	r0, r8
   81002:	4649      	mov	r1, r9
   81004:	47b0      	blx	r6
   81006:	e9cd 0104 	strd	r0, r1, [sp, #16]
   8100a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   8100e:	e9da 0106 	ldrd	r0, r1, [sl, #24]
   81012:	f8df 808c 	ldr.w	r8, [pc, #140]	; 810a0 <TC1_Handler+0x10c>
   81016:	47c0      	blx	r8
   81018:	4680      	mov	r8, r0
   8101a:	4689      	mov	r9, r1
   8101c:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   81020:	e9dd 0100 	ldrd	r0, r1, [sp]
   81024:	f8df a07c 	ldr.w	sl, [pc, #124]	; 810a4 <TC1_Handler+0x110>
   81028:	47d0      	blx	sl
   8102a:	4602      	mov	r2, r0
   8102c:	460b      	mov	r3, r1
   8102e:	4640      	mov	r0, r8
   81030:	4649      	mov	r1, r9
   81032:	47a8      	blx	r5
   81034:	4602      	mov	r2, r0
   81036:	460b      	mov	r3, r1
   81038:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   8103c:	47b0      	blx	r6
   8103e:	4b13      	ldr	r3, [pc, #76]	; (8108c <TC1_Handler+0xf8>)
   81040:	4798      	blx	r3
   81042:	6220      	str	r0, [r4, #32]
   81044:	f997 3005 	ldrsb.w	r3, [r7, #5]
   81048:	b123      	cbz	r3, 81054 <TC1_Handler+0xc0>
   8104a:	2400      	movs	r4, #0
   8104c:	2500      	movs	r5, #0
   8104e:	4b09      	ldr	r3, [pc, #36]	; (81074 <TC1_Handler+0xe0>)
   81050:	e9c3 4506 	strd	r4, r5, [r3, #24]
   81054:	4b0e      	ldr	r3, [pc, #56]	; (81090 <TC1_Handler+0xfc>)
   81056:	4798      	blx	r3
   81058:	4b0e      	ldr	r3, [pc, #56]	; (81094 <TC1_Handler+0x100>)
   8105a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   8105c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   81060:	4b0d      	ldr	r3, [pc, #52]	; (81098 <TC1_Handler+0x104>)
   81062:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   81066:	4a03      	ldr	r2, [pc, #12]	; (81074 <TC1_Handler+0xe0>)
   81068:	7813      	ldrb	r3, [r2, #0]
   8106a:	3301      	adds	r3, #1
   8106c:	7013      	strb	r3, [r2, #0]
   8106e:	b006      	add	sp, #24
   81070:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   81074:	20000490 	.word	0x20000490
   81078:	200004b4 	.word	0x200004b4
   8107c:	00080795 	.word	0x00080795
   81080:	000814c5 	.word	0x000814c5
   81084:	0008122d 	.word	0x0008122d
   81088:	00081591 	.word	0x00081591
   8108c:	000819b5 	.word	0x000819b5
   81090:	00080831 	.word	0x00080831
   81094:	40080000 	.word	0x40080000
   81098:	e000e100 	.word	0xe000e100
   8109c:	20000008 	.word	0x20000008
   810a0:	000817e5 	.word	0x000817e5
   810a4:	00081229 	.word	0x00081229

000810a8 <TC2_Handler>:
   810a8:	b508      	push	{r3, lr}
   810aa:	4806      	ldr	r0, [pc, #24]	; (810c4 <TC2_Handler+0x1c>)
   810ac:	4b06      	ldr	r3, [pc, #24]	; (810c8 <TC2_Handler+0x20>)
   810ae:	4798      	blx	r3
   810b0:	4b06      	ldr	r3, [pc, #24]	; (810cc <TC2_Handler+0x24>)
   810b2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   810b6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   810ba:	4b05      	ldr	r3, [pc, #20]	; (810d0 <TC2_Handler+0x28>)
   810bc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   810c0:	bd08      	pop	{r3, pc}
   810c2:	bf00      	nop
   810c4:	00081c94 	.word	0x00081c94
   810c8:	00080e95 	.word	0x00080e95
   810cc:	40080000 	.word	0x40080000
   810d0:	e000e100 	.word	0xe000e100

000810d4 <init_ch1_PI>:
   810d4:	4a11      	ldr	r2, [pc, #68]	; (8111c <init_ch1_PI+0x48>)
   810d6:	6913      	ldr	r3, [r2, #16]
   810d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   810dc:	6113      	str	r3, [r2, #16]
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   810de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   810e2:	4b0f      	ldr	r3, [pc, #60]	; (81120 <init_ch1_PI+0x4c>)
   810e4:	601a      	str	r2, [r3, #0]
   810e6:	4b0f      	ldr	r3, [pc, #60]	; (81124 <init_ch1_PI+0x50>)
   810e8:	685a      	ldr	r2, [r3, #4]
   810ea:	f042 0201 	orr.w	r2, r2, #1
   810ee:	605a      	str	r2, [r3, #4]
   810f0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   810f2:	f042 0201 	orr.w	r2, r2, #1
   810f6:	671a      	str	r2, [r3, #112]	; 0x70
   810f8:	f5a3 23c2 	sub.w	r3, r3, #397312	; 0x61000
   810fc:	f44f 221c 	mov.w	r2, #638976	; 0x9c000
   81100:	645a      	str	r2, [r3, #68]	; 0x44
   81102:	4a09      	ldr	r2, [pc, #36]	; (81128 <init_ch1_PI+0x54>)
   81104:	65da      	str	r2, [r3, #92]	; 0x5c
   81106:	6e5a      	ldr	r2, [r3, #100]	; 0x64
   81108:	f042 0210 	orr.w	r2, r2, #16
   8110c:	665a      	str	r2, [r3, #100]	; 0x64
   8110e:	2201      	movs	r2, #1
   81110:	641a      	str	r2, [r3, #64]	; 0x40
   81112:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   81114:	f042 0204 	orr.w	r2, r2, #4
   81118:	641a      	str	r2, [r3, #64]	; 0x40
   8111a:	4770      	bx	lr
   8111c:	400e0600 	.word	0x400e0600
   81120:	e000e100 	.word	0xe000e100
   81124:	400e1000 	.word	0x400e1000
   81128:	000cd140 	.word	0x000cd140

0008112c <configure_uart>:
   8112c:	4b16      	ldr	r3, [pc, #88]	; (81188 <configure_uart+0x5c>)
   8112e:	2200      	movs	r2, #0
   81130:	701a      	strb	r2, [r3, #0]
   81132:	705a      	strb	r2, [r3, #1]
   81134:	4b15      	ldr	r3, [pc, #84]	; (8118c <configure_uart+0x60>)
   81136:	f44f 7140 	mov.w	r1, #768	; 0x300
   8113a:	6459      	str	r1, [r3, #68]	; 0x44
   8113c:	6059      	str	r1, [r3, #4]
   8113e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   81140:	6f18      	ldr	r0, [r3, #112]	; 0x70
   81142:	4002      	ands	r2, r0
   81144:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   81148:	671a      	str	r2, [r3, #112]	; 0x70
   8114a:	6659      	str	r1, [r3, #100]	; 0x64
   8114c:	f44f 7280 	mov.w	r2, #256	; 0x100
   81150:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   81154:	611a      	str	r2, [r3, #16]
   81156:	f503 7300 	add.w	r3, r3, #512	; 0x200
   8115a:	21ac      	movs	r1, #172	; 0xac
   8115c:	6019      	str	r1, [r3, #0]
   8115e:	f240 2123 	movw	r1, #547	; 0x223
   81162:	6219      	str	r1, [r3, #32]
   81164:	f44f 6100 	mov.w	r1, #2048	; 0x800
   81168:	6059      	str	r1, [r3, #4]
   8116a:	f240 2102 	movw	r1, #514	; 0x202
   8116e:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   81172:	f04f 31ff 	mov.w	r1, #4294967295
   81176:	60d9      	str	r1, [r3, #12]
   81178:	21e1      	movs	r1, #225	; 0xe1
   8117a:	6099      	str	r1, [r3, #8]
   8117c:	4904      	ldr	r1, [pc, #16]	; (81190 <configure_uart+0x64>)
   8117e:	600a      	str	r2, [r1, #0]
   81180:	2250      	movs	r2, #80	; 0x50
   81182:	601a      	str	r2, [r3, #0]
   81184:	4770      	bx	lr
   81186:	bf00      	nop
   81188:	200004bc 	.word	0x200004bc
   8118c:	400e0e00 	.word	0x400e0e00
   81190:	e000e100 	.word	0xe000e100

00081194 <uart_putchar>:
   81194:	4b07      	ldr	r3, [pc, #28]	; (811b4 <uart_putchar+0x20>)
   81196:	695b      	ldr	r3, [r3, #20]
   81198:	f013 0f02 	tst.w	r3, #2
   8119c:	d008      	beq.n	811b0 <uart_putchar+0x1c>
   8119e:	4b05      	ldr	r3, [pc, #20]	; (811b4 <uart_putchar+0x20>)
   811a0:	61d8      	str	r0, [r3, #28]
   811a2:	461a      	mov	r2, r3
   811a4:	6953      	ldr	r3, [r2, #20]
   811a6:	f413 7f00 	tst.w	r3, #512	; 0x200
   811aa:	d0fb      	beq.n	811a4 <uart_putchar+0x10>
   811ac:	2000      	movs	r0, #0
   811ae:	4770      	bx	lr
   811b0:	2001      	movs	r0, #1
   811b2:	4770      	bx	lr
   811b4:	400e0800 	.word	0x400e0800

000811b8 <UART_Handler>:
   811b8:	b508      	push	{r3, lr}
   811ba:	4b15      	ldr	r3, [pc, #84]	; (81210 <UART_Handler+0x58>)
   811bc:	695b      	ldr	r3, [r3, #20]
   811be:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   811c2:	d003      	beq.n	811cc <UART_Handler+0x14>
   811c4:	f44f 71a8 	mov.w	r1, #336	; 0x150
   811c8:	4a11      	ldr	r2, [pc, #68]	; (81210 <UART_Handler+0x58>)
   811ca:	6011      	str	r1, [r2, #0]
   811cc:	f013 0f01 	tst.w	r3, #1
   811d0:	d012      	beq.n	811f8 <UART_Handler+0x40>
   811d2:	4810      	ldr	r0, [pc, #64]	; (81214 <UART_Handler+0x5c>)
   811d4:	7842      	ldrb	r2, [r0, #1]
   811d6:	1c53      	adds	r3, r2, #1
   811d8:	4259      	negs	r1, r3
   811da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   811de:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   811e2:	bf58      	it	pl
   811e4:	424b      	negpl	r3, r1
   811e6:	7801      	ldrb	r1, [r0, #0]
   811e8:	428b      	cmp	r3, r1
   811ea:	d006      	beq.n	811fa <UART_Handler+0x42>
   811ec:	4908      	ldr	r1, [pc, #32]	; (81210 <UART_Handler+0x58>)
   811ee:	6988      	ldr	r0, [r1, #24]
   811f0:	4908      	ldr	r1, [pc, #32]	; (81214 <UART_Handler+0x5c>)
   811f2:	440a      	add	r2, r1
   811f4:	7090      	strb	r0, [r2, #2]
   811f6:	704b      	strb	r3, [r1, #1]
   811f8:	bd08      	pop	{r3, pc}
   811fa:	4807      	ldr	r0, [pc, #28]	; (81218 <UART_Handler+0x60>)
   811fc:	4b07      	ldr	r3, [pc, #28]	; (8121c <UART_Handler+0x64>)
   811fe:	4798      	blx	r3
   81200:	4b03      	ldr	r3, [pc, #12]	; (81210 <UART_Handler+0x58>)
   81202:	699a      	ldr	r2, [r3, #24]
   81204:	4b03      	ldr	r3, [pc, #12]	; (81214 <UART_Handler+0x5c>)
   81206:	7859      	ldrb	r1, [r3, #1]
   81208:	440b      	add	r3, r1
   8120a:	709a      	strb	r2, [r3, #2]
   8120c:	bd08      	pop	{r3, pc}
   8120e:	bf00      	nop
   81210:	400e0800 	.word	0x400e0800
   81214:	200004bc 	.word	0x200004bc
   81218:	00081ca0 	.word	0x00081ca0
   8121c:	00080e95 	.word	0x00080e95

00081220 <__aeabi_drsub>:
   81220:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   81224:	e002      	b.n	8122c <__adddf3>
   81226:	bf00      	nop

00081228 <__aeabi_dsub>:
   81228:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0008122c <__adddf3>:
   8122c:	b530      	push	{r4, r5, lr}
   8122e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   81232:	ea4f 0543 	mov.w	r5, r3, lsl #1
   81236:	ea94 0f05 	teq	r4, r5
   8123a:	bf08      	it	eq
   8123c:	ea90 0f02 	teqeq	r0, r2
   81240:	bf1f      	itttt	ne
   81242:	ea54 0c00 	orrsne.w	ip, r4, r0
   81246:	ea55 0c02 	orrsne.w	ip, r5, r2
   8124a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   8124e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   81252:	f000 80e2 	beq.w	8141a <__adddf3+0x1ee>
   81256:	ea4f 5454 	mov.w	r4, r4, lsr #21
   8125a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   8125e:	bfb8      	it	lt
   81260:	426d      	neglt	r5, r5
   81262:	dd0c      	ble.n	8127e <__adddf3+0x52>
   81264:	442c      	add	r4, r5
   81266:	ea80 0202 	eor.w	r2, r0, r2
   8126a:	ea81 0303 	eor.w	r3, r1, r3
   8126e:	ea82 0000 	eor.w	r0, r2, r0
   81272:	ea83 0101 	eor.w	r1, r3, r1
   81276:	ea80 0202 	eor.w	r2, r0, r2
   8127a:	ea81 0303 	eor.w	r3, r1, r3
   8127e:	2d36      	cmp	r5, #54	; 0x36
   81280:	bf88      	it	hi
   81282:	bd30      	pophi	{r4, r5, pc}
   81284:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   81288:	ea4f 3101 	mov.w	r1, r1, lsl #12
   8128c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   81290:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   81294:	d002      	beq.n	8129c <__adddf3+0x70>
   81296:	4240      	negs	r0, r0
   81298:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8129c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   812a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   812a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   812a8:	d002      	beq.n	812b0 <__adddf3+0x84>
   812aa:	4252      	negs	r2, r2
   812ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   812b0:	ea94 0f05 	teq	r4, r5
   812b4:	f000 80a7 	beq.w	81406 <__adddf3+0x1da>
   812b8:	f1a4 0401 	sub.w	r4, r4, #1
   812bc:	f1d5 0e20 	rsbs	lr, r5, #32
   812c0:	db0d      	blt.n	812de <__adddf3+0xb2>
   812c2:	fa02 fc0e 	lsl.w	ip, r2, lr
   812c6:	fa22 f205 	lsr.w	r2, r2, r5
   812ca:	1880      	adds	r0, r0, r2
   812cc:	f141 0100 	adc.w	r1, r1, #0
   812d0:	fa03 f20e 	lsl.w	r2, r3, lr
   812d4:	1880      	adds	r0, r0, r2
   812d6:	fa43 f305 	asr.w	r3, r3, r5
   812da:	4159      	adcs	r1, r3
   812dc:	e00e      	b.n	812fc <__adddf3+0xd0>
   812de:	f1a5 0520 	sub.w	r5, r5, #32
   812e2:	f10e 0e20 	add.w	lr, lr, #32
   812e6:	2a01      	cmp	r2, #1
   812e8:	fa03 fc0e 	lsl.w	ip, r3, lr
   812ec:	bf28      	it	cs
   812ee:	f04c 0c02 	orrcs.w	ip, ip, #2
   812f2:	fa43 f305 	asr.w	r3, r3, r5
   812f6:	18c0      	adds	r0, r0, r3
   812f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   812fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   81300:	d507      	bpl.n	81312 <__adddf3+0xe6>
   81302:	f04f 0e00 	mov.w	lr, #0
   81306:	f1dc 0c00 	rsbs	ip, ip, #0
   8130a:	eb7e 0000 	sbcs.w	r0, lr, r0
   8130e:	eb6e 0101 	sbc.w	r1, lr, r1
   81312:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   81316:	d31b      	bcc.n	81350 <__adddf3+0x124>
   81318:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   8131c:	d30c      	bcc.n	81338 <__adddf3+0x10c>
   8131e:	0849      	lsrs	r1, r1, #1
   81320:	ea5f 0030 	movs.w	r0, r0, rrx
   81324:	ea4f 0c3c 	mov.w	ip, ip, rrx
   81328:	f104 0401 	add.w	r4, r4, #1
   8132c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   81330:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   81334:	f080 809a 	bcs.w	8146c <__adddf3+0x240>
   81338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   8133c:	bf08      	it	eq
   8133e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   81342:	f150 0000 	adcs.w	r0, r0, #0
   81346:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8134a:	ea41 0105 	orr.w	r1, r1, r5
   8134e:	bd30      	pop	{r4, r5, pc}
   81350:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   81354:	4140      	adcs	r0, r0
   81356:	eb41 0101 	adc.w	r1, r1, r1
   8135a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8135e:	f1a4 0401 	sub.w	r4, r4, #1
   81362:	d1e9      	bne.n	81338 <__adddf3+0x10c>
   81364:	f091 0f00 	teq	r1, #0
   81368:	bf04      	itt	eq
   8136a:	4601      	moveq	r1, r0
   8136c:	2000      	moveq	r0, #0
   8136e:	fab1 f381 	clz	r3, r1
   81372:	bf08      	it	eq
   81374:	3320      	addeq	r3, #32
   81376:	f1a3 030b 	sub.w	r3, r3, #11
   8137a:	f1b3 0220 	subs.w	r2, r3, #32
   8137e:	da0c      	bge.n	8139a <__adddf3+0x16e>
   81380:	320c      	adds	r2, #12
   81382:	dd08      	ble.n	81396 <__adddf3+0x16a>
   81384:	f102 0c14 	add.w	ip, r2, #20
   81388:	f1c2 020c 	rsb	r2, r2, #12
   8138c:	fa01 f00c 	lsl.w	r0, r1, ip
   81390:	fa21 f102 	lsr.w	r1, r1, r2
   81394:	e00c      	b.n	813b0 <__adddf3+0x184>
   81396:	f102 0214 	add.w	r2, r2, #20
   8139a:	bfd8      	it	le
   8139c:	f1c2 0c20 	rsble	ip, r2, #32
   813a0:	fa01 f102 	lsl.w	r1, r1, r2
   813a4:	fa20 fc0c 	lsr.w	ip, r0, ip
   813a8:	bfdc      	itt	le
   813aa:	ea41 010c 	orrle.w	r1, r1, ip
   813ae:	4090      	lslle	r0, r2
   813b0:	1ae4      	subs	r4, r4, r3
   813b2:	bfa2      	ittt	ge
   813b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   813b8:	4329      	orrge	r1, r5
   813ba:	bd30      	popge	{r4, r5, pc}
   813bc:	ea6f 0404 	mvn.w	r4, r4
   813c0:	3c1f      	subs	r4, #31
   813c2:	da1c      	bge.n	813fe <__adddf3+0x1d2>
   813c4:	340c      	adds	r4, #12
   813c6:	dc0e      	bgt.n	813e6 <__adddf3+0x1ba>
   813c8:	f104 0414 	add.w	r4, r4, #20
   813cc:	f1c4 0220 	rsb	r2, r4, #32
   813d0:	fa20 f004 	lsr.w	r0, r0, r4
   813d4:	fa01 f302 	lsl.w	r3, r1, r2
   813d8:	ea40 0003 	orr.w	r0, r0, r3
   813dc:	fa21 f304 	lsr.w	r3, r1, r4
   813e0:	ea45 0103 	orr.w	r1, r5, r3
   813e4:	bd30      	pop	{r4, r5, pc}
   813e6:	f1c4 040c 	rsb	r4, r4, #12
   813ea:	f1c4 0220 	rsb	r2, r4, #32
   813ee:	fa20 f002 	lsr.w	r0, r0, r2
   813f2:	fa01 f304 	lsl.w	r3, r1, r4
   813f6:	ea40 0003 	orr.w	r0, r0, r3
   813fa:	4629      	mov	r1, r5
   813fc:	bd30      	pop	{r4, r5, pc}
   813fe:	fa21 f004 	lsr.w	r0, r1, r4
   81402:	4629      	mov	r1, r5
   81404:	bd30      	pop	{r4, r5, pc}
   81406:	f094 0f00 	teq	r4, #0
   8140a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   8140e:	bf06      	itte	eq
   81410:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   81414:	3401      	addeq	r4, #1
   81416:	3d01      	subne	r5, #1
   81418:	e74e      	b.n	812b8 <__adddf3+0x8c>
   8141a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8141e:	bf18      	it	ne
   81420:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   81424:	d029      	beq.n	8147a <__adddf3+0x24e>
   81426:	ea94 0f05 	teq	r4, r5
   8142a:	bf08      	it	eq
   8142c:	ea90 0f02 	teqeq	r0, r2
   81430:	d005      	beq.n	8143e <__adddf3+0x212>
   81432:	ea54 0c00 	orrs.w	ip, r4, r0
   81436:	bf04      	itt	eq
   81438:	4619      	moveq	r1, r3
   8143a:	4610      	moveq	r0, r2
   8143c:	bd30      	pop	{r4, r5, pc}
   8143e:	ea91 0f03 	teq	r1, r3
   81442:	bf1e      	ittt	ne
   81444:	2100      	movne	r1, #0
   81446:	2000      	movne	r0, #0
   81448:	bd30      	popne	{r4, r5, pc}
   8144a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   8144e:	d105      	bne.n	8145c <__adddf3+0x230>
   81450:	0040      	lsls	r0, r0, #1
   81452:	4149      	adcs	r1, r1
   81454:	bf28      	it	cs
   81456:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   8145a:	bd30      	pop	{r4, r5, pc}
   8145c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   81460:	bf3c      	itt	cc
   81462:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   81466:	bd30      	popcc	{r4, r5, pc}
   81468:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8146c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   81470:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   81474:	f04f 0000 	mov.w	r0, #0
   81478:	bd30      	pop	{r4, r5, pc}
   8147a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8147e:	bf1a      	itte	ne
   81480:	4619      	movne	r1, r3
   81482:	4610      	movne	r0, r2
   81484:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   81488:	bf1c      	itt	ne
   8148a:	460b      	movne	r3, r1
   8148c:	4602      	movne	r2, r0
   8148e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   81492:	bf06      	itte	eq
   81494:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   81498:	ea91 0f03 	teqeq	r1, r3
   8149c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   814a0:	bd30      	pop	{r4, r5, pc}
   814a2:	bf00      	nop

000814a4 <__aeabi_ui2d>:
   814a4:	f090 0f00 	teq	r0, #0
   814a8:	bf04      	itt	eq
   814aa:	2100      	moveq	r1, #0
   814ac:	4770      	bxeq	lr
   814ae:	b530      	push	{r4, r5, lr}
   814b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   814b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   814b8:	f04f 0500 	mov.w	r5, #0
   814bc:	f04f 0100 	mov.w	r1, #0
   814c0:	e750      	b.n	81364 <__adddf3+0x138>
   814c2:	bf00      	nop

000814c4 <__aeabi_i2d>:
   814c4:	f090 0f00 	teq	r0, #0
   814c8:	bf04      	itt	eq
   814ca:	2100      	moveq	r1, #0
   814cc:	4770      	bxeq	lr
   814ce:	b530      	push	{r4, r5, lr}
   814d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   814d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   814d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   814dc:	bf48      	it	mi
   814de:	4240      	negmi	r0, r0
   814e0:	f04f 0100 	mov.w	r1, #0
   814e4:	e73e      	b.n	81364 <__adddf3+0x138>
   814e6:	bf00      	nop

000814e8 <__aeabi_f2d>:
   814e8:	0042      	lsls	r2, r0, #1
   814ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
   814ee:	ea4f 0131 	mov.w	r1, r1, rrx
   814f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   814f6:	bf1f      	itttt	ne
   814f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   814fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   81500:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   81504:	4770      	bxne	lr
   81506:	f092 0f00 	teq	r2, #0
   8150a:	bf14      	ite	ne
   8150c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   81510:	4770      	bxeq	lr
   81512:	b530      	push	{r4, r5, lr}
   81514:	f44f 7460 	mov.w	r4, #896	; 0x380
   81518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8151c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   81520:	e720      	b.n	81364 <__adddf3+0x138>
   81522:	bf00      	nop

00081524 <__aeabi_ul2d>:
   81524:	ea50 0201 	orrs.w	r2, r0, r1
   81528:	bf08      	it	eq
   8152a:	4770      	bxeq	lr
   8152c:	b530      	push	{r4, r5, lr}
   8152e:	f04f 0500 	mov.w	r5, #0
   81532:	e00a      	b.n	8154a <__aeabi_l2d+0x16>

00081534 <__aeabi_l2d>:
   81534:	ea50 0201 	orrs.w	r2, r0, r1
   81538:	bf08      	it	eq
   8153a:	4770      	bxeq	lr
   8153c:	b530      	push	{r4, r5, lr}
   8153e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   81542:	d502      	bpl.n	8154a <__aeabi_l2d+0x16>
   81544:	4240      	negs	r0, r0
   81546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8154a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8154e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   81552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   81556:	f43f aedc 	beq.w	81312 <__adddf3+0xe6>
   8155a:	f04f 0203 	mov.w	r2, #3
   8155e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   81562:	bf18      	it	ne
   81564:	3203      	addne	r2, #3
   81566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8156a:	bf18      	it	ne
   8156c:	3203      	addne	r2, #3
   8156e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   81572:	f1c2 0320 	rsb	r3, r2, #32
   81576:	fa00 fc03 	lsl.w	ip, r0, r3
   8157a:	fa20 f002 	lsr.w	r0, r0, r2
   8157e:	fa01 fe03 	lsl.w	lr, r1, r3
   81582:	ea40 000e 	orr.w	r0, r0, lr
   81586:	fa21 f102 	lsr.w	r1, r1, r2
   8158a:	4414      	add	r4, r2
   8158c:	e6c1      	b.n	81312 <__adddf3+0xe6>
   8158e:	bf00      	nop

00081590 <__aeabi_dmul>:
   81590:	b570      	push	{r4, r5, r6, lr}
   81592:	f04f 0cff 	mov.w	ip, #255	; 0xff
   81596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8159a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8159e:	bf1d      	ittte	ne
   815a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   815a4:	ea94 0f0c 	teqne	r4, ip
   815a8:	ea95 0f0c 	teqne	r5, ip
   815ac:	f000 f8de 	bleq	8176c <__aeabi_dmul+0x1dc>
   815b0:	442c      	add	r4, r5
   815b2:	ea81 0603 	eor.w	r6, r1, r3
   815b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   815ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   815be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   815c2:	bf18      	it	ne
   815c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   815c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   815cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   815d0:	d038      	beq.n	81644 <__aeabi_dmul+0xb4>
   815d2:	fba0 ce02 	umull	ip, lr, r0, r2
   815d6:	f04f 0500 	mov.w	r5, #0
   815da:	fbe1 e502 	umlal	lr, r5, r1, r2
   815de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   815e2:	fbe0 e503 	umlal	lr, r5, r0, r3
   815e6:	f04f 0600 	mov.w	r6, #0
   815ea:	fbe1 5603 	umlal	r5, r6, r1, r3
   815ee:	f09c 0f00 	teq	ip, #0
   815f2:	bf18      	it	ne
   815f4:	f04e 0e01 	orrne.w	lr, lr, #1
   815f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   815fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   81600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   81604:	d204      	bcs.n	81610 <__aeabi_dmul+0x80>
   81606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   8160a:	416d      	adcs	r5, r5
   8160c:	eb46 0606 	adc.w	r6, r6, r6
   81610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   81614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   81618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   8161c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   81620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   81624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   81628:	bf88      	it	hi
   8162a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8162e:	d81e      	bhi.n	8166e <__aeabi_dmul+0xde>
   81630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   81634:	bf08      	it	eq
   81636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   8163a:	f150 0000 	adcs.w	r0, r0, #0
   8163e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   81642:	bd70      	pop	{r4, r5, r6, pc}
   81644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   81648:	ea46 0101 	orr.w	r1, r6, r1
   8164c:	ea40 0002 	orr.w	r0, r0, r2
   81650:	ea81 0103 	eor.w	r1, r1, r3
   81654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   81658:	bfc2      	ittt	gt
   8165a:	ebd4 050c 	rsbsgt	r5, r4, ip
   8165e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   81662:	bd70      	popgt	{r4, r5, r6, pc}
   81664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   81668:	f04f 0e00 	mov.w	lr, #0
   8166c:	3c01      	subs	r4, #1
   8166e:	f300 80ab 	bgt.w	817c8 <__aeabi_dmul+0x238>
   81672:	f114 0f36 	cmn.w	r4, #54	; 0x36
   81676:	bfde      	ittt	le
   81678:	2000      	movle	r0, #0
   8167a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   8167e:	bd70      	pople	{r4, r5, r6, pc}
   81680:	f1c4 0400 	rsb	r4, r4, #0
   81684:	3c20      	subs	r4, #32
   81686:	da35      	bge.n	816f4 <__aeabi_dmul+0x164>
   81688:	340c      	adds	r4, #12
   8168a:	dc1b      	bgt.n	816c4 <__aeabi_dmul+0x134>
   8168c:	f104 0414 	add.w	r4, r4, #20
   81690:	f1c4 0520 	rsb	r5, r4, #32
   81694:	fa00 f305 	lsl.w	r3, r0, r5
   81698:	fa20 f004 	lsr.w	r0, r0, r4
   8169c:	fa01 f205 	lsl.w	r2, r1, r5
   816a0:	ea40 0002 	orr.w	r0, r0, r2
   816a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   816a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   816ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   816b0:	fa21 f604 	lsr.w	r6, r1, r4
   816b4:	eb42 0106 	adc.w	r1, r2, r6
   816b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   816bc:	bf08      	it	eq
   816be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   816c2:	bd70      	pop	{r4, r5, r6, pc}
   816c4:	f1c4 040c 	rsb	r4, r4, #12
   816c8:	f1c4 0520 	rsb	r5, r4, #32
   816cc:	fa00 f304 	lsl.w	r3, r0, r4
   816d0:	fa20 f005 	lsr.w	r0, r0, r5
   816d4:	fa01 f204 	lsl.w	r2, r1, r4
   816d8:	ea40 0002 	orr.w	r0, r0, r2
   816dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   816e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   816e4:	f141 0100 	adc.w	r1, r1, #0
   816e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   816ec:	bf08      	it	eq
   816ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   816f2:	bd70      	pop	{r4, r5, r6, pc}
   816f4:	f1c4 0520 	rsb	r5, r4, #32
   816f8:	fa00 f205 	lsl.w	r2, r0, r5
   816fc:	ea4e 0e02 	orr.w	lr, lr, r2
   81700:	fa20 f304 	lsr.w	r3, r0, r4
   81704:	fa01 f205 	lsl.w	r2, r1, r5
   81708:	ea43 0302 	orr.w	r3, r3, r2
   8170c:	fa21 f004 	lsr.w	r0, r1, r4
   81710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   81714:	fa21 f204 	lsr.w	r2, r1, r4
   81718:	ea20 0002 	bic.w	r0, r0, r2
   8171c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   81720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   81724:	bf08      	it	eq
   81726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8172a:	bd70      	pop	{r4, r5, r6, pc}
   8172c:	f094 0f00 	teq	r4, #0
   81730:	d10f      	bne.n	81752 <__aeabi_dmul+0x1c2>
   81732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   81736:	0040      	lsls	r0, r0, #1
   81738:	eb41 0101 	adc.w	r1, r1, r1
   8173c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   81740:	bf08      	it	eq
   81742:	3c01      	subeq	r4, #1
   81744:	d0f7      	beq.n	81736 <__aeabi_dmul+0x1a6>
   81746:	ea41 0106 	orr.w	r1, r1, r6
   8174a:	f095 0f00 	teq	r5, #0
   8174e:	bf18      	it	ne
   81750:	4770      	bxne	lr
   81752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   81756:	0052      	lsls	r2, r2, #1
   81758:	eb43 0303 	adc.w	r3, r3, r3
   8175c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   81760:	bf08      	it	eq
   81762:	3d01      	subeq	r5, #1
   81764:	d0f7      	beq.n	81756 <__aeabi_dmul+0x1c6>
   81766:	ea43 0306 	orr.w	r3, r3, r6
   8176a:	4770      	bx	lr
   8176c:	ea94 0f0c 	teq	r4, ip
   81770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   81774:	bf18      	it	ne
   81776:	ea95 0f0c 	teqne	r5, ip
   8177a:	d00c      	beq.n	81796 <__aeabi_dmul+0x206>
   8177c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   81780:	bf18      	it	ne
   81782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   81786:	d1d1      	bne.n	8172c <__aeabi_dmul+0x19c>
   81788:	ea81 0103 	eor.w	r1, r1, r3
   8178c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   81790:	f04f 0000 	mov.w	r0, #0
   81794:	bd70      	pop	{r4, r5, r6, pc}
   81796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8179a:	bf06      	itte	eq
   8179c:	4610      	moveq	r0, r2
   8179e:	4619      	moveq	r1, r3
   817a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   817a4:	d019      	beq.n	817da <__aeabi_dmul+0x24a>
   817a6:	ea94 0f0c 	teq	r4, ip
   817aa:	d102      	bne.n	817b2 <__aeabi_dmul+0x222>
   817ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   817b0:	d113      	bne.n	817da <__aeabi_dmul+0x24a>
   817b2:	ea95 0f0c 	teq	r5, ip
   817b6:	d105      	bne.n	817c4 <__aeabi_dmul+0x234>
   817b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   817bc:	bf1c      	itt	ne
   817be:	4610      	movne	r0, r2
   817c0:	4619      	movne	r1, r3
   817c2:	d10a      	bne.n	817da <__aeabi_dmul+0x24a>
   817c4:	ea81 0103 	eor.w	r1, r1, r3
   817c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   817cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   817d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   817d4:	f04f 0000 	mov.w	r0, #0
   817d8:	bd70      	pop	{r4, r5, r6, pc}
   817da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   817de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   817e2:	bd70      	pop	{r4, r5, r6, pc}

000817e4 <__aeabi_ddiv>:
   817e4:	b570      	push	{r4, r5, r6, lr}
   817e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   817ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   817ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   817f2:	bf1d      	ittte	ne
   817f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   817f8:	ea94 0f0c 	teqne	r4, ip
   817fc:	ea95 0f0c 	teqne	r5, ip
   81800:	f000 f8a7 	bleq	81952 <__aeabi_ddiv+0x16e>
   81804:	eba4 0405 	sub.w	r4, r4, r5
   81808:	ea81 0e03 	eor.w	lr, r1, r3
   8180c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   81810:	ea4f 3101 	mov.w	r1, r1, lsl #12
   81814:	f000 8088 	beq.w	81928 <__aeabi_ddiv+0x144>
   81818:	ea4f 3303 	mov.w	r3, r3, lsl #12
   8181c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   81820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   81824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   81828:	ea4f 2202 	mov.w	r2, r2, lsl #8
   8182c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   81830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   81834:	ea4f 2600 	mov.w	r6, r0, lsl #8
   81838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   8183c:	429d      	cmp	r5, r3
   8183e:	bf08      	it	eq
   81840:	4296      	cmpeq	r6, r2
   81842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   81846:	f504 7440 	add.w	r4, r4, #768	; 0x300
   8184a:	d202      	bcs.n	81852 <__aeabi_ddiv+0x6e>
   8184c:	085b      	lsrs	r3, r3, #1
   8184e:	ea4f 0232 	mov.w	r2, r2, rrx
   81852:	1ab6      	subs	r6, r6, r2
   81854:	eb65 0503 	sbc.w	r5, r5, r3
   81858:	085b      	lsrs	r3, r3, #1
   8185a:	ea4f 0232 	mov.w	r2, r2, rrx
   8185e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   81862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   81866:	ebb6 0e02 	subs.w	lr, r6, r2
   8186a:	eb75 0e03 	sbcs.w	lr, r5, r3
   8186e:	bf22      	ittt	cs
   81870:	1ab6      	subcs	r6, r6, r2
   81872:	4675      	movcs	r5, lr
   81874:	ea40 000c 	orrcs.w	r0, r0, ip
   81878:	085b      	lsrs	r3, r3, #1
   8187a:	ea4f 0232 	mov.w	r2, r2, rrx
   8187e:	ebb6 0e02 	subs.w	lr, r6, r2
   81882:	eb75 0e03 	sbcs.w	lr, r5, r3
   81886:	bf22      	ittt	cs
   81888:	1ab6      	subcs	r6, r6, r2
   8188a:	4675      	movcs	r5, lr
   8188c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   81890:	085b      	lsrs	r3, r3, #1
   81892:	ea4f 0232 	mov.w	r2, r2, rrx
   81896:	ebb6 0e02 	subs.w	lr, r6, r2
   8189a:	eb75 0e03 	sbcs.w	lr, r5, r3
   8189e:	bf22      	ittt	cs
   818a0:	1ab6      	subcs	r6, r6, r2
   818a2:	4675      	movcs	r5, lr
   818a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   818a8:	085b      	lsrs	r3, r3, #1
   818aa:	ea4f 0232 	mov.w	r2, r2, rrx
   818ae:	ebb6 0e02 	subs.w	lr, r6, r2
   818b2:	eb75 0e03 	sbcs.w	lr, r5, r3
   818b6:	bf22      	ittt	cs
   818b8:	1ab6      	subcs	r6, r6, r2
   818ba:	4675      	movcs	r5, lr
   818bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   818c0:	ea55 0e06 	orrs.w	lr, r5, r6
   818c4:	d018      	beq.n	818f8 <__aeabi_ddiv+0x114>
   818c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
   818ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   818ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
   818d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   818d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   818da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   818de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   818e2:	d1c0      	bne.n	81866 <__aeabi_ddiv+0x82>
   818e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   818e8:	d10b      	bne.n	81902 <__aeabi_ddiv+0x11e>
   818ea:	ea41 0100 	orr.w	r1, r1, r0
   818ee:	f04f 0000 	mov.w	r0, #0
   818f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   818f6:	e7b6      	b.n	81866 <__aeabi_ddiv+0x82>
   818f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   818fc:	bf04      	itt	eq
   818fe:	4301      	orreq	r1, r0
   81900:	2000      	moveq	r0, #0
   81902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   81906:	bf88      	it	hi
   81908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8190c:	f63f aeaf 	bhi.w	8166e <__aeabi_dmul+0xde>
   81910:	ebb5 0c03 	subs.w	ip, r5, r3
   81914:	bf04      	itt	eq
   81916:	ebb6 0c02 	subseq.w	ip, r6, r2
   8191a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8191e:	f150 0000 	adcs.w	r0, r0, #0
   81922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   81926:	bd70      	pop	{r4, r5, r6, pc}
   81928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   8192c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   81930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   81934:	bfc2      	ittt	gt
   81936:	ebd4 050c 	rsbsgt	r5, r4, ip
   8193a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8193e:	bd70      	popgt	{r4, r5, r6, pc}
   81940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   81944:	f04f 0e00 	mov.w	lr, #0
   81948:	3c01      	subs	r4, #1
   8194a:	e690      	b.n	8166e <__aeabi_dmul+0xde>
   8194c:	ea45 0e06 	orr.w	lr, r5, r6
   81950:	e68d      	b.n	8166e <__aeabi_dmul+0xde>
   81952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   81956:	ea94 0f0c 	teq	r4, ip
   8195a:	bf08      	it	eq
   8195c:	ea95 0f0c 	teqeq	r5, ip
   81960:	f43f af3b 	beq.w	817da <__aeabi_dmul+0x24a>
   81964:	ea94 0f0c 	teq	r4, ip
   81968:	d10a      	bne.n	81980 <__aeabi_ddiv+0x19c>
   8196a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8196e:	f47f af34 	bne.w	817da <__aeabi_dmul+0x24a>
   81972:	ea95 0f0c 	teq	r5, ip
   81976:	f47f af25 	bne.w	817c4 <__aeabi_dmul+0x234>
   8197a:	4610      	mov	r0, r2
   8197c:	4619      	mov	r1, r3
   8197e:	e72c      	b.n	817da <__aeabi_dmul+0x24a>
   81980:	ea95 0f0c 	teq	r5, ip
   81984:	d106      	bne.n	81994 <__aeabi_ddiv+0x1b0>
   81986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8198a:	f43f aefd 	beq.w	81788 <__aeabi_dmul+0x1f8>
   8198e:	4610      	mov	r0, r2
   81990:	4619      	mov	r1, r3
   81992:	e722      	b.n	817da <__aeabi_dmul+0x24a>
   81994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   81998:	bf18      	it	ne
   8199a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8199e:	f47f aec5 	bne.w	8172c <__aeabi_dmul+0x19c>
   819a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   819a6:	f47f af0d 	bne.w	817c4 <__aeabi_dmul+0x234>
   819aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   819ae:	f47f aeeb 	bne.w	81788 <__aeabi_dmul+0x1f8>
   819b2:	e712      	b.n	817da <__aeabi_dmul+0x24a>

000819b4 <__aeabi_d2iz>:
   819b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   819b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   819bc:	d215      	bcs.n	819ea <__aeabi_d2iz+0x36>
   819be:	d511      	bpl.n	819e4 <__aeabi_d2iz+0x30>
   819c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   819c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   819c8:	d912      	bls.n	819f0 <__aeabi_d2iz+0x3c>
   819ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   819ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   819d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   819d6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   819da:	fa23 f002 	lsr.w	r0, r3, r2
   819de:	bf18      	it	ne
   819e0:	4240      	negne	r0, r0
   819e2:	4770      	bx	lr
   819e4:	f04f 0000 	mov.w	r0, #0
   819e8:	4770      	bx	lr
   819ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   819ee:	d105      	bne.n	819fc <__aeabi_d2iz+0x48>
   819f0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   819f4:	bf08      	it	eq
   819f6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   819fa:	4770      	bx	lr
   819fc:	f04f 0000 	mov.w	r0, #0
   81a00:	4770      	bx	lr
   81a02:	bf00      	nop

00081a04 <__aeabi_d2uiz>:
   81a04:	004a      	lsls	r2, r1, #1
   81a06:	d211      	bcs.n	81a2c <__aeabi_d2uiz+0x28>
   81a08:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   81a0c:	d211      	bcs.n	81a32 <__aeabi_d2uiz+0x2e>
   81a0e:	d50d      	bpl.n	81a2c <__aeabi_d2uiz+0x28>
   81a10:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   81a14:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   81a18:	d40e      	bmi.n	81a38 <__aeabi_d2uiz+0x34>
   81a1a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   81a1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   81a22:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   81a26:	fa23 f002 	lsr.w	r0, r3, r2
   81a2a:	4770      	bx	lr
   81a2c:	f04f 0000 	mov.w	r0, #0
   81a30:	4770      	bx	lr
   81a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   81a36:	d102      	bne.n	81a3e <__aeabi_d2uiz+0x3a>
   81a38:	f04f 30ff 	mov.w	r0, #4294967295
   81a3c:	4770      	bx	lr
   81a3e:	f04f 0000 	mov.w	r0, #0
   81a42:	4770      	bx	lr

00081a44 <__libc_init_array>:
   81a44:	b570      	push	{r4, r5, r6, lr}
   81a46:	4e0f      	ldr	r6, [pc, #60]	; (81a84 <__libc_init_array+0x40>)
   81a48:	4d0f      	ldr	r5, [pc, #60]	; (81a88 <__libc_init_array+0x44>)
   81a4a:	1b76      	subs	r6, r6, r5
   81a4c:	10b6      	asrs	r6, r6, #2
   81a4e:	bf18      	it	ne
   81a50:	2400      	movne	r4, #0
   81a52:	d005      	beq.n	81a60 <__libc_init_array+0x1c>
   81a54:	3401      	adds	r4, #1
   81a56:	f855 3b04 	ldr.w	r3, [r5], #4
   81a5a:	4798      	blx	r3
   81a5c:	42a6      	cmp	r6, r4
   81a5e:	d1f9      	bne.n	81a54 <__libc_init_array+0x10>
   81a60:	4e0a      	ldr	r6, [pc, #40]	; (81a8c <__libc_init_array+0x48>)
   81a62:	4d0b      	ldr	r5, [pc, #44]	; (81a90 <__libc_init_array+0x4c>)
   81a64:	f000 f92e 	bl	81cc4 <_init>
   81a68:	1b76      	subs	r6, r6, r5
   81a6a:	10b6      	asrs	r6, r6, #2
   81a6c:	bf18      	it	ne
   81a6e:	2400      	movne	r4, #0
   81a70:	d006      	beq.n	81a80 <__libc_init_array+0x3c>
   81a72:	3401      	adds	r4, #1
   81a74:	f855 3b04 	ldr.w	r3, [r5], #4
   81a78:	4798      	blx	r3
   81a7a:	42a6      	cmp	r6, r4
   81a7c:	d1f9      	bne.n	81a72 <__libc_init_array+0x2e>
   81a7e:	bd70      	pop	{r4, r5, r6, pc}
   81a80:	bd70      	pop	{r4, r5, r6, pc}
   81a82:	bf00      	nop
   81a84:	00081cd0 	.word	0x00081cd0
   81a88:	00081cd0 	.word	0x00081cd0
   81a8c:	00081cd8 	.word	0x00081cd8
   81a90:	00081cd0 	.word	0x00081cd0

00081a94 <register_fini>:
   81a94:	4b02      	ldr	r3, [pc, #8]	; (81aa0 <register_fini+0xc>)
   81a96:	b113      	cbz	r3, 81a9e <register_fini+0xa>
   81a98:	4802      	ldr	r0, [pc, #8]	; (81aa4 <register_fini+0x10>)
   81a9a:	f000 b805 	b.w	81aa8 <atexit>
   81a9e:	4770      	bx	lr
   81aa0:	00000000 	.word	0x00000000
   81aa4:	00081ab5 	.word	0x00081ab5

00081aa8 <atexit>:
   81aa8:	2300      	movs	r3, #0
   81aaa:	4601      	mov	r1, r0
   81aac:	461a      	mov	r2, r3
   81aae:	4618      	mov	r0, r3
   81ab0:	f000 b81e 	b.w	81af0 <__register_exitproc>

00081ab4 <__libc_fini_array>:
   81ab4:	b538      	push	{r3, r4, r5, lr}
   81ab6:	4c0a      	ldr	r4, [pc, #40]	; (81ae0 <__libc_fini_array+0x2c>)
   81ab8:	4d0a      	ldr	r5, [pc, #40]	; (81ae4 <__libc_fini_array+0x30>)
   81aba:	1b64      	subs	r4, r4, r5
   81abc:	10a4      	asrs	r4, r4, #2
   81abe:	d00a      	beq.n	81ad6 <__libc_fini_array+0x22>
   81ac0:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   81ac4:	3b01      	subs	r3, #1
   81ac6:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   81aca:	3c01      	subs	r4, #1
   81acc:	f855 3904 	ldr.w	r3, [r5], #-4
   81ad0:	4798      	blx	r3
   81ad2:	2c00      	cmp	r4, #0
   81ad4:	d1f9      	bne.n	81aca <__libc_fini_array+0x16>
   81ad6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   81ada:	f000 b8fd 	b.w	81cd8 <_fini>
   81ade:	bf00      	nop
   81ae0:	00081ce8 	.word	0x00081ce8
   81ae4:	00081ce4 	.word	0x00081ce4

00081ae8 <__retarget_lock_acquire_recursive>:
   81ae8:	4770      	bx	lr
   81aea:	bf00      	nop

00081aec <__retarget_lock_release_recursive>:
   81aec:	4770      	bx	lr
   81aee:	bf00      	nop

00081af0 <__register_exitproc>:
   81af0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   81af4:	4d2c      	ldr	r5, [pc, #176]	; (81ba8 <__register_exitproc+0xb8>)
   81af6:	4606      	mov	r6, r0
   81af8:	6828      	ldr	r0, [r5, #0]
   81afa:	4698      	mov	r8, r3
   81afc:	460f      	mov	r7, r1
   81afe:	4691      	mov	r9, r2
   81b00:	f7ff fff2 	bl	81ae8 <__retarget_lock_acquire_recursive>
   81b04:	4b29      	ldr	r3, [pc, #164]	; (81bac <__register_exitproc+0xbc>)
   81b06:	681c      	ldr	r4, [r3, #0]
   81b08:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   81b0c:	2b00      	cmp	r3, #0
   81b0e:	d03e      	beq.n	81b8e <__register_exitproc+0x9e>
   81b10:	685a      	ldr	r2, [r3, #4]
   81b12:	2a1f      	cmp	r2, #31
   81b14:	dc1c      	bgt.n	81b50 <__register_exitproc+0x60>
   81b16:	f102 0e01 	add.w	lr, r2, #1
   81b1a:	b176      	cbz	r6, 81b3a <__register_exitproc+0x4a>
   81b1c:	2101      	movs	r1, #1
   81b1e:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   81b22:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   81b26:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   81b2a:	4091      	lsls	r1, r2
   81b2c:	4308      	orrs	r0, r1
   81b2e:	2e02      	cmp	r6, #2
   81b30:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   81b34:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   81b38:	d023      	beq.n	81b82 <__register_exitproc+0x92>
   81b3a:	3202      	adds	r2, #2
   81b3c:	f8c3 e004 	str.w	lr, [r3, #4]
   81b40:	6828      	ldr	r0, [r5, #0]
   81b42:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   81b46:	f7ff ffd1 	bl	81aec <__retarget_lock_release_recursive>
   81b4a:	2000      	movs	r0, #0
   81b4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   81b50:	4b17      	ldr	r3, [pc, #92]	; (81bb0 <__register_exitproc+0xc0>)
   81b52:	b30b      	cbz	r3, 81b98 <__register_exitproc+0xa8>
   81b54:	f44f 70c8 	mov.w	r0, #400	; 0x190
   81b58:	f3af 8000 	nop.w
   81b5c:	4603      	mov	r3, r0
   81b5e:	b1d8      	cbz	r0, 81b98 <__register_exitproc+0xa8>
   81b60:	2000      	movs	r0, #0
   81b62:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   81b66:	f04f 0e01 	mov.w	lr, #1
   81b6a:	6058      	str	r0, [r3, #4]
   81b6c:	6019      	str	r1, [r3, #0]
   81b6e:	4602      	mov	r2, r0
   81b70:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   81b74:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   81b78:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   81b7c:	2e00      	cmp	r6, #0
   81b7e:	d0dc      	beq.n	81b3a <__register_exitproc+0x4a>
   81b80:	e7cc      	b.n	81b1c <__register_exitproc+0x2c>
   81b82:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   81b86:	4301      	orrs	r1, r0
   81b88:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   81b8c:	e7d5      	b.n	81b3a <__register_exitproc+0x4a>
   81b8e:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   81b92:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   81b96:	e7bb      	b.n	81b10 <__register_exitproc+0x20>
   81b98:	6828      	ldr	r0, [r5, #0]
   81b9a:	f7ff ffa7 	bl	81aec <__retarget_lock_release_recursive>
   81b9e:	f04f 30ff 	mov.w	r0, #4294967295
   81ba2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   81ba6:	bf00      	nop
   81ba8:	20000450 	.word	0x20000450
   81bac:	00081cc0 	.word	0x00081cc0
   81bb0:	00000000 	.word	0x00000000
   81bb4:	304e4143 	.word	0x304e4143
   81bb8:	73656d20 	.word	0x73656d20
   81bbc:	65676173 	.word	0x65676173
   81bc0:	72726120 	.word	0x72726120
   81bc4:	64657669 	.word	0x64657669
   81bc8:	206e6920 	.word	0x206e6920
   81bcc:	2d6e6f6e 	.word	0x2d6e6f6e
   81bd0:	64657375 	.word	0x64657375
   81bd4:	69616d20 	.word	0x69616d20
   81bd8:	786f626c 	.word	0x786f626c
   81bdc:	00000d0a 	.word	0x00000d0a
   81be0:	7373656d 	.word	0x7373656d
   81be4:	20656761 	.word	0x20656761
   81be8:	203a6469 	.word	0x203a6469
   81bec:	0d0a6425 	.word	0x0d0a6425
   81bf0:	00000000 	.word	0x00000000
   81bf4:	7373656d 	.word	0x7373656d
   81bf8:	20656761 	.word	0x20656761
   81bfc:	61746164 	.word	0x61746164
   81c00:	6e656c20 	.word	0x6e656c20
   81c04:	3a687467 	.word	0x3a687467
   81c08:	0a642520 	.word	0x0a642520
   81c0c:	0000000d 	.word	0x0000000d
   81c10:	00206425 	.word	0x00206425
   81c14:	7373656d 	.word	0x7373656d
   81c18:	20656761 	.word	0x20656761
   81c1c:	203a6469 	.word	0x203a6469
   81c20:	0d207825 	.word	0x0d207825
   81c24:	0000000a 	.word	0x0000000a
   81c28:	7373656d 	.word	0x7373656d
   81c2c:	20656761 	.word	0x20656761
   81c30:	676e656c 	.word	0x676e656c
   81c34:	203a6874 	.word	0x203a6874
   81c38:	0d207825 	.word	0x0d207825
   81c3c:	0000000a 	.word	0x0000000a
   81c40:	7373656d 	.word	0x7373656d
   81c44:	20656761 	.word	0x20656761
   81c48:	61746164 	.word	0x61746164
   81c4c:	6425203a 	.word	0x6425203a
   81c50:	000a0d20 	.word	0x000a0d20
   81c54:	6f636e45 	.word	0x6f636e45
   81c58:	20726564 	.word	0x20726564
   81c5c:	20202020 	.word	0x20202020
   81c60:	20202020 	.word	0x20202020
   81c64:	20202020 	.word	0x20202020
   81c68:	61746164 	.word	0x61746164
   81c6c:	7825203a 	.word	0x7825203a
   81c70:	000d0a20 	.word	0x000d0a20
   81c74:	6c6c6568 	.word	0x6c6c6568
   81c78:	000d0a6f 	.word	0x000d0a6f
   81c7c:	6c616f67 	.word	0x6c616f67
   81c80:	203a2073 	.word	0x203a2073
   81c84:	20206425 	.word	0x20206425
   81c88:	000d0a20 	.word	0x000d0a20
   81c8c:	6c756e28 	.word	0x6c756e28
   81c90:	0000296c 	.word	0x0000296c
   81c94:	66727477 	.word	0x66727477
   81c98:	66666666 	.word	0x66666666
   81c9c:	000d0a66 	.word	0x000d0a66
   81ca0:	3a525245 	.word	0x3a525245
   81ca4:	52415520 	.word	0x52415520
   81ca8:	58522054 	.word	0x58522054
   81cac:	66756220 	.word	0x66756220
   81cb0:	20726566 	.word	0x20726566
   81cb4:	66207369 	.word	0x66207369
   81cb8:	0a6c6c75 	.word	0x0a6c6c75
   81cbc:	0000000d 	.word	0x0000000d

00081cc0 <_global_impure_ptr>:
   81cc0:	20000028                                (.. 

00081cc4 <_init>:
   81cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81cc6:	bf00      	nop
   81cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   81cca:	bc08      	pop	{r3}
   81ccc:	469e      	mov	lr, r3
   81cce:	4770      	bx	lr

00081cd0 <__init_array_start>:
   81cd0:	00081a95 	.word	0x00081a95

00081cd4 <__frame_dummy_init_array_entry>:
   81cd4:	00080119                                ....

00081cd8 <_fini>:
   81cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81cda:	bf00      	nop
   81cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
   81cde:	bc08      	pop	{r3}
   81ce0:	469e      	mov	lr, r3
   81ce2:	4770      	bx	lr

00081ce4 <__fini_array_start>:
   81ce4:	000800f5 	.word	0x000800f5
