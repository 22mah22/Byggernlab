
ice_ice_arduino.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000019b4  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000454  20000000  000819b4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000b4  20000458  00081e10  00020458  2**3
                  ALLOC
  3 .stack        00000404  2000050c  00081ec4  00020458  2**0
                  ALLOC
  4 .heap         00000200  20000910  000822c8  00020458  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020454  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002047d  2**0
                  CONTENTS, READONLY
  7 .debug_info   00007dd7  00000000  00000000  000204d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000016d9  00000000  00000000  000282ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000013e0  00000000  00000000  00029986  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000260  00000000  00000000  0002ad66  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001d8  00000000  00000000  0002afc6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00013038  00000000  00000000  0002b19e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00005d80  00000000  00000000  0003e1d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0005463b  00000000  00000000  00043f56  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00000764  00000000  00000000  00098594  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	10 09 00 20 b1 04 08 00 ad 04 08 00 ad 04 08 00     ... ............
   80010:	ad 04 08 00 ad 04 08 00 ad 04 08 00 00 00 00 00     ................
	...
   8002c:	ad 04 08 00 ad 04 08 00 00 00 00 00 ad 04 08 00     ................
   8003c:	59 0c 08 00 ad 04 08 00 ad 04 08 00 ad 04 08 00     Y...............
   8004c:	ad 04 08 00 ad 04 08 00 ad 04 08 00 ad 04 08 00     ................
   8005c:	ad 04 08 00 cd 0e 08 00 ad 04 08 00 00 00 00 00     ................
   8006c:	ad 04 08 00 ad 04 08 00 ad 04 08 00 ad 04 08 00     ................
	...
   80084:	ad 04 08 00 ad 04 08 00 ad 04 08 00 ad 04 08 00     ................
   80094:	ad 04 08 00 ad 04 08 00 ad 04 08 00 ad 04 08 00     ................
   800a4:	00 00 00 00 ad 04 08 00 ad 04 08 00 dd 0c 08 00     ................
   800b4:	ad 04 08 00 ad 04 08 00 ad 04 08 00 ad 04 08 00     ................
   800c4:	ad 04 08 00 ad 04 08 00 ad 04 08 00 ad 04 08 00     ................
   800d4:	9d 01 08 00 ad 04 08 00 ad 04 08 00 ad 04 08 00     ................
   800e4:	ad 04 08 00 ad 04 08 00 6d 03 08 00 ad 04 08 00     ........m.......

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20000458 	.word	0x20000458
   80110:	00000000 	.word	0x00000000
   80114:	000819b4 	.word	0x000819b4

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	000819b4 	.word	0x000819b4
   80154:	2000045c 	.word	0x2000045c
   80158:	000819b4 	.word	0x000819b4
   8015c:	00000000 	.word	0x00000000

00080160 <adc_init>:

#include "sam.h"

void adc_init(){
	
	PMC->PMC_PCER1 = PMC_PCER1_PID37; //enable adc controller
   80160:	2320      	movs	r3, #32
   80162:	4a0b      	ldr	r2, [pc, #44]	; (80190 <adc_init+0x30>)
   80164:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   80168:	4a0a      	ldr	r2, [pc, #40]	; (80194 <adc_init+0x34>)
   8016a:	6053      	str	r3, [r2, #4]
	
	//Enable interrupt in NVIC
	NVIC_EnableIRQ(ID_ADC);
	
	
	ADC->ADC_CHER = ADC_CHER_CH1; //pin a6 på arduino due
   8016c:	4b0a      	ldr	r3, [pc, #40]	; (80198 <adc_init+0x38>)
   8016e:	2202      	movs	r2, #2
   80170:	611a      	str	r2, [r3, #16]
	//ADC->ADC_MR = ADC_MR_TRGEN_EN;
	ADC->ADC_MR = ADC_MR_FREERUN;
   80172:	2180      	movs	r1, #128	; 0x80
   80174:	6059      	str	r1, [r3, #4]
	
	ADC->ADC_CR = ADC_CR_START;
   80176:	601a      	str	r2, [r3, #0]
	ADC->ADC_IER = ADC_IER_COMPE;
   80178:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   8017c:	625a      	str	r2, [r3, #36]	; 0x24
	//ADC->ADC_IER |= ADC_IER_DRDY;
	ADC->ADC_EMR |= ADC_EMR_CMPMODE_LOW;
   8017e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   80180:	641a      	str	r2, [r3, #64]	; 0x40

	//ADC->ADC_EMR = (0x0u << 9);
	ADC->ADC_EMR |= ADC_EMR_CMPSEL(1);
   80182:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   80184:	f042 0210 	orr.w	r2, r2, #16
   80188:	641a      	str	r2, [r3, #64]	; 0x40
	ADC->ADC_CWR = ADC_CWR_LOWTHRES(0x00f);
   8018a:	220f      	movs	r2, #15
   8018c:	645a      	str	r2, [r3, #68]	; 0x44
   8018e:	4770      	bx	lr
   80190:	400e0600 	.word	0x400e0600
   80194:	e000e100 	.word	0xe000e100
   80198:	400c0000 	.word	0x400c0000

0008019c <ADC_Handler>:
uint8_t TOTAL_GOALS = 0;
static uint32_t last_goal_time = 0;



void ADC_Handler( void ){
   8019c:	b510      	push	{r4, lr}
	//printf("Aa");
	if(last_goal_time + 800 < return_milliseconds()){
   8019e:	4b0d      	ldr	r3, [pc, #52]	; (801d4 <ADC_Handler+0x38>)
   801a0:	681c      	ldr	r4, [r3, #0]
   801a2:	f504 7448 	add.w	r4, r4, #800	; 0x320
   801a6:	4b0c      	ldr	r3, [pc, #48]	; (801d8 <ADC_Handler+0x3c>)
   801a8:	4798      	blx	r3
   801aa:	4284      	cmp	r4, r0
   801ac:	d309      	bcc.n	801c2 <ADC_Handler+0x26>
		TOTAL_GOALS += 1;
		last_goal_time = return_milliseconds();
	}

	change_motor_speed_using_paadrag(0);
   801ae:	2000      	movs	r0, #0
   801b0:	4b0a      	ldr	r3, [pc, #40]	; (801dc <ADC_Handler+0x40>)
   801b2:	4798      	blx	r3
	
	//TO_INCREMENT = 1; 
	int i = ADC->ADC_ISR;
   801b4:	4b0a      	ldr	r3, [pc, #40]	; (801e0 <ADC_Handler+0x44>)
   801b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   801b8:	2220      	movs	r2, #32
   801ba:	4b0a      	ldr	r3, [pc, #40]	; (801e4 <ADC_Handler+0x48>)
   801bc:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   801c0:	bd10      	pop	{r4, pc}
		TOTAL_GOALS += 1;
   801c2:	4c04      	ldr	r4, [pc, #16]	; (801d4 <ADC_Handler+0x38>)
   801c4:	7923      	ldrb	r3, [r4, #4]
   801c6:	3301      	adds	r3, #1
   801c8:	7123      	strb	r3, [r4, #4]
		last_goal_time = return_milliseconds();
   801ca:	4b03      	ldr	r3, [pc, #12]	; (801d8 <ADC_Handler+0x3c>)
   801cc:	4798      	blx	r3
   801ce:	6020      	str	r0, [r4, #0]
   801d0:	e7ed      	b.n	801ae <ADC_Handler+0x12>
   801d2:	bf00      	nop
   801d4:	20000474 	.word	0x20000474
   801d8:	00080c69 	.word	0x00080c69
   801dc:	00080661 	.word	0x00080661
   801e0:	400c0000 	.word	0x400c0000
   801e4:	e000e100 	.word	0xe000e100

000801e8 <can_init>:
   801e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   801ec:	1855      	adds	r5, r2, r1
   801ee:	2908      	cmp	r1, #8
   801f0:	bf98      	it	ls
   801f2:	2a08      	cmpls	r2, #8
   801f4:	d864      	bhi.n	802c0 <can_init+0xd8>
   801f6:	460e      	mov	r6, r1
   801f8:	2d08      	cmp	r5, #8
   801fa:	dc61      	bgt.n	802c0 <can_init+0xd8>
   801fc:	4a32      	ldr	r2, [pc, #200]	; (802c8 <can_init+0xe0>)
   801fe:	6813      	ldr	r3, [r2, #0]
   80200:	f023 0301 	bic.w	r3, r3, #1
   80204:	6013      	str	r3, [r2, #0]
   80206:	6913      	ldr	r3, [r2, #16]
   80208:	4b30      	ldr	r3, [pc, #192]	; (802cc <can_init+0xe4>)
   8020a:	f44f 7440 	mov.w	r4, #768	; 0x300
   8020e:	645c      	str	r4, [r3, #68]	; 0x44
   80210:	6f1c      	ldr	r4, [r3, #112]	; 0x70
   80212:	f024 0403 	bic.w	r4, r4, #3
   80216:	671c      	str	r4, [r3, #112]	; 0x70
   80218:	2403      	movs	r4, #3
   8021a:	605c      	str	r4, [r3, #4]
   8021c:	665c      	str	r4, [r3, #100]	; 0x64
   8021e:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   80222:	4c2b      	ldr	r4, [pc, #172]	; (802d0 <can_init+0xe8>)
   80224:	f8c3 410c 	str.w	r4, [r3, #268]	; 0x10c
   80228:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
   8022c:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
   80230:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
   80234:	6150      	str	r0, [r2, #20]
   80236:	42a9      	cmp	r1, r5
   80238:	dc40      	bgt.n	802bc <can_init+0xd4>
   8023a:	460a      	mov	r2, r1
   8023c:	2400      	movs	r4, #0
   8023e:	46a1      	mov	r9, r4
   80240:	f8df 8084 	ldr.w	r8, [pc, #132]	; 802c8 <can_init+0xe0>
   80244:	f04f 5c00 	mov.w	ip, #536870912	; 0x20000000
   80248:	f04f 7e80 	mov.w	lr, #16777216	; 0x1000000
   8024c:	2701      	movs	r7, #1
   8024e:	0153      	lsls	r3, r2, #5
   80250:	f103 2040 	add.w	r0, r3, #1073758208	; 0x40004000
   80254:	f500 2030 	add.w	r0, r0, #720896	; 0xb0000
   80258:	f8c0 9204 	str.w	r9, [r0, #516]	; 0x204
   8025c:	4443      	add	r3, r8
   8025e:	f8c3 c208 	str.w	ip, [r3, #520]	; 0x208
   80262:	f8c0 e200 	str.w	lr, [r0, #512]	; 0x200
   80266:	f8d3 021c 	ldr.w	r0, [r3, #540]	; 0x21c
   8026a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   8026e:	f8c3 021c 	str.w	r0, [r3, #540]	; 0x21c
   80272:	fa07 f302 	lsl.w	r3, r7, r2
   80276:	431c      	orrs	r4, r3
   80278:	3201      	adds	r2, #1
   8027a:	4295      	cmp	r5, r2
   8027c:	dae7      	bge.n	8024e <can_init+0x66>
   8027e:	b181      	cbz	r1, 802a2 <can_init+0xba>
   80280:	2300      	movs	r3, #0
   80282:	4911      	ldr	r1, [pc, #68]	; (802c8 <can_init+0xe0>)
   80284:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
   80288:	f04f 7040 	mov.w	r0, #50331648	; 0x3000000
   8028c:	eb01 1243 	add.w	r2, r1, r3, lsl #5
   80290:	f8c2 5208 	str.w	r5, [r2, #520]	; 0x208
   80294:	f103 0210 	add.w	r2, r3, #16
   80298:	0152      	lsls	r2, r2, #5
   8029a:	5088      	str	r0, [r1, r2]
   8029c:	3301      	adds	r3, #1
   8029e:	429e      	cmp	r6, r3
   802a0:	d1f4      	bne.n	8028c <can_init+0xa4>
   802a2:	4b09      	ldr	r3, [pc, #36]	; (802c8 <can_init+0xe0>)
   802a4:	605c      	str	r4, [r3, #4]
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   802a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
   802aa:	4a0a      	ldr	r2, [pc, #40]	; (802d4 <can_init+0xec>)
   802ac:	6051      	str	r1, [r2, #4]
   802ae:	681a      	ldr	r2, [r3, #0]
   802b0:	f042 0201 	orr.w	r2, r2, #1
   802b4:	601a      	str	r2, [r3, #0]
   802b6:	2000      	movs	r0, #0
   802b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   802bc:	2400      	movs	r4, #0
   802be:	e7de      	b.n	8027e <can_init+0x96>
   802c0:	2001      	movs	r0, #1
   802c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   802c6:	bf00      	nop
   802c8:	400b4000 	.word	0x400b4000
   802cc:	400e0e00 	.word	0x400e0e00
   802d0:	1000102b 	.word	0x1000102b
   802d4:	e000e100 	.word	0xe000e100

000802d8 <can_init_def_tx_rx_mb>:
   802d8:	b508      	push	{r3, lr}
   802da:	2202      	movs	r2, #2
   802dc:	2101      	movs	r1, #1
   802de:	4b01      	ldr	r3, [pc, #4]	; (802e4 <can_init_def_tx_rx_mb+0xc>)
   802e0:	4798      	blx	r3
   802e2:	bd08      	pop	{r3, pc}
   802e4:	000801e9 	.word	0x000801e9

000802e8 <can_receive>:
   802e8:	014b      	lsls	r3, r1, #5
   802ea:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   802ee:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   802f2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   802f6:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   802fa:	d033      	beq.n	80364 <can_receive+0x7c>
   802fc:	b430      	push	{r4, r5}
   802fe:	014b      	lsls	r3, r1, #5
   80300:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   80304:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   80308:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
   8030c:	f8d3 4218 	ldr.w	r4, [r3, #536]	; 0x218
   80310:	f8d3 5208 	ldr.w	r5, [r3, #520]	; 0x208
   80314:	f3c5 458a 	ubfx	r5, r5, #18, #11
   80318:	8005      	strh	r5, [r0, #0]
   8031a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   8031e:	f3c3 4303 	ubfx	r3, r3, #16, #4
   80322:	7083      	strb	r3, [r0, #2]
   80324:	461d      	mov	r5, r3
   80326:	b15b      	cbz	r3, 80340 <can_receive+0x58>
   80328:	3003      	adds	r0, #3
   8032a:	2300      	movs	r3, #0
   8032c:	2b03      	cmp	r3, #3
   8032e:	bfd9      	ittee	le
   80330:	7002      	strble	r2, [r0, #0]
   80332:	0a12      	lsrle	r2, r2, #8
   80334:	7004      	strbgt	r4, [r0, #0]
   80336:	0a24      	lsrgt	r4, r4, #8
   80338:	3301      	adds	r3, #1
   8033a:	3001      	adds	r0, #1
   8033c:	42ab      	cmp	r3, r5
   8033e:	d1f5      	bne.n	8032c <can_receive+0x44>
   80340:	4b09      	ldr	r3, [pc, #36]	; (80368 <can_receive+0x80>)
   80342:	f101 0210 	add.w	r2, r1, #16
   80346:	0152      	lsls	r2, r2, #5
   80348:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   8034c:	5098      	str	r0, [r3, r2]
   8034e:	eb03 1141 	add.w	r1, r3, r1, lsl #5
   80352:	f8d1 321c 	ldr.w	r3, [r1, #540]	; 0x21c
   80356:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   8035a:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c
   8035e:	2000      	movs	r0, #0
   80360:	bc30      	pop	{r4, r5}
   80362:	4770      	bx	lr
   80364:	2001      	movs	r0, #1
   80366:	4770      	bx	lr
   80368:	400b4000 	.word	0x400b4000

0008036c <CAN0_Handler>:
 * \param void
 *
 * \retval 
 */
void CAN0_Handler( void )
{
   8036c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80370:	b084      	sub	sp, #16
	if(DEBUG_INTERRUPT){}/*printf("CAN0 interrupt\n\r")*/;
	char can_sr = CAN0->CAN_SR; 
   80372:	4b39      	ldr	r3, [pc, #228]	; (80458 <CAN0_Handler+0xec>)
   80374:	691c      	ldr	r4, [r3, #16]
	
	//RX interrupt
	if(can_sr & (CAN_SR_MB1 | CAN_SR_MB2) )//Only mailbox 1 and 2 specified for receiving
   80376:	f014 0f06 	tst.w	r4, #6
   8037a:	d039      	beq.n	803f0 <CAN0_Handler+0x84>
	{
		CAN_MESSAGE message;
		if(can_sr & CAN_SR_MB1)  //Mailbox 1 event
   8037c:	f014 0f02 	tst.w	r4, #2
   80380:	d144      	bne.n	8040c <CAN0_Handler+0xa0>
		{
			can_receive(&message, 1);

		}
		else if(can_sr & CAN_SR_MB2) //Mailbox 2 event
   80382:	f014 0f04 	tst.w	r4, #4
   80386:	d046      	beq.n	80416 <CAN0_Handler+0xaa>
		
		{
			can_receive(&message, 2);
   80388:	2102      	movs	r1, #2
   8038a:	a801      	add	r0, sp, #4
   8038c:	4b33      	ldr	r3, [pc, #204]	; (8045c <CAN0_Handler+0xf0>)
   8038e:	4798      	blx	r3
		else
		{
			printf("CAN0 message arrived in non-used mailbox\n\r");
		}
		
		if(message.id < 0x00ff && message.id > 0x000f){
   80390:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   80394:	f1a1 0310 	sub.w	r3, r1, #16
   80398:	b29b      	uxth	r3, r3
   8039a:	2bee      	cmp	r3, #238	; 0xee
   8039c:	d83f      	bhi.n	8041e <CAN0_Handler+0xb2>
			//interpret_joystick
			/*printf("Joystick %d \n\r", message.id);
			printf("Joystick %d \n\r", message.data[5]);*/
			joystick.x_val = (message.data[3] == 0x11) ? message.data[0] : message.data[0]*-1;
   8039e:	f89d 300a 	ldrb.w	r3, [sp, #10]
   803a2:	2b11      	cmp	r3, #17
   803a4:	bf0f      	iteee	eq
   803a6:	f99d 3007 	ldrsbeq.w	r3, [sp, #7]
   803aa:	f89d 3007 	ldrbne.w	r3, [sp, #7]
   803ae:	425b      	negne	r3, r3
   803b0:	b25b      	sxtbne	r3, r3
   803b2:	4a2b      	ldr	r2, [pc, #172]	; (80460 <CAN0_Handler+0xf4>)
   803b4:	7013      	strb	r3, [r2, #0]
			joystick.y_val = (message.data[4] == 0x11) ? message.data[1] : message.data[1]*-1;
   803b6:	f89d 300b 	ldrb.w	r3, [sp, #11]
   803ba:	2b11      	cmp	r3, #17
   803bc:	bf0f      	iteee	eq
   803be:	f99d 2008 	ldrsbeq.w	r2, [sp, #8]
   803c2:	f89d 2008 	ldrbne.w	r2, [sp, #8]
   803c6:	4252      	negne	r2, r2
   803c8:	b252      	sxtbne	r2, r2
   803ca:	4b25      	ldr	r3, [pc, #148]	; (80460 <CAN0_Handler+0xf4>)
   803cc:	705a      	strb	r2, [r3, #1]
			joystick.butt_pressed = message.data[2];
   803ce:	f89d 2009 	ldrb.w	r2, [sp, #9]
   803d2:	709a      	strb	r2, [r3, #2]
			joystick.left_val = message.data[5];
   803d4:	f89d 200c 	ldrb.w	r2, [sp, #12]
   803d8:	70da      	strb	r2, [r3, #3]
			joystick.right_val = message.data[6];
   803da:	f89d 200d 	ldrb.w	r2, [sp, #13]
   803de:	711a      	strb	r2, [r3, #4]
			joystick.left_button = message.data[7] & 0b00000010;
   803e0:	f99d 200e 	ldrsb.w	r2, [sp, #14]
   803e4:	f002 0102 	and.w	r1, r2, #2
   803e8:	7159      	strb	r1, [r3, #5]
			joystick.right_button = message.data[7] & 0b00000001;
   803ea:	f002 0201 	and.w	r2, r2, #1
   803ee:	719a      	strb	r2, [r3, #6]
			if(DEBUG_INTERRUPT)printf("\n\r");
		}
		
	}
	
	if(can_sr & CAN_SR_MB0)
   803f0:	f014 0f01 	tst.w	r4, #1
   803f4:	d002      	beq.n	803fc <CAN0_Handler+0x90>
	{
		/*if(DEBUG_INTERRUPT) printf("CAN0 MB0 ready to send \n\r");*/
		
	//Disable interrupt
		CAN0->CAN_IDR = CAN_IER_MB0;
   803f6:	2201      	movs	r2, #1
   803f8:	4b17      	ldr	r3, [pc, #92]	; (80458 <CAN0_Handler+0xec>)
   803fa:	609a      	str	r2, [r3, #8]
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   803fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
   80400:	4b18      	ldr	r3, [pc, #96]	; (80464 <CAN0_Handler+0xf8>)
   80402:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184

	}
	
	NVIC_ClearPendingIRQ(ID_CAN0);
	//sei();*/
}
   80406:	b004      	add	sp, #16
   80408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			can_receive(&message, 1);
   8040c:	2101      	movs	r1, #1
   8040e:	a801      	add	r0, sp, #4
   80410:	4b12      	ldr	r3, [pc, #72]	; (8045c <CAN0_Handler+0xf0>)
   80412:	4798      	blx	r3
   80414:	e7bc      	b.n	80390 <CAN0_Handler+0x24>
			printf("CAN0 message arrived in non-used mailbox\n\r");
   80416:	4814      	ldr	r0, [pc, #80]	; (80468 <CAN0_Handler+0xfc>)
   80418:	4b14      	ldr	r3, [pc, #80]	; (8046c <CAN0_Handler+0x100>)
   8041a:	4798      	blx	r3
   8041c:	e7b8      	b.n	80390 <CAN0_Handler+0x24>
			if(DEBUG_INTERRUPT)printf("message id: %d\n\r", message.id);
   8041e:	4814      	ldr	r0, [pc, #80]	; (80470 <CAN0_Handler+0x104>)
   80420:	4d12      	ldr	r5, [pc, #72]	; (8046c <CAN0_Handler+0x100>)
   80422:	47a8      	blx	r5
			if(DEBUG_INTERRUPT)printf("message data length: %d\n\r", message.data_length);
   80424:	f89d 1006 	ldrb.w	r1, [sp, #6]
   80428:	4812      	ldr	r0, [pc, #72]	; (80474 <CAN0_Handler+0x108>)
   8042a:	47a8      	blx	r5
			for (int i = 0; i < message.data_length; i++)
   8042c:	f89d 3006 	ldrb.w	r3, [sp, #6]
   80430:	b173      	cbz	r3, 80450 <CAN0_Handler+0xe4>
   80432:	f10d 0607 	add.w	r6, sp, #7
   80436:	2500      	movs	r5, #0
				if(DEBUG_INTERRUPT)printf("%d ", message.data[i]);
   80438:	f8df 8040 	ldr.w	r8, [pc, #64]	; 8047c <CAN0_Handler+0x110>
   8043c:	4f0b      	ldr	r7, [pc, #44]	; (8046c <CAN0_Handler+0x100>)
   8043e:	f816 1b01 	ldrb.w	r1, [r6], #1
   80442:	4640      	mov	r0, r8
   80444:	47b8      	blx	r7
			for (int i = 0; i < message.data_length; i++)
   80446:	3501      	adds	r5, #1
   80448:	f89d 3006 	ldrb.w	r3, [sp, #6]
   8044c:	42ab      	cmp	r3, r5
   8044e:	dcf6      	bgt.n	8043e <CAN0_Handler+0xd2>
			if(DEBUG_INTERRUPT)printf("\n\r");
   80450:	4809      	ldr	r0, [pc, #36]	; (80478 <CAN0_Handler+0x10c>)
   80452:	4b06      	ldr	r3, [pc, #24]	; (8046c <CAN0_Handler+0x100>)
   80454:	4798      	blx	r3
   80456:	e7cb      	b.n	803f0 <CAN0_Handler+0x84>
   80458:	400b4000 	.word	0x400b4000
   8045c:	000802e9 	.word	0x000802e9
   80460:	2000049c 	.word	0x2000049c
   80464:	e000e100 	.word	0xe000e100
   80468:	000818c8 	.word	0x000818c8
   8046c:	00080c21 	.word	0x00080c21
   80470:	000818f4 	.word	0x000818f4
   80474:	00081908 	.word	0x00081908
   80478:	000818f0 	.word	0x000818f0
   8047c:	00081924 	.word	0x00081924

00080480 <dac_init>:



void dac_init(){
	
	PMC->PMC_PCER1 = PMC_PCER1_PID38;
   80480:	2240      	movs	r2, #64	; 0x40
   80482:	4b09      	ldr	r3, [pc, #36]	; (804a8 <dac_init+0x28>)
   80484:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	
	
	DACC->DACC_MR |= DACC_MR_USER_SEL_CHANNEL1;
   80488:	f5a3 33c3 	sub.w	r3, r3, #99840	; 0x18600
   8048c:	685a      	ldr	r2, [r3, #4]
   8048e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
   80492:	605a      	str	r2, [r3, #4]
	DACC->DACC_MR &= ~(1<<0); //disable trigger, set freemode
   80494:	685a      	ldr	r2, [r3, #4]
   80496:	f022 0201 	bic.w	r2, r2, #1
   8049a:	605a      	str	r2, [r3, #4]
	//DACC->DACC_MR |= DACC_MR_WORD_WORD;
	//DACC->DACC_CHER |= DACC_CHER_CH0;
	DACC->DACC_CHER = DACC_CHER_CH1;
   8049c:	2202      	movs	r2, #2
   8049e:	611a      	str	r2, [r3, #16]
	
	DACC->DACC_CDR = 0x05ff;
   804a0:	f240 52ff 	movw	r2, #1535	; 0x5ff
   804a4:	621a      	str	r2, [r3, #32]
   804a6:	4770      	bx	lr
   804a8:	400e0600 	.word	0x400e0600

000804ac <Dummy_Handler>:
   804ac:	e7fe      	b.n	804ac <Dummy_Handler>
	...

000804b0 <Reset_Handler>:
   804b0:	b508      	push	{r3, lr}
   804b2:	4b18      	ldr	r3, [pc, #96]	; (80514 <Reset_Handler+0x64>)
   804b4:	4a18      	ldr	r2, [pc, #96]	; (80518 <Reset_Handler+0x68>)
   804b6:	429a      	cmp	r2, r3
   804b8:	d010      	beq.n	804dc <Reset_Handler+0x2c>
   804ba:	4b18      	ldr	r3, [pc, #96]	; (8051c <Reset_Handler+0x6c>)
   804bc:	4a15      	ldr	r2, [pc, #84]	; (80514 <Reset_Handler+0x64>)
   804be:	429a      	cmp	r2, r3
   804c0:	d20c      	bcs.n	804dc <Reset_Handler+0x2c>
   804c2:	3b01      	subs	r3, #1
   804c4:	1a9b      	subs	r3, r3, r2
   804c6:	f023 0303 	bic.w	r3, r3, #3
   804ca:	3304      	adds	r3, #4
   804cc:	4413      	add	r3, r2
   804ce:	4912      	ldr	r1, [pc, #72]	; (80518 <Reset_Handler+0x68>)
   804d0:	f851 0b04 	ldr.w	r0, [r1], #4
   804d4:	f842 0b04 	str.w	r0, [r2], #4
   804d8:	429a      	cmp	r2, r3
   804da:	d1f9      	bne.n	804d0 <Reset_Handler+0x20>
   804dc:	4b10      	ldr	r3, [pc, #64]	; (80520 <Reset_Handler+0x70>)
   804de:	4a11      	ldr	r2, [pc, #68]	; (80524 <Reset_Handler+0x74>)
   804e0:	429a      	cmp	r2, r3
   804e2:	d20a      	bcs.n	804fa <Reset_Handler+0x4a>
   804e4:	3b01      	subs	r3, #1
   804e6:	1a9b      	subs	r3, r3, r2
   804e8:	f023 0303 	bic.w	r3, r3, #3
   804ec:	3304      	adds	r3, #4
   804ee:	4413      	add	r3, r2
   804f0:	2100      	movs	r1, #0
   804f2:	f842 1b04 	str.w	r1, [r2], #4
   804f6:	4293      	cmp	r3, r2
   804f8:	d1fb      	bne.n	804f2 <Reset_Handler+0x42>
   804fa:	4b0b      	ldr	r3, [pc, #44]	; (80528 <Reset_Handler+0x78>)
   804fc:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   80500:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   80504:	4a09      	ldr	r2, [pc, #36]	; (8052c <Reset_Handler+0x7c>)
   80506:	6093      	str	r3, [r2, #8]
   80508:	4b09      	ldr	r3, [pc, #36]	; (80530 <Reset_Handler+0x80>)
   8050a:	4798      	blx	r3
   8050c:	4b09      	ldr	r3, [pc, #36]	; (80534 <Reset_Handler+0x84>)
   8050e:	4798      	blx	r3
   80510:	e7fe      	b.n	80510 <Reset_Handler+0x60>
   80512:	bf00      	nop
   80514:	20000000 	.word	0x20000000
   80518:	000819b4 	.word	0x000819b4
   8051c:	20000454 	.word	0x20000454
   80520:	2000050c 	.word	0x2000050c
   80524:	20000458 	.word	0x20000458
   80528:	00080000 	.word	0x00080000
   8052c:	e000ed00 	.word	0xe000ed00
   80530:	00081759 	.word	0x00081759
   80534:	000807fd 	.word	0x000807fd

00080538 <SystemInit>:
   80538:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8053c:	4a20      	ldr	r2, [pc, #128]	; (805c0 <SystemInit+0x88>)
   8053e:	6013      	str	r3, [r2, #0]
   80540:	f502 7200 	add.w	r2, r2, #512	; 0x200
   80544:	6013      	str	r3, [r2, #0]
   80546:	4b1f      	ldr	r3, [pc, #124]	; (805c4 <SystemInit+0x8c>)
   80548:	6a1b      	ldr	r3, [r3, #32]
   8054a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   8054e:	d107      	bne.n	80560 <SystemInit+0x28>
   80550:	4a1d      	ldr	r2, [pc, #116]	; (805c8 <SystemInit+0x90>)
   80552:	4b1c      	ldr	r3, [pc, #112]	; (805c4 <SystemInit+0x8c>)
   80554:	621a      	str	r2, [r3, #32]
   80556:	461a      	mov	r2, r3
   80558:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8055a:	f013 0f01 	tst.w	r3, #1
   8055e:	d0fb      	beq.n	80558 <SystemInit+0x20>
   80560:	4a1a      	ldr	r2, [pc, #104]	; (805cc <SystemInit+0x94>)
   80562:	4b18      	ldr	r3, [pc, #96]	; (805c4 <SystemInit+0x8c>)
   80564:	621a      	str	r2, [r3, #32]
   80566:	461a      	mov	r2, r3
   80568:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8056a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   8056e:	d0fb      	beq.n	80568 <SystemInit+0x30>
   80570:	4a14      	ldr	r2, [pc, #80]	; (805c4 <SystemInit+0x8c>)
   80572:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80574:	f023 0303 	bic.w	r3, r3, #3
   80578:	f043 0301 	orr.w	r3, r3, #1
   8057c:	6313      	str	r3, [r2, #48]	; 0x30
   8057e:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80580:	f013 0f08 	tst.w	r3, #8
   80584:	d0fb      	beq.n	8057e <SystemInit+0x46>
   80586:	4a12      	ldr	r2, [pc, #72]	; (805d0 <SystemInit+0x98>)
   80588:	4b0e      	ldr	r3, [pc, #56]	; (805c4 <SystemInit+0x8c>)
   8058a:	629a      	str	r2, [r3, #40]	; 0x28
   8058c:	461a      	mov	r2, r3
   8058e:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80590:	f013 0f02 	tst.w	r3, #2
   80594:	d0fb      	beq.n	8058e <SystemInit+0x56>
   80596:	2211      	movs	r2, #17
   80598:	4b0a      	ldr	r3, [pc, #40]	; (805c4 <SystemInit+0x8c>)
   8059a:	631a      	str	r2, [r3, #48]	; 0x30
   8059c:	461a      	mov	r2, r3
   8059e:	6e93      	ldr	r3, [r2, #104]	; 0x68
   805a0:	f013 0f08 	tst.w	r3, #8
   805a4:	d0fb      	beq.n	8059e <SystemInit+0x66>
   805a6:	2212      	movs	r2, #18
   805a8:	4b06      	ldr	r3, [pc, #24]	; (805c4 <SystemInit+0x8c>)
   805aa:	631a      	str	r2, [r3, #48]	; 0x30
   805ac:	461a      	mov	r2, r3
   805ae:	6e93      	ldr	r3, [r2, #104]	; 0x68
   805b0:	f013 0f08 	tst.w	r3, #8
   805b4:	d0fb      	beq.n	805ae <SystemInit+0x76>
   805b6:	4a07      	ldr	r2, [pc, #28]	; (805d4 <SystemInit+0x9c>)
   805b8:	4b07      	ldr	r3, [pc, #28]	; (805d8 <SystemInit+0xa0>)
   805ba:	601a      	str	r2, [r3, #0]
   805bc:	4770      	bx	lr
   805be:	bf00      	nop
   805c0:	400e0a00 	.word	0x400e0a00
   805c4:	400e0600 	.word	0x400e0600
   805c8:	00370809 	.word	0x00370809
   805cc:	01370809 	.word	0x01370809
   805d0:	200d3f01 	.word	0x200d3f01
   805d4:	0501bd00 	.word	0x0501bd00
   805d8:	20000000 	.word	0x20000000

000805dc <move_solenoid>:
 #include "sam.h"
 
 uint8_t previous = 1;
 uint8_t y_value_pi = 0;
 
 void move_solenoid(){
   805dc:	b510      	push	{r4, lr}
	 //printf("joystick.x_val : %d \n\r", joystick.x_val);
	 
	  
	 
	 if(joystick.x_val < 0){
   805de:	4b17      	ldr	r3, [pc, #92]	; (8063c <move_solenoid+0x60>)
   805e0:	f993 0000 	ldrsb.w	r0, [r3]
   805e4:	2800      	cmp	r0, #0
   805e6:	db0f      	blt.n	80608 <move_solenoid+0x2c>
		 uint8_t val = 50-abs(joystick.x_val)*0.5;
		 timer_change_duty(val);
	 }
	 if(joystick.x_val >= 0){
		 uint8_t val2 = 50+joystick.x_val*0.5;
   805e8:	4b15      	ldr	r3, [pc, #84]	; (80640 <move_solenoid+0x64>)
   805ea:	4798      	blx	r3
   805ec:	2200      	movs	r2, #0
   805ee:	4b15      	ldr	r3, [pc, #84]	; (80644 <move_solenoid+0x68>)
   805f0:	4c15      	ldr	r4, [pc, #84]	; (80648 <move_solenoid+0x6c>)
   805f2:	47a0      	blx	r4
   805f4:	2200      	movs	r2, #0
   805f6:	4b15      	ldr	r3, [pc, #84]	; (8064c <move_solenoid+0x70>)
   805f8:	4c15      	ldr	r4, [pc, #84]	; (80650 <move_solenoid+0x74>)
   805fa:	47a0      	blx	r4
   805fc:	4b15      	ldr	r3, [pc, #84]	; (80654 <move_solenoid+0x78>)
   805fe:	4798      	blx	r3
		 timer_change_duty(val2);
   80600:	b2c0      	uxtb	r0, r0
   80602:	4b15      	ldr	r3, [pc, #84]	; (80658 <move_solenoid+0x7c>)
   80604:	4798      	blx	r3
   80606:	bd10      	pop	{r4, pc}
		 uint8_t val = 50-abs(joystick.x_val)*0.5;
   80608:	2800      	cmp	r0, #0
   8060a:	bfb8      	it	lt
   8060c:	4240      	neglt	r0, r0
   8060e:	4b0c      	ldr	r3, [pc, #48]	; (80640 <move_solenoid+0x64>)
   80610:	4798      	blx	r3
   80612:	2200      	movs	r2, #0
   80614:	4b0b      	ldr	r3, [pc, #44]	; (80644 <move_solenoid+0x68>)
   80616:	4c0c      	ldr	r4, [pc, #48]	; (80648 <move_solenoid+0x6c>)
   80618:	47a0      	blx	r4
   8061a:	4602      	mov	r2, r0
   8061c:	460b      	mov	r3, r1
   8061e:	2000      	movs	r0, #0
   80620:	490a      	ldr	r1, [pc, #40]	; (8064c <move_solenoid+0x70>)
   80622:	4c0e      	ldr	r4, [pc, #56]	; (8065c <move_solenoid+0x80>)
   80624:	47a0      	blx	r4
   80626:	4b0b      	ldr	r3, [pc, #44]	; (80654 <move_solenoid+0x78>)
   80628:	4798      	blx	r3
		 timer_change_duty(val);
   8062a:	b2c0      	uxtb	r0, r0
   8062c:	4b0a      	ldr	r3, [pc, #40]	; (80658 <move_solenoid+0x7c>)
   8062e:	4798      	blx	r3
	 if(joystick.x_val >= 0){
   80630:	4b02      	ldr	r3, [pc, #8]	; (8063c <move_solenoid+0x60>)
   80632:	f993 0000 	ldrsb.w	r0, [r3]
   80636:	2800      	cmp	r0, #0
   80638:	dbe5      	blt.n	80606 <move_solenoid+0x2a>
   8063a:	e7d5      	b.n	805e8 <move_solenoid+0xc>
   8063c:	2000049c 	.word	0x2000049c
   80640:	000811d9 	.word	0x000811d9
   80644:	3fe00000 	.word	0x3fe00000
   80648:	000812a5 	.word	0x000812a5
   8064c:	40490000 	.word	0x40490000
   80650:	00080f41 	.word	0x00080f41
   80654:	00081719 	.word	0x00081719
   80658:	00080cb9 	.word	0x00080cb9
   8065c:	00080f3d 	.word	0x00080f3d

00080660 <change_motor_speed_using_paadrag>:
 }

void change_motor_speed_using_paadrag(int paadrag){
	//printf("joystick.y_val : %d \n\r", joystick.y_val);
	
	if(paadrag < 0){
   80660:	2800      	cmp	r0, #0
		PIOD->PIO_CODR = PIO_CODR_P10; //set direction left
   80662:	f44f 6280 	mov.w	r2, #1024	; 0x400
   80666:	4b06      	ldr	r3, [pc, #24]	; (80680 <change_motor_speed_using_paadrag+0x20>)
   80668:	bfb4      	ite	lt
   8066a:	635a      	strlt	r2, [r3, #52]	; 0x34
		uint16_t val = abs(paadrag);
		DACC->DACC_CDR = val;
	}else{
		PIOD->PIO_SODR = PIO_SODR_P10; //set direction right
   8066c:	631a      	strge	r2, [r3, #48]	; 0x30
		uint16_t val2 = abs(paadrag);
   8066e:	2800      	cmp	r0, #0
   80670:	bfb8      	it	lt
   80672:	4240      	neglt	r0, r0
		DACC->DACC_CDR = val2;
   80674:	b280      	uxth	r0, r0
   80676:	f5a3 33ca 	sub.w	r3, r3, #103424	; 0x19400
   8067a:	6218      	str	r0, [r3, #32]
   8067c:	4770      	bx	lr
   8067e:	bf00      	nop
   80680:	400e1400 	.word	0x400e1400

00080684 <motor_box_init>:
	}
}
 

void motor_box_init(){
	PIOD->PIO_PER |= PIO_PER_P10; //PIO Enable Register, PIO Enable //pin32 DIR PD10
   80684:	4b20      	ldr	r3, [pc, #128]	; (80708 <motor_box_init+0x84>)
   80686:	681a      	ldr	r2, [r3, #0]
   80688:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   8068c:	601a      	str	r2, [r3, #0]
	PIOD->PIO_OER |= PIO_OER_P10; //Output Enable Register, Output Enable //pin32 DIR PD10
   8068e:	691a      	ldr	r2, [r3, #16]
   80690:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   80694:	611a      	str	r2, [r3, #16]
	PIOD->PIO_PER |= PIO_PER_P9; //PIO Enable Register, PIO Enable //pin30 EN PD9
   80696:	681a      	ldr	r2, [r3, #0]
   80698:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   8069c:	601a      	str	r2, [r3, #0]
	PIOD->PIO_OER |= PIO_OER_P9; //Output Enable Register, Output Enable //pin30 EN PD9
   8069e:	691a      	ldr	r2, [r3, #16]
   806a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   806a4:	611a      	str	r2, [r3, #16]
	
	PIOD->PIO_SODR = PIO_SODR_P9; //Set Output Data Register, Set Output Data
   806a6:	f44f 7200 	mov.w	r2, #512	; 0x200
   806aa:	631a      	str	r2, [r3, #48]	; 0x30
	PIOD->PIO_CODR = PIO_CODR_P10; //Clear Output Data Register, Set Output Data
   806ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
   806b0:	635a      	str	r2, [r3, #52]	; 0x34
	
	PMC->PMC_PCER0 = PMC_PCER0_PID13;
   806b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   806b6:	4a15      	ldr	r2, [pc, #84]	; (8070c <motor_box_init+0x88>)
   806b8:	6111      	str	r1, [r2, #16]

	
	//allow counter to start
	PIOD->PIO_SODR |= PIO_SODR_P1; //!RST high
   806ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   806bc:	f042 0202 	orr.w	r2, r2, #2
   806c0:	631a      	str	r2, [r3, #48]	; 0x30
	
	//enable pins for reading encoder
	PIOC->PIO_PER |= PIO_PER_P8; //DO7
   806c2:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
   806c6:	681a      	ldr	r2, [r3, #0]
   806c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   806cc:	601a      	str	r2, [r3, #0]
	PIOC->PIO_PER |= PIO_PER_P7; //DO6
   806ce:	681a      	ldr	r2, [r3, #0]
   806d0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   806d4:	601a      	str	r2, [r3, #0]
	PIOC->PIO_PER |= PIO_PER_P6; //DO5
   806d6:	681a      	ldr	r2, [r3, #0]
   806d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   806dc:	601a      	str	r2, [r3, #0]
	PIOC->PIO_PER |= PIO_PER_P5; //DO4
   806de:	681a      	ldr	r2, [r3, #0]
   806e0:	f042 0220 	orr.w	r2, r2, #32
   806e4:	601a      	str	r2, [r3, #0]
	PIOC->PIO_PER |= PIO_PER_P4; //DO3
   806e6:	681a      	ldr	r2, [r3, #0]
   806e8:	f042 0210 	orr.w	r2, r2, #16
   806ec:	601a      	str	r2, [r3, #0]
	PIOC->PIO_PER |= PIO_PER_P3; //DO2
   806ee:	681a      	ldr	r2, [r3, #0]
   806f0:	f042 0208 	orr.w	r2, r2, #8
   806f4:	601a      	str	r2, [r3, #0]
	PIOC->PIO_PER |= PIO_PER_P2; //DO1
   806f6:	681a      	ldr	r2, [r3, #0]
   806f8:	f042 0204 	orr.w	r2, r2, #4
   806fc:	601a      	str	r2, [r3, #0]
	PIOC->PIO_PER |= PIO_PER_P1; //DO0
   806fe:	681a      	ldr	r2, [r3, #0]
   80700:	f042 0202 	orr.w	r2, r2, #2
   80704:	601a      	str	r2, [r3, #0]
   80706:	4770      	bx	lr
   80708:	400e1400 	.word	0x400e1400
   8070c:	400e0600 	.word	0x400e0600

00080710 <encoder_read>:
}


uint8_t encoder_read(){
   80710:	b508      	push	{r3, lr}
	// PIO (Output) Enable Register, PIO Enable
	PIOD->PIO_PER |= PIO_PER_P2; // Pin 27 sel PD2 SEL
   80712:	4b2a      	ldr	r3, [pc, #168]	; (807bc <encoder_read+0xac>)
   80714:	681a      	ldr	r2, [r3, #0]
   80716:	f042 0204 	orr.w	r2, r2, #4
   8071a:	601a      	str	r2, [r3, #0]
	PIOD->PIO_OER |= PIO_OER_P2; // 
   8071c:	691a      	ldr	r2, [r3, #16]
   8071e:	f042 0204 	orr.w	r2, r2, #4
   80722:	611a      	str	r2, [r3, #16]
	PIOD->PIO_PER |= PIO_PER_P1; // Pin 26 not_rst PD1 !RST
   80724:	681a      	ldr	r2, [r3, #0]
   80726:	f042 0202 	orr.w	r2, r2, #2
   8072a:	601a      	str	r2, [r3, #0]
	PIOD->PIO_OER |= PIO_OER_P1; // 
   8072c:	691a      	ldr	r2, [r3, #16]
   8072e:	f042 0202 	orr.w	r2, r2, #2
   80732:	611a      	str	r2, [r3, #16]
	PIOD->PIO_PER |= PIO_PER_P0; // Pin 25 not_oe PD0 !OE
   80734:	681a      	ldr	r2, [r3, #0]
   80736:	f042 0201 	orr.w	r2, r2, #1
   8073a:	601a      	str	r2, [r3, #0]
	PIOD->PIO_OER |= PIO_OER_P0; // 
   8073c:	691a      	ldr	r2, [r3, #16]
   8073e:	f042 0201 	orr.w	r2, r2, #1
   80742:	611a      	str	r2, [r3, #16]
	
	PIOD->PIO_CODR |= PIO_CODR_P0; //!OE low
   80744:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   80746:	f042 0201 	orr.w	r2, r2, #1
   8074a:	635a      	str	r2, [r3, #52]	; 0x34
	PIOD->PIO_CODR |= PIO_CODR_P2; //SEL low
   8074c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   8074e:	f042 0204 	orr.w	r2, r2, #4
   80752:	635a      	str	r2, [r3, #52]	; 0x34
   80754:	f44f 6348 	mov.w	r3, #3200	; 0xc80
	
	//10 microsec
	for(int i = 0; i < 3200; i++){
   80758:	3b01      	subs	r3, #1
   8075a:	d1fd      	bne.n	80758 <encoder_read+0x48>
	}
	
	uint8_t MSB = (PIOC->PIO_PDSR >> 1);
   8075c:	4b18      	ldr	r3, [pc, #96]	; (807c0 <encoder_read+0xb0>)
   8075e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   80760:	0849      	lsrs	r1, r1, #1
	//printf("PIO_PDSR: -----%x \n\r", PIOC->PIO_PDSR);
	PIOD->PIO_SODR |= PIO_SODR_P2; //SEL high
   80762:	4a16      	ldr	r2, [pc, #88]	; (807bc <encoder_read+0xac>)
   80764:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80766:	f043 0304 	orr.w	r3, r3, #4
   8076a:	6313      	str	r3, [r2, #48]	; 0x30
   8076c:	f44f 6348 	mov.w	r3, #3200	; 0xc80
	
	//10 microsec
	for(int i = 0; i < 3200; i++){
   80770:	3b01      	subs	r3, #1
   80772:	d1fd      	bne.n	80770 <encoder_read+0x60>
	}
	uint8_t LSB = PIOC->PIO_PDSR >> 1;
   80774:	4b12      	ldr	r3, [pc, #72]	; (807c0 <encoder_read+0xb0>)
   80776:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	
	PIOD->PIO_CODR |= PIO_CODR_P1; //!RST low
   80778:	f503 7300 	add.w	r3, r3, #512	; 0x200
   8077c:	6b58      	ldr	r0, [r3, #52]	; 0x34
   8077e:	f040 0002 	orr.w	r0, r0, #2
   80782:	6358      	str	r0, [r3, #52]	; 0x34
	PIOD->PIO_SODR |= PIO_SODR_P1; //!RST high
   80784:	6b18      	ldr	r0, [r3, #48]	; 0x30
   80786:	f040 0002 	orr.w	r0, r0, #2
   8078a:	6318      	str	r0, [r3, #48]	; 0x30
	PIOD->PIO_SODR |= PIO_SODR_P0; //!OE high
   8078c:	6b18      	ldr	r0, [r3, #48]	; 0x30
   8078e:	f040 0001 	orr.w	r0, r0, #1
   80792:	6318      	str	r0, [r3, #48]	; 0x30
	
	uint16_t encoder_data = (LSB | (MSB << 8));
   80794:	0209      	lsls	r1, r1, #8
   80796:	b289      	uxth	r1, r1
	int encoder_data_int = LSB | (MSB << 8);
   80798:	f3c2 0347 	ubfx	r3, r2, #1, #8
   8079c:	4319      	orrs	r1, r3
	y_value_pi = (8888-encoder_data_int)/88; //scaled so that value is 0-100;
   8079e:	f5c1 530a 	rsb	r3, r1, #8832	; 0x2280
   807a2:	3338      	adds	r3, #56	; 0x38
   807a4:	4a07      	ldr	r2, [pc, #28]	; (807c4 <encoder_read+0xb4>)
   807a6:	fb82 0203 	smull	r0, r2, r2, r3
   807aa:	17db      	asrs	r3, r3, #31
   807ac:	ebc3 1322 	rsb	r3, r3, r2, asr #4
   807b0:	4a05      	ldr	r2, [pc, #20]	; (807c8 <encoder_read+0xb8>)
   807b2:	7013      	strb	r3, [r2, #0]
 	printf("Encoder data: %x \n\r", encoder_data_int);
   807b4:	4805      	ldr	r0, [pc, #20]	; (807cc <encoder_read+0xbc>)
   807b6:	4b06      	ldr	r3, [pc, #24]	; (807d0 <encoder_read+0xc0>)
   807b8:	4798      	blx	r3
// 		printf("Data negative: -%d \n\r", encoder_data);
// 	}
// 	else{
// 		printf("Data positive: %d \n\r", encoder_data);
// 	}
}
   807ba:	bd08      	pop	{r3, pc}
   807bc:	400e1400 	.word	0x400e1400
   807c0:	400e1200 	.word	0x400e1200
   807c4:	2e8ba2e9 	.word	0x2e8ba2e9
   807c8:	2000047b 	.word	0x2000047b
   807cc:	00081928 	.word	0x00081928
   807d0:	00080c21 	.word	0x00080c21

000807d4 <button_check>:

uint8_t button_check(uint8_t current){
	if(current == 0 && previous == 1){
   807d4:	4603      	mov	r3, r0
   807d6:	b948      	cbnz	r0, 807ec <button_check+0x18>
   807d8:	4a07      	ldr	r2, [pc, #28]	; (807f8 <button_check+0x24>)
   807da:	7810      	ldrb	r0, [r2, #0]
   807dc:	2801      	cmp	r0, #1
   807de:	d001      	beq.n	807e4 <button_check+0x10>
		return 1;
		}else if(current != 0){
		previous = 1;
		//printf("%s", "C");
	}
	return 0;
   807e0:	4618      	mov	r0, r3
   807e2:	4770      	bx	lr
		previous = 0;
   807e4:	2200      	movs	r2, #0
   807e6:	4b04      	ldr	r3, [pc, #16]	; (807f8 <button_check+0x24>)
   807e8:	701a      	strb	r2, [r3, #0]
		return 1;
   807ea:	4770      	bx	lr
		previous = 1;
   807ec:	2201      	movs	r2, #1
   807ee:	4b02      	ldr	r3, [pc, #8]	; (807f8 <button_check+0x24>)
   807f0:	701a      	strb	r2, [r3, #0]
	return 0;
   807f2:	2000      	movs	r0, #0
   807f4:	4770      	bx	lr
   807f6:	bf00      	nop
   807f8:	20000004 	.word	0x20000004

000807fc <main>:
#include "dac_controller.h"
#include "motor_controller.h"
#include "timer.h"

int main(void)
{
   807fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    /* Initialize the SAM system */
    SystemInit();
   80800:	4b3b      	ldr	r3, [pc, #236]	; (808f0 <main+0xf4>)
   80802:	4798      	blx	r3
	WDT->WDT_MR |= 1 << 15;
   80804:	4a3b      	ldr	r2, [pc, #236]	; (808f4 <main+0xf8>)
   80806:	6853      	ldr	r3, [r2, #4]
   80808:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
   8080c:	6053      	str	r3, [r2, #4]
	configure_uart();
   8080e:	4b3a      	ldr	r3, [pc, #232]	; (808f8 <main+0xfc>)
   80810:	4798      	blx	r3
	can_init_def_tx_rx_mb(0x00290561); // 0x00290561 = 0b 00000000001010010000010101100001// 0b000000000000100100010001000100010
   80812:	483a      	ldr	r0, [pc, #232]	; (808fc <main+0x100>)
   80814:	4b3a      	ldr	r3, [pc, #232]	; (80900 <main+0x104>)
   80816:	4798      	blx	r3
	
	printf("hello\n\r");
   80818:	483a      	ldr	r0, [pc, #232]	; (80904 <main+0x108>)
   8081a:	4b3b      	ldr	r3, [pc, #236]	; (80908 <main+0x10c>)
   8081c:	4798      	blx	r3
	PWM->PWM_CH_NUM[2].PWM_CMR &= ~PWM_CMR_CPOL;
	
	PIOA->PIO_ABSR |= PIO_ABSR_P5; //PIO set peripheral b on pin 5*/
	
	
	timer_init();
   8081e:	4b3b      	ldr	r3, [pc, #236]	; (8090c <main+0x110>)
   80820:	4798      	blx	r3
	timer_change_duty(100);
   80822:	2064      	movs	r0, #100	; 0x64
   80824:	4b3a      	ldr	r3, [pc, #232]	; (80910 <main+0x114>)
   80826:	4798      	blx	r3
	//init_interrupt_PI();
	init_ch1_PI();
   80828:	4b3a      	ldr	r3, [pc, #232]	; (80914 <main+0x118>)
   8082a:	4798      	blx	r3
	
	adc_init();
   8082c:	4b3a      	ldr	r3, [pc, #232]	; (80918 <main+0x11c>)
   8082e:	4798      	blx	r3
	dac_init();
   80830:	4b3a      	ldr	r3, [pc, #232]	; (8091c <main+0x120>)
   80832:	4798      	blx	r3
	
	
	motor_box_init();
   80834:	4b3a      	ldr	r3, [pc, #232]	; (80920 <main+0x124>)
   80836:	4798      	blx	r3
	
	
	
	
	//enable and set high, pin to controll servo shoot, pin50 on shield
	PIOC->PIO_PER |= PIO_PER_P13; 
   80838:	4b3a      	ldr	r3, [pc, #232]	; (80924 <main+0x128>)
   8083a:	681a      	ldr	r2, [r3, #0]
   8083c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   80840:	601a      	str	r2, [r3, #0]
	PIOC->PIO_OER |= PIO_OER_P13; 
   80842:	691a      	ldr	r2, [r3, #16]
   80844:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   80848:	611a      	str	r2, [r3, #16]
	PIOC->PIO_SODR |= PIO_SODR_P13;
   8084a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   8084c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   80850:	631a      	str	r2, [r3, #48]	; 0x30
	
	
	
	
	PIOA->PIO_PER |= PIO_PER_P19; //PIO Enable Register, PIO Enable
   80852:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
   80856:	681a      	ldr	r2, [r3, #0]
   80858:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   8085c:	601a      	str	r2, [r3, #0]
	PIOA->PIO_OER |= PIO_OER_P19; //Output Enable Register, Output Enable
   8085e:	691a      	ldr	r2, [r3, #16]
   80860:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   80864:	611a      	str	r2, [r3, #16]
	
	PIOA->PIO_PER |= PIO_PER_P20; //PIO Enable Register, PIO Enable
   80866:	681a      	ldr	r2, [r3, #0]
   80868:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   8086c:	601a      	str	r2, [r3, #0]
	PIOA->PIO_OER |= PIO_OER_P20; //Output Enable Register, Output Enable
   8086e:	691a      	ldr	r2, [r3, #16]
   80870:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   80874:	611a      	str	r2, [r3, #16]
	/*PIOA->PIO_PER |= PIO_PER_P8; //PIO Enable Register, PIO Enable
	PIOA->PIO_OER |= PIO_OER_P8; //Output Enable Register, Output Enable
	PIOA->PIO_PER |= PIO_PER_P9; //PIO Enable Register, PIO Enable
	PIOA->PIO_OER |= PIO_OER_P9; //Output Enable Register, Output Enable*/
	volatile CAN_MESSAGE msg;
	SysTick_init();
   80876:	4b2c      	ldr	r3, [pc, #176]	; (80928 <main+0x12c>)
   80878:	4798      	blx	r3
    while (1) 
    {
		
		PIOA->PIO_SODR = PIO_SODR_P19; //Set Output Data Register, Set Output Data
   8087a:	4c2c      	ldr	r4, [pc, #176]	; (8092c <main+0x130>)
		move_solenoid();
		//change_motor_speed();
		encoder_read();
		
		if(button_check(joystick.butt_pressed)){
			PIOC->PIO_CODR |= PIO_CODR_P13;
   8087c:	4d29      	ldr	r5, [pc, #164]	; (80924 <main+0x128>)
   8087e:	e032      	b.n	808e6 <main+0xea>
		}
		
		
		//printf("%d",ADC->ADC_ISR);
// 		printf("adc_input : %x   \n\r", ADC->ADC_CDR[1]);
 		printf("goals : %d   \n\r", TOTAL_GOALS);
   80880:	4b2b      	ldr	r3, [pc, #172]	; (80930 <main+0x134>)
   80882:	7819      	ldrb	r1, [r3, #0]
   80884:	482b      	ldr	r0, [pc, #172]	; (80934 <main+0x138>)
   80886:	4b20      	ldr	r3, [pc, #128]	; (80908 <main+0x10c>)
   80888:	4798      	blx	r3
		printf("joyleft : %d   \n\r", joystick.x_val);
		printf("joyright : %d   \n\r", joystick.y_val);*/
		//printf("adc_input : %d ::::", ADC->ADC_LCDR & 0x00000CE4);
		
		
		if(TO_INCREMENT){
   8088a:	4b2b      	ldr	r3, [pc, #172]	; (80938 <main+0x13c>)
   8088c:	781b      	ldrb	r3, [r3, #0]
   8088e:	bb23      	cbnz	r3, 808da <main+0xde>
		PIOA->PIO_SODR = PIO_SODR_P19; //Set Output Data Register, Set Output Data
   80890:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
   80894:	4b29      	ldr	r3, [pc, #164]	; (8093c <main+0x140>)
		for(int i = 0; i < 1600000; i++){
   80896:	3b01      	subs	r3, #1
   80898:	d1fd      	bne.n	80896 <main+0x9a>
		PIOA->PIO_CODR = PIO_CODR_P19; //Clear Output Data Register, Set Output Data
   8089a:	6366      	str	r6, [r4, #52]	; 0x34
		PIOA->PIO_SODR = PIO_SODR_P20; //Set Output Data Register, Set Output Data
   8089c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   808a0:	6323      	str	r3, [r4, #48]	; 0x30
   808a2:	4b26      	ldr	r3, [pc, #152]	; (8093c <main+0x140>)
		for(int i = 0; i < 1600000; i++){
   808a4:	3b01      	subs	r3, #1
   808a6:	d1fd      	bne.n	808a4 <main+0xa8>
		PIOA->PIO_CODR |= PIO_CODR_P20; //Clear Output Data Register,
   808a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
   808aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   808ae:	6363      	str	r3, [r4, #52]	; 0x34
		move_solenoid();
   808b0:	47b8      	blx	r7
		encoder_read();
   808b2:	4b23      	ldr	r3, [pc, #140]	; (80940 <main+0x144>)
   808b4:	4798      	blx	r3
		if(button_check(joystick.butt_pressed)){
   808b6:	4b23      	ldr	r3, [pc, #140]	; (80944 <main+0x148>)
   808b8:	7898      	ldrb	r0, [r3, #2]
   808ba:	4b23      	ldr	r3, [pc, #140]	; (80948 <main+0x14c>)
   808bc:	4798      	blx	r3
   808be:	2800      	cmp	r0, #0
   808c0:	d0de      	beq.n	80880 <main+0x84>
			PIOC->PIO_CODR |= PIO_CODR_P13;
   808c2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   808c4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   808c8:	636b      	str	r3, [r5, #52]	; 0x34
   808ca:	4b1c      	ldr	r3, [pc, #112]	; (8093c <main+0x140>)
			for(int i = 0; i < 1600000; i++){
   808cc:	3b01      	subs	r3, #1
   808ce:	d1fd      	bne.n	808cc <main+0xd0>
			PIOC->PIO_SODR |= PIO_SODR_P13;
   808d0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   808d2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   808d6:	632b      	str	r3, [r5, #48]	; 0x30
   808d8:	e7d2      	b.n	80880 <main+0x84>
			printf("to_increment");
   808da:	481c      	ldr	r0, [pc, #112]	; (8094c <main+0x150>)
   808dc:	4b0a      	ldr	r3, [pc, #40]	; (80908 <main+0x10c>)
   808de:	4798      	blx	r3
   808e0:	4b1b      	ldr	r3, [pc, #108]	; (80950 <main+0x154>)
			//goal_counter();
			for(int j = 0; j < 5*1600000; j++){
   808e2:	3b01      	subs	r3, #1
   808e4:	d1fd      	bne.n	808e2 <main+0xe6>
		PIOA->PIO_SODR = PIO_SODR_P19; //Set Output Data Register, Set Output Data
   808e6:	f44f 2600 	mov.w	r6, #524288	; 0x80000
   808ea:	46b0      	mov	r8, r6
		move_solenoid();
   808ec:	4f19      	ldr	r7, [pc, #100]	; (80954 <main+0x158>)
   808ee:	e7cf      	b.n	80890 <main+0x94>
   808f0:	00080539 	.word	0x00080539
   808f4:	400e1a50 	.word	0x400e1a50
   808f8:	00080e41 	.word	0x00080e41
   808fc:	00290561 	.word	0x00290561
   80900:	000802d9 	.word	0x000802d9
   80904:	0008193c 	.word	0x0008193c
   80908:	00080c21 	.word	0x00080c21
   8090c:	00080c75 	.word	0x00080c75
   80910:	00080cb9 	.word	0x00080cb9
   80914:	00080de9 	.word	0x00080de9
   80918:	00080161 	.word	0x00080161
   8091c:	00080481 	.word	0x00080481
   80920:	00080685 	.word	0x00080685
   80924:	400e1200 	.word	0x400e1200
   80928:	00080c45 	.word	0x00080c45
   8092c:	400e0e00 	.word	0x400e0e00
   80930:	20000478 	.word	0x20000478
   80934:	00081944 	.word	0x00081944
   80938:	2000047a 	.word	0x2000047a
   8093c:	00186a00 	.word	0x00186a00
   80940:	00080711 	.word	0x00080711
   80944:	2000049c 	.word	0x2000049c
   80948:	000807d5 	.word	0x000807d5
   8094c:	00081954 	.word	0x00081954
   80950:	007a1200 	.word	0x007a1200
   80954:	000805dd 	.word	0x000805dd

00080958 <prints>:
   80958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8095c:	460d      	mov	r5, r1
   8095e:	1e16      	subs	r6, r2, #0
   80960:	dd48      	ble.n	809f4 <prints+0x9c>
   80962:	780a      	ldrb	r2, [r1, #0]
   80964:	2a00      	cmp	r2, #0
   80966:	d035      	beq.n	809d4 <prints+0x7c>
   80968:	460a      	mov	r2, r1
   8096a:	2400      	movs	r4, #0
   8096c:	3401      	adds	r4, #1
   8096e:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   80972:	2900      	cmp	r1, #0
   80974:	d1fa      	bne.n	8096c <prints+0x14>
   80976:	42a6      	cmp	r6, r4
   80978:	dc2d      	bgt.n	809d6 <prints+0x7e>
   8097a:	2400      	movs	r4, #0
   8097c:	f003 0202 	and.w	r2, r3, #2
   80980:	2a00      	cmp	r2, #0
   80982:	bf0c      	ite	eq
   80984:	f04f 0820 	moveq.w	r8, #32
   80988:	f04f 0830 	movne.w	r8, #48	; 0x30
   8098c:	f013 0301 	ands.w	r3, r3, #1
   80990:	d123      	bne.n	809da <prints+0x82>
   80992:	2c00      	cmp	r4, #0
   80994:	dd28      	ble.n	809e8 <prints+0x90>
   80996:	4626      	mov	r6, r4
   80998:	fa5f f988 	uxtb.w	r9, r8
   8099c:	4f18      	ldr	r7, [pc, #96]	; (80a00 <prints+0xa8>)
   8099e:	4648      	mov	r0, r9
   809a0:	47b8      	blx	r7
   809a2:	3e01      	subs	r6, #1
   809a4:	d1fb      	bne.n	8099e <prints+0x46>
   809a6:	7828      	ldrb	r0, [r5, #0]
   809a8:	b188      	cbz	r0, 809ce <prints+0x76>
   809aa:	4f15      	ldr	r7, [pc, #84]	; (80a00 <prints+0xa8>)
   809ac:	47b8      	blx	r7
   809ae:	3401      	adds	r4, #1
   809b0:	f815 0f01 	ldrb.w	r0, [r5, #1]!
   809b4:	2800      	cmp	r0, #0
   809b6:	d1f9      	bne.n	809ac <prints+0x54>
   809b8:	2e00      	cmp	r6, #0
   809ba:	dd08      	ble.n	809ce <prints+0x76>
   809bc:	4635      	mov	r5, r6
   809be:	fa5f f888 	uxtb.w	r8, r8
   809c2:	4f0f      	ldr	r7, [pc, #60]	; (80a00 <prints+0xa8>)
   809c4:	4640      	mov	r0, r8
   809c6:	47b8      	blx	r7
   809c8:	3d01      	subs	r5, #1
   809ca:	d1fb      	bne.n	809c4 <prints+0x6c>
   809cc:	4434      	add	r4, r6
   809ce:	4620      	mov	r0, r4
   809d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   809d4:	2400      	movs	r4, #0
   809d6:	1b34      	subs	r4, r6, r4
   809d8:	e7d0      	b.n	8097c <prints+0x24>
   809da:	4626      	mov	r6, r4
   809dc:	7828      	ldrb	r0, [r5, #0]
   809de:	b108      	cbz	r0, 809e4 <prints+0x8c>
   809e0:	2400      	movs	r4, #0
   809e2:	e7e2      	b.n	809aa <prints+0x52>
   809e4:	2400      	movs	r4, #0
   809e6:	e7e7      	b.n	809b8 <prints+0x60>
   809e8:	4626      	mov	r6, r4
   809ea:	461c      	mov	r4, r3
   809ec:	e7db      	b.n	809a6 <prints+0x4e>
   809ee:	f04f 0820 	mov.w	r8, #32
   809f2:	e7d8      	b.n	809a6 <prints+0x4e>
   809f4:	f013 0401 	ands.w	r4, r3, #1
   809f8:	d0f9      	beq.n	809ee <prints+0x96>
   809fa:	f04f 0820 	mov.w	r8, #32
   809fe:	e7ed      	b.n	809dc <prints+0x84>
   80a00:	00080ea9 	.word	0x00080ea9

00080a04 <printi>:
   80a04:	b5f0      	push	{r4, r5, r6, r7, lr}
   80a06:	b085      	sub	sp, #20
   80a08:	4607      	mov	r7, r0
   80a0a:	b381      	cbz	r1, 80a6e <printi+0x6a>
   80a0c:	460c      	mov	r4, r1
   80a0e:	b10b      	cbz	r3, 80a14 <printi+0x10>
   80a10:	2a0a      	cmp	r2, #10
   80a12:	d038      	beq.n	80a86 <printi+0x82>
   80a14:	2300      	movs	r3, #0
   80a16:	f88d 300f 	strb.w	r3, [sp, #15]
   80a1a:	2600      	movs	r6, #0
   80a1c:	2900      	cmp	r1, #0
   80a1e:	d046      	beq.n	80aae <printi+0xaa>
   80a20:	f10d 050f 	add.w	r5, sp, #15
   80a24:	990c      	ldr	r1, [sp, #48]	; 0x30
   80a26:	393a      	subs	r1, #58	; 0x3a
   80a28:	fbb4 f3f2 	udiv	r3, r4, r2
   80a2c:	fb02 4313 	mls	r3, r2, r3, r4
   80a30:	2b09      	cmp	r3, #9
   80a32:	bfc8      	it	gt
   80a34:	185b      	addgt	r3, r3, r1
   80a36:	3330      	adds	r3, #48	; 0x30
   80a38:	f805 3d01 	strb.w	r3, [r5, #-1]!
   80a3c:	fbb4 f4f2 	udiv	r4, r4, r2
   80a40:	2c00      	cmp	r4, #0
   80a42:	d1f1      	bne.n	80a28 <printi+0x24>
   80a44:	b156      	cbz	r6, 80a5c <printi+0x58>
   80a46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   80a48:	b11b      	cbz	r3, 80a52 <printi+0x4e>
   80a4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80a4c:	f013 0f02 	tst.w	r3, #2
   80a50:	d125      	bne.n	80a9e <printi+0x9a>
   80a52:	232d      	movs	r3, #45	; 0x2d
   80a54:	f805 3c01 	strb.w	r3, [r5, #-1]
   80a58:	3d01      	subs	r5, #1
   80a5a:	2600      	movs	r6, #0
   80a5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80a5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   80a60:	4629      	mov	r1, r5
   80a62:	4638      	mov	r0, r7
   80a64:	4c14      	ldr	r4, [pc, #80]	; (80ab8 <printi+0xb4>)
   80a66:	47a0      	blx	r4
   80a68:	4430      	add	r0, r6
   80a6a:	b005      	add	sp, #20
   80a6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80a6e:	2330      	movs	r3, #48	; 0x30
   80a70:	f88d 3004 	strb.w	r3, [sp, #4]
   80a74:	2300      	movs	r3, #0
   80a76:	f88d 3005 	strb.w	r3, [sp, #5]
   80a7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80a7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   80a7e:	a901      	add	r1, sp, #4
   80a80:	4c0d      	ldr	r4, [pc, #52]	; (80ab8 <printi+0xb4>)
   80a82:	47a0      	blx	r4
   80a84:	e7f1      	b.n	80a6a <printi+0x66>
   80a86:	2900      	cmp	r1, #0
   80a88:	dac4      	bge.n	80a14 <printi+0x10>
   80a8a:	424c      	negs	r4, r1
   80a8c:	2300      	movs	r3, #0
   80a8e:	f88d 300f 	strb.w	r3, [sp, #15]
   80a92:	f10d 050f 	add.w	r5, sp, #15
   80a96:	2c00      	cmp	r4, #0
   80a98:	d0d5      	beq.n	80a46 <printi+0x42>
   80a9a:	2601      	movs	r6, #1
   80a9c:	e7c0      	b.n	80a20 <printi+0x1c>
   80a9e:	202d      	movs	r0, #45	; 0x2d
   80aa0:	4b06      	ldr	r3, [pc, #24]	; (80abc <printi+0xb8>)
   80aa2:	4798      	blx	r3
   80aa4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   80aa6:	3b01      	subs	r3, #1
   80aa8:	930a      	str	r3, [sp, #40]	; 0x28
   80aaa:	2601      	movs	r6, #1
   80aac:	e7d6      	b.n	80a5c <printi+0x58>
   80aae:	461e      	mov	r6, r3
   80ab0:	f10d 050f 	add.w	r5, sp, #15
   80ab4:	e7d2      	b.n	80a5c <printi+0x58>
   80ab6:	bf00      	nop
   80ab8:	00080959 	.word	0x00080959
   80abc:	00080ea9 	.word	0x00080ea9

00080ac0 <print>:
   80ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80ac4:	b087      	sub	sp, #28
   80ac6:	4680      	mov	r8, r0
   80ac8:	780b      	ldrb	r3, [r1, #0]
   80aca:	2b00      	cmp	r3, #0
   80acc:	f000 8094 	beq.w	80bf8 <print+0x138>
   80ad0:	468b      	mov	fp, r1
   80ad2:	4617      	mov	r7, r2
   80ad4:	2500      	movs	r5, #0
   80ad6:	4e4e      	ldr	r6, [pc, #312]	; (80c10 <print+0x150>)
   80ad8:	f8df a13c 	ldr.w	sl, [pc, #316]	; 80c18 <print+0x158>
   80adc:	f8df 913c 	ldr.w	r9, [pc, #316]	; 80c1c <print+0x15c>
   80ae0:	e046      	b.n	80b70 <print+0xb0>
   80ae2:	2200      	movs	r2, #0
   80ae4:	e070      	b.n	80bc8 <print+0x108>
   80ae6:	6839      	ldr	r1, [r7, #0]
   80ae8:	3704      	adds	r7, #4
   80aea:	484a      	ldr	r0, [pc, #296]	; (80c14 <print+0x154>)
   80aec:	2900      	cmp	r1, #0
   80aee:	bf08      	it	eq
   80af0:	4601      	moveq	r1, r0
   80af2:	4640      	mov	r0, r8
   80af4:	47d0      	blx	sl
   80af6:	4405      	add	r5, r0
   80af8:	e035      	b.n	80b66 <print+0xa6>
   80afa:	6839      	ldr	r1, [r7, #0]
   80afc:	3704      	adds	r7, #4
   80afe:	2061      	movs	r0, #97	; 0x61
   80b00:	9002      	str	r0, [sp, #8]
   80b02:	9301      	str	r3, [sp, #4]
   80b04:	9200      	str	r2, [sp, #0]
   80b06:	2301      	movs	r3, #1
   80b08:	220a      	movs	r2, #10
   80b0a:	4640      	mov	r0, r8
   80b0c:	47c8      	blx	r9
   80b0e:	4405      	add	r5, r0
   80b10:	e029      	b.n	80b66 <print+0xa6>
   80b12:	6839      	ldr	r1, [r7, #0]
   80b14:	3704      	adds	r7, #4
   80b16:	2061      	movs	r0, #97	; 0x61
   80b18:	9002      	str	r0, [sp, #8]
   80b1a:	9301      	str	r3, [sp, #4]
   80b1c:	9200      	str	r2, [sp, #0]
   80b1e:	2300      	movs	r3, #0
   80b20:	2210      	movs	r2, #16
   80b22:	4640      	mov	r0, r8
   80b24:	47c8      	blx	r9
   80b26:	4405      	add	r5, r0
   80b28:	e01d      	b.n	80b66 <print+0xa6>
   80b2a:	6839      	ldr	r1, [r7, #0]
   80b2c:	3704      	adds	r7, #4
   80b2e:	2041      	movs	r0, #65	; 0x41
   80b30:	9002      	str	r0, [sp, #8]
   80b32:	9301      	str	r3, [sp, #4]
   80b34:	9200      	str	r2, [sp, #0]
   80b36:	2300      	movs	r3, #0
   80b38:	2210      	movs	r2, #16
   80b3a:	4640      	mov	r0, r8
   80b3c:	47c8      	blx	r9
   80b3e:	4405      	add	r5, r0
   80b40:	e011      	b.n	80b66 <print+0xa6>
   80b42:	6839      	ldr	r1, [r7, #0]
   80b44:	3704      	adds	r7, #4
   80b46:	2061      	movs	r0, #97	; 0x61
   80b48:	9002      	str	r0, [sp, #8]
   80b4a:	9301      	str	r3, [sp, #4]
   80b4c:	9200      	str	r2, [sp, #0]
   80b4e:	2300      	movs	r3, #0
   80b50:	220a      	movs	r2, #10
   80b52:	4640      	mov	r0, r8
   80b54:	47c8      	blx	r9
   80b56:	4405      	add	r5, r0
   80b58:	e005      	b.n	80b66 <print+0xa6>
   80b5a:	46a3      	mov	fp, r4
   80b5c:	f89b 0000 	ldrb.w	r0, [fp]
   80b60:	47b0      	blx	r6
   80b62:	3501      	adds	r5, #1
   80b64:	465c      	mov	r4, fp
   80b66:	f104 0b01 	add.w	fp, r4, #1
   80b6a:	7863      	ldrb	r3, [r4, #1]
   80b6c:	2b00      	cmp	r3, #0
   80b6e:	d044      	beq.n	80bfa <print+0x13a>
   80b70:	2b25      	cmp	r3, #37	; 0x25
   80b72:	d1f3      	bne.n	80b5c <print+0x9c>
   80b74:	f10b 0401 	add.w	r4, fp, #1
   80b78:	f89b 3001 	ldrb.w	r3, [fp, #1]
   80b7c:	2b00      	cmp	r3, #0
   80b7e:	d03c      	beq.n	80bfa <print+0x13a>
   80b80:	2b25      	cmp	r3, #37	; 0x25
   80b82:	d0ea      	beq.n	80b5a <print+0x9a>
   80b84:	2b2d      	cmp	r3, #45	; 0x2d
   80b86:	bf06      	itte	eq
   80b88:	f10b 0402 	addeq.w	r4, fp, #2
   80b8c:	2301      	moveq	r3, #1
   80b8e:	2300      	movne	r3, #0
   80b90:	7822      	ldrb	r2, [r4, #0]
   80b92:	2a30      	cmp	r2, #48	; 0x30
   80b94:	d105      	bne.n	80ba2 <print+0xe2>
   80b96:	f043 0302 	orr.w	r3, r3, #2
   80b9a:	f814 2f01 	ldrb.w	r2, [r4, #1]!
   80b9e:	2a30      	cmp	r2, #48	; 0x30
   80ba0:	d0f9      	beq.n	80b96 <print+0xd6>
   80ba2:	7821      	ldrb	r1, [r4, #0]
   80ba4:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   80ba8:	b2d2      	uxtb	r2, r2
   80baa:	2a09      	cmp	r2, #9
   80bac:	d899      	bhi.n	80ae2 <print+0x22>
   80bae:	2200      	movs	r2, #0
   80bb0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   80bb4:	3930      	subs	r1, #48	; 0x30
   80bb6:	eb01 0242 	add.w	r2, r1, r2, lsl #1
   80bba:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   80bbe:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
   80bc2:	b2c0      	uxtb	r0, r0
   80bc4:	2809      	cmp	r0, #9
   80bc6:	d9f3      	bls.n	80bb0 <print+0xf0>
   80bc8:	2973      	cmp	r1, #115	; 0x73
   80bca:	d08c      	beq.n	80ae6 <print+0x26>
   80bcc:	2964      	cmp	r1, #100	; 0x64
   80bce:	d094      	beq.n	80afa <print+0x3a>
   80bd0:	2978      	cmp	r1, #120	; 0x78
   80bd2:	d09e      	beq.n	80b12 <print+0x52>
   80bd4:	2958      	cmp	r1, #88	; 0x58
   80bd6:	d0a8      	beq.n	80b2a <print+0x6a>
   80bd8:	2975      	cmp	r1, #117	; 0x75
   80bda:	d0b2      	beq.n	80b42 <print+0x82>
   80bdc:	2963      	cmp	r1, #99	; 0x63
   80bde:	d1c2      	bne.n	80b66 <print+0xa6>
   80be0:	6839      	ldr	r1, [r7, #0]
   80be2:	3704      	adds	r7, #4
   80be4:	f88d 1014 	strb.w	r1, [sp, #20]
   80be8:	2100      	movs	r1, #0
   80bea:	f88d 1015 	strb.w	r1, [sp, #21]
   80bee:	a905      	add	r1, sp, #20
   80bf0:	4640      	mov	r0, r8
   80bf2:	47d0      	blx	sl
   80bf4:	4405      	add	r5, r0
   80bf6:	e7b6      	b.n	80b66 <print+0xa6>
   80bf8:	2500      	movs	r5, #0
   80bfa:	f1b8 0f00 	cmp.w	r8, #0
   80bfe:	d003      	beq.n	80c08 <print+0x148>
   80c00:	f8d8 3000 	ldr.w	r3, [r8]
   80c04:	2200      	movs	r2, #0
   80c06:	701a      	strb	r2, [r3, #0]
   80c08:	4628      	mov	r0, r5
   80c0a:	b007      	add	sp, #28
   80c0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80c10:	00080ea9 	.word	0x00080ea9
   80c14:	00081964 	.word	0x00081964
   80c18:	00080959 	.word	0x00080959
   80c1c:	00080a05 	.word	0x00080a05

00080c20 <printf>:
   80c20:	b40f      	push	{r0, r1, r2, r3}
   80c22:	b500      	push	{lr}
   80c24:	b083      	sub	sp, #12
   80c26:	aa04      	add	r2, sp, #16
   80c28:	f852 1b04 	ldr.w	r1, [r2], #4
   80c2c:	9201      	str	r2, [sp, #4]
   80c2e:	2000      	movs	r0, #0
   80c30:	4b03      	ldr	r3, [pc, #12]	; (80c40 <printf+0x20>)
   80c32:	4798      	blx	r3
   80c34:	b003      	add	sp, #12
   80c36:	f85d eb04 	ldr.w	lr, [sp], #4
   80c3a:	b004      	add	sp, #16
   80c3c:	4770      	bx	lr
   80c3e:	bf00      	nop
   80c40:	00080ac1 	.word	0x00080ac1

00080c44 <SysTick_init>:

static uint32_t milliseconds;
//SysTick_Type* SysTick = SysTick_BASE;

void SysTick_init(){
    SysTick->CTRL = 0b011;
   80c44:	4b03      	ldr	r3, [pc, #12]	; (80c54 <SysTick_init+0x10>)
   80c46:	2203      	movs	r2, #3
   80c48:	601a      	str	r2, [r3, #0]
    SysTick->LOAD = 0x2904;
   80c4a:	f642 1204 	movw	r2, #10500	; 0x2904
   80c4e:	605a      	str	r2, [r3, #4]
   80c50:	4770      	bx	lr
   80c52:	bf00      	nop
   80c54:	e000e010 	.word	0xe000e010

00080c58 <SysTick_Handler>:
}

void SysTick_Handler       ( void ){
    milliseconds++;
   80c58:	4a02      	ldr	r2, [pc, #8]	; (80c64 <SysTick_Handler+0xc>)
   80c5a:	6813      	ldr	r3, [r2, #0]
   80c5c:	3301      	adds	r3, #1
   80c5e:	6013      	str	r3, [r2, #0]
   80c60:	4770      	bx	lr
   80c62:	bf00      	nop
   80c64:	2000047c 	.word	0x2000047c

00080c68 <return_milliseconds>:
}

uint32_t return_milliseconds(){
	return milliseconds;
}
   80c68:	4b01      	ldr	r3, [pc, #4]	; (80c70 <return_milliseconds+0x8>)
   80c6a:	6818      	ldr	r0, [r3, #0]
   80c6c:	4770      	bx	lr
   80c6e:	bf00      	nop
   80c70:	2000047c 	.word	0x2000047c

00080c74 <timer_init>:
	
#define DEBUG_INTERRUPT 1

void timer_init(){
		
	PMC->PMC_PCER0 |= PMC_PCER0_PID27; //enable timer counter channel 0
   80c74:	4a0d      	ldr	r2, [pc, #52]	; (80cac <timer_init+0x38>)
   80c76:	6913      	ldr	r3, [r2, #16]
   80c78:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
   80c7c:	6113      	str	r3, [r2, #16]
		
	PIOB->PIO_PDR |= PIO_PDR_P25; //disable io on pinb 25
   80c7e:	4b0c      	ldr	r3, [pc, #48]	; (80cb0 <timer_init+0x3c>)
   80c80:	685a      	ldr	r2, [r3, #4]
   80c82:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   80c86:	605a      	str	r2, [r3, #4]
	PIOB->PIO_ABSR |= PIO_ABSR_P25; //PIO set peripheral b on pinb 25*/
   80c88:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80c8a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   80c8e:	671a      	str	r2, [r3, #112]	; 0x70
	
	tc->TC_CHANNEL[0].TC_CMR = 0x0009C000;
   80c90:	f5a3 23c2 	sub.w	r3, r3, #397312	; 0x61000
   80c94:	f44f 221c 	mov.w	r2, #638976	; 0x9c000
   80c98:	605a      	str	r2, [r3, #4]
	tc->TC_CHANNEL[0].TC_RC = 0x000CD140;
   80c9a:	4a06      	ldr	r2, [pc, #24]	; (80cb4 <timer_init+0x40>)
   80c9c:	61da      	str	r2, [r3, #28]
	
	
	
	tc->TC_CHANNEL[0].TC_CCR = 0x00000001; //enables the clock
   80c9e:	2201      	movs	r2, #1
   80ca0:	601a      	str	r2, [r3, #0]
	tc->TC_CHANNEL[0].TC_CCR |= 0x1 << 2;
   80ca2:	681a      	ldr	r2, [r3, #0]
   80ca4:	f042 0204 	orr.w	r2, r2, #4
   80ca8:	601a      	str	r2, [r3, #0]
   80caa:	4770      	bx	lr
   80cac:	400e0600 	.word	0x400e0600
   80cb0:	400e1000 	.word	0x400e1000
   80cb4:	000cd140 	.word	0x000cd140

00080cb8 <timer_change_duty>:
	}
	if(dutyCycle > 100){
		dutyCycle = 100;
	}
	
	tc->TC_CHANNEL[0].TC_RA = 0x000CD140 - (0xA410 + 0x1A4*dutyCycle); // TC_RA - (min_value + dutyCycle*1prosentOfDifference)
   80cb8:	2864      	cmp	r0, #100	; 0x64
   80cba:	bf28      	it	cs
   80cbc:	2064      	movcs	r0, #100	; 0x64
   80cbe:	4b05      	ldr	r3, [pc, #20]	; (80cd4 <timer_change_duty+0x1c>)
   80cc0:	fb03 f000 	mul.w	r0, r3, r0
   80cc4:	f500 2042 	add.w	r0, r0, #794624	; 0xc2000
   80cc8:	f500 6053 	add.w	r0, r0, #3376	; 0xd30
   80ccc:	4b02      	ldr	r3, [pc, #8]	; (80cd8 <timer_change_duty+0x20>)
   80cce:	6158      	str	r0, [r3, #20]
   80cd0:	4770      	bx	lr
   80cd2:	bf00      	nop
   80cd4:	fffffe5c 	.word	0xfffffe5c
   80cd8:	40080000 	.word	0x40080000

00080cdc <TC1_Handler>:
double ki = 20;
double kd = 1;
double sum_error = 0;
double T_periode = 0.02;

void TC1_Handler( void ){
   80cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80ce0:	b087      	sub	sp, #28
	
	prev_error = error;
   80ce2:	4c34      	ldr	r4, [pc, #208]	; (80db4 <TC1_Handler+0xd8>)
   80ce4:	e9d4 ab00 	ldrd	sl, fp, [r4]
   80ce8:	e9c4 ab02 	strd	sl, fp, [r4, #8]
	error = joystick.left_val - y_value_pi;
   80cec:	4f32      	ldr	r7, [pc, #200]	; (80db8 <TC1_Handler+0xdc>)
   80cee:	f997 0003 	ldrsb.w	r0, [r7, #3]
   80cf2:	4b32      	ldr	r3, [pc, #200]	; (80dbc <TC1_Handler+0xe0>)
   80cf4:	781b      	ldrb	r3, [r3, #0]
   80cf6:	1ac0      	subs	r0, r0, r3
   80cf8:	4b31      	ldr	r3, [pc, #196]	; (80dc0 <TC1_Handler+0xe4>)
   80cfa:	4798      	blx	r3
   80cfc:	4602      	mov	r2, r0
   80cfe:	460b      	mov	r3, r1
   80d00:	e9cd 2300 	strd	r2, r3, [sp]
   80d04:	e9c4 2300 	strd	r2, r3, [r4]
	sum_error += error;
   80d08:	4e2e      	ldr	r6, [pc, #184]	; (80dc4 <TC1_Handler+0xe8>)
   80d0a:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   80d0e:	47b0      	blx	r6
   80d10:	e9cd 0104 	strd	r0, r1, [sp, #16]
   80d14:	460a      	mov	r2, r1
   80d16:	4601      	mov	r1, r0
   80d18:	e9c4 1204 	strd	r1, r2, [r4, #16]
	paadrag = kp*error+T_periode*ki*sum_error+(kd/T_periode)*(error-prev_error);
   80d1c:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 80ddc <TC1_Handler+0x100>
   80d20:	e9d8 0100 	ldrd	r0, r1, [r8]
   80d24:	4d28      	ldr	r5, [pc, #160]	; (80dc8 <TC1_Handler+0xec>)
   80d26:	e9d8 2302 	ldrd	r2, r3, [r8, #8]
   80d2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
   80d2e:	47a8      	blx	r5
   80d30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   80d34:	47a8      	blx	r5
   80d36:	e9cd 0104 	strd	r0, r1, [sp, #16]
   80d3a:	e9d8 2304 	ldrd	r2, r3, [r8, #16]
   80d3e:	e9dd 0100 	ldrd	r0, r1, [sp]
   80d42:	47a8      	blx	r5
   80d44:	4602      	mov	r2, r0
   80d46:	460b      	mov	r3, r1
   80d48:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   80d4c:	47b0      	blx	r6
   80d4e:	e9cd 0104 	strd	r0, r1, [sp, #16]
   80d52:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   80d56:	e9d8 0106 	ldrd	r0, r1, [r8, #24]
   80d5a:	f8df 8084 	ldr.w	r8, [pc, #132]	; 80de0 <TC1_Handler+0x104>
   80d5e:	47c0      	blx	r8
   80d60:	4680      	mov	r8, r0
   80d62:	4689      	mov	r9, r1
   80d64:	4652      	mov	r2, sl
   80d66:	465b      	mov	r3, fp
   80d68:	e9dd 0100 	ldrd	r0, r1, [sp]
   80d6c:	f8df a074 	ldr.w	sl, [pc, #116]	; 80de4 <TC1_Handler+0x108>
   80d70:	47d0      	blx	sl
   80d72:	4602      	mov	r2, r0
   80d74:	460b      	mov	r3, r1
   80d76:	4640      	mov	r0, r8
   80d78:	4649      	mov	r1, r9
   80d7a:	47a8      	blx	r5
   80d7c:	4602      	mov	r2, r0
   80d7e:	460b      	mov	r3, r1
   80d80:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   80d84:	47b0      	blx	r6
   80d86:	4b11      	ldr	r3, [pc, #68]	; (80dcc <TC1_Handler+0xf0>)
   80d88:	4798      	blx	r3
   80d8a:	61a0      	str	r0, [r4, #24]
	if(joystick.left_button){
   80d8c:	f997 3005 	ldrsb.w	r3, [r7, #5]
   80d90:	b123      	cbz	r3, 80d9c <TC1_Handler+0xc0>
		sum_error = 0; 
   80d92:	2400      	movs	r4, #0
   80d94:	2500      	movs	r5, #0
   80d96:	4b07      	ldr	r3, [pc, #28]	; (80db4 <TC1_Handler+0xd8>)
   80d98:	e9c3 4504 	strd	r4, r5, [r3, #16]
	}
	change_motor_speed_using_paadrag(paadrag);
   80d9c:	4b0c      	ldr	r3, [pc, #48]	; (80dd0 <TC1_Handler+0xf4>)
   80d9e:	4798      	blx	r3
	//printf("x: %d \n\r",paadrag);
	int a = tc->TC_CHANNEL[1].TC_SR; // funker uten?!
   80da0:	4b0c      	ldr	r3, [pc, #48]	; (80dd4 <TC1_Handler+0xf8>)
   80da2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   80da4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80da8:	4b0b      	ldr	r3, [pc, #44]	; (80dd8 <TC1_Handler+0xfc>)
   80daa:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ClearPendingIRQ(ID_TC1);
}
   80dae:	b007      	add	sp, #28
   80db0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80db4:	20000480 	.word	0x20000480
   80db8:	2000049c 	.word	0x2000049c
   80dbc:	2000047b 	.word	0x2000047b
   80dc0:	000811d9 	.word	0x000811d9
   80dc4:	00080f41 	.word	0x00080f41
   80dc8:	000812a5 	.word	0x000812a5
   80dcc:	000816c9 	.word	0x000816c9
   80dd0:	00080661 	.word	0x00080661
   80dd4:	40080000 	.word	0x40080000
   80dd8:	e000e100 	.word	0xe000e100
   80ddc:	20000008 	.word	0x20000008
   80de0:	000814f9 	.word	0x000814f9
   80de4:	00080f3d 	.word	0x00080f3d

00080de8 <init_ch1_PI>:

void init_ch1_PI(){
	
	
	PMC->PMC_PCER0 |= PMC_PCER0_PID28; //enable timer counter channel 0
   80de8:	4a11      	ldr	r2, [pc, #68]	; (80e30 <init_ch1_PI+0x48>)
   80dea:	6913      	ldr	r3, [r2, #16]
   80dec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   80df0:	6113      	str	r3, [r2, #16]
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   80df2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80df6:	4b0f      	ldr	r3, [pc, #60]	; (80e34 <init_ch1_PI+0x4c>)
   80df8:	601a      	str	r2, [r3, #0]
	
	NVIC_EnableIRQ(ID_TC1);
	
	PIOB->PIO_PDR |= PIO_PDR_P0; //disable io on pinb 0
   80dfa:	4b0f      	ldr	r3, [pc, #60]	; (80e38 <init_ch1_PI+0x50>)
   80dfc:	685a      	ldr	r2, [r3, #4]
   80dfe:	f042 0201 	orr.w	r2, r2, #1
   80e02:	605a      	str	r2, [r3, #4]
	PIOB->PIO_ABSR |= PIO_ABSR_P0; //PIO set peripheral b on pinb 0*/
   80e04:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80e06:	f042 0201 	orr.w	r2, r2, #1
   80e0a:	671a      	str	r2, [r3, #112]	; 0x70
	
	tc->TC_CHANNEL[1].TC_CMR = 0x0009C000;
   80e0c:	f5a3 23c2 	sub.w	r3, r3, #397312	; 0x61000
   80e10:	f44f 221c 	mov.w	r2, #638976	; 0x9c000
   80e14:	645a      	str	r2, [r3, #68]	; 0x44
	tc->TC_CHANNEL[1].TC_RC = 0x000CD140;
   80e16:	4a09      	ldr	r2, [pc, #36]	; (80e3c <init_ch1_PI+0x54>)
   80e18:	65da      	str	r2, [r3, #92]	; 0x5c
	
	tc->TC_CHANNEL[1].TC_IER |= TC_IER_CPCS; // enable interrupt on compare with RC
   80e1a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
   80e1c:	f042 0210 	orr.w	r2, r2, #16
   80e20:	665a      	str	r2, [r3, #100]	; 0x64
	
	tc->TC_CHANNEL[1].TC_CCR = 0x00000001; //enables the clock
   80e22:	2201      	movs	r2, #1
   80e24:	641a      	str	r2, [r3, #64]	; 0x40
	tc->TC_CHANNEL[1].TC_CCR |= 0x1 << 2;
   80e26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   80e28:	f042 0204 	orr.w	r2, r2, #4
   80e2c:	641a      	str	r2, [r3, #64]	; 0x40
   80e2e:	4770      	bx	lr
   80e30:	400e0600 	.word	0x400e0600
   80e34:	e000e100 	.word	0xe000e100
   80e38:	400e1000 	.word	0x400e1000
   80e3c:	000cd140 	.word	0x000cd140

00080e40 <configure_uart>:
   80e40:	4b16      	ldr	r3, [pc, #88]	; (80e9c <configure_uart+0x5c>)
   80e42:	2200      	movs	r2, #0
   80e44:	701a      	strb	r2, [r3, #0]
   80e46:	705a      	strb	r2, [r3, #1]
   80e48:	4b15      	ldr	r3, [pc, #84]	; (80ea0 <configure_uart+0x60>)
   80e4a:	f44f 7140 	mov.w	r1, #768	; 0x300
   80e4e:	6459      	str	r1, [r3, #68]	; 0x44
   80e50:	6059      	str	r1, [r3, #4]
   80e52:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80e54:	6f18      	ldr	r0, [r3, #112]	; 0x70
   80e56:	4002      	ands	r2, r0
   80e58:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   80e5c:	671a      	str	r2, [r3, #112]	; 0x70
   80e5e:	6659      	str	r1, [r3, #100]	; 0x64
   80e60:	f44f 7280 	mov.w	r2, #256	; 0x100
   80e64:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   80e68:	611a      	str	r2, [r3, #16]
   80e6a:	f503 7300 	add.w	r3, r3, #512	; 0x200
   80e6e:	21ac      	movs	r1, #172	; 0xac
   80e70:	6019      	str	r1, [r3, #0]
   80e72:	f240 2123 	movw	r1, #547	; 0x223
   80e76:	6219      	str	r1, [r3, #32]
   80e78:	f44f 6100 	mov.w	r1, #2048	; 0x800
   80e7c:	6059      	str	r1, [r3, #4]
   80e7e:	f240 2102 	movw	r1, #514	; 0x202
   80e82:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   80e86:	f04f 31ff 	mov.w	r1, #4294967295
   80e8a:	60d9      	str	r1, [r3, #12]
   80e8c:	21e1      	movs	r1, #225	; 0xe1
   80e8e:	6099      	str	r1, [r3, #8]
   80e90:	4904      	ldr	r1, [pc, #16]	; (80ea4 <configure_uart+0x64>)
   80e92:	600a      	str	r2, [r1, #0]
   80e94:	2250      	movs	r2, #80	; 0x50
   80e96:	601a      	str	r2, [r3, #0]
   80e98:	4770      	bx	lr
   80e9a:	bf00      	nop
   80e9c:	200004a4 	.word	0x200004a4
   80ea0:	400e0e00 	.word	0x400e0e00
   80ea4:	e000e100 	.word	0xe000e100

00080ea8 <uart_putchar>:
   80ea8:	4b07      	ldr	r3, [pc, #28]	; (80ec8 <uart_putchar+0x20>)
   80eaa:	695b      	ldr	r3, [r3, #20]
   80eac:	f013 0f02 	tst.w	r3, #2
   80eb0:	d008      	beq.n	80ec4 <uart_putchar+0x1c>
   80eb2:	4b05      	ldr	r3, [pc, #20]	; (80ec8 <uart_putchar+0x20>)
   80eb4:	61d8      	str	r0, [r3, #28]
   80eb6:	461a      	mov	r2, r3
   80eb8:	6953      	ldr	r3, [r2, #20]
   80eba:	f413 7f00 	tst.w	r3, #512	; 0x200
   80ebe:	d0fb      	beq.n	80eb8 <uart_putchar+0x10>
   80ec0:	2000      	movs	r0, #0
   80ec2:	4770      	bx	lr
   80ec4:	2001      	movs	r0, #1
   80ec6:	4770      	bx	lr
   80ec8:	400e0800 	.word	0x400e0800

00080ecc <UART_Handler>:
   80ecc:	b508      	push	{r3, lr}
   80ece:	4b15      	ldr	r3, [pc, #84]	; (80f24 <UART_Handler+0x58>)
   80ed0:	695b      	ldr	r3, [r3, #20]
   80ed2:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   80ed6:	d003      	beq.n	80ee0 <UART_Handler+0x14>
   80ed8:	f44f 71a8 	mov.w	r1, #336	; 0x150
   80edc:	4a11      	ldr	r2, [pc, #68]	; (80f24 <UART_Handler+0x58>)
   80ede:	6011      	str	r1, [r2, #0]
   80ee0:	f013 0f01 	tst.w	r3, #1
   80ee4:	d012      	beq.n	80f0c <UART_Handler+0x40>
   80ee6:	4810      	ldr	r0, [pc, #64]	; (80f28 <UART_Handler+0x5c>)
   80ee8:	7842      	ldrb	r2, [r0, #1]
   80eea:	1c53      	adds	r3, r2, #1
   80eec:	4259      	negs	r1, r3
   80eee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   80ef2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   80ef6:	bf58      	it	pl
   80ef8:	424b      	negpl	r3, r1
   80efa:	7801      	ldrb	r1, [r0, #0]
   80efc:	428b      	cmp	r3, r1
   80efe:	d006      	beq.n	80f0e <UART_Handler+0x42>
   80f00:	4908      	ldr	r1, [pc, #32]	; (80f24 <UART_Handler+0x58>)
   80f02:	6988      	ldr	r0, [r1, #24]
   80f04:	4908      	ldr	r1, [pc, #32]	; (80f28 <UART_Handler+0x5c>)
   80f06:	440a      	add	r2, r1
   80f08:	7090      	strb	r0, [r2, #2]
   80f0a:	704b      	strb	r3, [r1, #1]
   80f0c:	bd08      	pop	{r3, pc}
   80f0e:	4807      	ldr	r0, [pc, #28]	; (80f2c <UART_Handler+0x60>)
   80f10:	4b07      	ldr	r3, [pc, #28]	; (80f30 <UART_Handler+0x64>)
   80f12:	4798      	blx	r3
   80f14:	4b03      	ldr	r3, [pc, #12]	; (80f24 <UART_Handler+0x58>)
   80f16:	699a      	ldr	r2, [r3, #24]
   80f18:	4b03      	ldr	r3, [pc, #12]	; (80f28 <UART_Handler+0x5c>)
   80f1a:	7859      	ldrb	r1, [r3, #1]
   80f1c:	440b      	add	r3, r1
   80f1e:	709a      	strb	r2, [r3, #2]
   80f20:	bd08      	pop	{r3, pc}
   80f22:	bf00      	nop
   80f24:	400e0800 	.word	0x400e0800
   80f28:	200004a4 	.word	0x200004a4
   80f2c:	0008196c 	.word	0x0008196c
   80f30:	00080c21 	.word	0x00080c21

00080f34 <__aeabi_drsub>:
   80f34:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   80f38:	e002      	b.n	80f40 <__adddf3>
   80f3a:	bf00      	nop

00080f3c <__aeabi_dsub>:
   80f3c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00080f40 <__adddf3>:
   80f40:	b530      	push	{r4, r5, lr}
   80f42:	ea4f 0441 	mov.w	r4, r1, lsl #1
   80f46:	ea4f 0543 	mov.w	r5, r3, lsl #1
   80f4a:	ea94 0f05 	teq	r4, r5
   80f4e:	bf08      	it	eq
   80f50:	ea90 0f02 	teqeq	r0, r2
   80f54:	bf1f      	itttt	ne
   80f56:	ea54 0c00 	orrsne.w	ip, r4, r0
   80f5a:	ea55 0c02 	orrsne.w	ip, r5, r2
   80f5e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   80f62:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   80f66:	f000 80e2 	beq.w	8112e <__adddf3+0x1ee>
   80f6a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   80f6e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   80f72:	bfb8      	it	lt
   80f74:	426d      	neglt	r5, r5
   80f76:	dd0c      	ble.n	80f92 <__adddf3+0x52>
   80f78:	442c      	add	r4, r5
   80f7a:	ea80 0202 	eor.w	r2, r0, r2
   80f7e:	ea81 0303 	eor.w	r3, r1, r3
   80f82:	ea82 0000 	eor.w	r0, r2, r0
   80f86:	ea83 0101 	eor.w	r1, r3, r1
   80f8a:	ea80 0202 	eor.w	r2, r0, r2
   80f8e:	ea81 0303 	eor.w	r3, r1, r3
   80f92:	2d36      	cmp	r5, #54	; 0x36
   80f94:	bf88      	it	hi
   80f96:	bd30      	pophi	{r4, r5, pc}
   80f98:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   80f9c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   80fa0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   80fa4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   80fa8:	d002      	beq.n	80fb0 <__adddf3+0x70>
   80faa:	4240      	negs	r0, r0
   80fac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   80fb0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   80fb4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   80fb8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   80fbc:	d002      	beq.n	80fc4 <__adddf3+0x84>
   80fbe:	4252      	negs	r2, r2
   80fc0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   80fc4:	ea94 0f05 	teq	r4, r5
   80fc8:	f000 80a7 	beq.w	8111a <__adddf3+0x1da>
   80fcc:	f1a4 0401 	sub.w	r4, r4, #1
   80fd0:	f1d5 0e20 	rsbs	lr, r5, #32
   80fd4:	db0d      	blt.n	80ff2 <__adddf3+0xb2>
   80fd6:	fa02 fc0e 	lsl.w	ip, r2, lr
   80fda:	fa22 f205 	lsr.w	r2, r2, r5
   80fde:	1880      	adds	r0, r0, r2
   80fe0:	f141 0100 	adc.w	r1, r1, #0
   80fe4:	fa03 f20e 	lsl.w	r2, r3, lr
   80fe8:	1880      	adds	r0, r0, r2
   80fea:	fa43 f305 	asr.w	r3, r3, r5
   80fee:	4159      	adcs	r1, r3
   80ff0:	e00e      	b.n	81010 <__adddf3+0xd0>
   80ff2:	f1a5 0520 	sub.w	r5, r5, #32
   80ff6:	f10e 0e20 	add.w	lr, lr, #32
   80ffa:	2a01      	cmp	r2, #1
   80ffc:	fa03 fc0e 	lsl.w	ip, r3, lr
   81000:	bf28      	it	cs
   81002:	f04c 0c02 	orrcs.w	ip, ip, #2
   81006:	fa43 f305 	asr.w	r3, r3, r5
   8100a:	18c0      	adds	r0, r0, r3
   8100c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   81010:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   81014:	d507      	bpl.n	81026 <__adddf3+0xe6>
   81016:	f04f 0e00 	mov.w	lr, #0
   8101a:	f1dc 0c00 	rsbs	ip, ip, #0
   8101e:	eb7e 0000 	sbcs.w	r0, lr, r0
   81022:	eb6e 0101 	sbc.w	r1, lr, r1
   81026:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   8102a:	d31b      	bcc.n	81064 <__adddf3+0x124>
   8102c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   81030:	d30c      	bcc.n	8104c <__adddf3+0x10c>
   81032:	0849      	lsrs	r1, r1, #1
   81034:	ea5f 0030 	movs.w	r0, r0, rrx
   81038:	ea4f 0c3c 	mov.w	ip, ip, rrx
   8103c:	f104 0401 	add.w	r4, r4, #1
   81040:	ea4f 5244 	mov.w	r2, r4, lsl #21
   81044:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   81048:	f080 809a 	bcs.w	81180 <__adddf3+0x240>
   8104c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   81050:	bf08      	it	eq
   81052:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   81056:	f150 0000 	adcs.w	r0, r0, #0
   8105a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8105e:	ea41 0105 	orr.w	r1, r1, r5
   81062:	bd30      	pop	{r4, r5, pc}
   81064:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   81068:	4140      	adcs	r0, r0
   8106a:	eb41 0101 	adc.w	r1, r1, r1
   8106e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   81072:	f1a4 0401 	sub.w	r4, r4, #1
   81076:	d1e9      	bne.n	8104c <__adddf3+0x10c>
   81078:	f091 0f00 	teq	r1, #0
   8107c:	bf04      	itt	eq
   8107e:	4601      	moveq	r1, r0
   81080:	2000      	moveq	r0, #0
   81082:	fab1 f381 	clz	r3, r1
   81086:	bf08      	it	eq
   81088:	3320      	addeq	r3, #32
   8108a:	f1a3 030b 	sub.w	r3, r3, #11
   8108e:	f1b3 0220 	subs.w	r2, r3, #32
   81092:	da0c      	bge.n	810ae <__adddf3+0x16e>
   81094:	320c      	adds	r2, #12
   81096:	dd08      	ble.n	810aa <__adddf3+0x16a>
   81098:	f102 0c14 	add.w	ip, r2, #20
   8109c:	f1c2 020c 	rsb	r2, r2, #12
   810a0:	fa01 f00c 	lsl.w	r0, r1, ip
   810a4:	fa21 f102 	lsr.w	r1, r1, r2
   810a8:	e00c      	b.n	810c4 <__adddf3+0x184>
   810aa:	f102 0214 	add.w	r2, r2, #20
   810ae:	bfd8      	it	le
   810b0:	f1c2 0c20 	rsble	ip, r2, #32
   810b4:	fa01 f102 	lsl.w	r1, r1, r2
   810b8:	fa20 fc0c 	lsr.w	ip, r0, ip
   810bc:	bfdc      	itt	le
   810be:	ea41 010c 	orrle.w	r1, r1, ip
   810c2:	4090      	lslle	r0, r2
   810c4:	1ae4      	subs	r4, r4, r3
   810c6:	bfa2      	ittt	ge
   810c8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   810cc:	4329      	orrge	r1, r5
   810ce:	bd30      	popge	{r4, r5, pc}
   810d0:	ea6f 0404 	mvn.w	r4, r4
   810d4:	3c1f      	subs	r4, #31
   810d6:	da1c      	bge.n	81112 <__adddf3+0x1d2>
   810d8:	340c      	adds	r4, #12
   810da:	dc0e      	bgt.n	810fa <__adddf3+0x1ba>
   810dc:	f104 0414 	add.w	r4, r4, #20
   810e0:	f1c4 0220 	rsb	r2, r4, #32
   810e4:	fa20 f004 	lsr.w	r0, r0, r4
   810e8:	fa01 f302 	lsl.w	r3, r1, r2
   810ec:	ea40 0003 	orr.w	r0, r0, r3
   810f0:	fa21 f304 	lsr.w	r3, r1, r4
   810f4:	ea45 0103 	orr.w	r1, r5, r3
   810f8:	bd30      	pop	{r4, r5, pc}
   810fa:	f1c4 040c 	rsb	r4, r4, #12
   810fe:	f1c4 0220 	rsb	r2, r4, #32
   81102:	fa20 f002 	lsr.w	r0, r0, r2
   81106:	fa01 f304 	lsl.w	r3, r1, r4
   8110a:	ea40 0003 	orr.w	r0, r0, r3
   8110e:	4629      	mov	r1, r5
   81110:	bd30      	pop	{r4, r5, pc}
   81112:	fa21 f004 	lsr.w	r0, r1, r4
   81116:	4629      	mov	r1, r5
   81118:	bd30      	pop	{r4, r5, pc}
   8111a:	f094 0f00 	teq	r4, #0
   8111e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   81122:	bf06      	itte	eq
   81124:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   81128:	3401      	addeq	r4, #1
   8112a:	3d01      	subne	r5, #1
   8112c:	e74e      	b.n	80fcc <__adddf3+0x8c>
   8112e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   81132:	bf18      	it	ne
   81134:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   81138:	d029      	beq.n	8118e <__adddf3+0x24e>
   8113a:	ea94 0f05 	teq	r4, r5
   8113e:	bf08      	it	eq
   81140:	ea90 0f02 	teqeq	r0, r2
   81144:	d005      	beq.n	81152 <__adddf3+0x212>
   81146:	ea54 0c00 	orrs.w	ip, r4, r0
   8114a:	bf04      	itt	eq
   8114c:	4619      	moveq	r1, r3
   8114e:	4610      	moveq	r0, r2
   81150:	bd30      	pop	{r4, r5, pc}
   81152:	ea91 0f03 	teq	r1, r3
   81156:	bf1e      	ittt	ne
   81158:	2100      	movne	r1, #0
   8115a:	2000      	movne	r0, #0
   8115c:	bd30      	popne	{r4, r5, pc}
   8115e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   81162:	d105      	bne.n	81170 <__adddf3+0x230>
   81164:	0040      	lsls	r0, r0, #1
   81166:	4149      	adcs	r1, r1
   81168:	bf28      	it	cs
   8116a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   8116e:	bd30      	pop	{r4, r5, pc}
   81170:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   81174:	bf3c      	itt	cc
   81176:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   8117a:	bd30      	popcc	{r4, r5, pc}
   8117c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   81180:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   81184:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   81188:	f04f 0000 	mov.w	r0, #0
   8118c:	bd30      	pop	{r4, r5, pc}
   8118e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   81192:	bf1a      	itte	ne
   81194:	4619      	movne	r1, r3
   81196:	4610      	movne	r0, r2
   81198:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   8119c:	bf1c      	itt	ne
   8119e:	460b      	movne	r3, r1
   811a0:	4602      	movne	r2, r0
   811a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   811a6:	bf06      	itte	eq
   811a8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   811ac:	ea91 0f03 	teqeq	r1, r3
   811b0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   811b4:	bd30      	pop	{r4, r5, pc}
   811b6:	bf00      	nop

000811b8 <__aeabi_ui2d>:
   811b8:	f090 0f00 	teq	r0, #0
   811bc:	bf04      	itt	eq
   811be:	2100      	moveq	r1, #0
   811c0:	4770      	bxeq	lr
   811c2:	b530      	push	{r4, r5, lr}
   811c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   811c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   811cc:	f04f 0500 	mov.w	r5, #0
   811d0:	f04f 0100 	mov.w	r1, #0
   811d4:	e750      	b.n	81078 <__adddf3+0x138>
   811d6:	bf00      	nop

000811d8 <__aeabi_i2d>:
   811d8:	f090 0f00 	teq	r0, #0
   811dc:	bf04      	itt	eq
   811de:	2100      	moveq	r1, #0
   811e0:	4770      	bxeq	lr
   811e2:	b530      	push	{r4, r5, lr}
   811e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   811e8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   811ec:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   811f0:	bf48      	it	mi
   811f2:	4240      	negmi	r0, r0
   811f4:	f04f 0100 	mov.w	r1, #0
   811f8:	e73e      	b.n	81078 <__adddf3+0x138>
   811fa:	bf00      	nop

000811fc <__aeabi_f2d>:
   811fc:	0042      	lsls	r2, r0, #1
   811fe:	ea4f 01e2 	mov.w	r1, r2, asr #3
   81202:	ea4f 0131 	mov.w	r1, r1, rrx
   81206:	ea4f 7002 	mov.w	r0, r2, lsl #28
   8120a:	bf1f      	itttt	ne
   8120c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   81210:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   81214:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   81218:	4770      	bxne	lr
   8121a:	f092 0f00 	teq	r2, #0
   8121e:	bf14      	ite	ne
   81220:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   81224:	4770      	bxeq	lr
   81226:	b530      	push	{r4, r5, lr}
   81228:	f44f 7460 	mov.w	r4, #896	; 0x380
   8122c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   81230:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   81234:	e720      	b.n	81078 <__adddf3+0x138>
   81236:	bf00      	nop

00081238 <__aeabi_ul2d>:
   81238:	ea50 0201 	orrs.w	r2, r0, r1
   8123c:	bf08      	it	eq
   8123e:	4770      	bxeq	lr
   81240:	b530      	push	{r4, r5, lr}
   81242:	f04f 0500 	mov.w	r5, #0
   81246:	e00a      	b.n	8125e <__aeabi_l2d+0x16>

00081248 <__aeabi_l2d>:
   81248:	ea50 0201 	orrs.w	r2, r0, r1
   8124c:	bf08      	it	eq
   8124e:	4770      	bxeq	lr
   81250:	b530      	push	{r4, r5, lr}
   81252:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   81256:	d502      	bpl.n	8125e <__aeabi_l2d+0x16>
   81258:	4240      	negs	r0, r0
   8125a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8125e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   81262:	f104 0432 	add.w	r4, r4, #50	; 0x32
   81266:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   8126a:	f43f aedc 	beq.w	81026 <__adddf3+0xe6>
   8126e:	f04f 0203 	mov.w	r2, #3
   81272:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   81276:	bf18      	it	ne
   81278:	3203      	addne	r2, #3
   8127a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8127e:	bf18      	it	ne
   81280:	3203      	addne	r2, #3
   81282:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   81286:	f1c2 0320 	rsb	r3, r2, #32
   8128a:	fa00 fc03 	lsl.w	ip, r0, r3
   8128e:	fa20 f002 	lsr.w	r0, r0, r2
   81292:	fa01 fe03 	lsl.w	lr, r1, r3
   81296:	ea40 000e 	orr.w	r0, r0, lr
   8129a:	fa21 f102 	lsr.w	r1, r1, r2
   8129e:	4414      	add	r4, r2
   812a0:	e6c1      	b.n	81026 <__adddf3+0xe6>
   812a2:	bf00      	nop

000812a4 <__aeabi_dmul>:
   812a4:	b570      	push	{r4, r5, r6, lr}
   812a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   812aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   812ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   812b2:	bf1d      	ittte	ne
   812b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   812b8:	ea94 0f0c 	teqne	r4, ip
   812bc:	ea95 0f0c 	teqne	r5, ip
   812c0:	f000 f8de 	bleq	81480 <__aeabi_dmul+0x1dc>
   812c4:	442c      	add	r4, r5
   812c6:	ea81 0603 	eor.w	r6, r1, r3
   812ca:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   812ce:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   812d2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   812d6:	bf18      	it	ne
   812d8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   812dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   812e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   812e4:	d038      	beq.n	81358 <__aeabi_dmul+0xb4>
   812e6:	fba0 ce02 	umull	ip, lr, r0, r2
   812ea:	f04f 0500 	mov.w	r5, #0
   812ee:	fbe1 e502 	umlal	lr, r5, r1, r2
   812f2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   812f6:	fbe0 e503 	umlal	lr, r5, r0, r3
   812fa:	f04f 0600 	mov.w	r6, #0
   812fe:	fbe1 5603 	umlal	r5, r6, r1, r3
   81302:	f09c 0f00 	teq	ip, #0
   81306:	bf18      	it	ne
   81308:	f04e 0e01 	orrne.w	lr, lr, #1
   8130c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   81310:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   81314:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   81318:	d204      	bcs.n	81324 <__aeabi_dmul+0x80>
   8131a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   8131e:	416d      	adcs	r5, r5
   81320:	eb46 0606 	adc.w	r6, r6, r6
   81324:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   81328:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   8132c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   81330:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   81334:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   81338:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8133c:	bf88      	it	hi
   8133e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   81342:	d81e      	bhi.n	81382 <__aeabi_dmul+0xde>
   81344:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   81348:	bf08      	it	eq
   8134a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   8134e:	f150 0000 	adcs.w	r0, r0, #0
   81352:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   81356:	bd70      	pop	{r4, r5, r6, pc}
   81358:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   8135c:	ea46 0101 	orr.w	r1, r6, r1
   81360:	ea40 0002 	orr.w	r0, r0, r2
   81364:	ea81 0103 	eor.w	r1, r1, r3
   81368:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   8136c:	bfc2      	ittt	gt
   8136e:	ebd4 050c 	rsbsgt	r5, r4, ip
   81372:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   81376:	bd70      	popgt	{r4, r5, r6, pc}
   81378:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8137c:	f04f 0e00 	mov.w	lr, #0
   81380:	3c01      	subs	r4, #1
   81382:	f300 80ab 	bgt.w	814dc <__aeabi_dmul+0x238>
   81386:	f114 0f36 	cmn.w	r4, #54	; 0x36
   8138a:	bfde      	ittt	le
   8138c:	2000      	movle	r0, #0
   8138e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   81392:	bd70      	pople	{r4, r5, r6, pc}
   81394:	f1c4 0400 	rsb	r4, r4, #0
   81398:	3c20      	subs	r4, #32
   8139a:	da35      	bge.n	81408 <__aeabi_dmul+0x164>
   8139c:	340c      	adds	r4, #12
   8139e:	dc1b      	bgt.n	813d8 <__aeabi_dmul+0x134>
   813a0:	f104 0414 	add.w	r4, r4, #20
   813a4:	f1c4 0520 	rsb	r5, r4, #32
   813a8:	fa00 f305 	lsl.w	r3, r0, r5
   813ac:	fa20 f004 	lsr.w	r0, r0, r4
   813b0:	fa01 f205 	lsl.w	r2, r1, r5
   813b4:	ea40 0002 	orr.w	r0, r0, r2
   813b8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   813bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   813c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   813c4:	fa21 f604 	lsr.w	r6, r1, r4
   813c8:	eb42 0106 	adc.w	r1, r2, r6
   813cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   813d0:	bf08      	it	eq
   813d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   813d6:	bd70      	pop	{r4, r5, r6, pc}
   813d8:	f1c4 040c 	rsb	r4, r4, #12
   813dc:	f1c4 0520 	rsb	r5, r4, #32
   813e0:	fa00 f304 	lsl.w	r3, r0, r4
   813e4:	fa20 f005 	lsr.w	r0, r0, r5
   813e8:	fa01 f204 	lsl.w	r2, r1, r4
   813ec:	ea40 0002 	orr.w	r0, r0, r2
   813f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   813f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   813f8:	f141 0100 	adc.w	r1, r1, #0
   813fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   81400:	bf08      	it	eq
   81402:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   81406:	bd70      	pop	{r4, r5, r6, pc}
   81408:	f1c4 0520 	rsb	r5, r4, #32
   8140c:	fa00 f205 	lsl.w	r2, r0, r5
   81410:	ea4e 0e02 	orr.w	lr, lr, r2
   81414:	fa20 f304 	lsr.w	r3, r0, r4
   81418:	fa01 f205 	lsl.w	r2, r1, r5
   8141c:	ea43 0302 	orr.w	r3, r3, r2
   81420:	fa21 f004 	lsr.w	r0, r1, r4
   81424:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   81428:	fa21 f204 	lsr.w	r2, r1, r4
   8142c:	ea20 0002 	bic.w	r0, r0, r2
   81430:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   81434:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   81438:	bf08      	it	eq
   8143a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8143e:	bd70      	pop	{r4, r5, r6, pc}
   81440:	f094 0f00 	teq	r4, #0
   81444:	d10f      	bne.n	81466 <__aeabi_dmul+0x1c2>
   81446:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   8144a:	0040      	lsls	r0, r0, #1
   8144c:	eb41 0101 	adc.w	r1, r1, r1
   81450:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   81454:	bf08      	it	eq
   81456:	3c01      	subeq	r4, #1
   81458:	d0f7      	beq.n	8144a <__aeabi_dmul+0x1a6>
   8145a:	ea41 0106 	orr.w	r1, r1, r6
   8145e:	f095 0f00 	teq	r5, #0
   81462:	bf18      	it	ne
   81464:	4770      	bxne	lr
   81466:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   8146a:	0052      	lsls	r2, r2, #1
   8146c:	eb43 0303 	adc.w	r3, r3, r3
   81470:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   81474:	bf08      	it	eq
   81476:	3d01      	subeq	r5, #1
   81478:	d0f7      	beq.n	8146a <__aeabi_dmul+0x1c6>
   8147a:	ea43 0306 	orr.w	r3, r3, r6
   8147e:	4770      	bx	lr
   81480:	ea94 0f0c 	teq	r4, ip
   81484:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   81488:	bf18      	it	ne
   8148a:	ea95 0f0c 	teqne	r5, ip
   8148e:	d00c      	beq.n	814aa <__aeabi_dmul+0x206>
   81490:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   81494:	bf18      	it	ne
   81496:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8149a:	d1d1      	bne.n	81440 <__aeabi_dmul+0x19c>
   8149c:	ea81 0103 	eor.w	r1, r1, r3
   814a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   814a4:	f04f 0000 	mov.w	r0, #0
   814a8:	bd70      	pop	{r4, r5, r6, pc}
   814aa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   814ae:	bf06      	itte	eq
   814b0:	4610      	moveq	r0, r2
   814b2:	4619      	moveq	r1, r3
   814b4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   814b8:	d019      	beq.n	814ee <__aeabi_dmul+0x24a>
   814ba:	ea94 0f0c 	teq	r4, ip
   814be:	d102      	bne.n	814c6 <__aeabi_dmul+0x222>
   814c0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   814c4:	d113      	bne.n	814ee <__aeabi_dmul+0x24a>
   814c6:	ea95 0f0c 	teq	r5, ip
   814ca:	d105      	bne.n	814d8 <__aeabi_dmul+0x234>
   814cc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   814d0:	bf1c      	itt	ne
   814d2:	4610      	movne	r0, r2
   814d4:	4619      	movne	r1, r3
   814d6:	d10a      	bne.n	814ee <__aeabi_dmul+0x24a>
   814d8:	ea81 0103 	eor.w	r1, r1, r3
   814dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   814e0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   814e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   814e8:	f04f 0000 	mov.w	r0, #0
   814ec:	bd70      	pop	{r4, r5, r6, pc}
   814ee:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   814f2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   814f6:	bd70      	pop	{r4, r5, r6, pc}

000814f8 <__aeabi_ddiv>:
   814f8:	b570      	push	{r4, r5, r6, lr}
   814fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
   814fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   81502:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   81506:	bf1d      	ittte	ne
   81508:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   8150c:	ea94 0f0c 	teqne	r4, ip
   81510:	ea95 0f0c 	teqne	r5, ip
   81514:	f000 f8a7 	bleq	81666 <__aeabi_ddiv+0x16e>
   81518:	eba4 0405 	sub.w	r4, r4, r5
   8151c:	ea81 0e03 	eor.w	lr, r1, r3
   81520:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   81524:	ea4f 3101 	mov.w	r1, r1, lsl #12
   81528:	f000 8088 	beq.w	8163c <__aeabi_ddiv+0x144>
   8152c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   81530:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   81534:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   81538:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   8153c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   81540:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   81544:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   81548:	ea4f 2600 	mov.w	r6, r0, lsl #8
   8154c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   81550:	429d      	cmp	r5, r3
   81552:	bf08      	it	eq
   81554:	4296      	cmpeq	r6, r2
   81556:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   8155a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   8155e:	d202      	bcs.n	81566 <__aeabi_ddiv+0x6e>
   81560:	085b      	lsrs	r3, r3, #1
   81562:	ea4f 0232 	mov.w	r2, r2, rrx
   81566:	1ab6      	subs	r6, r6, r2
   81568:	eb65 0503 	sbc.w	r5, r5, r3
   8156c:	085b      	lsrs	r3, r3, #1
   8156e:	ea4f 0232 	mov.w	r2, r2, rrx
   81572:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   81576:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   8157a:	ebb6 0e02 	subs.w	lr, r6, r2
   8157e:	eb75 0e03 	sbcs.w	lr, r5, r3
   81582:	bf22      	ittt	cs
   81584:	1ab6      	subcs	r6, r6, r2
   81586:	4675      	movcs	r5, lr
   81588:	ea40 000c 	orrcs.w	r0, r0, ip
   8158c:	085b      	lsrs	r3, r3, #1
   8158e:	ea4f 0232 	mov.w	r2, r2, rrx
   81592:	ebb6 0e02 	subs.w	lr, r6, r2
   81596:	eb75 0e03 	sbcs.w	lr, r5, r3
   8159a:	bf22      	ittt	cs
   8159c:	1ab6      	subcs	r6, r6, r2
   8159e:	4675      	movcs	r5, lr
   815a0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   815a4:	085b      	lsrs	r3, r3, #1
   815a6:	ea4f 0232 	mov.w	r2, r2, rrx
   815aa:	ebb6 0e02 	subs.w	lr, r6, r2
   815ae:	eb75 0e03 	sbcs.w	lr, r5, r3
   815b2:	bf22      	ittt	cs
   815b4:	1ab6      	subcs	r6, r6, r2
   815b6:	4675      	movcs	r5, lr
   815b8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   815bc:	085b      	lsrs	r3, r3, #1
   815be:	ea4f 0232 	mov.w	r2, r2, rrx
   815c2:	ebb6 0e02 	subs.w	lr, r6, r2
   815c6:	eb75 0e03 	sbcs.w	lr, r5, r3
   815ca:	bf22      	ittt	cs
   815cc:	1ab6      	subcs	r6, r6, r2
   815ce:	4675      	movcs	r5, lr
   815d0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   815d4:	ea55 0e06 	orrs.w	lr, r5, r6
   815d8:	d018      	beq.n	8160c <__aeabi_ddiv+0x114>
   815da:	ea4f 1505 	mov.w	r5, r5, lsl #4
   815de:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   815e2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   815e6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   815ea:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   815ee:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   815f2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   815f6:	d1c0      	bne.n	8157a <__aeabi_ddiv+0x82>
   815f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   815fc:	d10b      	bne.n	81616 <__aeabi_ddiv+0x11e>
   815fe:	ea41 0100 	orr.w	r1, r1, r0
   81602:	f04f 0000 	mov.w	r0, #0
   81606:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   8160a:	e7b6      	b.n	8157a <__aeabi_ddiv+0x82>
   8160c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   81610:	bf04      	itt	eq
   81612:	4301      	orreq	r1, r0
   81614:	2000      	moveq	r0, #0
   81616:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8161a:	bf88      	it	hi
   8161c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   81620:	f63f aeaf 	bhi.w	81382 <__aeabi_dmul+0xde>
   81624:	ebb5 0c03 	subs.w	ip, r5, r3
   81628:	bf04      	itt	eq
   8162a:	ebb6 0c02 	subseq.w	ip, r6, r2
   8162e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   81632:	f150 0000 	adcs.w	r0, r0, #0
   81636:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8163a:	bd70      	pop	{r4, r5, r6, pc}
   8163c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   81640:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   81644:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   81648:	bfc2      	ittt	gt
   8164a:	ebd4 050c 	rsbsgt	r5, r4, ip
   8164e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   81652:	bd70      	popgt	{r4, r5, r6, pc}
   81654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   81658:	f04f 0e00 	mov.w	lr, #0
   8165c:	3c01      	subs	r4, #1
   8165e:	e690      	b.n	81382 <__aeabi_dmul+0xde>
   81660:	ea45 0e06 	orr.w	lr, r5, r6
   81664:	e68d      	b.n	81382 <__aeabi_dmul+0xde>
   81666:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8166a:	ea94 0f0c 	teq	r4, ip
   8166e:	bf08      	it	eq
   81670:	ea95 0f0c 	teqeq	r5, ip
   81674:	f43f af3b 	beq.w	814ee <__aeabi_dmul+0x24a>
   81678:	ea94 0f0c 	teq	r4, ip
   8167c:	d10a      	bne.n	81694 <__aeabi_ddiv+0x19c>
   8167e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   81682:	f47f af34 	bne.w	814ee <__aeabi_dmul+0x24a>
   81686:	ea95 0f0c 	teq	r5, ip
   8168a:	f47f af25 	bne.w	814d8 <__aeabi_dmul+0x234>
   8168e:	4610      	mov	r0, r2
   81690:	4619      	mov	r1, r3
   81692:	e72c      	b.n	814ee <__aeabi_dmul+0x24a>
   81694:	ea95 0f0c 	teq	r5, ip
   81698:	d106      	bne.n	816a8 <__aeabi_ddiv+0x1b0>
   8169a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8169e:	f43f aefd 	beq.w	8149c <__aeabi_dmul+0x1f8>
   816a2:	4610      	mov	r0, r2
   816a4:	4619      	mov	r1, r3
   816a6:	e722      	b.n	814ee <__aeabi_dmul+0x24a>
   816a8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   816ac:	bf18      	it	ne
   816ae:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   816b2:	f47f aec5 	bne.w	81440 <__aeabi_dmul+0x19c>
   816b6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   816ba:	f47f af0d 	bne.w	814d8 <__aeabi_dmul+0x234>
   816be:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   816c2:	f47f aeeb 	bne.w	8149c <__aeabi_dmul+0x1f8>
   816c6:	e712      	b.n	814ee <__aeabi_dmul+0x24a>

000816c8 <__aeabi_d2iz>:
   816c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   816cc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   816d0:	d215      	bcs.n	816fe <__aeabi_d2iz+0x36>
   816d2:	d511      	bpl.n	816f8 <__aeabi_d2iz+0x30>
   816d4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   816d8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   816dc:	d912      	bls.n	81704 <__aeabi_d2iz+0x3c>
   816de:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   816e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   816e6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   816ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   816ee:	fa23 f002 	lsr.w	r0, r3, r2
   816f2:	bf18      	it	ne
   816f4:	4240      	negne	r0, r0
   816f6:	4770      	bx	lr
   816f8:	f04f 0000 	mov.w	r0, #0
   816fc:	4770      	bx	lr
   816fe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   81702:	d105      	bne.n	81710 <__aeabi_d2iz+0x48>
   81704:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   81708:	bf08      	it	eq
   8170a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   8170e:	4770      	bx	lr
   81710:	f04f 0000 	mov.w	r0, #0
   81714:	4770      	bx	lr
   81716:	bf00      	nop

00081718 <__aeabi_d2uiz>:
   81718:	004a      	lsls	r2, r1, #1
   8171a:	d211      	bcs.n	81740 <__aeabi_d2uiz+0x28>
   8171c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   81720:	d211      	bcs.n	81746 <__aeabi_d2uiz+0x2e>
   81722:	d50d      	bpl.n	81740 <__aeabi_d2uiz+0x28>
   81724:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   81728:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   8172c:	d40e      	bmi.n	8174c <__aeabi_d2uiz+0x34>
   8172e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   81732:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   81736:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   8173a:	fa23 f002 	lsr.w	r0, r3, r2
   8173e:	4770      	bx	lr
   81740:	f04f 0000 	mov.w	r0, #0
   81744:	4770      	bx	lr
   81746:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   8174a:	d102      	bne.n	81752 <__aeabi_d2uiz+0x3a>
   8174c:	f04f 30ff 	mov.w	r0, #4294967295
   81750:	4770      	bx	lr
   81752:	f04f 0000 	mov.w	r0, #0
   81756:	4770      	bx	lr

00081758 <__libc_init_array>:
   81758:	b570      	push	{r4, r5, r6, lr}
   8175a:	4e0f      	ldr	r6, [pc, #60]	; (81798 <__libc_init_array+0x40>)
   8175c:	4d0f      	ldr	r5, [pc, #60]	; (8179c <__libc_init_array+0x44>)
   8175e:	1b76      	subs	r6, r6, r5
   81760:	10b6      	asrs	r6, r6, #2
   81762:	bf18      	it	ne
   81764:	2400      	movne	r4, #0
   81766:	d005      	beq.n	81774 <__libc_init_array+0x1c>
   81768:	3401      	adds	r4, #1
   8176a:	f855 3b04 	ldr.w	r3, [r5], #4
   8176e:	4798      	blx	r3
   81770:	42a6      	cmp	r6, r4
   81772:	d1f9      	bne.n	81768 <__libc_init_array+0x10>
   81774:	4e0a      	ldr	r6, [pc, #40]	; (817a0 <__libc_init_array+0x48>)
   81776:	4d0b      	ldr	r5, [pc, #44]	; (817a4 <__libc_init_array+0x4c>)
   81778:	f000 f90a 	bl	81990 <_init>
   8177c:	1b76      	subs	r6, r6, r5
   8177e:	10b6      	asrs	r6, r6, #2
   81780:	bf18      	it	ne
   81782:	2400      	movne	r4, #0
   81784:	d006      	beq.n	81794 <__libc_init_array+0x3c>
   81786:	3401      	adds	r4, #1
   81788:	f855 3b04 	ldr.w	r3, [r5], #4
   8178c:	4798      	blx	r3
   8178e:	42a6      	cmp	r6, r4
   81790:	d1f9      	bne.n	81786 <__libc_init_array+0x2e>
   81792:	bd70      	pop	{r4, r5, r6, pc}
   81794:	bd70      	pop	{r4, r5, r6, pc}
   81796:	bf00      	nop
   81798:	0008199c 	.word	0x0008199c
   8179c:	0008199c 	.word	0x0008199c
   817a0:	000819a4 	.word	0x000819a4
   817a4:	0008199c 	.word	0x0008199c

000817a8 <register_fini>:
   817a8:	4b02      	ldr	r3, [pc, #8]	; (817b4 <register_fini+0xc>)
   817aa:	b113      	cbz	r3, 817b2 <register_fini+0xa>
   817ac:	4802      	ldr	r0, [pc, #8]	; (817b8 <register_fini+0x10>)
   817ae:	f000 b805 	b.w	817bc <atexit>
   817b2:	4770      	bx	lr
   817b4:	00000000 	.word	0x00000000
   817b8:	000817c9 	.word	0x000817c9

000817bc <atexit>:
   817bc:	2300      	movs	r3, #0
   817be:	4601      	mov	r1, r0
   817c0:	461a      	mov	r2, r3
   817c2:	4618      	mov	r0, r3
   817c4:	f000 b81e 	b.w	81804 <__register_exitproc>

000817c8 <__libc_fini_array>:
   817c8:	b538      	push	{r3, r4, r5, lr}
   817ca:	4c0a      	ldr	r4, [pc, #40]	; (817f4 <__libc_fini_array+0x2c>)
   817cc:	4d0a      	ldr	r5, [pc, #40]	; (817f8 <__libc_fini_array+0x30>)
   817ce:	1b64      	subs	r4, r4, r5
   817d0:	10a4      	asrs	r4, r4, #2
   817d2:	d00a      	beq.n	817ea <__libc_fini_array+0x22>
   817d4:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   817d8:	3b01      	subs	r3, #1
   817da:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   817de:	3c01      	subs	r4, #1
   817e0:	f855 3904 	ldr.w	r3, [r5], #-4
   817e4:	4798      	blx	r3
   817e6:	2c00      	cmp	r4, #0
   817e8:	d1f9      	bne.n	817de <__libc_fini_array+0x16>
   817ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   817ee:	f000 b8d9 	b.w	819a4 <_fini>
   817f2:	bf00      	nop
   817f4:	000819b4 	.word	0x000819b4
   817f8:	000819b0 	.word	0x000819b0

000817fc <__retarget_lock_acquire_recursive>:
   817fc:	4770      	bx	lr
   817fe:	bf00      	nop

00081800 <__retarget_lock_release_recursive>:
   81800:	4770      	bx	lr
   81802:	bf00      	nop

00081804 <__register_exitproc>:
   81804:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   81808:	4d2c      	ldr	r5, [pc, #176]	; (818bc <__register_exitproc+0xb8>)
   8180a:	4606      	mov	r6, r0
   8180c:	6828      	ldr	r0, [r5, #0]
   8180e:	4698      	mov	r8, r3
   81810:	460f      	mov	r7, r1
   81812:	4691      	mov	r9, r2
   81814:	f7ff fff2 	bl	817fc <__retarget_lock_acquire_recursive>
   81818:	4b29      	ldr	r3, [pc, #164]	; (818c0 <__register_exitproc+0xbc>)
   8181a:	681c      	ldr	r4, [r3, #0]
   8181c:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   81820:	2b00      	cmp	r3, #0
   81822:	d03e      	beq.n	818a2 <__register_exitproc+0x9e>
   81824:	685a      	ldr	r2, [r3, #4]
   81826:	2a1f      	cmp	r2, #31
   81828:	dc1c      	bgt.n	81864 <__register_exitproc+0x60>
   8182a:	f102 0e01 	add.w	lr, r2, #1
   8182e:	b176      	cbz	r6, 8184e <__register_exitproc+0x4a>
   81830:	2101      	movs	r1, #1
   81832:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   81836:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   8183a:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   8183e:	4091      	lsls	r1, r2
   81840:	4308      	orrs	r0, r1
   81842:	2e02      	cmp	r6, #2
   81844:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   81848:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   8184c:	d023      	beq.n	81896 <__register_exitproc+0x92>
   8184e:	3202      	adds	r2, #2
   81850:	f8c3 e004 	str.w	lr, [r3, #4]
   81854:	6828      	ldr	r0, [r5, #0]
   81856:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   8185a:	f7ff ffd1 	bl	81800 <__retarget_lock_release_recursive>
   8185e:	2000      	movs	r0, #0
   81860:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   81864:	4b17      	ldr	r3, [pc, #92]	; (818c4 <__register_exitproc+0xc0>)
   81866:	b30b      	cbz	r3, 818ac <__register_exitproc+0xa8>
   81868:	f44f 70c8 	mov.w	r0, #400	; 0x190
   8186c:	f3af 8000 	nop.w
   81870:	4603      	mov	r3, r0
   81872:	b1d8      	cbz	r0, 818ac <__register_exitproc+0xa8>
   81874:	2000      	movs	r0, #0
   81876:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   8187a:	f04f 0e01 	mov.w	lr, #1
   8187e:	6058      	str	r0, [r3, #4]
   81880:	6019      	str	r1, [r3, #0]
   81882:	4602      	mov	r2, r0
   81884:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   81888:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   8188c:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   81890:	2e00      	cmp	r6, #0
   81892:	d0dc      	beq.n	8184e <__register_exitproc+0x4a>
   81894:	e7cc      	b.n	81830 <__register_exitproc+0x2c>
   81896:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   8189a:	4301      	orrs	r1, r0
   8189c:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   818a0:	e7d5      	b.n	8184e <__register_exitproc+0x4a>
   818a2:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   818a6:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   818aa:	e7bb      	b.n	81824 <__register_exitproc+0x20>
   818ac:	6828      	ldr	r0, [r5, #0]
   818ae:	f7ff ffa7 	bl	81800 <__retarget_lock_release_recursive>
   818b2:	f04f 30ff 	mov.w	r0, #4294967295
   818b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   818ba:	bf00      	nop
   818bc:	20000450 	.word	0x20000450
   818c0:	0008198c 	.word	0x0008198c
   818c4:	00000000 	.word	0x00000000
   818c8:	304e4143 	.word	0x304e4143
   818cc:	73656d20 	.word	0x73656d20
   818d0:	65676173 	.word	0x65676173
   818d4:	72726120 	.word	0x72726120
   818d8:	64657669 	.word	0x64657669
   818dc:	206e6920 	.word	0x206e6920
   818e0:	2d6e6f6e 	.word	0x2d6e6f6e
   818e4:	64657375 	.word	0x64657375
   818e8:	69616d20 	.word	0x69616d20
   818ec:	786f626c 	.word	0x786f626c
   818f0:	00000d0a 	.word	0x00000d0a
   818f4:	7373656d 	.word	0x7373656d
   818f8:	20656761 	.word	0x20656761
   818fc:	203a6469 	.word	0x203a6469
   81900:	0d0a6425 	.word	0x0d0a6425
   81904:	00000000 	.word	0x00000000
   81908:	7373656d 	.word	0x7373656d
   8190c:	20656761 	.word	0x20656761
   81910:	61746164 	.word	0x61746164
   81914:	6e656c20 	.word	0x6e656c20
   81918:	3a687467 	.word	0x3a687467
   8191c:	0a642520 	.word	0x0a642520
   81920:	0000000d 	.word	0x0000000d
   81924:	00206425 	.word	0x00206425
   81928:	6f636e45 	.word	0x6f636e45
   8192c:	20726564 	.word	0x20726564
   81930:	61746164 	.word	0x61746164
   81934:	7825203a 	.word	0x7825203a
   81938:	000d0a20 	.word	0x000d0a20
   8193c:	6c6c6568 	.word	0x6c6c6568
   81940:	000d0a6f 	.word	0x000d0a6f
   81944:	6c616f67 	.word	0x6c616f67
   81948:	203a2073 	.word	0x203a2073
   8194c:	20206425 	.word	0x20206425
   81950:	000d0a20 	.word	0x000d0a20
   81954:	695f6f74 	.word	0x695f6f74
   81958:	6572636e 	.word	0x6572636e
   8195c:	746e656d 	.word	0x746e656d
   81960:	00000000 	.word	0x00000000
   81964:	6c756e28 	.word	0x6c756e28
   81968:	0000296c 	.word	0x0000296c
   8196c:	3a525245 	.word	0x3a525245
   81970:	52415520 	.word	0x52415520
   81974:	58522054 	.word	0x58522054
   81978:	66756220 	.word	0x66756220
   8197c:	20726566 	.word	0x20726566
   81980:	66207369 	.word	0x66207369
   81984:	0a6c6c75 	.word	0x0a6c6c75
   81988:	0000000d 	.word	0x0000000d

0008198c <_global_impure_ptr>:
   8198c:	20000028                                (.. 

00081990 <_init>:
   81990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81992:	bf00      	nop
   81994:	bcf8      	pop	{r3, r4, r5, r6, r7}
   81996:	bc08      	pop	{r3}
   81998:	469e      	mov	lr, r3
   8199a:	4770      	bx	lr

0008199c <__init_array_start>:
   8199c:	000817a9 	.word	0x000817a9

000819a0 <__frame_dummy_init_array_entry>:
   819a0:	00080119                                ....

000819a4 <_fini>:
   819a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   819a6:	bf00      	nop
   819a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   819aa:	bc08      	pop	{r3}
   819ac:	469e      	mov	lr, r3
   819ae:	4770      	bx	lr

000819b0 <__fini_array_start>:
   819b0:	000800f5 	.word	0x000800f5
