
ice_ice_arduino.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c58  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000434  20000000  00080c58  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000084  20000434  0008108c  00020434  2**2
                  ALLOC
  3 .stack        00000400  200004b8  00081110  00020434  2**0
                  ALLOC
  4 .heap         00000200  200008b8  00081510  00020434  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002045d  2**0
                  CONTENTS, READONLY
  7 .debug_info   000044bb  00000000  00000000  000204b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000cce  00000000  00000000  00024971  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00001179  00000000  00000000  0002563f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000150  00000000  00000000  000267b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000170  00000000  00000000  00026908  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00011a25  00000000  00000000  00026a78  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000030f5  00000000  00000000  0003849d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00054099  00000000  00000000  0003b592  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00000490  00000000  00000000  0008f62c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	b8 08 00 20 8d 03 08 00 89 03 08 00 89 03 08 00     ... ............
   80010:	89 03 08 00 89 03 08 00 89 03 08 00 00 00 00 00     ................
	...
   8002c:	89 03 08 00 89 03 08 00 00 00 00 00 89 03 08 00     ................
   8003c:	89 03 08 00 89 03 08 00 89 03 08 00 89 03 08 00     ................
   8004c:	89 03 08 00 89 03 08 00 89 03 08 00 89 03 08 00     ................
   8005c:	89 03 08 00 75 09 08 00 89 03 08 00 00 00 00 00     ....u...........
   8006c:	89 03 08 00 89 03 08 00 89 03 08 00 89 03 08 00     ................
	...
   80084:	89 03 08 00 89 03 08 00 89 03 08 00 89 03 08 00     ................
   80094:	89 03 08 00 89 03 08 00 89 03 08 00 89 03 08 00     ................
   800a4:	00 00 00 00 89 03 08 00 89 03 08 00 89 03 08 00     ................
   800b4:	89 03 08 00 89 03 08 00 89 03 08 00 89 03 08 00     ................
   800c4:	89 03 08 00 89 03 08 00 89 03 08 00 89 03 08 00     ................
   800d4:	89 03 08 00 89 03 08 00 89 03 08 00 89 03 08 00     ................
   800e4:	89 03 08 00 89 03 08 00 19 03 08 00 89 03 08 00     ................

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20000434 	.word	0x20000434
   80110:	00000000 	.word	0x00000000
   80114:	00080c58 	.word	0x00080c58

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00080c58 	.word	0x00080c58
   80154:	20000438 	.word	0x20000438
   80158:	00080c58 	.word	0x00080c58
   8015c:	00000000 	.word	0x00000000

00080160 <can_init>:


uint8_t can_init(uint32_t can_br, uint8_t num_tx_mb, uint8_t num_rx_mb)
{
	//Make sure num_rx_mb and num_tx_mb is valid
	if(num_rx_mb > 8 | num_tx_mb > 8 | num_rx_mb + num_tx_mb > 8)
   80160:	2908      	cmp	r1, #8
   80162:	bf98      	it	ls
   80164:	2a08      	cmpls	r2, #8
   80166:	d862      	bhi.n	8022e <can_init+0xce>
{
   80168:	b5f0      	push	{r4, r5, r6, r7, lr}
   8016a:	460d      	mov	r5, r1
	if(num_rx_mb > 8 | num_tx_mb > 8 | num_rx_mb + num_tx_mb > 8)
   8016c:	1853      	adds	r3, r2, r1
   8016e:	2b08      	cmp	r3, #8
   80170:	dc5b      	bgt.n	8022a <can_init+0xca>


	uint32_t ul_status; 
	
	//Disable can
	CAN0->CAN_MR &= ~CAN_MR_CANEN; 
   80172:	4c30      	ldr	r4, [pc, #192]	; (80234 <can_init+0xd4>)
   80174:	6823      	ldr	r3, [r4, #0]
   80176:	f023 0301 	bic.w	r3, r3, #1
   8017a:	6023      	str	r3, [r4, #0]
	//Clear status register on read
	ul_status = CAN0->CAN_SR; 
   8017c:	6923      	ldr	r3, [r4, #16]
	
	
	// Disable interrupts on CANH and CANL pins
	PIOA->PIO_IDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   8017e:	4b2e      	ldr	r3, [pc, #184]	; (80238 <can_init+0xd8>)
   80180:	f44f 7640 	mov.w	r6, #768	; 0x300
   80184:	645e      	str	r6, [r3, #68]	; 0x44
	
	//Select CAN0 RX and TX in PIOA
	uint32_t ul_sr = PIOA->PIO_ABSR;
   80186:	6f1e      	ldr	r6, [r3, #112]	; 0x70
	PIOA->PIO_ABSR = ~(PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0) & ul_sr;
   80188:	f026 0603 	bic.w	r6, r6, #3
   8018c:	671e      	str	r6, [r3, #112]	; 0x70
	
	// Disable the Parallel IO (PIO) of the Rx and Tx pins so that the peripheral controller can use them
	PIOA->PIO_PDR = PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0;
   8018e:	2603      	movs	r6, #3
   80190:	605e      	str	r6, [r3, #4]
	
	// Enable pull up on CANH and CANL pin
	PIOA->PIO_PUER = (PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0);
   80192:	665e      	str	r6, [r3, #100]	; 0x64
	
	
	//Enable Clock for CAN0 in PMC
	PMC->PMC_PCR = PMC_PCR_EN | (0 << PMC_PCR_DIV_Pos) | PMC_PCR_CMD | (ID_CAN0 << PMC_PCR_PID_Pos); // DIV = 1(can clk = MCK/2), CMD = 1 (write), PID = 2B (CAN0)
   80194:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   80198:	4e28      	ldr	r6, [pc, #160]	; (8023c <can_init+0xdc>)
   8019a:	f8c3 610c 	str.w	r6, [r3, #268]	; 0x10c
	PMC->PMC_PCER1 |= 1 << (ID_CAN0 - 32);
   8019e:	f8d3 6100 	ldr.w	r6, [r3, #256]	; 0x100
   801a2:	f446 6600 	orr.w	r6, r6, #2048	; 0x800
   801a6:	f8c3 6100 	str.w	r6, [r3, #256]	; 0x100
	
	//Set baudrate, Phase1, phase2 and propagation delay for can bus. Must match on all nodes!
	CAN0->CAN_BR = can_br;
   801aa:	6160      	str	r0, [r4, #20]
	/****** Start of mailbox configuration ******/

	uint32_t can_ier = 0;

	/* Configure receive mailboxes */
	for (int n = num_tx_mb; n <= num_rx_mb; n++)  //Simply one mailbox setup for all messages. You might want to apply filter for them.
   801ac:	428a      	cmp	r2, r1
   801ae:	db1e      	blt.n	801ee <can_init+0x8e>
   801b0:	3201      	adds	r2, #1
   801b2:	460c      	mov	r4, r1
	{
		CAN0->CAN_MB[n].CAN_MAM = 0; //Accept all messages
   801b4:	f04f 0c00 	mov.w	ip, #0
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   801b8:	f8df e078 	ldr.w	lr, [pc, #120]	; 80234 <can_init+0xd4>
   801bc:	f04f 5700 	mov.w	r7, #536870912	; 0x20000000
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_RX);
   801c0:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
   801c4:	0163      	lsls	r3, r4, #5
   801c6:	f103 2040 	add.w	r0, r3, #1073758208	; 0x40004000
   801ca:	f500 2030 	add.w	r0, r0, #720896	; 0xb0000
		CAN0->CAN_MB[n].CAN_MAM = 0; //Accept all messages
   801ce:	f8c0 c204 	str.w	ip, [r0, #516]	; 0x204
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   801d2:	4473      	add	r3, lr
   801d4:	f8c3 7208 	str.w	r7, [r3, #520]	; 0x208
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_RX);
   801d8:	f8c0 6200 	str.w	r6, [r0, #512]	; 0x200
		CAN0->CAN_MB[n].CAN_MCR |= CAN_MCR_MTCR;
   801dc:	f8d3 021c 	ldr.w	r0, [r3, #540]	; 0x21c
   801e0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   801e4:	f8c3 021c 	str.w	r0, [r3, #540]	; 0x21c
	for (int n = num_tx_mb; n <= num_rx_mb; n++)  //Simply one mailbox setup for all messages. You might want to apply filter for them.
   801e8:	3401      	adds	r4, #1
   801ea:	42a2      	cmp	r2, r4
   801ec:	d1ea      	bne.n	801c4 <can_init+0x64>

		//can_ier |= 1 << n; //Enable interrupt on rx mailbox
	}
	
	/*Configure transmit mailboxes */
	for (int n = 0; n < num_tx_mb; n++)
   801ee:	b181      	cbz	r1, 80212 <can_init+0xb2>
   801f0:	2300      	movs	r3, #0
	{
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   801f2:	4910      	ldr	r1, [pc, #64]	; (80234 <can_init+0xd4>)
   801f4:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_TX);
   801f8:	f04f 7040 	mov.w	r0, #50331648	; 0x3000000
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   801fc:	eb01 1243 	add.w	r2, r1, r3, lsl #5
   80200:	f8c2 4208 	str.w	r4, [r2, #520]	; 0x208
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_TX);
   80204:	f103 0210 	add.w	r2, r3, #16
   80208:	0152      	lsls	r2, r2, #5
   8020a:	5088      	str	r0, [r1, r2]
	for (int n = 0; n < num_tx_mb; n++)
   8020c:	3301      	adds	r3, #1
   8020e:	429d      	cmp	r5, r3
   80210:	d1f4      	bne.n	801fc <can_init+0x9c>
	}
	
	/****** End of mailbox configuraion ******/

	//Enable interrupt on receive mailboxes
	CAN0->CAN_IER = can_ier;
   80212:	4b08      	ldr	r3, [pc, #32]	; (80234 <can_init+0xd4>)
   80214:	2000      	movs	r0, #0
   80216:	6058      	str	r0, [r3, #4]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   80218:	f44f 6100 	mov.w	r1, #2048	; 0x800
   8021c:	4a08      	ldr	r2, [pc, #32]	; (80240 <can_init+0xe0>)
   8021e:	6051      	str	r1, [r2, #4]

	//Enable interrupt in NVIC 
	NVIC_EnableIRQ(ID_CAN0);

	//enable CAN
	CAN0->CAN_MR |= CAN_MR_CANEN;
   80220:	681a      	ldr	r2, [r3, #0]
   80222:	f042 0201 	orr.w	r2, r2, #1
   80226:	601a      	str	r2, [r3, #0]

	return 0;
   80228:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return 1; //Too many mailboxes is configured
   8022a:	2001      	movs	r0, #1
}
   8022c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return 1; //Too many mailboxes is configured
   8022e:	2001      	movs	r0, #1
   80230:	4770      	bx	lr
   80232:	bf00      	nop
   80234:	400b4000 	.word	0x400b4000
   80238:	400e0e00 	.word	0x400e0e00
   8023c:	1000102b 	.word	0x1000102b
   80240:	e000e100 	.word	0xe000e100

00080244 <can_init_def_tx_rx_mb>:
{
   80244:	b508      	push	{r3, lr}
	return can_init(can_br, 2, 3);
   80246:	2203      	movs	r2, #3
   80248:	2102      	movs	r1, #2
   8024a:	4b01      	ldr	r3, [pc, #4]	; (80250 <can_init_def_tx_rx_mb+0xc>)
   8024c:	4798      	blx	r3
}
   8024e:	bd08      	pop	{r3, pc}
   80250:	00080161 	.word	0x00080161

00080254 <can_receive>:
 * \param rx_mb_id ID of receive mailbox to be used
 *
 * \retval Success(0) or failure(1)
 */
uint8_t can_receive(CAN_MESSAGE* can_msg, uint8_t rx_mb_id)
{
   80254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//Check that mailbox is ready
	if(CAN0->CAN_MB[rx_mb_id].CAN_MSR & CAN_MSR_MRDY)
   80256:	014b      	lsls	r3, r1, #5
   80258:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   8025c:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   80260:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   80264:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   80268:	d101      	bne.n	8026e <can_receive+0x1a>
		CAN0->CAN_MB[rx_mb_id].CAN_MCR |= CAN_MCR_MTCR;
		return 0;
	}
	else //Mailbox busy
	{
		return 1;
   8026a:	2001      	movs	r0, #1
	}
}
   8026c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8026e:	460f      	mov	r7, r1
   80270:	4604      	mov	r4, r0
		uint32_t data_low = CAN0->CAN_MB[rx_mb_id].CAN_MDL;
   80272:	014b      	lsls	r3, r1, #5
   80274:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   80278:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   8027c:	f8d3 6214 	ldr.w	r6, [r3, #532]	; 0x214
		uint32_t data_high = CAN0->CAN_MB[rx_mb_id].CAN_MDH;
   80280:	f8d3 5218 	ldr.w	r5, [r3, #536]	; 0x218
		printf("datahigh: %d  |||||||\r", data_high);
   80284:	4629      	mov	r1, r5
   80286:	481f      	ldr	r0, [pc, #124]	; (80304 <can_receive+0xb0>)
   80288:	4b1f      	ldr	r3, [pc, #124]	; (80308 <can_receive+0xb4>)
   8028a:	4798      	blx	r3
   8028c:	4b1f      	ldr	r3, [pc, #124]	; (8030c <can_receive+0xb8>)
		for(int j = 0; j < 5*1600000; j++){
   8028e:	3b01      	subs	r3, #1
   80290:	d1fd      	bne.n	8028e <can_receive+0x3a>
		can_msg->id = (uint16_t)((CAN0->CAN_MB[rx_mb_id].CAN_MID & CAN_MID_MIDvA_Msk) >> CAN_MID_MIDvA_Pos);
   80292:	017b      	lsls	r3, r7, #5
   80294:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   80298:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   8029c:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
   802a0:	f3c1 418a 	ubfx	r1, r1, #18, #11
   802a4:	8021      	strh	r1, [r4, #0]
		printf("dataid: %d  |||||||\r", can_msg->id);
   802a6:	481a      	ldr	r0, [pc, #104]	; (80310 <can_receive+0xbc>)
   802a8:	4b17      	ldr	r3, [pc, #92]	; (80308 <can_receive+0xb4>)
   802aa:	4798      	blx	r3
   802ac:	4b17      	ldr	r3, [pc, #92]	; (8030c <can_receive+0xb8>)
		for(int j = 0; j < 5*1600000; j++){
   802ae:	3b01      	subs	r3, #1
   802b0:	d1fd      	bne.n	802ae <can_receive+0x5a>
		can_msg->data_length = (uint8_t)((CAN0->CAN_MB[rx_mb_id].CAN_MSR & CAN_MSR_MDLC_Msk) >> CAN_MSR_MDLC_Pos);
   802b2:	017b      	lsls	r3, r7, #5
   802b4:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   802b8:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   802bc:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   802c0:	f3c3 4303 	ubfx	r3, r3, #16, #4
   802c4:	70a3      	strb	r3, [r4, #2]
		for(int i = 0; i < can_msg->data_length;i++)
   802c6:	4619      	mov	r1, r3
   802c8:	b15b      	cbz	r3, 802e2 <can_receive+0x8e>
   802ca:	1ce2      	adds	r2, r4, #3
   802cc:	2300      	movs	r3, #0
			if(i < 4)
   802ce:	2b03      	cmp	r3, #3
				can_msg->data[i] = (char)(data_low & 0xff);
   802d0:	bfd9      	ittee	le
   802d2:	7016      	strble	r6, [r2, #0]
				data_low = data_low >> 8;
   802d4:	0a36      	lsrle	r6, r6, #8
				can_msg->data[i] = (uint8_t)(data_high & 0xff);
   802d6:	7015      	strbgt	r5, [r2, #0]
				data_high = data_high >> 8;
   802d8:	0a2d      	lsrgt	r5, r5, #8
		for(int i = 0; i < can_msg->data_length;i++)
   802da:	3301      	adds	r3, #1
   802dc:	3201      	adds	r2, #1
   802de:	428b      	cmp	r3, r1
   802e0:	d1f5      	bne.n	802ce <can_receive+0x7a>
		CAN0->CAN_MB[rx_mb_id].CAN_MMR = CAN_MMR_MOT_MB_RX;
   802e2:	4b0c      	ldr	r3, [pc, #48]	; (80314 <can_receive+0xc0>)
   802e4:	f107 0210 	add.w	r2, r7, #16
   802e8:	0152      	lsls	r2, r2, #5
   802ea:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
   802ee:	5099      	str	r1, [r3, r2]
		CAN0->CAN_MB[rx_mb_id].CAN_MCR |= CAN_MCR_MTCR;
   802f0:	eb03 1747 	add.w	r7, r3, r7, lsl #5
   802f4:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
   802f8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   802fc:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
		return 0;
   80300:	2000      	movs	r0, #0
   80302:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80304:	00080b4c 	.word	0x00080b4c
   80308:	000808c5 	.word	0x000808c5
   8030c:	007a1200 	.word	0x007a1200
   80310:	00080b64 	.word	0x00080b64
   80314:	400b4000 	.word	0x400b4000

00080318 <CAN0_Handler>:
 * \param void
 *
 * \retval 
 */
void CAN0_Handler( void )
{
   80318:	b510      	push	{r4, lr}
   8031a:	b084      	sub	sp, #16
	if(DEBUG_INTERRUPT)printf("CAN0 interrupt\n\r");
	char can_sr = CAN0->CAN_SR; 
   8031c:	4b15      	ldr	r3, [pc, #84]	; (80374 <CAN0_Handler+0x5c>)
   8031e:	691c      	ldr	r4, [r3, #16]
	
	//RX interrupt
	if(can_sr & (CAN_SR_MB1 | CAN_SR_MB2) )//Only mailbox 1 and 2 specified for receiving
   80320:	f014 0f06 	tst.w	r4, #6
   80324:	d010      	beq.n	80348 <CAN0_Handler+0x30>
	{
		CAN_MESSAGE message;
		if(can_sr & CAN_SR_MB1)  //Mailbox 1 event
   80326:	f014 0f02 	tst.w	r4, #2
   8032a:	d11a      	bne.n	80362 <CAN0_Handler+0x4a>
		{
			can_receive(&message, 1);

		}
		else if(can_sr & CAN_SR_MB2) //Mailbox 2 event
   8032c:	f014 0f04 	tst.w	r4, #4
   80330:	d01c      	beq.n	8036c <CAN0_Handler+0x54>
		
		{
			can_receive(&message, 2);
   80332:	2102      	movs	r1, #2
   80334:	a801      	add	r0, sp, #4
   80336:	4b10      	ldr	r3, [pc, #64]	; (80378 <CAN0_Handler+0x60>)
   80338:	4798      	blx	r3
			printf("CAN0 message arrived in non-used mailbox\n\r");
		}

		if(DEBUG_INTERRUPT)printf("message id: %d\n\r", message.id);
		if(DEBUG_INTERRUPT)printf("message data length: %d\n\r", message.data_length);
		for (int i = 0; i < message.data_length; i++)
   8033a:	f89d 2006 	ldrb.w	r2, [sp, #6]
   8033e:	b11a      	cbz	r2, 80348 <CAN0_Handler+0x30>
   80340:	2300      	movs	r3, #0
   80342:	3301      	adds	r3, #1
   80344:	4293      	cmp	r3, r2
   80346:	d1fc      	bne.n	80342 <CAN0_Handler+0x2a>
			if(DEBUG_INTERRUPT)printf("%d ", message.data[i]);
		}
		if(DEBUG_INTERRUPT)printf("\n\r");
	}
	
	if(can_sr & CAN_SR_MB0)
   80348:	f014 0f01 	tst.w	r4, #1
   8034c:	d002      	beq.n	80354 <CAN0_Handler+0x3c>
	{
		if(DEBUG_INTERRUPT) printf("CAN0 MB0 ready to send \n\r");
		
	//Disable interrupt
		CAN0->CAN_IDR = CAN_IER_MB0;
   8034e:	2201      	movs	r2, #1
   80350:	4b08      	ldr	r3, [pc, #32]	; (80374 <CAN0_Handler+0x5c>)
   80352:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   80354:	f44f 6200 	mov.w	r2, #2048	; 0x800
   80358:	4b08      	ldr	r3, [pc, #32]	; (8037c <CAN0_Handler+0x64>)
   8035a:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184

	}
	
	NVIC_ClearPendingIRQ(ID_CAN0);
	//sei();*/
}
   8035e:	b004      	add	sp, #16
   80360:	bd10      	pop	{r4, pc}
			can_receive(&message, 1);
   80362:	2101      	movs	r1, #1
   80364:	a801      	add	r0, sp, #4
   80366:	4b04      	ldr	r3, [pc, #16]	; (80378 <CAN0_Handler+0x60>)
   80368:	4798      	blx	r3
   8036a:	e7e6      	b.n	8033a <CAN0_Handler+0x22>
			printf("CAN0 message arrived in non-used mailbox\n\r");
   8036c:	4804      	ldr	r0, [pc, #16]	; (80380 <CAN0_Handler+0x68>)
   8036e:	4b05      	ldr	r3, [pc, #20]	; (80384 <CAN0_Handler+0x6c>)
   80370:	4798      	blx	r3
   80372:	e7e2      	b.n	8033a <CAN0_Handler+0x22>
   80374:	400b4000 	.word	0x400b4000
   80378:	00080255 	.word	0x00080255
   8037c:	e000e100 	.word	0xe000e100
   80380:	00080b7c 	.word	0x00080b7c
   80384:	000808c5 	.word	0x000808c5

00080388 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80388:	e7fe      	b.n	80388 <Dummy_Handler>
	...

0008038c <Reset_Handler>:
{
   8038c:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
   8038e:	4b18      	ldr	r3, [pc, #96]	; (803f0 <Reset_Handler+0x64>)
   80390:	4a18      	ldr	r2, [pc, #96]	; (803f4 <Reset_Handler+0x68>)
   80392:	429a      	cmp	r2, r3
   80394:	d010      	beq.n	803b8 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
   80396:	4b18      	ldr	r3, [pc, #96]	; (803f8 <Reset_Handler+0x6c>)
   80398:	4a15      	ldr	r2, [pc, #84]	; (803f0 <Reset_Handler+0x64>)
   8039a:	429a      	cmp	r2, r3
   8039c:	d20c      	bcs.n	803b8 <Reset_Handler+0x2c>
   8039e:	3b01      	subs	r3, #1
   803a0:	1a9b      	subs	r3, r3, r2
   803a2:	f023 0303 	bic.w	r3, r3, #3
   803a6:	3304      	adds	r3, #4
   803a8:	4413      	add	r3, r2
   803aa:	4912      	ldr	r1, [pc, #72]	; (803f4 <Reset_Handler+0x68>)
                        *pDest++ = *pSrc++;
   803ac:	f851 0b04 	ldr.w	r0, [r1], #4
   803b0:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
   803b4:	429a      	cmp	r2, r3
   803b6:	d1f9      	bne.n	803ac <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
   803b8:	4b10      	ldr	r3, [pc, #64]	; (803fc <Reset_Handler+0x70>)
   803ba:	4a11      	ldr	r2, [pc, #68]	; (80400 <Reset_Handler+0x74>)
   803bc:	429a      	cmp	r2, r3
   803be:	d20a      	bcs.n	803d6 <Reset_Handler+0x4a>
   803c0:	3b01      	subs	r3, #1
   803c2:	1a9b      	subs	r3, r3, r2
   803c4:	f023 0303 	bic.w	r3, r3, #3
   803c8:	3304      	adds	r3, #4
   803ca:	4413      	add	r3, r2
                *pDest++ = 0;
   803cc:	2100      	movs	r1, #0
   803ce:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
   803d2:	4293      	cmp	r3, r2
   803d4:	d1fb      	bne.n	803ce <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   803d6:	4b0b      	ldr	r3, [pc, #44]	; (80404 <Reset_Handler+0x78>)
   803d8:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   803dc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   803e0:	4a09      	ldr	r2, [pc, #36]	; (80408 <Reset_Handler+0x7c>)
   803e2:	6093      	str	r3, [r2, #8]
        __libc_init_array();
   803e4:	4b09      	ldr	r3, [pc, #36]	; (8040c <Reset_Handler+0x80>)
   803e6:	4798      	blx	r3
        main();
   803e8:	4b09      	ldr	r3, [pc, #36]	; (80410 <Reset_Handler+0x84>)
   803ea:	4798      	blx	r3
   803ec:	e7fe      	b.n	803ec <Reset_Handler+0x60>
   803ee:	bf00      	nop
   803f0:	20000000 	.word	0x20000000
   803f4:	00080c58 	.word	0x00080c58
   803f8:	20000434 	.word	0x20000434
   803fc:	200004b8 	.word	0x200004b8
   80400:	20000434 	.word	0x20000434
   80404:	00080000 	.word	0x00080000
   80408:	e000ed00 	.word	0xe000ed00
   8040c:	000809dd 	.word	0x000809dd
   80410:	000804b9 	.word	0x000804b9

00080414 <SystemInit>:
 * Initialize the System and update the SystemFrequency variable.
 */
void SystemInit( void )
{
  /* Set FWS according to SYS_BOARD_MCKR configuration */
  EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   80414:	f44f 6380 	mov.w	r3, #1024	; 0x400
   80418:	4a20      	ldr	r2, [pc, #128]	; (8049c <SystemInit+0x88>)
   8041a:	6013      	str	r3, [r2, #0]
  EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
   8041c:	f502 7200 	add.w	r2, r2, #512	; 0x200
   80420:	6013      	str	r3, [r2, #0]

  /* Initialize main oscillator */
  if ( !(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) )
   80422:	4b1f      	ldr	r3, [pc, #124]	; (804a0 <SystemInit+0x8c>)
   80424:	6a1b      	ldr	r3, [r3, #32]
   80426:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   8042a:	d107      	bne.n	8043c <SystemInit+0x28>
  {
    PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
   8042c:	4a1d      	ldr	r2, [pc, #116]	; (804a4 <SystemInit+0x90>)
   8042e:	4b1c      	ldr	r3, [pc, #112]	; (804a0 <SystemInit+0x8c>)
   80430:	621a      	str	r2, [r3, #32]
    while ( !(PMC->PMC_SR & PMC_SR_MOSCXTS) )
   80432:	461a      	mov	r2, r3
   80434:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80436:	f013 0f01 	tst.w	r3, #1
   8043a:	d0fb      	beq.n	80434 <SystemInit+0x20>
    {
    }
  }

  /* Switch to 3-20MHz Xtal oscillator */
  PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;
   8043c:	4a1a      	ldr	r2, [pc, #104]	; (804a8 <SystemInit+0x94>)
   8043e:	4b18      	ldr	r3, [pc, #96]	; (804a0 <SystemInit+0x8c>)
   80440:	621a      	str	r2, [r3, #32]

  while ( !(PMC->PMC_SR & PMC_SR_MOSCSELS) )
   80442:	461a      	mov	r2, r3
   80444:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80446:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   8044a:	d0fb      	beq.n	80444 <SystemInit+0x30>
  {
  }
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   8044c:	4a14      	ldr	r2, [pc, #80]	; (804a0 <SystemInit+0x8c>)
   8044e:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80450:	f023 0303 	bic.w	r3, r3, #3
   80454:	f043 0301 	orr.w	r3, r3, #1
   80458:	6313      	str	r3, [r2, #48]	; 0x30
  while (!(PMC->PMC_SR & PMC_SR_MCKRDY))
   8045a:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8045c:	f013 0f08 	tst.w	r3, #8
   80460:	d0fb      	beq.n	8045a <SystemInit+0x46>
  {
  }

  /* Initialize PLLA */
  PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
   80462:	4a12      	ldr	r2, [pc, #72]	; (804ac <SystemInit+0x98>)
   80464:	4b0e      	ldr	r3, [pc, #56]	; (804a0 <SystemInit+0x8c>)
   80466:	629a      	str	r2, [r3, #40]	; 0x28
  while ( !(PMC->PMC_SR & PMC_SR_LOCKA) )
   80468:	461a      	mov	r2, r3
   8046a:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8046c:	f013 0f02 	tst.w	r3, #2
   80470:	d0fb      	beq.n	8046a <SystemInit+0x56>
  {
  }

  /* Switch to main clock */
  PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   80472:	2211      	movs	r2, #17
   80474:	4b0a      	ldr	r3, [pc, #40]	; (804a0 <SystemInit+0x8c>)
   80476:	631a      	str	r2, [r3, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   80478:	461a      	mov	r2, r3
   8047a:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8047c:	f013 0f08 	tst.w	r3, #8
   80480:	d0fb      	beq.n	8047a <SystemInit+0x66>
  {
  }

  /* Switch to PLLA */
  PMC->PMC_MCKR = SYS_BOARD_MCKR;
   80482:	2212      	movs	r2, #18
   80484:	4b06      	ldr	r3, [pc, #24]	; (804a0 <SystemInit+0x8c>)
   80486:	631a      	str	r2, [r3, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   80488:	461a      	mov	r2, r3
   8048a:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8048c:	f013 0f08 	tst.w	r3, #8
   80490:	d0fb      	beq.n	8048a <SystemInit+0x76>
  {
  }

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
   80492:	4a07      	ldr	r2, [pc, #28]	; (804b0 <SystemInit+0x9c>)
   80494:	4b07      	ldr	r3, [pc, #28]	; (804b4 <SystemInit+0xa0>)
   80496:	601a      	str	r2, [r3, #0]
   80498:	4770      	bx	lr
   8049a:	bf00      	nop
   8049c:	400e0a00 	.word	0x400e0a00
   804a0:	400e0600 	.word	0x400e0600
   804a4:	00370809 	.word	0x00370809
   804a8:	01370809 	.word	0x01370809
   804ac:	200d3f01 	.word	0x200d3f01
   804b0:	0501bd00 	.word	0x0501bd00
   804b4:	20000000 	.word	0x20000000

000804b8 <main>:
#include "uart.h"
#include "printf-stdarg.h"


int main(void)
{
   804b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   804bc:	b087      	sub	sp, #28
    /* Initialize the SAM system */
    SystemInit();
   804be:	4b42      	ldr	r3, [pc, #264]	; (805c8 <main+0x110>)
   804c0:	4798      	blx	r3
	
	can_init_def_tx_rx_mb(0x00290561); // 0x00290561 = 0b 00000000001010010000010101100001// 0b000000000000100100010001000100010
   804c2:	4842      	ldr	r0, [pc, #264]	; (805cc <main+0x114>)
   804c4:	4b42      	ldr	r3, [pc, #264]	; (805d0 <main+0x118>)
   804c6:	4798      	blx	r3
	configure_uart();
   804c8:	4b42      	ldr	r3, [pc, #264]	; (805d4 <main+0x11c>)
   804ca:	4798      	blx	r3
	
	//PMC->PMC_MCKR = 0b00000000000000000000000001110010;

	
	PMC->PMC_PCER0 |= PMC_PCER0_PID11; //Peripheral Clock Enable Register 0, Peripheral Clock 14 Enable
   804cc:	4a42      	ldr	r2, [pc, #264]	; (805d8 <main+0x120>)
   804ce:	6913      	ldr	r3, [r2, #16]
   804d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   804d4:	6113      	str	r3, [r2, #16]
	//PIOA->PIO_WPMR &= ~PIO_WPMR_WPEN; //Write Protect Mode Register, Write Protect Enable
	
	
	PIOA->PIO_PER |= PIO_PER_P19; //PIO Enable Register, PIO Enable
   804d6:	4b41      	ldr	r3, [pc, #260]	; (805dc <main+0x124>)
   804d8:	681a      	ldr	r2, [r3, #0]
   804da:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   804de:	601a      	str	r2, [r3, #0]
	PIOA->PIO_OER |= PIO_OER_P19; //Output Enable Register, Output Enable
   804e0:	691a      	ldr	r2, [r3, #16]
   804e2:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   804e6:	611a      	str	r2, [r3, #16]
	
	PIOA->PIO_PER |= PIO_PER_P20; //PIO Enable Register, PIO Enable
   804e8:	681a      	ldr	r2, [r3, #0]
   804ea:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   804ee:	601a      	str	r2, [r3, #0]
	PIOA->PIO_OER |= PIO_OER_P20; //Output Enable Register, Output Enable
   804f0:	691a      	ldr	r2, [r3, #16]
   804f2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   804f6:	611a      	str	r2, [r3, #16]
	PIOA->PIO_PER |= PIO_PER_P9; //PIO Enable Register, PIO Enable
	PIOA->PIO_OER |= PIO_OER_P9; //Output Enable Register, Output Enable*/
	volatile CAN_MESSAGE msg;
    while (1) 
    {
		PIOA->PIO_SODR = PIO_SODR_P19; //Set Output Data Register, Set Output Data
   804f8:	461f      	mov	r7, r3
			//printf("%d \r", i);
		}
		PIOA->PIO_CODR = PIO_CODR_P20; //Set Output Data Register, Set Output Data
		
		
		if(!can_receive(&msg, 0)){
   804fa:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 805f8 <main+0x140>
   804fe:	e05c      	b.n	805ba <main+0x102>
   80500:	2400      	movs	r4, #0
			for(int i = 0; i < 8; i++){
				for(int j = 0; j < 5*1600000; j++){
					//printf("%d \r", i);
				}
				printf("data111: %d %d %d %d |||||||\r", msg.data[i], msg.data_length, msg.id, i);
   80502:	4e37      	ldr	r6, [pc, #220]	; (805e0 <main+0x128>)
   80504:	4d37      	ldr	r5, [pc, #220]	; (805e4 <main+0x12c>)
		PIOA->PIO_SODR = PIO_SODR_P20; //Set Output Data Register, Set Output Data
   80506:	4b38      	ldr	r3, [pc, #224]	; (805e8 <main+0x130>)
				for(int j = 0; j < 5*1600000; j++){
   80508:	3b01      	subs	r3, #1
   8050a:	d1fd      	bne.n	80508 <main+0x50>
				printf("data111: %d %d %d %d |||||||\r", msg.data[i], msg.data_length, msg.id, i);
   8050c:	ab06      	add	r3, sp, #24
   8050e:	4423      	add	r3, r4
   80510:	f813 1c09 	ldrb.w	r1, [r3, #-9]
   80514:	f89d 200e 	ldrb.w	r2, [sp, #14]
   80518:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   8051c:	9400      	str	r4, [sp, #0]
   8051e:	b29b      	uxth	r3, r3
   80520:	4630      	mov	r0, r6
   80522:	47a8      	blx	r5
			for(int i = 0; i < 8; i++){
   80524:	3401      	adds	r4, #1
   80526:	2c08      	cmp	r4, #8
   80528:	d1ed      	bne.n	80506 <main+0x4e>
   8052a:	e016      	b.n	8055a <main+0xa2>
				}
				printf("data222: %d %d %d %d |||||||\r", msg.data[i], msg.data_length, msg.id, i);
				
			}
		}
		if(!can_receive(&msg, 2)){
   8052c:	2102      	movs	r1, #2
   8052e:	a803      	add	r0, sp, #12
   80530:	47c0      	blx	r8
   80532:	b368      	cbz	r0, 80590 <main+0xd8>
		PIOA->PIO_SODR = PIO_SODR_P19; //Set Output Data Register, Set Output Data
   80534:	f8c7 b030 	str.w	fp, [r7, #48]	; 0x30
   80538:	4b2c      	ldr	r3, [pc, #176]	; (805ec <main+0x134>)
		for(int i = 0; i < 1600000; i++){
   8053a:	3b01      	subs	r3, #1
   8053c:	d1fd      	bne.n	8053a <main+0x82>
		PIOA->PIO_CODR = PIO_CODR_P19; //Set Output Data Register, Set Output Data
   8053e:	f8c7 a034 	str.w	sl, [r7, #52]	; 0x34
		PIOA->PIO_SODR = PIO_SODR_P20; //Set Output Data Register, Set Output Data
   80542:	f8c7 9030 	str.w	r9, [r7, #48]	; 0x30
   80546:	4b29      	ldr	r3, [pc, #164]	; (805ec <main+0x134>)
		for(int i = 0; i < 1600000; i++){
   80548:	3b01      	subs	r3, #1
   8054a:	d1fd      	bne.n	80548 <main+0x90>
		PIOA->PIO_CODR = PIO_CODR_P20; //Set Output Data Register, Set Output Data
   8054c:	f8c7 9034 	str.w	r9, [r7, #52]	; 0x34
		if(!can_receive(&msg, 0)){
   80550:	2100      	movs	r1, #0
   80552:	a803      	add	r0, sp, #12
   80554:	47c0      	blx	r8
   80556:	2800      	cmp	r0, #0
   80558:	d0d2      	beq.n	80500 <main+0x48>
		if(!can_receive(&msg, 1)){
   8055a:	2101      	movs	r1, #1
   8055c:	a803      	add	r0, sp, #12
   8055e:	47c0      	blx	r8
   80560:	2800      	cmp	r0, #0
   80562:	d1e3      	bne.n	8052c <main+0x74>
   80564:	2400      	movs	r4, #0
				printf("data222: %d %d %d %d |||||||\r", msg.data[i], msg.data_length, msg.id, i);
   80566:	4e22      	ldr	r6, [pc, #136]	; (805f0 <main+0x138>)
   80568:	4d1e      	ldr	r5, [pc, #120]	; (805e4 <main+0x12c>)
   8056a:	4b1f      	ldr	r3, [pc, #124]	; (805e8 <main+0x130>)
				for(int j = 0; j < 5*1600000; j++){
   8056c:	3b01      	subs	r3, #1
   8056e:	d1fd      	bne.n	8056c <main+0xb4>
				printf("data222: %d %d %d %d |||||||\r", msg.data[i], msg.data_length, msg.id, i);
   80570:	ab06      	add	r3, sp, #24
   80572:	4423      	add	r3, r4
   80574:	f813 1c09 	ldrb.w	r1, [r3, #-9]
   80578:	f89d 200e 	ldrb.w	r2, [sp, #14]
   8057c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   80580:	9400      	str	r4, [sp, #0]
   80582:	b29b      	uxth	r3, r3
   80584:	4630      	mov	r0, r6
   80586:	47a8      	blx	r5
			for(int i = 0; i < 8; i++){
   80588:	3401      	adds	r4, #1
   8058a:	2c08      	cmp	r4, #8
   8058c:	d1ed      	bne.n	8056a <main+0xb2>
   8058e:	e7cd      	b.n	8052c <main+0x74>
   80590:	2400      	movs	r4, #0
			for(int i = 0; i < 8; i++){
				for(int j = 0; j < 5*1600000; j++){
					//printf("%d \r", i);
				}
				printf("data333: %d %d %d %d |||||||\r", msg.data[i], msg.data_length, msg.id, i);
   80592:	4e18      	ldr	r6, [pc, #96]	; (805f4 <main+0x13c>)
   80594:	4d13      	ldr	r5, [pc, #76]	; (805e4 <main+0x12c>)
   80596:	4b14      	ldr	r3, [pc, #80]	; (805e8 <main+0x130>)
				for(int j = 0; j < 5*1600000; j++){
   80598:	3b01      	subs	r3, #1
   8059a:	d1fd      	bne.n	80598 <main+0xe0>
				printf("data333: %d %d %d %d |||||||\r", msg.data[i], msg.data_length, msg.id, i);
   8059c:	ab06      	add	r3, sp, #24
   8059e:	4423      	add	r3, r4
   805a0:	f813 1c09 	ldrb.w	r1, [r3, #-9]
   805a4:	f89d 200e 	ldrb.w	r2, [sp, #14]
   805a8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   805ac:	9400      	str	r4, [sp, #0]
   805ae:	b29b      	uxth	r3, r3
   805b0:	4630      	mov	r0, r6
   805b2:	47a8      	blx	r5
			for(int i = 0; i < 8; i++){
   805b4:	3401      	adds	r4, #1
   805b6:	2c08      	cmp	r4, #8
   805b8:	d1ed      	bne.n	80596 <main+0xde>
		PIOA->PIO_SODR = PIO_SODR_P19; //Set Output Data Register, Set Output Data
   805ba:	f44f 2a00 	mov.w	sl, #524288	; 0x80000
   805be:	46d3      	mov	fp, sl
		PIOA->PIO_SODR = PIO_SODR_P20; //Set Output Data Register, Set Output Data
   805c0:	f44f 1980 	mov.w	r9, #1048576	; 0x100000
   805c4:	e7b6      	b.n	80534 <main+0x7c>
   805c6:	bf00      	nop
   805c8:	00080415 	.word	0x00080415
   805cc:	00290561 	.word	0x00290561
   805d0:	00080245 	.word	0x00080245
   805d4:	000808e9 	.word	0x000808e9
   805d8:	400e0600 	.word	0x400e0600
   805dc:	400e0e00 	.word	0x400e0e00
   805e0:	00080ba8 	.word	0x00080ba8
   805e4:	000808c5 	.word	0x000808c5
   805e8:	007a1200 	.word	0x007a1200
   805ec:	00186a00 	.word	0x00186a00
   805f0:	00080bc8 	.word	0x00080bc8
   805f4:	00080be8 	.word	0x00080be8
   805f8:	00080255 	.word	0x00080255

000805fc <prints>:

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
   805fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   80600:	460d      	mov	r5, r1
	register int pc = 0, padchar = ' ';

	if (width > 0) {
   80602:	1e16      	subs	r6, r2, #0
   80604:	dd48      	ble.n	80698 <prints+0x9c>
		register int len = 0;
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
   80606:	780a      	ldrb	r2, [r1, #0]
   80608:	2a00      	cmp	r2, #0
   8060a:	d035      	beq.n	80678 <prints+0x7c>
   8060c:	460a      	mov	r2, r1
   8060e:	2400      	movs	r4, #0
   80610:	3401      	adds	r4, #1
   80612:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   80616:	2900      	cmp	r1, #0
   80618:	d1fa      	bne.n	80610 <prints+0x14>
		if (len >= width) width = 0;
   8061a:	42a6      	cmp	r6, r4
   8061c:	dc2d      	bgt.n	8067a <prints+0x7e>
   8061e:	2400      	movs	r4, #0
		else width -= len;
		if (pad & PAD_ZERO) padchar = '0';
   80620:	f003 0202 	and.w	r2, r3, #2
   80624:	2a00      	cmp	r2, #0
   80626:	bf0c      	ite	eq
   80628:	f04f 0820 	moveq.w	r8, #32
   8062c:	f04f 0830 	movne.w	r8, #48	; 0x30
	}
	if (!(pad & PAD_RIGHT)) {
   80630:	f013 0301 	ands.w	r3, r3, #1
   80634:	d123      	bne.n	8067e <prints+0x82>
		for ( ; width > 0; --width) {
   80636:	2c00      	cmp	r4, #0
   80638:	dd28      	ble.n	8068c <prints+0x90>
   8063a:	4626      	mov	r6, r4
	(void) uart_putchar(c);  //Send characters to uart
   8063c:	fa5f f988 	uxtb.w	r9, r8
   80640:	4f18      	ldr	r7, [pc, #96]	; (806a4 <prints+0xa8>)
   80642:	4648      	mov	r0, r9
   80644:	47b8      	blx	r7
		for ( ; width > 0; --width) {
   80646:	3e01      	subs	r6, #1
   80648:	d1fb      	bne.n	80642 <prints+0x46>
			printchar (out, padchar);
			++pc;
		}
	}
	for ( ; *string ; ++string) {
   8064a:	7828      	ldrb	r0, [r5, #0]
   8064c:	b188      	cbz	r0, 80672 <prints+0x76>
	(void) uart_putchar(c);  //Send characters to uart
   8064e:	4f15      	ldr	r7, [pc, #84]	; (806a4 <prints+0xa8>)
   80650:	47b8      	blx	r7
		printchar (out, *string);
		++pc;
   80652:	3401      	adds	r4, #1
	for ( ; *string ; ++string) {
   80654:	f815 0f01 	ldrb.w	r0, [r5, #1]!
   80658:	2800      	cmp	r0, #0
   8065a:	d1f9      	bne.n	80650 <prints+0x54>
	}
	for ( ; width > 0; --width) {
   8065c:	2e00      	cmp	r6, #0
   8065e:	dd08      	ble.n	80672 <prints+0x76>
   80660:	4635      	mov	r5, r6
	(void) uart_putchar(c);  //Send characters to uart
   80662:	fa5f f888 	uxtb.w	r8, r8
   80666:	4f0f      	ldr	r7, [pc, #60]	; (806a4 <prints+0xa8>)
   80668:	4640      	mov	r0, r8
   8066a:	47b8      	blx	r7
	for ( ; width > 0; --width) {
   8066c:	3d01      	subs	r5, #1
   8066e:	d1fb      	bne.n	80668 <prints+0x6c>
   80670:	4434      	add	r4, r6
		printchar (out, padchar);
		++pc;
	}

	return pc;
}
   80672:	4620      	mov	r0, r4
   80674:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		for (ptr = string; *ptr; ++ptr) ++len;
   80678:	2400      	movs	r4, #0
		else width -= len;
   8067a:	1b34      	subs	r4, r6, r4
   8067c:	e7d0      	b.n	80620 <prints+0x24>
   8067e:	4626      	mov	r6, r4
	for ( ; *string ; ++string) {
   80680:	7828      	ldrb	r0, [r5, #0]
   80682:	b108      	cbz	r0, 80688 <prints+0x8c>
	register int pc = 0, padchar = ' ';
   80684:	2400      	movs	r4, #0
   80686:	e7e2      	b.n	8064e <prints+0x52>
   80688:	2400      	movs	r4, #0
   8068a:	e7e7      	b.n	8065c <prints+0x60>
		for ( ; width > 0; --width) {
   8068c:	4626      	mov	r6, r4
   8068e:	461c      	mov	r4, r3
   80690:	e7db      	b.n	8064a <prints+0x4e>
	register int pc = 0, padchar = ' ';
   80692:	f04f 0820 	mov.w	r8, #32
   80696:	e7d8      	b.n	8064a <prints+0x4e>
	if (!(pad & PAD_RIGHT)) {
   80698:	f013 0401 	ands.w	r4, r3, #1
   8069c:	d0f9      	beq.n	80692 <prints+0x96>
	register int pc = 0, padchar = ' ';
   8069e:	f04f 0820 	mov.w	r8, #32
   806a2:	e7ed      	b.n	80680 <prints+0x84>
   806a4:	00080951 	.word	0x00080951

000806a8 <printi>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
   806a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   806aa:	b085      	sub	sp, #20
   806ac:	4607      	mov	r7, r0
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
	register unsigned int u = i;

	if (i == 0) {
   806ae:	b381      	cbz	r1, 80712 <printi+0x6a>
   806b0:	460c      	mov	r4, r1
		print_buf[0] = '0';
		print_buf[1] = '\0';
		return prints (out, print_buf, width, pad);
	}

	if (sg && b == 10 && i < 0) {
   806b2:	b10b      	cbz	r3, 806b8 <printi+0x10>
   806b4:	2a0a      	cmp	r2, #10
   806b6:	d038      	beq.n	8072a <printi+0x82>
		neg = 1;
		u = -i;
	}

	s = print_buf + PRINT_BUF_LEN-1;
	*s = '\0';
   806b8:	2300      	movs	r3, #0
   806ba:	f88d 300f 	strb.w	r3, [sp, #15]

	while (u) {
   806be:	2600      	movs	r6, #0
   806c0:	2900      	cmp	r1, #0
   806c2:	d046      	beq.n	80752 <printi+0xaa>
   806c4:	f10d 050f 	add.w	r5, sp, #15
		t = u % b;
		if( t >= 10 )
			t += letbase - '0' - 10;
   806c8:	990c      	ldr	r1, [sp, #48]	; 0x30
   806ca:	393a      	subs	r1, #58	; 0x3a
		t = u % b;
   806cc:	fbb4 f3f2 	udiv	r3, r4, r2
   806d0:	fb02 4313 	mls	r3, r2, r3, r4
		if( t >= 10 )
   806d4:	2b09      	cmp	r3, #9
			t += letbase - '0' - 10;
   806d6:	bfc8      	it	gt
   806d8:	185b      	addgt	r3, r3, r1
		*--s = t + '0';
   806da:	3330      	adds	r3, #48	; 0x30
   806dc:	f805 3d01 	strb.w	r3, [r5, #-1]!
		u /= b;
   806e0:	fbb4 f4f2 	udiv	r4, r4, r2
	while (u) {
   806e4:	2c00      	cmp	r4, #0
   806e6:	d1f1      	bne.n	806cc <printi+0x24>
	}

	if (neg) {
   806e8:	b156      	cbz	r6, 80700 <printi+0x58>
		if( width && (pad & PAD_ZERO) ) {
   806ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   806ec:	b11b      	cbz	r3, 806f6 <printi+0x4e>
   806ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   806f0:	f013 0f02 	tst.w	r3, #2
   806f4:	d125      	bne.n	80742 <printi+0x9a>
			printchar (out, '-');
			++pc;
			--width;
		}
		else {
			*--s = '-';
   806f6:	232d      	movs	r3, #45	; 0x2d
   806f8:	f805 3c01 	strb.w	r3, [r5, #-1]
   806fc:	3d01      	subs	r5, #1
	register int t, neg = 0, pc = 0;
   806fe:	2600      	movs	r6, #0
		}
	}

	return pc + prints (out, s, width, pad);
   80700:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80702:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   80704:	4629      	mov	r1, r5
   80706:	4638      	mov	r0, r7
   80708:	4c14      	ldr	r4, [pc, #80]	; (8075c <printi+0xb4>)
   8070a:	47a0      	blx	r4
   8070c:	4430      	add	r0, r6
}
   8070e:	b005      	add	sp, #20
   80710:	bdf0      	pop	{r4, r5, r6, r7, pc}
		print_buf[0] = '0';
   80712:	2330      	movs	r3, #48	; 0x30
   80714:	f88d 3004 	strb.w	r3, [sp, #4]
		print_buf[1] = '\0';
   80718:	2300      	movs	r3, #0
   8071a:	f88d 3005 	strb.w	r3, [sp, #5]
		return prints (out, print_buf, width, pad);
   8071e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80720:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   80722:	a901      	add	r1, sp, #4
   80724:	4c0d      	ldr	r4, [pc, #52]	; (8075c <printi+0xb4>)
   80726:	47a0      	blx	r4
   80728:	e7f1      	b.n	8070e <printi+0x66>
	if (sg && b == 10 && i < 0) {
   8072a:	2900      	cmp	r1, #0
   8072c:	dac4      	bge.n	806b8 <printi+0x10>
		u = -i;
   8072e:	424c      	negs	r4, r1
	*s = '\0';
   80730:	2300      	movs	r3, #0
   80732:	f88d 300f 	strb.w	r3, [sp, #15]
	s = print_buf + PRINT_BUF_LEN-1;
   80736:	f10d 050f 	add.w	r5, sp, #15
	while (u) {
   8073a:	2c00      	cmp	r4, #0
   8073c:	d0d5      	beq.n	806ea <printi+0x42>
		neg = 1;
   8073e:	2601      	movs	r6, #1
   80740:	e7c0      	b.n	806c4 <printi+0x1c>
	(void) uart_putchar(c);  //Send characters to uart
   80742:	202d      	movs	r0, #45	; 0x2d
   80744:	4b06      	ldr	r3, [pc, #24]	; (80760 <printi+0xb8>)
   80746:	4798      	blx	r3
			--width;
   80748:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8074a:	3b01      	subs	r3, #1
   8074c:	930a      	str	r3, [sp, #40]	; 0x28
			++pc;
   8074e:	2601      	movs	r6, #1
			--width;
   80750:	e7d6      	b.n	80700 <printi+0x58>
	register int t, neg = 0, pc = 0;
   80752:	461e      	mov	r6, r3
	s = print_buf + PRINT_BUF_LEN-1;
   80754:	f10d 050f 	add.w	r5, sp, #15
   80758:	e7d2      	b.n	80700 <printi+0x58>
   8075a:	bf00      	nop
   8075c:	000805fd 	.word	0x000805fd
   80760:	00080951 	.word	0x00080951

00080764 <print>:

static int print( char **out, const char *format, va_list args )
{
   80764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80768:	b087      	sub	sp, #28
   8076a:	4680      	mov	r8, r0
	register int width, pad;
	register int pc = 0;
	char scr[2];

	for (; *format != 0; ++format) {
   8076c:	780b      	ldrb	r3, [r1, #0]
   8076e:	2b00      	cmp	r3, #0
   80770:	f000 8094 	beq.w	8089c <print+0x138>
   80774:	468b      	mov	fp, r1
   80776:	4617      	mov	r7, r2
   80778:	2500      	movs	r5, #0
	(void) uart_putchar(c);  //Send characters to uart
   8077a:	4e4e      	ldr	r6, [pc, #312]	; (808b4 <print+0x150>)
			}
			if( *format == 'c' ) {
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
				scr[1] = '\0';
				pc += prints (out, scr, width, pad);
   8077c:	f8df a13c 	ldr.w	sl, [pc, #316]	; 808bc <print+0x158>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
   80780:	f8df 913c 	ldr.w	r9, [pc, #316]	; 808c0 <print+0x15c>
   80784:	e046      	b.n	80814 <print+0xb0>
			for ( ; *format >= '0' && *format <= '9'; ++format) {
   80786:	2200      	movs	r2, #0
   80788:	e070      	b.n	8086c <print+0x108>
				register char *s = (char *)va_arg( args, int );
   8078a:	6839      	ldr	r1, [r7, #0]
   8078c:	3704      	adds	r7, #4
				pc += prints (out, s?s:"(null)", width, pad);
   8078e:	484a      	ldr	r0, [pc, #296]	; (808b8 <print+0x154>)
   80790:	2900      	cmp	r1, #0
   80792:	bf08      	it	eq
   80794:	4601      	moveq	r1, r0
   80796:	4640      	mov	r0, r8
   80798:	47d0      	blx	sl
   8079a:	4405      	add	r5, r0
				continue;
   8079c:	e035      	b.n	8080a <print+0xa6>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
   8079e:	6839      	ldr	r1, [r7, #0]
   807a0:	3704      	adds	r7, #4
   807a2:	2061      	movs	r0, #97	; 0x61
   807a4:	9002      	str	r0, [sp, #8]
   807a6:	9301      	str	r3, [sp, #4]
   807a8:	9200      	str	r2, [sp, #0]
   807aa:	2301      	movs	r3, #1
   807ac:	220a      	movs	r2, #10
   807ae:	4640      	mov	r0, r8
   807b0:	47c8      	blx	r9
   807b2:	4405      	add	r5, r0
				continue;
   807b4:	e029      	b.n	8080a <print+0xa6>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
   807b6:	6839      	ldr	r1, [r7, #0]
   807b8:	3704      	adds	r7, #4
   807ba:	2061      	movs	r0, #97	; 0x61
   807bc:	9002      	str	r0, [sp, #8]
   807be:	9301      	str	r3, [sp, #4]
   807c0:	9200      	str	r2, [sp, #0]
   807c2:	2300      	movs	r3, #0
   807c4:	2210      	movs	r2, #16
   807c6:	4640      	mov	r0, r8
   807c8:	47c8      	blx	r9
   807ca:	4405      	add	r5, r0
				continue;
   807cc:	e01d      	b.n	8080a <print+0xa6>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
   807ce:	6839      	ldr	r1, [r7, #0]
   807d0:	3704      	adds	r7, #4
   807d2:	2041      	movs	r0, #65	; 0x41
   807d4:	9002      	str	r0, [sp, #8]
   807d6:	9301      	str	r3, [sp, #4]
   807d8:	9200      	str	r2, [sp, #0]
   807da:	2300      	movs	r3, #0
   807dc:	2210      	movs	r2, #16
   807de:	4640      	mov	r0, r8
   807e0:	47c8      	blx	r9
   807e2:	4405      	add	r5, r0
				continue;
   807e4:	e011      	b.n	8080a <print+0xa6>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
   807e6:	6839      	ldr	r1, [r7, #0]
   807e8:	3704      	adds	r7, #4
   807ea:	2061      	movs	r0, #97	; 0x61
   807ec:	9002      	str	r0, [sp, #8]
   807ee:	9301      	str	r3, [sp, #4]
   807f0:	9200      	str	r2, [sp, #0]
   807f2:	2300      	movs	r3, #0
   807f4:	220a      	movs	r2, #10
   807f6:	4640      	mov	r0, r8
   807f8:	47c8      	blx	r9
   807fa:	4405      	add	r5, r0
				continue;
   807fc:	e005      	b.n	8080a <print+0xa6>
			++format;
   807fe:	46a3      	mov	fp, r4
	(void) uart_putchar(c);  //Send characters to uart
   80800:	f89b 0000 	ldrb.w	r0, [fp]
   80804:	47b0      	blx	r6
			}
		}
		else {
		out:
			printchar (out, *format);
			++pc;
   80806:	3501      	adds	r5, #1
   80808:	465c      	mov	r4, fp
	for (; *format != 0; ++format) {
   8080a:	f104 0b01 	add.w	fp, r4, #1
   8080e:	7863      	ldrb	r3, [r4, #1]
   80810:	2b00      	cmp	r3, #0
   80812:	d044      	beq.n	8089e <print+0x13a>
		if (*format == '%') {
   80814:	2b25      	cmp	r3, #37	; 0x25
   80816:	d1f3      	bne.n	80800 <print+0x9c>
			++format;
   80818:	f10b 0401 	add.w	r4, fp, #1
			if (*format == '\0') break;
   8081c:	f89b 3001 	ldrb.w	r3, [fp, #1]
   80820:	2b00      	cmp	r3, #0
   80822:	d03c      	beq.n	8089e <print+0x13a>
			if (*format == '%') goto out;
   80824:	2b25      	cmp	r3, #37	; 0x25
   80826:	d0ea      	beq.n	807fe <print+0x9a>
			if (*format == '-') {
   80828:	2b2d      	cmp	r3, #45	; 0x2d
				++format;
   8082a:	bf06      	itte	eq
   8082c:	f10b 0402 	addeq.w	r4, fp, #2
				pad = PAD_RIGHT;
   80830:	2301      	moveq	r3, #1
			width = pad = 0;
   80832:	2300      	movne	r3, #0
			while (*format == '0') {
   80834:	7822      	ldrb	r2, [r4, #0]
   80836:	2a30      	cmp	r2, #48	; 0x30
   80838:	d105      	bne.n	80846 <print+0xe2>
				pad |= PAD_ZERO;
   8083a:	f043 0302 	orr.w	r3, r3, #2
			while (*format == '0') {
   8083e:	f814 2f01 	ldrb.w	r2, [r4, #1]!
   80842:	2a30      	cmp	r2, #48	; 0x30
   80844:	d0f9      	beq.n	8083a <print+0xd6>
			for ( ; *format >= '0' && *format <= '9'; ++format) {
   80846:	7821      	ldrb	r1, [r4, #0]
   80848:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   8084c:	b2d2      	uxtb	r2, r2
   8084e:	2a09      	cmp	r2, #9
   80850:	d899      	bhi.n	80786 <print+0x22>
   80852:	2200      	movs	r2, #0
				width *= 10;
   80854:	eb02 0282 	add.w	r2, r2, r2, lsl #2
				width += *format - '0';
   80858:	3930      	subs	r1, #48	; 0x30
   8085a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
			for ( ; *format >= '0' && *format <= '9'; ++format) {
   8085e:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   80862:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
   80866:	b2c0      	uxtb	r0, r0
   80868:	2809      	cmp	r0, #9
   8086a:	d9f3      	bls.n	80854 <print+0xf0>
			if( *format == 's' ) {
   8086c:	2973      	cmp	r1, #115	; 0x73
   8086e:	d08c      	beq.n	8078a <print+0x26>
			if( *format == 'd' ) {
   80870:	2964      	cmp	r1, #100	; 0x64
   80872:	d094      	beq.n	8079e <print+0x3a>
			if( *format == 'x' ) {
   80874:	2978      	cmp	r1, #120	; 0x78
   80876:	d09e      	beq.n	807b6 <print+0x52>
			if( *format == 'X' ) {
   80878:	2958      	cmp	r1, #88	; 0x58
   8087a:	d0a8      	beq.n	807ce <print+0x6a>
			if( *format == 'u' ) {
   8087c:	2975      	cmp	r1, #117	; 0x75
   8087e:	d0b2      	beq.n	807e6 <print+0x82>
			if( *format == 'c' ) {
   80880:	2963      	cmp	r1, #99	; 0x63
   80882:	d1c2      	bne.n	8080a <print+0xa6>
				scr[0] = (char)va_arg( args, int );
   80884:	6839      	ldr	r1, [r7, #0]
   80886:	3704      	adds	r7, #4
   80888:	f88d 1014 	strb.w	r1, [sp, #20]
				scr[1] = '\0';
   8088c:	2100      	movs	r1, #0
   8088e:	f88d 1015 	strb.w	r1, [sp, #21]
				pc += prints (out, scr, width, pad);
   80892:	a905      	add	r1, sp, #20
   80894:	4640      	mov	r0, r8
   80896:	47d0      	blx	sl
   80898:	4405      	add	r5, r0
				continue;
   8089a:	e7b6      	b.n	8080a <print+0xa6>
	register int pc = 0;
   8089c:	2500      	movs	r5, #0
		}
	}
	if (out) **out = '\0';
   8089e:	f1b8 0f00 	cmp.w	r8, #0
   808a2:	d003      	beq.n	808ac <print+0x148>
   808a4:	f8d8 3000 	ldr.w	r3, [r8]
   808a8:	2200      	movs	r2, #0
   808aa:	701a      	strb	r2, [r3, #0]
	va_end( args );
	return pc;
}
   808ac:	4628      	mov	r0, r5
   808ae:	b007      	add	sp, #28
   808b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   808b4:	00080951 	.word	0x00080951
   808b8:	00080c08 	.word	0x00080c08
   808bc:	000805fd 	.word	0x000805fd
   808c0:	000806a9 	.word	0x000806a9

000808c4 <printf>:

int printf(const char *format, ...)
{
   808c4:	b40f      	push	{r0, r1, r2, r3}
   808c6:	b500      	push	{lr}
   808c8:	b083      	sub	sp, #12
   808ca:	aa04      	add	r2, sp, #16
   808cc:	f852 1b04 	ldr.w	r1, [r2], #4
        va_list args;
        
        va_start( args, format );
   808d0:	9201      	str	r2, [sp, #4]
        return print( 0, format, args );
   808d2:	2000      	movs	r0, #0
   808d4:	4b03      	ldr	r3, [pc, #12]	; (808e4 <printf+0x20>)
   808d6:	4798      	blx	r3
}
   808d8:	b003      	add	sp, #12
   808da:	f85d eb04 	ldr.w	lr, [sp], #4
   808de:	b004      	add	sp, #16
   808e0:	4770      	bx	lr
   808e2:	bf00      	nop
   808e4:	00080765 	.word	0x00080765

000808e8 <configure_uart>:
	uint32_t ul_sr;

/*
Initialize UART ring buffer as empty
*/
rx_buffer.head=0;
   808e8:	4b16      	ldr	r3, [pc, #88]	; (80944 <configure_uart+0x5c>)
   808ea:	2200      	movs	r2, #0
   808ec:	701a      	strb	r2, [r3, #0]
rx_buffer.tail=0;
   808ee:	705a      	strb	r2, [r3, #1]
/*
Initialize UART communication
*/
	// Pin configuration
	// Disable interrupts on Uart receive (URXD) and transmit (UTXD) pins
	PIOA->PIO_IDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   808f0:	4b15      	ldr	r3, [pc, #84]	; (80948 <configure_uart+0x60>)
   808f2:	f44f 7140 	mov.w	r1, #768	; 0x300
   808f6:	6459      	str	r1, [r3, #68]	; 0x44

	// Disable the Parallel IO (PIO) of the URXD and UTXD pins so that the peripheral controller can use them
	PIOA->PIO_PDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   808f8:	6059      	str	r1, [r3, #4]

	// Read current peripheral AB select register and set the UTXD and URXD pins to 0 (UART is connected as peripheral A)
	ul_sr = PIOA->PIO_ABSR;
   808fa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
	PIOA->PIO_ABSR &= ~(PIO_PA8A_URXD | PIO_PA9A_UTXD) & ul_sr;
   808fc:	6f18      	ldr	r0, [r3, #112]	; 0x70
   808fe:	4002      	ands	r2, r0
   80900:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   80904:	671a      	str	r2, [r3, #112]	; 0x70

	// Enable pull up resistor on URXD and UTXD pin
	PIOA->PIO_PUER = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80906:	6659      	str	r1, [r3, #100]	; 0x64

	// Uart configuration
	
	// Enable the peripheral UART controller in Power Management Controller (PMC)
	PMC->PMC_PCER0 = 1 << ID_UART;
   80908:	f44f 7280 	mov.w	r2, #256	; 0x100
   8090c:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   80910:	611a      	str	r2, [r3, #16]

	// Reset and disable receiver and transmitter
	UART->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX | UART_CR_RXDIS | UART_CR_TXDIS;
   80912:	f503 7300 	add.w	r3, r3, #512	; 0x200
   80916:	21ac      	movs	r1, #172	; 0xac
   80918:	6019      	str	r1, [r3, #0]

	// Set the baudrate
	UART->UART_BRGR = 547; // MCK / 16 * x = BaudRate (write x into UART_BRGR)  
   8091a:	f240 2123 	movw	r1, #547	; 0x223
   8091e:	6219      	str	r1, [r3, #32]

	// No parity bits
	UART->UART_MR = UART_MR_PAR_NO | UART_MR_CHMODE_NORMAL;	
   80920:	f44f 6100 	mov.w	r1, #2048	; 0x800
   80924:	6059      	str	r1, [r3, #4]

	// Disable PDC channel
	UART->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   80926:	f240 2102 	movw	r1, #514	; 0x202
   8092a:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120

	// Configure interrupts on receive ready and errors
	UART->UART_IDR = 0xFFFFFFFF;
   8092e:	f04f 31ff 	mov.w	r1, #4294967295
   80932:	60d9      	str	r1, [r3, #12]
	UART->UART_IER = UART_IER_RXRDY | UART_IER_OVRE | UART_IER_FRAME | UART_IER_PARE;
   80934:	21e1      	movs	r1, #225	; 0xe1
   80936:	6099      	str	r1, [r3, #8]
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   80938:	4904      	ldr	r1, [pc, #16]	; (8094c <configure_uart+0x64>)
   8093a:	600a      	str	r2, [r1, #0]

	// Enable UART interrupt in the Nested Vectored Interrupt Controller(NVIC)
	NVIC_EnableIRQ((IRQn_Type) ID_UART);

	// Enable UART receiver and transmitter
	UART->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   8093c:	2250      	movs	r2, #80	; 0x50
   8093e:	601a      	str	r2, [r3, #0]
   80940:	4770      	bx	lr
   80942:	bf00      	nop
   80944:	20000450 	.word	0x20000450
   80948:	400e0e00 	.word	0x400e0e00
   8094c:	e000e100 	.word	0xe000e100

00080950 <uart_putchar>:
 * \retval Success(0) or failure(1).
 */
int uart_putchar(const uint8_t c)
{
	// Check if the transmitter is ready
	if((UART->UART_SR & UART_SR_TXRDY) != UART_SR_TXRDY)
   80950:	4b07      	ldr	r3, [pc, #28]	; (80970 <uart_putchar+0x20>)
   80952:	695b      	ldr	r3, [r3, #20]
   80954:	f013 0f02 	tst.w	r3, #2
   80958:	d008      	beq.n	8096c <uart_putchar+0x1c>
	return 1;

	// Send the character
	UART->UART_THR = c;
   8095a:	4b05      	ldr	r3, [pc, #20]	; (80970 <uart_putchar+0x20>)
   8095c:	61d8      	str	r0, [r3, #28]
	while(!((UART->UART_SR) & UART_SR_TXEMPTY)); // Wait for the character to be sent, can implement ring buffer to remove the wait
   8095e:	461a      	mov	r2, r3
   80960:	6953      	ldr	r3, [r2, #20]
   80962:	f413 7f00 	tst.w	r3, #512	; 0x200
   80966:	d0fb      	beq.n	80960 <uart_putchar+0x10>
	return 0;
   80968:	2000      	movs	r0, #0
   8096a:	4770      	bx	lr
	return 1;
   8096c:	2001      	movs	r0, #1
}
   8096e:	4770      	bx	lr
   80970:	400e0800 	.word	0x400e0800

00080974 <UART_Handler>:

void UART_Handler(void)
{
   80974:	b508      	push	{r3, lr}
	uint32_t status = UART->UART_SR;
   80976:	4b15      	ldr	r3, [pc, #84]	; (809cc <UART_Handler+0x58>)
   80978:	695b      	ldr	r3, [r3, #20]
	
	//Reset UART at overflow error and frame error
	if(status & (UART_SR_OVRE | UART_SR_FRAME | UART_SR_PARE))
   8097a:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   8097e:	d003      	beq.n	80988 <UART_Handler+0x14>
	{
		UART->UART_CR = UART_CR_RXEN | UART_CR_TXEN | UART_CR_RSTSTA;
   80980:	f44f 71a8 	mov.w	r1, #336	; 0x150
   80984:	4a11      	ldr	r2, [pc, #68]	; (809cc <UART_Handler+0x58>)
   80986:	6011      	str	r1, [r2, #0]
	}
	
	//Check if message is ready to be received
	if(status & UART_SR_RXRDY)
   80988:	f013 0f01 	tst.w	r3, #1
   8098c:	d012      	beq.n	809b4 <UART_Handler+0x40>
	{
		//Check if receive ring buffer is full and 
		if((rx_buffer.tail + 1) % UART_RINGBUFFER_SIZE == rx_buffer.head)
   8098e:	4810      	ldr	r0, [pc, #64]	; (809d0 <UART_Handler+0x5c>)
   80990:	7842      	ldrb	r2, [r0, #1]
   80992:	1c53      	adds	r3, r2, #1
   80994:	4259      	negs	r1, r3
   80996:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   8099a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   8099e:	bf58      	it	pl
   809a0:	424b      	negpl	r3, r1
   809a2:	7801      	ldrb	r1, [r0, #0]
   809a4:	428b      	cmp	r3, r1
   809a6:	d006      	beq.n	809b6 <UART_Handler+0x42>
		{
			printf("ERR: UART RX buffer is full\n\r");
			rx_buffer.data[rx_buffer.tail] = UART->UART_RHR; //Throw away message
			return;
		}
		rx_buffer.data[rx_buffer.tail] = UART->UART_RHR;
   809a8:	4908      	ldr	r1, [pc, #32]	; (809cc <UART_Handler+0x58>)
   809aa:	6988      	ldr	r0, [r1, #24]
   809ac:	4908      	ldr	r1, [pc, #32]	; (809d0 <UART_Handler+0x5c>)
   809ae:	440a      	add	r2, r1
   809b0:	7090      	strb	r0, [r2, #2]
		rx_buffer.tail = (rx_buffer.tail + 1) % UART_RINGBUFFER_SIZE;
   809b2:	704b      	strb	r3, [r1, #1]
   809b4:	bd08      	pop	{r3, pc}
			printf("ERR: UART RX buffer is full\n\r");
   809b6:	4807      	ldr	r0, [pc, #28]	; (809d4 <UART_Handler+0x60>)
   809b8:	4b07      	ldr	r3, [pc, #28]	; (809d8 <UART_Handler+0x64>)
   809ba:	4798      	blx	r3
			rx_buffer.data[rx_buffer.tail] = UART->UART_RHR; //Throw away message
   809bc:	4b03      	ldr	r3, [pc, #12]	; (809cc <UART_Handler+0x58>)
   809be:	699a      	ldr	r2, [r3, #24]
   809c0:	4b03      	ldr	r3, [pc, #12]	; (809d0 <UART_Handler+0x5c>)
   809c2:	7859      	ldrb	r1, [r3, #1]
   809c4:	440b      	add	r3, r1
   809c6:	709a      	strb	r2, [r3, #2]
			return;
   809c8:	bd08      	pop	{r3, pc}
   809ca:	bf00      	nop
   809cc:	400e0800 	.word	0x400e0800
   809d0:	20000450 	.word	0x20000450
   809d4:	00080c10 	.word	0x00080c10
   809d8:	000808c5 	.word	0x000808c5

000809dc <__libc_init_array>:
   809dc:	b570      	push	{r4, r5, r6, lr}
   809de:	4e0f      	ldr	r6, [pc, #60]	; (80a1c <__libc_init_array+0x40>)
   809e0:	4d0f      	ldr	r5, [pc, #60]	; (80a20 <__libc_init_array+0x44>)
   809e2:	1b76      	subs	r6, r6, r5
   809e4:	10b6      	asrs	r6, r6, #2
   809e6:	bf18      	it	ne
   809e8:	2400      	movne	r4, #0
   809ea:	d005      	beq.n	809f8 <__libc_init_array+0x1c>
   809ec:	3401      	adds	r4, #1
   809ee:	f855 3b04 	ldr.w	r3, [r5], #4
   809f2:	4798      	blx	r3
   809f4:	42a6      	cmp	r6, r4
   809f6:	d1f9      	bne.n	809ec <__libc_init_array+0x10>
   809f8:	4e0a      	ldr	r6, [pc, #40]	; (80a24 <__libc_init_array+0x48>)
   809fa:	4d0b      	ldr	r5, [pc, #44]	; (80a28 <__libc_init_array+0x4c>)
   809fc:	f000 f91a 	bl	80c34 <_init>
   80a00:	1b76      	subs	r6, r6, r5
   80a02:	10b6      	asrs	r6, r6, #2
   80a04:	bf18      	it	ne
   80a06:	2400      	movne	r4, #0
   80a08:	d006      	beq.n	80a18 <__libc_init_array+0x3c>
   80a0a:	3401      	adds	r4, #1
   80a0c:	f855 3b04 	ldr.w	r3, [r5], #4
   80a10:	4798      	blx	r3
   80a12:	42a6      	cmp	r6, r4
   80a14:	d1f9      	bne.n	80a0a <__libc_init_array+0x2e>
   80a16:	bd70      	pop	{r4, r5, r6, pc}
   80a18:	bd70      	pop	{r4, r5, r6, pc}
   80a1a:	bf00      	nop
   80a1c:	00080c40 	.word	0x00080c40
   80a20:	00080c40 	.word	0x00080c40
   80a24:	00080c48 	.word	0x00080c48
   80a28:	00080c40 	.word	0x00080c40

00080a2c <register_fini>:
   80a2c:	4b02      	ldr	r3, [pc, #8]	; (80a38 <register_fini+0xc>)
   80a2e:	b113      	cbz	r3, 80a36 <register_fini+0xa>
   80a30:	4802      	ldr	r0, [pc, #8]	; (80a3c <register_fini+0x10>)
   80a32:	f000 b805 	b.w	80a40 <atexit>
   80a36:	4770      	bx	lr
   80a38:	00000000 	.word	0x00000000
   80a3c:	00080a4d 	.word	0x00080a4d

00080a40 <atexit>:
   80a40:	2300      	movs	r3, #0
   80a42:	4601      	mov	r1, r0
   80a44:	461a      	mov	r2, r3
   80a46:	4618      	mov	r0, r3
   80a48:	f000 b81e 	b.w	80a88 <__register_exitproc>

00080a4c <__libc_fini_array>:
   80a4c:	b538      	push	{r3, r4, r5, lr}
   80a4e:	4c0a      	ldr	r4, [pc, #40]	; (80a78 <__libc_fini_array+0x2c>)
   80a50:	4d0a      	ldr	r5, [pc, #40]	; (80a7c <__libc_fini_array+0x30>)
   80a52:	1b64      	subs	r4, r4, r5
   80a54:	10a4      	asrs	r4, r4, #2
   80a56:	d00a      	beq.n	80a6e <__libc_fini_array+0x22>
   80a58:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   80a5c:	3b01      	subs	r3, #1
   80a5e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   80a62:	3c01      	subs	r4, #1
   80a64:	f855 3904 	ldr.w	r3, [r5], #-4
   80a68:	4798      	blx	r3
   80a6a:	2c00      	cmp	r4, #0
   80a6c:	d1f9      	bne.n	80a62 <__libc_fini_array+0x16>
   80a6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   80a72:	f000 b8e9 	b.w	80c48 <_fini>
   80a76:	bf00      	nop
   80a78:	00080c58 	.word	0x00080c58
   80a7c:	00080c54 	.word	0x00080c54

00080a80 <__retarget_lock_acquire_recursive>:
   80a80:	4770      	bx	lr
   80a82:	bf00      	nop

00080a84 <__retarget_lock_release_recursive>:
   80a84:	4770      	bx	lr
   80a86:	bf00      	nop

00080a88 <__register_exitproc>:
   80a88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   80a8c:	4d2c      	ldr	r5, [pc, #176]	; (80b40 <__register_exitproc+0xb8>)
   80a8e:	4606      	mov	r6, r0
   80a90:	6828      	ldr	r0, [r5, #0]
   80a92:	4698      	mov	r8, r3
   80a94:	460f      	mov	r7, r1
   80a96:	4691      	mov	r9, r2
   80a98:	f7ff fff2 	bl	80a80 <__retarget_lock_acquire_recursive>
   80a9c:	4b29      	ldr	r3, [pc, #164]	; (80b44 <__register_exitproc+0xbc>)
   80a9e:	681c      	ldr	r4, [r3, #0]
   80aa0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   80aa4:	2b00      	cmp	r3, #0
   80aa6:	d03e      	beq.n	80b26 <__register_exitproc+0x9e>
   80aa8:	685a      	ldr	r2, [r3, #4]
   80aaa:	2a1f      	cmp	r2, #31
   80aac:	dc1c      	bgt.n	80ae8 <__register_exitproc+0x60>
   80aae:	f102 0e01 	add.w	lr, r2, #1
   80ab2:	b176      	cbz	r6, 80ad2 <__register_exitproc+0x4a>
   80ab4:	2101      	movs	r1, #1
   80ab6:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   80aba:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   80abe:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   80ac2:	4091      	lsls	r1, r2
   80ac4:	4308      	orrs	r0, r1
   80ac6:	2e02      	cmp	r6, #2
   80ac8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   80acc:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   80ad0:	d023      	beq.n	80b1a <__register_exitproc+0x92>
   80ad2:	3202      	adds	r2, #2
   80ad4:	f8c3 e004 	str.w	lr, [r3, #4]
   80ad8:	6828      	ldr	r0, [r5, #0]
   80ada:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   80ade:	f7ff ffd1 	bl	80a84 <__retarget_lock_release_recursive>
   80ae2:	2000      	movs	r0, #0
   80ae4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80ae8:	4b17      	ldr	r3, [pc, #92]	; (80b48 <__register_exitproc+0xc0>)
   80aea:	b30b      	cbz	r3, 80b30 <__register_exitproc+0xa8>
   80aec:	f44f 70c8 	mov.w	r0, #400	; 0x190
   80af0:	f3af 8000 	nop.w
   80af4:	4603      	mov	r3, r0
   80af6:	b1d8      	cbz	r0, 80b30 <__register_exitproc+0xa8>
   80af8:	2000      	movs	r0, #0
   80afa:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   80afe:	f04f 0e01 	mov.w	lr, #1
   80b02:	6058      	str	r0, [r3, #4]
   80b04:	6019      	str	r1, [r3, #0]
   80b06:	4602      	mov	r2, r0
   80b08:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   80b0c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   80b10:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   80b14:	2e00      	cmp	r6, #0
   80b16:	d0dc      	beq.n	80ad2 <__register_exitproc+0x4a>
   80b18:	e7cc      	b.n	80ab4 <__register_exitproc+0x2c>
   80b1a:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   80b1e:	4301      	orrs	r1, r0
   80b20:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   80b24:	e7d5      	b.n	80ad2 <__register_exitproc+0x4a>
   80b26:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   80b2a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   80b2e:	e7bb      	b.n	80aa8 <__register_exitproc+0x20>
   80b30:	6828      	ldr	r0, [r5, #0]
   80b32:	f7ff ffa7 	bl	80a84 <__retarget_lock_release_recursive>
   80b36:	f04f 30ff 	mov.w	r0, #4294967295
   80b3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80b3e:	bf00      	nop
   80b40:	20000430 	.word	0x20000430
   80b44:	00080c30 	.word	0x00080c30
   80b48:	00000000 	.word	0x00000000
   80b4c:	61746164 	.word	0x61746164
   80b50:	68676968 	.word	0x68676968
   80b54:	6425203a 	.word	0x6425203a
   80b58:	7c7c2020 	.word	0x7c7c2020
   80b5c:	7c7c7c7c 	.word	0x7c7c7c7c
   80b60:	00000d7c 	.word	0x00000d7c
   80b64:	61746164 	.word	0x61746164
   80b68:	203a6469 	.word	0x203a6469
   80b6c:	20206425 	.word	0x20206425
   80b70:	7c7c7c7c 	.word	0x7c7c7c7c
   80b74:	0d7c7c7c 	.word	0x0d7c7c7c
   80b78:	00000000 	.word	0x00000000
   80b7c:	304e4143 	.word	0x304e4143
   80b80:	73656d20 	.word	0x73656d20
   80b84:	65676173 	.word	0x65676173
   80b88:	72726120 	.word	0x72726120
   80b8c:	64657669 	.word	0x64657669
   80b90:	206e6920 	.word	0x206e6920
   80b94:	2d6e6f6e 	.word	0x2d6e6f6e
   80b98:	64657375 	.word	0x64657375
   80b9c:	69616d20 	.word	0x69616d20
   80ba0:	786f626c 	.word	0x786f626c
   80ba4:	00000d0a 	.word	0x00000d0a
   80ba8:	61746164 	.word	0x61746164
   80bac:	3a313131 	.word	0x3a313131
   80bb0:	20642520 	.word	0x20642520
   80bb4:	25206425 	.word	0x25206425
   80bb8:	64252064 	.word	0x64252064
   80bbc:	7c7c7c20 	.word	0x7c7c7c20
   80bc0:	7c7c7c7c 	.word	0x7c7c7c7c
   80bc4:	0000000d 	.word	0x0000000d
   80bc8:	61746164 	.word	0x61746164
   80bcc:	3a323232 	.word	0x3a323232
   80bd0:	20642520 	.word	0x20642520
   80bd4:	25206425 	.word	0x25206425
   80bd8:	64252064 	.word	0x64252064
   80bdc:	7c7c7c20 	.word	0x7c7c7c20
   80be0:	7c7c7c7c 	.word	0x7c7c7c7c
   80be4:	0000000d 	.word	0x0000000d
   80be8:	61746164 	.word	0x61746164
   80bec:	3a333333 	.word	0x3a333333
   80bf0:	20642520 	.word	0x20642520
   80bf4:	25206425 	.word	0x25206425
   80bf8:	64252064 	.word	0x64252064
   80bfc:	7c7c7c20 	.word	0x7c7c7c20
   80c00:	7c7c7c7c 	.word	0x7c7c7c7c
   80c04:	0000000d 	.word	0x0000000d
   80c08:	6c756e28 	.word	0x6c756e28
   80c0c:	0000296c 	.word	0x0000296c
   80c10:	3a525245 	.word	0x3a525245
   80c14:	52415520 	.word	0x52415520
   80c18:	58522054 	.word	0x58522054
   80c1c:	66756220 	.word	0x66756220
   80c20:	20726566 	.word	0x20726566
   80c24:	66207369 	.word	0x66207369
   80c28:	0a6c6c75 	.word	0x0a6c6c75
   80c2c:	0000000d 	.word	0x0000000d

00080c30 <_global_impure_ptr>:
   80c30:	20000008                                ... 

00080c34 <_init>:
   80c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80c36:	bf00      	nop
   80c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
   80c3a:	bc08      	pop	{r3}
   80c3c:	469e      	mov	lr, r3
   80c3e:	4770      	bx	lr

00080c40 <__init_array_start>:
   80c40:	00080a2d 	.word	0x00080a2d

00080c44 <__frame_dummy_init_array_entry>:
   80c44:	00080119                                ....

00080c48 <_fini>:
   80c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80c4a:	bf00      	nop
   80c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   80c4e:	bc08      	pop	{r3}
   80c50:	469e      	mov	lr, r3
   80c52:	4770      	bx	lr

00080c54 <__fini_array_start>:
   80c54:	000800f5 	.word	0x000800f5
