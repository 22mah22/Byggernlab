
ice_ice_arduino.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001944  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000044c  20000000  00081944  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000ac  20000450  00081d98  00020450  2**3
                  ALLOC
  3 .stack        00000404  200004fc  00081e44  00020450  2**0
                  ALLOC
  4 .heap         00000200  20000900  00082248  00020450  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  0002044c  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020475  2**0
                  CONTENTS, READONLY
  7 .debug_info   00007d08  00000000  00000000  000204ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000016d9  00000000  00000000  000281d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000013c7  00000000  00000000  000298af  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000260  00000000  00000000  0002ac76  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001d8  00000000  00000000  0002aed6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00013038  00000000  00000000  0002b0ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00005d72  00000000  00000000  0003e0e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00054617  00000000  00000000  00043e58  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00000760  00000000  00000000  00098470  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	00 09 00 20 a1 04 08 00 9d 04 08 00 9d 04 08 00     ... ............
   80010:	9d 04 08 00 9d 04 08 00 9d 04 08 00 00 00 00 00     ................
	...
   8002c:	9d 04 08 00 9d 04 08 00 00 00 00 00 9d 04 08 00     ................
   8003c:	4d 0c 08 00 9d 04 08 00 9d 04 08 00 9d 04 08 00     M...............
   8004c:	9d 04 08 00 9d 04 08 00 9d 04 08 00 9d 04 08 00     ................
   8005c:	9d 04 08 00 5d 0e 08 00 9d 04 08 00 00 00 00 00     ....]...........
   8006c:	9d 04 08 00 9d 04 08 00 9d 04 08 00 9d 04 08 00     ................
	...
   80084:	9d 04 08 00 9d 04 08 00 9d 04 08 00 9d 04 08 00     ................
   80094:	9d 04 08 00 9d 04 08 00 9d 04 08 00 9d 04 08 00     ................
   800a4:	00 00 00 00 9d 04 08 00 9d 04 08 00 d1 0c 08 00     ................
   800b4:	9d 04 08 00 9d 04 08 00 9d 04 08 00 9d 04 08 00     ................
   800c4:	9d 04 08 00 9d 04 08 00 9d 04 08 00 9d 04 08 00     ................
   800d4:	9d 01 08 00 9d 04 08 00 9d 04 08 00 9d 04 08 00     ................
   800e4:	9d 04 08 00 9d 04 08 00 6d 03 08 00 9d 04 08 00     ........m.......

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20000450 	.word	0x20000450
   80110:	00000000 	.word	0x00000000
   80114:	00081944 	.word	0x00081944

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00081944 	.word	0x00081944
   80154:	20000454 	.word	0x20000454
   80158:	00081944 	.word	0x00081944
   8015c:	00000000 	.word	0x00000000

00080160 <adc_init>:

#include "sam.h"

void adc_init(){
	
	PMC->PMC_PCER1 = PMC_PCER1_PID37; //enable adc controller
   80160:	2320      	movs	r3, #32
   80162:	4a0b      	ldr	r2, [pc, #44]	; (80190 <adc_init+0x30>)
   80164:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   80168:	4a0a      	ldr	r2, [pc, #40]	; (80194 <adc_init+0x34>)
   8016a:	6053      	str	r3, [r2, #4]
	
	//Enable interrupt in NVIC
	NVIC_EnableIRQ(ID_ADC);
	
	
	ADC->ADC_CHER = ADC_CHER_CH1; //pin a6 på arduino due
   8016c:	4b0a      	ldr	r3, [pc, #40]	; (80198 <adc_init+0x38>)
   8016e:	2202      	movs	r2, #2
   80170:	611a      	str	r2, [r3, #16]
	//ADC->ADC_MR = ADC_MR_TRGEN_EN;
	ADC->ADC_MR = ADC_MR_FREERUN;
   80172:	2180      	movs	r1, #128	; 0x80
   80174:	6059      	str	r1, [r3, #4]
	
	ADC->ADC_CR = ADC_CR_START;
   80176:	601a      	str	r2, [r3, #0]
	ADC->ADC_IER = ADC_IER_COMPE;
   80178:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   8017c:	625a      	str	r2, [r3, #36]	; 0x24
	//ADC->ADC_IER |= ADC_IER_DRDY;
	ADC->ADC_EMR |= ADC_EMR_CMPMODE_LOW;
   8017e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   80180:	641a      	str	r2, [r3, #64]	; 0x40

	//ADC->ADC_EMR = (0x0u << 9);
	ADC->ADC_EMR |= ADC_EMR_CMPSEL(1);
   80182:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   80184:	f042 0210 	orr.w	r2, r2, #16
   80188:	641a      	str	r2, [r3, #64]	; 0x40
	ADC->ADC_CWR = ADC_CWR_LOWTHRES(0x00f);
   8018a:	220f      	movs	r2, #15
   8018c:	645a      	str	r2, [r3, #68]	; 0x44
   8018e:	4770      	bx	lr
   80190:	400e0600 	.word	0x400e0600
   80194:	e000e100 	.word	0xe000e100
   80198:	400c0000 	.word	0x400c0000

0008019c <ADC_Handler>:
uint8_t TOTAL_GOALS = 0;
static uint32_t last_goal_time = 0;



void ADC_Handler( void ){
   8019c:	b510      	push	{r4, lr}
	//printf("Aa");
	if(last_goal_time + 800 < return_milliseconds()){
   8019e:	4b0d      	ldr	r3, [pc, #52]	; (801d4 <ADC_Handler+0x38>)
   801a0:	681c      	ldr	r4, [r3, #0]
   801a2:	f504 7448 	add.w	r4, r4, #800	; 0x320
   801a6:	4b0c      	ldr	r3, [pc, #48]	; (801d8 <ADC_Handler+0x3c>)
   801a8:	4798      	blx	r3
   801aa:	4284      	cmp	r4, r0
   801ac:	d309      	bcc.n	801c2 <ADC_Handler+0x26>
		TOTAL_GOALS += 1;
		last_goal_time = return_milliseconds();
	}

	change_motor_speed_using_paadrag(0);
   801ae:	2000      	movs	r0, #0
   801b0:	4b0a      	ldr	r3, [pc, #40]	; (801dc <ADC_Handler+0x40>)
   801b2:	4798      	blx	r3
	
	//TO_INCREMENT = 1; 
	int i = ADC->ADC_ISR;
   801b4:	4b0a      	ldr	r3, [pc, #40]	; (801e0 <ADC_Handler+0x44>)
   801b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   801b8:	2220      	movs	r2, #32
   801ba:	4b0a      	ldr	r3, [pc, #40]	; (801e4 <ADC_Handler+0x48>)
   801bc:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   801c0:	bd10      	pop	{r4, pc}
		TOTAL_GOALS += 1;
   801c2:	4c04      	ldr	r4, [pc, #16]	; (801d4 <ADC_Handler+0x38>)
   801c4:	7923      	ldrb	r3, [r4, #4]
   801c6:	3301      	adds	r3, #1
   801c8:	7123      	strb	r3, [r4, #4]
		last_goal_time = return_milliseconds();
   801ca:	4b03      	ldr	r3, [pc, #12]	; (801d8 <ADC_Handler+0x3c>)
   801cc:	4798      	blx	r3
   801ce:	6020      	str	r0, [r4, #0]
   801d0:	e7ed      	b.n	801ae <ADC_Handler+0x12>
   801d2:	bf00      	nop
   801d4:	2000046c 	.word	0x2000046c
   801d8:	00080c5d 	.word	0x00080c5d
   801dc:	00080651 	.word	0x00080651
   801e0:	400c0000 	.word	0x400c0000
   801e4:	e000e100 	.word	0xe000e100

000801e8 <can_init>:
   801e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   801ec:	1855      	adds	r5, r2, r1
   801ee:	2908      	cmp	r1, #8
   801f0:	bf98      	it	ls
   801f2:	2a08      	cmpls	r2, #8
   801f4:	d864      	bhi.n	802c0 <can_init+0xd8>
   801f6:	460e      	mov	r6, r1
   801f8:	2d08      	cmp	r5, #8
   801fa:	dc61      	bgt.n	802c0 <can_init+0xd8>
   801fc:	4a32      	ldr	r2, [pc, #200]	; (802c8 <can_init+0xe0>)
   801fe:	6813      	ldr	r3, [r2, #0]
   80200:	f023 0301 	bic.w	r3, r3, #1
   80204:	6013      	str	r3, [r2, #0]
   80206:	6913      	ldr	r3, [r2, #16]
   80208:	4b30      	ldr	r3, [pc, #192]	; (802cc <can_init+0xe4>)
   8020a:	f44f 7440 	mov.w	r4, #768	; 0x300
   8020e:	645c      	str	r4, [r3, #68]	; 0x44
   80210:	6f1c      	ldr	r4, [r3, #112]	; 0x70
   80212:	f024 0403 	bic.w	r4, r4, #3
   80216:	671c      	str	r4, [r3, #112]	; 0x70
   80218:	2403      	movs	r4, #3
   8021a:	605c      	str	r4, [r3, #4]
   8021c:	665c      	str	r4, [r3, #100]	; 0x64
   8021e:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   80222:	4c2b      	ldr	r4, [pc, #172]	; (802d0 <can_init+0xe8>)
   80224:	f8c3 410c 	str.w	r4, [r3, #268]	; 0x10c
   80228:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
   8022c:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
   80230:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
   80234:	6150      	str	r0, [r2, #20]
   80236:	42a9      	cmp	r1, r5
   80238:	dc40      	bgt.n	802bc <can_init+0xd4>
   8023a:	460a      	mov	r2, r1
   8023c:	2400      	movs	r4, #0
   8023e:	46a1      	mov	r9, r4
   80240:	f8df 8084 	ldr.w	r8, [pc, #132]	; 802c8 <can_init+0xe0>
   80244:	f04f 5c00 	mov.w	ip, #536870912	; 0x20000000
   80248:	f04f 7e80 	mov.w	lr, #16777216	; 0x1000000
   8024c:	2701      	movs	r7, #1
   8024e:	0153      	lsls	r3, r2, #5
   80250:	f103 2040 	add.w	r0, r3, #1073758208	; 0x40004000
   80254:	f500 2030 	add.w	r0, r0, #720896	; 0xb0000
   80258:	f8c0 9204 	str.w	r9, [r0, #516]	; 0x204
   8025c:	4443      	add	r3, r8
   8025e:	f8c3 c208 	str.w	ip, [r3, #520]	; 0x208
   80262:	f8c0 e200 	str.w	lr, [r0, #512]	; 0x200
   80266:	f8d3 021c 	ldr.w	r0, [r3, #540]	; 0x21c
   8026a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   8026e:	f8c3 021c 	str.w	r0, [r3, #540]	; 0x21c
   80272:	fa07 f302 	lsl.w	r3, r7, r2
   80276:	431c      	orrs	r4, r3
   80278:	3201      	adds	r2, #1
   8027a:	4295      	cmp	r5, r2
   8027c:	dae7      	bge.n	8024e <can_init+0x66>
   8027e:	b181      	cbz	r1, 802a2 <can_init+0xba>
   80280:	2300      	movs	r3, #0
   80282:	4911      	ldr	r1, [pc, #68]	; (802c8 <can_init+0xe0>)
   80284:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
   80288:	f04f 7040 	mov.w	r0, #50331648	; 0x3000000
   8028c:	eb01 1243 	add.w	r2, r1, r3, lsl #5
   80290:	f8c2 5208 	str.w	r5, [r2, #520]	; 0x208
   80294:	f103 0210 	add.w	r2, r3, #16
   80298:	0152      	lsls	r2, r2, #5
   8029a:	5088      	str	r0, [r1, r2]
   8029c:	3301      	adds	r3, #1
   8029e:	429e      	cmp	r6, r3
   802a0:	d1f4      	bne.n	8028c <can_init+0xa4>
   802a2:	4b09      	ldr	r3, [pc, #36]	; (802c8 <can_init+0xe0>)
   802a4:	605c      	str	r4, [r3, #4]
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   802a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
   802aa:	4a0a      	ldr	r2, [pc, #40]	; (802d4 <can_init+0xec>)
   802ac:	6051      	str	r1, [r2, #4]
   802ae:	681a      	ldr	r2, [r3, #0]
   802b0:	f042 0201 	orr.w	r2, r2, #1
   802b4:	601a      	str	r2, [r3, #0]
   802b6:	2000      	movs	r0, #0
   802b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   802bc:	2400      	movs	r4, #0
   802be:	e7de      	b.n	8027e <can_init+0x96>
   802c0:	2001      	movs	r0, #1
   802c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   802c6:	bf00      	nop
   802c8:	400b4000 	.word	0x400b4000
   802cc:	400e0e00 	.word	0x400e0e00
   802d0:	1000102b 	.word	0x1000102b
   802d4:	e000e100 	.word	0xe000e100

000802d8 <can_init_def_tx_rx_mb>:
   802d8:	b508      	push	{r3, lr}
   802da:	2202      	movs	r2, #2
   802dc:	2101      	movs	r1, #1
   802de:	4b01      	ldr	r3, [pc, #4]	; (802e4 <can_init_def_tx_rx_mb+0xc>)
   802e0:	4798      	blx	r3
   802e2:	bd08      	pop	{r3, pc}
   802e4:	000801e9 	.word	0x000801e9

000802e8 <can_receive>:
   802e8:	014b      	lsls	r3, r1, #5
   802ea:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   802ee:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   802f2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   802f6:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   802fa:	d033      	beq.n	80364 <can_receive+0x7c>
   802fc:	b430      	push	{r4, r5}
   802fe:	014b      	lsls	r3, r1, #5
   80300:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   80304:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   80308:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
   8030c:	f8d3 4218 	ldr.w	r4, [r3, #536]	; 0x218
   80310:	f8d3 5208 	ldr.w	r5, [r3, #520]	; 0x208
   80314:	f3c5 458a 	ubfx	r5, r5, #18, #11
   80318:	8005      	strh	r5, [r0, #0]
   8031a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   8031e:	f3c3 4303 	ubfx	r3, r3, #16, #4
   80322:	7083      	strb	r3, [r0, #2]
   80324:	461d      	mov	r5, r3
   80326:	b15b      	cbz	r3, 80340 <can_receive+0x58>
   80328:	3003      	adds	r0, #3
   8032a:	2300      	movs	r3, #0
   8032c:	2b03      	cmp	r3, #3
   8032e:	bfd9      	ittee	le
   80330:	7002      	strble	r2, [r0, #0]
   80332:	0a12      	lsrle	r2, r2, #8
   80334:	7004      	strbgt	r4, [r0, #0]
   80336:	0a24      	lsrgt	r4, r4, #8
   80338:	3301      	adds	r3, #1
   8033a:	3001      	adds	r0, #1
   8033c:	42ab      	cmp	r3, r5
   8033e:	d1f5      	bne.n	8032c <can_receive+0x44>
   80340:	4b09      	ldr	r3, [pc, #36]	; (80368 <can_receive+0x80>)
   80342:	f101 0210 	add.w	r2, r1, #16
   80346:	0152      	lsls	r2, r2, #5
   80348:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   8034c:	5098      	str	r0, [r3, r2]
   8034e:	eb03 1141 	add.w	r1, r3, r1, lsl #5
   80352:	f8d1 321c 	ldr.w	r3, [r1, #540]	; 0x21c
   80356:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   8035a:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c
   8035e:	2000      	movs	r0, #0
   80360:	bc30      	pop	{r4, r5}
   80362:	4770      	bx	lr
   80364:	2001      	movs	r0, #1
   80366:	4770      	bx	lr
   80368:	400b4000 	.word	0x400b4000

0008036c <CAN0_Handler>:
 * \param void
 *
 * \retval 
 */
void CAN0_Handler( void )
{
   8036c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80370:	b084      	sub	sp, #16
	if(DEBUG_INTERRUPT){}/*printf("CAN0 interrupt\n\r")*/;
	char can_sr = CAN0->CAN_SR; 
   80372:	4b35      	ldr	r3, [pc, #212]	; (80448 <CAN0_Handler+0xdc>)
   80374:	691c      	ldr	r4, [r3, #16]
	
	//RX interrupt
	if(can_sr & (CAN_SR_MB1 | CAN_SR_MB2) )//Only mailbox 1 and 2 specified for receiving
   80376:	f014 0f06 	tst.w	r4, #6
   8037a:	d031      	beq.n	803e0 <CAN0_Handler+0x74>
	{
		CAN_MESSAGE message;
		if(can_sr & CAN_SR_MB1)  //Mailbox 1 event
   8037c:	f014 0f02 	tst.w	r4, #2
   80380:	d13c      	bne.n	803fc <CAN0_Handler+0x90>
		{
			can_receive(&message, 1);

		}
		else if(can_sr & CAN_SR_MB2) //Mailbox 2 event
   80382:	f014 0f04 	tst.w	r4, #4
   80386:	d03e      	beq.n	80406 <CAN0_Handler+0x9a>
		
		{
			can_receive(&message, 2);
   80388:	2102      	movs	r1, #2
   8038a:	a801      	add	r0, sp, #4
   8038c:	4b2f      	ldr	r3, [pc, #188]	; (8044c <CAN0_Handler+0xe0>)
   8038e:	4798      	blx	r3
		else
		{
			printf("CAN0 message arrived in non-used mailbox\n\r");
		}
		
		if(message.id < 0x00ff && message.id > 0x000f){
   80390:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   80394:	f1a1 0310 	sub.w	r3, r1, #16
   80398:	b29b      	uxth	r3, r3
   8039a:	2bee      	cmp	r3, #238	; 0xee
   8039c:	d837      	bhi.n	8040e <CAN0_Handler+0xa2>
			//interpret_joystick
			joystick.x_val = (message.data[3] == 0x11) ? message.data[0] : message.data[0]*-1;
   8039e:	f89d 300a 	ldrb.w	r3, [sp, #10]
   803a2:	2b11      	cmp	r3, #17
   803a4:	bf0f      	iteee	eq
   803a6:	f99d 3007 	ldrsbeq.w	r3, [sp, #7]
   803aa:	f89d 3007 	ldrbne.w	r3, [sp, #7]
   803ae:	425b      	negne	r3, r3
   803b0:	b25b      	sxtbne	r3, r3
   803b2:	4a27      	ldr	r2, [pc, #156]	; (80450 <CAN0_Handler+0xe4>)
   803b4:	7013      	strb	r3, [r2, #0]
			joystick.y_val = (message.data[4] == 0x11) ? message.data[1] : message.data[1]*-1;
   803b6:	f89d 300b 	ldrb.w	r3, [sp, #11]
   803ba:	2b11      	cmp	r3, #17
   803bc:	bf0f      	iteee	eq
   803be:	f99d 2008 	ldrsbeq.w	r2, [sp, #8]
   803c2:	f89d 2008 	ldrbne.w	r2, [sp, #8]
   803c6:	4252      	negne	r2, r2
   803c8:	b252      	sxtbne	r2, r2
   803ca:	4b21      	ldr	r3, [pc, #132]	; (80450 <CAN0_Handler+0xe4>)
   803cc:	705a      	strb	r2, [r3, #1]
			joystick.butt_pressed = message.data[2];
   803ce:	f89d 2009 	ldrb.w	r2, [sp, #9]
   803d2:	709a      	strb	r2, [r3, #2]
			joystick.left_val = message.data[5];
   803d4:	f89d 200c 	ldrb.w	r2, [sp, #12]
   803d8:	70da      	strb	r2, [r3, #3]
			joystick.right_val = message.data[6];
   803da:	f89d 200d 	ldrb.w	r2, [sp, #13]
   803de:	711a      	strb	r2, [r3, #4]
			if(DEBUG_INTERRUPT)printf("\n\r");
		}
		
	}
	
	if(can_sr & CAN_SR_MB0)
   803e0:	f014 0f01 	tst.w	r4, #1
   803e4:	d002      	beq.n	803ec <CAN0_Handler+0x80>
	{
		/*if(DEBUG_INTERRUPT) printf("CAN0 MB0 ready to send \n\r");*/
		
	//Disable interrupt
		CAN0->CAN_IDR = CAN_IER_MB0;
   803e6:	2201      	movs	r2, #1
   803e8:	4b17      	ldr	r3, [pc, #92]	; (80448 <CAN0_Handler+0xdc>)
   803ea:	609a      	str	r2, [r3, #8]
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   803ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
   803f0:	4b18      	ldr	r3, [pc, #96]	; (80454 <CAN0_Handler+0xe8>)
   803f2:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184

	}
	
	NVIC_ClearPendingIRQ(ID_CAN0);
	//sei();*/
}
   803f6:	b004      	add	sp, #16
   803f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			can_receive(&message, 1);
   803fc:	2101      	movs	r1, #1
   803fe:	a801      	add	r0, sp, #4
   80400:	4b12      	ldr	r3, [pc, #72]	; (8044c <CAN0_Handler+0xe0>)
   80402:	4798      	blx	r3
   80404:	e7c4      	b.n	80390 <CAN0_Handler+0x24>
			printf("CAN0 message arrived in non-used mailbox\n\r");
   80406:	4814      	ldr	r0, [pc, #80]	; (80458 <CAN0_Handler+0xec>)
   80408:	4b14      	ldr	r3, [pc, #80]	; (8045c <CAN0_Handler+0xf0>)
   8040a:	4798      	blx	r3
   8040c:	e7c0      	b.n	80390 <CAN0_Handler+0x24>
			if(DEBUG_INTERRUPT)printf("message id: %d\n\r", message.id);
   8040e:	4814      	ldr	r0, [pc, #80]	; (80460 <CAN0_Handler+0xf4>)
   80410:	4d12      	ldr	r5, [pc, #72]	; (8045c <CAN0_Handler+0xf0>)
   80412:	47a8      	blx	r5
			if(DEBUG_INTERRUPT)printf("message data length: %d\n\r", message.data_length);
   80414:	f89d 1006 	ldrb.w	r1, [sp, #6]
   80418:	4812      	ldr	r0, [pc, #72]	; (80464 <CAN0_Handler+0xf8>)
   8041a:	47a8      	blx	r5
			for (int i = 0; i < message.data_length; i++)
   8041c:	f89d 3006 	ldrb.w	r3, [sp, #6]
   80420:	b173      	cbz	r3, 80440 <CAN0_Handler+0xd4>
   80422:	f10d 0607 	add.w	r6, sp, #7
   80426:	2500      	movs	r5, #0
				if(DEBUG_INTERRUPT)printf("%d ", message.data[i]);
   80428:	f8df 8040 	ldr.w	r8, [pc, #64]	; 8046c <CAN0_Handler+0x100>
   8042c:	4f0b      	ldr	r7, [pc, #44]	; (8045c <CAN0_Handler+0xf0>)
   8042e:	f816 1b01 	ldrb.w	r1, [r6], #1
   80432:	4640      	mov	r0, r8
   80434:	47b8      	blx	r7
			for (int i = 0; i < message.data_length; i++)
   80436:	3501      	adds	r5, #1
   80438:	f89d 3006 	ldrb.w	r3, [sp, #6]
   8043c:	42ab      	cmp	r3, r5
   8043e:	dcf6      	bgt.n	8042e <CAN0_Handler+0xc2>
			if(DEBUG_INTERRUPT)printf("\n\r");
   80440:	4809      	ldr	r0, [pc, #36]	; (80468 <CAN0_Handler+0xfc>)
   80442:	4b06      	ldr	r3, [pc, #24]	; (8045c <CAN0_Handler+0xf0>)
   80444:	4798      	blx	r3
   80446:	e7cb      	b.n	803e0 <CAN0_Handler+0x74>
   80448:	400b4000 	.word	0x400b4000
   8044c:	000802e9 	.word	0x000802e9
   80450:	2000048c 	.word	0x2000048c
   80454:	e000e100 	.word	0xe000e100
   80458:	00081858 	.word	0x00081858
   8045c:	00080c15 	.word	0x00080c15
   80460:	00081884 	.word	0x00081884
   80464:	00081898 	.word	0x00081898
   80468:	00081880 	.word	0x00081880
   8046c:	000818b4 	.word	0x000818b4

00080470 <dac_init>:



void dac_init(){
	
	PMC->PMC_PCER1 = PMC_PCER1_PID38;
   80470:	2240      	movs	r2, #64	; 0x40
   80472:	4b09      	ldr	r3, [pc, #36]	; (80498 <dac_init+0x28>)
   80474:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	
	
	DACC->DACC_MR |= DACC_MR_USER_SEL_CHANNEL1;
   80478:	f5a3 33c3 	sub.w	r3, r3, #99840	; 0x18600
   8047c:	685a      	ldr	r2, [r3, #4]
   8047e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
   80482:	605a      	str	r2, [r3, #4]
	DACC->DACC_MR &= ~(1<<0); //disable trigger, set freemode
   80484:	685a      	ldr	r2, [r3, #4]
   80486:	f022 0201 	bic.w	r2, r2, #1
   8048a:	605a      	str	r2, [r3, #4]
	//DACC->DACC_MR |= DACC_MR_WORD_WORD;
	//DACC->DACC_CHER |= DACC_CHER_CH0;
	DACC->DACC_CHER = DACC_CHER_CH1;
   8048c:	2202      	movs	r2, #2
   8048e:	611a      	str	r2, [r3, #16]
	
	DACC->DACC_CDR = 0x05ff;
   80490:	f240 52ff 	movw	r2, #1535	; 0x5ff
   80494:	621a      	str	r2, [r3, #32]
   80496:	4770      	bx	lr
   80498:	400e0600 	.word	0x400e0600

0008049c <Dummy_Handler>:
   8049c:	e7fe      	b.n	8049c <Dummy_Handler>
	...

000804a0 <Reset_Handler>:
   804a0:	b508      	push	{r3, lr}
   804a2:	4b18      	ldr	r3, [pc, #96]	; (80504 <Reset_Handler+0x64>)
   804a4:	4a18      	ldr	r2, [pc, #96]	; (80508 <Reset_Handler+0x68>)
   804a6:	429a      	cmp	r2, r3
   804a8:	d010      	beq.n	804cc <Reset_Handler+0x2c>
   804aa:	4b18      	ldr	r3, [pc, #96]	; (8050c <Reset_Handler+0x6c>)
   804ac:	4a15      	ldr	r2, [pc, #84]	; (80504 <Reset_Handler+0x64>)
   804ae:	429a      	cmp	r2, r3
   804b0:	d20c      	bcs.n	804cc <Reset_Handler+0x2c>
   804b2:	3b01      	subs	r3, #1
   804b4:	1a9b      	subs	r3, r3, r2
   804b6:	f023 0303 	bic.w	r3, r3, #3
   804ba:	3304      	adds	r3, #4
   804bc:	4413      	add	r3, r2
   804be:	4912      	ldr	r1, [pc, #72]	; (80508 <Reset_Handler+0x68>)
   804c0:	f851 0b04 	ldr.w	r0, [r1], #4
   804c4:	f842 0b04 	str.w	r0, [r2], #4
   804c8:	429a      	cmp	r2, r3
   804ca:	d1f9      	bne.n	804c0 <Reset_Handler+0x20>
   804cc:	4b10      	ldr	r3, [pc, #64]	; (80510 <Reset_Handler+0x70>)
   804ce:	4a11      	ldr	r2, [pc, #68]	; (80514 <Reset_Handler+0x74>)
   804d0:	429a      	cmp	r2, r3
   804d2:	d20a      	bcs.n	804ea <Reset_Handler+0x4a>
   804d4:	3b01      	subs	r3, #1
   804d6:	1a9b      	subs	r3, r3, r2
   804d8:	f023 0303 	bic.w	r3, r3, #3
   804dc:	3304      	adds	r3, #4
   804de:	4413      	add	r3, r2
   804e0:	2100      	movs	r1, #0
   804e2:	f842 1b04 	str.w	r1, [r2], #4
   804e6:	4293      	cmp	r3, r2
   804e8:	d1fb      	bne.n	804e2 <Reset_Handler+0x42>
   804ea:	4b0b      	ldr	r3, [pc, #44]	; (80518 <Reset_Handler+0x78>)
   804ec:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   804f0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   804f4:	4a09      	ldr	r2, [pc, #36]	; (8051c <Reset_Handler+0x7c>)
   804f6:	6093      	str	r3, [r2, #8]
   804f8:	4b09      	ldr	r3, [pc, #36]	; (80520 <Reset_Handler+0x80>)
   804fa:	4798      	blx	r3
   804fc:	4b09      	ldr	r3, [pc, #36]	; (80524 <Reset_Handler+0x84>)
   804fe:	4798      	blx	r3
   80500:	e7fe      	b.n	80500 <Reset_Handler+0x60>
   80502:	bf00      	nop
   80504:	20000000 	.word	0x20000000
   80508:	00081944 	.word	0x00081944
   8050c:	2000044c 	.word	0x2000044c
   80510:	200004fc 	.word	0x200004fc
   80514:	20000450 	.word	0x20000450
   80518:	00080000 	.word	0x00080000
   8051c:	e000ed00 	.word	0xe000ed00
   80520:	000816e9 	.word	0x000816e9
   80524:	000807f1 	.word	0x000807f1

00080528 <SystemInit>:
   80528:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8052c:	4a20      	ldr	r2, [pc, #128]	; (805b0 <SystemInit+0x88>)
   8052e:	6013      	str	r3, [r2, #0]
   80530:	f502 7200 	add.w	r2, r2, #512	; 0x200
   80534:	6013      	str	r3, [r2, #0]
   80536:	4b1f      	ldr	r3, [pc, #124]	; (805b4 <SystemInit+0x8c>)
   80538:	6a1b      	ldr	r3, [r3, #32]
   8053a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   8053e:	d107      	bne.n	80550 <SystemInit+0x28>
   80540:	4a1d      	ldr	r2, [pc, #116]	; (805b8 <SystemInit+0x90>)
   80542:	4b1c      	ldr	r3, [pc, #112]	; (805b4 <SystemInit+0x8c>)
   80544:	621a      	str	r2, [r3, #32]
   80546:	461a      	mov	r2, r3
   80548:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8054a:	f013 0f01 	tst.w	r3, #1
   8054e:	d0fb      	beq.n	80548 <SystemInit+0x20>
   80550:	4a1a      	ldr	r2, [pc, #104]	; (805bc <SystemInit+0x94>)
   80552:	4b18      	ldr	r3, [pc, #96]	; (805b4 <SystemInit+0x8c>)
   80554:	621a      	str	r2, [r3, #32]
   80556:	461a      	mov	r2, r3
   80558:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8055a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   8055e:	d0fb      	beq.n	80558 <SystemInit+0x30>
   80560:	4a14      	ldr	r2, [pc, #80]	; (805b4 <SystemInit+0x8c>)
   80562:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80564:	f023 0303 	bic.w	r3, r3, #3
   80568:	f043 0301 	orr.w	r3, r3, #1
   8056c:	6313      	str	r3, [r2, #48]	; 0x30
   8056e:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80570:	f013 0f08 	tst.w	r3, #8
   80574:	d0fb      	beq.n	8056e <SystemInit+0x46>
   80576:	4a12      	ldr	r2, [pc, #72]	; (805c0 <SystemInit+0x98>)
   80578:	4b0e      	ldr	r3, [pc, #56]	; (805b4 <SystemInit+0x8c>)
   8057a:	629a      	str	r2, [r3, #40]	; 0x28
   8057c:	461a      	mov	r2, r3
   8057e:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80580:	f013 0f02 	tst.w	r3, #2
   80584:	d0fb      	beq.n	8057e <SystemInit+0x56>
   80586:	2211      	movs	r2, #17
   80588:	4b0a      	ldr	r3, [pc, #40]	; (805b4 <SystemInit+0x8c>)
   8058a:	631a      	str	r2, [r3, #48]	; 0x30
   8058c:	461a      	mov	r2, r3
   8058e:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80590:	f013 0f08 	tst.w	r3, #8
   80594:	d0fb      	beq.n	8058e <SystemInit+0x66>
   80596:	2212      	movs	r2, #18
   80598:	4b06      	ldr	r3, [pc, #24]	; (805b4 <SystemInit+0x8c>)
   8059a:	631a      	str	r2, [r3, #48]	; 0x30
   8059c:	461a      	mov	r2, r3
   8059e:	6e93      	ldr	r3, [r2, #104]	; 0x68
   805a0:	f013 0f08 	tst.w	r3, #8
   805a4:	d0fb      	beq.n	8059e <SystemInit+0x76>
   805a6:	4a07      	ldr	r2, [pc, #28]	; (805c4 <SystemInit+0x9c>)
   805a8:	4b07      	ldr	r3, [pc, #28]	; (805c8 <SystemInit+0xa0>)
   805aa:	601a      	str	r2, [r3, #0]
   805ac:	4770      	bx	lr
   805ae:	bf00      	nop
   805b0:	400e0a00 	.word	0x400e0a00
   805b4:	400e0600 	.word	0x400e0600
   805b8:	00370809 	.word	0x00370809
   805bc:	01370809 	.word	0x01370809
   805c0:	200d3f01 	.word	0x200d3f01
   805c4:	0501bd00 	.word	0x0501bd00
   805c8:	20000000 	.word	0x20000000

000805cc <move_solenoid>:
 #include "sam.h"
 
 uint8_t previous = 1;
 uint8_t y_value_pi = 0;
 
 void move_solenoid(){
   805cc:	b510      	push	{r4, lr}
	 //printf("joystick.x_val : %d \n\r", joystick.x_val);
	 
	  
	 
	 if(joystick.x_val < 0){
   805ce:	4b17      	ldr	r3, [pc, #92]	; (8062c <move_solenoid+0x60>)
   805d0:	f993 0000 	ldrsb.w	r0, [r3]
   805d4:	2800      	cmp	r0, #0
   805d6:	db0f      	blt.n	805f8 <move_solenoid+0x2c>
		 uint8_t val = 50-abs(joystick.x_val)*0.5;
		 timer_change_duty(val);
	 }
	 if(joystick.x_val >= 0){
		 uint8_t val2 = 50+joystick.x_val*0.5;
   805d8:	4b15      	ldr	r3, [pc, #84]	; (80630 <move_solenoid+0x64>)
   805da:	4798      	blx	r3
   805dc:	2200      	movs	r2, #0
   805de:	4b15      	ldr	r3, [pc, #84]	; (80634 <move_solenoid+0x68>)
   805e0:	4c15      	ldr	r4, [pc, #84]	; (80638 <move_solenoid+0x6c>)
   805e2:	47a0      	blx	r4
   805e4:	2200      	movs	r2, #0
   805e6:	4b15      	ldr	r3, [pc, #84]	; (8063c <move_solenoid+0x70>)
   805e8:	4c15      	ldr	r4, [pc, #84]	; (80640 <move_solenoid+0x74>)
   805ea:	47a0      	blx	r4
   805ec:	4b15      	ldr	r3, [pc, #84]	; (80644 <move_solenoid+0x78>)
   805ee:	4798      	blx	r3
		 timer_change_duty(val2);
   805f0:	b2c0      	uxtb	r0, r0
   805f2:	4b15      	ldr	r3, [pc, #84]	; (80648 <move_solenoid+0x7c>)
   805f4:	4798      	blx	r3
   805f6:	bd10      	pop	{r4, pc}
		 uint8_t val = 50-abs(joystick.x_val)*0.5;
   805f8:	2800      	cmp	r0, #0
   805fa:	bfb8      	it	lt
   805fc:	4240      	neglt	r0, r0
   805fe:	4b0c      	ldr	r3, [pc, #48]	; (80630 <move_solenoid+0x64>)
   80600:	4798      	blx	r3
   80602:	2200      	movs	r2, #0
   80604:	4b0b      	ldr	r3, [pc, #44]	; (80634 <move_solenoid+0x68>)
   80606:	4c0c      	ldr	r4, [pc, #48]	; (80638 <move_solenoid+0x6c>)
   80608:	47a0      	blx	r4
   8060a:	4602      	mov	r2, r0
   8060c:	460b      	mov	r3, r1
   8060e:	2000      	movs	r0, #0
   80610:	490a      	ldr	r1, [pc, #40]	; (8063c <move_solenoid+0x70>)
   80612:	4c0e      	ldr	r4, [pc, #56]	; (8064c <move_solenoid+0x80>)
   80614:	47a0      	blx	r4
   80616:	4b0b      	ldr	r3, [pc, #44]	; (80644 <move_solenoid+0x78>)
   80618:	4798      	blx	r3
		 timer_change_duty(val);
   8061a:	b2c0      	uxtb	r0, r0
   8061c:	4b0a      	ldr	r3, [pc, #40]	; (80648 <move_solenoid+0x7c>)
   8061e:	4798      	blx	r3
	 if(joystick.x_val >= 0){
   80620:	4b02      	ldr	r3, [pc, #8]	; (8062c <move_solenoid+0x60>)
   80622:	f993 0000 	ldrsb.w	r0, [r3]
   80626:	2800      	cmp	r0, #0
   80628:	dbe5      	blt.n	805f6 <move_solenoid+0x2a>
   8062a:	e7d5      	b.n	805d8 <move_solenoid+0xc>
   8062c:	2000048c 	.word	0x2000048c
   80630:	00081169 	.word	0x00081169
   80634:	3fe00000 	.word	0x3fe00000
   80638:	00081235 	.word	0x00081235
   8063c:	40490000 	.word	0x40490000
   80640:	00080ed1 	.word	0x00080ed1
   80644:	000816a9 	.word	0x000816a9
   80648:	00080cad 	.word	0x00080cad
   8064c:	00080ecd 	.word	0x00080ecd

00080650 <change_motor_speed_using_paadrag>:
 }

void change_motor_speed_using_paadrag(int paadrag){
	//printf("joystick.y_val : %d \n\r", joystick.y_val);
	
	if(paadrag < 0){
   80650:	2800      	cmp	r0, #0
		PIOD->PIO_CODR = PIO_CODR_P10; //set direction left
   80652:	f44f 6280 	mov.w	r2, #1024	; 0x400
   80656:	4b06      	ldr	r3, [pc, #24]	; (80670 <change_motor_speed_using_paadrag+0x20>)
   80658:	bfb4      	ite	lt
   8065a:	635a      	strlt	r2, [r3, #52]	; 0x34
		uint16_t val = abs(paadrag);
		DACC->DACC_CDR = val;
	}else{
		PIOD->PIO_SODR = PIO_SODR_P10; //set direction right
   8065c:	631a      	strge	r2, [r3, #48]	; 0x30
		uint16_t val2 = abs(paadrag);
   8065e:	2800      	cmp	r0, #0
   80660:	bfb8      	it	lt
   80662:	4240      	neglt	r0, r0
		DACC->DACC_CDR = val2;
   80664:	b280      	uxth	r0, r0
   80666:	f5a3 33ca 	sub.w	r3, r3, #103424	; 0x19400
   8066a:	6218      	str	r0, [r3, #32]
   8066c:	4770      	bx	lr
   8066e:	bf00      	nop
   80670:	400e1400 	.word	0x400e1400

00080674 <motor_box_init>:
	}
}
 

void motor_box_init(){
	PIOD->PIO_PER |= PIO_PER_P10; //PIO Enable Register, PIO Enable //pin32 DIR PD10
   80674:	4b20      	ldr	r3, [pc, #128]	; (806f8 <motor_box_init+0x84>)
   80676:	681a      	ldr	r2, [r3, #0]
   80678:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   8067c:	601a      	str	r2, [r3, #0]
	PIOD->PIO_OER |= PIO_OER_P10; //Output Enable Register, Output Enable //pin32 DIR PD10
   8067e:	691a      	ldr	r2, [r3, #16]
   80680:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   80684:	611a      	str	r2, [r3, #16]
	PIOD->PIO_PER |= PIO_PER_P9; //PIO Enable Register, PIO Enable //pin30 EN PD9
   80686:	681a      	ldr	r2, [r3, #0]
   80688:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   8068c:	601a      	str	r2, [r3, #0]
	PIOD->PIO_OER |= PIO_OER_P9; //Output Enable Register, Output Enable //pin30 EN PD9
   8068e:	691a      	ldr	r2, [r3, #16]
   80690:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   80694:	611a      	str	r2, [r3, #16]
	
	PIOD->PIO_SODR = PIO_SODR_P9; //Set Output Data Register, Set Output Data
   80696:	f44f 7200 	mov.w	r2, #512	; 0x200
   8069a:	631a      	str	r2, [r3, #48]	; 0x30
	PIOD->PIO_CODR = PIO_CODR_P10; //Clear Output Data Register, Set Output Data
   8069c:	f44f 6280 	mov.w	r2, #1024	; 0x400
   806a0:	635a      	str	r2, [r3, #52]	; 0x34
	
	PMC->PMC_PCER0 = PMC_PCER0_PID13;
   806a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   806a6:	4a15      	ldr	r2, [pc, #84]	; (806fc <motor_box_init+0x88>)
   806a8:	6111      	str	r1, [r2, #16]

	
	//allow counter to start
	PIOD->PIO_SODR |= PIO_SODR_P1; //!RST high
   806aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   806ac:	f042 0202 	orr.w	r2, r2, #2
   806b0:	631a      	str	r2, [r3, #48]	; 0x30
	
	//enable pins for reading encoder
	PIOC->PIO_PER |= PIO_PER_P8; //DO7
   806b2:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
   806b6:	681a      	ldr	r2, [r3, #0]
   806b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   806bc:	601a      	str	r2, [r3, #0]
	PIOC->PIO_PER |= PIO_PER_P7; //DO6
   806be:	681a      	ldr	r2, [r3, #0]
   806c0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   806c4:	601a      	str	r2, [r3, #0]
	PIOC->PIO_PER |= PIO_PER_P6; //DO5
   806c6:	681a      	ldr	r2, [r3, #0]
   806c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   806cc:	601a      	str	r2, [r3, #0]
	PIOC->PIO_PER |= PIO_PER_P5; //DO4
   806ce:	681a      	ldr	r2, [r3, #0]
   806d0:	f042 0220 	orr.w	r2, r2, #32
   806d4:	601a      	str	r2, [r3, #0]
	PIOC->PIO_PER |= PIO_PER_P4; //DO3
   806d6:	681a      	ldr	r2, [r3, #0]
   806d8:	f042 0210 	orr.w	r2, r2, #16
   806dc:	601a      	str	r2, [r3, #0]
	PIOC->PIO_PER |= PIO_PER_P3; //DO2
   806de:	681a      	ldr	r2, [r3, #0]
   806e0:	f042 0208 	orr.w	r2, r2, #8
   806e4:	601a      	str	r2, [r3, #0]
	PIOC->PIO_PER |= PIO_PER_P2; //DO1
   806e6:	681a      	ldr	r2, [r3, #0]
   806e8:	f042 0204 	orr.w	r2, r2, #4
   806ec:	601a      	str	r2, [r3, #0]
	PIOC->PIO_PER |= PIO_PER_P1; //DO0
   806ee:	681a      	ldr	r2, [r3, #0]
   806f0:	f042 0202 	orr.w	r2, r2, #2
   806f4:	601a      	str	r2, [r3, #0]
   806f6:	4770      	bx	lr
   806f8:	400e1400 	.word	0x400e1400
   806fc:	400e0600 	.word	0x400e0600

00080700 <encoder_read>:
}


uint8_t encoder_read(){
   80700:	b508      	push	{r3, lr}
	// PIO (Output) Enable Register, PIO Enable
	PIOD->PIO_PER |= PIO_PER_P2; // Pin 27 sel PD2 SEL
   80702:	4b2b      	ldr	r3, [pc, #172]	; (807b0 <encoder_read+0xb0>)
   80704:	681a      	ldr	r2, [r3, #0]
   80706:	f042 0204 	orr.w	r2, r2, #4
   8070a:	601a      	str	r2, [r3, #0]
	PIOD->PIO_OER |= PIO_OER_P2; // 
   8070c:	691a      	ldr	r2, [r3, #16]
   8070e:	f042 0204 	orr.w	r2, r2, #4
   80712:	611a      	str	r2, [r3, #16]
	PIOD->PIO_PER |= PIO_PER_P1; // Pin 26 not_rst PD1 !RST
   80714:	681a      	ldr	r2, [r3, #0]
   80716:	f042 0202 	orr.w	r2, r2, #2
   8071a:	601a      	str	r2, [r3, #0]
	PIOD->PIO_OER |= PIO_OER_P1; // 
   8071c:	691a      	ldr	r2, [r3, #16]
   8071e:	f042 0202 	orr.w	r2, r2, #2
   80722:	611a      	str	r2, [r3, #16]
	PIOD->PIO_PER |= PIO_PER_P0; // Pin 25 not_oe PD0 !OE
   80724:	681a      	ldr	r2, [r3, #0]
   80726:	f042 0201 	orr.w	r2, r2, #1
   8072a:	601a      	str	r2, [r3, #0]
	PIOD->PIO_OER |= PIO_OER_P0; // 
   8072c:	691a      	ldr	r2, [r3, #16]
   8072e:	f042 0201 	orr.w	r2, r2, #1
   80732:	611a      	str	r2, [r3, #16]
	
	PIOD->PIO_CODR |= PIO_CODR_P0; //!OE low
   80734:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   80736:	f042 0201 	orr.w	r2, r2, #1
   8073a:	635a      	str	r2, [r3, #52]	; 0x34
	PIOD->PIO_CODR |= PIO_CODR_P2; //SEL low
   8073c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   8073e:	f042 0204 	orr.w	r2, r2, #4
   80742:	635a      	str	r2, [r3, #52]	; 0x34
   80744:	f44f 6348 	mov.w	r3, #3200	; 0xc80
	
	//10 microsec
	for(int i = 0; i < 3200; i++){
   80748:	3b01      	subs	r3, #1
   8074a:	d1fd      	bne.n	80748 <encoder_read+0x48>
	}
	
	uint8_t MSB = (PIOC->PIO_PDSR >> 1);
   8074c:	4b19      	ldr	r3, [pc, #100]	; (807b4 <encoder_read+0xb4>)
   8074e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   80750:	0849      	lsrs	r1, r1, #1
	//printf("PIO_PDSR: -----%x \n\r", PIOC->PIO_PDSR);
	PIOD->PIO_SODR |= PIO_SODR_P2; //SEL high
   80752:	4a17      	ldr	r2, [pc, #92]	; (807b0 <encoder_read+0xb0>)
   80754:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80756:	f043 0304 	orr.w	r3, r3, #4
   8075a:	6313      	str	r3, [r2, #48]	; 0x30
   8075c:	f44f 6348 	mov.w	r3, #3200	; 0xc80
	
	//10 microsec
	for(int i = 0; i < 3200; i++){
   80760:	3b01      	subs	r3, #1
   80762:	d1fd      	bne.n	80760 <encoder_read+0x60>
	}
	uint8_t LSB = PIOC->PIO_PDSR >> 1;
   80764:	4b13      	ldr	r3, [pc, #76]	; (807b4 <encoder_read+0xb4>)
   80766:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	
	PIOD->PIO_CODR |= PIO_CODR_P1; //!RST low
   80768:	f503 7300 	add.w	r3, r3, #512	; 0x200
   8076c:	6b58      	ldr	r0, [r3, #52]	; 0x34
   8076e:	f040 0002 	orr.w	r0, r0, #2
   80772:	6358      	str	r0, [r3, #52]	; 0x34
	PIOD->PIO_SODR |= PIO_SODR_P1; //!RST high
   80774:	6b18      	ldr	r0, [r3, #48]	; 0x30
   80776:	f040 0002 	orr.w	r0, r0, #2
   8077a:	6318      	str	r0, [r3, #48]	; 0x30
	PIOD->PIO_SODR |= PIO_SODR_P0; //!OE high
   8077c:	6b18      	ldr	r0, [r3, #48]	; 0x30
   8077e:	f040 0001 	orr.w	r0, r0, #1
   80782:	6318      	str	r0, [r3, #48]	; 0x30
	
	uint16_t encoder_data = (LSB | (MSB << 8));
   80784:	0209      	lsls	r1, r1, #8
   80786:	b289      	uxth	r1, r1
	int encoder_data_int = LSB | (MSB << 8);
   80788:	f3c2 0347 	ubfx	r3, r2, #1, #8
   8078c:	4319      	orrs	r1, r3
	y_value_pi = (9272-encoder_data_int)/92; //scaled so that value is 0-100;
   8078e:	f5c1 5310 	rsb	r3, r1, #9216	; 0x2400
   80792:	3338      	adds	r3, #56	; 0x38
   80794:	4a08      	ldr	r2, [pc, #32]	; (807b8 <encoder_read+0xb8>)
   80796:	fb82 0203 	smull	r0, r2, r2, r3
   8079a:	441a      	add	r2, r3
   8079c:	17db      	asrs	r3, r3, #31
   8079e:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
   807a2:	4a06      	ldr	r2, [pc, #24]	; (807bc <encoder_read+0xbc>)
   807a4:	7013      	strb	r3, [r2, #0]
 	printf("Encoder data: %x \n\r", encoder_data_int);
   807a6:	4806      	ldr	r0, [pc, #24]	; (807c0 <encoder_read+0xc0>)
   807a8:	4b06      	ldr	r3, [pc, #24]	; (807c4 <encoder_read+0xc4>)
   807aa:	4798      	blx	r3
// 		printf("Data negative: -%d \n\r", encoder_data);
// 	}
// 	else{
// 		printf("Data positive: %d \n\r", encoder_data);
// 	}
}
   807ac:	bd08      	pop	{r3, pc}
   807ae:	bf00      	nop
   807b0:	400e1400 	.word	0x400e1400
   807b4:	400e1200 	.word	0x400e1200
   807b8:	b21642c9 	.word	0xb21642c9
   807bc:	20000473 	.word	0x20000473
   807c0:	000818b8 	.word	0x000818b8
   807c4:	00080c15 	.word	0x00080c15

000807c8 <button_check>:

uint8_t button_check(uint8_t current){
	if(current == 0 && previous == 1){
   807c8:	4603      	mov	r3, r0
   807ca:	b948      	cbnz	r0, 807e0 <button_check+0x18>
   807cc:	4a07      	ldr	r2, [pc, #28]	; (807ec <button_check+0x24>)
   807ce:	7810      	ldrb	r0, [r2, #0]
   807d0:	2801      	cmp	r0, #1
   807d2:	d001      	beq.n	807d8 <button_check+0x10>
		return 1;
		}else if(current != 0){
		previous = 1;
		//printf("%s", "C");
	}
	return 0;
   807d4:	4618      	mov	r0, r3
   807d6:	4770      	bx	lr
		previous = 0;
   807d8:	2200      	movs	r2, #0
   807da:	4b04      	ldr	r3, [pc, #16]	; (807ec <button_check+0x24>)
   807dc:	701a      	strb	r2, [r3, #0]
		return 1;
   807de:	4770      	bx	lr
		previous = 1;
   807e0:	2201      	movs	r2, #1
   807e2:	4b02      	ldr	r3, [pc, #8]	; (807ec <button_check+0x24>)
   807e4:	701a      	strb	r2, [r3, #0]
	return 0;
   807e6:	2000      	movs	r0, #0
   807e8:	4770      	bx	lr
   807ea:	bf00      	nop
   807ec:	20000004 	.word	0x20000004

000807f0 <main>:
#include "dac_controller.h"
#include "motor_controller.h"
#include "timer.h"

int main(void)
{
   807f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    /* Initialize the SAM system */
    SystemInit();
   807f4:	4b3b      	ldr	r3, [pc, #236]	; (808e4 <main+0xf4>)
   807f6:	4798      	blx	r3
	WDT->WDT_MR |= 1 << 15;
   807f8:	4a3b      	ldr	r2, [pc, #236]	; (808e8 <main+0xf8>)
   807fa:	6853      	ldr	r3, [r2, #4]
   807fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
   80800:	6053      	str	r3, [r2, #4]
	configure_uart();
   80802:	4b3a      	ldr	r3, [pc, #232]	; (808ec <main+0xfc>)
   80804:	4798      	blx	r3
	can_init_def_tx_rx_mb(0x00290561); // 0x00290561 = 0b 00000000001010010000010101100001// 0b000000000000100100010001000100010
   80806:	483a      	ldr	r0, [pc, #232]	; (808f0 <main+0x100>)
   80808:	4b3a      	ldr	r3, [pc, #232]	; (808f4 <main+0x104>)
   8080a:	4798      	blx	r3
	
	printf("hello\n\r");
   8080c:	483a      	ldr	r0, [pc, #232]	; (808f8 <main+0x108>)
   8080e:	4b3b      	ldr	r3, [pc, #236]	; (808fc <main+0x10c>)
   80810:	4798      	blx	r3
	PWM->PWM_CH_NUM[2].PWM_CMR &= ~PWM_CMR_CPOL;
	
	PIOA->PIO_ABSR |= PIO_ABSR_P5; //PIO set peripheral b on pin 5*/
	
	
	timer_init();
   80812:	4b3b      	ldr	r3, [pc, #236]	; (80900 <main+0x110>)
   80814:	4798      	blx	r3
	timer_change_duty(100);
   80816:	2064      	movs	r0, #100	; 0x64
   80818:	4b3a      	ldr	r3, [pc, #232]	; (80904 <main+0x114>)
   8081a:	4798      	blx	r3
	//init_interrupt_PI();
	init_ch1_PI();
   8081c:	4b3a      	ldr	r3, [pc, #232]	; (80908 <main+0x118>)
   8081e:	4798      	blx	r3
	
	adc_init();
   80820:	4b3a      	ldr	r3, [pc, #232]	; (8090c <main+0x11c>)
   80822:	4798      	blx	r3
	dac_init();
   80824:	4b3a      	ldr	r3, [pc, #232]	; (80910 <main+0x120>)
   80826:	4798      	blx	r3
	
	
	motor_box_init();
   80828:	4b3a      	ldr	r3, [pc, #232]	; (80914 <main+0x124>)
   8082a:	4798      	blx	r3
	
	
	
	
	//enable and set high, pin to controll servo shoot, pin50 on shield
	PIOC->PIO_PER |= PIO_PER_P13; 
   8082c:	4b3a      	ldr	r3, [pc, #232]	; (80918 <main+0x128>)
   8082e:	681a      	ldr	r2, [r3, #0]
   80830:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   80834:	601a      	str	r2, [r3, #0]
	PIOC->PIO_OER |= PIO_OER_P13; 
   80836:	691a      	ldr	r2, [r3, #16]
   80838:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   8083c:	611a      	str	r2, [r3, #16]
	PIOC->PIO_SODR |= PIO_SODR_P13;
   8083e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80840:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   80844:	631a      	str	r2, [r3, #48]	; 0x30
	
	
	
	
	PIOA->PIO_PER |= PIO_PER_P19; //PIO Enable Register, PIO Enable
   80846:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
   8084a:	681a      	ldr	r2, [r3, #0]
   8084c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   80850:	601a      	str	r2, [r3, #0]
	PIOA->PIO_OER |= PIO_OER_P19; //Output Enable Register, Output Enable
   80852:	691a      	ldr	r2, [r3, #16]
   80854:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   80858:	611a      	str	r2, [r3, #16]
	
	PIOA->PIO_PER |= PIO_PER_P20; //PIO Enable Register, PIO Enable
   8085a:	681a      	ldr	r2, [r3, #0]
   8085c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   80860:	601a      	str	r2, [r3, #0]
	PIOA->PIO_OER |= PIO_OER_P20; //Output Enable Register, Output Enable
   80862:	691a      	ldr	r2, [r3, #16]
   80864:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   80868:	611a      	str	r2, [r3, #16]
	/*PIOA->PIO_PER |= PIO_PER_P8; //PIO Enable Register, PIO Enable
	PIOA->PIO_OER |= PIO_OER_P8; //Output Enable Register, Output Enable
	PIOA->PIO_PER |= PIO_PER_P9; //PIO Enable Register, PIO Enable
	PIOA->PIO_OER |= PIO_OER_P9; //Output Enable Register, Output Enable*/
	volatile CAN_MESSAGE msg;
	SysTick_init();
   8086a:	4b2c      	ldr	r3, [pc, #176]	; (8091c <main+0x12c>)
   8086c:	4798      	blx	r3
    while (1) 
    {
		
		PIOA->PIO_SODR = PIO_SODR_P19; //Set Output Data Register, Set Output Data
   8086e:	4c2c      	ldr	r4, [pc, #176]	; (80920 <main+0x130>)
		move_solenoid();
		//change_motor_speed();
		encoder_read();
		
		if(button_check(joystick.butt_pressed)){
			PIOC->PIO_CODR |= PIO_CODR_P13;
   80870:	4d29      	ldr	r5, [pc, #164]	; (80918 <main+0x128>)
   80872:	e032      	b.n	808da <main+0xea>
		}
		
		
		//printf("%d",ADC->ADC_ISR);
// 		printf("adc_input : %x   \n\r", ADC->ADC_CDR[1]);
 		printf("goals : %d   \n\r", TOTAL_GOALS);
   80874:	4b2b      	ldr	r3, [pc, #172]	; (80924 <main+0x134>)
   80876:	7819      	ldrb	r1, [r3, #0]
   80878:	482b      	ldr	r0, [pc, #172]	; (80928 <main+0x138>)
   8087a:	4b20      	ldr	r3, [pc, #128]	; (808fc <main+0x10c>)
   8087c:	4798      	blx	r3
		//printf("left_slider : %d   \n\r", joystick.left_val);
		//printf("adc_input : %d ::::", ADC->ADC_LCDR & 0x00000CE4);
		
		
		if(TO_INCREMENT){
   8087e:	4b2b      	ldr	r3, [pc, #172]	; (8092c <main+0x13c>)
   80880:	781b      	ldrb	r3, [r3, #0]
   80882:	bb23      	cbnz	r3, 808ce <main+0xde>
		PIOA->PIO_SODR = PIO_SODR_P19; //Set Output Data Register, Set Output Data
   80884:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
   80888:	4b29      	ldr	r3, [pc, #164]	; (80930 <main+0x140>)
		for(int i = 0; i < 1600000; i++){
   8088a:	3b01      	subs	r3, #1
   8088c:	d1fd      	bne.n	8088a <main+0x9a>
		PIOA->PIO_CODR = PIO_CODR_P19; //Clear Output Data Register, Set Output Data
   8088e:	6366      	str	r6, [r4, #52]	; 0x34
		PIOA->PIO_SODR = PIO_SODR_P20; //Set Output Data Register, Set Output Data
   80890:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   80894:	6323      	str	r3, [r4, #48]	; 0x30
   80896:	4b26      	ldr	r3, [pc, #152]	; (80930 <main+0x140>)
		for(int i = 0; i < 1600000; i++){
   80898:	3b01      	subs	r3, #1
   8089a:	d1fd      	bne.n	80898 <main+0xa8>
		PIOA->PIO_CODR |= PIO_CODR_P20; //Clear Output Data Register,
   8089c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   8089e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   808a2:	6363      	str	r3, [r4, #52]	; 0x34
		move_solenoid();
   808a4:	47b8      	blx	r7
		encoder_read();
   808a6:	4b23      	ldr	r3, [pc, #140]	; (80934 <main+0x144>)
   808a8:	4798      	blx	r3
		if(button_check(joystick.butt_pressed)){
   808aa:	4b23      	ldr	r3, [pc, #140]	; (80938 <main+0x148>)
   808ac:	7898      	ldrb	r0, [r3, #2]
   808ae:	4b23      	ldr	r3, [pc, #140]	; (8093c <main+0x14c>)
   808b0:	4798      	blx	r3
   808b2:	2800      	cmp	r0, #0
   808b4:	d0de      	beq.n	80874 <main+0x84>
			PIOC->PIO_CODR |= PIO_CODR_P13;
   808b6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   808b8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   808bc:	636b      	str	r3, [r5, #52]	; 0x34
   808be:	4b1c      	ldr	r3, [pc, #112]	; (80930 <main+0x140>)
			for(int i = 0; i < 1600000; i++){
   808c0:	3b01      	subs	r3, #1
   808c2:	d1fd      	bne.n	808c0 <main+0xd0>
			PIOC->PIO_SODR |= PIO_SODR_P13;
   808c4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   808c6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   808ca:	632b      	str	r3, [r5, #48]	; 0x30
   808cc:	e7d2      	b.n	80874 <main+0x84>
			printf("to_increment");
   808ce:	481c      	ldr	r0, [pc, #112]	; (80940 <main+0x150>)
   808d0:	4b0a      	ldr	r3, [pc, #40]	; (808fc <main+0x10c>)
   808d2:	4798      	blx	r3
   808d4:	4b1b      	ldr	r3, [pc, #108]	; (80944 <main+0x154>)
			//goal_counter();
			for(int j = 0; j < 5*1600000; j++){
   808d6:	3b01      	subs	r3, #1
   808d8:	d1fd      	bne.n	808d6 <main+0xe6>
		PIOA->PIO_SODR = PIO_SODR_P19; //Set Output Data Register, Set Output Data
   808da:	f44f 2600 	mov.w	r6, #524288	; 0x80000
   808de:	46b0      	mov	r8, r6
		move_solenoid();
   808e0:	4f19      	ldr	r7, [pc, #100]	; (80948 <main+0x158>)
   808e2:	e7cf      	b.n	80884 <main+0x94>
   808e4:	00080529 	.word	0x00080529
   808e8:	400e1a50 	.word	0x400e1a50
   808ec:	00080dd1 	.word	0x00080dd1
   808f0:	00290561 	.word	0x00290561
   808f4:	000802d9 	.word	0x000802d9
   808f8:	000818cc 	.word	0x000818cc
   808fc:	00080c15 	.word	0x00080c15
   80900:	00080c69 	.word	0x00080c69
   80904:	00080cad 	.word	0x00080cad
   80908:	00080d79 	.word	0x00080d79
   8090c:	00080161 	.word	0x00080161
   80910:	00080471 	.word	0x00080471
   80914:	00080675 	.word	0x00080675
   80918:	400e1200 	.word	0x400e1200
   8091c:	00080c39 	.word	0x00080c39
   80920:	400e0e00 	.word	0x400e0e00
   80924:	20000470 	.word	0x20000470
   80928:	000818d4 	.word	0x000818d4
   8092c:	20000472 	.word	0x20000472
   80930:	00186a00 	.word	0x00186a00
   80934:	00080701 	.word	0x00080701
   80938:	2000048c 	.word	0x2000048c
   8093c:	000807c9 	.word	0x000807c9
   80940:	000818e4 	.word	0x000818e4
   80944:	007a1200 	.word	0x007a1200
   80948:	000805cd 	.word	0x000805cd

0008094c <prints>:
   8094c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   80950:	460d      	mov	r5, r1
   80952:	1e16      	subs	r6, r2, #0
   80954:	dd48      	ble.n	809e8 <prints+0x9c>
   80956:	780a      	ldrb	r2, [r1, #0]
   80958:	2a00      	cmp	r2, #0
   8095a:	d035      	beq.n	809c8 <prints+0x7c>
   8095c:	460a      	mov	r2, r1
   8095e:	2400      	movs	r4, #0
   80960:	3401      	adds	r4, #1
   80962:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   80966:	2900      	cmp	r1, #0
   80968:	d1fa      	bne.n	80960 <prints+0x14>
   8096a:	42a6      	cmp	r6, r4
   8096c:	dc2d      	bgt.n	809ca <prints+0x7e>
   8096e:	2400      	movs	r4, #0
   80970:	f003 0202 	and.w	r2, r3, #2
   80974:	2a00      	cmp	r2, #0
   80976:	bf0c      	ite	eq
   80978:	f04f 0820 	moveq.w	r8, #32
   8097c:	f04f 0830 	movne.w	r8, #48	; 0x30
   80980:	f013 0301 	ands.w	r3, r3, #1
   80984:	d123      	bne.n	809ce <prints+0x82>
   80986:	2c00      	cmp	r4, #0
   80988:	dd28      	ble.n	809dc <prints+0x90>
   8098a:	4626      	mov	r6, r4
   8098c:	fa5f f988 	uxtb.w	r9, r8
   80990:	4f18      	ldr	r7, [pc, #96]	; (809f4 <prints+0xa8>)
   80992:	4648      	mov	r0, r9
   80994:	47b8      	blx	r7
   80996:	3e01      	subs	r6, #1
   80998:	d1fb      	bne.n	80992 <prints+0x46>
   8099a:	7828      	ldrb	r0, [r5, #0]
   8099c:	b188      	cbz	r0, 809c2 <prints+0x76>
   8099e:	4f15      	ldr	r7, [pc, #84]	; (809f4 <prints+0xa8>)
   809a0:	47b8      	blx	r7
   809a2:	3401      	adds	r4, #1
   809a4:	f815 0f01 	ldrb.w	r0, [r5, #1]!
   809a8:	2800      	cmp	r0, #0
   809aa:	d1f9      	bne.n	809a0 <prints+0x54>
   809ac:	2e00      	cmp	r6, #0
   809ae:	dd08      	ble.n	809c2 <prints+0x76>
   809b0:	4635      	mov	r5, r6
   809b2:	fa5f f888 	uxtb.w	r8, r8
   809b6:	4f0f      	ldr	r7, [pc, #60]	; (809f4 <prints+0xa8>)
   809b8:	4640      	mov	r0, r8
   809ba:	47b8      	blx	r7
   809bc:	3d01      	subs	r5, #1
   809be:	d1fb      	bne.n	809b8 <prints+0x6c>
   809c0:	4434      	add	r4, r6
   809c2:	4620      	mov	r0, r4
   809c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   809c8:	2400      	movs	r4, #0
   809ca:	1b34      	subs	r4, r6, r4
   809cc:	e7d0      	b.n	80970 <prints+0x24>
   809ce:	4626      	mov	r6, r4
   809d0:	7828      	ldrb	r0, [r5, #0]
   809d2:	b108      	cbz	r0, 809d8 <prints+0x8c>
   809d4:	2400      	movs	r4, #0
   809d6:	e7e2      	b.n	8099e <prints+0x52>
   809d8:	2400      	movs	r4, #0
   809da:	e7e7      	b.n	809ac <prints+0x60>
   809dc:	4626      	mov	r6, r4
   809de:	461c      	mov	r4, r3
   809e0:	e7db      	b.n	8099a <prints+0x4e>
   809e2:	f04f 0820 	mov.w	r8, #32
   809e6:	e7d8      	b.n	8099a <prints+0x4e>
   809e8:	f013 0401 	ands.w	r4, r3, #1
   809ec:	d0f9      	beq.n	809e2 <prints+0x96>
   809ee:	f04f 0820 	mov.w	r8, #32
   809f2:	e7ed      	b.n	809d0 <prints+0x84>
   809f4:	00080e39 	.word	0x00080e39

000809f8 <printi>:
   809f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   809fa:	b085      	sub	sp, #20
   809fc:	4607      	mov	r7, r0
   809fe:	b381      	cbz	r1, 80a62 <printi+0x6a>
   80a00:	460c      	mov	r4, r1
   80a02:	b10b      	cbz	r3, 80a08 <printi+0x10>
   80a04:	2a0a      	cmp	r2, #10
   80a06:	d038      	beq.n	80a7a <printi+0x82>
   80a08:	2300      	movs	r3, #0
   80a0a:	f88d 300f 	strb.w	r3, [sp, #15]
   80a0e:	2600      	movs	r6, #0
   80a10:	2900      	cmp	r1, #0
   80a12:	d046      	beq.n	80aa2 <printi+0xaa>
   80a14:	f10d 050f 	add.w	r5, sp, #15
   80a18:	990c      	ldr	r1, [sp, #48]	; 0x30
   80a1a:	393a      	subs	r1, #58	; 0x3a
   80a1c:	fbb4 f3f2 	udiv	r3, r4, r2
   80a20:	fb02 4313 	mls	r3, r2, r3, r4
   80a24:	2b09      	cmp	r3, #9
   80a26:	bfc8      	it	gt
   80a28:	185b      	addgt	r3, r3, r1
   80a2a:	3330      	adds	r3, #48	; 0x30
   80a2c:	f805 3d01 	strb.w	r3, [r5, #-1]!
   80a30:	fbb4 f4f2 	udiv	r4, r4, r2
   80a34:	2c00      	cmp	r4, #0
   80a36:	d1f1      	bne.n	80a1c <printi+0x24>
   80a38:	b156      	cbz	r6, 80a50 <printi+0x58>
   80a3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   80a3c:	b11b      	cbz	r3, 80a46 <printi+0x4e>
   80a3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80a40:	f013 0f02 	tst.w	r3, #2
   80a44:	d125      	bne.n	80a92 <printi+0x9a>
   80a46:	232d      	movs	r3, #45	; 0x2d
   80a48:	f805 3c01 	strb.w	r3, [r5, #-1]
   80a4c:	3d01      	subs	r5, #1
   80a4e:	2600      	movs	r6, #0
   80a50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80a52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   80a54:	4629      	mov	r1, r5
   80a56:	4638      	mov	r0, r7
   80a58:	4c14      	ldr	r4, [pc, #80]	; (80aac <printi+0xb4>)
   80a5a:	47a0      	blx	r4
   80a5c:	4430      	add	r0, r6
   80a5e:	b005      	add	sp, #20
   80a60:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80a62:	2330      	movs	r3, #48	; 0x30
   80a64:	f88d 3004 	strb.w	r3, [sp, #4]
   80a68:	2300      	movs	r3, #0
   80a6a:	f88d 3005 	strb.w	r3, [sp, #5]
   80a6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80a70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   80a72:	a901      	add	r1, sp, #4
   80a74:	4c0d      	ldr	r4, [pc, #52]	; (80aac <printi+0xb4>)
   80a76:	47a0      	blx	r4
   80a78:	e7f1      	b.n	80a5e <printi+0x66>
   80a7a:	2900      	cmp	r1, #0
   80a7c:	dac4      	bge.n	80a08 <printi+0x10>
   80a7e:	424c      	negs	r4, r1
   80a80:	2300      	movs	r3, #0
   80a82:	f88d 300f 	strb.w	r3, [sp, #15]
   80a86:	f10d 050f 	add.w	r5, sp, #15
   80a8a:	2c00      	cmp	r4, #0
   80a8c:	d0d5      	beq.n	80a3a <printi+0x42>
   80a8e:	2601      	movs	r6, #1
   80a90:	e7c0      	b.n	80a14 <printi+0x1c>
   80a92:	202d      	movs	r0, #45	; 0x2d
   80a94:	4b06      	ldr	r3, [pc, #24]	; (80ab0 <printi+0xb8>)
   80a96:	4798      	blx	r3
   80a98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   80a9a:	3b01      	subs	r3, #1
   80a9c:	930a      	str	r3, [sp, #40]	; 0x28
   80a9e:	2601      	movs	r6, #1
   80aa0:	e7d6      	b.n	80a50 <printi+0x58>
   80aa2:	461e      	mov	r6, r3
   80aa4:	f10d 050f 	add.w	r5, sp, #15
   80aa8:	e7d2      	b.n	80a50 <printi+0x58>
   80aaa:	bf00      	nop
   80aac:	0008094d 	.word	0x0008094d
   80ab0:	00080e39 	.word	0x00080e39

00080ab4 <print>:
   80ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80ab8:	b087      	sub	sp, #28
   80aba:	4680      	mov	r8, r0
   80abc:	780b      	ldrb	r3, [r1, #0]
   80abe:	2b00      	cmp	r3, #0
   80ac0:	f000 8094 	beq.w	80bec <print+0x138>
   80ac4:	468b      	mov	fp, r1
   80ac6:	4617      	mov	r7, r2
   80ac8:	2500      	movs	r5, #0
   80aca:	4e4e      	ldr	r6, [pc, #312]	; (80c04 <print+0x150>)
   80acc:	f8df a13c 	ldr.w	sl, [pc, #316]	; 80c0c <print+0x158>
   80ad0:	f8df 913c 	ldr.w	r9, [pc, #316]	; 80c10 <print+0x15c>
   80ad4:	e046      	b.n	80b64 <print+0xb0>
   80ad6:	2200      	movs	r2, #0
   80ad8:	e070      	b.n	80bbc <print+0x108>
   80ada:	6839      	ldr	r1, [r7, #0]
   80adc:	3704      	adds	r7, #4
   80ade:	484a      	ldr	r0, [pc, #296]	; (80c08 <print+0x154>)
   80ae0:	2900      	cmp	r1, #0
   80ae2:	bf08      	it	eq
   80ae4:	4601      	moveq	r1, r0
   80ae6:	4640      	mov	r0, r8
   80ae8:	47d0      	blx	sl
   80aea:	4405      	add	r5, r0
   80aec:	e035      	b.n	80b5a <print+0xa6>
   80aee:	6839      	ldr	r1, [r7, #0]
   80af0:	3704      	adds	r7, #4
   80af2:	2061      	movs	r0, #97	; 0x61
   80af4:	9002      	str	r0, [sp, #8]
   80af6:	9301      	str	r3, [sp, #4]
   80af8:	9200      	str	r2, [sp, #0]
   80afa:	2301      	movs	r3, #1
   80afc:	220a      	movs	r2, #10
   80afe:	4640      	mov	r0, r8
   80b00:	47c8      	blx	r9
   80b02:	4405      	add	r5, r0
   80b04:	e029      	b.n	80b5a <print+0xa6>
   80b06:	6839      	ldr	r1, [r7, #0]
   80b08:	3704      	adds	r7, #4
   80b0a:	2061      	movs	r0, #97	; 0x61
   80b0c:	9002      	str	r0, [sp, #8]
   80b0e:	9301      	str	r3, [sp, #4]
   80b10:	9200      	str	r2, [sp, #0]
   80b12:	2300      	movs	r3, #0
   80b14:	2210      	movs	r2, #16
   80b16:	4640      	mov	r0, r8
   80b18:	47c8      	blx	r9
   80b1a:	4405      	add	r5, r0
   80b1c:	e01d      	b.n	80b5a <print+0xa6>
   80b1e:	6839      	ldr	r1, [r7, #0]
   80b20:	3704      	adds	r7, #4
   80b22:	2041      	movs	r0, #65	; 0x41
   80b24:	9002      	str	r0, [sp, #8]
   80b26:	9301      	str	r3, [sp, #4]
   80b28:	9200      	str	r2, [sp, #0]
   80b2a:	2300      	movs	r3, #0
   80b2c:	2210      	movs	r2, #16
   80b2e:	4640      	mov	r0, r8
   80b30:	47c8      	blx	r9
   80b32:	4405      	add	r5, r0
   80b34:	e011      	b.n	80b5a <print+0xa6>
   80b36:	6839      	ldr	r1, [r7, #0]
   80b38:	3704      	adds	r7, #4
   80b3a:	2061      	movs	r0, #97	; 0x61
   80b3c:	9002      	str	r0, [sp, #8]
   80b3e:	9301      	str	r3, [sp, #4]
   80b40:	9200      	str	r2, [sp, #0]
   80b42:	2300      	movs	r3, #0
   80b44:	220a      	movs	r2, #10
   80b46:	4640      	mov	r0, r8
   80b48:	47c8      	blx	r9
   80b4a:	4405      	add	r5, r0
   80b4c:	e005      	b.n	80b5a <print+0xa6>
   80b4e:	46a3      	mov	fp, r4
   80b50:	f89b 0000 	ldrb.w	r0, [fp]
   80b54:	47b0      	blx	r6
   80b56:	3501      	adds	r5, #1
   80b58:	465c      	mov	r4, fp
   80b5a:	f104 0b01 	add.w	fp, r4, #1
   80b5e:	7863      	ldrb	r3, [r4, #1]
   80b60:	2b00      	cmp	r3, #0
   80b62:	d044      	beq.n	80bee <print+0x13a>
   80b64:	2b25      	cmp	r3, #37	; 0x25
   80b66:	d1f3      	bne.n	80b50 <print+0x9c>
   80b68:	f10b 0401 	add.w	r4, fp, #1
   80b6c:	f89b 3001 	ldrb.w	r3, [fp, #1]
   80b70:	2b00      	cmp	r3, #0
   80b72:	d03c      	beq.n	80bee <print+0x13a>
   80b74:	2b25      	cmp	r3, #37	; 0x25
   80b76:	d0ea      	beq.n	80b4e <print+0x9a>
   80b78:	2b2d      	cmp	r3, #45	; 0x2d
   80b7a:	bf06      	itte	eq
   80b7c:	f10b 0402 	addeq.w	r4, fp, #2
   80b80:	2301      	moveq	r3, #1
   80b82:	2300      	movne	r3, #0
   80b84:	7822      	ldrb	r2, [r4, #0]
   80b86:	2a30      	cmp	r2, #48	; 0x30
   80b88:	d105      	bne.n	80b96 <print+0xe2>
   80b8a:	f043 0302 	orr.w	r3, r3, #2
   80b8e:	f814 2f01 	ldrb.w	r2, [r4, #1]!
   80b92:	2a30      	cmp	r2, #48	; 0x30
   80b94:	d0f9      	beq.n	80b8a <print+0xd6>
   80b96:	7821      	ldrb	r1, [r4, #0]
   80b98:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   80b9c:	b2d2      	uxtb	r2, r2
   80b9e:	2a09      	cmp	r2, #9
   80ba0:	d899      	bhi.n	80ad6 <print+0x22>
   80ba2:	2200      	movs	r2, #0
   80ba4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   80ba8:	3930      	subs	r1, #48	; 0x30
   80baa:	eb01 0242 	add.w	r2, r1, r2, lsl #1
   80bae:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   80bb2:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
   80bb6:	b2c0      	uxtb	r0, r0
   80bb8:	2809      	cmp	r0, #9
   80bba:	d9f3      	bls.n	80ba4 <print+0xf0>
   80bbc:	2973      	cmp	r1, #115	; 0x73
   80bbe:	d08c      	beq.n	80ada <print+0x26>
   80bc0:	2964      	cmp	r1, #100	; 0x64
   80bc2:	d094      	beq.n	80aee <print+0x3a>
   80bc4:	2978      	cmp	r1, #120	; 0x78
   80bc6:	d09e      	beq.n	80b06 <print+0x52>
   80bc8:	2958      	cmp	r1, #88	; 0x58
   80bca:	d0a8      	beq.n	80b1e <print+0x6a>
   80bcc:	2975      	cmp	r1, #117	; 0x75
   80bce:	d0b2      	beq.n	80b36 <print+0x82>
   80bd0:	2963      	cmp	r1, #99	; 0x63
   80bd2:	d1c2      	bne.n	80b5a <print+0xa6>
   80bd4:	6839      	ldr	r1, [r7, #0]
   80bd6:	3704      	adds	r7, #4
   80bd8:	f88d 1014 	strb.w	r1, [sp, #20]
   80bdc:	2100      	movs	r1, #0
   80bde:	f88d 1015 	strb.w	r1, [sp, #21]
   80be2:	a905      	add	r1, sp, #20
   80be4:	4640      	mov	r0, r8
   80be6:	47d0      	blx	sl
   80be8:	4405      	add	r5, r0
   80bea:	e7b6      	b.n	80b5a <print+0xa6>
   80bec:	2500      	movs	r5, #0
   80bee:	f1b8 0f00 	cmp.w	r8, #0
   80bf2:	d003      	beq.n	80bfc <print+0x148>
   80bf4:	f8d8 3000 	ldr.w	r3, [r8]
   80bf8:	2200      	movs	r2, #0
   80bfa:	701a      	strb	r2, [r3, #0]
   80bfc:	4628      	mov	r0, r5
   80bfe:	b007      	add	sp, #28
   80c00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80c04:	00080e39 	.word	0x00080e39
   80c08:	000818f4 	.word	0x000818f4
   80c0c:	0008094d 	.word	0x0008094d
   80c10:	000809f9 	.word	0x000809f9

00080c14 <printf>:
   80c14:	b40f      	push	{r0, r1, r2, r3}
   80c16:	b500      	push	{lr}
   80c18:	b083      	sub	sp, #12
   80c1a:	aa04      	add	r2, sp, #16
   80c1c:	f852 1b04 	ldr.w	r1, [r2], #4
   80c20:	9201      	str	r2, [sp, #4]
   80c22:	2000      	movs	r0, #0
   80c24:	4b03      	ldr	r3, [pc, #12]	; (80c34 <printf+0x20>)
   80c26:	4798      	blx	r3
   80c28:	b003      	add	sp, #12
   80c2a:	f85d eb04 	ldr.w	lr, [sp], #4
   80c2e:	b004      	add	sp, #16
   80c30:	4770      	bx	lr
   80c32:	bf00      	nop
   80c34:	00080ab5 	.word	0x00080ab5

00080c38 <SysTick_init>:

static uint32_t milliseconds;
//SysTick_Type* SysTick = SysTick_BASE;

void SysTick_init(){
    SysTick->CTRL = 0b011;
   80c38:	4b03      	ldr	r3, [pc, #12]	; (80c48 <SysTick_init+0x10>)
   80c3a:	2203      	movs	r2, #3
   80c3c:	601a      	str	r2, [r3, #0]
    SysTick->LOAD = 0x2904;
   80c3e:	f642 1204 	movw	r2, #10500	; 0x2904
   80c42:	605a      	str	r2, [r3, #4]
   80c44:	4770      	bx	lr
   80c46:	bf00      	nop
   80c48:	e000e010 	.word	0xe000e010

00080c4c <SysTick_Handler>:
}

void SysTick_Handler       ( void ){
    milliseconds++;
   80c4c:	4a02      	ldr	r2, [pc, #8]	; (80c58 <SysTick_Handler+0xc>)
   80c4e:	6813      	ldr	r3, [r2, #0]
   80c50:	3301      	adds	r3, #1
   80c52:	6013      	str	r3, [r2, #0]
   80c54:	4770      	bx	lr
   80c56:	bf00      	nop
   80c58:	20000474 	.word	0x20000474

00080c5c <return_milliseconds>:
}

uint32_t return_milliseconds(){
	return milliseconds;
}
   80c5c:	4b01      	ldr	r3, [pc, #4]	; (80c64 <return_milliseconds+0x8>)
   80c5e:	6818      	ldr	r0, [r3, #0]
   80c60:	4770      	bx	lr
   80c62:	bf00      	nop
   80c64:	20000474 	.word	0x20000474

00080c68 <timer_init>:
#define DEBUG_INTERRUPT 1

void timer_init(){
	
	
	PMC->PMC_PCER0 |= PMC_PCER0_PID27; //enable timer counter channel 0
   80c68:	4a0d      	ldr	r2, [pc, #52]	; (80ca0 <timer_init+0x38>)
   80c6a:	6913      	ldr	r3, [r2, #16]
   80c6c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
   80c70:	6113      	str	r3, [r2, #16]
	
	
	PIOB->PIO_PDR |= PIO_PDR_P25; //disable io on pinb 25
   80c72:	4b0c      	ldr	r3, [pc, #48]	; (80ca4 <timer_init+0x3c>)
   80c74:	685a      	ldr	r2, [r3, #4]
   80c76:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   80c7a:	605a      	str	r2, [r3, #4]
	PIOB->PIO_ABSR |= PIO_ABSR_P25; //PIO set peripheral b on pinb 25*/
   80c7c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80c7e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   80c82:	671a      	str	r2, [r3, #112]	; 0x70
	
	tc->TC_CHANNEL[0].TC_CMR = 0x0009C000;
   80c84:	f5a3 23c2 	sub.w	r3, r3, #397312	; 0x61000
   80c88:	f44f 221c 	mov.w	r2, #638976	; 0x9c000
   80c8c:	605a      	str	r2, [r3, #4]
	tc->TC_CHANNEL[0].TC_RC = 0x000CD140;
   80c8e:	4a06      	ldr	r2, [pc, #24]	; (80ca8 <timer_init+0x40>)
   80c90:	61da      	str	r2, [r3, #28]
	
	//tc->TC_CHANNEL[0].TC_IER |= TC_IER_CPCS; // enable interrupt on compare with RC
	
	tc->TC_CHANNEL[0].TC_CCR = 0x00000001; //enables the clock
   80c92:	2201      	movs	r2, #1
   80c94:	601a      	str	r2, [r3, #0]
	tc->TC_CHANNEL[0].TC_CCR |= 0x1 << 2;
   80c96:	681a      	ldr	r2, [r3, #0]
   80c98:	f042 0204 	orr.w	r2, r2, #4
   80c9c:	601a      	str	r2, [r3, #0]
   80c9e:	4770      	bx	lr
   80ca0:	400e0600 	.word	0x400e0600
   80ca4:	400e1000 	.word	0x400e1000
   80ca8:	000cd140 	.word	0x000cd140

00080cac <timer_change_duty>:
	}
	if(dutyCycle > 100){
		dutyCycle = 100;
	}
	
	tc->TC_CHANNEL[0].TC_RA = 0x000CD140 - (0xA410 + 0x1A4*dutyCycle); // TC_RA - (min_value + dutyCycle*1prosentOfDifference)
   80cac:	2864      	cmp	r0, #100	; 0x64
   80cae:	bf28      	it	cs
   80cb0:	2064      	movcs	r0, #100	; 0x64
   80cb2:	4b05      	ldr	r3, [pc, #20]	; (80cc8 <timer_change_duty+0x1c>)
   80cb4:	fb03 f000 	mul.w	r0, r3, r0
   80cb8:	f500 2042 	add.w	r0, r0, #794624	; 0xc2000
   80cbc:	f500 6053 	add.w	r0, r0, #3376	; 0xd30
   80cc0:	4b02      	ldr	r3, [pc, #8]	; (80ccc <timer_change_duty+0x20>)
   80cc2:	6158      	str	r0, [r3, #20]
   80cc4:	4770      	bx	lr
   80cc6:	bf00      	nop
   80cc8:	fffffe5c 	.word	0xfffffe5c
   80ccc:	40080000 	.word	0x40080000

00080cd0 <TC1_Handler>:
double kp = 20;
double ki = 15;
double sum_error = 0;
double T_periode = 0.02;

void TC1_Handler( void ){
   80cd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	
	error = joystick.left_val - y_value_pi;
   80cd4:	4b1d      	ldr	r3, [pc, #116]	; (80d4c <TC1_Handler+0x7c>)
   80cd6:	f993 0003 	ldrsb.w	r0, [r3, #3]
   80cda:	4b1d      	ldr	r3, [pc, #116]	; (80d50 <TC1_Handler+0x80>)
   80cdc:	781b      	ldrb	r3, [r3, #0]
   80cde:	1ac0      	subs	r0, r0, r3
   80ce0:	4b1c      	ldr	r3, [pc, #112]	; (80d54 <TC1_Handler+0x84>)
   80ce2:	4798      	blx	r3
   80ce4:	4606      	mov	r6, r0
   80ce6:	460f      	mov	r7, r1
   80ce8:	4c1b      	ldr	r4, [pc, #108]	; (80d58 <TC1_Handler+0x88>)
   80cea:	e9c4 6700 	strd	r6, r7, [r4]
	sum_error += error;
   80cee:	f8df b080 	ldr.w	fp, [pc, #128]	; 80d70 <TC1_Handler+0xa0>
   80cf2:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   80cf6:	47d8      	blx	fp
   80cf8:	4680      	mov	r8, r0
   80cfa:	4689      	mov	r9, r1
   80cfc:	e9c4 8902 	strd	r8, r9, [r4, #8]
	paadrag = kp*error+T_periode*ki*sum_error;
   80d00:	f8df a070 	ldr.w	sl, [pc, #112]	; 80d74 <TC1_Handler+0xa4>
   80d04:	4d15      	ldr	r5, [pc, #84]	; (80d5c <TC1_Handler+0x8c>)
   80d06:	e9da 2302 	ldrd	r2, r3, [sl, #8]
   80d0a:	e9da 0100 	ldrd	r0, r1, [sl]
   80d0e:	47a8      	blx	r5
   80d10:	4642      	mov	r2, r8
   80d12:	464b      	mov	r3, r9
   80d14:	47a8      	blx	r5
   80d16:	4680      	mov	r8, r0
   80d18:	4689      	mov	r9, r1
   80d1a:	e9da 2304 	ldrd	r2, r3, [sl, #16]
   80d1e:	4630      	mov	r0, r6
   80d20:	4639      	mov	r1, r7
   80d22:	47a8      	blx	r5
   80d24:	4602      	mov	r2, r0
   80d26:	460b      	mov	r3, r1
   80d28:	4640      	mov	r0, r8
   80d2a:	4649      	mov	r1, r9
   80d2c:	47d8      	blx	fp
   80d2e:	4b0c      	ldr	r3, [pc, #48]	; (80d60 <TC1_Handler+0x90>)
   80d30:	4798      	blx	r3
   80d32:	6120      	str	r0, [r4, #16]
	change_motor_speed_using_paadrag(paadrag);
   80d34:	4b0b      	ldr	r3, [pc, #44]	; (80d64 <TC1_Handler+0x94>)
   80d36:	4798      	blx	r3
	//printf("x: %d \n\r",paadrag);
	int a = tc->TC_CHANNEL[1].TC_SR;
   80d38:	4b0b      	ldr	r3, [pc, #44]	; (80d68 <TC1_Handler+0x98>)
   80d3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   80d3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80d40:	4b0a      	ldr	r3, [pc, #40]	; (80d6c <TC1_Handler+0x9c>)
   80d42:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   80d46:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80d4a:	bf00      	nop
   80d4c:	2000048c 	.word	0x2000048c
   80d50:	20000473 	.word	0x20000473
   80d54:	00081169 	.word	0x00081169
   80d58:	20000478 	.word	0x20000478
   80d5c:	00081235 	.word	0x00081235
   80d60:	00081659 	.word	0x00081659
   80d64:	00080651 	.word	0x00080651
   80d68:	40080000 	.word	0x40080000
   80d6c:	e000e100 	.word	0xe000e100
   80d70:	00080ed1 	.word	0x00080ed1
   80d74:	20000008 	.word	0x20000008

00080d78 <init_ch1_PI>:
}

void init_ch1_PI(){
	
	
	PMC->PMC_PCER0 |= PMC_PCER0_PID28; //enable timer counter channel 0
   80d78:	4a11      	ldr	r2, [pc, #68]	; (80dc0 <init_ch1_PI+0x48>)
   80d7a:	6913      	ldr	r3, [r2, #16]
   80d7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   80d80:	6113      	str	r3, [r2, #16]
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   80d82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80d86:	4b0f      	ldr	r3, [pc, #60]	; (80dc4 <init_ch1_PI+0x4c>)
   80d88:	601a      	str	r2, [r3, #0]
	
	NVIC_EnableIRQ(ID_TC1);
	
	PIOB->PIO_PDR |= PIO_PDR_P0; //disable io on pinb 0
   80d8a:	4b0f      	ldr	r3, [pc, #60]	; (80dc8 <init_ch1_PI+0x50>)
   80d8c:	685a      	ldr	r2, [r3, #4]
   80d8e:	f042 0201 	orr.w	r2, r2, #1
   80d92:	605a      	str	r2, [r3, #4]
	PIOB->PIO_ABSR |= PIO_ABSR_P0; //PIO set peripheral b on pinb 0*/
   80d94:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80d96:	f042 0201 	orr.w	r2, r2, #1
   80d9a:	671a      	str	r2, [r3, #112]	; 0x70
	
	tc->TC_CHANNEL[1].TC_CMR = 0x0009C000;
   80d9c:	f5a3 23c2 	sub.w	r3, r3, #397312	; 0x61000
   80da0:	f44f 221c 	mov.w	r2, #638976	; 0x9c000
   80da4:	645a      	str	r2, [r3, #68]	; 0x44
	tc->TC_CHANNEL[1].TC_RC = 0x000CD140;
   80da6:	4a09      	ldr	r2, [pc, #36]	; (80dcc <init_ch1_PI+0x54>)
   80da8:	65da      	str	r2, [r3, #92]	; 0x5c
	
	tc->TC_CHANNEL[1].TC_IER |= TC_IER_CPCS; // enable interrupt on compare with RC
   80daa:	6e5a      	ldr	r2, [r3, #100]	; 0x64
   80dac:	f042 0210 	orr.w	r2, r2, #16
   80db0:	665a      	str	r2, [r3, #100]	; 0x64
	
	tc->TC_CHANNEL[1].TC_CCR = 0x00000001; //enables the clock
   80db2:	2201      	movs	r2, #1
   80db4:	641a      	str	r2, [r3, #64]	; 0x40
	tc->TC_CHANNEL[1].TC_CCR |= 0x1 << 2;
   80db6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   80db8:	f042 0204 	orr.w	r2, r2, #4
   80dbc:	641a      	str	r2, [r3, #64]	; 0x40
   80dbe:	4770      	bx	lr
   80dc0:	400e0600 	.word	0x400e0600
   80dc4:	e000e100 	.word	0xe000e100
   80dc8:	400e1000 	.word	0x400e1000
   80dcc:	000cd140 	.word	0x000cd140

00080dd0 <configure_uart>:
   80dd0:	4b16      	ldr	r3, [pc, #88]	; (80e2c <configure_uart+0x5c>)
   80dd2:	2200      	movs	r2, #0
   80dd4:	701a      	strb	r2, [r3, #0]
   80dd6:	705a      	strb	r2, [r3, #1]
   80dd8:	4b15      	ldr	r3, [pc, #84]	; (80e30 <configure_uart+0x60>)
   80dda:	f44f 7140 	mov.w	r1, #768	; 0x300
   80dde:	6459      	str	r1, [r3, #68]	; 0x44
   80de0:	6059      	str	r1, [r3, #4]
   80de2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80de4:	6f18      	ldr	r0, [r3, #112]	; 0x70
   80de6:	4002      	ands	r2, r0
   80de8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   80dec:	671a      	str	r2, [r3, #112]	; 0x70
   80dee:	6659      	str	r1, [r3, #100]	; 0x64
   80df0:	f44f 7280 	mov.w	r2, #256	; 0x100
   80df4:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   80df8:	611a      	str	r2, [r3, #16]
   80dfa:	f503 7300 	add.w	r3, r3, #512	; 0x200
   80dfe:	21ac      	movs	r1, #172	; 0xac
   80e00:	6019      	str	r1, [r3, #0]
   80e02:	f240 2123 	movw	r1, #547	; 0x223
   80e06:	6219      	str	r1, [r3, #32]
   80e08:	f44f 6100 	mov.w	r1, #2048	; 0x800
   80e0c:	6059      	str	r1, [r3, #4]
   80e0e:	f240 2102 	movw	r1, #514	; 0x202
   80e12:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   80e16:	f04f 31ff 	mov.w	r1, #4294967295
   80e1a:	60d9      	str	r1, [r3, #12]
   80e1c:	21e1      	movs	r1, #225	; 0xe1
   80e1e:	6099      	str	r1, [r3, #8]
   80e20:	4904      	ldr	r1, [pc, #16]	; (80e34 <configure_uart+0x64>)
   80e22:	600a      	str	r2, [r1, #0]
   80e24:	2250      	movs	r2, #80	; 0x50
   80e26:	601a      	str	r2, [r3, #0]
   80e28:	4770      	bx	lr
   80e2a:	bf00      	nop
   80e2c:	20000494 	.word	0x20000494
   80e30:	400e0e00 	.word	0x400e0e00
   80e34:	e000e100 	.word	0xe000e100

00080e38 <uart_putchar>:
   80e38:	4b07      	ldr	r3, [pc, #28]	; (80e58 <uart_putchar+0x20>)
   80e3a:	695b      	ldr	r3, [r3, #20]
   80e3c:	f013 0f02 	tst.w	r3, #2
   80e40:	d008      	beq.n	80e54 <uart_putchar+0x1c>
   80e42:	4b05      	ldr	r3, [pc, #20]	; (80e58 <uart_putchar+0x20>)
   80e44:	61d8      	str	r0, [r3, #28]
   80e46:	461a      	mov	r2, r3
   80e48:	6953      	ldr	r3, [r2, #20]
   80e4a:	f413 7f00 	tst.w	r3, #512	; 0x200
   80e4e:	d0fb      	beq.n	80e48 <uart_putchar+0x10>
   80e50:	2000      	movs	r0, #0
   80e52:	4770      	bx	lr
   80e54:	2001      	movs	r0, #1
   80e56:	4770      	bx	lr
   80e58:	400e0800 	.word	0x400e0800

00080e5c <UART_Handler>:
   80e5c:	b508      	push	{r3, lr}
   80e5e:	4b15      	ldr	r3, [pc, #84]	; (80eb4 <UART_Handler+0x58>)
   80e60:	695b      	ldr	r3, [r3, #20]
   80e62:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   80e66:	d003      	beq.n	80e70 <UART_Handler+0x14>
   80e68:	f44f 71a8 	mov.w	r1, #336	; 0x150
   80e6c:	4a11      	ldr	r2, [pc, #68]	; (80eb4 <UART_Handler+0x58>)
   80e6e:	6011      	str	r1, [r2, #0]
   80e70:	f013 0f01 	tst.w	r3, #1
   80e74:	d012      	beq.n	80e9c <UART_Handler+0x40>
   80e76:	4810      	ldr	r0, [pc, #64]	; (80eb8 <UART_Handler+0x5c>)
   80e78:	7842      	ldrb	r2, [r0, #1]
   80e7a:	1c53      	adds	r3, r2, #1
   80e7c:	4259      	negs	r1, r3
   80e7e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   80e82:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   80e86:	bf58      	it	pl
   80e88:	424b      	negpl	r3, r1
   80e8a:	7801      	ldrb	r1, [r0, #0]
   80e8c:	428b      	cmp	r3, r1
   80e8e:	d006      	beq.n	80e9e <UART_Handler+0x42>
   80e90:	4908      	ldr	r1, [pc, #32]	; (80eb4 <UART_Handler+0x58>)
   80e92:	6988      	ldr	r0, [r1, #24]
   80e94:	4908      	ldr	r1, [pc, #32]	; (80eb8 <UART_Handler+0x5c>)
   80e96:	440a      	add	r2, r1
   80e98:	7090      	strb	r0, [r2, #2]
   80e9a:	704b      	strb	r3, [r1, #1]
   80e9c:	bd08      	pop	{r3, pc}
   80e9e:	4807      	ldr	r0, [pc, #28]	; (80ebc <UART_Handler+0x60>)
   80ea0:	4b07      	ldr	r3, [pc, #28]	; (80ec0 <UART_Handler+0x64>)
   80ea2:	4798      	blx	r3
   80ea4:	4b03      	ldr	r3, [pc, #12]	; (80eb4 <UART_Handler+0x58>)
   80ea6:	699a      	ldr	r2, [r3, #24]
   80ea8:	4b03      	ldr	r3, [pc, #12]	; (80eb8 <UART_Handler+0x5c>)
   80eaa:	7859      	ldrb	r1, [r3, #1]
   80eac:	440b      	add	r3, r1
   80eae:	709a      	strb	r2, [r3, #2]
   80eb0:	bd08      	pop	{r3, pc}
   80eb2:	bf00      	nop
   80eb4:	400e0800 	.word	0x400e0800
   80eb8:	20000494 	.word	0x20000494
   80ebc:	000818fc 	.word	0x000818fc
   80ec0:	00080c15 	.word	0x00080c15

00080ec4 <__aeabi_drsub>:
   80ec4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   80ec8:	e002      	b.n	80ed0 <__adddf3>
   80eca:	bf00      	nop

00080ecc <__aeabi_dsub>:
   80ecc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00080ed0 <__adddf3>:
   80ed0:	b530      	push	{r4, r5, lr}
   80ed2:	ea4f 0441 	mov.w	r4, r1, lsl #1
   80ed6:	ea4f 0543 	mov.w	r5, r3, lsl #1
   80eda:	ea94 0f05 	teq	r4, r5
   80ede:	bf08      	it	eq
   80ee0:	ea90 0f02 	teqeq	r0, r2
   80ee4:	bf1f      	itttt	ne
   80ee6:	ea54 0c00 	orrsne.w	ip, r4, r0
   80eea:	ea55 0c02 	orrsne.w	ip, r5, r2
   80eee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   80ef2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   80ef6:	f000 80e2 	beq.w	810be <__adddf3+0x1ee>
   80efa:	ea4f 5454 	mov.w	r4, r4, lsr #21
   80efe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   80f02:	bfb8      	it	lt
   80f04:	426d      	neglt	r5, r5
   80f06:	dd0c      	ble.n	80f22 <__adddf3+0x52>
   80f08:	442c      	add	r4, r5
   80f0a:	ea80 0202 	eor.w	r2, r0, r2
   80f0e:	ea81 0303 	eor.w	r3, r1, r3
   80f12:	ea82 0000 	eor.w	r0, r2, r0
   80f16:	ea83 0101 	eor.w	r1, r3, r1
   80f1a:	ea80 0202 	eor.w	r2, r0, r2
   80f1e:	ea81 0303 	eor.w	r3, r1, r3
   80f22:	2d36      	cmp	r5, #54	; 0x36
   80f24:	bf88      	it	hi
   80f26:	bd30      	pophi	{r4, r5, pc}
   80f28:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   80f2c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   80f30:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   80f34:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   80f38:	d002      	beq.n	80f40 <__adddf3+0x70>
   80f3a:	4240      	negs	r0, r0
   80f3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   80f40:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   80f44:	ea4f 3303 	mov.w	r3, r3, lsl #12
   80f48:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   80f4c:	d002      	beq.n	80f54 <__adddf3+0x84>
   80f4e:	4252      	negs	r2, r2
   80f50:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   80f54:	ea94 0f05 	teq	r4, r5
   80f58:	f000 80a7 	beq.w	810aa <__adddf3+0x1da>
   80f5c:	f1a4 0401 	sub.w	r4, r4, #1
   80f60:	f1d5 0e20 	rsbs	lr, r5, #32
   80f64:	db0d      	blt.n	80f82 <__adddf3+0xb2>
   80f66:	fa02 fc0e 	lsl.w	ip, r2, lr
   80f6a:	fa22 f205 	lsr.w	r2, r2, r5
   80f6e:	1880      	adds	r0, r0, r2
   80f70:	f141 0100 	adc.w	r1, r1, #0
   80f74:	fa03 f20e 	lsl.w	r2, r3, lr
   80f78:	1880      	adds	r0, r0, r2
   80f7a:	fa43 f305 	asr.w	r3, r3, r5
   80f7e:	4159      	adcs	r1, r3
   80f80:	e00e      	b.n	80fa0 <__adddf3+0xd0>
   80f82:	f1a5 0520 	sub.w	r5, r5, #32
   80f86:	f10e 0e20 	add.w	lr, lr, #32
   80f8a:	2a01      	cmp	r2, #1
   80f8c:	fa03 fc0e 	lsl.w	ip, r3, lr
   80f90:	bf28      	it	cs
   80f92:	f04c 0c02 	orrcs.w	ip, ip, #2
   80f96:	fa43 f305 	asr.w	r3, r3, r5
   80f9a:	18c0      	adds	r0, r0, r3
   80f9c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   80fa0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   80fa4:	d507      	bpl.n	80fb6 <__adddf3+0xe6>
   80fa6:	f04f 0e00 	mov.w	lr, #0
   80faa:	f1dc 0c00 	rsbs	ip, ip, #0
   80fae:	eb7e 0000 	sbcs.w	r0, lr, r0
   80fb2:	eb6e 0101 	sbc.w	r1, lr, r1
   80fb6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   80fba:	d31b      	bcc.n	80ff4 <__adddf3+0x124>
   80fbc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   80fc0:	d30c      	bcc.n	80fdc <__adddf3+0x10c>
   80fc2:	0849      	lsrs	r1, r1, #1
   80fc4:	ea5f 0030 	movs.w	r0, r0, rrx
   80fc8:	ea4f 0c3c 	mov.w	ip, ip, rrx
   80fcc:	f104 0401 	add.w	r4, r4, #1
   80fd0:	ea4f 5244 	mov.w	r2, r4, lsl #21
   80fd4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   80fd8:	f080 809a 	bcs.w	81110 <__adddf3+0x240>
   80fdc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   80fe0:	bf08      	it	eq
   80fe2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   80fe6:	f150 0000 	adcs.w	r0, r0, #0
   80fea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   80fee:	ea41 0105 	orr.w	r1, r1, r5
   80ff2:	bd30      	pop	{r4, r5, pc}
   80ff4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   80ff8:	4140      	adcs	r0, r0
   80ffa:	eb41 0101 	adc.w	r1, r1, r1
   80ffe:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   81002:	f1a4 0401 	sub.w	r4, r4, #1
   81006:	d1e9      	bne.n	80fdc <__adddf3+0x10c>
   81008:	f091 0f00 	teq	r1, #0
   8100c:	bf04      	itt	eq
   8100e:	4601      	moveq	r1, r0
   81010:	2000      	moveq	r0, #0
   81012:	fab1 f381 	clz	r3, r1
   81016:	bf08      	it	eq
   81018:	3320      	addeq	r3, #32
   8101a:	f1a3 030b 	sub.w	r3, r3, #11
   8101e:	f1b3 0220 	subs.w	r2, r3, #32
   81022:	da0c      	bge.n	8103e <__adddf3+0x16e>
   81024:	320c      	adds	r2, #12
   81026:	dd08      	ble.n	8103a <__adddf3+0x16a>
   81028:	f102 0c14 	add.w	ip, r2, #20
   8102c:	f1c2 020c 	rsb	r2, r2, #12
   81030:	fa01 f00c 	lsl.w	r0, r1, ip
   81034:	fa21 f102 	lsr.w	r1, r1, r2
   81038:	e00c      	b.n	81054 <__adddf3+0x184>
   8103a:	f102 0214 	add.w	r2, r2, #20
   8103e:	bfd8      	it	le
   81040:	f1c2 0c20 	rsble	ip, r2, #32
   81044:	fa01 f102 	lsl.w	r1, r1, r2
   81048:	fa20 fc0c 	lsr.w	ip, r0, ip
   8104c:	bfdc      	itt	le
   8104e:	ea41 010c 	orrle.w	r1, r1, ip
   81052:	4090      	lslle	r0, r2
   81054:	1ae4      	subs	r4, r4, r3
   81056:	bfa2      	ittt	ge
   81058:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   8105c:	4329      	orrge	r1, r5
   8105e:	bd30      	popge	{r4, r5, pc}
   81060:	ea6f 0404 	mvn.w	r4, r4
   81064:	3c1f      	subs	r4, #31
   81066:	da1c      	bge.n	810a2 <__adddf3+0x1d2>
   81068:	340c      	adds	r4, #12
   8106a:	dc0e      	bgt.n	8108a <__adddf3+0x1ba>
   8106c:	f104 0414 	add.w	r4, r4, #20
   81070:	f1c4 0220 	rsb	r2, r4, #32
   81074:	fa20 f004 	lsr.w	r0, r0, r4
   81078:	fa01 f302 	lsl.w	r3, r1, r2
   8107c:	ea40 0003 	orr.w	r0, r0, r3
   81080:	fa21 f304 	lsr.w	r3, r1, r4
   81084:	ea45 0103 	orr.w	r1, r5, r3
   81088:	bd30      	pop	{r4, r5, pc}
   8108a:	f1c4 040c 	rsb	r4, r4, #12
   8108e:	f1c4 0220 	rsb	r2, r4, #32
   81092:	fa20 f002 	lsr.w	r0, r0, r2
   81096:	fa01 f304 	lsl.w	r3, r1, r4
   8109a:	ea40 0003 	orr.w	r0, r0, r3
   8109e:	4629      	mov	r1, r5
   810a0:	bd30      	pop	{r4, r5, pc}
   810a2:	fa21 f004 	lsr.w	r0, r1, r4
   810a6:	4629      	mov	r1, r5
   810a8:	bd30      	pop	{r4, r5, pc}
   810aa:	f094 0f00 	teq	r4, #0
   810ae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   810b2:	bf06      	itte	eq
   810b4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   810b8:	3401      	addeq	r4, #1
   810ba:	3d01      	subne	r5, #1
   810bc:	e74e      	b.n	80f5c <__adddf3+0x8c>
   810be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   810c2:	bf18      	it	ne
   810c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   810c8:	d029      	beq.n	8111e <__adddf3+0x24e>
   810ca:	ea94 0f05 	teq	r4, r5
   810ce:	bf08      	it	eq
   810d0:	ea90 0f02 	teqeq	r0, r2
   810d4:	d005      	beq.n	810e2 <__adddf3+0x212>
   810d6:	ea54 0c00 	orrs.w	ip, r4, r0
   810da:	bf04      	itt	eq
   810dc:	4619      	moveq	r1, r3
   810de:	4610      	moveq	r0, r2
   810e0:	bd30      	pop	{r4, r5, pc}
   810e2:	ea91 0f03 	teq	r1, r3
   810e6:	bf1e      	ittt	ne
   810e8:	2100      	movne	r1, #0
   810ea:	2000      	movne	r0, #0
   810ec:	bd30      	popne	{r4, r5, pc}
   810ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   810f2:	d105      	bne.n	81100 <__adddf3+0x230>
   810f4:	0040      	lsls	r0, r0, #1
   810f6:	4149      	adcs	r1, r1
   810f8:	bf28      	it	cs
   810fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   810fe:	bd30      	pop	{r4, r5, pc}
   81100:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   81104:	bf3c      	itt	cc
   81106:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   8110a:	bd30      	popcc	{r4, r5, pc}
   8110c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   81110:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   81114:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   81118:	f04f 0000 	mov.w	r0, #0
   8111c:	bd30      	pop	{r4, r5, pc}
   8111e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   81122:	bf1a      	itte	ne
   81124:	4619      	movne	r1, r3
   81126:	4610      	movne	r0, r2
   81128:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   8112c:	bf1c      	itt	ne
   8112e:	460b      	movne	r3, r1
   81130:	4602      	movne	r2, r0
   81132:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   81136:	bf06      	itte	eq
   81138:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   8113c:	ea91 0f03 	teqeq	r1, r3
   81140:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   81144:	bd30      	pop	{r4, r5, pc}
   81146:	bf00      	nop

00081148 <__aeabi_ui2d>:
   81148:	f090 0f00 	teq	r0, #0
   8114c:	bf04      	itt	eq
   8114e:	2100      	moveq	r1, #0
   81150:	4770      	bxeq	lr
   81152:	b530      	push	{r4, r5, lr}
   81154:	f44f 6480 	mov.w	r4, #1024	; 0x400
   81158:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8115c:	f04f 0500 	mov.w	r5, #0
   81160:	f04f 0100 	mov.w	r1, #0
   81164:	e750      	b.n	81008 <__adddf3+0x138>
   81166:	bf00      	nop

00081168 <__aeabi_i2d>:
   81168:	f090 0f00 	teq	r0, #0
   8116c:	bf04      	itt	eq
   8116e:	2100      	moveq	r1, #0
   81170:	4770      	bxeq	lr
   81172:	b530      	push	{r4, r5, lr}
   81174:	f44f 6480 	mov.w	r4, #1024	; 0x400
   81178:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8117c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   81180:	bf48      	it	mi
   81182:	4240      	negmi	r0, r0
   81184:	f04f 0100 	mov.w	r1, #0
   81188:	e73e      	b.n	81008 <__adddf3+0x138>
   8118a:	bf00      	nop

0008118c <__aeabi_f2d>:
   8118c:	0042      	lsls	r2, r0, #1
   8118e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   81192:	ea4f 0131 	mov.w	r1, r1, rrx
   81196:	ea4f 7002 	mov.w	r0, r2, lsl #28
   8119a:	bf1f      	itttt	ne
   8119c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   811a0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   811a4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   811a8:	4770      	bxne	lr
   811aa:	f092 0f00 	teq	r2, #0
   811ae:	bf14      	ite	ne
   811b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   811b4:	4770      	bxeq	lr
   811b6:	b530      	push	{r4, r5, lr}
   811b8:	f44f 7460 	mov.w	r4, #896	; 0x380
   811bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   811c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   811c4:	e720      	b.n	81008 <__adddf3+0x138>
   811c6:	bf00      	nop

000811c8 <__aeabi_ul2d>:
   811c8:	ea50 0201 	orrs.w	r2, r0, r1
   811cc:	bf08      	it	eq
   811ce:	4770      	bxeq	lr
   811d0:	b530      	push	{r4, r5, lr}
   811d2:	f04f 0500 	mov.w	r5, #0
   811d6:	e00a      	b.n	811ee <__aeabi_l2d+0x16>

000811d8 <__aeabi_l2d>:
   811d8:	ea50 0201 	orrs.w	r2, r0, r1
   811dc:	bf08      	it	eq
   811de:	4770      	bxeq	lr
   811e0:	b530      	push	{r4, r5, lr}
   811e2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   811e6:	d502      	bpl.n	811ee <__aeabi_l2d+0x16>
   811e8:	4240      	negs	r0, r0
   811ea:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   811ee:	f44f 6480 	mov.w	r4, #1024	; 0x400
   811f2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   811f6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   811fa:	f43f aedc 	beq.w	80fb6 <__adddf3+0xe6>
   811fe:	f04f 0203 	mov.w	r2, #3
   81202:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   81206:	bf18      	it	ne
   81208:	3203      	addne	r2, #3
   8120a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8120e:	bf18      	it	ne
   81210:	3203      	addne	r2, #3
   81212:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   81216:	f1c2 0320 	rsb	r3, r2, #32
   8121a:	fa00 fc03 	lsl.w	ip, r0, r3
   8121e:	fa20 f002 	lsr.w	r0, r0, r2
   81222:	fa01 fe03 	lsl.w	lr, r1, r3
   81226:	ea40 000e 	orr.w	r0, r0, lr
   8122a:	fa21 f102 	lsr.w	r1, r1, r2
   8122e:	4414      	add	r4, r2
   81230:	e6c1      	b.n	80fb6 <__adddf3+0xe6>
   81232:	bf00      	nop

00081234 <__aeabi_dmul>:
   81234:	b570      	push	{r4, r5, r6, lr}
   81236:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8123a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8123e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   81242:	bf1d      	ittte	ne
   81244:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   81248:	ea94 0f0c 	teqne	r4, ip
   8124c:	ea95 0f0c 	teqne	r5, ip
   81250:	f000 f8de 	bleq	81410 <__aeabi_dmul+0x1dc>
   81254:	442c      	add	r4, r5
   81256:	ea81 0603 	eor.w	r6, r1, r3
   8125a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   8125e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   81262:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   81266:	bf18      	it	ne
   81268:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   8126c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   81270:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   81274:	d038      	beq.n	812e8 <__aeabi_dmul+0xb4>
   81276:	fba0 ce02 	umull	ip, lr, r0, r2
   8127a:	f04f 0500 	mov.w	r5, #0
   8127e:	fbe1 e502 	umlal	lr, r5, r1, r2
   81282:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   81286:	fbe0 e503 	umlal	lr, r5, r0, r3
   8128a:	f04f 0600 	mov.w	r6, #0
   8128e:	fbe1 5603 	umlal	r5, r6, r1, r3
   81292:	f09c 0f00 	teq	ip, #0
   81296:	bf18      	it	ne
   81298:	f04e 0e01 	orrne.w	lr, lr, #1
   8129c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   812a0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   812a4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   812a8:	d204      	bcs.n	812b4 <__aeabi_dmul+0x80>
   812aa:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   812ae:	416d      	adcs	r5, r5
   812b0:	eb46 0606 	adc.w	r6, r6, r6
   812b4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   812b8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   812bc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   812c0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   812c4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   812c8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   812cc:	bf88      	it	hi
   812ce:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   812d2:	d81e      	bhi.n	81312 <__aeabi_dmul+0xde>
   812d4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   812d8:	bf08      	it	eq
   812da:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   812de:	f150 0000 	adcs.w	r0, r0, #0
   812e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   812e6:	bd70      	pop	{r4, r5, r6, pc}
   812e8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   812ec:	ea46 0101 	orr.w	r1, r6, r1
   812f0:	ea40 0002 	orr.w	r0, r0, r2
   812f4:	ea81 0103 	eor.w	r1, r1, r3
   812f8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   812fc:	bfc2      	ittt	gt
   812fe:	ebd4 050c 	rsbsgt	r5, r4, ip
   81302:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   81306:	bd70      	popgt	{r4, r5, r6, pc}
   81308:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8130c:	f04f 0e00 	mov.w	lr, #0
   81310:	3c01      	subs	r4, #1
   81312:	f300 80ab 	bgt.w	8146c <__aeabi_dmul+0x238>
   81316:	f114 0f36 	cmn.w	r4, #54	; 0x36
   8131a:	bfde      	ittt	le
   8131c:	2000      	movle	r0, #0
   8131e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   81322:	bd70      	pople	{r4, r5, r6, pc}
   81324:	f1c4 0400 	rsb	r4, r4, #0
   81328:	3c20      	subs	r4, #32
   8132a:	da35      	bge.n	81398 <__aeabi_dmul+0x164>
   8132c:	340c      	adds	r4, #12
   8132e:	dc1b      	bgt.n	81368 <__aeabi_dmul+0x134>
   81330:	f104 0414 	add.w	r4, r4, #20
   81334:	f1c4 0520 	rsb	r5, r4, #32
   81338:	fa00 f305 	lsl.w	r3, r0, r5
   8133c:	fa20 f004 	lsr.w	r0, r0, r4
   81340:	fa01 f205 	lsl.w	r2, r1, r5
   81344:	ea40 0002 	orr.w	r0, r0, r2
   81348:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   8134c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   81350:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   81354:	fa21 f604 	lsr.w	r6, r1, r4
   81358:	eb42 0106 	adc.w	r1, r2, r6
   8135c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   81360:	bf08      	it	eq
   81362:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   81366:	bd70      	pop	{r4, r5, r6, pc}
   81368:	f1c4 040c 	rsb	r4, r4, #12
   8136c:	f1c4 0520 	rsb	r5, r4, #32
   81370:	fa00 f304 	lsl.w	r3, r0, r4
   81374:	fa20 f005 	lsr.w	r0, r0, r5
   81378:	fa01 f204 	lsl.w	r2, r1, r4
   8137c:	ea40 0002 	orr.w	r0, r0, r2
   81380:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   81384:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   81388:	f141 0100 	adc.w	r1, r1, #0
   8138c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   81390:	bf08      	it	eq
   81392:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   81396:	bd70      	pop	{r4, r5, r6, pc}
   81398:	f1c4 0520 	rsb	r5, r4, #32
   8139c:	fa00 f205 	lsl.w	r2, r0, r5
   813a0:	ea4e 0e02 	orr.w	lr, lr, r2
   813a4:	fa20 f304 	lsr.w	r3, r0, r4
   813a8:	fa01 f205 	lsl.w	r2, r1, r5
   813ac:	ea43 0302 	orr.w	r3, r3, r2
   813b0:	fa21 f004 	lsr.w	r0, r1, r4
   813b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   813b8:	fa21 f204 	lsr.w	r2, r1, r4
   813bc:	ea20 0002 	bic.w	r0, r0, r2
   813c0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   813c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   813c8:	bf08      	it	eq
   813ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   813ce:	bd70      	pop	{r4, r5, r6, pc}
   813d0:	f094 0f00 	teq	r4, #0
   813d4:	d10f      	bne.n	813f6 <__aeabi_dmul+0x1c2>
   813d6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   813da:	0040      	lsls	r0, r0, #1
   813dc:	eb41 0101 	adc.w	r1, r1, r1
   813e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   813e4:	bf08      	it	eq
   813e6:	3c01      	subeq	r4, #1
   813e8:	d0f7      	beq.n	813da <__aeabi_dmul+0x1a6>
   813ea:	ea41 0106 	orr.w	r1, r1, r6
   813ee:	f095 0f00 	teq	r5, #0
   813f2:	bf18      	it	ne
   813f4:	4770      	bxne	lr
   813f6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   813fa:	0052      	lsls	r2, r2, #1
   813fc:	eb43 0303 	adc.w	r3, r3, r3
   81400:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   81404:	bf08      	it	eq
   81406:	3d01      	subeq	r5, #1
   81408:	d0f7      	beq.n	813fa <__aeabi_dmul+0x1c6>
   8140a:	ea43 0306 	orr.w	r3, r3, r6
   8140e:	4770      	bx	lr
   81410:	ea94 0f0c 	teq	r4, ip
   81414:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   81418:	bf18      	it	ne
   8141a:	ea95 0f0c 	teqne	r5, ip
   8141e:	d00c      	beq.n	8143a <__aeabi_dmul+0x206>
   81420:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   81424:	bf18      	it	ne
   81426:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8142a:	d1d1      	bne.n	813d0 <__aeabi_dmul+0x19c>
   8142c:	ea81 0103 	eor.w	r1, r1, r3
   81430:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   81434:	f04f 0000 	mov.w	r0, #0
   81438:	bd70      	pop	{r4, r5, r6, pc}
   8143a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8143e:	bf06      	itte	eq
   81440:	4610      	moveq	r0, r2
   81442:	4619      	moveq	r1, r3
   81444:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   81448:	d019      	beq.n	8147e <__aeabi_dmul+0x24a>
   8144a:	ea94 0f0c 	teq	r4, ip
   8144e:	d102      	bne.n	81456 <__aeabi_dmul+0x222>
   81450:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   81454:	d113      	bne.n	8147e <__aeabi_dmul+0x24a>
   81456:	ea95 0f0c 	teq	r5, ip
   8145a:	d105      	bne.n	81468 <__aeabi_dmul+0x234>
   8145c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   81460:	bf1c      	itt	ne
   81462:	4610      	movne	r0, r2
   81464:	4619      	movne	r1, r3
   81466:	d10a      	bne.n	8147e <__aeabi_dmul+0x24a>
   81468:	ea81 0103 	eor.w	r1, r1, r3
   8146c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   81470:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   81474:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   81478:	f04f 0000 	mov.w	r0, #0
   8147c:	bd70      	pop	{r4, r5, r6, pc}
   8147e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   81482:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   81486:	bd70      	pop	{r4, r5, r6, pc}

00081488 <__aeabi_ddiv>:
   81488:	b570      	push	{r4, r5, r6, lr}
   8148a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8148e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   81492:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   81496:	bf1d      	ittte	ne
   81498:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   8149c:	ea94 0f0c 	teqne	r4, ip
   814a0:	ea95 0f0c 	teqne	r5, ip
   814a4:	f000 f8a7 	bleq	815f6 <__aeabi_ddiv+0x16e>
   814a8:	eba4 0405 	sub.w	r4, r4, r5
   814ac:	ea81 0e03 	eor.w	lr, r1, r3
   814b0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   814b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   814b8:	f000 8088 	beq.w	815cc <__aeabi_ddiv+0x144>
   814bc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   814c0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   814c4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   814c8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   814cc:	ea4f 2202 	mov.w	r2, r2, lsl #8
   814d0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   814d4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   814d8:	ea4f 2600 	mov.w	r6, r0, lsl #8
   814dc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   814e0:	429d      	cmp	r5, r3
   814e2:	bf08      	it	eq
   814e4:	4296      	cmpeq	r6, r2
   814e6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   814ea:	f504 7440 	add.w	r4, r4, #768	; 0x300
   814ee:	d202      	bcs.n	814f6 <__aeabi_ddiv+0x6e>
   814f0:	085b      	lsrs	r3, r3, #1
   814f2:	ea4f 0232 	mov.w	r2, r2, rrx
   814f6:	1ab6      	subs	r6, r6, r2
   814f8:	eb65 0503 	sbc.w	r5, r5, r3
   814fc:	085b      	lsrs	r3, r3, #1
   814fe:	ea4f 0232 	mov.w	r2, r2, rrx
   81502:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   81506:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   8150a:	ebb6 0e02 	subs.w	lr, r6, r2
   8150e:	eb75 0e03 	sbcs.w	lr, r5, r3
   81512:	bf22      	ittt	cs
   81514:	1ab6      	subcs	r6, r6, r2
   81516:	4675      	movcs	r5, lr
   81518:	ea40 000c 	orrcs.w	r0, r0, ip
   8151c:	085b      	lsrs	r3, r3, #1
   8151e:	ea4f 0232 	mov.w	r2, r2, rrx
   81522:	ebb6 0e02 	subs.w	lr, r6, r2
   81526:	eb75 0e03 	sbcs.w	lr, r5, r3
   8152a:	bf22      	ittt	cs
   8152c:	1ab6      	subcs	r6, r6, r2
   8152e:	4675      	movcs	r5, lr
   81530:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   81534:	085b      	lsrs	r3, r3, #1
   81536:	ea4f 0232 	mov.w	r2, r2, rrx
   8153a:	ebb6 0e02 	subs.w	lr, r6, r2
   8153e:	eb75 0e03 	sbcs.w	lr, r5, r3
   81542:	bf22      	ittt	cs
   81544:	1ab6      	subcs	r6, r6, r2
   81546:	4675      	movcs	r5, lr
   81548:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   8154c:	085b      	lsrs	r3, r3, #1
   8154e:	ea4f 0232 	mov.w	r2, r2, rrx
   81552:	ebb6 0e02 	subs.w	lr, r6, r2
   81556:	eb75 0e03 	sbcs.w	lr, r5, r3
   8155a:	bf22      	ittt	cs
   8155c:	1ab6      	subcs	r6, r6, r2
   8155e:	4675      	movcs	r5, lr
   81560:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   81564:	ea55 0e06 	orrs.w	lr, r5, r6
   81568:	d018      	beq.n	8159c <__aeabi_ddiv+0x114>
   8156a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   8156e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   81572:	ea4f 1606 	mov.w	r6, r6, lsl #4
   81576:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   8157a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   8157e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   81582:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   81586:	d1c0      	bne.n	8150a <__aeabi_ddiv+0x82>
   81588:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8158c:	d10b      	bne.n	815a6 <__aeabi_ddiv+0x11e>
   8158e:	ea41 0100 	orr.w	r1, r1, r0
   81592:	f04f 0000 	mov.w	r0, #0
   81596:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   8159a:	e7b6      	b.n	8150a <__aeabi_ddiv+0x82>
   8159c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   815a0:	bf04      	itt	eq
   815a2:	4301      	orreq	r1, r0
   815a4:	2000      	moveq	r0, #0
   815a6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   815aa:	bf88      	it	hi
   815ac:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   815b0:	f63f aeaf 	bhi.w	81312 <__aeabi_dmul+0xde>
   815b4:	ebb5 0c03 	subs.w	ip, r5, r3
   815b8:	bf04      	itt	eq
   815ba:	ebb6 0c02 	subseq.w	ip, r6, r2
   815be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   815c2:	f150 0000 	adcs.w	r0, r0, #0
   815c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   815ca:	bd70      	pop	{r4, r5, r6, pc}
   815cc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   815d0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   815d4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   815d8:	bfc2      	ittt	gt
   815da:	ebd4 050c 	rsbsgt	r5, r4, ip
   815de:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   815e2:	bd70      	popgt	{r4, r5, r6, pc}
   815e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   815e8:	f04f 0e00 	mov.w	lr, #0
   815ec:	3c01      	subs	r4, #1
   815ee:	e690      	b.n	81312 <__aeabi_dmul+0xde>
   815f0:	ea45 0e06 	orr.w	lr, r5, r6
   815f4:	e68d      	b.n	81312 <__aeabi_dmul+0xde>
   815f6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   815fa:	ea94 0f0c 	teq	r4, ip
   815fe:	bf08      	it	eq
   81600:	ea95 0f0c 	teqeq	r5, ip
   81604:	f43f af3b 	beq.w	8147e <__aeabi_dmul+0x24a>
   81608:	ea94 0f0c 	teq	r4, ip
   8160c:	d10a      	bne.n	81624 <__aeabi_ddiv+0x19c>
   8160e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   81612:	f47f af34 	bne.w	8147e <__aeabi_dmul+0x24a>
   81616:	ea95 0f0c 	teq	r5, ip
   8161a:	f47f af25 	bne.w	81468 <__aeabi_dmul+0x234>
   8161e:	4610      	mov	r0, r2
   81620:	4619      	mov	r1, r3
   81622:	e72c      	b.n	8147e <__aeabi_dmul+0x24a>
   81624:	ea95 0f0c 	teq	r5, ip
   81628:	d106      	bne.n	81638 <__aeabi_ddiv+0x1b0>
   8162a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8162e:	f43f aefd 	beq.w	8142c <__aeabi_dmul+0x1f8>
   81632:	4610      	mov	r0, r2
   81634:	4619      	mov	r1, r3
   81636:	e722      	b.n	8147e <__aeabi_dmul+0x24a>
   81638:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8163c:	bf18      	it	ne
   8163e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   81642:	f47f aec5 	bne.w	813d0 <__aeabi_dmul+0x19c>
   81646:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   8164a:	f47f af0d 	bne.w	81468 <__aeabi_dmul+0x234>
   8164e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   81652:	f47f aeeb 	bne.w	8142c <__aeabi_dmul+0x1f8>
   81656:	e712      	b.n	8147e <__aeabi_dmul+0x24a>

00081658 <__aeabi_d2iz>:
   81658:	ea4f 0241 	mov.w	r2, r1, lsl #1
   8165c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   81660:	d215      	bcs.n	8168e <__aeabi_d2iz+0x36>
   81662:	d511      	bpl.n	81688 <__aeabi_d2iz+0x30>
   81664:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   81668:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   8166c:	d912      	bls.n	81694 <__aeabi_d2iz+0x3c>
   8166e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   81672:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   81676:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   8167a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8167e:	fa23 f002 	lsr.w	r0, r3, r2
   81682:	bf18      	it	ne
   81684:	4240      	negne	r0, r0
   81686:	4770      	bx	lr
   81688:	f04f 0000 	mov.w	r0, #0
   8168c:	4770      	bx	lr
   8168e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   81692:	d105      	bne.n	816a0 <__aeabi_d2iz+0x48>
   81694:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   81698:	bf08      	it	eq
   8169a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   8169e:	4770      	bx	lr
   816a0:	f04f 0000 	mov.w	r0, #0
   816a4:	4770      	bx	lr
   816a6:	bf00      	nop

000816a8 <__aeabi_d2uiz>:
   816a8:	004a      	lsls	r2, r1, #1
   816aa:	d211      	bcs.n	816d0 <__aeabi_d2uiz+0x28>
   816ac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   816b0:	d211      	bcs.n	816d6 <__aeabi_d2uiz+0x2e>
   816b2:	d50d      	bpl.n	816d0 <__aeabi_d2uiz+0x28>
   816b4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   816b8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   816bc:	d40e      	bmi.n	816dc <__aeabi_d2uiz+0x34>
   816be:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   816c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   816c6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   816ca:	fa23 f002 	lsr.w	r0, r3, r2
   816ce:	4770      	bx	lr
   816d0:	f04f 0000 	mov.w	r0, #0
   816d4:	4770      	bx	lr
   816d6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   816da:	d102      	bne.n	816e2 <__aeabi_d2uiz+0x3a>
   816dc:	f04f 30ff 	mov.w	r0, #4294967295
   816e0:	4770      	bx	lr
   816e2:	f04f 0000 	mov.w	r0, #0
   816e6:	4770      	bx	lr

000816e8 <__libc_init_array>:
   816e8:	b570      	push	{r4, r5, r6, lr}
   816ea:	4e0f      	ldr	r6, [pc, #60]	; (81728 <__libc_init_array+0x40>)
   816ec:	4d0f      	ldr	r5, [pc, #60]	; (8172c <__libc_init_array+0x44>)
   816ee:	1b76      	subs	r6, r6, r5
   816f0:	10b6      	asrs	r6, r6, #2
   816f2:	bf18      	it	ne
   816f4:	2400      	movne	r4, #0
   816f6:	d005      	beq.n	81704 <__libc_init_array+0x1c>
   816f8:	3401      	adds	r4, #1
   816fa:	f855 3b04 	ldr.w	r3, [r5], #4
   816fe:	4798      	blx	r3
   81700:	42a6      	cmp	r6, r4
   81702:	d1f9      	bne.n	816f8 <__libc_init_array+0x10>
   81704:	4e0a      	ldr	r6, [pc, #40]	; (81730 <__libc_init_array+0x48>)
   81706:	4d0b      	ldr	r5, [pc, #44]	; (81734 <__libc_init_array+0x4c>)
   81708:	f000 f90a 	bl	81920 <_init>
   8170c:	1b76      	subs	r6, r6, r5
   8170e:	10b6      	asrs	r6, r6, #2
   81710:	bf18      	it	ne
   81712:	2400      	movne	r4, #0
   81714:	d006      	beq.n	81724 <__libc_init_array+0x3c>
   81716:	3401      	adds	r4, #1
   81718:	f855 3b04 	ldr.w	r3, [r5], #4
   8171c:	4798      	blx	r3
   8171e:	42a6      	cmp	r6, r4
   81720:	d1f9      	bne.n	81716 <__libc_init_array+0x2e>
   81722:	bd70      	pop	{r4, r5, r6, pc}
   81724:	bd70      	pop	{r4, r5, r6, pc}
   81726:	bf00      	nop
   81728:	0008192c 	.word	0x0008192c
   8172c:	0008192c 	.word	0x0008192c
   81730:	00081934 	.word	0x00081934
   81734:	0008192c 	.word	0x0008192c

00081738 <register_fini>:
   81738:	4b02      	ldr	r3, [pc, #8]	; (81744 <register_fini+0xc>)
   8173a:	b113      	cbz	r3, 81742 <register_fini+0xa>
   8173c:	4802      	ldr	r0, [pc, #8]	; (81748 <register_fini+0x10>)
   8173e:	f000 b805 	b.w	8174c <atexit>
   81742:	4770      	bx	lr
   81744:	00000000 	.word	0x00000000
   81748:	00081759 	.word	0x00081759

0008174c <atexit>:
   8174c:	2300      	movs	r3, #0
   8174e:	4601      	mov	r1, r0
   81750:	461a      	mov	r2, r3
   81752:	4618      	mov	r0, r3
   81754:	f000 b81e 	b.w	81794 <__register_exitproc>

00081758 <__libc_fini_array>:
   81758:	b538      	push	{r3, r4, r5, lr}
   8175a:	4c0a      	ldr	r4, [pc, #40]	; (81784 <__libc_fini_array+0x2c>)
   8175c:	4d0a      	ldr	r5, [pc, #40]	; (81788 <__libc_fini_array+0x30>)
   8175e:	1b64      	subs	r4, r4, r5
   81760:	10a4      	asrs	r4, r4, #2
   81762:	d00a      	beq.n	8177a <__libc_fini_array+0x22>
   81764:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   81768:	3b01      	subs	r3, #1
   8176a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   8176e:	3c01      	subs	r4, #1
   81770:	f855 3904 	ldr.w	r3, [r5], #-4
   81774:	4798      	blx	r3
   81776:	2c00      	cmp	r4, #0
   81778:	d1f9      	bne.n	8176e <__libc_fini_array+0x16>
   8177a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8177e:	f000 b8d9 	b.w	81934 <_fini>
   81782:	bf00      	nop
   81784:	00081944 	.word	0x00081944
   81788:	00081940 	.word	0x00081940

0008178c <__retarget_lock_acquire_recursive>:
   8178c:	4770      	bx	lr
   8178e:	bf00      	nop

00081790 <__retarget_lock_release_recursive>:
   81790:	4770      	bx	lr
   81792:	bf00      	nop

00081794 <__register_exitproc>:
   81794:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   81798:	4d2c      	ldr	r5, [pc, #176]	; (8184c <__register_exitproc+0xb8>)
   8179a:	4606      	mov	r6, r0
   8179c:	6828      	ldr	r0, [r5, #0]
   8179e:	4698      	mov	r8, r3
   817a0:	460f      	mov	r7, r1
   817a2:	4691      	mov	r9, r2
   817a4:	f7ff fff2 	bl	8178c <__retarget_lock_acquire_recursive>
   817a8:	4b29      	ldr	r3, [pc, #164]	; (81850 <__register_exitproc+0xbc>)
   817aa:	681c      	ldr	r4, [r3, #0]
   817ac:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   817b0:	2b00      	cmp	r3, #0
   817b2:	d03e      	beq.n	81832 <__register_exitproc+0x9e>
   817b4:	685a      	ldr	r2, [r3, #4]
   817b6:	2a1f      	cmp	r2, #31
   817b8:	dc1c      	bgt.n	817f4 <__register_exitproc+0x60>
   817ba:	f102 0e01 	add.w	lr, r2, #1
   817be:	b176      	cbz	r6, 817de <__register_exitproc+0x4a>
   817c0:	2101      	movs	r1, #1
   817c2:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   817c6:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   817ca:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   817ce:	4091      	lsls	r1, r2
   817d0:	4308      	orrs	r0, r1
   817d2:	2e02      	cmp	r6, #2
   817d4:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   817d8:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   817dc:	d023      	beq.n	81826 <__register_exitproc+0x92>
   817de:	3202      	adds	r2, #2
   817e0:	f8c3 e004 	str.w	lr, [r3, #4]
   817e4:	6828      	ldr	r0, [r5, #0]
   817e6:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   817ea:	f7ff ffd1 	bl	81790 <__retarget_lock_release_recursive>
   817ee:	2000      	movs	r0, #0
   817f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   817f4:	4b17      	ldr	r3, [pc, #92]	; (81854 <__register_exitproc+0xc0>)
   817f6:	b30b      	cbz	r3, 8183c <__register_exitproc+0xa8>
   817f8:	f44f 70c8 	mov.w	r0, #400	; 0x190
   817fc:	f3af 8000 	nop.w
   81800:	4603      	mov	r3, r0
   81802:	b1d8      	cbz	r0, 8183c <__register_exitproc+0xa8>
   81804:	2000      	movs	r0, #0
   81806:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   8180a:	f04f 0e01 	mov.w	lr, #1
   8180e:	6058      	str	r0, [r3, #4]
   81810:	6019      	str	r1, [r3, #0]
   81812:	4602      	mov	r2, r0
   81814:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   81818:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   8181c:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   81820:	2e00      	cmp	r6, #0
   81822:	d0dc      	beq.n	817de <__register_exitproc+0x4a>
   81824:	e7cc      	b.n	817c0 <__register_exitproc+0x2c>
   81826:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   8182a:	4301      	orrs	r1, r0
   8182c:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   81830:	e7d5      	b.n	817de <__register_exitproc+0x4a>
   81832:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   81836:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   8183a:	e7bb      	b.n	817b4 <__register_exitproc+0x20>
   8183c:	6828      	ldr	r0, [r5, #0]
   8183e:	f7ff ffa7 	bl	81790 <__retarget_lock_release_recursive>
   81842:	f04f 30ff 	mov.w	r0, #4294967295
   81846:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8184a:	bf00      	nop
   8184c:	20000448 	.word	0x20000448
   81850:	0008191c 	.word	0x0008191c
   81854:	00000000 	.word	0x00000000
   81858:	304e4143 	.word	0x304e4143
   8185c:	73656d20 	.word	0x73656d20
   81860:	65676173 	.word	0x65676173
   81864:	72726120 	.word	0x72726120
   81868:	64657669 	.word	0x64657669
   8186c:	206e6920 	.word	0x206e6920
   81870:	2d6e6f6e 	.word	0x2d6e6f6e
   81874:	64657375 	.word	0x64657375
   81878:	69616d20 	.word	0x69616d20
   8187c:	786f626c 	.word	0x786f626c
   81880:	00000d0a 	.word	0x00000d0a
   81884:	7373656d 	.word	0x7373656d
   81888:	20656761 	.word	0x20656761
   8188c:	203a6469 	.word	0x203a6469
   81890:	0d0a6425 	.word	0x0d0a6425
   81894:	00000000 	.word	0x00000000
   81898:	7373656d 	.word	0x7373656d
   8189c:	20656761 	.word	0x20656761
   818a0:	61746164 	.word	0x61746164
   818a4:	6e656c20 	.word	0x6e656c20
   818a8:	3a687467 	.word	0x3a687467
   818ac:	0a642520 	.word	0x0a642520
   818b0:	0000000d 	.word	0x0000000d
   818b4:	00206425 	.word	0x00206425
   818b8:	6f636e45 	.word	0x6f636e45
   818bc:	20726564 	.word	0x20726564
   818c0:	61746164 	.word	0x61746164
   818c4:	7825203a 	.word	0x7825203a
   818c8:	000d0a20 	.word	0x000d0a20
   818cc:	6c6c6568 	.word	0x6c6c6568
   818d0:	000d0a6f 	.word	0x000d0a6f
   818d4:	6c616f67 	.word	0x6c616f67
   818d8:	203a2073 	.word	0x203a2073
   818dc:	20206425 	.word	0x20206425
   818e0:	000d0a20 	.word	0x000d0a20
   818e4:	695f6f74 	.word	0x695f6f74
   818e8:	6572636e 	.word	0x6572636e
   818ec:	746e656d 	.word	0x746e656d
   818f0:	00000000 	.word	0x00000000
   818f4:	6c756e28 	.word	0x6c756e28
   818f8:	0000296c 	.word	0x0000296c
   818fc:	3a525245 	.word	0x3a525245
   81900:	52415520 	.word	0x52415520
   81904:	58522054 	.word	0x58522054
   81908:	66756220 	.word	0x66756220
   8190c:	20726566 	.word	0x20726566
   81910:	66207369 	.word	0x66207369
   81914:	0a6c6c75 	.word	0x0a6c6c75
   81918:	0000000d 	.word	0x0000000d

0008191c <_global_impure_ptr>:
   8191c:	20000020                                 .. 

00081920 <_init>:
   81920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81922:	bf00      	nop
   81924:	bcf8      	pop	{r3, r4, r5, r6, r7}
   81926:	bc08      	pop	{r3}
   81928:	469e      	mov	lr, r3
   8192a:	4770      	bx	lr

0008192c <__init_array_start>:
   8192c:	00081739 	.word	0x00081739

00081930 <__frame_dummy_init_array_entry>:
   81930:	00080119                                ....

00081934 <_fini>:
   81934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81936:	bf00      	nop
   81938:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8193a:	bc08      	pop	{r3}
   8193c:	469e      	mov	lr, r3
   8193e:	4770      	bx	lr

00081940 <__fini_array_start>:
   81940:	000800f5 	.word	0x000800f5
