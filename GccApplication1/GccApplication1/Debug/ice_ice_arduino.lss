
ice_ice_arduino.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001c18  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000454  20000000  00081c18  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000c4  20000458  00082070  00020454  2**3
                  ALLOC
  3 .stack        00000404  2000051c  00082134  00020454  2**0
                  ALLOC
  4 .heap         00000200  20000920  00082538  00020454  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020454  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002047d  2**0
                  CONTENTS, READONLY
  7 .debug_info   000082d6  00000000  00000000  000204d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000018ab  00000000  00000000  000287ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00001506  00000000  00000000  0002a057  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000002d8  00000000  00000000  0002b55d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000240  00000000  00000000  0002b835  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000130c3  00000000  00000000  0002ba75  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000060f9  00000000  00000000  0003eb38  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000546ce  00000000  00000000  00044c31  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00000860  00000000  00000000  00099300  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	20 09 00 20 65 05 08 00 61 05 08 00 61 05 08 00      .. e...a...a...
   80010:	61 05 08 00 61 05 08 00 61 05 08 00 00 00 00 00     a...a...a.......
	...
   8002c:	61 05 08 00 61 05 08 00 00 00 00 00 61 05 08 00     a...a.......a...
   8003c:	59 0e 08 00 61 05 08 00 61 05 08 00 61 05 08 00     Y...a...a...a...
   8004c:	61 05 08 00 61 05 08 00 61 05 08 00 61 05 08 00     a...a...a...a...
   8005c:	61 05 08 00 05 11 08 00 61 05 08 00 00 00 00 00     a.......a.......
   8006c:	61 05 08 00 61 05 08 00 61 05 08 00 61 05 08 00     a...a...a...a...
	...
   80084:	61 05 08 00 61 05 08 00 61 05 08 00 61 05 08 00     a...a...a...a...
   80094:	61 05 08 00 61 05 08 00 61 05 08 00 61 05 08 00     a...a...a...a...
   800a4:	00 00 00 00 61 05 08 00 61 05 08 00 0d 0f 08 00     ....a...a.......
   800b4:	61 05 08 00 61 05 08 00 61 05 08 00 61 05 08 00     a...a...a...a...
   800c4:	61 05 08 00 61 05 08 00 61 05 08 00 61 05 08 00     a...a...a...a...
   800d4:	c1 01 08 00 61 05 08 00 61 05 08 00 61 05 08 00     ....a...a...a...
   800e4:	61 05 08 00 61 05 08 00 21 04 08 00 61 05 08 00     a...a...!...a...

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20000458 	.word	0x20000458
   80110:	00000000 	.word	0x00000000
   80114:	00081c18 	.word	0x00081c18

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00081c18 	.word	0x00081c18
   80154:	2000045c 	.word	0x2000045c
   80158:	00081c18 	.word	0x00081c18
   8015c:	00000000 	.word	0x00000000

00080160 <adc_init>:

#include "sam.h"

void adc_init(){
	
	PMC->PMC_PCER1 = PMC_PCER1_PID37; //enable adc controller
   80160:	2320      	movs	r3, #32
   80162:	4a0b      	ldr	r2, [pc, #44]	; (80190 <adc_init+0x30>)
   80164:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   80168:	4a0a      	ldr	r2, [pc, #40]	; (80194 <adc_init+0x34>)
   8016a:	6053      	str	r3, [r2, #4]
	
	//Enable interrupt in NVIC
	NVIC_EnableIRQ(ID_ADC);
	
	
	ADC->ADC_CHER = ADC_CHER_CH1; //pin a6 på arduino due
   8016c:	4b0a      	ldr	r3, [pc, #40]	; (80198 <adc_init+0x38>)
   8016e:	2202      	movs	r2, #2
   80170:	611a      	str	r2, [r3, #16]
	//ADC->ADC_MR = ADC_MR_TRGEN_EN;
	ADC->ADC_MR = ADC_MR_FREERUN;
   80172:	2180      	movs	r1, #128	; 0x80
   80174:	6059      	str	r1, [r3, #4]
	
	ADC->ADC_CR = ADC_CR_START;
   80176:	601a      	str	r2, [r3, #0]
	ADC->ADC_IER = ADC_IER_COMPE;
   80178:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   8017c:	625a      	str	r2, [r3, #36]	; 0x24
	//ADC->ADC_IER |= ADC_IER_DRDY;
	ADC->ADC_EMR |= ADC_EMR_CMPMODE_LOW;
   8017e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   80180:	641a      	str	r2, [r3, #64]	; 0x40

	//ADC->ADC_EMR = (0x0u << 9);
	ADC->ADC_EMR |= ADC_EMR_CMPSEL(1);
   80182:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   80184:	f042 0210 	orr.w	r2, r2, #16
   80188:	641a      	str	r2, [r3, #64]	; 0x40
	ADC->ADC_CWR = ADC_CWR_LOWTHRES(0x00f);
   8018a:	220f      	movs	r2, #15
   8018c:	645a      	str	r2, [r3, #68]	; 0x44
   8018e:	4770      	bx	lr
   80190:	400e0600 	.word	0x400e0600
   80194:	e000e100 	.word	0xe000e100
   80198:	400c0000 	.word	0x400c0000

0008019c <get_total_goals>:
uint8_t TOTAL_GOALS = 0;
static uint32_t last_goal_time = 0;

uint8_t get_total_goals(){
	 return TOTAL_GOALS;
 }
   8019c:	4b01      	ldr	r3, [pc, #4]	; (801a4 <get_total_goals+0x8>)
   8019e:	7818      	ldrb	r0, [r3, #0]
   801a0:	4770      	bx	lr
   801a2:	bf00      	nop
   801a4:	20000474 	.word	0x20000474

000801a8 <get_goal_flag>:

uint8_t get_goal_flag(){
	 return goal_flag;
 }
   801a8:	4b01      	ldr	r3, [pc, #4]	; (801b0 <get_goal_flag+0x8>)
   801aa:	7858      	ldrb	r0, [r3, #1]
   801ac:	4770      	bx	lr
   801ae:	bf00      	nop
   801b0:	20000474 	.word	0x20000474

000801b4 <reset_goal_flag>:

 void reset_goal_flag(){
	 goal_flag = 0;
   801b4:	2200      	movs	r2, #0
   801b6:	4b01      	ldr	r3, [pc, #4]	; (801bc <reset_goal_flag+0x8>)
   801b8:	705a      	strb	r2, [r3, #1]
   801ba:	4770      	bx	lr
   801bc:	20000474 	.word	0x20000474

000801c0 <ADC_Handler>:
 }

void ADC_Handler( void ){
   801c0:	b510      	push	{r4, lr}
	//printf("Aa");
	if(last_goal_time + 800 < return_milliseconds()){
   801c2:	4b0e      	ldr	r3, [pc, #56]	; (801fc <ADC_Handler+0x3c>)
   801c4:	685c      	ldr	r4, [r3, #4]
   801c6:	f504 7448 	add.w	r4, r4, #800	; 0x320
   801ca:	4b0d      	ldr	r3, [pc, #52]	; (80200 <ADC_Handler+0x40>)
   801cc:	4798      	blx	r3
   801ce:	4284      	cmp	r4, r0
   801d0:	d309      	bcc.n	801e6 <ADC_Handler+0x26>
		TOTAL_GOALS += 1;
		last_goal_time = return_milliseconds();
		goal_flag = 1;
	}

	change_motor_speed_using_paadrag(0);
   801d2:	2000      	movs	r0, #0
   801d4:	4b0b      	ldr	r3, [pc, #44]	; (80204 <ADC_Handler+0x44>)
   801d6:	4798      	blx	r3

	int i = ADC->ADC_ISR;
   801d8:	4b0b      	ldr	r3, [pc, #44]	; (80208 <ADC_Handler+0x48>)
   801da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   801dc:	2220      	movs	r2, #32
   801de:	4b0b      	ldr	r3, [pc, #44]	; (8020c <ADC_Handler+0x4c>)
   801e0:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   801e4:	bd10      	pop	{r4, pc}
		TOTAL_GOALS += 1;
   801e6:	4c05      	ldr	r4, [pc, #20]	; (801fc <ADC_Handler+0x3c>)
   801e8:	7823      	ldrb	r3, [r4, #0]
   801ea:	3301      	adds	r3, #1
   801ec:	7023      	strb	r3, [r4, #0]
		last_goal_time = return_milliseconds();
   801ee:	4b04      	ldr	r3, [pc, #16]	; (80200 <ADC_Handler+0x40>)
   801f0:	4798      	blx	r3
   801f2:	6060      	str	r0, [r4, #4]
		goal_flag = 1;
   801f4:	2301      	movs	r3, #1
   801f6:	7063      	strb	r3, [r4, #1]
   801f8:	e7eb      	b.n	801d2 <ADC_Handler+0x12>
   801fa:	bf00      	nop
   801fc:	20000474 	.word	0x20000474
   80200:	00080e69 	.word	0x00080e69
   80204:	000807c1 	.word	0x000807c1
   80208:	400c0000 	.word	0x400c0000
   8020c:	e000e100 	.word	0xe000e100

00080210 <can_init>:
 * \retval Success(0) or failure(1)
 */


uint8_t can_init(uint32_t can_br, uint8_t num_tx_mb, uint8_t num_rx_mb)
{
   80210:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	
	//Make sure num_rx_mb and num_tx_mb is valid
	if(num_rx_mb > 8 | num_tx_mb > 8 | num_rx_mb + num_tx_mb > 8)
   80214:	1855      	adds	r5, r2, r1
   80216:	2908      	cmp	r1, #8
   80218:	bf98      	it	ls
   8021a:	2a08      	cmpls	r2, #8
   8021c:	d864      	bhi.n	802e8 <can_init+0xd8>
   8021e:	460e      	mov	r6, r1
   80220:	2d08      	cmp	r5, #8
   80222:	dc61      	bgt.n	802e8 <can_init+0xd8>


	uint32_t ul_status; 
	
	//Disable can
	CAN0->CAN_MR &= ~CAN_MR_CANEN; 
   80224:	4a32      	ldr	r2, [pc, #200]	; (802f0 <can_init+0xe0>)
   80226:	6813      	ldr	r3, [r2, #0]
   80228:	f023 0301 	bic.w	r3, r3, #1
   8022c:	6013      	str	r3, [r2, #0]
	//Clear status register on read
	ul_status = CAN0->CAN_SR; 
   8022e:	6913      	ldr	r3, [r2, #16]
	
	
	// Disable interrupts on CANH and CANL pins
	PIOA->PIO_IDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80230:	4b30      	ldr	r3, [pc, #192]	; (802f4 <can_init+0xe4>)
   80232:	f44f 7440 	mov.w	r4, #768	; 0x300
   80236:	645c      	str	r4, [r3, #68]	; 0x44
	
	//Select CAN0 RX and TX in PIOA
	uint32_t ul_sr = PIOA->PIO_ABSR;
   80238:	6f1c      	ldr	r4, [r3, #112]	; 0x70
	PIOA->PIO_ABSR = ~(PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0) & ul_sr;
   8023a:	f024 0403 	bic.w	r4, r4, #3
   8023e:	671c      	str	r4, [r3, #112]	; 0x70
	
	// Disable the Parallel IO (PIO) of the Rx and Tx pins so that the peripheral controller can use them
	PIOA->PIO_PDR = PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0;
   80240:	2403      	movs	r4, #3
   80242:	605c      	str	r4, [r3, #4]
	
	// Enable pull up on CANH and CANL pin
	PIOA->PIO_PUER = (PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0);
   80244:	665c      	str	r4, [r3, #100]	; 0x64
	
	
	//Enable Clock for CAN0 in PMC
	PMC->PMC_PCR = PMC_PCR_EN | (0 << PMC_PCR_DIV_Pos) | PMC_PCR_CMD | (ID_CAN0 << PMC_PCR_PID_Pos); // DIV = 1(can clk = MCK/2), CMD = 1 (write), PID = 2B (CAN0)
   80246:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   8024a:	4c2b      	ldr	r4, [pc, #172]	; (802f8 <can_init+0xe8>)
   8024c:	f8c3 410c 	str.w	r4, [r3, #268]	; 0x10c
	PMC->PMC_PCER1 |= 1 << (ID_CAN0 - 32);
   80250:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
   80254:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
   80258:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
	
	//Set baudrate, Phase1, phase2 and propagation delay for can bus. Must match on all nodes!
	CAN0->CAN_BR = can_br; 
   8025c:	6150      	str	r0, [r2, #20]
	/****** Start of mailbox configuration ******/

	uint32_t can_ier = 0;

	/* Configure receive mailboxes */
	for (int n = num_tx_mb; n <= num_rx_mb + num_tx_mb; n++)  //Simply one mailbox setup for all messages. You might want to apply filter for them.
   8025e:	42a9      	cmp	r1, r5
   80260:	dc40      	bgt.n	802e4 <can_init+0xd4>
   80262:	460a      	mov	r2, r1
   80264:	2400      	movs	r4, #0
	{
		CAN0->CAN_MB[n].CAN_MAM = 0; //Accept all messages
   80266:	46a1      	mov	r9, r4
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   80268:	f8df 8084 	ldr.w	r8, [pc, #132]	; 802f0 <can_init+0xe0>
   8026c:	f04f 5c00 	mov.w	ip, #536870912	; 0x20000000
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_RX);
   80270:	f04f 7e80 	mov.w	lr, #16777216	; 0x1000000
		CAN0->CAN_MB[n].CAN_MCR |= CAN_MCR_MTCR;

		can_ier |= 1 << n; //Enable interrupt on rx mailbox
   80274:	2701      	movs	r7, #1
   80276:	0153      	lsls	r3, r2, #5
   80278:	f103 2040 	add.w	r0, r3, #1073758208	; 0x40004000
   8027c:	f500 2030 	add.w	r0, r0, #720896	; 0xb0000
		CAN0->CAN_MB[n].CAN_MAM = 0; //Accept all messages
   80280:	f8c0 9204 	str.w	r9, [r0, #516]	; 0x204
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   80284:	4443      	add	r3, r8
   80286:	f8c3 c208 	str.w	ip, [r3, #520]	; 0x208
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_RX);
   8028a:	f8c0 e200 	str.w	lr, [r0, #512]	; 0x200
		CAN0->CAN_MB[n].CAN_MCR |= CAN_MCR_MTCR;
   8028e:	f8d3 021c 	ldr.w	r0, [r3, #540]	; 0x21c
   80292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   80296:	f8c3 021c 	str.w	r0, [r3, #540]	; 0x21c
		can_ier |= 1 << n; //Enable interrupt on rx mailbox
   8029a:	fa07 f302 	lsl.w	r3, r7, r2
   8029e:	431c      	orrs	r4, r3
	for (int n = num_tx_mb; n <= num_rx_mb + num_tx_mb; n++)  //Simply one mailbox setup for all messages. You might want to apply filter for them.
   802a0:	3201      	adds	r2, #1
   802a2:	4295      	cmp	r5, r2
   802a4:	dae7      	bge.n	80276 <can_init+0x66>
	}
	
	/*Configure transmit mailboxes */
	for (int n = 0; n < num_tx_mb; n++)
   802a6:	b181      	cbz	r1, 802ca <can_init+0xba>
   802a8:	2300      	movs	r3, #0
	{
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   802aa:	4911      	ldr	r1, [pc, #68]	; (802f0 <can_init+0xe0>)
   802ac:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_TX);
   802b0:	f04f 7040 	mov.w	r0, #50331648	; 0x3000000
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   802b4:	eb01 1243 	add.w	r2, r1, r3, lsl #5
   802b8:	f8c2 5208 	str.w	r5, [r2, #520]	; 0x208
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_TX);
   802bc:	f103 0210 	add.w	r2, r3, #16
   802c0:	0152      	lsls	r2, r2, #5
   802c2:	5088      	str	r0, [r1, r2]
	for (int n = 0; n < num_tx_mb; n++)
   802c4:	3301      	adds	r3, #1
   802c6:	429e      	cmp	r6, r3
   802c8:	d1f4      	bne.n	802b4 <can_init+0xa4>
	}
	
	/****** End of mailbox configuraion ******/

	//Enable interrupt on receive mailboxes
	CAN0->CAN_IER = can_ier;
   802ca:	4b09      	ldr	r3, [pc, #36]	; (802f0 <can_init+0xe0>)
   802cc:	605c      	str	r4, [r3, #4]
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   802ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
   802d2:	4a0a      	ldr	r2, [pc, #40]	; (802fc <can_init+0xec>)
   802d4:	6051      	str	r1, [r2, #4]

	//Enable interrupt in NVIC 
	NVIC_EnableIRQ(ID_CAN0);

	//enable CAN
	CAN0->CAN_MR |= CAN_MR_CANEN;
   802d6:	681a      	ldr	r2, [r3, #0]
   802d8:	f042 0201 	orr.w	r2, r2, #1
   802dc:	601a      	str	r2, [r3, #0]

	return 0;
   802de:	2000      	movs	r0, #0
   802e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint32_t can_ier = 0;
   802e4:	2400      	movs	r4, #0
   802e6:	e7de      	b.n	802a6 <can_init+0x96>
		return 1; //Too many mailboxes is configured
   802e8:	2001      	movs	r0, #1
}
   802ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   802ee:	bf00      	nop
   802f0:	400b4000 	.word	0x400b4000
   802f4:	400e0e00 	.word	0x400e0e00
   802f8:	1000102b 	.word	0x1000102b
   802fc:	e000e100 	.word	0xe000e100

00080300 <can_init_def_tx_rx_mb>:
{
   80300:	b508      	push	{r3, lr}
	return can_init(can_br, 1, 2);
   80302:	2202      	movs	r2, #2
   80304:	2101      	movs	r1, #1
   80306:	4b01      	ldr	r3, [pc, #4]	; (8030c <can_init_def_tx_rx_mb+0xc>)
   80308:	4798      	blx	r3
}
   8030a:	bd08      	pop	{r3, pc}
   8030c:	00080211 	.word	0x00080211

00080310 <can_send>:
 * \retval Success(0) or failure(1)
 */
uint8_t can_send(CAN_MESSAGE* can_msg, uint8_t tx_mb_id)
{
	//Check that mailbox is ready
	if(CAN0->CAN_MB[tx_mb_id].CAN_MSR & CAN_MSR_MRDY)
   80310:	014b      	lsls	r3, r1, #5
   80312:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   80316:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   8031a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   8031e:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   80322:	d036      	beq.n	80392 <can_send+0x82>
	{
		//Set message ID and use CAN 2.0B protocol
		CAN0->CAN_MB[tx_mb_id].CAN_MID = CAN_MID_MIDvA(can_msg->id) | CAN_MID_MIDE ;
   80324:	8803      	ldrh	r3, [r0, #0]
   80326:	4a1c      	ldr	r2, [pc, #112]	; (80398 <can_send+0x88>)
   80328:	ea02 4283 	and.w	r2, r2, r3, lsl #18
   8032c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   80330:	014b      	lsls	r3, r1, #5
   80332:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   80336:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   8033a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
		
		//Make sure message is not to long
		if(can_msg->data_length > 7){
   8033e:	7883      	ldrb	r3, [r0, #2]
   80340:	2b07      	cmp	r3, #7
			can_msg->data_length = 7;
   80342:	bf84      	itt	hi
   80344:	2307      	movhi	r3, #7
   80346:	7083      	strbhi	r3, [r0, #2]
			//Message is to long, sending only the first 8 bytes
		}
		//Put message in can data registers
		CAN0->CAN_MB[tx_mb_id].CAN_MDL = can_msg->data[3] << 24 | can_msg->data[2] << 16 | can_msg->data[1] << 8 | can_msg->data[0];
   80348:	7982      	ldrb	r2, [r0, #6]
   8034a:	7943      	ldrb	r3, [r0, #5]
   8034c:	041b      	lsls	r3, r3, #16
   8034e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   80352:	78c2      	ldrb	r2, [r0, #3]
   80354:	4313      	orrs	r3, r2
   80356:	7902      	ldrb	r2, [r0, #4]
   80358:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   8035c:	0149      	lsls	r1, r1, #5
   8035e:	f101 2140 	add.w	r1, r1, #1073758208	; 0x40004000
   80362:	f501 2130 	add.w	r1, r1, #720896	; 0xb0000
   80366:	f8c1 3214 	str.w	r3, [r1, #532]	; 0x214
		CAN0->CAN_MB[tx_mb_id].CAN_MDH = can_msg->data[7] << 24 | can_msg->data[6] << 16 | can_msg->data[5] << 8 | can_msg->data[4];
   8036a:	7a82      	ldrb	r2, [r0, #10]
   8036c:	7a43      	ldrb	r3, [r0, #9]
   8036e:	041b      	lsls	r3, r3, #16
   80370:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   80374:	79c2      	ldrb	r2, [r0, #7]
   80376:	4313      	orrs	r3, r2
   80378:	7a02      	ldrb	r2, [r0, #8]
   8037a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   8037e:	f8c1 3218 	str.w	r3, [r1, #536]	; 0x218
		
		//Set message length and mailbox ready to send
		CAN0->CAN_MB[tx_mb_id].CAN_MCR = (can_msg->data_length << CAN_MCR_MDLC_Pos) | CAN_MCR_MTCR;
   80382:	7883      	ldrb	r3, [r0, #2]
   80384:	041b      	lsls	r3, r3, #16
   80386:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   8038a:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c
		return 0;
   8038e:	2000      	movs	r0, #0
   80390:	4770      	bx	lr
	}
	
	else //Mailbox busy
	{
		return 1;
   80392:	2001      	movs	r0, #1
	}
	
}
   80394:	4770      	bx	lr
   80396:	bf00      	nop
   80398:	1ffc0000 	.word	0x1ffc0000

0008039c <can_receive>:
 * \retval Success(0) or failure(1)
 */
uint8_t can_receive(CAN_MESSAGE* can_msg, uint8_t rx_mb_id)
{	
	
	//Check that mailbox is ready
	if(CAN0->CAN_MB[rx_mb_id].CAN_MSR & CAN_MSR_MRDY)
   8039c:	014b      	lsls	r3, r1, #5
   8039e:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   803a2:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   803a6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   803aa:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   803ae:	d033      	beq.n	80418 <can_receive+0x7c>
{
   803b0:	b430      	push	{r4, r5}
	{
		//Get data from CAN mailbox
		uint32_t data_low = CAN0->CAN_MB[rx_mb_id].CAN_MDL;
   803b2:	014b      	lsls	r3, r1, #5
   803b4:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   803b8:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   803bc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
		uint32_t data_high = CAN0->CAN_MB[rx_mb_id].CAN_MDH;
   803c0:	f8d3 4218 	ldr.w	r4, [r3, #536]	; 0x218
		
		//Get message ID
		can_msg->id = (uint16_t)((CAN0->CAN_MB[rx_mb_id].CAN_MID & CAN_MID_MIDvA_Msk) >> CAN_MID_MIDvA_Pos);
   803c4:	f8d3 5208 	ldr.w	r5, [r3, #520]	; 0x208
   803c8:	f3c5 458a 	ubfx	r5, r5, #18, #11
   803cc:	8005      	strh	r5, [r0, #0]
		
		//Get data length
		can_msg->data_length = (uint8_t)((CAN0->CAN_MB[rx_mb_id].CAN_MSR & CAN_MSR_MDLC_Msk) >> CAN_MSR_MDLC_Pos);
   803ce:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   803d2:	f3c3 4303 	ubfx	r3, r3, #16, #4
   803d6:	7083      	strb	r3, [r0, #2]
		
		//Put data in CAN_MESSAGE object
		for(int i = 0; i < can_msg->data_length;i++)
   803d8:	461d      	mov	r5, r3
   803da:	b15b      	cbz	r3, 803f4 <can_receive+0x58>
   803dc:	3003      	adds	r0, #3
   803de:	2300      	movs	r3, #0
		{
			if(i < 4)
   803e0:	2b03      	cmp	r3, #3
			{
				can_msg->data[i] = (char)(data_low & 0xff);
   803e2:	bfd9      	ittee	le
   803e4:	7002      	strble	r2, [r0, #0]
				data_low = data_low >> 8;
   803e6:	0a12      	lsrle	r2, r2, #8
			}
			else
			{
				can_msg->data[i] = (uint8_t)(data_high & 0xff);
   803e8:	7004      	strbgt	r4, [r0, #0]
				data_high = data_high >> 8;
   803ea:	0a24      	lsrgt	r4, r4, #8
		for(int i = 0; i < can_msg->data_length;i++)
   803ec:	3301      	adds	r3, #1
   803ee:	3001      	adds	r0, #1
   803f0:	42ab      	cmp	r3, r5
   803f2:	d1f5      	bne.n	803e0 <can_receive+0x44>
			}
		}
		
		//Reset for new receive
		CAN0->CAN_MB[rx_mb_id].CAN_MMR = CAN_MMR_MOT_MB_RX;
   803f4:	4b09      	ldr	r3, [pc, #36]	; (8041c <can_receive+0x80>)
   803f6:	f101 0210 	add.w	r2, r1, #16
   803fa:	0152      	lsls	r2, r2, #5
   803fc:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   80400:	5098      	str	r0, [r3, r2]
		CAN0->CAN_MB[rx_mb_id].CAN_MCR |= CAN_MCR_MTCR;
   80402:	eb03 1141 	add.w	r1, r3, r1, lsl #5
   80406:	f8d1 321c 	ldr.w	r3, [r1, #540]	; 0x21c
   8040a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   8040e:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c
		return 0;
   80412:	2000      	movs	r0, #0
	}
	else //Mailbox busy
	{
		return 1;
	}
}
   80414:	bc30      	pop	{r4, r5}
   80416:	4770      	bx	lr
		return 1;
   80418:	2001      	movs	r0, #1
   8041a:	4770      	bx	lr
   8041c:	400b4000 	.word	0x400b4000

00080420 <CAN0_Handler>:
 * \param void
 *
 * \retval 
 */
void CAN0_Handler( void )
{
   80420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80424:	b084      	sub	sp, #16
	if(DEBUG_INTERRUPT){}/*printf("CAN0 interrupt\n\r")*/;
	char can_sr = CAN0->CAN_SR; 
   80426:	4b39      	ldr	r3, [pc, #228]	; (8050c <CAN0_Handler+0xec>)
   80428:	691c      	ldr	r4, [r3, #16]
	
	//RX interrupt
	if(can_sr & (CAN_SR_MB1 | CAN_SR_MB2) )//Only mailbox 1 and 2 specified for receiving
   8042a:	f014 0f06 	tst.w	r4, #6
   8042e:	d039      	beq.n	804a4 <CAN0_Handler+0x84>
	{
		CAN_MESSAGE message;
		if(can_sr & CAN_SR_MB1)  //Mailbox 1 event
   80430:	f014 0f02 	tst.w	r4, #2
   80434:	d144      	bne.n	804c0 <CAN0_Handler+0xa0>
		{
			can_receive(&message, 1);

		}
		else if(can_sr & CAN_SR_MB2) //Mailbox 2 event
   80436:	f014 0f04 	tst.w	r4, #4
   8043a:	d046      	beq.n	804ca <CAN0_Handler+0xaa>
		
		{
			can_receive(&message, 2);
   8043c:	2102      	movs	r1, #2
   8043e:	a801      	add	r0, sp, #4
   80440:	4b33      	ldr	r3, [pc, #204]	; (80510 <CAN0_Handler+0xf0>)
   80442:	4798      	blx	r3
		else
		{
			printf("CAN0 message arrived in non-used mailbox\n\r");
		}
		
		if(message.id < 0x00ff && message.id > 0x000f){
   80444:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   80448:	f1a1 0310 	sub.w	r3, r1, #16
   8044c:	b29b      	uxth	r3, r3
   8044e:	2bee      	cmp	r3, #238	; 0xee
   80450:	d83f      	bhi.n	804d2 <CAN0_Handler+0xb2>
			//interpret_joystick
			/*printf("Joystick %d \n\r", message.id);
			printf("Joystick %d \n\r", message.data[5]);*/
			joystick.x_val = (message.data[3] == 0x11) ? message.data[0] : message.data[0]*-1;
   80452:	f89d 300a 	ldrb.w	r3, [sp, #10]
   80456:	2b11      	cmp	r3, #17
   80458:	bf0f      	iteee	eq
   8045a:	f99d 3007 	ldrsbeq.w	r3, [sp, #7]
   8045e:	f89d 3007 	ldrbne.w	r3, [sp, #7]
   80462:	425b      	negne	r3, r3
   80464:	b25b      	sxtbne	r3, r3
   80466:	4a2b      	ldr	r2, [pc, #172]	; (80514 <CAN0_Handler+0xf4>)
   80468:	7013      	strb	r3, [r2, #0]
			joystick.y_val = (message.data[4] == 0x11) ? message.data[1] : message.data[1]*-1;
   8046a:	f89d 300b 	ldrb.w	r3, [sp, #11]
   8046e:	2b11      	cmp	r3, #17
   80470:	bf0f      	iteee	eq
   80472:	f99d 2008 	ldrsbeq.w	r2, [sp, #8]
   80476:	f89d 2008 	ldrbne.w	r2, [sp, #8]
   8047a:	4252      	negne	r2, r2
   8047c:	b252      	sxtbne	r2, r2
   8047e:	4b25      	ldr	r3, [pc, #148]	; (80514 <CAN0_Handler+0xf4>)
   80480:	705a      	strb	r2, [r3, #1]
			joystick.butt_pressed = message.data[2];
   80482:	f89d 2009 	ldrb.w	r2, [sp, #9]
   80486:	709a      	strb	r2, [r3, #2]
			joystick.left_val = message.data[5];
   80488:	f89d 200c 	ldrb.w	r2, [sp, #12]
   8048c:	70da      	strb	r2, [r3, #3]
			joystick.right_val = message.data[6];
   8048e:	f89d 200d 	ldrb.w	r2, [sp, #13]
   80492:	711a      	strb	r2, [r3, #4]
			joystick.left_button = message.data[7] & 0b00000010;
   80494:	f99d 200e 	ldrsb.w	r2, [sp, #14]
   80498:	f002 0102 	and.w	r1, r2, #2
   8049c:	7159      	strb	r1, [r3, #5]
			joystick.right_button = message.data[7] & 0b00000001;
   8049e:	f002 0201 	and.w	r2, r2, #1
   804a2:	719a      	strb	r2, [r3, #6]
			if(DEBUG_INTERRUPT)printf("\n\r");
		}
		
	}
	
	if(can_sr & CAN_SR_MB0)
   804a4:	f014 0f01 	tst.w	r4, #1
   804a8:	d002      	beq.n	804b0 <CAN0_Handler+0x90>
	{
		/*if(DEBUG_INTERRUPT) printf("CAN0 MB0 ready to send \n\r");*/
		
	//Disable interrupt
		CAN0->CAN_IDR = CAN_IER_MB0;
   804aa:	2201      	movs	r2, #1
   804ac:	4b17      	ldr	r3, [pc, #92]	; (8050c <CAN0_Handler+0xec>)
   804ae:	609a      	str	r2, [r3, #8]
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   804b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
   804b4:	4b18      	ldr	r3, [pc, #96]	; (80518 <CAN0_Handler+0xf8>)
   804b6:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184

	}
	
	NVIC_ClearPendingIRQ(ID_CAN0);
	//sei();*/
}
   804ba:	b004      	add	sp, #16
   804bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			can_receive(&message, 1);
   804c0:	2101      	movs	r1, #1
   804c2:	a801      	add	r0, sp, #4
   804c4:	4b12      	ldr	r3, [pc, #72]	; (80510 <CAN0_Handler+0xf0>)
   804c6:	4798      	blx	r3
   804c8:	e7bc      	b.n	80444 <CAN0_Handler+0x24>
			printf("CAN0 message arrived in non-used mailbox\n\r");
   804ca:	4814      	ldr	r0, [pc, #80]	; (8051c <CAN0_Handler+0xfc>)
   804cc:	4b14      	ldr	r3, [pc, #80]	; (80520 <CAN0_Handler+0x100>)
   804ce:	4798      	blx	r3
   804d0:	e7b8      	b.n	80444 <CAN0_Handler+0x24>
			if(DEBUG_INTERRUPT)printf("message id: %d\n\r", message.id);
   804d2:	4814      	ldr	r0, [pc, #80]	; (80524 <CAN0_Handler+0x104>)
   804d4:	4d12      	ldr	r5, [pc, #72]	; (80520 <CAN0_Handler+0x100>)
   804d6:	47a8      	blx	r5
			if(DEBUG_INTERRUPT)printf("message data length: %d\n\r", message.data_length);
   804d8:	f89d 1006 	ldrb.w	r1, [sp, #6]
   804dc:	4812      	ldr	r0, [pc, #72]	; (80528 <CAN0_Handler+0x108>)
   804de:	47a8      	blx	r5
			for (int i = 0; i < message.data_length; i++)
   804e0:	f89d 3006 	ldrb.w	r3, [sp, #6]
   804e4:	b173      	cbz	r3, 80504 <CAN0_Handler+0xe4>
   804e6:	f10d 0607 	add.w	r6, sp, #7
   804ea:	2500      	movs	r5, #0
				if(DEBUG_INTERRUPT)printf("%d ", message.data[i]);
   804ec:	f8df 8040 	ldr.w	r8, [pc, #64]	; 80530 <CAN0_Handler+0x110>
   804f0:	4f0b      	ldr	r7, [pc, #44]	; (80520 <CAN0_Handler+0x100>)
   804f2:	f816 1b01 	ldrb.w	r1, [r6], #1
   804f6:	4640      	mov	r0, r8
   804f8:	47b8      	blx	r7
			for (int i = 0; i < message.data_length; i++)
   804fa:	3501      	adds	r5, #1
   804fc:	f89d 3006 	ldrb.w	r3, [sp, #6]
   80500:	42ab      	cmp	r3, r5
   80502:	dcf6      	bgt.n	804f2 <CAN0_Handler+0xd2>
			if(DEBUG_INTERRUPT)printf("\n\r");
   80504:	4809      	ldr	r0, [pc, #36]	; (8052c <CAN0_Handler+0x10c>)
   80506:	4b06      	ldr	r3, [pc, #24]	; (80520 <CAN0_Handler+0x100>)
   80508:	4798      	blx	r3
   8050a:	e7cb      	b.n	804a4 <CAN0_Handler+0x84>
   8050c:	400b4000 	.word	0x400b4000
   80510:	0008039d 	.word	0x0008039d
   80514:	200004ac 	.word	0x200004ac
   80518:	e000e100 	.word	0xe000e100
   8051c:	00081b00 	.word	0x00081b00
   80520:	00080e21 	.word	0x00080e21
   80524:	00081b2c 	.word	0x00081b2c
   80528:	00081b40 	.word	0x00081b40
   8052c:	00081b28 	.word	0x00081b28
   80530:	00081b5c 	.word	0x00081b5c

00080534 <dac_init>:



void dac_init(){
	
	PMC->PMC_PCER1 = PMC_PCER1_PID38;
   80534:	2240      	movs	r2, #64	; 0x40
   80536:	4b09      	ldr	r3, [pc, #36]	; (8055c <dac_init+0x28>)
   80538:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	
	
	DACC->DACC_MR |= DACC_MR_USER_SEL_CHANNEL1;
   8053c:	f5a3 33c3 	sub.w	r3, r3, #99840	; 0x18600
   80540:	685a      	ldr	r2, [r3, #4]
   80542:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
   80546:	605a      	str	r2, [r3, #4]
	DACC->DACC_MR &= ~(1<<0); //disable trigger, set freemode
   80548:	685a      	ldr	r2, [r3, #4]
   8054a:	f022 0201 	bic.w	r2, r2, #1
   8054e:	605a      	str	r2, [r3, #4]
	//DACC->DACC_MR |= DACC_MR_WORD_WORD;
	//DACC->DACC_CHER |= DACC_CHER_CH0;
	DACC->DACC_CHER = DACC_CHER_CH1;
   80550:	2202      	movs	r2, #2
   80552:	611a      	str	r2, [r3, #16]
	
	DACC->DACC_CDR = 0x05ff;
   80554:	f240 52ff 	movw	r2, #1535	; 0x5ff
   80558:	621a      	str	r2, [r3, #32]
   8055a:	4770      	bx	lr
   8055c:	400e0600 	.word	0x400e0600

00080560 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80560:	e7fe      	b.n	80560 <Dummy_Handler>
	...

00080564 <Reset_Handler>:
{
   80564:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
   80566:	4b18      	ldr	r3, [pc, #96]	; (805c8 <Reset_Handler+0x64>)
   80568:	4a18      	ldr	r2, [pc, #96]	; (805cc <Reset_Handler+0x68>)
   8056a:	429a      	cmp	r2, r3
   8056c:	d010      	beq.n	80590 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
   8056e:	4b18      	ldr	r3, [pc, #96]	; (805d0 <Reset_Handler+0x6c>)
   80570:	4a15      	ldr	r2, [pc, #84]	; (805c8 <Reset_Handler+0x64>)
   80572:	429a      	cmp	r2, r3
   80574:	d20c      	bcs.n	80590 <Reset_Handler+0x2c>
   80576:	3b01      	subs	r3, #1
   80578:	1a9b      	subs	r3, r3, r2
   8057a:	f023 0303 	bic.w	r3, r3, #3
   8057e:	3304      	adds	r3, #4
   80580:	4413      	add	r3, r2
   80582:	4912      	ldr	r1, [pc, #72]	; (805cc <Reset_Handler+0x68>)
                        *pDest++ = *pSrc++;
   80584:	f851 0b04 	ldr.w	r0, [r1], #4
   80588:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
   8058c:	429a      	cmp	r2, r3
   8058e:	d1f9      	bne.n	80584 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
   80590:	4b10      	ldr	r3, [pc, #64]	; (805d4 <Reset_Handler+0x70>)
   80592:	4a11      	ldr	r2, [pc, #68]	; (805d8 <Reset_Handler+0x74>)
   80594:	429a      	cmp	r2, r3
   80596:	d20a      	bcs.n	805ae <Reset_Handler+0x4a>
   80598:	3b01      	subs	r3, #1
   8059a:	1a9b      	subs	r3, r3, r2
   8059c:	f023 0303 	bic.w	r3, r3, #3
   805a0:	3304      	adds	r3, #4
   805a2:	4413      	add	r3, r2
                *pDest++ = 0;
   805a4:	2100      	movs	r1, #0
   805a6:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
   805aa:	4293      	cmp	r3, r2
   805ac:	d1fb      	bne.n	805a6 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   805ae:	4b0b      	ldr	r3, [pc, #44]	; (805dc <Reset_Handler+0x78>)
   805b0:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   805b4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   805b8:	4a09      	ldr	r2, [pc, #36]	; (805e0 <Reset_Handler+0x7c>)
   805ba:	6093      	str	r3, [r2, #8]
        __libc_init_array();
   805bc:	4b09      	ldr	r3, [pc, #36]	; (805e4 <Reset_Handler+0x80>)
   805be:	4798      	blx	r3
        main();
   805c0:	4b09      	ldr	r3, [pc, #36]	; (805e8 <Reset_Handler+0x84>)
   805c2:	4798      	blx	r3
   805c4:	e7fe      	b.n	805c4 <Reset_Handler+0x60>
   805c6:	bf00      	nop
   805c8:	20000000 	.word	0x20000000
   805cc:	00081c18 	.word	0x00081c18
   805d0:	20000454 	.word	0x20000454
   805d4:	2000051c 	.word	0x2000051c
   805d8:	20000458 	.word	0x20000458
   805dc:	00080000 	.word	0x00080000
   805e0:	e000ed00 	.word	0xe000ed00
   805e4:	00081991 	.word	0x00081991
   805e8:	000809b9 	.word	0x000809b9

000805ec <SystemInit>:
 * Initialize the System and update the SystemFrequency variable.
 */
void SystemInit( void )
{
  /* Set FWS according to SYS_BOARD_MCKR configuration */
  EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   805ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
   805f0:	4a20      	ldr	r2, [pc, #128]	; (80674 <SystemInit+0x88>)
   805f2:	6013      	str	r3, [r2, #0]
  EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
   805f4:	f502 7200 	add.w	r2, r2, #512	; 0x200
   805f8:	6013      	str	r3, [r2, #0]

  /* Initialize main oscillator */
  if ( !(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) )
   805fa:	4b1f      	ldr	r3, [pc, #124]	; (80678 <SystemInit+0x8c>)
   805fc:	6a1b      	ldr	r3, [r3, #32]
   805fe:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80602:	d107      	bne.n	80614 <SystemInit+0x28>
  {
    PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
   80604:	4a1d      	ldr	r2, [pc, #116]	; (8067c <SystemInit+0x90>)
   80606:	4b1c      	ldr	r3, [pc, #112]	; (80678 <SystemInit+0x8c>)
   80608:	621a      	str	r2, [r3, #32]
    while ( !(PMC->PMC_SR & PMC_SR_MOSCXTS) )
   8060a:	461a      	mov	r2, r3
   8060c:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8060e:	f013 0f01 	tst.w	r3, #1
   80612:	d0fb      	beq.n	8060c <SystemInit+0x20>
    {
    }
  }

  /* Switch to 3-20MHz Xtal oscillator */
  PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;
   80614:	4a1a      	ldr	r2, [pc, #104]	; (80680 <SystemInit+0x94>)
   80616:	4b18      	ldr	r3, [pc, #96]	; (80678 <SystemInit+0x8c>)
   80618:	621a      	str	r2, [r3, #32]

  while ( !(PMC->PMC_SR & PMC_SR_MOSCSELS) )
   8061a:	461a      	mov	r2, r3
   8061c:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8061e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   80622:	d0fb      	beq.n	8061c <SystemInit+0x30>
  {
  }
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   80624:	4a14      	ldr	r2, [pc, #80]	; (80678 <SystemInit+0x8c>)
   80626:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80628:	f023 0303 	bic.w	r3, r3, #3
   8062c:	f043 0301 	orr.w	r3, r3, #1
   80630:	6313      	str	r3, [r2, #48]	; 0x30
  while (!(PMC->PMC_SR & PMC_SR_MCKRDY))
   80632:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80634:	f013 0f08 	tst.w	r3, #8
   80638:	d0fb      	beq.n	80632 <SystemInit+0x46>
  {
  }

  /* Initialize PLLA */
  PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
   8063a:	4a12      	ldr	r2, [pc, #72]	; (80684 <SystemInit+0x98>)
   8063c:	4b0e      	ldr	r3, [pc, #56]	; (80678 <SystemInit+0x8c>)
   8063e:	629a      	str	r2, [r3, #40]	; 0x28
  while ( !(PMC->PMC_SR & PMC_SR_LOCKA) )
   80640:	461a      	mov	r2, r3
   80642:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80644:	f013 0f02 	tst.w	r3, #2
   80648:	d0fb      	beq.n	80642 <SystemInit+0x56>
  {
  }

  /* Switch to main clock */
  PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   8064a:	2211      	movs	r2, #17
   8064c:	4b0a      	ldr	r3, [pc, #40]	; (80678 <SystemInit+0x8c>)
   8064e:	631a      	str	r2, [r3, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   80650:	461a      	mov	r2, r3
   80652:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80654:	f013 0f08 	tst.w	r3, #8
   80658:	d0fb      	beq.n	80652 <SystemInit+0x66>
  {
  }

  /* Switch to PLLA */
  PMC->PMC_MCKR = SYS_BOARD_MCKR;
   8065a:	2212      	movs	r2, #18
   8065c:	4b06      	ldr	r3, [pc, #24]	; (80678 <SystemInit+0x8c>)
   8065e:	631a      	str	r2, [r3, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   80660:	461a      	mov	r2, r3
   80662:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80664:	f013 0f08 	tst.w	r3, #8
   80668:	d0fb      	beq.n	80662 <SystemInit+0x76>
  {
  }

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
   8066a:	4a07      	ldr	r2, [pc, #28]	; (80688 <SystemInit+0x9c>)
   8066c:	4b07      	ldr	r3, [pc, #28]	; (8068c <SystemInit+0xa0>)
   8066e:	601a      	str	r2, [r3, #0]
   80670:	4770      	bx	lr
   80672:	bf00      	nop
   80674:	400e0a00 	.word	0x400e0a00
   80678:	400e0600 	.word	0x400e0600
   8067c:	00370809 	.word	0x00370809
   80680:	01370809 	.word	0x01370809
   80684:	200d3f01 	.word	0x200d3f01
   80688:	0501bd00 	.word	0x0501bd00
   8068c:	20000000 	.word	0x20000000

00080690 <send_time_to_node_1>:
#include "feedback.h"
#include "can_controller.h"
#include "timer.h"

void send_time_to_node_1(CAN_MESSAGE* msgToSend){
   80690:	b538      	push	{r3, r4, r5, lr}
   80692:	4604      	mov	r4, r0
    //Somewhat random test that fails 75% of the time to avoid spamming the CAN bus
	if(!(return_milliseconds()%4)){ 
   80694:	4b0e      	ldr	r3, [pc, #56]	; (806d0 <send_time_to_node_1+0x40>)
   80696:	4798      	blx	r3
   80698:	f010 0f03 	tst.w	r0, #3
   8069c:	d000      	beq.n	806a0 <send_time_to_node_1+0x10>
   8069e:	bd38      	pop	{r3, r4, r5, pc}
        msgToSend->data_length = 2;
   806a0:	2302      	movs	r3, #2
   806a2:	70a3      	strb	r3, [r4, #2]
        //High ID  since this is a non-urgent message
		uint16_t temp = 0x8;
        msgToSend->id = temp;
   806a4:	2308      	movs	r3, #8
   806a6:	8023      	strh	r3, [r4, #0]
        msgToSend->data[0] = (uint8_t) (return_seconds() & 0x00FF);
   806a8:	4d0a      	ldr	r5, [pc, #40]	; (806d4 <send_time_to_node_1+0x44>)
   806aa:	47a8      	blx	r5
   806ac:	70e0      	strb	r0, [r4, #3]
        msgToSend->data[1] = (uint8_t) (return_seconds() & 0xFF00);
   806ae:	47a8      	blx	r5
   806b0:	2100      	movs	r1, #0
   806b2:	7121      	strb	r1, [r4, #4]
		can_send(msgToSend, 0);
   806b4:	4620      	mov	r0, r4
   806b6:	4b08      	ldr	r3, [pc, #32]	; (806d8 <send_time_to_node_1+0x48>)
   806b8:	4798      	blx	r3
		printf("message id: %x \r\n", msgToSend->id);
   806ba:	8821      	ldrh	r1, [r4, #0]
   806bc:	4807      	ldr	r0, [pc, #28]	; (806dc <send_time_to_node_1+0x4c>)
   806be:	4d08      	ldr	r5, [pc, #32]	; (806e0 <send_time_to_node_1+0x50>)
   806c0:	47a8      	blx	r5
		printf("message length: %x \r\n", msgToSend->data_length);
   806c2:	78a1      	ldrb	r1, [r4, #2]
   806c4:	4807      	ldr	r0, [pc, #28]	; (806e4 <send_time_to_node_1+0x54>)
   806c6:	47a8      	blx	r5
		printf("message data: %d \r\n", msgToSend->data[0]);
   806c8:	78e1      	ldrb	r1, [r4, #3]
   806ca:	4807      	ldr	r0, [pc, #28]	; (806e8 <send_time_to_node_1+0x58>)
   806cc:	47a8      	blx	r5
	}
}
   806ce:	e7e6      	b.n	8069e <send_time_to_node_1+0xe>
   806d0:	00080e69 	.word	0x00080e69
   806d4:	00080e75 	.word	0x00080e75
   806d8:	00080311 	.word	0x00080311
   806dc:	00081b60 	.word	0x00081b60
   806e0:	00080e21 	.word	0x00080e21
   806e4:	00081b74 	.word	0x00081b74
   806e8:	00081b8c 	.word	0x00081b8c

000806ec <send_goals_to_node_1>:

void send_goals_to_node_1(CAN_MESSAGE* msgToSend, uint8_t goals){
   806ec:	b508      	push	{r3, lr}
    msgToSend->data_length = 1;
   806ee:	2201      	movs	r2, #1
   806f0:	7082      	strb	r2, [r0, #2]
    //Low ID  since this is an urgent message
	uint16_t temp = 0x1;
    msgToSend->id = temp;    
   806f2:	8002      	strh	r2, [r0, #0]
    msgToSend->data[0] = goals;
   806f4:	70c1      	strb	r1, [r0, #3]
	can_send(msgToSend, 0);
   806f6:	2100      	movs	r1, #0
   806f8:	4b01      	ldr	r3, [pc, #4]	; (80700 <send_goals_to_node_1+0x14>)
   806fa:	4798      	blx	r3
   806fc:	bd08      	pop	{r3, pc}
   806fe:	bf00      	nop
   80700:	00080311 	.word	0x00080311

00080704 <send_motor_info_to_node_1>:
}

void send_motor_info_to_node_1(CAN_MESSAGE* msgToSend, uint8_t y_pos, uint8_t solenoide){
   80704:	b510      	push	{r4, lr}
   80706:	4604      	mov	r4, r0
    msgToSend->data_length = 2;
   80708:	2302      	movs	r3, #2
   8070a:	7083      	strb	r3, [r0, #2]
	uint16_t temp = 0x4;
    msgToSend->id = temp;
   8070c:	2304      	movs	r3, #4
   8070e:	8003      	strh	r3, [r0, #0]
    msgToSend->data[0] = y_pos;
   80710:	70c1      	strb	r1, [r0, #3]
    msgToSend->data[1] = solenoide;
   80712:	7102      	strb	r2, [r0, #4]
	can_send(msgToSend, 0);
   80714:	2100      	movs	r1, #0
   80716:	4b03      	ldr	r3, [pc, #12]	; (80724 <send_motor_info_to_node_1+0x20>)
   80718:	4798      	blx	r3
	printf("message length: %x \r\n", msgToSend->data_length);
   8071a:	78a1      	ldrb	r1, [r4, #2]
   8071c:	4802      	ldr	r0, [pc, #8]	; (80728 <send_motor_info_to_node_1+0x24>)
   8071e:	4b03      	ldr	r3, [pc, #12]	; (8072c <send_motor_info_to_node_1+0x28>)
   80720:	4798      	blx	r3
   80722:	bd10      	pop	{r4, pc}
   80724:	00080311 	.word	0x00080311
   80728:	00081b74 	.word	0x00081b74
   8072c:	00080e21 	.word	0x00080e21

00080730 <get_solenoid_status>:
 uint8_t y_value_pi = 0;
 uint8_t solenoide_status = 0;

 uint8_t get_solenoid_status(){
	 return solenoide_status;
 }
   80730:	4b01      	ldr	r3, [pc, #4]	; (80738 <get_solenoid_status+0x8>)
   80732:	7818      	ldrb	r0, [r3, #0]
   80734:	4770      	bx	lr
   80736:	bf00      	nop
   80738:	2000047c 	.word	0x2000047c

0008073c <move_solenoid>:

void reset_solenoid_status(){
	solenoide_status = 0;
 }
 
 void move_solenoid(){
   8073c:	b510      	push	{r4, lr}
	 //printf("joystick.x_val : %d \n\r", joystick.x_val);
	 
	  
	 
	 if(joystick.x_val < 0){
   8073e:	4b17      	ldr	r3, [pc, #92]	; (8079c <move_solenoid+0x60>)
   80740:	f993 0000 	ldrsb.w	r0, [r3]
   80744:	2800      	cmp	r0, #0
   80746:	db0f      	blt.n	80768 <move_solenoid+0x2c>
		 uint8_t val = 50-abs(joystick.x_val)*0.5;
		 timer_change_duty(val);
	 }
	 if(joystick.x_val >= 0){
		 uint8_t val2 = 50+joystick.x_val*0.5;
   80748:	4b15      	ldr	r3, [pc, #84]	; (807a0 <move_solenoid+0x64>)
   8074a:	4798      	blx	r3
   8074c:	2200      	movs	r2, #0
   8074e:	4b15      	ldr	r3, [pc, #84]	; (807a4 <move_solenoid+0x68>)
   80750:	4c15      	ldr	r4, [pc, #84]	; (807a8 <move_solenoid+0x6c>)
   80752:	47a0      	blx	r4
   80754:	2200      	movs	r2, #0
   80756:	4b15      	ldr	r3, [pc, #84]	; (807ac <move_solenoid+0x70>)
   80758:	4c15      	ldr	r4, [pc, #84]	; (807b0 <move_solenoid+0x74>)
   8075a:	47a0      	blx	r4
   8075c:	4b15      	ldr	r3, [pc, #84]	; (807b4 <move_solenoid+0x78>)
   8075e:	4798      	blx	r3
		 timer_change_duty(val2);
   80760:	b2c0      	uxtb	r0, r0
   80762:	4b15      	ldr	r3, [pc, #84]	; (807b8 <move_solenoid+0x7c>)
   80764:	4798      	blx	r3
   80766:	bd10      	pop	{r4, pc}
		 uint8_t val = 50-abs(joystick.x_val)*0.5;
   80768:	2800      	cmp	r0, #0
   8076a:	bfb8      	it	lt
   8076c:	4240      	neglt	r0, r0
   8076e:	4b0c      	ldr	r3, [pc, #48]	; (807a0 <move_solenoid+0x64>)
   80770:	4798      	blx	r3
   80772:	2200      	movs	r2, #0
   80774:	4b0b      	ldr	r3, [pc, #44]	; (807a4 <move_solenoid+0x68>)
   80776:	4c0c      	ldr	r4, [pc, #48]	; (807a8 <move_solenoid+0x6c>)
   80778:	47a0      	blx	r4
   8077a:	4602      	mov	r2, r0
   8077c:	460b      	mov	r3, r1
   8077e:	2000      	movs	r0, #0
   80780:	490a      	ldr	r1, [pc, #40]	; (807ac <move_solenoid+0x70>)
   80782:	4c0e      	ldr	r4, [pc, #56]	; (807bc <move_solenoid+0x80>)
   80784:	47a0      	blx	r4
   80786:	4b0b      	ldr	r3, [pc, #44]	; (807b4 <move_solenoid+0x78>)
   80788:	4798      	blx	r3
		 timer_change_duty(val);
   8078a:	b2c0      	uxtb	r0, r0
   8078c:	4b0a      	ldr	r3, [pc, #40]	; (807b8 <move_solenoid+0x7c>)
   8078e:	4798      	blx	r3
	 if(joystick.x_val >= 0){
   80790:	4b02      	ldr	r3, [pc, #8]	; (8079c <move_solenoid+0x60>)
   80792:	f993 0000 	ldrsb.w	r0, [r3]
   80796:	2800      	cmp	r0, #0
   80798:	dbe5      	blt.n	80766 <move_solenoid+0x2a>
   8079a:	e7d5      	b.n	80748 <move_solenoid+0xc>
   8079c:	200004ac 	.word	0x200004ac
   807a0:	00081411 	.word	0x00081411
   807a4:	3fe00000 	.word	0x3fe00000
   807a8:	000814dd 	.word	0x000814dd
   807ac:	40490000 	.word	0x40490000
   807b0:	00081179 	.word	0x00081179
   807b4:	00081951 	.word	0x00081951
   807b8:	00080ee9 	.word	0x00080ee9
   807bc:	00081175 	.word	0x00081175

000807c0 <change_motor_speed_using_paadrag>:
 }

void change_motor_speed_using_paadrag(int paadrag){
	//printf("joystick.y_val : %d \n\r", joystick.y_val);
	
	if(paadrag < 0){
   807c0:	2800      	cmp	r0, #0
		PIOD->PIO_CODR = PIO_CODR_P10; //set direction left
   807c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
   807c6:	4b06      	ldr	r3, [pc, #24]	; (807e0 <change_motor_speed_using_paadrag+0x20>)
   807c8:	bfb4      	ite	lt
   807ca:	635a      	strlt	r2, [r3, #52]	; 0x34
		uint16_t val = abs(paadrag);
		DACC->DACC_CDR = val;
	}else{
		PIOD->PIO_SODR = PIO_SODR_P10; //set direction right
   807cc:	631a      	strge	r2, [r3, #48]	; 0x30
		uint16_t val2 = abs(paadrag);
   807ce:	2800      	cmp	r0, #0
   807d0:	bfb8      	it	lt
   807d2:	4240      	neglt	r0, r0
		DACC->DACC_CDR = val2;
   807d4:	b280      	uxth	r0, r0
   807d6:	f5a3 33ca 	sub.w	r3, r3, #103424	; 0x19400
   807da:	6218      	str	r0, [r3, #32]
   807dc:	4770      	bx	lr
   807de:	bf00      	nop
   807e0:	400e1400 	.word	0x400e1400

000807e4 <motor_box_init>:
	}
}
 

void motor_box_init(){
	PIOD->PIO_PER |= PIO_PER_P10; //PIO Enable Register, PIO Enable //pin32 DIR PD10
   807e4:	4b20      	ldr	r3, [pc, #128]	; (80868 <motor_box_init+0x84>)
   807e6:	681a      	ldr	r2, [r3, #0]
   807e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   807ec:	601a      	str	r2, [r3, #0]
	PIOD->PIO_OER |= PIO_OER_P10; //Output Enable Register, Output Enable //pin32 DIR PD10
   807ee:	691a      	ldr	r2, [r3, #16]
   807f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   807f4:	611a      	str	r2, [r3, #16]
	PIOD->PIO_PER |= PIO_PER_P9; //PIO Enable Register, PIO Enable //pin30 EN PD9
   807f6:	681a      	ldr	r2, [r3, #0]
   807f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   807fc:	601a      	str	r2, [r3, #0]
	PIOD->PIO_OER |= PIO_OER_P9; //Output Enable Register, Output Enable //pin30 EN PD9
   807fe:	691a      	ldr	r2, [r3, #16]
   80800:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   80804:	611a      	str	r2, [r3, #16]
	
	PIOD->PIO_SODR = PIO_SODR_P9; //Set Output Data Register, Set Output Data
   80806:	f44f 7200 	mov.w	r2, #512	; 0x200
   8080a:	631a      	str	r2, [r3, #48]	; 0x30
	PIOD->PIO_CODR = PIO_CODR_P10; //Clear Output Data Register, Set Output Data
   8080c:	f44f 6280 	mov.w	r2, #1024	; 0x400
   80810:	635a      	str	r2, [r3, #52]	; 0x34
	
	PMC->PMC_PCER0 = PMC_PCER0_PID13;
   80812:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   80816:	4a15      	ldr	r2, [pc, #84]	; (8086c <motor_box_init+0x88>)
   80818:	6111      	str	r1, [r2, #16]

	
	//allow counter to start
	PIOD->PIO_SODR |= PIO_SODR_P1; //!RST high
   8081a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   8081c:	f042 0202 	orr.w	r2, r2, #2
   80820:	631a      	str	r2, [r3, #48]	; 0x30
	
	//enable pins for reading encoder
	PIOC->PIO_PER |= PIO_PER_P8; //DO7
   80822:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
   80826:	681a      	ldr	r2, [r3, #0]
   80828:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   8082c:	601a      	str	r2, [r3, #0]
	PIOC->PIO_PER |= PIO_PER_P7; //DO6
   8082e:	681a      	ldr	r2, [r3, #0]
   80830:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   80834:	601a      	str	r2, [r3, #0]
	PIOC->PIO_PER |= PIO_PER_P6; //DO5
   80836:	681a      	ldr	r2, [r3, #0]
   80838:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   8083c:	601a      	str	r2, [r3, #0]
	PIOC->PIO_PER |= PIO_PER_P5; //DO4
   8083e:	681a      	ldr	r2, [r3, #0]
   80840:	f042 0220 	orr.w	r2, r2, #32
   80844:	601a      	str	r2, [r3, #0]
	PIOC->PIO_PER |= PIO_PER_P4; //DO3
   80846:	681a      	ldr	r2, [r3, #0]
   80848:	f042 0210 	orr.w	r2, r2, #16
   8084c:	601a      	str	r2, [r3, #0]
	PIOC->PIO_PER |= PIO_PER_P3; //DO2
   8084e:	681a      	ldr	r2, [r3, #0]
   80850:	f042 0208 	orr.w	r2, r2, #8
   80854:	601a      	str	r2, [r3, #0]
	PIOC->PIO_PER |= PIO_PER_P2; //DO1
   80856:	681a      	ldr	r2, [r3, #0]
   80858:	f042 0204 	orr.w	r2, r2, #4
   8085c:	601a      	str	r2, [r3, #0]
	PIOC->PIO_PER |= PIO_PER_P1; //DO0
   8085e:	681a      	ldr	r2, [r3, #0]
   80860:	f042 0202 	orr.w	r2, r2, #2
   80864:	601a      	str	r2, [r3, #0]
   80866:	4770      	bx	lr
   80868:	400e1400 	.word	0x400e1400
   8086c:	400e0600 	.word	0x400e0600

00080870 <encoder_read>:
}


uint8_t encoder_read(){
   80870:	b508      	push	{r3, lr}
	// PIO (Output) Enable Register, PIO Enable
	PIOD->PIO_PER |= PIO_PER_P2; // Pin 27 sel PD2 SEL
   80872:	4b2b      	ldr	r3, [pc, #172]	; (80920 <encoder_read+0xb0>)
   80874:	681a      	ldr	r2, [r3, #0]
   80876:	f042 0204 	orr.w	r2, r2, #4
   8087a:	601a      	str	r2, [r3, #0]
	PIOD->PIO_OER |= PIO_OER_P2; // 
   8087c:	691a      	ldr	r2, [r3, #16]
   8087e:	f042 0204 	orr.w	r2, r2, #4
   80882:	611a      	str	r2, [r3, #16]
	PIOD->PIO_PER |= PIO_PER_P1; // Pin 26 not_rst PD1 !RST
   80884:	681a      	ldr	r2, [r3, #0]
   80886:	f042 0202 	orr.w	r2, r2, #2
   8088a:	601a      	str	r2, [r3, #0]
	PIOD->PIO_OER |= PIO_OER_P1; // 
   8088c:	691a      	ldr	r2, [r3, #16]
   8088e:	f042 0202 	orr.w	r2, r2, #2
   80892:	611a      	str	r2, [r3, #16]
	PIOD->PIO_PER |= PIO_PER_P0; // Pin 25 not_oe PD0 !OE
   80894:	681a      	ldr	r2, [r3, #0]
   80896:	f042 0201 	orr.w	r2, r2, #1
   8089a:	601a      	str	r2, [r3, #0]
	PIOD->PIO_OER |= PIO_OER_P0; // 
   8089c:	691a      	ldr	r2, [r3, #16]
   8089e:	f042 0201 	orr.w	r2, r2, #1
   808a2:	611a      	str	r2, [r3, #16]
	
	PIOD->PIO_CODR |= PIO_CODR_P0; //!OE low
   808a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   808a6:	f042 0201 	orr.w	r2, r2, #1
   808aa:	635a      	str	r2, [r3, #52]	; 0x34
	PIOD->PIO_CODR |= PIO_CODR_P2; //SEL low
   808ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   808ae:	f042 0204 	orr.w	r2, r2, #4
   808b2:	635a      	str	r2, [r3, #52]	; 0x34
   808b4:	f44f 6348 	mov.w	r3, #3200	; 0xc80
	
	//10 microsec
	for(int i = 0; i < 3200; i++){
   808b8:	3b01      	subs	r3, #1
   808ba:	d1fd      	bne.n	808b8 <encoder_read+0x48>
	}
	
	uint8_t MSB = (PIOC->PIO_PDSR >> 1);
   808bc:	4b19      	ldr	r3, [pc, #100]	; (80924 <encoder_read+0xb4>)
   808be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   808c0:	0852      	lsrs	r2, r2, #1
	//printf("PIO_PDSR: -----%x \n\r", PIOC->PIO_PDSR);
	PIOD->PIO_SODR |= PIO_SODR_P2; //SEL high
   808c2:	4917      	ldr	r1, [pc, #92]	; (80920 <encoder_read+0xb0>)
   808c4:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   808c6:	f043 0304 	orr.w	r3, r3, #4
   808ca:	630b      	str	r3, [r1, #48]	; 0x30
   808cc:	f44f 6348 	mov.w	r3, #3200	; 0xc80
	
	//10 microsec
	for(int i = 0; i < 3200; i++){
   808d0:	3b01      	subs	r3, #1
   808d2:	d1fd      	bne.n	808d0 <encoder_read+0x60>
	}
	uint8_t LSB = PIOC->PIO_PDSR >> 1;
   808d4:	4b13      	ldr	r3, [pc, #76]	; (80924 <encoder_read+0xb4>)
   808d6:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
	
	PIOD->PIO_CODR |= PIO_CODR_P1; //!RST low
   808d8:	f503 7300 	add.w	r3, r3, #512	; 0x200
   808dc:	6b58      	ldr	r0, [r3, #52]	; 0x34
   808de:	f040 0002 	orr.w	r0, r0, #2
   808e2:	6358      	str	r0, [r3, #52]	; 0x34
	PIOD->PIO_SODR |= PIO_SODR_P1; //!RST high
   808e4:	6b18      	ldr	r0, [r3, #48]	; 0x30
   808e6:	f040 0002 	orr.w	r0, r0, #2
   808ea:	6318      	str	r0, [r3, #48]	; 0x30
	PIOD->PIO_SODR |= PIO_SODR_P0; //!OE high
   808ec:	6b18      	ldr	r0, [r3, #48]	; 0x30
   808ee:	f040 0001 	orr.w	r0, r0, #1
   808f2:	6318      	str	r0, [r3, #48]	; 0x30
	
	uint16_t encoder_data = (LSB | (MSB << 8));
   808f4:	0213      	lsls	r3, r2, #8
   808f6:	b29b      	uxth	r3, r3
	int encoder_data_int = LSB | (MSB << 8);
   808f8:	f3c1 0247 	ubfx	r2, r1, #1, #8
   808fc:	4313      	orrs	r3, r2
	y_value_pi = (8888-encoder_data_int)/88; //scaled so that value is 0-100;
   808fe:	f5c3 530a 	rsb	r3, r3, #8832	; 0x2280
   80902:	3338      	adds	r3, #56	; 0x38
   80904:	4908      	ldr	r1, [pc, #32]	; (80928 <encoder_read+0xb8>)
   80906:	fb81 2103 	smull	r2, r1, r1, r3
   8090a:	17db      	asrs	r3, r3, #31
   8090c:	ebc3 1121 	rsb	r1, r3, r1, asr #4
   80910:	4b06      	ldr	r3, [pc, #24]	; (8092c <encoder_read+0xbc>)
   80912:	7059      	strb	r1, [r3, #1]
 	printf("Encoder             data: %x \n\r", y_value_pi);
   80914:	b2c9      	uxtb	r1, r1
   80916:	4806      	ldr	r0, [pc, #24]	; (80930 <encoder_read+0xc0>)
   80918:	4b06      	ldr	r3, [pc, #24]	; (80934 <encoder_read+0xc4>)
   8091a:	4798      	blx	r3
// 		printf("Data negative: -%d \n\r", encoder_data);
// 	}
// 	else{
// 		printf("Data positive: %d \n\r", encoder_data);
// 	}
}
   8091c:	bd08      	pop	{r3, pc}
   8091e:	bf00      	nop
   80920:	400e1400 	.word	0x400e1400
   80924:	400e1200 	.word	0x400e1200
   80928:	2e8ba2e9 	.word	0x2e8ba2e9
   8092c:	2000047c 	.word	0x2000047c
   80930:	00081ba0 	.word	0x00081ba0
   80934:	00080e21 	.word	0x00080e21

00080938 <button_check>:

uint8_t button_check(uint8_t current){
	if(current == 0 && previous == 1){
   80938:	4603      	mov	r3, r0
   8093a:	b948      	cbnz	r0, 80950 <button_check+0x18>
   8093c:	4a07      	ldr	r2, [pc, #28]	; (8095c <button_check+0x24>)
   8093e:	7810      	ldrb	r0, [r2, #0]
   80940:	2801      	cmp	r0, #1
   80942:	d001      	beq.n	80948 <button_check+0x10>
		return 1;
		}else if(current != 0){
		previous = 1;
		//printf("%s", "C");
	}
	return 0;
   80944:	4618      	mov	r0, r3
   80946:	4770      	bx	lr
		previous = 0;
   80948:	2200      	movs	r2, #0
   8094a:	4b04      	ldr	r3, [pc, #16]	; (8095c <button_check+0x24>)
   8094c:	701a      	strb	r2, [r3, #0]
		return 1;
   8094e:	4770      	bx	lr
		previous = 1;
   80950:	2201      	movs	r2, #1
   80952:	4b02      	ldr	r3, [pc, #8]	; (8095c <button_check+0x24>)
   80954:	701a      	strb	r2, [r3, #0]
	return 0;
   80956:	2000      	movs	r0, #0
   80958:	4770      	bx	lr
   8095a:	bf00      	nop
   8095c:	20000004 	.word	0x20000004

00080960 <check_solenoid_shot>:
 void check_solenoid_shot(){
   80960:	b508      	push	{r3, lr}
	if(button_check(joystick.butt_pressed)){
   80962:	4b10      	ldr	r3, [pc, #64]	; (809a4 <check_solenoid_shot+0x44>)
   80964:	7898      	ldrb	r0, [r3, #2]
   80966:	4b10      	ldr	r3, [pc, #64]	; (809a8 <check_solenoid_shot+0x48>)
   80968:	4798      	blx	r3
   8096a:	b978      	cbnz	r0, 8098c <check_solenoid_shot+0x2c>
		if(return_milliseconds() > (last_time_pressed + 10)){
   8096c:	4b0f      	ldr	r3, [pc, #60]	; (809ac <check_solenoid_shot+0x4c>)
   8096e:	4798      	blx	r3
   80970:	4b0f      	ldr	r3, [pc, #60]	; (809b0 <check_solenoid_shot+0x50>)
   80972:	685b      	ldr	r3, [r3, #4]
   80974:	330a      	adds	r3, #10
   80976:	4298      	cmp	r0, r3
   80978:	d907      	bls.n	8098a <check_solenoid_shot+0x2a>
			PIOC->PIO_SODR |= PIO_SODR_P13;
   8097a:	4a0e      	ldr	r2, [pc, #56]	; (809b4 <check_solenoid_shot+0x54>)
   8097c:	6b13      	ldr	r3, [r2, #48]	; 0x30
   8097e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   80982:	6313      	str	r3, [r2, #48]	; 0x30
			solenoide_status = 0;
   80984:	2200      	movs	r2, #0
   80986:	4b0a      	ldr	r3, [pc, #40]	; (809b0 <check_solenoid_shot+0x50>)
   80988:	701a      	strb	r2, [r3, #0]
   8098a:	bd08      	pop	{r3, pc}
		last_time_pressed = return_milliseconds();
   8098c:	4b07      	ldr	r3, [pc, #28]	; (809ac <check_solenoid_shot+0x4c>)
   8098e:	4798      	blx	r3
   80990:	4a07      	ldr	r2, [pc, #28]	; (809b0 <check_solenoid_shot+0x50>)
   80992:	6050      	str	r0, [r2, #4]
		PIOC->PIO_CODR |= PIO_CODR_P13;
   80994:	4907      	ldr	r1, [pc, #28]	; (809b4 <check_solenoid_shot+0x54>)
   80996:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   80998:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   8099c:	634b      	str	r3, [r1, #52]	; 0x34
		solenoide_status = 1;
   8099e:	2301      	movs	r3, #1
   809a0:	7013      	strb	r3, [r2, #0]
   809a2:	bd08      	pop	{r3, pc}
   809a4:	200004ac 	.word	0x200004ac
   809a8:	00080939 	.word	0x00080939
   809ac:	00080e69 	.word	0x00080e69
   809b0:	2000047c 	.word	0x2000047c
   809b4:	400e1200 	.word	0x400e1200

000809b8 <main>:
#include "motor_controller.h"
#include "timer.h"
#include "feedback.h"

int main(void)
{
   809b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   809bc:	b087      	sub	sp, #28
    /* Initialize the SAM system */
    SystemInit();
   809be:	4b47      	ldr	r3, [pc, #284]	; (80adc <main+0x124>)
   809c0:	4798      	blx	r3
	WDT->WDT_MR |= 1 << 15;
   809c2:	4a47      	ldr	r2, [pc, #284]	; (80ae0 <main+0x128>)
   809c4:	6853      	ldr	r3, [r2, #4]
   809c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
   809ca:	6053      	str	r3, [r2, #4]
	configure_uart();
   809cc:	4b45      	ldr	r3, [pc, #276]	; (80ae4 <main+0x12c>)
   809ce:	4798      	blx	r3
	can_init_def_tx_rx_mb(0x00290561); // 0x00290561 = 0b 00000000001010010000010101100001// 0b000000000000100100010001000100010
   809d0:	4845      	ldr	r0, [pc, #276]	; (80ae8 <main+0x130>)
   809d2:	4b46      	ldr	r3, [pc, #280]	; (80aec <main+0x134>)
   809d4:	4798      	blx	r3
	
	printf("hello\n\r");
   809d6:	4846      	ldr	r0, [pc, #280]	; (80af0 <main+0x138>)
   809d8:	4b46      	ldr	r3, [pc, #280]	; (80af4 <main+0x13c>)
   809da:	4798      	blx	r3
	PWM->PWM_CH_NUM[2].PWM_CMR &= ~PWM_CMR_CPOL;
	
	PIOA->PIO_ABSR |= PIO_ABSR_P5; //PIO set peripheral b on pin 5*/
	
	
	timer_init();
   809dc:	4b46      	ldr	r3, [pc, #280]	; (80af8 <main+0x140>)
   809de:	4798      	blx	r3
	timer_change_duty(100);
   809e0:	2064      	movs	r0, #100	; 0x64
   809e2:	4b46      	ldr	r3, [pc, #280]	; (80afc <main+0x144>)
   809e4:	4798      	blx	r3
	//init_interrupt_PI();
	init_ch1_PI();
   809e6:	4b46      	ldr	r3, [pc, #280]	; (80b00 <main+0x148>)
   809e8:	4798      	blx	r3
	
	adc_init();
   809ea:	4b46      	ldr	r3, [pc, #280]	; (80b04 <main+0x14c>)
   809ec:	4798      	blx	r3
	dac_init();
   809ee:	4b46      	ldr	r3, [pc, #280]	; (80b08 <main+0x150>)
   809f0:	4798      	blx	r3
	
	
	motor_box_init();
   809f2:	4b46      	ldr	r3, [pc, #280]	; (80b0c <main+0x154>)
   809f4:	4798      	blx	r3
	
	
	
	
	//enable and set high, pin to controll servo shoot, pin50 on shield
	PIOC->PIO_PER |= PIO_PER_P13; 
   809f6:	4b46      	ldr	r3, [pc, #280]	; (80b10 <main+0x158>)
   809f8:	681a      	ldr	r2, [r3, #0]
   809fa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   809fe:	601a      	str	r2, [r3, #0]
	PIOC->PIO_OER |= PIO_OER_P13; 
   80a00:	691a      	ldr	r2, [r3, #16]
   80a02:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   80a06:	611a      	str	r2, [r3, #16]
	PIOC->PIO_SODR |= PIO_SODR_P13;
   80a08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80a0a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   80a0e:	631a      	str	r2, [r3, #48]	; 0x30
	
	
	
	
	PIOA->PIO_PER |= PIO_PER_P19; //PIO Enable Register, PIO Enable
   80a10:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
   80a14:	681a      	ldr	r2, [r3, #0]
   80a16:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   80a1a:	601a      	str	r2, [r3, #0]
	PIOA->PIO_OER |= PIO_OER_P19; //Output Enable Register, Output Enable
   80a1c:	691a      	ldr	r2, [r3, #16]
   80a1e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   80a22:	611a      	str	r2, [r3, #16]
	
	PIOA->PIO_PER |= PIO_PER_P20; //PIO Enable Register, PIO Enable
   80a24:	681a      	ldr	r2, [r3, #0]
   80a26:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   80a2a:	601a      	str	r2, [r3, #0]
	PIOA->PIO_OER |= PIO_OER_P20; //Output Enable Register, Output Enable
   80a2c:	691a      	ldr	r2, [r3, #16]
   80a2e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   80a32:	611a      	str	r2, [r3, #16]
	PIOA->PIO_PER |= PIO_PER_P9; //PIO Enable Register, PIO Enable
	PIOA->PIO_OER |= PIO_OER_P9; //Output Enable Register, Output Enable*/
	volatile CAN_MESSAGE msg;
	CAN_MESSAGE msgToSend;
	uint8_t solenoide_pressed = 0;
	SysTick_init();
   80a34:	4b37      	ldr	r3, [pc, #220]	; (80b14 <main+0x15c>)
   80a36:	4798      	blx	r3
    while (1) 
    {
		
		PIOA->PIO_SODR = PIO_SODR_P19; //Set Output Data Register, Set Output Data
   80a38:	4c37      	ldr	r4, [pc, #220]	; (80b18 <main+0x160>)
		//printf("%x ", tc->TC_CHANNEL[0].TC_SR);
		PIOA->PIO_CODR |= PIO_CODR_P20; //Clear Output Data Register,
		
		
		
		move_solenoid();
   80a3a:	f8df b110 	ldr.w	fp, [pc, #272]	; 80b4c <main+0x194>
		//change_motor_speed();
		encoder_read();
   80a3e:	f8df a110 	ldr.w	sl, [pc, #272]	; 80b50 <main+0x198>

		send_time_to_node_1(&msgToSend);

		//limits to fewer OLED updates a second, can be tweaked
		if(!(get_controller_runs()%3)){
			send_motor_info_to_node_1(&msgToSend, y_value_pi, get_solenoid_status());
   80a42:	4e36      	ldr	r6, [pc, #216]	; (80b1c <main+0x164>)
   80a44:	e041      	b.n	80aca <main+0x112>
			//Make sure 8 bit doesen't overflow as it would break logic
			if(get_controller_runs > 250){
				reset_controller_runs();
			}
		}
		send_motor_info_to_node_1(&msgToSend, y_value_pi, get_solenoid_status());
   80a46:	7835      	ldrb	r5, [r6, #0]
   80a48:	47c0      	blx	r8
   80a4a:	4602      	mov	r2, r0
   80a4c:	4629      	mov	r1, r5
   80a4e:	a803      	add	r0, sp, #12
   80a50:	47b8      	blx	r7
		
		if(get_goal_flag()){
   80a52:	4b33      	ldr	r3, [pc, #204]	; (80b20 <main+0x168>)
   80a54:	4798      	blx	r3
   80a56:	2800      	cmp	r0, #0
   80a58:	d12f      	bne.n	80aba <main+0x102>
		PIOA->PIO_SODR = PIO_SODR_P19; //Set Output Data Register, Set Output Data
   80a5a:	9b01      	ldr	r3, [sp, #4]
   80a5c:	6323      	str	r3, [r4, #48]	; 0x30
   80a5e:	4b31      	ldr	r3, [pc, #196]	; (80b24 <main+0x16c>)
		for(int i = 0; i < 1600000; i++){
   80a60:	3b01      	subs	r3, #1
   80a62:	d1fd      	bne.n	80a60 <main+0xa8>
		PIOA->PIO_CODR = PIO_CODR_P19; //Clear Output Data Register, Set Output Data
   80a64:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
		PIOA->PIO_SODR = PIO_SODR_P20; //Set Output Data Register, Set Output Data
   80a68:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   80a6c:	6323      	str	r3, [r4, #48]	; 0x30
   80a6e:	4b2d      	ldr	r3, [pc, #180]	; (80b24 <main+0x16c>)
		for(int i = 0; i < 1600000; i++){
   80a70:	3b01      	subs	r3, #1
   80a72:	d1fd      	bne.n	80a70 <main+0xb8>
		PIOA->PIO_CODR |= PIO_CODR_P20; //Clear Output Data Register,
   80a74:	6b63      	ldr	r3, [r4, #52]	; 0x34
   80a76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   80a7a:	6363      	str	r3, [r4, #52]	; 0x34
		move_solenoid();
   80a7c:	47d8      	blx	fp
		encoder_read();
   80a7e:	47d0      	blx	sl
		check_solenoid_shot();
   80a80:	4b29      	ldr	r3, [pc, #164]	; (80b28 <main+0x170>)
   80a82:	4798      	blx	r3
		send_time_to_node_1(&msgToSend);
   80a84:	a803      	add	r0, sp, #12
   80a86:	4b29      	ldr	r3, [pc, #164]	; (80b2c <main+0x174>)
   80a88:	4798      	blx	r3
		if(!(get_controller_runs()%3)){
   80a8a:	4b29      	ldr	r3, [pc, #164]	; (80b30 <main+0x178>)
   80a8c:	4798      	blx	r3
   80a8e:	4b29      	ldr	r3, [pc, #164]	; (80b34 <main+0x17c>)
   80a90:	fba3 2300 	umull	r2, r3, r3, r0
   80a94:	085b      	lsrs	r3, r3, #1
   80a96:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   80a9a:	1ac3      	subs	r3, r0, r3
   80a9c:	f013 0fff 	tst.w	r3, #255	; 0xff
   80aa0:	d1d1      	bne.n	80a46 <main+0x8e>
			send_motor_info_to_node_1(&msgToSend, y_value_pi, get_solenoid_status());
   80aa2:	7835      	ldrb	r5, [r6, #0]
   80aa4:	47c0      	blx	r8
   80aa6:	4602      	mov	r2, r0
   80aa8:	4629      	mov	r1, r5
   80aaa:	a803      	add	r0, sp, #12
   80aac:	47b8      	blx	r7
			if(get_controller_runs > 250){
   80aae:	4b20      	ldr	r3, [pc, #128]	; (80b30 <main+0x178>)
   80ab0:	2bfa      	cmp	r3, #250	; 0xfa
   80ab2:	d9c8      	bls.n	80a46 <main+0x8e>
				reset_controller_runs();
   80ab4:	4b20      	ldr	r3, [pc, #128]	; (80b38 <main+0x180>)
   80ab6:	4798      	blx	r3
   80ab8:	e7c5      	b.n	80a46 <main+0x8e>
			send_goals_to_node_1(&msgToSend, get_total_goals());
   80aba:	4b20      	ldr	r3, [pc, #128]	; (80b3c <main+0x184>)
   80abc:	4798      	blx	r3
   80abe:	4601      	mov	r1, r0
   80ac0:	a803      	add	r0, sp, #12
   80ac2:	4b1f      	ldr	r3, [pc, #124]	; (80b40 <main+0x188>)
   80ac4:	4798      	blx	r3
			reset_goal_flag();
   80ac6:	4b1f      	ldr	r3, [pc, #124]	; (80b44 <main+0x18c>)
   80ac8:	4798      	blx	r3
		PIOA->PIO_SODR = PIO_SODR_P19; //Set Output Data Register, Set Output Data
   80aca:	f44f 2900 	mov.w	r9, #524288	; 0x80000
   80ace:	f8cd 9004 	str.w	r9, [sp, #4]
			send_motor_info_to_node_1(&msgToSend, y_value_pi, get_solenoid_status());
   80ad2:	f8df 8080 	ldr.w	r8, [pc, #128]	; 80b54 <main+0x19c>
   80ad6:	4f1c      	ldr	r7, [pc, #112]	; (80b48 <main+0x190>)
   80ad8:	e7bf      	b.n	80a5a <main+0xa2>
   80ada:	bf00      	nop
   80adc:	000805ed 	.word	0x000805ed
   80ae0:	400e1a50 	.word	0x400e1a50
   80ae4:	00081079 	.word	0x00081079
   80ae8:	00290561 	.word	0x00290561
   80aec:	00080301 	.word	0x00080301
   80af0:	00081bc0 	.word	0x00081bc0
   80af4:	00080e21 	.word	0x00080e21
   80af8:	00080ea5 	.word	0x00080ea5
   80afc:	00080ee9 	.word	0x00080ee9
   80b00:	00081021 	.word	0x00081021
   80b04:	00080161 	.word	0x00080161
   80b08:	00080535 	.word	0x00080535
   80b0c:	000807e5 	.word	0x000807e5
   80b10:	400e1200 	.word	0x400e1200
   80b14:	00080e45 	.word	0x00080e45
   80b18:	400e0e00 	.word	0x400e0e00
   80b1c:	2000047d 	.word	0x2000047d
   80b20:	000801a9 	.word	0x000801a9
   80b24:	00186a00 	.word	0x00186a00
   80b28:	00080961 	.word	0x00080961
   80b2c:	00080691 	.word	0x00080691
   80b30:	00080e8d 	.word	0x00080e8d
   80b34:	aaaaaaab 	.word	0xaaaaaaab
   80b38:	00080e99 	.word	0x00080e99
   80b3c:	0008019d 	.word	0x0008019d
   80b40:	000806ed 	.word	0x000806ed
   80b44:	000801b5 	.word	0x000801b5
   80b48:	00080705 	.word	0x00080705
   80b4c:	0008073d 	.word	0x0008073d
   80b50:	00080871 	.word	0x00080871
   80b54:	00080731 	.word	0x00080731

00080b58 <prints>:

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
   80b58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   80b5c:	460d      	mov	r5, r1
	register int pc = 0, padchar = ' ';

	if (width > 0) {
   80b5e:	1e16      	subs	r6, r2, #0
   80b60:	dd48      	ble.n	80bf4 <prints+0x9c>
		register int len = 0;
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
   80b62:	780a      	ldrb	r2, [r1, #0]
   80b64:	2a00      	cmp	r2, #0
   80b66:	d035      	beq.n	80bd4 <prints+0x7c>
   80b68:	460a      	mov	r2, r1
   80b6a:	2400      	movs	r4, #0
   80b6c:	3401      	adds	r4, #1
   80b6e:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   80b72:	2900      	cmp	r1, #0
   80b74:	d1fa      	bne.n	80b6c <prints+0x14>
		if (len >= width) width = 0;
   80b76:	42a6      	cmp	r6, r4
   80b78:	dc2d      	bgt.n	80bd6 <prints+0x7e>
   80b7a:	2400      	movs	r4, #0
		else width -= len;
		if (pad & PAD_ZERO) padchar = '0';
   80b7c:	f003 0202 	and.w	r2, r3, #2
   80b80:	2a00      	cmp	r2, #0
   80b82:	bf0c      	ite	eq
   80b84:	f04f 0820 	moveq.w	r8, #32
   80b88:	f04f 0830 	movne.w	r8, #48	; 0x30
	}
	if (!(pad & PAD_RIGHT)) {
   80b8c:	f013 0301 	ands.w	r3, r3, #1
   80b90:	d123      	bne.n	80bda <prints+0x82>
		for ( ; width > 0; --width) {
   80b92:	2c00      	cmp	r4, #0
   80b94:	dd28      	ble.n	80be8 <prints+0x90>
   80b96:	4626      	mov	r6, r4
	(void) uart_putchar(c);  //Send characters to uart
   80b98:	fa5f f988 	uxtb.w	r9, r8
   80b9c:	4f18      	ldr	r7, [pc, #96]	; (80c00 <prints+0xa8>)
   80b9e:	4648      	mov	r0, r9
   80ba0:	47b8      	blx	r7
		for ( ; width > 0; --width) {
   80ba2:	3e01      	subs	r6, #1
   80ba4:	d1fb      	bne.n	80b9e <prints+0x46>
			printchar (out, padchar);
			++pc;
		}
	}
	for ( ; *string ; ++string) {
   80ba6:	7828      	ldrb	r0, [r5, #0]
   80ba8:	b188      	cbz	r0, 80bce <prints+0x76>
	(void) uart_putchar(c);  //Send characters to uart
   80baa:	4f15      	ldr	r7, [pc, #84]	; (80c00 <prints+0xa8>)
   80bac:	47b8      	blx	r7
		printchar (out, *string);
		++pc;
   80bae:	3401      	adds	r4, #1
	for ( ; *string ; ++string) {
   80bb0:	f815 0f01 	ldrb.w	r0, [r5, #1]!
   80bb4:	2800      	cmp	r0, #0
   80bb6:	d1f9      	bne.n	80bac <prints+0x54>
	}
	for ( ; width > 0; --width) {
   80bb8:	2e00      	cmp	r6, #0
   80bba:	dd08      	ble.n	80bce <prints+0x76>
   80bbc:	4635      	mov	r5, r6
	(void) uart_putchar(c);  //Send characters to uart
   80bbe:	fa5f f888 	uxtb.w	r8, r8
   80bc2:	4f0f      	ldr	r7, [pc, #60]	; (80c00 <prints+0xa8>)
   80bc4:	4640      	mov	r0, r8
   80bc6:	47b8      	blx	r7
	for ( ; width > 0; --width) {
   80bc8:	3d01      	subs	r5, #1
   80bca:	d1fb      	bne.n	80bc4 <prints+0x6c>
   80bcc:	4434      	add	r4, r6
		printchar (out, padchar);
		++pc;
	}

	return pc;
}
   80bce:	4620      	mov	r0, r4
   80bd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		for (ptr = string; *ptr; ++ptr) ++len;
   80bd4:	2400      	movs	r4, #0
		else width -= len;
   80bd6:	1b34      	subs	r4, r6, r4
   80bd8:	e7d0      	b.n	80b7c <prints+0x24>
   80bda:	4626      	mov	r6, r4
	for ( ; *string ; ++string) {
   80bdc:	7828      	ldrb	r0, [r5, #0]
   80bde:	b108      	cbz	r0, 80be4 <prints+0x8c>
	register int pc = 0, padchar = ' ';
   80be0:	2400      	movs	r4, #0
   80be2:	e7e2      	b.n	80baa <prints+0x52>
   80be4:	2400      	movs	r4, #0
   80be6:	e7e7      	b.n	80bb8 <prints+0x60>
		for ( ; width > 0; --width) {
   80be8:	4626      	mov	r6, r4
   80bea:	461c      	mov	r4, r3
   80bec:	e7db      	b.n	80ba6 <prints+0x4e>
	register int pc = 0, padchar = ' ';
   80bee:	f04f 0820 	mov.w	r8, #32
   80bf2:	e7d8      	b.n	80ba6 <prints+0x4e>
	if (!(pad & PAD_RIGHT)) {
   80bf4:	f013 0401 	ands.w	r4, r3, #1
   80bf8:	d0f9      	beq.n	80bee <prints+0x96>
	register int pc = 0, padchar = ' ';
   80bfa:	f04f 0820 	mov.w	r8, #32
   80bfe:	e7ed      	b.n	80bdc <prints+0x84>
   80c00:	000810e1 	.word	0x000810e1

00080c04 <printi>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
   80c04:	b5f0      	push	{r4, r5, r6, r7, lr}
   80c06:	b085      	sub	sp, #20
   80c08:	4607      	mov	r7, r0
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
	register unsigned int u = i;

	if (i == 0) {
   80c0a:	b381      	cbz	r1, 80c6e <printi+0x6a>
   80c0c:	460c      	mov	r4, r1
		print_buf[0] = '0';
		print_buf[1] = '\0';
		return prints (out, print_buf, width, pad);
	}

	if (sg && b == 10 && i < 0) {
   80c0e:	b10b      	cbz	r3, 80c14 <printi+0x10>
   80c10:	2a0a      	cmp	r2, #10
   80c12:	d038      	beq.n	80c86 <printi+0x82>
		neg = 1;
		u = -i;
	}

	s = print_buf + PRINT_BUF_LEN-1;
	*s = '\0';
   80c14:	2300      	movs	r3, #0
   80c16:	f88d 300f 	strb.w	r3, [sp, #15]

	while (u) {
   80c1a:	2600      	movs	r6, #0
   80c1c:	2900      	cmp	r1, #0
   80c1e:	d046      	beq.n	80cae <printi+0xaa>
   80c20:	f10d 050f 	add.w	r5, sp, #15
		t = u % b;
		if( t >= 10 )
			t += letbase - '0' - 10;
   80c24:	990c      	ldr	r1, [sp, #48]	; 0x30
   80c26:	393a      	subs	r1, #58	; 0x3a
		t = u % b;
   80c28:	fbb4 f3f2 	udiv	r3, r4, r2
   80c2c:	fb02 4313 	mls	r3, r2, r3, r4
		if( t >= 10 )
   80c30:	2b09      	cmp	r3, #9
			t += letbase - '0' - 10;
   80c32:	bfc8      	it	gt
   80c34:	185b      	addgt	r3, r3, r1
		*--s = t + '0';
   80c36:	3330      	adds	r3, #48	; 0x30
   80c38:	f805 3d01 	strb.w	r3, [r5, #-1]!
		u /= b;
   80c3c:	fbb4 f4f2 	udiv	r4, r4, r2
	while (u) {
   80c40:	2c00      	cmp	r4, #0
   80c42:	d1f1      	bne.n	80c28 <printi+0x24>
	}

	if (neg) {
   80c44:	b156      	cbz	r6, 80c5c <printi+0x58>
		if( width && (pad & PAD_ZERO) ) {
   80c46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   80c48:	b11b      	cbz	r3, 80c52 <printi+0x4e>
   80c4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80c4c:	f013 0f02 	tst.w	r3, #2
   80c50:	d125      	bne.n	80c9e <printi+0x9a>
			printchar (out, '-');
			++pc;
			--width;
		}
		else {
			*--s = '-';
   80c52:	232d      	movs	r3, #45	; 0x2d
   80c54:	f805 3c01 	strb.w	r3, [r5, #-1]
   80c58:	3d01      	subs	r5, #1
	register int t, neg = 0, pc = 0;
   80c5a:	2600      	movs	r6, #0
		}
	}

	return pc + prints (out, s, width, pad);
   80c5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80c5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   80c60:	4629      	mov	r1, r5
   80c62:	4638      	mov	r0, r7
   80c64:	4c14      	ldr	r4, [pc, #80]	; (80cb8 <printi+0xb4>)
   80c66:	47a0      	blx	r4
   80c68:	4430      	add	r0, r6
}
   80c6a:	b005      	add	sp, #20
   80c6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		print_buf[0] = '0';
   80c6e:	2330      	movs	r3, #48	; 0x30
   80c70:	f88d 3004 	strb.w	r3, [sp, #4]
		print_buf[1] = '\0';
   80c74:	2300      	movs	r3, #0
   80c76:	f88d 3005 	strb.w	r3, [sp, #5]
		return prints (out, print_buf, width, pad);
   80c7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80c7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   80c7e:	a901      	add	r1, sp, #4
   80c80:	4c0d      	ldr	r4, [pc, #52]	; (80cb8 <printi+0xb4>)
   80c82:	47a0      	blx	r4
   80c84:	e7f1      	b.n	80c6a <printi+0x66>
	if (sg && b == 10 && i < 0) {
   80c86:	2900      	cmp	r1, #0
   80c88:	dac4      	bge.n	80c14 <printi+0x10>
		u = -i;
   80c8a:	424c      	negs	r4, r1
	*s = '\0';
   80c8c:	2300      	movs	r3, #0
   80c8e:	f88d 300f 	strb.w	r3, [sp, #15]
	s = print_buf + PRINT_BUF_LEN-1;
   80c92:	f10d 050f 	add.w	r5, sp, #15
	while (u) {
   80c96:	2c00      	cmp	r4, #0
   80c98:	d0d5      	beq.n	80c46 <printi+0x42>
		neg = 1;
   80c9a:	2601      	movs	r6, #1
   80c9c:	e7c0      	b.n	80c20 <printi+0x1c>
	(void) uart_putchar(c);  //Send characters to uart
   80c9e:	202d      	movs	r0, #45	; 0x2d
   80ca0:	4b06      	ldr	r3, [pc, #24]	; (80cbc <printi+0xb8>)
   80ca2:	4798      	blx	r3
			--width;
   80ca4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   80ca6:	3b01      	subs	r3, #1
   80ca8:	930a      	str	r3, [sp, #40]	; 0x28
			++pc;
   80caa:	2601      	movs	r6, #1
			--width;
   80cac:	e7d6      	b.n	80c5c <printi+0x58>
	register int t, neg = 0, pc = 0;
   80cae:	461e      	mov	r6, r3
	s = print_buf + PRINT_BUF_LEN-1;
   80cb0:	f10d 050f 	add.w	r5, sp, #15
   80cb4:	e7d2      	b.n	80c5c <printi+0x58>
   80cb6:	bf00      	nop
   80cb8:	00080b59 	.word	0x00080b59
   80cbc:	000810e1 	.word	0x000810e1

00080cc0 <print>:

static int print( char **out, const char *format, va_list args )
{
   80cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80cc4:	b087      	sub	sp, #28
   80cc6:	4680      	mov	r8, r0
	register int width, pad;
	register int pc = 0;
	char scr[2];

	for (; *format != 0; ++format) {
   80cc8:	780b      	ldrb	r3, [r1, #0]
   80cca:	2b00      	cmp	r3, #0
   80ccc:	f000 8094 	beq.w	80df8 <print+0x138>
   80cd0:	468b      	mov	fp, r1
   80cd2:	4617      	mov	r7, r2
   80cd4:	2500      	movs	r5, #0
	(void) uart_putchar(c);  //Send characters to uart
   80cd6:	4e4e      	ldr	r6, [pc, #312]	; (80e10 <print+0x150>)
			}
			if( *format == 'c' ) {
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
				scr[1] = '\0';
				pc += prints (out, scr, width, pad);
   80cd8:	f8df a13c 	ldr.w	sl, [pc, #316]	; 80e18 <print+0x158>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
   80cdc:	f8df 913c 	ldr.w	r9, [pc, #316]	; 80e1c <print+0x15c>
   80ce0:	e046      	b.n	80d70 <print+0xb0>
			for ( ; *format >= '0' && *format <= '9'; ++format) {
   80ce2:	2200      	movs	r2, #0
   80ce4:	e070      	b.n	80dc8 <print+0x108>
				register char *s = (char *)va_arg( args, int );
   80ce6:	6839      	ldr	r1, [r7, #0]
   80ce8:	3704      	adds	r7, #4
				pc += prints (out, s?s:"(null)", width, pad);
   80cea:	484a      	ldr	r0, [pc, #296]	; (80e14 <print+0x154>)
   80cec:	2900      	cmp	r1, #0
   80cee:	bf08      	it	eq
   80cf0:	4601      	moveq	r1, r0
   80cf2:	4640      	mov	r0, r8
   80cf4:	47d0      	blx	sl
   80cf6:	4405      	add	r5, r0
				continue;
   80cf8:	e035      	b.n	80d66 <print+0xa6>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
   80cfa:	6839      	ldr	r1, [r7, #0]
   80cfc:	3704      	adds	r7, #4
   80cfe:	2061      	movs	r0, #97	; 0x61
   80d00:	9002      	str	r0, [sp, #8]
   80d02:	9301      	str	r3, [sp, #4]
   80d04:	9200      	str	r2, [sp, #0]
   80d06:	2301      	movs	r3, #1
   80d08:	220a      	movs	r2, #10
   80d0a:	4640      	mov	r0, r8
   80d0c:	47c8      	blx	r9
   80d0e:	4405      	add	r5, r0
				continue;
   80d10:	e029      	b.n	80d66 <print+0xa6>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
   80d12:	6839      	ldr	r1, [r7, #0]
   80d14:	3704      	adds	r7, #4
   80d16:	2061      	movs	r0, #97	; 0x61
   80d18:	9002      	str	r0, [sp, #8]
   80d1a:	9301      	str	r3, [sp, #4]
   80d1c:	9200      	str	r2, [sp, #0]
   80d1e:	2300      	movs	r3, #0
   80d20:	2210      	movs	r2, #16
   80d22:	4640      	mov	r0, r8
   80d24:	47c8      	blx	r9
   80d26:	4405      	add	r5, r0
				continue;
   80d28:	e01d      	b.n	80d66 <print+0xa6>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
   80d2a:	6839      	ldr	r1, [r7, #0]
   80d2c:	3704      	adds	r7, #4
   80d2e:	2041      	movs	r0, #65	; 0x41
   80d30:	9002      	str	r0, [sp, #8]
   80d32:	9301      	str	r3, [sp, #4]
   80d34:	9200      	str	r2, [sp, #0]
   80d36:	2300      	movs	r3, #0
   80d38:	2210      	movs	r2, #16
   80d3a:	4640      	mov	r0, r8
   80d3c:	47c8      	blx	r9
   80d3e:	4405      	add	r5, r0
				continue;
   80d40:	e011      	b.n	80d66 <print+0xa6>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
   80d42:	6839      	ldr	r1, [r7, #0]
   80d44:	3704      	adds	r7, #4
   80d46:	2061      	movs	r0, #97	; 0x61
   80d48:	9002      	str	r0, [sp, #8]
   80d4a:	9301      	str	r3, [sp, #4]
   80d4c:	9200      	str	r2, [sp, #0]
   80d4e:	2300      	movs	r3, #0
   80d50:	220a      	movs	r2, #10
   80d52:	4640      	mov	r0, r8
   80d54:	47c8      	blx	r9
   80d56:	4405      	add	r5, r0
				continue;
   80d58:	e005      	b.n	80d66 <print+0xa6>
			++format;
   80d5a:	46a3      	mov	fp, r4
	(void) uart_putchar(c);  //Send characters to uart
   80d5c:	f89b 0000 	ldrb.w	r0, [fp]
   80d60:	47b0      	blx	r6
			}
		}
		else {
		out:
			printchar (out, *format);
			++pc;
   80d62:	3501      	adds	r5, #1
   80d64:	465c      	mov	r4, fp
	for (; *format != 0; ++format) {
   80d66:	f104 0b01 	add.w	fp, r4, #1
   80d6a:	7863      	ldrb	r3, [r4, #1]
   80d6c:	2b00      	cmp	r3, #0
   80d6e:	d044      	beq.n	80dfa <print+0x13a>
		if (*format == '%') {
   80d70:	2b25      	cmp	r3, #37	; 0x25
   80d72:	d1f3      	bne.n	80d5c <print+0x9c>
			++format;
   80d74:	f10b 0401 	add.w	r4, fp, #1
			if (*format == '\0') break;
   80d78:	f89b 3001 	ldrb.w	r3, [fp, #1]
   80d7c:	2b00      	cmp	r3, #0
   80d7e:	d03c      	beq.n	80dfa <print+0x13a>
			if (*format == '%') goto out;
   80d80:	2b25      	cmp	r3, #37	; 0x25
   80d82:	d0ea      	beq.n	80d5a <print+0x9a>
			if (*format == '-') {
   80d84:	2b2d      	cmp	r3, #45	; 0x2d
				++format;
   80d86:	bf06      	itte	eq
   80d88:	f10b 0402 	addeq.w	r4, fp, #2
				pad = PAD_RIGHT;
   80d8c:	2301      	moveq	r3, #1
			width = pad = 0;
   80d8e:	2300      	movne	r3, #0
			while (*format == '0') {
   80d90:	7822      	ldrb	r2, [r4, #0]
   80d92:	2a30      	cmp	r2, #48	; 0x30
   80d94:	d105      	bne.n	80da2 <print+0xe2>
				pad |= PAD_ZERO;
   80d96:	f043 0302 	orr.w	r3, r3, #2
			while (*format == '0') {
   80d9a:	f814 2f01 	ldrb.w	r2, [r4, #1]!
   80d9e:	2a30      	cmp	r2, #48	; 0x30
   80da0:	d0f9      	beq.n	80d96 <print+0xd6>
			for ( ; *format >= '0' && *format <= '9'; ++format) {
   80da2:	7821      	ldrb	r1, [r4, #0]
   80da4:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   80da8:	b2d2      	uxtb	r2, r2
   80daa:	2a09      	cmp	r2, #9
   80dac:	d899      	bhi.n	80ce2 <print+0x22>
   80dae:	2200      	movs	r2, #0
				width *= 10;
   80db0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
				width += *format - '0';
   80db4:	3930      	subs	r1, #48	; 0x30
   80db6:	eb01 0242 	add.w	r2, r1, r2, lsl #1
			for ( ; *format >= '0' && *format <= '9'; ++format) {
   80dba:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   80dbe:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
   80dc2:	b2c0      	uxtb	r0, r0
   80dc4:	2809      	cmp	r0, #9
   80dc6:	d9f3      	bls.n	80db0 <print+0xf0>
			if( *format == 's' ) {
   80dc8:	2973      	cmp	r1, #115	; 0x73
   80dca:	d08c      	beq.n	80ce6 <print+0x26>
			if( *format == 'd' ) {
   80dcc:	2964      	cmp	r1, #100	; 0x64
   80dce:	d094      	beq.n	80cfa <print+0x3a>
			if( *format == 'x' ) {
   80dd0:	2978      	cmp	r1, #120	; 0x78
   80dd2:	d09e      	beq.n	80d12 <print+0x52>
			if( *format == 'X' ) {
   80dd4:	2958      	cmp	r1, #88	; 0x58
   80dd6:	d0a8      	beq.n	80d2a <print+0x6a>
			if( *format == 'u' ) {
   80dd8:	2975      	cmp	r1, #117	; 0x75
   80dda:	d0b2      	beq.n	80d42 <print+0x82>
			if( *format == 'c' ) {
   80ddc:	2963      	cmp	r1, #99	; 0x63
   80dde:	d1c2      	bne.n	80d66 <print+0xa6>
				scr[0] = (char)va_arg( args, int );
   80de0:	6839      	ldr	r1, [r7, #0]
   80de2:	3704      	adds	r7, #4
   80de4:	f88d 1014 	strb.w	r1, [sp, #20]
				scr[1] = '\0';
   80de8:	2100      	movs	r1, #0
   80dea:	f88d 1015 	strb.w	r1, [sp, #21]
				pc += prints (out, scr, width, pad);
   80dee:	a905      	add	r1, sp, #20
   80df0:	4640      	mov	r0, r8
   80df2:	47d0      	blx	sl
   80df4:	4405      	add	r5, r0
				continue;
   80df6:	e7b6      	b.n	80d66 <print+0xa6>
	register int pc = 0;
   80df8:	2500      	movs	r5, #0
		}
	}
	if (out) **out = '\0';
   80dfa:	f1b8 0f00 	cmp.w	r8, #0
   80dfe:	d003      	beq.n	80e08 <print+0x148>
   80e00:	f8d8 3000 	ldr.w	r3, [r8]
   80e04:	2200      	movs	r2, #0
   80e06:	701a      	strb	r2, [r3, #0]
	va_end( args );
	return pc;
}
   80e08:	4628      	mov	r0, r5
   80e0a:	b007      	add	sp, #28
   80e0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80e10:	000810e1 	.word	0x000810e1
   80e14:	00081bc8 	.word	0x00081bc8
   80e18:	00080b59 	.word	0x00080b59
   80e1c:	00080c05 	.word	0x00080c05

00080e20 <printf>:

int printf(const char *format, ...)
{
   80e20:	b40f      	push	{r0, r1, r2, r3}
   80e22:	b500      	push	{lr}
   80e24:	b083      	sub	sp, #12
   80e26:	aa04      	add	r2, sp, #16
   80e28:	f852 1b04 	ldr.w	r1, [r2], #4
        va_list args;
        
        va_start( args, format );
   80e2c:	9201      	str	r2, [sp, #4]
        return print( 0, format, args );
   80e2e:	2000      	movs	r0, #0
   80e30:	4b03      	ldr	r3, [pc, #12]	; (80e40 <printf+0x20>)
   80e32:	4798      	blx	r3
}
   80e34:	b003      	add	sp, #12
   80e36:	f85d eb04 	ldr.w	lr, [sp], #4
   80e3a:	b004      	add	sp, #16
   80e3c:	4770      	bx	lr
   80e3e:	bf00      	nop
   80e40:	00080cc1 	.word	0x00080cc1

00080e44 <SysTick_init>:

static uint32_t milliseconds;
//SysTick_Type* SysTick = SysTick_BASE;

void SysTick_init(){
    SysTick->CTRL = 0b011;
   80e44:	4b03      	ldr	r3, [pc, #12]	; (80e54 <SysTick_init+0x10>)
   80e46:	2203      	movs	r2, #3
   80e48:	601a      	str	r2, [r3, #0]
    SysTick->LOAD = 0x2904;
   80e4a:	f642 1204 	movw	r2, #10500	; 0x2904
   80e4e:	605a      	str	r2, [r3, #4]
   80e50:	4770      	bx	lr
   80e52:	bf00      	nop
   80e54:	e000e010 	.word	0xe000e010

00080e58 <SysTick_Handler>:
}

void SysTick_Handler       ( void ){
    milliseconds++;
   80e58:	4a02      	ldr	r2, [pc, #8]	; (80e64 <SysTick_Handler+0xc>)
   80e5a:	6813      	ldr	r3, [r2, #0]
   80e5c:	3301      	adds	r3, #1
   80e5e:	6013      	str	r3, [r2, #0]
   80e60:	4770      	bx	lr
   80e62:	bf00      	nop
   80e64:	20000484 	.word	0x20000484

00080e68 <return_milliseconds>:
}

uint32_t return_milliseconds(){
	return milliseconds;
}
   80e68:	4b01      	ldr	r3, [pc, #4]	; (80e70 <return_milliseconds+0x8>)
   80e6a:	6818      	ldr	r0, [r3, #0]
   80e6c:	4770      	bx	lr
   80e6e:	bf00      	nop
   80e70:	20000484 	.word	0x20000484

00080e74 <return_seconds>:

uint16_t return_seconds(){
  uint16_t secs = (milliseconds/1000);
   80e74:	4b03      	ldr	r3, [pc, #12]	; (80e84 <return_seconds+0x10>)
   80e76:	6818      	ldr	r0, [r3, #0]
   80e78:	4b03      	ldr	r3, [pc, #12]	; (80e88 <return_seconds+0x14>)
   80e7a:	fba3 3000 	umull	r3, r0, r3, r0
  return secs;
}
   80e7e:	f3c0 108f 	ubfx	r0, r0, #6, #16
   80e82:	4770      	bx	lr
   80e84:	20000484 	.word	0x20000484
   80e88:	10624dd3 	.word	0x10624dd3

00080e8c <get_controller_runs>:
	
#define DEBUG_INTERRUPT 1

uint8_t get_controller_runs(){
	return ti_counter;
}
   80e8c:	4b01      	ldr	r3, [pc, #4]	; (80e94 <get_controller_runs+0x8>)
   80e8e:	7818      	ldrb	r0, [r3, #0]
   80e90:	4770      	bx	lr
   80e92:	bf00      	nop
   80e94:	20000488 	.word	0x20000488

00080e98 <reset_controller_runs>:

void reset_controller_runs(){
	ti_counter = 0;
   80e98:	2200      	movs	r2, #0
   80e9a:	4b01      	ldr	r3, [pc, #4]	; (80ea0 <reset_controller_runs+0x8>)
   80e9c:	701a      	strb	r2, [r3, #0]
   80e9e:	4770      	bx	lr
   80ea0:	20000488 	.word	0x20000488

00080ea4 <timer_init>:
}

void timer_init(){
		
	PMC->PMC_PCER0 |= PMC_PCER0_PID27; //enable timer counter channel 0
   80ea4:	4a0d      	ldr	r2, [pc, #52]	; (80edc <timer_init+0x38>)
   80ea6:	6913      	ldr	r3, [r2, #16]
   80ea8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
   80eac:	6113      	str	r3, [r2, #16]
		
	PIOB->PIO_PDR |= PIO_PDR_P25; //disable io on pinb 25
   80eae:	4b0c      	ldr	r3, [pc, #48]	; (80ee0 <timer_init+0x3c>)
   80eb0:	685a      	ldr	r2, [r3, #4]
   80eb2:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   80eb6:	605a      	str	r2, [r3, #4]
	PIOB->PIO_ABSR |= PIO_ABSR_P25; //PIO set peripheral b on pinb 25*/
   80eb8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80eba:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   80ebe:	671a      	str	r2, [r3, #112]	; 0x70
	
	tc->TC_CHANNEL[0].TC_CMR = 0x0009C000;
   80ec0:	f5a3 23c2 	sub.w	r3, r3, #397312	; 0x61000
   80ec4:	f44f 221c 	mov.w	r2, #638976	; 0x9c000
   80ec8:	605a      	str	r2, [r3, #4]
	tc->TC_CHANNEL[0].TC_RC = 0x000CD140;
   80eca:	4a06      	ldr	r2, [pc, #24]	; (80ee4 <timer_init+0x40>)
   80ecc:	61da      	str	r2, [r3, #28]
	
	
	
	tc->TC_CHANNEL[0].TC_CCR = 0x00000001; //enables the clock
   80ece:	2201      	movs	r2, #1
   80ed0:	601a      	str	r2, [r3, #0]
	tc->TC_CHANNEL[0].TC_CCR |= 0x1 << 2;
   80ed2:	681a      	ldr	r2, [r3, #0]
   80ed4:	f042 0204 	orr.w	r2, r2, #4
   80ed8:	601a      	str	r2, [r3, #0]
   80eda:	4770      	bx	lr
   80edc:	400e0600 	.word	0x400e0600
   80ee0:	400e1000 	.word	0x400e1000
   80ee4:	000cd140 	.word	0x000cd140

00080ee8 <timer_change_duty>:
	}
	if(dutyCycle > 100){
		dutyCycle = 100;
	}
	
	tc->TC_CHANNEL[0].TC_RA = 0x000CD140 - (0xA410 + 0x1A4*dutyCycle); // TC_RA - (min_value + dutyCycle*1prosentOfDifference)
   80ee8:	2864      	cmp	r0, #100	; 0x64
   80eea:	bf28      	it	cs
   80eec:	2064      	movcs	r0, #100	; 0x64
   80eee:	4b05      	ldr	r3, [pc, #20]	; (80f04 <timer_change_duty+0x1c>)
   80ef0:	fb03 f000 	mul.w	r0, r3, r0
   80ef4:	f500 2042 	add.w	r0, r0, #794624	; 0xc2000
   80ef8:	f500 6053 	add.w	r0, r0, #3376	; 0xd30
   80efc:	4b02      	ldr	r3, [pc, #8]	; (80f08 <timer_change_duty+0x20>)
   80efe:	6158      	str	r0, [r3, #20]
   80f00:	4770      	bx	lr
   80f02:	bf00      	nop
   80f04:	fffffe5c 	.word	0xfffffe5c
   80f08:	40080000 	.word	0x40080000

00080f0c <TC1_Handler>:
double ki = 20;
double kd = 1;
double sum_error = 0;
double T_periode = 0.02;

void TC1_Handler( void ){
   80f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80f10:	b087      	sub	sp, #28
	
	prev_error = error;
   80f12:	4c36      	ldr	r4, [pc, #216]	; (80fec <TC1_Handler+0xe0>)
   80f14:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
   80f18:	e9c4 ab04 	strd	sl, fp, [r4, #16]
	error = joystick.left_val - y_value_pi;
   80f1c:	4f34      	ldr	r7, [pc, #208]	; (80ff0 <TC1_Handler+0xe4>)
   80f1e:	f997 0003 	ldrsb.w	r0, [r7, #3]
   80f22:	4b34      	ldr	r3, [pc, #208]	; (80ff4 <TC1_Handler+0xe8>)
   80f24:	781b      	ldrb	r3, [r3, #0]
   80f26:	1ac0      	subs	r0, r0, r3
   80f28:	4b33      	ldr	r3, [pc, #204]	; (80ff8 <TC1_Handler+0xec>)
   80f2a:	4798      	blx	r3
   80f2c:	4602      	mov	r2, r0
   80f2e:	460b      	mov	r3, r1
   80f30:	e9cd 2300 	strd	r2, r3, [sp]
   80f34:	e9c4 2302 	strd	r2, r3, [r4, #8]
	sum_error += error;
   80f38:	4e30      	ldr	r6, [pc, #192]	; (80ffc <TC1_Handler+0xf0>)
   80f3a:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
   80f3e:	47b0      	blx	r6
   80f40:	e9cd 0104 	strd	r0, r1, [sp, #16]
   80f44:	460a      	mov	r2, r1
   80f46:	4601      	mov	r1, r0
   80f48:	e9c4 1206 	strd	r1, r2, [r4, #24]
	paadrag = kp*error+T_periode*ki*sum_error+(kd/T_periode)*(error-prev_error);
   80f4c:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 81014 <TC1_Handler+0x108>
   80f50:	e9d8 0100 	ldrd	r0, r1, [r8]
   80f54:	4d2a      	ldr	r5, [pc, #168]	; (81000 <TC1_Handler+0xf4>)
   80f56:	e9d8 2302 	ldrd	r2, r3, [r8, #8]
   80f5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
   80f5e:	47a8      	blx	r5
   80f60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   80f64:	47a8      	blx	r5
   80f66:	e9cd 0104 	strd	r0, r1, [sp, #16]
   80f6a:	e9d8 2304 	ldrd	r2, r3, [r8, #16]
   80f6e:	e9dd 0100 	ldrd	r0, r1, [sp]
   80f72:	47a8      	blx	r5
   80f74:	4602      	mov	r2, r0
   80f76:	460b      	mov	r3, r1
   80f78:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   80f7c:	47b0      	blx	r6
   80f7e:	e9cd 0104 	strd	r0, r1, [sp, #16]
   80f82:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   80f86:	e9d8 0106 	ldrd	r0, r1, [r8, #24]
   80f8a:	f8df 808c 	ldr.w	r8, [pc, #140]	; 81018 <TC1_Handler+0x10c>
   80f8e:	47c0      	blx	r8
   80f90:	4680      	mov	r8, r0
   80f92:	4689      	mov	r9, r1
   80f94:	4652      	mov	r2, sl
   80f96:	465b      	mov	r3, fp
   80f98:	e9dd 0100 	ldrd	r0, r1, [sp]
   80f9c:	f8df a07c 	ldr.w	sl, [pc, #124]	; 8101c <TC1_Handler+0x110>
   80fa0:	47d0      	blx	sl
   80fa2:	4602      	mov	r2, r0
   80fa4:	460b      	mov	r3, r1
   80fa6:	4640      	mov	r0, r8
   80fa8:	4649      	mov	r1, r9
   80faa:	47a8      	blx	r5
   80fac:	4602      	mov	r2, r0
   80fae:	460b      	mov	r3, r1
   80fb0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   80fb4:	47b0      	blx	r6
   80fb6:	4b13      	ldr	r3, [pc, #76]	; (81004 <TC1_Handler+0xf8>)
   80fb8:	4798      	blx	r3
   80fba:	6220      	str	r0, [r4, #32]
	if(joystick.left_button){
   80fbc:	f997 3005 	ldrsb.w	r3, [r7, #5]
   80fc0:	b123      	cbz	r3, 80fcc <TC1_Handler+0xc0>
		sum_error = 0; 
   80fc2:	2400      	movs	r4, #0
   80fc4:	2500      	movs	r5, #0
   80fc6:	4b09      	ldr	r3, [pc, #36]	; (80fec <TC1_Handler+0xe0>)
   80fc8:	e9c3 4506 	strd	r4, r5, [r3, #24]
	}
	change_motor_speed_using_paadrag(paadrag);
   80fcc:	4b0e      	ldr	r3, [pc, #56]	; (81008 <TC1_Handler+0xfc>)
   80fce:	4798      	blx	r3
	//printf("x: %d \n\r",paadrag);
	int a = tc->TC_CHANNEL[1].TC_SR; // funker uten?!
   80fd0:	4b0e      	ldr	r3, [pc, #56]	; (8100c <TC1_Handler+0x100>)
   80fd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   80fd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80fd8:	4b0d      	ldr	r3, [pc, #52]	; (81010 <TC1_Handler+0x104>)
   80fda:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ClearPendingIRQ(ID_TC1);
	ti_counter++;
   80fde:	4a03      	ldr	r2, [pc, #12]	; (80fec <TC1_Handler+0xe0>)
   80fe0:	7813      	ldrb	r3, [r2, #0]
   80fe2:	3301      	adds	r3, #1
   80fe4:	7013      	strb	r3, [r2, #0]
}
   80fe6:	b007      	add	sp, #28
   80fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80fec:	20000488 	.word	0x20000488
   80ff0:	200004ac 	.word	0x200004ac
   80ff4:	2000047d 	.word	0x2000047d
   80ff8:	00081411 	.word	0x00081411
   80ffc:	00081179 	.word	0x00081179
   81000:	000814dd 	.word	0x000814dd
   81004:	00081901 	.word	0x00081901
   81008:	000807c1 	.word	0x000807c1
   8100c:	40080000 	.word	0x40080000
   81010:	e000e100 	.word	0xe000e100
   81014:	20000008 	.word	0x20000008
   81018:	00081731 	.word	0x00081731
   8101c:	00081175 	.word	0x00081175

00081020 <init_ch1_PI>:

void init_ch1_PI(){
	
	
	PMC->PMC_PCER0 |= PMC_PCER0_PID28; //enable timer counter channel 0
   81020:	4a11      	ldr	r2, [pc, #68]	; (81068 <init_ch1_PI+0x48>)
   81022:	6913      	ldr	r3, [r2, #16]
   81024:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   81028:	6113      	str	r3, [r2, #16]
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   8102a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   8102e:	4b0f      	ldr	r3, [pc, #60]	; (8106c <init_ch1_PI+0x4c>)
   81030:	601a      	str	r2, [r3, #0]
	
	NVIC_EnableIRQ(ID_TC1);
	
	PIOB->PIO_PDR |= PIO_PDR_P0; //disable io on pinb 0
   81032:	4b0f      	ldr	r3, [pc, #60]	; (81070 <init_ch1_PI+0x50>)
   81034:	685a      	ldr	r2, [r3, #4]
   81036:	f042 0201 	orr.w	r2, r2, #1
   8103a:	605a      	str	r2, [r3, #4]
	PIOB->PIO_ABSR |= PIO_ABSR_P0; //PIO set peripheral b on pinb 0*/
   8103c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   8103e:	f042 0201 	orr.w	r2, r2, #1
   81042:	671a      	str	r2, [r3, #112]	; 0x70
	
	tc->TC_CHANNEL[1].TC_CMR = 0x0009C000;
   81044:	f5a3 23c2 	sub.w	r3, r3, #397312	; 0x61000
   81048:	f44f 221c 	mov.w	r2, #638976	; 0x9c000
   8104c:	645a      	str	r2, [r3, #68]	; 0x44
	tc->TC_CHANNEL[1].TC_RC = 0x000CD140;
   8104e:	4a09      	ldr	r2, [pc, #36]	; (81074 <init_ch1_PI+0x54>)
   81050:	65da      	str	r2, [r3, #92]	; 0x5c
	
	tc->TC_CHANNEL[1].TC_IER |= TC_IER_CPCS; // enable interrupt on compare with RC
   81052:	6e5a      	ldr	r2, [r3, #100]	; 0x64
   81054:	f042 0210 	orr.w	r2, r2, #16
   81058:	665a      	str	r2, [r3, #100]	; 0x64
	
	tc->TC_CHANNEL[1].TC_CCR = 0x00000001; //enables the clock
   8105a:	2201      	movs	r2, #1
   8105c:	641a      	str	r2, [r3, #64]	; 0x40
	tc->TC_CHANNEL[1].TC_CCR |= 0x1 << 2;
   8105e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   81060:	f042 0204 	orr.w	r2, r2, #4
   81064:	641a      	str	r2, [r3, #64]	; 0x40
   81066:	4770      	bx	lr
   81068:	400e0600 	.word	0x400e0600
   8106c:	e000e100 	.word	0xe000e100
   81070:	400e1000 	.word	0x400e1000
   81074:	000cd140 	.word	0x000cd140

00081078 <configure_uart>:
	uint32_t ul_sr;

/*
Initialize UART ring buffer as empty
*/
rx_buffer.head=0;
   81078:	4b16      	ldr	r3, [pc, #88]	; (810d4 <configure_uart+0x5c>)
   8107a:	2200      	movs	r2, #0
   8107c:	701a      	strb	r2, [r3, #0]
rx_buffer.tail=0;
   8107e:	705a      	strb	r2, [r3, #1]
/*
Initialize UART communication
*/
	// Pin configuration
	// Disable interrupts on Uart receive (URXD) and transmit (UTXD) pins
	PIOA->PIO_IDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   81080:	4b15      	ldr	r3, [pc, #84]	; (810d8 <configure_uart+0x60>)
   81082:	f44f 7140 	mov.w	r1, #768	; 0x300
   81086:	6459      	str	r1, [r3, #68]	; 0x44

	// Disable the Parallel IO (PIO) of the URXD and UTXD pins so that the peripheral controller can use them
	PIOA->PIO_PDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   81088:	6059      	str	r1, [r3, #4]

	// Read current peripheral AB select register and set the UTXD and URXD pins to 0 (UART is connected as peripheral A)
	ul_sr = PIOA->PIO_ABSR;
   8108a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
	PIOA->PIO_ABSR &= ~(PIO_PA8A_URXD | PIO_PA9A_UTXD) & ul_sr;
   8108c:	6f18      	ldr	r0, [r3, #112]	; 0x70
   8108e:	4002      	ands	r2, r0
   81090:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   81094:	671a      	str	r2, [r3, #112]	; 0x70

	// Enable pull up resistor on URXD and UTXD pin
	PIOA->PIO_PUER = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   81096:	6659      	str	r1, [r3, #100]	; 0x64

	// Uart configuration
	
	// Enable the peripheral UART controller in Power Management Controller (PMC)
	PMC->PMC_PCER0 = 1 << ID_UART;
   81098:	f44f 7280 	mov.w	r2, #256	; 0x100
   8109c:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   810a0:	611a      	str	r2, [r3, #16]

	// Reset and disable receiver and transmitter
	UART->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX | UART_CR_RXDIS | UART_CR_TXDIS;
   810a2:	f503 7300 	add.w	r3, r3, #512	; 0x200
   810a6:	21ac      	movs	r1, #172	; 0xac
   810a8:	6019      	str	r1, [r3, #0]

	// Set the baudrate
	UART->UART_BRGR = 547; // MCK / 16 * x = BaudRate (write x into UART_BRGR)  
   810aa:	f240 2123 	movw	r1, #547	; 0x223
   810ae:	6219      	str	r1, [r3, #32]

	// No parity bits
	UART->UART_MR = UART_MR_PAR_NO | UART_MR_CHMODE_NORMAL;	
   810b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
   810b4:	6059      	str	r1, [r3, #4]

	// Disable PDC channel
	UART->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   810b6:	f240 2102 	movw	r1, #514	; 0x202
   810ba:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120

	// Configure interrupts on receive ready and errors
	UART->UART_IDR = 0xFFFFFFFF;
   810be:	f04f 31ff 	mov.w	r1, #4294967295
   810c2:	60d9      	str	r1, [r3, #12]
	UART->UART_IER = UART_IER_RXRDY | UART_IER_OVRE | UART_IER_FRAME | UART_IER_PARE;
   810c4:	21e1      	movs	r1, #225	; 0xe1
   810c6:	6099      	str	r1, [r3, #8]
   810c8:	4904      	ldr	r1, [pc, #16]	; (810dc <configure_uart+0x64>)
   810ca:	600a      	str	r2, [r1, #0]

	// Enable UART interrupt in the Nested Vectored Interrupt Controller(NVIC)
	NVIC_EnableIRQ((IRQn_Type) ID_UART);

	// Enable UART receiver and transmitter
	UART->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   810cc:	2250      	movs	r2, #80	; 0x50
   810ce:	601a      	str	r2, [r3, #0]
   810d0:	4770      	bx	lr
   810d2:	bf00      	nop
   810d4:	200004b4 	.word	0x200004b4
   810d8:	400e0e00 	.word	0x400e0e00
   810dc:	e000e100 	.word	0xe000e100

000810e0 <uart_putchar>:
 * \retval Success(0) or failure(1).
 */
int uart_putchar(const uint8_t c)
{
	// Check if the transmitter is ready
	if((UART->UART_SR & UART_SR_TXRDY) != UART_SR_TXRDY)
   810e0:	4b07      	ldr	r3, [pc, #28]	; (81100 <uart_putchar+0x20>)
   810e2:	695b      	ldr	r3, [r3, #20]
   810e4:	f013 0f02 	tst.w	r3, #2
   810e8:	d008      	beq.n	810fc <uart_putchar+0x1c>
	return 1;

	// Send the character
	UART->UART_THR = c;
   810ea:	4b05      	ldr	r3, [pc, #20]	; (81100 <uart_putchar+0x20>)
   810ec:	61d8      	str	r0, [r3, #28]
	while(!((UART->UART_SR) & UART_SR_TXEMPTY)); // Wait for the character to be sent, can implement ring buffer to remove the wait
   810ee:	461a      	mov	r2, r3
   810f0:	6953      	ldr	r3, [r2, #20]
   810f2:	f413 7f00 	tst.w	r3, #512	; 0x200
   810f6:	d0fb      	beq.n	810f0 <uart_putchar+0x10>
	return 0;
   810f8:	2000      	movs	r0, #0
   810fa:	4770      	bx	lr
	return 1;
   810fc:	2001      	movs	r0, #1
}
   810fe:	4770      	bx	lr
   81100:	400e0800 	.word	0x400e0800

00081104 <UART_Handler>:

void UART_Handler(void)
{
   81104:	b508      	push	{r3, lr}
	uint32_t status = UART->UART_SR;
   81106:	4b15      	ldr	r3, [pc, #84]	; (8115c <UART_Handler+0x58>)
   81108:	695b      	ldr	r3, [r3, #20]
	
	//Reset UART at overflow error and frame error
	if(status & (UART_SR_OVRE | UART_SR_FRAME | UART_SR_PARE))
   8110a:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   8110e:	d003      	beq.n	81118 <UART_Handler+0x14>
	{
		UART->UART_CR = UART_CR_RXEN | UART_CR_TXEN | UART_CR_RSTSTA;
   81110:	f44f 71a8 	mov.w	r1, #336	; 0x150
   81114:	4a11      	ldr	r2, [pc, #68]	; (8115c <UART_Handler+0x58>)
   81116:	6011      	str	r1, [r2, #0]
	}
	
	//Check if message is ready to be received
	if(status & UART_SR_RXRDY)
   81118:	f013 0f01 	tst.w	r3, #1
   8111c:	d012      	beq.n	81144 <UART_Handler+0x40>
	{
		//Check if receive ring buffer is full and 
		if((rx_buffer.tail + 1) % UART_RINGBUFFER_SIZE == rx_buffer.head)
   8111e:	4810      	ldr	r0, [pc, #64]	; (81160 <UART_Handler+0x5c>)
   81120:	7842      	ldrb	r2, [r0, #1]
   81122:	1c53      	adds	r3, r2, #1
   81124:	4259      	negs	r1, r3
   81126:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   8112a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   8112e:	bf58      	it	pl
   81130:	424b      	negpl	r3, r1
   81132:	7801      	ldrb	r1, [r0, #0]
   81134:	428b      	cmp	r3, r1
   81136:	d006      	beq.n	81146 <UART_Handler+0x42>
		{
			printf("ERR: UART RX buffer is full\n\r");
			rx_buffer.data[rx_buffer.tail] = UART->UART_RHR; //Throw away message
			return;
		}
		rx_buffer.data[rx_buffer.tail] = UART->UART_RHR;
   81138:	4908      	ldr	r1, [pc, #32]	; (8115c <UART_Handler+0x58>)
   8113a:	6988      	ldr	r0, [r1, #24]
   8113c:	4908      	ldr	r1, [pc, #32]	; (81160 <UART_Handler+0x5c>)
   8113e:	440a      	add	r2, r1
   81140:	7090      	strb	r0, [r2, #2]
		rx_buffer.tail = (rx_buffer.tail + 1) % UART_RINGBUFFER_SIZE;
   81142:	704b      	strb	r3, [r1, #1]
   81144:	bd08      	pop	{r3, pc}
			printf("ERR: UART RX buffer is full\n\r");
   81146:	4807      	ldr	r0, [pc, #28]	; (81164 <UART_Handler+0x60>)
   81148:	4b07      	ldr	r3, [pc, #28]	; (81168 <UART_Handler+0x64>)
   8114a:	4798      	blx	r3
			rx_buffer.data[rx_buffer.tail] = UART->UART_RHR; //Throw away message
   8114c:	4b03      	ldr	r3, [pc, #12]	; (8115c <UART_Handler+0x58>)
   8114e:	699a      	ldr	r2, [r3, #24]
   81150:	4b03      	ldr	r3, [pc, #12]	; (81160 <UART_Handler+0x5c>)
   81152:	7859      	ldrb	r1, [r3, #1]
   81154:	440b      	add	r3, r1
   81156:	709a      	strb	r2, [r3, #2]
			return;
   81158:	bd08      	pop	{r3, pc}
   8115a:	bf00      	nop
   8115c:	400e0800 	.word	0x400e0800
   81160:	200004b4 	.word	0x200004b4
   81164:	00081bd0 	.word	0x00081bd0
   81168:	00080e21 	.word	0x00080e21

0008116c <__aeabi_drsub>:
   8116c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   81170:	e002      	b.n	81178 <__adddf3>
   81172:	bf00      	nop

00081174 <__aeabi_dsub>:
   81174:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00081178 <__adddf3>:
   81178:	b530      	push	{r4, r5, lr}
   8117a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   8117e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   81182:	ea94 0f05 	teq	r4, r5
   81186:	bf08      	it	eq
   81188:	ea90 0f02 	teqeq	r0, r2
   8118c:	bf1f      	itttt	ne
   8118e:	ea54 0c00 	orrsne.w	ip, r4, r0
   81192:	ea55 0c02 	orrsne.w	ip, r5, r2
   81196:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   8119a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8119e:	f000 80e2 	beq.w	81366 <__adddf3+0x1ee>
   811a2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   811a6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   811aa:	bfb8      	it	lt
   811ac:	426d      	neglt	r5, r5
   811ae:	dd0c      	ble.n	811ca <__adddf3+0x52>
   811b0:	442c      	add	r4, r5
   811b2:	ea80 0202 	eor.w	r2, r0, r2
   811b6:	ea81 0303 	eor.w	r3, r1, r3
   811ba:	ea82 0000 	eor.w	r0, r2, r0
   811be:	ea83 0101 	eor.w	r1, r3, r1
   811c2:	ea80 0202 	eor.w	r2, r0, r2
   811c6:	ea81 0303 	eor.w	r3, r1, r3
   811ca:	2d36      	cmp	r5, #54	; 0x36
   811cc:	bf88      	it	hi
   811ce:	bd30      	pophi	{r4, r5, pc}
   811d0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   811d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   811d8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   811dc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   811e0:	d002      	beq.n	811e8 <__adddf3+0x70>
   811e2:	4240      	negs	r0, r0
   811e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   811e8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   811ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
   811f0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   811f4:	d002      	beq.n	811fc <__adddf3+0x84>
   811f6:	4252      	negs	r2, r2
   811f8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   811fc:	ea94 0f05 	teq	r4, r5
   81200:	f000 80a7 	beq.w	81352 <__adddf3+0x1da>
   81204:	f1a4 0401 	sub.w	r4, r4, #1
   81208:	f1d5 0e20 	rsbs	lr, r5, #32
   8120c:	db0d      	blt.n	8122a <__adddf3+0xb2>
   8120e:	fa02 fc0e 	lsl.w	ip, r2, lr
   81212:	fa22 f205 	lsr.w	r2, r2, r5
   81216:	1880      	adds	r0, r0, r2
   81218:	f141 0100 	adc.w	r1, r1, #0
   8121c:	fa03 f20e 	lsl.w	r2, r3, lr
   81220:	1880      	adds	r0, r0, r2
   81222:	fa43 f305 	asr.w	r3, r3, r5
   81226:	4159      	adcs	r1, r3
   81228:	e00e      	b.n	81248 <__adddf3+0xd0>
   8122a:	f1a5 0520 	sub.w	r5, r5, #32
   8122e:	f10e 0e20 	add.w	lr, lr, #32
   81232:	2a01      	cmp	r2, #1
   81234:	fa03 fc0e 	lsl.w	ip, r3, lr
   81238:	bf28      	it	cs
   8123a:	f04c 0c02 	orrcs.w	ip, ip, #2
   8123e:	fa43 f305 	asr.w	r3, r3, r5
   81242:	18c0      	adds	r0, r0, r3
   81244:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   81248:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8124c:	d507      	bpl.n	8125e <__adddf3+0xe6>
   8124e:	f04f 0e00 	mov.w	lr, #0
   81252:	f1dc 0c00 	rsbs	ip, ip, #0
   81256:	eb7e 0000 	sbcs.w	r0, lr, r0
   8125a:	eb6e 0101 	sbc.w	r1, lr, r1
   8125e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   81262:	d31b      	bcc.n	8129c <__adddf3+0x124>
   81264:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   81268:	d30c      	bcc.n	81284 <__adddf3+0x10c>
   8126a:	0849      	lsrs	r1, r1, #1
   8126c:	ea5f 0030 	movs.w	r0, r0, rrx
   81270:	ea4f 0c3c 	mov.w	ip, ip, rrx
   81274:	f104 0401 	add.w	r4, r4, #1
   81278:	ea4f 5244 	mov.w	r2, r4, lsl #21
   8127c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   81280:	f080 809a 	bcs.w	813b8 <__adddf3+0x240>
   81284:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   81288:	bf08      	it	eq
   8128a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8128e:	f150 0000 	adcs.w	r0, r0, #0
   81292:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   81296:	ea41 0105 	orr.w	r1, r1, r5
   8129a:	bd30      	pop	{r4, r5, pc}
   8129c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   812a0:	4140      	adcs	r0, r0
   812a2:	eb41 0101 	adc.w	r1, r1, r1
   812a6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   812aa:	f1a4 0401 	sub.w	r4, r4, #1
   812ae:	d1e9      	bne.n	81284 <__adddf3+0x10c>
   812b0:	f091 0f00 	teq	r1, #0
   812b4:	bf04      	itt	eq
   812b6:	4601      	moveq	r1, r0
   812b8:	2000      	moveq	r0, #0
   812ba:	fab1 f381 	clz	r3, r1
   812be:	bf08      	it	eq
   812c0:	3320      	addeq	r3, #32
   812c2:	f1a3 030b 	sub.w	r3, r3, #11
   812c6:	f1b3 0220 	subs.w	r2, r3, #32
   812ca:	da0c      	bge.n	812e6 <__adddf3+0x16e>
   812cc:	320c      	adds	r2, #12
   812ce:	dd08      	ble.n	812e2 <__adddf3+0x16a>
   812d0:	f102 0c14 	add.w	ip, r2, #20
   812d4:	f1c2 020c 	rsb	r2, r2, #12
   812d8:	fa01 f00c 	lsl.w	r0, r1, ip
   812dc:	fa21 f102 	lsr.w	r1, r1, r2
   812e0:	e00c      	b.n	812fc <__adddf3+0x184>
   812e2:	f102 0214 	add.w	r2, r2, #20
   812e6:	bfd8      	it	le
   812e8:	f1c2 0c20 	rsble	ip, r2, #32
   812ec:	fa01 f102 	lsl.w	r1, r1, r2
   812f0:	fa20 fc0c 	lsr.w	ip, r0, ip
   812f4:	bfdc      	itt	le
   812f6:	ea41 010c 	orrle.w	r1, r1, ip
   812fa:	4090      	lslle	r0, r2
   812fc:	1ae4      	subs	r4, r4, r3
   812fe:	bfa2      	ittt	ge
   81300:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   81304:	4329      	orrge	r1, r5
   81306:	bd30      	popge	{r4, r5, pc}
   81308:	ea6f 0404 	mvn.w	r4, r4
   8130c:	3c1f      	subs	r4, #31
   8130e:	da1c      	bge.n	8134a <__adddf3+0x1d2>
   81310:	340c      	adds	r4, #12
   81312:	dc0e      	bgt.n	81332 <__adddf3+0x1ba>
   81314:	f104 0414 	add.w	r4, r4, #20
   81318:	f1c4 0220 	rsb	r2, r4, #32
   8131c:	fa20 f004 	lsr.w	r0, r0, r4
   81320:	fa01 f302 	lsl.w	r3, r1, r2
   81324:	ea40 0003 	orr.w	r0, r0, r3
   81328:	fa21 f304 	lsr.w	r3, r1, r4
   8132c:	ea45 0103 	orr.w	r1, r5, r3
   81330:	bd30      	pop	{r4, r5, pc}
   81332:	f1c4 040c 	rsb	r4, r4, #12
   81336:	f1c4 0220 	rsb	r2, r4, #32
   8133a:	fa20 f002 	lsr.w	r0, r0, r2
   8133e:	fa01 f304 	lsl.w	r3, r1, r4
   81342:	ea40 0003 	orr.w	r0, r0, r3
   81346:	4629      	mov	r1, r5
   81348:	bd30      	pop	{r4, r5, pc}
   8134a:	fa21 f004 	lsr.w	r0, r1, r4
   8134e:	4629      	mov	r1, r5
   81350:	bd30      	pop	{r4, r5, pc}
   81352:	f094 0f00 	teq	r4, #0
   81356:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   8135a:	bf06      	itte	eq
   8135c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   81360:	3401      	addeq	r4, #1
   81362:	3d01      	subne	r5, #1
   81364:	e74e      	b.n	81204 <__adddf3+0x8c>
   81366:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8136a:	bf18      	it	ne
   8136c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   81370:	d029      	beq.n	813c6 <__adddf3+0x24e>
   81372:	ea94 0f05 	teq	r4, r5
   81376:	bf08      	it	eq
   81378:	ea90 0f02 	teqeq	r0, r2
   8137c:	d005      	beq.n	8138a <__adddf3+0x212>
   8137e:	ea54 0c00 	orrs.w	ip, r4, r0
   81382:	bf04      	itt	eq
   81384:	4619      	moveq	r1, r3
   81386:	4610      	moveq	r0, r2
   81388:	bd30      	pop	{r4, r5, pc}
   8138a:	ea91 0f03 	teq	r1, r3
   8138e:	bf1e      	ittt	ne
   81390:	2100      	movne	r1, #0
   81392:	2000      	movne	r0, #0
   81394:	bd30      	popne	{r4, r5, pc}
   81396:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   8139a:	d105      	bne.n	813a8 <__adddf3+0x230>
   8139c:	0040      	lsls	r0, r0, #1
   8139e:	4149      	adcs	r1, r1
   813a0:	bf28      	it	cs
   813a2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   813a6:	bd30      	pop	{r4, r5, pc}
   813a8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   813ac:	bf3c      	itt	cc
   813ae:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   813b2:	bd30      	popcc	{r4, r5, pc}
   813b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   813b8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   813bc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   813c0:	f04f 0000 	mov.w	r0, #0
   813c4:	bd30      	pop	{r4, r5, pc}
   813c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   813ca:	bf1a      	itte	ne
   813cc:	4619      	movne	r1, r3
   813ce:	4610      	movne	r0, r2
   813d0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   813d4:	bf1c      	itt	ne
   813d6:	460b      	movne	r3, r1
   813d8:	4602      	movne	r2, r0
   813da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   813de:	bf06      	itte	eq
   813e0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   813e4:	ea91 0f03 	teqeq	r1, r3
   813e8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   813ec:	bd30      	pop	{r4, r5, pc}
   813ee:	bf00      	nop

000813f0 <__aeabi_ui2d>:
   813f0:	f090 0f00 	teq	r0, #0
   813f4:	bf04      	itt	eq
   813f6:	2100      	moveq	r1, #0
   813f8:	4770      	bxeq	lr
   813fa:	b530      	push	{r4, r5, lr}
   813fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   81400:	f104 0432 	add.w	r4, r4, #50	; 0x32
   81404:	f04f 0500 	mov.w	r5, #0
   81408:	f04f 0100 	mov.w	r1, #0
   8140c:	e750      	b.n	812b0 <__adddf3+0x138>
   8140e:	bf00      	nop

00081410 <__aeabi_i2d>:
   81410:	f090 0f00 	teq	r0, #0
   81414:	bf04      	itt	eq
   81416:	2100      	moveq	r1, #0
   81418:	4770      	bxeq	lr
   8141a:	b530      	push	{r4, r5, lr}
   8141c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   81420:	f104 0432 	add.w	r4, r4, #50	; 0x32
   81424:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   81428:	bf48      	it	mi
   8142a:	4240      	negmi	r0, r0
   8142c:	f04f 0100 	mov.w	r1, #0
   81430:	e73e      	b.n	812b0 <__adddf3+0x138>
   81432:	bf00      	nop

00081434 <__aeabi_f2d>:
   81434:	0042      	lsls	r2, r0, #1
   81436:	ea4f 01e2 	mov.w	r1, r2, asr #3
   8143a:	ea4f 0131 	mov.w	r1, r1, rrx
   8143e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   81442:	bf1f      	itttt	ne
   81444:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   81448:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   8144c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   81450:	4770      	bxne	lr
   81452:	f092 0f00 	teq	r2, #0
   81456:	bf14      	ite	ne
   81458:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   8145c:	4770      	bxeq	lr
   8145e:	b530      	push	{r4, r5, lr}
   81460:	f44f 7460 	mov.w	r4, #896	; 0x380
   81464:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   81468:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8146c:	e720      	b.n	812b0 <__adddf3+0x138>
   8146e:	bf00      	nop

00081470 <__aeabi_ul2d>:
   81470:	ea50 0201 	orrs.w	r2, r0, r1
   81474:	bf08      	it	eq
   81476:	4770      	bxeq	lr
   81478:	b530      	push	{r4, r5, lr}
   8147a:	f04f 0500 	mov.w	r5, #0
   8147e:	e00a      	b.n	81496 <__aeabi_l2d+0x16>

00081480 <__aeabi_l2d>:
   81480:	ea50 0201 	orrs.w	r2, r0, r1
   81484:	bf08      	it	eq
   81486:	4770      	bxeq	lr
   81488:	b530      	push	{r4, r5, lr}
   8148a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   8148e:	d502      	bpl.n	81496 <__aeabi_l2d+0x16>
   81490:	4240      	negs	r0, r0
   81492:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   81496:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8149a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8149e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   814a2:	f43f aedc 	beq.w	8125e <__adddf3+0xe6>
   814a6:	f04f 0203 	mov.w	r2, #3
   814aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   814ae:	bf18      	it	ne
   814b0:	3203      	addne	r2, #3
   814b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   814b6:	bf18      	it	ne
   814b8:	3203      	addne	r2, #3
   814ba:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   814be:	f1c2 0320 	rsb	r3, r2, #32
   814c2:	fa00 fc03 	lsl.w	ip, r0, r3
   814c6:	fa20 f002 	lsr.w	r0, r0, r2
   814ca:	fa01 fe03 	lsl.w	lr, r1, r3
   814ce:	ea40 000e 	orr.w	r0, r0, lr
   814d2:	fa21 f102 	lsr.w	r1, r1, r2
   814d6:	4414      	add	r4, r2
   814d8:	e6c1      	b.n	8125e <__adddf3+0xe6>
   814da:	bf00      	nop

000814dc <__aeabi_dmul>:
   814dc:	b570      	push	{r4, r5, r6, lr}
   814de:	f04f 0cff 	mov.w	ip, #255	; 0xff
   814e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   814e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   814ea:	bf1d      	ittte	ne
   814ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   814f0:	ea94 0f0c 	teqne	r4, ip
   814f4:	ea95 0f0c 	teqne	r5, ip
   814f8:	f000 f8de 	bleq	816b8 <__aeabi_dmul+0x1dc>
   814fc:	442c      	add	r4, r5
   814fe:	ea81 0603 	eor.w	r6, r1, r3
   81502:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   81506:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   8150a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   8150e:	bf18      	it	ne
   81510:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   81514:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   81518:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   8151c:	d038      	beq.n	81590 <__aeabi_dmul+0xb4>
   8151e:	fba0 ce02 	umull	ip, lr, r0, r2
   81522:	f04f 0500 	mov.w	r5, #0
   81526:	fbe1 e502 	umlal	lr, r5, r1, r2
   8152a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   8152e:	fbe0 e503 	umlal	lr, r5, r0, r3
   81532:	f04f 0600 	mov.w	r6, #0
   81536:	fbe1 5603 	umlal	r5, r6, r1, r3
   8153a:	f09c 0f00 	teq	ip, #0
   8153e:	bf18      	it	ne
   81540:	f04e 0e01 	orrne.w	lr, lr, #1
   81544:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   81548:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   8154c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   81550:	d204      	bcs.n	8155c <__aeabi_dmul+0x80>
   81552:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   81556:	416d      	adcs	r5, r5
   81558:	eb46 0606 	adc.w	r6, r6, r6
   8155c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   81560:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   81564:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   81568:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   8156c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   81570:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   81574:	bf88      	it	hi
   81576:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8157a:	d81e      	bhi.n	815ba <__aeabi_dmul+0xde>
   8157c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   81580:	bf08      	it	eq
   81582:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   81586:	f150 0000 	adcs.w	r0, r0, #0
   8158a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8158e:	bd70      	pop	{r4, r5, r6, pc}
   81590:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   81594:	ea46 0101 	orr.w	r1, r6, r1
   81598:	ea40 0002 	orr.w	r0, r0, r2
   8159c:	ea81 0103 	eor.w	r1, r1, r3
   815a0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   815a4:	bfc2      	ittt	gt
   815a6:	ebd4 050c 	rsbsgt	r5, r4, ip
   815aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   815ae:	bd70      	popgt	{r4, r5, r6, pc}
   815b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   815b4:	f04f 0e00 	mov.w	lr, #0
   815b8:	3c01      	subs	r4, #1
   815ba:	f300 80ab 	bgt.w	81714 <__aeabi_dmul+0x238>
   815be:	f114 0f36 	cmn.w	r4, #54	; 0x36
   815c2:	bfde      	ittt	le
   815c4:	2000      	movle	r0, #0
   815c6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   815ca:	bd70      	pople	{r4, r5, r6, pc}
   815cc:	f1c4 0400 	rsb	r4, r4, #0
   815d0:	3c20      	subs	r4, #32
   815d2:	da35      	bge.n	81640 <__aeabi_dmul+0x164>
   815d4:	340c      	adds	r4, #12
   815d6:	dc1b      	bgt.n	81610 <__aeabi_dmul+0x134>
   815d8:	f104 0414 	add.w	r4, r4, #20
   815dc:	f1c4 0520 	rsb	r5, r4, #32
   815e0:	fa00 f305 	lsl.w	r3, r0, r5
   815e4:	fa20 f004 	lsr.w	r0, r0, r4
   815e8:	fa01 f205 	lsl.w	r2, r1, r5
   815ec:	ea40 0002 	orr.w	r0, r0, r2
   815f0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   815f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   815f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   815fc:	fa21 f604 	lsr.w	r6, r1, r4
   81600:	eb42 0106 	adc.w	r1, r2, r6
   81604:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   81608:	bf08      	it	eq
   8160a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8160e:	bd70      	pop	{r4, r5, r6, pc}
   81610:	f1c4 040c 	rsb	r4, r4, #12
   81614:	f1c4 0520 	rsb	r5, r4, #32
   81618:	fa00 f304 	lsl.w	r3, r0, r4
   8161c:	fa20 f005 	lsr.w	r0, r0, r5
   81620:	fa01 f204 	lsl.w	r2, r1, r4
   81624:	ea40 0002 	orr.w	r0, r0, r2
   81628:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8162c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   81630:	f141 0100 	adc.w	r1, r1, #0
   81634:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   81638:	bf08      	it	eq
   8163a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8163e:	bd70      	pop	{r4, r5, r6, pc}
   81640:	f1c4 0520 	rsb	r5, r4, #32
   81644:	fa00 f205 	lsl.w	r2, r0, r5
   81648:	ea4e 0e02 	orr.w	lr, lr, r2
   8164c:	fa20 f304 	lsr.w	r3, r0, r4
   81650:	fa01 f205 	lsl.w	r2, r1, r5
   81654:	ea43 0302 	orr.w	r3, r3, r2
   81658:	fa21 f004 	lsr.w	r0, r1, r4
   8165c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   81660:	fa21 f204 	lsr.w	r2, r1, r4
   81664:	ea20 0002 	bic.w	r0, r0, r2
   81668:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   8166c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   81670:	bf08      	it	eq
   81672:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   81676:	bd70      	pop	{r4, r5, r6, pc}
   81678:	f094 0f00 	teq	r4, #0
   8167c:	d10f      	bne.n	8169e <__aeabi_dmul+0x1c2>
   8167e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   81682:	0040      	lsls	r0, r0, #1
   81684:	eb41 0101 	adc.w	r1, r1, r1
   81688:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8168c:	bf08      	it	eq
   8168e:	3c01      	subeq	r4, #1
   81690:	d0f7      	beq.n	81682 <__aeabi_dmul+0x1a6>
   81692:	ea41 0106 	orr.w	r1, r1, r6
   81696:	f095 0f00 	teq	r5, #0
   8169a:	bf18      	it	ne
   8169c:	4770      	bxne	lr
   8169e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   816a2:	0052      	lsls	r2, r2, #1
   816a4:	eb43 0303 	adc.w	r3, r3, r3
   816a8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   816ac:	bf08      	it	eq
   816ae:	3d01      	subeq	r5, #1
   816b0:	d0f7      	beq.n	816a2 <__aeabi_dmul+0x1c6>
   816b2:	ea43 0306 	orr.w	r3, r3, r6
   816b6:	4770      	bx	lr
   816b8:	ea94 0f0c 	teq	r4, ip
   816bc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   816c0:	bf18      	it	ne
   816c2:	ea95 0f0c 	teqne	r5, ip
   816c6:	d00c      	beq.n	816e2 <__aeabi_dmul+0x206>
   816c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   816cc:	bf18      	it	ne
   816ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   816d2:	d1d1      	bne.n	81678 <__aeabi_dmul+0x19c>
   816d4:	ea81 0103 	eor.w	r1, r1, r3
   816d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   816dc:	f04f 0000 	mov.w	r0, #0
   816e0:	bd70      	pop	{r4, r5, r6, pc}
   816e2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   816e6:	bf06      	itte	eq
   816e8:	4610      	moveq	r0, r2
   816ea:	4619      	moveq	r1, r3
   816ec:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   816f0:	d019      	beq.n	81726 <__aeabi_dmul+0x24a>
   816f2:	ea94 0f0c 	teq	r4, ip
   816f6:	d102      	bne.n	816fe <__aeabi_dmul+0x222>
   816f8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   816fc:	d113      	bne.n	81726 <__aeabi_dmul+0x24a>
   816fe:	ea95 0f0c 	teq	r5, ip
   81702:	d105      	bne.n	81710 <__aeabi_dmul+0x234>
   81704:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   81708:	bf1c      	itt	ne
   8170a:	4610      	movne	r0, r2
   8170c:	4619      	movne	r1, r3
   8170e:	d10a      	bne.n	81726 <__aeabi_dmul+0x24a>
   81710:	ea81 0103 	eor.w	r1, r1, r3
   81714:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   81718:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8171c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   81720:	f04f 0000 	mov.w	r0, #0
   81724:	bd70      	pop	{r4, r5, r6, pc}
   81726:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8172a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   8172e:	bd70      	pop	{r4, r5, r6, pc}

00081730 <__aeabi_ddiv>:
   81730:	b570      	push	{r4, r5, r6, lr}
   81732:	f04f 0cff 	mov.w	ip, #255	; 0xff
   81736:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8173a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8173e:	bf1d      	ittte	ne
   81740:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   81744:	ea94 0f0c 	teqne	r4, ip
   81748:	ea95 0f0c 	teqne	r5, ip
   8174c:	f000 f8a7 	bleq	8189e <__aeabi_ddiv+0x16e>
   81750:	eba4 0405 	sub.w	r4, r4, r5
   81754:	ea81 0e03 	eor.w	lr, r1, r3
   81758:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8175c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   81760:	f000 8088 	beq.w	81874 <__aeabi_ddiv+0x144>
   81764:	ea4f 3303 	mov.w	r3, r3, lsl #12
   81768:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   8176c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   81770:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   81774:	ea4f 2202 	mov.w	r2, r2, lsl #8
   81778:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   8177c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   81780:	ea4f 2600 	mov.w	r6, r0, lsl #8
   81784:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   81788:	429d      	cmp	r5, r3
   8178a:	bf08      	it	eq
   8178c:	4296      	cmpeq	r6, r2
   8178e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   81792:	f504 7440 	add.w	r4, r4, #768	; 0x300
   81796:	d202      	bcs.n	8179e <__aeabi_ddiv+0x6e>
   81798:	085b      	lsrs	r3, r3, #1
   8179a:	ea4f 0232 	mov.w	r2, r2, rrx
   8179e:	1ab6      	subs	r6, r6, r2
   817a0:	eb65 0503 	sbc.w	r5, r5, r3
   817a4:	085b      	lsrs	r3, r3, #1
   817a6:	ea4f 0232 	mov.w	r2, r2, rrx
   817aa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   817ae:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   817b2:	ebb6 0e02 	subs.w	lr, r6, r2
   817b6:	eb75 0e03 	sbcs.w	lr, r5, r3
   817ba:	bf22      	ittt	cs
   817bc:	1ab6      	subcs	r6, r6, r2
   817be:	4675      	movcs	r5, lr
   817c0:	ea40 000c 	orrcs.w	r0, r0, ip
   817c4:	085b      	lsrs	r3, r3, #1
   817c6:	ea4f 0232 	mov.w	r2, r2, rrx
   817ca:	ebb6 0e02 	subs.w	lr, r6, r2
   817ce:	eb75 0e03 	sbcs.w	lr, r5, r3
   817d2:	bf22      	ittt	cs
   817d4:	1ab6      	subcs	r6, r6, r2
   817d6:	4675      	movcs	r5, lr
   817d8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   817dc:	085b      	lsrs	r3, r3, #1
   817de:	ea4f 0232 	mov.w	r2, r2, rrx
   817e2:	ebb6 0e02 	subs.w	lr, r6, r2
   817e6:	eb75 0e03 	sbcs.w	lr, r5, r3
   817ea:	bf22      	ittt	cs
   817ec:	1ab6      	subcs	r6, r6, r2
   817ee:	4675      	movcs	r5, lr
   817f0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   817f4:	085b      	lsrs	r3, r3, #1
   817f6:	ea4f 0232 	mov.w	r2, r2, rrx
   817fa:	ebb6 0e02 	subs.w	lr, r6, r2
   817fe:	eb75 0e03 	sbcs.w	lr, r5, r3
   81802:	bf22      	ittt	cs
   81804:	1ab6      	subcs	r6, r6, r2
   81806:	4675      	movcs	r5, lr
   81808:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   8180c:	ea55 0e06 	orrs.w	lr, r5, r6
   81810:	d018      	beq.n	81844 <__aeabi_ddiv+0x114>
   81812:	ea4f 1505 	mov.w	r5, r5, lsl #4
   81816:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   8181a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   8181e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   81822:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   81826:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   8182a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   8182e:	d1c0      	bne.n	817b2 <__aeabi_ddiv+0x82>
   81830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   81834:	d10b      	bne.n	8184e <__aeabi_ddiv+0x11e>
   81836:	ea41 0100 	orr.w	r1, r1, r0
   8183a:	f04f 0000 	mov.w	r0, #0
   8183e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   81842:	e7b6      	b.n	817b2 <__aeabi_ddiv+0x82>
   81844:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   81848:	bf04      	itt	eq
   8184a:	4301      	orreq	r1, r0
   8184c:	2000      	moveq	r0, #0
   8184e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   81852:	bf88      	it	hi
   81854:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   81858:	f63f aeaf 	bhi.w	815ba <__aeabi_dmul+0xde>
   8185c:	ebb5 0c03 	subs.w	ip, r5, r3
   81860:	bf04      	itt	eq
   81862:	ebb6 0c02 	subseq.w	ip, r6, r2
   81866:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8186a:	f150 0000 	adcs.w	r0, r0, #0
   8186e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   81872:	bd70      	pop	{r4, r5, r6, pc}
   81874:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   81878:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   8187c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   81880:	bfc2      	ittt	gt
   81882:	ebd4 050c 	rsbsgt	r5, r4, ip
   81886:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8188a:	bd70      	popgt	{r4, r5, r6, pc}
   8188c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   81890:	f04f 0e00 	mov.w	lr, #0
   81894:	3c01      	subs	r4, #1
   81896:	e690      	b.n	815ba <__aeabi_dmul+0xde>
   81898:	ea45 0e06 	orr.w	lr, r5, r6
   8189c:	e68d      	b.n	815ba <__aeabi_dmul+0xde>
   8189e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   818a2:	ea94 0f0c 	teq	r4, ip
   818a6:	bf08      	it	eq
   818a8:	ea95 0f0c 	teqeq	r5, ip
   818ac:	f43f af3b 	beq.w	81726 <__aeabi_dmul+0x24a>
   818b0:	ea94 0f0c 	teq	r4, ip
   818b4:	d10a      	bne.n	818cc <__aeabi_ddiv+0x19c>
   818b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   818ba:	f47f af34 	bne.w	81726 <__aeabi_dmul+0x24a>
   818be:	ea95 0f0c 	teq	r5, ip
   818c2:	f47f af25 	bne.w	81710 <__aeabi_dmul+0x234>
   818c6:	4610      	mov	r0, r2
   818c8:	4619      	mov	r1, r3
   818ca:	e72c      	b.n	81726 <__aeabi_dmul+0x24a>
   818cc:	ea95 0f0c 	teq	r5, ip
   818d0:	d106      	bne.n	818e0 <__aeabi_ddiv+0x1b0>
   818d2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   818d6:	f43f aefd 	beq.w	816d4 <__aeabi_dmul+0x1f8>
   818da:	4610      	mov	r0, r2
   818dc:	4619      	mov	r1, r3
   818de:	e722      	b.n	81726 <__aeabi_dmul+0x24a>
   818e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   818e4:	bf18      	it	ne
   818e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   818ea:	f47f aec5 	bne.w	81678 <__aeabi_dmul+0x19c>
   818ee:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   818f2:	f47f af0d 	bne.w	81710 <__aeabi_dmul+0x234>
   818f6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   818fa:	f47f aeeb 	bne.w	816d4 <__aeabi_dmul+0x1f8>
   818fe:	e712      	b.n	81726 <__aeabi_dmul+0x24a>

00081900 <__aeabi_d2iz>:
   81900:	ea4f 0241 	mov.w	r2, r1, lsl #1
   81904:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   81908:	d215      	bcs.n	81936 <__aeabi_d2iz+0x36>
   8190a:	d511      	bpl.n	81930 <__aeabi_d2iz+0x30>
   8190c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   81910:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   81914:	d912      	bls.n	8193c <__aeabi_d2iz+0x3c>
   81916:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   8191a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   8191e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   81922:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   81926:	fa23 f002 	lsr.w	r0, r3, r2
   8192a:	bf18      	it	ne
   8192c:	4240      	negne	r0, r0
   8192e:	4770      	bx	lr
   81930:	f04f 0000 	mov.w	r0, #0
   81934:	4770      	bx	lr
   81936:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   8193a:	d105      	bne.n	81948 <__aeabi_d2iz+0x48>
   8193c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   81940:	bf08      	it	eq
   81942:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   81946:	4770      	bx	lr
   81948:	f04f 0000 	mov.w	r0, #0
   8194c:	4770      	bx	lr
   8194e:	bf00      	nop

00081950 <__aeabi_d2uiz>:
   81950:	004a      	lsls	r2, r1, #1
   81952:	d211      	bcs.n	81978 <__aeabi_d2uiz+0x28>
   81954:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   81958:	d211      	bcs.n	8197e <__aeabi_d2uiz+0x2e>
   8195a:	d50d      	bpl.n	81978 <__aeabi_d2uiz+0x28>
   8195c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   81960:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   81964:	d40e      	bmi.n	81984 <__aeabi_d2uiz+0x34>
   81966:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   8196a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   8196e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   81972:	fa23 f002 	lsr.w	r0, r3, r2
   81976:	4770      	bx	lr
   81978:	f04f 0000 	mov.w	r0, #0
   8197c:	4770      	bx	lr
   8197e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   81982:	d102      	bne.n	8198a <__aeabi_d2uiz+0x3a>
   81984:	f04f 30ff 	mov.w	r0, #4294967295
   81988:	4770      	bx	lr
   8198a:	f04f 0000 	mov.w	r0, #0
   8198e:	4770      	bx	lr

00081990 <__libc_init_array>:
   81990:	b570      	push	{r4, r5, r6, lr}
   81992:	4e0f      	ldr	r6, [pc, #60]	; (819d0 <__libc_init_array+0x40>)
   81994:	4d0f      	ldr	r5, [pc, #60]	; (819d4 <__libc_init_array+0x44>)
   81996:	1b76      	subs	r6, r6, r5
   81998:	10b6      	asrs	r6, r6, #2
   8199a:	bf18      	it	ne
   8199c:	2400      	movne	r4, #0
   8199e:	d005      	beq.n	819ac <__libc_init_array+0x1c>
   819a0:	3401      	adds	r4, #1
   819a2:	f855 3b04 	ldr.w	r3, [r5], #4
   819a6:	4798      	blx	r3
   819a8:	42a6      	cmp	r6, r4
   819aa:	d1f9      	bne.n	819a0 <__libc_init_array+0x10>
   819ac:	4e0a      	ldr	r6, [pc, #40]	; (819d8 <__libc_init_array+0x48>)
   819ae:	4d0b      	ldr	r5, [pc, #44]	; (819dc <__libc_init_array+0x4c>)
   819b0:	f000 f920 	bl	81bf4 <_init>
   819b4:	1b76      	subs	r6, r6, r5
   819b6:	10b6      	asrs	r6, r6, #2
   819b8:	bf18      	it	ne
   819ba:	2400      	movne	r4, #0
   819bc:	d006      	beq.n	819cc <__libc_init_array+0x3c>
   819be:	3401      	adds	r4, #1
   819c0:	f855 3b04 	ldr.w	r3, [r5], #4
   819c4:	4798      	blx	r3
   819c6:	42a6      	cmp	r6, r4
   819c8:	d1f9      	bne.n	819be <__libc_init_array+0x2e>
   819ca:	bd70      	pop	{r4, r5, r6, pc}
   819cc:	bd70      	pop	{r4, r5, r6, pc}
   819ce:	bf00      	nop
   819d0:	00081c00 	.word	0x00081c00
   819d4:	00081c00 	.word	0x00081c00
   819d8:	00081c08 	.word	0x00081c08
   819dc:	00081c00 	.word	0x00081c00

000819e0 <register_fini>:
   819e0:	4b02      	ldr	r3, [pc, #8]	; (819ec <register_fini+0xc>)
   819e2:	b113      	cbz	r3, 819ea <register_fini+0xa>
   819e4:	4802      	ldr	r0, [pc, #8]	; (819f0 <register_fini+0x10>)
   819e6:	f000 b805 	b.w	819f4 <atexit>
   819ea:	4770      	bx	lr
   819ec:	00000000 	.word	0x00000000
   819f0:	00081a01 	.word	0x00081a01

000819f4 <atexit>:
   819f4:	2300      	movs	r3, #0
   819f6:	4601      	mov	r1, r0
   819f8:	461a      	mov	r2, r3
   819fa:	4618      	mov	r0, r3
   819fc:	f000 b81e 	b.w	81a3c <__register_exitproc>

00081a00 <__libc_fini_array>:
   81a00:	b538      	push	{r3, r4, r5, lr}
   81a02:	4c0a      	ldr	r4, [pc, #40]	; (81a2c <__libc_fini_array+0x2c>)
   81a04:	4d0a      	ldr	r5, [pc, #40]	; (81a30 <__libc_fini_array+0x30>)
   81a06:	1b64      	subs	r4, r4, r5
   81a08:	10a4      	asrs	r4, r4, #2
   81a0a:	d00a      	beq.n	81a22 <__libc_fini_array+0x22>
   81a0c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   81a10:	3b01      	subs	r3, #1
   81a12:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   81a16:	3c01      	subs	r4, #1
   81a18:	f855 3904 	ldr.w	r3, [r5], #-4
   81a1c:	4798      	blx	r3
   81a1e:	2c00      	cmp	r4, #0
   81a20:	d1f9      	bne.n	81a16 <__libc_fini_array+0x16>
   81a22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   81a26:	f000 b8ef 	b.w	81c08 <_fini>
   81a2a:	bf00      	nop
   81a2c:	00081c18 	.word	0x00081c18
   81a30:	00081c14 	.word	0x00081c14

00081a34 <__retarget_lock_acquire_recursive>:
   81a34:	4770      	bx	lr
   81a36:	bf00      	nop

00081a38 <__retarget_lock_release_recursive>:
   81a38:	4770      	bx	lr
   81a3a:	bf00      	nop

00081a3c <__register_exitproc>:
   81a3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   81a40:	4d2c      	ldr	r5, [pc, #176]	; (81af4 <__register_exitproc+0xb8>)
   81a42:	4606      	mov	r6, r0
   81a44:	6828      	ldr	r0, [r5, #0]
   81a46:	4698      	mov	r8, r3
   81a48:	460f      	mov	r7, r1
   81a4a:	4691      	mov	r9, r2
   81a4c:	f7ff fff2 	bl	81a34 <__retarget_lock_acquire_recursive>
   81a50:	4b29      	ldr	r3, [pc, #164]	; (81af8 <__register_exitproc+0xbc>)
   81a52:	681c      	ldr	r4, [r3, #0]
   81a54:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   81a58:	2b00      	cmp	r3, #0
   81a5a:	d03e      	beq.n	81ada <__register_exitproc+0x9e>
   81a5c:	685a      	ldr	r2, [r3, #4]
   81a5e:	2a1f      	cmp	r2, #31
   81a60:	dc1c      	bgt.n	81a9c <__register_exitproc+0x60>
   81a62:	f102 0e01 	add.w	lr, r2, #1
   81a66:	b176      	cbz	r6, 81a86 <__register_exitproc+0x4a>
   81a68:	2101      	movs	r1, #1
   81a6a:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   81a6e:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   81a72:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   81a76:	4091      	lsls	r1, r2
   81a78:	4308      	orrs	r0, r1
   81a7a:	2e02      	cmp	r6, #2
   81a7c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   81a80:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   81a84:	d023      	beq.n	81ace <__register_exitproc+0x92>
   81a86:	3202      	adds	r2, #2
   81a88:	f8c3 e004 	str.w	lr, [r3, #4]
   81a8c:	6828      	ldr	r0, [r5, #0]
   81a8e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   81a92:	f7ff ffd1 	bl	81a38 <__retarget_lock_release_recursive>
   81a96:	2000      	movs	r0, #0
   81a98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   81a9c:	4b17      	ldr	r3, [pc, #92]	; (81afc <__register_exitproc+0xc0>)
   81a9e:	b30b      	cbz	r3, 81ae4 <__register_exitproc+0xa8>
   81aa0:	f44f 70c8 	mov.w	r0, #400	; 0x190
   81aa4:	f3af 8000 	nop.w
   81aa8:	4603      	mov	r3, r0
   81aaa:	b1d8      	cbz	r0, 81ae4 <__register_exitproc+0xa8>
   81aac:	2000      	movs	r0, #0
   81aae:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   81ab2:	f04f 0e01 	mov.w	lr, #1
   81ab6:	6058      	str	r0, [r3, #4]
   81ab8:	6019      	str	r1, [r3, #0]
   81aba:	4602      	mov	r2, r0
   81abc:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   81ac0:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   81ac4:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   81ac8:	2e00      	cmp	r6, #0
   81aca:	d0dc      	beq.n	81a86 <__register_exitproc+0x4a>
   81acc:	e7cc      	b.n	81a68 <__register_exitproc+0x2c>
   81ace:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   81ad2:	4301      	orrs	r1, r0
   81ad4:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   81ad8:	e7d5      	b.n	81a86 <__register_exitproc+0x4a>
   81ada:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   81ade:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   81ae2:	e7bb      	b.n	81a5c <__register_exitproc+0x20>
   81ae4:	6828      	ldr	r0, [r5, #0]
   81ae6:	f7ff ffa7 	bl	81a38 <__retarget_lock_release_recursive>
   81aea:	f04f 30ff 	mov.w	r0, #4294967295
   81aee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   81af2:	bf00      	nop
   81af4:	20000450 	.word	0x20000450
   81af8:	00081bf0 	.word	0x00081bf0
   81afc:	00000000 	.word	0x00000000
   81b00:	304e4143 	.word	0x304e4143
   81b04:	73656d20 	.word	0x73656d20
   81b08:	65676173 	.word	0x65676173
   81b0c:	72726120 	.word	0x72726120
   81b10:	64657669 	.word	0x64657669
   81b14:	206e6920 	.word	0x206e6920
   81b18:	2d6e6f6e 	.word	0x2d6e6f6e
   81b1c:	64657375 	.word	0x64657375
   81b20:	69616d20 	.word	0x69616d20
   81b24:	786f626c 	.word	0x786f626c
   81b28:	00000d0a 	.word	0x00000d0a
   81b2c:	7373656d 	.word	0x7373656d
   81b30:	20656761 	.word	0x20656761
   81b34:	203a6469 	.word	0x203a6469
   81b38:	0d0a6425 	.word	0x0d0a6425
   81b3c:	00000000 	.word	0x00000000
   81b40:	7373656d 	.word	0x7373656d
   81b44:	20656761 	.word	0x20656761
   81b48:	61746164 	.word	0x61746164
   81b4c:	6e656c20 	.word	0x6e656c20
   81b50:	3a687467 	.word	0x3a687467
   81b54:	0a642520 	.word	0x0a642520
   81b58:	0000000d 	.word	0x0000000d
   81b5c:	00206425 	.word	0x00206425
   81b60:	7373656d 	.word	0x7373656d
   81b64:	20656761 	.word	0x20656761
   81b68:	203a6469 	.word	0x203a6469
   81b6c:	0d207825 	.word	0x0d207825
   81b70:	0000000a 	.word	0x0000000a
   81b74:	7373656d 	.word	0x7373656d
   81b78:	20656761 	.word	0x20656761
   81b7c:	676e656c 	.word	0x676e656c
   81b80:	203a6874 	.word	0x203a6874
   81b84:	0d207825 	.word	0x0d207825
   81b88:	0000000a 	.word	0x0000000a
   81b8c:	7373656d 	.word	0x7373656d
   81b90:	20656761 	.word	0x20656761
   81b94:	61746164 	.word	0x61746164
   81b98:	6425203a 	.word	0x6425203a
   81b9c:	000a0d20 	.word	0x000a0d20
   81ba0:	6f636e45 	.word	0x6f636e45
   81ba4:	20726564 	.word	0x20726564
   81ba8:	20202020 	.word	0x20202020
   81bac:	20202020 	.word	0x20202020
   81bb0:	20202020 	.word	0x20202020
   81bb4:	61746164 	.word	0x61746164
   81bb8:	7825203a 	.word	0x7825203a
   81bbc:	000d0a20 	.word	0x000d0a20
   81bc0:	6c6c6568 	.word	0x6c6c6568
   81bc4:	000d0a6f 	.word	0x000d0a6f
   81bc8:	6c756e28 	.word	0x6c756e28
   81bcc:	0000296c 	.word	0x0000296c
   81bd0:	3a525245 	.word	0x3a525245
   81bd4:	52415520 	.word	0x52415520
   81bd8:	58522054 	.word	0x58522054
   81bdc:	66756220 	.word	0x66756220
   81be0:	20726566 	.word	0x20726566
   81be4:	66207369 	.word	0x66207369
   81be8:	0a6c6c75 	.word	0x0a6c6c75
   81bec:	0000000d 	.word	0x0000000d

00081bf0 <_global_impure_ptr>:
   81bf0:	20000028                                (.. 

00081bf4 <_init>:
   81bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81bf6:	bf00      	nop
   81bf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   81bfa:	bc08      	pop	{r3}
   81bfc:	469e      	mov	lr, r3
   81bfe:	4770      	bx	lr

00081c00 <__init_array_start>:
   81c00:	000819e1 	.word	0x000819e1

00081c04 <__frame_dummy_init_array_entry>:
   81c04:	00080119                                ....

00081c08 <_fini>:
   81c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81c0a:	bf00      	nop
   81c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   81c0e:	bc08      	pop	{r3}
   81c10:	469e      	mov	lr, r3
   81c12:	4770      	bx	lr

00081c14 <__fini_array_start>:
   81c14:	000800f5 	.word	0x000800f5
