
ice_ice_arduino.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001dac  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000454  20000000  00081dac  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000d4  20000458  00082208  00020458  2**3
                  ALLOC
  3 .stack        00000404  2000052c  000822dc  00020458  2**0
                  ALLOC
  4 .heap         00000200  20000930  000826e0  00020458  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020454  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002047d  2**0
                  CONTENTS, READONLY
  7 .debug_info   00008cd3  00000000  00000000  000204d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001b87  00000000  00000000  000291a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000152e  00000000  00000000  0002ad30  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000368  00000000  00000000  0002c25e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002c0  00000000  00000000  0002c5c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001343a  00000000  00000000  0002c886  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00006937  00000000  00000000  0003fcc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00054819  00000000  00000000  000465f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00000974  00000000  00000000  0009ae10  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	30 09 00 20 d5 05 08 00 d1 05 08 00 d1 05 08 00     0.. ............
   80010:	d1 05 08 00 d1 05 08 00 d1 05 08 00 00 00 00 00     ................
	...
   8002c:	d1 05 08 00 d1 05 08 00 00 00 00 00 d1 05 08 00     ................
   8003c:	69 10 08 00 d1 05 08 00 d1 05 08 00 d1 05 08 00     i...............
   8004c:	d1 05 08 00 d1 05 08 00 d1 05 08 00 d1 05 08 00     ................
   8005c:	d1 05 08 00 8d 12 08 00 d1 05 08 00 00 00 00 00     ................
   8006c:	d1 05 08 00 d1 05 08 00 d1 05 08 00 d1 05 08 00     ................
	...
   80084:	d1 05 08 00 d1 05 08 00 d1 05 08 00 d1 05 08 00     ................
   80094:	d1 05 08 00 d1 05 08 00 d1 05 08 00 d1 05 08 00     ................
   800a4:	00 00 00 00 d1 05 08 00 d1 05 08 00 f5 0b 08 00     ................
   800b4:	7d 11 08 00 d1 05 08 00 d1 05 08 00 d1 05 08 00     }...............
   800c4:	d1 05 08 00 d1 05 08 00 d1 05 08 00 d1 05 08 00     ................
   800d4:	b5 01 08 00 d1 05 08 00 d1 05 08 00 d1 05 08 00     ................
   800e4:	d1 05 08 00 d1 05 08 00 15 04 08 00 d1 05 08 00     ................

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20000458 	.word	0x20000458
   80110:	00000000 	.word	0x00000000
   80114:	00081dac 	.word	0x00081dac

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00081dac 	.word	0x00081dac
   80154:	2000045c 	.word	0x2000045c
   80158:	00081dac 	.word	0x00081dac
   8015c:	00000000 	.word	0x00000000

00080160 <adc_init>:

#include "sam.h"

void adc_init(){
	
	PMC->PMC_PCER1 = PMC_PCER1_PID37; //enable adc controller
   80160:	2320      	movs	r3, #32
   80162:	4a0b      	ldr	r2, [pc, #44]	; (80190 <adc_init+0x30>)
   80164:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   80168:	4a0a      	ldr	r2, [pc, #40]	; (80194 <adc_init+0x34>)
   8016a:	6053      	str	r3, [r2, #4]
	
	//Enable interrupt in NVIC
	NVIC_EnableIRQ(ID_ADC);
	
	
	ADC->ADC_CHER = ADC_CHER_CH1; //pin a6 på arduino due
   8016c:	4b0a      	ldr	r3, [pc, #40]	; (80198 <adc_init+0x38>)
   8016e:	2202      	movs	r2, #2
   80170:	611a      	str	r2, [r3, #16]
	//ADC->ADC_MR = ADC_MR_TRGEN_EN;
	ADC->ADC_MR = ADC_MR_FREERUN;
   80172:	2180      	movs	r1, #128	; 0x80
   80174:	6059      	str	r1, [r3, #4]
	
	ADC->ADC_CR = ADC_CR_START;
   80176:	601a      	str	r2, [r3, #0]
	ADC->ADC_IER = ADC_IER_COMPE;
   80178:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   8017c:	625a      	str	r2, [r3, #36]	; 0x24
	//ADC->ADC_IER |= ADC_IER_DRDY;
	ADC->ADC_EMR |= ADC_EMR_CMPMODE_LOW;
   8017e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   80180:	641a      	str	r2, [r3, #64]	; 0x40

	//ADC->ADC_EMR = (0x0u << 9);
	ADC->ADC_EMR |= ADC_EMR_CMPSEL(1);
   80182:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   80184:	f042 0210 	orr.w	r2, r2, #16
   80188:	641a      	str	r2, [r3, #64]	; 0x40
	ADC->ADC_CWR = ADC_CWR_LOWTHRES(0x00f);
   8018a:	220f      	movs	r2, #15
   8018c:	645a      	str	r2, [r3, #68]	; 0x44
   8018e:	4770      	bx	lr
   80190:	400e0600 	.word	0x400e0600
   80194:	e000e100 	.word	0xe000e100
   80198:	400c0000 	.word	0x400c0000

0008019c <get_goal_flag>:
	 return TOTAL_GOALS;
 }

uint8_t get_goal_flag(){
	 return goal_flag;
 }
   8019c:	4b01      	ldr	r3, [pc, #4]	; (801a4 <get_goal_flag+0x8>)
   8019e:	7858      	ldrb	r0, [r3, #1]
   801a0:	4770      	bx	lr
   801a2:	bf00      	nop
   801a4:	20000474 	.word	0x20000474

000801a8 <reset_goal_flag>:

 void reset_goal_flag(){
	 goal_flag = 0;
   801a8:	2200      	movs	r2, #0
   801aa:	4b01      	ldr	r3, [pc, #4]	; (801b0 <reset_goal_flag+0x8>)
   801ac:	705a      	strb	r2, [r3, #1]
   801ae:	4770      	bx	lr
   801b0:	20000474 	.word	0x20000474

000801b4 <ADC_Handler>:
 }

void ADC_Handler( void ){
   801b4:	b510      	push	{r4, lr}
	//printf("Aa");
	if(last_goal_time + 800 < return_milliseconds()){
   801b6:	4b0e      	ldr	r3, [pc, #56]	; (801f0 <ADC_Handler+0x3c>)
   801b8:	685c      	ldr	r4, [r3, #4]
   801ba:	f504 7448 	add.w	r4, r4, #800	; 0x320
   801be:	4b0d      	ldr	r3, [pc, #52]	; (801f4 <ADC_Handler+0x40>)
   801c0:	4798      	blx	r3
   801c2:	4284      	cmp	r4, r0
   801c4:	d309      	bcc.n	801da <ADC_Handler+0x26>
		TOTAL_GOALS += 1;
		last_goal_time = return_milliseconds();
		goal_flag = 1;
	}

	change_motor_speed_using_paadrag(0);
   801c6:	2000      	movs	r0, #0
   801c8:	4b0b      	ldr	r3, [pc, #44]	; (801f8 <ADC_Handler+0x44>)
   801ca:	4798      	blx	r3

	int i = ADC->ADC_ISR;
   801cc:	4b0b      	ldr	r3, [pc, #44]	; (801fc <ADC_Handler+0x48>)
   801ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   801d0:	2220      	movs	r2, #32
   801d2:	4b0b      	ldr	r3, [pc, #44]	; (80200 <ADC_Handler+0x4c>)
   801d4:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   801d8:	bd10      	pop	{r4, pc}
		TOTAL_GOALS += 1;
   801da:	4c05      	ldr	r4, [pc, #20]	; (801f0 <ADC_Handler+0x3c>)
   801dc:	7823      	ldrb	r3, [r4, #0]
   801de:	3301      	adds	r3, #1
   801e0:	7023      	strb	r3, [r4, #0]
		last_goal_time = return_milliseconds();
   801e2:	4b04      	ldr	r3, [pc, #16]	; (801f4 <ADC_Handler+0x40>)
   801e4:	4798      	blx	r3
   801e6:	6060      	str	r0, [r4, #4]
		goal_flag = 1;
   801e8:	2301      	movs	r3, #1
   801ea:	7063      	strb	r3, [r4, #1]
   801ec:	e7eb      	b.n	801c6 <ADC_Handler+0x12>
   801ee:	bf00      	nop
   801f0:	20000474 	.word	0x20000474
   801f4:	00081079 	.word	0x00081079
   801f8:	00080881 	.word	0x00080881
   801fc:	400c0000 	.word	0x400c0000
   80200:	e000e100 	.word	0xe000e100

00080204 <can_init>:
 * \retval Success(0) or failure(1)
 */


uint8_t can_init(uint32_t can_br, uint8_t num_tx_mb, uint8_t num_rx_mb)
{
   80204:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	
	//Make sure num_rx_mb and num_tx_mb is valid
	if(num_rx_mb > 8 | num_tx_mb > 8 | num_rx_mb + num_tx_mb > 8)
   80208:	1855      	adds	r5, r2, r1
   8020a:	2908      	cmp	r1, #8
   8020c:	bf98      	it	ls
   8020e:	2a08      	cmpls	r2, #8
   80210:	d864      	bhi.n	802dc <can_init+0xd8>
   80212:	460e      	mov	r6, r1
   80214:	2d08      	cmp	r5, #8
   80216:	dc61      	bgt.n	802dc <can_init+0xd8>


	uint32_t ul_status; 
	
	//Disable can
	CAN0->CAN_MR &= ~CAN_MR_CANEN; 
   80218:	4a32      	ldr	r2, [pc, #200]	; (802e4 <can_init+0xe0>)
   8021a:	6813      	ldr	r3, [r2, #0]
   8021c:	f023 0301 	bic.w	r3, r3, #1
   80220:	6013      	str	r3, [r2, #0]
	//Clear status register on read
	ul_status = CAN0->CAN_SR; 
   80222:	6913      	ldr	r3, [r2, #16]
	
	
	// Disable interrupts on CANH and CANL pins
	PIOA->PIO_IDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80224:	4b30      	ldr	r3, [pc, #192]	; (802e8 <can_init+0xe4>)
   80226:	f44f 7440 	mov.w	r4, #768	; 0x300
   8022a:	645c      	str	r4, [r3, #68]	; 0x44
	
	//Select CAN0 RX and TX in PIOA
	uint32_t ul_sr = PIOA->PIO_ABSR;
   8022c:	6f1c      	ldr	r4, [r3, #112]	; 0x70
	PIOA->PIO_ABSR = ~(PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0) & ul_sr;
   8022e:	f024 0403 	bic.w	r4, r4, #3
   80232:	671c      	str	r4, [r3, #112]	; 0x70
	
	// Disable the Parallel IO (PIO) of the Rx and Tx pins so that the peripheral controller can use them
	PIOA->PIO_PDR = PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0;
   80234:	2403      	movs	r4, #3
   80236:	605c      	str	r4, [r3, #4]
	
	// Enable pull up on CANH and CANL pin
	PIOA->PIO_PUER = (PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0);
   80238:	665c      	str	r4, [r3, #100]	; 0x64
	
	
	//Enable Clock for CAN0 in PMC
	PMC->PMC_PCR = PMC_PCR_EN | (0 << PMC_PCR_DIV_Pos) | PMC_PCR_CMD | (ID_CAN0 << PMC_PCR_PID_Pos); // DIV = 1(can clk = MCK/2), CMD = 1 (write), PID = 2B (CAN0)
   8023a:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   8023e:	4c2b      	ldr	r4, [pc, #172]	; (802ec <can_init+0xe8>)
   80240:	f8c3 410c 	str.w	r4, [r3, #268]	; 0x10c
	PMC->PMC_PCER1 |= 1 << (ID_CAN0 - 32);
   80244:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
   80248:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
   8024c:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
	
	//Set baudrate, Phase1, phase2 and propagation delay for can bus. Must match on all nodes!
	CAN0->CAN_BR = can_br; 
   80250:	6150      	str	r0, [r2, #20]
	/****** Start of mailbox configuration ******/

	uint32_t can_ier = 0;

	/* Configure receive mailboxes */
	for (int n = num_tx_mb; n <= num_rx_mb + num_tx_mb; n++)  //Simply one mailbox setup for all messages. You might want to apply filter for them.
   80252:	42a9      	cmp	r1, r5
   80254:	dc40      	bgt.n	802d8 <can_init+0xd4>
   80256:	460a      	mov	r2, r1
   80258:	2400      	movs	r4, #0
	{
		CAN0->CAN_MB[n].CAN_MAM = 0; //Accept all messages
   8025a:	46a1      	mov	r9, r4
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   8025c:	f8df 8084 	ldr.w	r8, [pc, #132]	; 802e4 <can_init+0xe0>
   80260:	f04f 5c00 	mov.w	ip, #536870912	; 0x20000000
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_RX);
   80264:	f04f 7e80 	mov.w	lr, #16777216	; 0x1000000
		CAN0->CAN_MB[n].CAN_MCR |= CAN_MCR_MTCR;

		can_ier |= 1 << n; //Enable interrupt on rx mailbox
   80268:	2701      	movs	r7, #1
   8026a:	0153      	lsls	r3, r2, #5
   8026c:	f103 2040 	add.w	r0, r3, #1073758208	; 0x40004000
   80270:	f500 2030 	add.w	r0, r0, #720896	; 0xb0000
		CAN0->CAN_MB[n].CAN_MAM = 0; //Accept all messages
   80274:	f8c0 9204 	str.w	r9, [r0, #516]	; 0x204
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   80278:	4443      	add	r3, r8
   8027a:	f8c3 c208 	str.w	ip, [r3, #520]	; 0x208
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_RX);
   8027e:	f8c0 e200 	str.w	lr, [r0, #512]	; 0x200
		CAN0->CAN_MB[n].CAN_MCR |= CAN_MCR_MTCR;
   80282:	f8d3 021c 	ldr.w	r0, [r3, #540]	; 0x21c
   80286:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   8028a:	f8c3 021c 	str.w	r0, [r3, #540]	; 0x21c
		can_ier |= 1 << n; //Enable interrupt on rx mailbox
   8028e:	fa07 f302 	lsl.w	r3, r7, r2
   80292:	431c      	orrs	r4, r3
	for (int n = num_tx_mb; n <= num_rx_mb + num_tx_mb; n++)  //Simply one mailbox setup for all messages. You might want to apply filter for them.
   80294:	3201      	adds	r2, #1
   80296:	4295      	cmp	r5, r2
   80298:	dae7      	bge.n	8026a <can_init+0x66>
	}
	
	/*Configure transmit mailboxes */
	for (int n = 0; n < num_tx_mb; n++)
   8029a:	b181      	cbz	r1, 802be <can_init+0xba>
   8029c:	2300      	movs	r3, #0
	{
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   8029e:	4911      	ldr	r1, [pc, #68]	; (802e4 <can_init+0xe0>)
   802a0:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_TX);
   802a4:	f04f 7040 	mov.w	r0, #50331648	; 0x3000000
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   802a8:	eb01 1243 	add.w	r2, r1, r3, lsl #5
   802ac:	f8c2 5208 	str.w	r5, [r2, #520]	; 0x208
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_TX);
   802b0:	f103 0210 	add.w	r2, r3, #16
   802b4:	0152      	lsls	r2, r2, #5
   802b6:	5088      	str	r0, [r1, r2]
	for (int n = 0; n < num_tx_mb; n++)
   802b8:	3301      	adds	r3, #1
   802ba:	429e      	cmp	r6, r3
   802bc:	d1f4      	bne.n	802a8 <can_init+0xa4>
	}
	
	/****** End of mailbox configuraion ******/

	//Enable interrupt on receive mailboxes
	CAN0->CAN_IER = can_ier;
   802be:	4b09      	ldr	r3, [pc, #36]	; (802e4 <can_init+0xe0>)
   802c0:	605c      	str	r4, [r3, #4]
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   802c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
   802c6:	4a0a      	ldr	r2, [pc, #40]	; (802f0 <can_init+0xec>)
   802c8:	6051      	str	r1, [r2, #4]

	//Enable interrupt in NVIC 
	NVIC_EnableIRQ(ID_CAN0);

	//enable CAN
	CAN0->CAN_MR |= CAN_MR_CANEN;
   802ca:	681a      	ldr	r2, [r3, #0]
   802cc:	f042 0201 	orr.w	r2, r2, #1
   802d0:	601a      	str	r2, [r3, #0]

	return 0;
   802d2:	2000      	movs	r0, #0
   802d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint32_t can_ier = 0;
   802d8:	2400      	movs	r4, #0
   802da:	e7de      	b.n	8029a <can_init+0x96>
		return 1; //Too many mailboxes is configured
   802dc:	2001      	movs	r0, #1
}
   802de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   802e2:	bf00      	nop
   802e4:	400b4000 	.word	0x400b4000
   802e8:	400e0e00 	.word	0x400e0e00
   802ec:	1000102b 	.word	0x1000102b
   802f0:	e000e100 	.word	0xe000e100

000802f4 <can_init_def_tx_rx_mb>:
{
   802f4:	b508      	push	{r3, lr}
	return can_init(can_br, 1, 2);
   802f6:	2202      	movs	r2, #2
   802f8:	2101      	movs	r1, #1
   802fa:	4b01      	ldr	r3, [pc, #4]	; (80300 <can_init_def_tx_rx_mb+0xc>)
   802fc:	4798      	blx	r3
}
   802fe:	bd08      	pop	{r3, pc}
   80300:	00080205 	.word	0x00080205

00080304 <can_send>:
 * \retval Success(0) or failure(1)
 */
uint8_t can_send(CAN_MESSAGE* can_msg, uint8_t tx_mb_id)
{
	//Check that mailbox is ready
	if(CAN0->CAN_MB[tx_mb_id].CAN_MSR & CAN_MSR_MRDY)
   80304:	014b      	lsls	r3, r1, #5
   80306:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   8030a:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   8030e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   80312:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   80316:	d036      	beq.n	80386 <can_send+0x82>
	{
		//Set message ID and use CAN 2.0B protocol
		CAN0->CAN_MB[tx_mb_id].CAN_MID = CAN_MID_MIDvA(can_msg->id) | CAN_MID_MIDE ;
   80318:	8803      	ldrh	r3, [r0, #0]
   8031a:	4a1c      	ldr	r2, [pc, #112]	; (8038c <can_send+0x88>)
   8031c:	ea02 4283 	and.w	r2, r2, r3, lsl #18
   80320:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   80324:	014b      	lsls	r3, r1, #5
   80326:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   8032a:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   8032e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
		
		//Make sure message is not to long
		if(can_msg->data_length > 7){
   80332:	7883      	ldrb	r3, [r0, #2]
   80334:	2b07      	cmp	r3, #7
			can_msg->data_length = 7;
   80336:	bf84      	itt	hi
   80338:	2307      	movhi	r3, #7
   8033a:	7083      	strbhi	r3, [r0, #2]
			//Message is to long, sending only the first 8 bytes
		}
		//Put message in can data registers
		CAN0->CAN_MB[tx_mb_id].CAN_MDL = can_msg->data[3] << 24 | can_msg->data[2] << 16 | can_msg->data[1] << 8 | can_msg->data[0];
   8033c:	7982      	ldrb	r2, [r0, #6]
   8033e:	7943      	ldrb	r3, [r0, #5]
   80340:	041b      	lsls	r3, r3, #16
   80342:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   80346:	78c2      	ldrb	r2, [r0, #3]
   80348:	4313      	orrs	r3, r2
   8034a:	7902      	ldrb	r2, [r0, #4]
   8034c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   80350:	0149      	lsls	r1, r1, #5
   80352:	f101 2140 	add.w	r1, r1, #1073758208	; 0x40004000
   80356:	f501 2130 	add.w	r1, r1, #720896	; 0xb0000
   8035a:	f8c1 3214 	str.w	r3, [r1, #532]	; 0x214
		CAN0->CAN_MB[tx_mb_id].CAN_MDH = can_msg->data[7] << 24 | can_msg->data[6] << 16 | can_msg->data[5] << 8 | can_msg->data[4];
   8035e:	7a82      	ldrb	r2, [r0, #10]
   80360:	7a43      	ldrb	r3, [r0, #9]
   80362:	041b      	lsls	r3, r3, #16
   80364:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   80368:	79c2      	ldrb	r2, [r0, #7]
   8036a:	4313      	orrs	r3, r2
   8036c:	7a02      	ldrb	r2, [r0, #8]
   8036e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   80372:	f8c1 3218 	str.w	r3, [r1, #536]	; 0x218
		
		//Set message length and mailbox ready to send
		CAN0->CAN_MB[tx_mb_id].CAN_MCR = (can_msg->data_length << CAN_MCR_MDLC_Pos) | CAN_MCR_MTCR;
   80376:	7883      	ldrb	r3, [r0, #2]
   80378:	041b      	lsls	r3, r3, #16
   8037a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   8037e:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c
		return 0;
   80382:	2000      	movs	r0, #0
   80384:	4770      	bx	lr
	}
	
	else //Mailbox busy
	{
		return 1;
   80386:	2001      	movs	r0, #1
	}
	
}
   80388:	4770      	bx	lr
   8038a:	bf00      	nop
   8038c:	1ffc0000 	.word	0x1ffc0000

00080390 <can_receive>:
 */
uint8_t can_receive(CAN_MESSAGE* can_msg, uint8_t rx_mb_id)
{	
	
	//Check that mailbox is ready
	if(CAN0->CAN_MB[rx_mb_id].CAN_MSR & CAN_MSR_MRDY)
   80390:	014b      	lsls	r3, r1, #5
   80392:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   80396:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   8039a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   8039e:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   803a2:	d033      	beq.n	8040c <can_receive+0x7c>
{	
   803a4:	b430      	push	{r4, r5}
	{
		//Get data from CAN mailbox
		uint32_t data_low = CAN0->CAN_MB[rx_mb_id].CAN_MDL;
   803a6:	014b      	lsls	r3, r1, #5
   803a8:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   803ac:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   803b0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
		uint32_t data_high = CAN0->CAN_MB[rx_mb_id].CAN_MDH;
   803b4:	f8d3 4218 	ldr.w	r4, [r3, #536]	; 0x218
		
		//Get message ID
		can_msg->id = (uint16_t)((CAN0->CAN_MB[rx_mb_id].CAN_MID & CAN_MID_MIDvA_Msk) >> CAN_MID_MIDvA_Pos);
   803b8:	f8d3 5208 	ldr.w	r5, [r3, #520]	; 0x208
   803bc:	f3c5 458a 	ubfx	r5, r5, #18, #11
   803c0:	8005      	strh	r5, [r0, #0]
		
		//Get data length
		can_msg->data_length = (uint8_t)((CAN0->CAN_MB[rx_mb_id].CAN_MSR & CAN_MSR_MDLC_Msk) >> CAN_MSR_MDLC_Pos);
   803c2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   803c6:	f3c3 4303 	ubfx	r3, r3, #16, #4
   803ca:	7083      	strb	r3, [r0, #2]
		
		//Put data in CAN_MESSAGE object
		for(int i = 0; i < can_msg->data_length;i++)
   803cc:	461d      	mov	r5, r3
   803ce:	b15b      	cbz	r3, 803e8 <can_receive+0x58>
   803d0:	3003      	adds	r0, #3
   803d2:	2300      	movs	r3, #0
		{
			if(i < 4)
   803d4:	2b03      	cmp	r3, #3
			{
				can_msg->data[i] = (char)(data_low & 0xff);
   803d6:	bfd9      	ittee	le
   803d8:	7002      	strble	r2, [r0, #0]
				data_low = data_low >> 8;
   803da:	0a12      	lsrle	r2, r2, #8
			}
			else
			{
				can_msg->data[i] = (uint8_t)(data_high & 0xff);
   803dc:	7004      	strbgt	r4, [r0, #0]
				data_high = data_high >> 8;
   803de:	0a24      	lsrgt	r4, r4, #8
		for(int i = 0; i < can_msg->data_length;i++)
   803e0:	3301      	adds	r3, #1
   803e2:	3001      	adds	r0, #1
   803e4:	42ab      	cmp	r3, r5
   803e6:	d1f5      	bne.n	803d4 <can_receive+0x44>
			}
		}
		
		//Reset for new receive
		CAN0->CAN_MB[rx_mb_id].CAN_MMR = CAN_MMR_MOT_MB_RX;
   803e8:	4b09      	ldr	r3, [pc, #36]	; (80410 <can_receive+0x80>)
   803ea:	f101 0210 	add.w	r2, r1, #16
   803ee:	0152      	lsls	r2, r2, #5
   803f0:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   803f4:	5098      	str	r0, [r3, r2]
		CAN0->CAN_MB[rx_mb_id].CAN_MCR |= CAN_MCR_MTCR;
   803f6:	eb03 1141 	add.w	r1, r3, r1, lsl #5
   803fa:	f8d1 321c 	ldr.w	r3, [r1, #540]	; 0x21c
   803fe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   80402:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c
		return 0;
   80406:	2000      	movs	r0, #0
	}
	else //Mailbox busy
	{
		return 1;
	}
}
   80408:	bc30      	pop	{r4, r5}
   8040a:	4770      	bx	lr
		return 1;
   8040c:	2001      	movs	r0, #1
   8040e:	4770      	bx	lr
   80410:	400b4000 	.word	0x400b4000

00080414 <CAN0_Handler>:
 * \param void
 *
 * \retval 
 */
void CAN0_Handler( void )
{
   80414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80418:	b084      	sub	sp, #16
	if(DEBUG_INTERRUPT){}/*printf("CAN0 interrupt\n\r")*/;
	char can_sr = CAN0->CAN_SR; 
   8041a:	4b51      	ldr	r3, [pc, #324]	; (80560 <CAN0_Handler+0x14c>)
   8041c:	691c      	ldr	r4, [r3, #16]
	
	//RX interrupt
	if(can_sr & (CAN_SR_MB1 | CAN_SR_MB2) )//Only mailbox 1 and 2 specified for receiving
   8041e:	f014 0f06 	tst.w	r4, #6
   80422:	d03b      	beq.n	8049c <CAN0_Handler+0x88>
	{
		CAN_MESSAGE message;
		if(can_sr & CAN_SR_MB1)  //Mailbox 1 event
   80424:	f014 0f02 	tst.w	r4, #2
   80428:	d146      	bne.n	804b8 <CAN0_Handler+0xa4>
		{
			can_receive(&message, 1);

		}
		else if(can_sr & CAN_SR_MB2) //Mailbox 2 event
   8042a:	f014 0f04 	tst.w	r4, #4
   8042e:	d048      	beq.n	804c2 <CAN0_Handler+0xae>
		
		{
			can_receive(&message, 2);
   80430:	2102      	movs	r1, #2
   80432:	a801      	add	r0, sp, #4
   80434:	4b4b      	ldr	r3, [pc, #300]	; (80564 <CAN0_Handler+0x150>)
   80436:	4798      	blx	r3
		else
		{
			printf("CAN0 message arrived in non-used mailbox\n\r");
		}
		
		if(message.id < 0x00ff && message.id > 0x000f){
   80438:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   8043c:	f1a1 0310 	sub.w	r3, r1, #16
   80440:	b29b      	uxth	r3, r3
   80442:	2bee      	cmp	r3, #238	; 0xee
   80444:	d844      	bhi.n	804d0 <CAN0_Handler+0xbc>
			//interpret_joystick
/*
			printf("Joystick %d \n\r", message.id);
			printf("Joystick %d \n\r", message.data[5]);
*/
			joystick.x_val = (message.data[3] == 0x11) ? message.data[0] : message.data[0]*-1;
   80446:	f89d 300a 	ldrb.w	r3, [sp, #10]
   8044a:	2b11      	cmp	r3, #17
   8044c:	bf0f      	iteee	eq
   8044e:	f99d 3007 	ldrsbeq.w	r3, [sp, #7]
   80452:	f89d 3007 	ldrbne.w	r3, [sp, #7]
   80456:	425b      	negne	r3, r3
   80458:	b25b      	sxtbne	r3, r3
   8045a:	4a43      	ldr	r2, [pc, #268]	; (80568 <CAN0_Handler+0x154>)
   8045c:	7013      	strb	r3, [r2, #0]
			joystick.y_val = (message.data[4] == 0x11) ? message.data[1] : message.data[1]*-1;
   8045e:	f89d 300b 	ldrb.w	r3, [sp, #11]
   80462:	2b11      	cmp	r3, #17
   80464:	bf0f      	iteee	eq
   80466:	f99d 3008 	ldrsbeq.w	r3, [sp, #8]
   8046a:	f89d 3008 	ldrbne.w	r3, [sp, #8]
   8046e:	425b      	negne	r3, r3
   80470:	b25b      	sxtbne	r3, r3
   80472:	4a3d      	ldr	r2, [pc, #244]	; (80568 <CAN0_Handler+0x154>)
   80474:	7053      	strb	r3, [r2, #1]
			joystick.butt_pressed = message.data[2];
   80476:	f99d 3009 	ldrsb.w	r3, [sp, #9]
   8047a:	7093      	strb	r3, [r2, #2]
			if(!joystick.butt_pressed){
   8047c:	b32b      	cbz	r3, 804ca <CAN0_Handler+0xb6>
				set_trigger_time();
			}
			joystick.left_val = message.data[5];
   8047e:	4b3a      	ldr	r3, [pc, #232]	; (80568 <CAN0_Handler+0x154>)
   80480:	f89d 200c 	ldrb.w	r2, [sp, #12]
   80484:	70da      	strb	r2, [r3, #3]
			joystick.right_val = message.data[6];
   80486:	f89d 200d 	ldrb.w	r2, [sp, #13]
   8048a:	711a      	strb	r2, [r3, #4]
			joystick.left_button = message.data[7] & 0b00000010;
   8048c:	f99d 200e 	ldrsb.w	r2, [sp, #14]
   80490:	f002 0102 	and.w	r1, r2, #2
   80494:	7159      	strb	r1, [r3, #5]
			joystick.right_button = message.data[7] & 0b00000001;
   80496:	f002 0201 	and.w	r2, r2, #1
   8049a:	719a      	strb	r2, [r3, #6]
			if(DEBUG_INTERRUPT)printf("\n\r");
		}
		
	}
	
	if(can_sr & CAN_SR_MB0)
   8049c:	f014 0f01 	tst.w	r4, #1
   804a0:	d002      	beq.n	804a8 <CAN0_Handler+0x94>
	{
		/*if(DEBUG_INTERRUPT) printf("CAN0 MB0 ready to send \n\r");*/
		
	//Disable interrupt
		CAN0->CAN_IDR = CAN_IER_MB0;
   804a2:	2201      	movs	r2, #1
   804a4:	4b2e      	ldr	r3, [pc, #184]	; (80560 <CAN0_Handler+0x14c>)
   804a6:	609a      	str	r2, [r3, #8]
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   804a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
   804ac:	4b2f      	ldr	r3, [pc, #188]	; (8056c <CAN0_Handler+0x158>)
   804ae:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184

	}
	
	NVIC_ClearPendingIRQ(ID_CAN0);
	//sei();*/
}
   804b2:	b004      	add	sp, #16
   804b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			can_receive(&message, 1);
   804b8:	2101      	movs	r1, #1
   804ba:	a801      	add	r0, sp, #4
   804bc:	4b29      	ldr	r3, [pc, #164]	; (80564 <CAN0_Handler+0x150>)
   804be:	4798      	blx	r3
   804c0:	e7ba      	b.n	80438 <CAN0_Handler+0x24>
			printf("CAN0 message arrived in non-used mailbox\n\r");
   804c2:	482b      	ldr	r0, [pc, #172]	; (80570 <CAN0_Handler+0x15c>)
   804c4:	4b2b      	ldr	r3, [pc, #172]	; (80574 <CAN0_Handler+0x160>)
   804c6:	4798      	blx	r3
   804c8:	e7b6      	b.n	80438 <CAN0_Handler+0x24>
				set_trigger_time();
   804ca:	4b2b      	ldr	r3, [pc, #172]	; (80578 <CAN0_Handler+0x164>)
   804cc:	4798      	blx	r3
   804ce:	e7d6      	b.n	8047e <CAN0_Handler+0x6a>
		else if(message.id == 0x6){
   804d0:	2906      	cmp	r1, #6
   804d2:	d022      	beq.n	8051a <CAN0_Handler+0x106>
		else if(message.id == 0x4){//start signal
   804d4:	2904      	cmp	r1, #4
   804d6:	d02f      	beq.n	80538 <CAN0_Handler+0x124>
		else if(message.id == 0x3){//stop signal
   804d8:	2903      	cmp	r1, #3
   804da:	d032      	beq.n	80542 <CAN0_Handler+0x12e>
		else if(message.id == 0x2){//game start signal
   804dc:	2902      	cmp	r1, #2
   804de:	d039      	beq.n	80554 <CAN0_Handler+0x140>
			if(DEBUG_INTERRUPT)printf("message id: %d\n\r", message.id);
   804e0:	4826      	ldr	r0, [pc, #152]	; (8057c <CAN0_Handler+0x168>)
   804e2:	4d24      	ldr	r5, [pc, #144]	; (80574 <CAN0_Handler+0x160>)
   804e4:	47a8      	blx	r5
			if(DEBUG_INTERRUPT)printf("message data length: %d\n\r", message.data_length);
   804e6:	f89d 1006 	ldrb.w	r1, [sp, #6]
   804ea:	4825      	ldr	r0, [pc, #148]	; (80580 <CAN0_Handler+0x16c>)
   804ec:	47a8      	blx	r5
			for (int i = 0; i < message.data_length; i++)
   804ee:	f89d 3006 	ldrb.w	r3, [sp, #6]
   804f2:	b173      	cbz	r3, 80512 <CAN0_Handler+0xfe>
   804f4:	f10d 0607 	add.w	r6, sp, #7
   804f8:	2500      	movs	r5, #0
				if(DEBUG_INTERRUPT)printf("%d ", message.data[i]);
   804fa:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 805a0 <CAN0_Handler+0x18c>
   804fe:	4f1d      	ldr	r7, [pc, #116]	; (80574 <CAN0_Handler+0x160>)
   80500:	f816 1b01 	ldrb.w	r1, [r6], #1
   80504:	4640      	mov	r0, r8
   80506:	47b8      	blx	r7
			for (int i = 0; i < message.data_length; i++)
   80508:	3501      	adds	r5, #1
   8050a:	f89d 3006 	ldrb.w	r3, [sp, #6]
   8050e:	42ab      	cmp	r3, r5
   80510:	dcf6      	bgt.n	80500 <CAN0_Handler+0xec>
			if(DEBUG_INTERRUPT)printf("\n\r");
   80512:	481c      	ldr	r0, [pc, #112]	; (80584 <CAN0_Handler+0x170>)
   80514:	4b17      	ldr	r3, [pc, #92]	; (80574 <CAN0_Handler+0x160>)
   80516:	4798      	blx	r3
   80518:	e7c0      	b.n	8049c <CAN0_Handler+0x88>
			if(message.data[0] == 1){ //easy
   8051a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   8051e:	2b01      	cmp	r3, #1
   80520:	d006      	beq.n	80530 <CAN0_Handler+0x11c>
			else if(message.data[0] == 3){ //hard
   80522:	2b03      	cmp	r3, #3
				set_difficulty(3);
   80524:	bf0c      	ite	eq
   80526:	2003      	moveq	r0, #3
				set_difficulty(2);
   80528:	2002      	movne	r0, #2
   8052a:	4b17      	ldr	r3, [pc, #92]	; (80588 <CAN0_Handler+0x174>)
   8052c:	4798      	blx	r3
   8052e:	e7b5      	b.n	8049c <CAN0_Handler+0x88>
				set_difficulty(1);
   80530:	2001      	movs	r0, #1
   80532:	4b15      	ldr	r3, [pc, #84]	; (80588 <CAN0_Handler+0x174>)
   80534:	4798      	blx	r3
   80536:	e7b1      	b.n	8049c <CAN0_Handler+0x88>
			starttime = return_milliseconds();
   80538:	4b14      	ldr	r3, [pc, #80]	; (8058c <CAN0_Handler+0x178>)
   8053a:	4798      	blx	r3
   8053c:	4b14      	ldr	r3, [pc, #80]	; (80590 <CAN0_Handler+0x17c>)
   8053e:	8018      	strh	r0, [r3, #0]
   80540:	e7ac      	b.n	8049c <CAN0_Handler+0x88>
			send_reaction_time_to_node_1(&message, return_milliseconds()-starttime);
   80542:	4b12      	ldr	r3, [pc, #72]	; (8058c <CAN0_Handler+0x178>)
   80544:	4798      	blx	r3
   80546:	4b12      	ldr	r3, [pc, #72]	; (80590 <CAN0_Handler+0x17c>)
   80548:	8819      	ldrh	r1, [r3, #0]
   8054a:	1a41      	subs	r1, r0, r1
   8054c:	a801      	add	r0, sp, #4
   8054e:	4b11      	ldr	r3, [pc, #68]	; (80594 <CAN0_Handler+0x180>)
   80550:	4798      	blx	r3
   80552:	e7a3      	b.n	8049c <CAN0_Handler+0x88>
			start_pid();
   80554:	4b10      	ldr	r3, [pc, #64]	; (80598 <CAN0_Handler+0x184>)
   80556:	4798      	blx	r3
			set_starttime();
   80558:	4b10      	ldr	r3, [pc, #64]	; (8059c <CAN0_Handler+0x188>)
   8055a:	4798      	blx	r3
   8055c:	e79e      	b.n	8049c <CAN0_Handler+0x88>
   8055e:	bf00      	nop
   80560:	400b4000 	.word	0x400b4000
   80564:	00080391 	.word	0x00080391
   80568:	200004bc 	.word	0x200004bc
   8056c:	e000e100 	.word	0xe000e100
   80570:	00081c88 	.word	0x00081c88
   80574:	00081031 	.word	0x00081031
   80578:	000810cd 	.word	0x000810cd
   8057c:	00081cb4 	.word	0x00081cb4
   80580:	00081cc8 	.word	0x00081cc8
   80584:	00081cb0 	.word	0x00081cb0
   80588:	00080d45 	.word	0x00080d45
   8058c:	00081079 	.word	0x00081079
   80590:	2000047c 	.word	0x2000047c
   80594:	000807c9 	.word	0x000807c9
   80598:	00080d5d 	.word	0x00080d5d
   8059c:	000810a9 	.word	0x000810a9
   805a0:	00081ce4 	.word	0x00081ce4

000805a4 <dac_init>:



void dac_init(){
	
	PMC->PMC_PCER1 = PMC_PCER1_PID38;
   805a4:	2240      	movs	r2, #64	; 0x40
   805a6:	4b09      	ldr	r3, [pc, #36]	; (805cc <dac_init+0x28>)
   805a8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	
	
	DACC->DACC_MR |= DACC_MR_USER_SEL_CHANNEL1;
   805ac:	f5a3 33c3 	sub.w	r3, r3, #99840	; 0x18600
   805b0:	685a      	ldr	r2, [r3, #4]
   805b2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
   805b6:	605a      	str	r2, [r3, #4]
	DACC->DACC_MR &= ~(1<<0); //disable trigger, set freemode
   805b8:	685a      	ldr	r2, [r3, #4]
   805ba:	f022 0201 	bic.w	r2, r2, #1
   805be:	605a      	str	r2, [r3, #4]
	//DACC->DACC_MR |= DACC_MR_WORD_WORD;
	//DACC->DACC_CHER |= DACC_CHER_CH0;
	DACC->DACC_CHER = DACC_CHER_CH1;
   805c0:	2202      	movs	r2, #2
   805c2:	611a      	str	r2, [r3, #16]
	
	DACC->DACC_CDR = 0x05ff;
   805c4:	f240 52ff 	movw	r2, #1535	; 0x5ff
   805c8:	621a      	str	r2, [r3, #32]
   805ca:	4770      	bx	lr
   805cc:	400e0600 	.word	0x400e0600

000805d0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   805d0:	e7fe      	b.n	805d0 <Dummy_Handler>
	...

000805d4 <Reset_Handler>:
{
   805d4:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
   805d6:	4b18      	ldr	r3, [pc, #96]	; (80638 <Reset_Handler+0x64>)
   805d8:	4a18      	ldr	r2, [pc, #96]	; (8063c <Reset_Handler+0x68>)
   805da:	429a      	cmp	r2, r3
   805dc:	d010      	beq.n	80600 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
   805de:	4b18      	ldr	r3, [pc, #96]	; (80640 <Reset_Handler+0x6c>)
   805e0:	4a15      	ldr	r2, [pc, #84]	; (80638 <Reset_Handler+0x64>)
   805e2:	429a      	cmp	r2, r3
   805e4:	d20c      	bcs.n	80600 <Reset_Handler+0x2c>
   805e6:	3b01      	subs	r3, #1
   805e8:	1a9b      	subs	r3, r3, r2
   805ea:	f023 0303 	bic.w	r3, r3, #3
   805ee:	3304      	adds	r3, #4
   805f0:	4413      	add	r3, r2
   805f2:	4912      	ldr	r1, [pc, #72]	; (8063c <Reset_Handler+0x68>)
                        *pDest++ = *pSrc++;
   805f4:	f851 0b04 	ldr.w	r0, [r1], #4
   805f8:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
   805fc:	429a      	cmp	r2, r3
   805fe:	d1f9      	bne.n	805f4 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
   80600:	4b10      	ldr	r3, [pc, #64]	; (80644 <Reset_Handler+0x70>)
   80602:	4a11      	ldr	r2, [pc, #68]	; (80648 <Reset_Handler+0x74>)
   80604:	429a      	cmp	r2, r3
   80606:	d20a      	bcs.n	8061e <Reset_Handler+0x4a>
   80608:	3b01      	subs	r3, #1
   8060a:	1a9b      	subs	r3, r3, r2
   8060c:	f023 0303 	bic.w	r3, r3, #3
   80610:	3304      	adds	r3, #4
   80612:	4413      	add	r3, r2
                *pDest++ = 0;
   80614:	2100      	movs	r1, #0
   80616:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
   8061a:	4293      	cmp	r3, r2
   8061c:	d1fb      	bne.n	80616 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   8061e:	4b0b      	ldr	r3, [pc, #44]	; (8064c <Reset_Handler+0x78>)
   80620:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   80624:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   80628:	4a09      	ldr	r2, [pc, #36]	; (80650 <Reset_Handler+0x7c>)
   8062a:	6093      	str	r3, [r2, #8]
        __libc_init_array();
   8062c:	4b09      	ldr	r3, [pc, #36]	; (80654 <Reset_Handler+0x80>)
   8062e:	4798      	blx	r3
        main();
   80630:	4b09      	ldr	r3, [pc, #36]	; (80658 <Reset_Handler+0x84>)
   80632:	4798      	blx	r3
   80634:	e7fe      	b.n	80634 <Reset_Handler+0x60>
   80636:	bf00      	nop
   80638:	20000000 	.word	0x20000000
   8063c:	00081dac 	.word	0x00081dac
   80640:	20000454 	.word	0x20000454
   80644:	2000052c 	.word	0x2000052c
   80648:	20000458 	.word	0x20000458
   8064c:	00080000 	.word	0x00080000
   80650:	e000ed00 	.word	0xe000ed00
   80654:	00081b19 	.word	0x00081b19
   80658:	00080a75 	.word	0x00080a75

0008065c <SystemInit>:
 * Initialize the System and update the SystemFrequency variable.
 */
void SystemInit( void )
{
  /* Set FWS according to SYS_BOARD_MCKR configuration */
  EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   8065c:	f44f 6380 	mov.w	r3, #1024	; 0x400
   80660:	4a20      	ldr	r2, [pc, #128]	; (806e4 <SystemInit+0x88>)
   80662:	6013      	str	r3, [r2, #0]
  EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
   80664:	f502 7200 	add.w	r2, r2, #512	; 0x200
   80668:	6013      	str	r3, [r2, #0]

  /* Initialize main oscillator */
  if ( !(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) )
   8066a:	4b1f      	ldr	r3, [pc, #124]	; (806e8 <SystemInit+0x8c>)
   8066c:	6a1b      	ldr	r3, [r3, #32]
   8066e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80672:	d107      	bne.n	80684 <SystemInit+0x28>
  {
    PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
   80674:	4a1d      	ldr	r2, [pc, #116]	; (806ec <SystemInit+0x90>)
   80676:	4b1c      	ldr	r3, [pc, #112]	; (806e8 <SystemInit+0x8c>)
   80678:	621a      	str	r2, [r3, #32]
    while ( !(PMC->PMC_SR & PMC_SR_MOSCXTS) )
   8067a:	461a      	mov	r2, r3
   8067c:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8067e:	f013 0f01 	tst.w	r3, #1
   80682:	d0fb      	beq.n	8067c <SystemInit+0x20>
    {
    }
  }

  /* Switch to 3-20MHz Xtal oscillator */
  PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;
   80684:	4a1a      	ldr	r2, [pc, #104]	; (806f0 <SystemInit+0x94>)
   80686:	4b18      	ldr	r3, [pc, #96]	; (806e8 <SystemInit+0x8c>)
   80688:	621a      	str	r2, [r3, #32]

  while ( !(PMC->PMC_SR & PMC_SR_MOSCSELS) )
   8068a:	461a      	mov	r2, r3
   8068c:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8068e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   80692:	d0fb      	beq.n	8068c <SystemInit+0x30>
  {
  }
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   80694:	4a14      	ldr	r2, [pc, #80]	; (806e8 <SystemInit+0x8c>)
   80696:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80698:	f023 0303 	bic.w	r3, r3, #3
   8069c:	f043 0301 	orr.w	r3, r3, #1
   806a0:	6313      	str	r3, [r2, #48]	; 0x30
  while (!(PMC->PMC_SR & PMC_SR_MCKRDY))
   806a2:	6e93      	ldr	r3, [r2, #104]	; 0x68
   806a4:	f013 0f08 	tst.w	r3, #8
   806a8:	d0fb      	beq.n	806a2 <SystemInit+0x46>
  {
  }

  /* Initialize PLLA */
  PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
   806aa:	4a12      	ldr	r2, [pc, #72]	; (806f4 <SystemInit+0x98>)
   806ac:	4b0e      	ldr	r3, [pc, #56]	; (806e8 <SystemInit+0x8c>)
   806ae:	629a      	str	r2, [r3, #40]	; 0x28
  while ( !(PMC->PMC_SR & PMC_SR_LOCKA) )
   806b0:	461a      	mov	r2, r3
   806b2:	6e93      	ldr	r3, [r2, #104]	; 0x68
   806b4:	f013 0f02 	tst.w	r3, #2
   806b8:	d0fb      	beq.n	806b2 <SystemInit+0x56>
  {
  }

  /* Switch to main clock */
  PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   806ba:	2211      	movs	r2, #17
   806bc:	4b0a      	ldr	r3, [pc, #40]	; (806e8 <SystemInit+0x8c>)
   806be:	631a      	str	r2, [r3, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   806c0:	461a      	mov	r2, r3
   806c2:	6e93      	ldr	r3, [r2, #104]	; 0x68
   806c4:	f013 0f08 	tst.w	r3, #8
   806c8:	d0fb      	beq.n	806c2 <SystemInit+0x66>
  {
  }

  /* Switch to PLLA */
  PMC->PMC_MCKR = SYS_BOARD_MCKR;
   806ca:	2212      	movs	r2, #18
   806cc:	4b06      	ldr	r3, [pc, #24]	; (806e8 <SystemInit+0x8c>)
   806ce:	631a      	str	r2, [r3, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   806d0:	461a      	mov	r2, r3
   806d2:	6e93      	ldr	r3, [r2, #104]	; 0x68
   806d4:	f013 0f08 	tst.w	r3, #8
   806d8:	d0fb      	beq.n	806d2 <SystemInit+0x76>
  {
  }

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
   806da:	4a07      	ldr	r2, [pc, #28]	; (806f8 <SystemInit+0x9c>)
   806dc:	4b07      	ldr	r3, [pc, #28]	; (806fc <SystemInit+0xa0>)
   806de:	601a      	str	r2, [r3, #0]
   806e0:	4770      	bx	lr
   806e2:	bf00      	nop
   806e4:	400e0a00 	.word	0x400e0a00
   806e8:	400e0600 	.word	0x400e0600
   806ec:	00370809 	.word	0x00370809
   806f0:	01370809 	.word	0x01370809
   806f4:	200d3f01 	.word	0x200d3f01
   806f8:	0501bd00 	.word	0x0501bd00
   806fc:	20000000 	.word	0x20000000

00080700 <send_time_to_node_1>:
#include "feedback.h"
#include "can_controller.h"
#include "timer.h"

void send_time_to_node_1(CAN_MESSAGE* msgToSend){
   80700:	b538      	push	{r3, r4, r5, lr}
   80702:	4604      	mov	r4, r0
    //Somewhat random test that fails 75% of the time to avoid spamming the CAN bus
	if(!(return_milliseconds()%4)){ 
   80704:	4b0e      	ldr	r3, [pc, #56]	; (80740 <send_time_to_node_1+0x40>)
   80706:	4798      	blx	r3
   80708:	f010 0f03 	tst.w	r0, #3
   8070c:	d000      	beq.n	80710 <send_time_to_node_1+0x10>
   8070e:	bd38      	pop	{r3, r4, r5, pc}
        msgToSend->data_length = 2;
   80710:	2302      	movs	r3, #2
   80712:	70a3      	strb	r3, [r4, #2]
        //High ID  since this is a non-urgent message
		uint16_t temp = 0x8;
        msgToSend->id = temp;
   80714:	2308      	movs	r3, #8
   80716:	8023      	strh	r3, [r4, #0]
        msgToSend->data[0] = (uint8_t) (return_seconds() & 0x00FF);
   80718:	4d0a      	ldr	r5, [pc, #40]	; (80744 <send_time_to_node_1+0x44>)
   8071a:	47a8      	blx	r5
   8071c:	70e0      	strb	r0, [r4, #3]
        msgToSend->data[1] = (uint8_t) (return_seconds() & 0xFF00);
   8071e:	47a8      	blx	r5
   80720:	2100      	movs	r1, #0
   80722:	7121      	strb	r1, [r4, #4]
		can_send(msgToSend, 0);
   80724:	4620      	mov	r0, r4
   80726:	4b08      	ldr	r3, [pc, #32]	; (80748 <send_time_to_node_1+0x48>)
   80728:	4798      	blx	r3
		printf("message id: %x \r\n", msgToSend->id);
   8072a:	8821      	ldrh	r1, [r4, #0]
   8072c:	4807      	ldr	r0, [pc, #28]	; (8074c <send_time_to_node_1+0x4c>)
   8072e:	4d08      	ldr	r5, [pc, #32]	; (80750 <send_time_to_node_1+0x50>)
   80730:	47a8      	blx	r5
		printf("message length: %x \r\n", msgToSend->data_length);
   80732:	78a1      	ldrb	r1, [r4, #2]
   80734:	4807      	ldr	r0, [pc, #28]	; (80754 <send_time_to_node_1+0x54>)
   80736:	47a8      	blx	r5
		printf("message data: %d \r\n", msgToSend->data[0]);
   80738:	78e1      	ldrb	r1, [r4, #3]
   8073a:	4807      	ldr	r0, [pc, #28]	; (80758 <send_time_to_node_1+0x58>)
   8073c:	47a8      	blx	r5
	}
}
   8073e:	e7e6      	b.n	8070e <send_time_to_node_1+0xe>
   80740:	00081079 	.word	0x00081079
   80744:	00081085 	.word	0x00081085
   80748:	00080305 	.word	0x00080305
   8074c:	00081ce8 	.word	0x00081ce8
   80750:	00081031 	.word	0x00081031
   80754:	00081cfc 	.word	0x00081cfc
   80758:	00081d14 	.word	0x00081d14

0008075c <send_goal_to_node_1>:

void send_goal_to_node_1(CAN_MESSAGE* msgToSend){
   8075c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8075e:	4604      	mov	r4, r0
    msgToSend->data_length = 2;
   80760:	2302      	movs	r3, #2
   80762:	7083      	strb	r3, [r0, #2]
    //Low ID  since this is an urgent message
    msgToSend->id = 0x1;    
   80764:	2301      	movs	r3, #1
   80766:	8003      	strh	r3, [r0, #0]
    msgToSend->data[0] = (uint8_t) ((return_seconds()-return_starttime()) & 0x00FF);
   80768:	4f09      	ldr	r7, [pc, #36]	; (80790 <send_goal_to_node_1+0x34>)
   8076a:	47b8      	blx	r7
   8076c:	4605      	mov	r5, r0
   8076e:	4e09      	ldr	r6, [pc, #36]	; (80794 <send_goal_to_node_1+0x38>)
   80770:	47b0      	blx	r6
   80772:	1a28      	subs	r0, r5, r0
   80774:	70e0      	strb	r0, [r4, #3]
    msgToSend->data[1] = (uint8_t) (((return_seconds()-return_starttime()) & 0xFF00) >> 8);
   80776:	47b8      	blx	r7
   80778:	4605      	mov	r5, r0
   8077a:	47b0      	blx	r6
   8077c:	1a28      	subs	r0, r5, r0
   8077e:	f3c0 2007 	ubfx	r0, r0, #8, #8
   80782:	7120      	strb	r0, [r4, #4]
	can_send(msgToSend, 0);
   80784:	2100      	movs	r1, #0
   80786:	4620      	mov	r0, r4
   80788:	4b03      	ldr	r3, [pc, #12]	; (80798 <send_goal_to_node_1+0x3c>)
   8078a:	4798      	blx	r3
   8078c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8078e:	bf00      	nop
   80790:	00081085 	.word	0x00081085
   80794:	0008109d 	.word	0x0008109d
   80798:	00080305 	.word	0x00080305

0008079c <send_motor_info_to_node_1>:
}

void send_motor_info_to_node_1(CAN_MESSAGE* msgToSend, uint8_t y_pos, uint8_t solenoide){
   8079c:	b510      	push	{r4, lr}
   8079e:	4604      	mov	r4, r0
    msgToSend->data_length = 2;
   807a0:	2302      	movs	r3, #2
   807a2:	7083      	strb	r3, [r0, #2]
	uint16_t temp = 0x4;
    msgToSend->id = temp;
   807a4:	2304      	movs	r3, #4
   807a6:	8003      	strh	r3, [r0, #0]
    msgToSend->data[0] = y_pos;
   807a8:	70c1      	strb	r1, [r0, #3]
    msgToSend->data[1] = solenoide;
   807aa:	7102      	strb	r2, [r0, #4]
	can_send(msgToSend, 0);
   807ac:	2100      	movs	r1, #0
   807ae:	4b03      	ldr	r3, [pc, #12]	; (807bc <send_motor_info_to_node_1+0x20>)
   807b0:	4798      	blx	r3
	printf("message length: %x \r\n", msgToSend->data_length);
   807b2:	78a1      	ldrb	r1, [r4, #2]
   807b4:	4802      	ldr	r0, [pc, #8]	; (807c0 <send_motor_info_to_node_1+0x24>)
   807b6:	4b03      	ldr	r3, [pc, #12]	; (807c4 <send_motor_info_to_node_1+0x28>)
   807b8:	4798      	blx	r3
   807ba:	bd10      	pop	{r4, pc}
   807bc:	00080305 	.word	0x00080305
   807c0:	00081cfc 	.word	0x00081cfc
   807c4:	00081031 	.word	0x00081031

000807c8 <send_reaction_time_to_node_1>:
}

void send_reaction_time_to_node_1(CAN_MESSAGE* msgToSend, uint16_t ms){
   807c8:	b508      	push	{r3, lr}
    msgToSend->data_length = 2;
   807ca:	2202      	movs	r2, #2
   807cc:	7082      	strb	r2, [r0, #2]
    //Low ID  since this is an urgent message
    msgToSend->id = 0x2;    
   807ce:	8002      	strh	r2, [r0, #0]
    msgToSend->data[0] = (uint8_t) (ms & 0x00FF);
   807d0:	70c1      	strb	r1, [r0, #3]
    msgToSend->data[1] = (uint8_t) ((ms & 0xFF00) >> 8);
   807d2:	0a09      	lsrs	r1, r1, #8
   807d4:	7101      	strb	r1, [r0, #4]
	can_send(msgToSend, 0);
   807d6:	2100      	movs	r1, #0
   807d8:	4b01      	ldr	r3, [pc, #4]	; (807e0 <send_reaction_time_to_node_1+0x18>)
   807da:	4798      	blx	r3
   807dc:	bd08      	pop	{r3, pc}
   807de:	bf00      	nop
   807e0:	00080305 	.word	0x00080305

000807e4 <get_pi_value>:
	  y_value_pi = val;
  }
 
 uint8_t get_pi_value(){
	 return y_value_pi;
 }
   807e4:	4b01      	ldr	r3, [pc, #4]	; (807ec <get_pi_value+0x8>)
   807e6:	7818      	ldrb	r0, [r3, #0]
   807e8:	4770      	bx	lr
   807ea:	bf00      	nop
   807ec:	20000480 	.word	0x20000480

000807f0 <get_solenoid_status>:

 uint8_t get_solenoid_status(){
	 return solenoide_status;
 }
   807f0:	4b01      	ldr	r3, [pc, #4]	; (807f8 <get_solenoid_status+0x8>)
   807f2:	7858      	ldrb	r0, [r3, #1]
   807f4:	4770      	bx	lr
   807f6:	bf00      	nop
   807f8:	20000480 	.word	0x20000480

000807fc <move_servo>:

void reset_solenoid_status(){
	solenoide_status = 0;
 }
 
 void move_servo(){
   807fc:	b510      	push	{r4, lr}
	 //printf("joystick.x_val : %d \n\r", joystick.x_val);
	 
	  
	 
	 if(joystick.x_val < 0){
   807fe:	4b17      	ldr	r3, [pc, #92]	; (8085c <move_servo+0x60>)
   80800:	f993 0000 	ldrsb.w	r0, [r3]
   80804:	2800      	cmp	r0, #0
   80806:	db0f      	blt.n	80828 <move_servo+0x2c>
		 uint8_t val = 45-abs(joystick.x_val)*0.5; //using 45 instead of 50 since motor is skeiv
		 timer_change_duty(val);
	 }
	 if(joystick.x_val >= 0){
		 uint8_t val2 = 45+joystick.x_val*0.5; //using 45 instead of 50 since motor is skeiv
   80808:	4b15      	ldr	r3, [pc, #84]	; (80860 <move_servo+0x64>)
   8080a:	4798      	blx	r3
   8080c:	2200      	movs	r2, #0
   8080e:	4b15      	ldr	r3, [pc, #84]	; (80864 <move_servo+0x68>)
   80810:	4c15      	ldr	r4, [pc, #84]	; (80868 <move_servo+0x6c>)
   80812:	47a0      	blx	r4
   80814:	2200      	movs	r2, #0
   80816:	4b15      	ldr	r3, [pc, #84]	; (8086c <move_servo+0x70>)
   80818:	4c15      	ldr	r4, [pc, #84]	; (80870 <move_servo+0x74>)
   8081a:	47a0      	blx	r4
   8081c:	4b15      	ldr	r3, [pc, #84]	; (80874 <move_servo+0x78>)
   8081e:	4798      	blx	r3
		 timer_change_duty(val2);
   80820:	b2c0      	uxtb	r0, r0
   80822:	4b15      	ldr	r3, [pc, #84]	; (80878 <move_servo+0x7c>)
   80824:	4798      	blx	r3
   80826:	bd10      	pop	{r4, pc}
		 uint8_t val = 45-abs(joystick.x_val)*0.5; //using 45 instead of 50 since motor is skeiv
   80828:	2800      	cmp	r0, #0
   8082a:	bfb8      	it	lt
   8082c:	4240      	neglt	r0, r0
   8082e:	4b0c      	ldr	r3, [pc, #48]	; (80860 <move_servo+0x64>)
   80830:	4798      	blx	r3
   80832:	2200      	movs	r2, #0
   80834:	4b0b      	ldr	r3, [pc, #44]	; (80864 <move_servo+0x68>)
   80836:	4c0c      	ldr	r4, [pc, #48]	; (80868 <move_servo+0x6c>)
   80838:	47a0      	blx	r4
   8083a:	4602      	mov	r2, r0
   8083c:	460b      	mov	r3, r1
   8083e:	2000      	movs	r0, #0
   80840:	490a      	ldr	r1, [pc, #40]	; (8086c <move_servo+0x70>)
   80842:	4c0e      	ldr	r4, [pc, #56]	; (8087c <move_servo+0x80>)
   80844:	47a0      	blx	r4
   80846:	4b0b      	ldr	r3, [pc, #44]	; (80874 <move_servo+0x78>)
   80848:	4798      	blx	r3
		 timer_change_duty(val);
   8084a:	b2c0      	uxtb	r0, r0
   8084c:	4b0a      	ldr	r3, [pc, #40]	; (80878 <move_servo+0x7c>)
   8084e:	4798      	blx	r3
	 if(joystick.x_val >= 0){
   80850:	4b02      	ldr	r3, [pc, #8]	; (8085c <move_servo+0x60>)
   80852:	f993 0000 	ldrsb.w	r0, [r3]
   80856:	2800      	cmp	r0, #0
   80858:	dbe5      	blt.n	80826 <move_servo+0x2a>
   8085a:	e7d5      	b.n	80808 <move_servo+0xc>
   8085c:	200004bc 	.word	0x200004bc
   80860:	00081599 	.word	0x00081599
   80864:	3fe00000 	.word	0x3fe00000
   80868:	00081665 	.word	0x00081665
   8086c:	40468000 	.word	0x40468000
   80870:	00081301 	.word	0x00081301
   80874:	00081ad9 	.word	0x00081ad9
   80878:	00081159 	.word	0x00081159
   8087c:	000812fd 	.word	0x000812fd

00080880 <change_motor_speed_using_paadrag>:
 }

void change_motor_speed_using_paadrag(int paadrag){
	//printf("joystick.y_val : %d \n\r", joystick.y_val);
	
	if(paadrag < 0){
   80880:	2800      	cmp	r0, #0
		PIOD->PIO_CODR = PIO_CODR_P10; //set direction left
   80882:	f44f 6280 	mov.w	r2, #1024	; 0x400
   80886:	4b06      	ldr	r3, [pc, #24]	; (808a0 <change_motor_speed_using_paadrag+0x20>)
   80888:	bfb4      	ite	lt
   8088a:	635a      	strlt	r2, [r3, #52]	; 0x34
		uint16_t val = abs(paadrag);
		DACC->DACC_CDR = val;
	}else{
		PIOD->PIO_SODR = PIO_SODR_P10; //set direction right
   8088c:	631a      	strge	r2, [r3, #48]	; 0x30
		uint16_t val2 = abs(paadrag);
   8088e:	2800      	cmp	r0, #0
   80890:	bfb8      	it	lt
   80892:	4240      	neglt	r0, r0
		DACC->DACC_CDR = val2;
   80894:	b280      	uxth	r0, r0
   80896:	f5a3 33ca 	sub.w	r3, r3, #103424	; 0x19400
   8089a:	6218      	str	r0, [r3, #32]
   8089c:	4770      	bx	lr
   8089e:	bf00      	nop
   808a0:	400e1400 	.word	0x400e1400

000808a4 <motor_box_init>:
	}
}
 

void motor_box_init(){
	PIOD->PIO_PER |= PIO_PER_P10; //PIO Enable Register, PIO Enable //pin32 DIR PD10
   808a4:	4b20      	ldr	r3, [pc, #128]	; (80928 <motor_box_init+0x84>)
   808a6:	681a      	ldr	r2, [r3, #0]
   808a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   808ac:	601a      	str	r2, [r3, #0]
	PIOD->PIO_OER |= PIO_OER_P10; //Output Enable Register, Output Enable //pin32 DIR PD10
   808ae:	691a      	ldr	r2, [r3, #16]
   808b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   808b4:	611a      	str	r2, [r3, #16]
	PIOD->PIO_PER |= PIO_PER_P9; //PIO Enable Register, PIO Enable //pin30 EN PD9
   808b6:	681a      	ldr	r2, [r3, #0]
   808b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   808bc:	601a      	str	r2, [r3, #0]
	PIOD->PIO_OER |= PIO_OER_P9; //Output Enable Register, Output Enable //pin30 EN PD9
   808be:	691a      	ldr	r2, [r3, #16]
   808c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   808c4:	611a      	str	r2, [r3, #16]
	
	PIOD->PIO_SODR = PIO_SODR_P9; //Set Output Data Register, Set Output Data
   808c6:	f44f 7200 	mov.w	r2, #512	; 0x200
   808ca:	631a      	str	r2, [r3, #48]	; 0x30
	PIOD->PIO_CODR = PIO_CODR_P10; //Clear Output Data Register, Set Output Data
   808cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
   808d0:	635a      	str	r2, [r3, #52]	; 0x34
	
	PMC->PMC_PCER0 = PMC_PCER0_PID13;
   808d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   808d6:	4a15      	ldr	r2, [pc, #84]	; (8092c <motor_box_init+0x88>)
   808d8:	6111      	str	r1, [r2, #16]

	
	//allow counter to start
	PIOD->PIO_SODR |= PIO_SODR_P1; //!RST high
   808da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   808dc:	f042 0202 	orr.w	r2, r2, #2
   808e0:	631a      	str	r2, [r3, #48]	; 0x30
	
	//enable pins for reading encoder
	PIOC->PIO_PER |= PIO_PER_P8; //DO7
   808e2:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
   808e6:	681a      	ldr	r2, [r3, #0]
   808e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   808ec:	601a      	str	r2, [r3, #0]
	PIOC->PIO_PER |= PIO_PER_P7; //DO6
   808ee:	681a      	ldr	r2, [r3, #0]
   808f0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   808f4:	601a      	str	r2, [r3, #0]
	PIOC->PIO_PER |= PIO_PER_P6; //DO5
   808f6:	681a      	ldr	r2, [r3, #0]
   808f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   808fc:	601a      	str	r2, [r3, #0]
	PIOC->PIO_PER |= PIO_PER_P5; //DO4
   808fe:	681a      	ldr	r2, [r3, #0]
   80900:	f042 0220 	orr.w	r2, r2, #32
   80904:	601a      	str	r2, [r3, #0]
	PIOC->PIO_PER |= PIO_PER_P4; //DO3
   80906:	681a      	ldr	r2, [r3, #0]
   80908:	f042 0210 	orr.w	r2, r2, #16
   8090c:	601a      	str	r2, [r3, #0]
	PIOC->PIO_PER |= PIO_PER_P3; //DO2
   8090e:	681a      	ldr	r2, [r3, #0]
   80910:	f042 0208 	orr.w	r2, r2, #8
   80914:	601a      	str	r2, [r3, #0]
	PIOC->PIO_PER |= PIO_PER_P2; //DO1
   80916:	681a      	ldr	r2, [r3, #0]
   80918:	f042 0204 	orr.w	r2, r2, #4
   8091c:	601a      	str	r2, [r3, #0]
	PIOC->PIO_PER |= PIO_PER_P1; //DO0
   8091e:	681a      	ldr	r2, [r3, #0]
   80920:	f042 0202 	orr.w	r2, r2, #2
   80924:	601a      	str	r2, [r3, #0]
   80926:	4770      	bx	lr
   80928:	400e1400 	.word	0x400e1400
   8092c:	400e0600 	.word	0x400e0600

00080930 <encoder_read>:
}


void encoder_read(){
   80930:	b508      	push	{r3, lr}
	// PIO (Output) Enable Register, PIO Enable
	PIOD->PIO_PER |= PIO_PER_P2; // Pin 27 sel PD2 SEL
   80932:	4b2a      	ldr	r3, [pc, #168]	; (809dc <encoder_read+0xac>)
   80934:	681a      	ldr	r2, [r3, #0]
   80936:	f042 0204 	orr.w	r2, r2, #4
   8093a:	601a      	str	r2, [r3, #0]
	PIOD->PIO_OER |= PIO_OER_P2; // 
   8093c:	691a      	ldr	r2, [r3, #16]
   8093e:	f042 0204 	orr.w	r2, r2, #4
   80942:	611a      	str	r2, [r3, #16]
	PIOD->PIO_PER |= PIO_PER_P1; // Pin 26 not_rst PD1 !RST
   80944:	681a      	ldr	r2, [r3, #0]
   80946:	f042 0202 	orr.w	r2, r2, #2
   8094a:	601a      	str	r2, [r3, #0]
	PIOD->PIO_OER |= PIO_OER_P1; // 
   8094c:	691a      	ldr	r2, [r3, #16]
   8094e:	f042 0202 	orr.w	r2, r2, #2
   80952:	611a      	str	r2, [r3, #16]
	PIOD->PIO_PER |= PIO_PER_P0; // Pin 25 not_oe PD0 !OE
   80954:	681a      	ldr	r2, [r3, #0]
   80956:	f042 0201 	orr.w	r2, r2, #1
   8095a:	601a      	str	r2, [r3, #0]
	PIOD->PIO_OER |= PIO_OER_P0; // 
   8095c:	691a      	ldr	r2, [r3, #16]
   8095e:	f042 0201 	orr.w	r2, r2, #1
   80962:	611a      	str	r2, [r3, #16]
	
	PIOD->PIO_CODR |= PIO_CODR_P0; //!OE low
   80964:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   80966:	f042 0201 	orr.w	r2, r2, #1
   8096a:	635a      	str	r2, [r3, #52]	; 0x34
	PIOD->PIO_CODR |= PIO_CODR_P2; //SEL low
   8096c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   8096e:	f042 0204 	orr.w	r2, r2, #4
   80972:	635a      	str	r2, [r3, #52]	; 0x34
   80974:	f44f 6348 	mov.w	r3, #3200	; 0xc80
	
	//10 microsec
	for(int i = 0; i < 3200; i++){
   80978:	3b01      	subs	r3, #1
   8097a:	d1fd      	bne.n	80978 <encoder_read+0x48>
	}
	
	uint8_t MSB = (PIOC->PIO_PDSR >> 1);
   8097c:	4b18      	ldr	r3, [pc, #96]	; (809e0 <encoder_read+0xb0>)
   8097e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   80980:	0849      	lsrs	r1, r1, #1
	//printf("PIO_PDSR: -----%x \n\r", PIOC->PIO_PDSR);
	PIOD->PIO_SODR |= PIO_SODR_P2; //SEL high
   80982:	4a16      	ldr	r2, [pc, #88]	; (809dc <encoder_read+0xac>)
   80984:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80986:	f043 0304 	orr.w	r3, r3, #4
   8098a:	6313      	str	r3, [r2, #48]	; 0x30
   8098c:	f44f 6348 	mov.w	r3, #3200	; 0xc80
	
	//10 microsec
	for(int i = 0; i < 3200; i++){
   80990:	3b01      	subs	r3, #1
   80992:	d1fd      	bne.n	80990 <encoder_read+0x60>
	}
	uint8_t LSB = PIOC->PIO_PDSR >> 1;
   80994:	4b12      	ldr	r3, [pc, #72]	; (809e0 <encoder_read+0xb0>)
   80996:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	
	PIOD->PIO_CODR |= PIO_CODR_P1; //!RST low
   80998:	f503 7300 	add.w	r3, r3, #512	; 0x200
   8099c:	6b58      	ldr	r0, [r3, #52]	; 0x34
   8099e:	f040 0002 	orr.w	r0, r0, #2
   809a2:	6358      	str	r0, [r3, #52]	; 0x34
	PIOD->PIO_SODR |= PIO_SODR_P1; //!RST high
   809a4:	6b18      	ldr	r0, [r3, #48]	; 0x30
   809a6:	f040 0002 	orr.w	r0, r0, #2
   809aa:	6318      	str	r0, [r3, #48]	; 0x30
	PIOD->PIO_SODR |= PIO_SODR_P0; //!OE high
   809ac:	6b18      	ldr	r0, [r3, #48]	; 0x30
   809ae:	f040 0001 	orr.w	r0, r0, #1
   809b2:	6318      	str	r0, [r3, #48]	; 0x30
	
	uint16_t encoder_data = (LSB | (MSB << 8));
   809b4:	0209      	lsls	r1, r1, #8
   809b6:	b289      	uxth	r1, r1
	int encoder_data_int = LSB | (MSB << 8);
   809b8:	f3c2 0347 	ubfx	r3, r2, #1, #8
   809bc:	4319      	orrs	r1, r3
	set_pi_value((8888-encoder_data_int)/88); //scaled so that value is 0-100;
   809be:	f5c1 530a 	rsb	r3, r1, #8832	; 0x2280
   809c2:	3338      	adds	r3, #56	; 0x38
   809c4:	4a07      	ldr	r2, [pc, #28]	; (809e4 <encoder_read+0xb4>)
   809c6:	fb82 0203 	smull	r0, r2, r2, r3
   809ca:	17db      	asrs	r3, r3, #31
   809cc:	ebc3 1322 	rsb	r3, r3, r2, asr #4
   809d0:	4a05      	ldr	r2, [pc, #20]	; (809e8 <encoder_read+0xb8>)
   809d2:	7013      	strb	r3, [r2, #0]
 	printf("Encoder             data: %x \n\r", encoder_data_int);
   809d4:	4805      	ldr	r0, [pc, #20]	; (809ec <encoder_read+0xbc>)
   809d6:	4b06      	ldr	r3, [pc, #24]	; (809f0 <encoder_read+0xc0>)
   809d8:	4798      	blx	r3
   809da:	bd08      	pop	{r3, pc}
   809dc:	400e1400 	.word	0x400e1400
   809e0:	400e1200 	.word	0x400e1200
   809e4:	2e8ba2e9 	.word	0x2e8ba2e9
   809e8:	20000480 	.word	0x20000480
   809ec:	00081d28 	.word	0x00081d28
   809f0:	00081031 	.word	0x00081031

000809f4 <button_check>:
// 		printf("Data positive: %d \n\r", encoder_data);
// 	}
}

uint8_t button_check(uint8_t current){
	if(current == 0 && previous == 1){
   809f4:	4603      	mov	r3, r0
   809f6:	b948      	cbnz	r0, 80a0c <button_check+0x18>
   809f8:	4a07      	ldr	r2, [pc, #28]	; (80a18 <button_check+0x24>)
   809fa:	7810      	ldrb	r0, [r2, #0]
   809fc:	2801      	cmp	r0, #1
   809fe:	d001      	beq.n	80a04 <button_check+0x10>
		return 1;
		}else if(current != 0){
		previous = 1;
		//printf("%s", "C");
	}
	return 0;
   80a00:	4618      	mov	r0, r3
   80a02:	4770      	bx	lr
		previous = 0;
   80a04:	2200      	movs	r2, #0
   80a06:	4b04      	ldr	r3, [pc, #16]	; (80a18 <button_check+0x24>)
   80a08:	701a      	strb	r2, [r3, #0]
		return 1;
   80a0a:	4770      	bx	lr
		previous = 1;
   80a0c:	2201      	movs	r2, #1
   80a0e:	4b02      	ldr	r3, [pc, #8]	; (80a18 <button_check+0x24>)
   80a10:	701a      	strb	r2, [r3, #0]
	return 0;
   80a12:	2000      	movs	r0, #0
   80a14:	4770      	bx	lr
   80a16:	bf00      	nop
   80a18:	20000004 	.word	0x20000004

00080a1c <check_solenoid_shot>:
 void check_solenoid_shot(){
   80a1c:	b508      	push	{r3, lr}
	if(button_check(joystick.butt_pressed)){
   80a1e:	4b10      	ldr	r3, [pc, #64]	; (80a60 <check_solenoid_shot+0x44>)
   80a20:	7898      	ldrb	r0, [r3, #2]
   80a22:	4b10      	ldr	r3, [pc, #64]	; (80a64 <check_solenoid_shot+0x48>)
   80a24:	4798      	blx	r3
   80a26:	b978      	cbnz	r0, 80a48 <check_solenoid_shot+0x2c>
		if(return_milliseconds() > (last_time_pressed + 10)){
   80a28:	4b0f      	ldr	r3, [pc, #60]	; (80a68 <check_solenoid_shot+0x4c>)
   80a2a:	4798      	blx	r3
   80a2c:	4b0f      	ldr	r3, [pc, #60]	; (80a6c <check_solenoid_shot+0x50>)
   80a2e:	685b      	ldr	r3, [r3, #4]
   80a30:	330a      	adds	r3, #10
   80a32:	4298      	cmp	r0, r3
   80a34:	d907      	bls.n	80a46 <check_solenoid_shot+0x2a>
			PIOC->PIO_SODR |= PIO_SODR_P13;
   80a36:	4a0e      	ldr	r2, [pc, #56]	; (80a70 <check_solenoid_shot+0x54>)
   80a38:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80a3a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   80a3e:	6313      	str	r3, [r2, #48]	; 0x30
			solenoide_status = 0;
   80a40:	2200      	movs	r2, #0
   80a42:	4b0a      	ldr	r3, [pc, #40]	; (80a6c <check_solenoid_shot+0x50>)
   80a44:	705a      	strb	r2, [r3, #1]
   80a46:	bd08      	pop	{r3, pc}
		last_time_pressed = return_milliseconds();
   80a48:	4b07      	ldr	r3, [pc, #28]	; (80a68 <check_solenoid_shot+0x4c>)
   80a4a:	4798      	blx	r3
   80a4c:	4a07      	ldr	r2, [pc, #28]	; (80a6c <check_solenoid_shot+0x50>)
   80a4e:	6050      	str	r0, [r2, #4]
		PIOC->PIO_CODR |= PIO_CODR_P13;
   80a50:	4907      	ldr	r1, [pc, #28]	; (80a70 <check_solenoid_shot+0x54>)
   80a52:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   80a54:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   80a58:	634b      	str	r3, [r1, #52]	; 0x34
		solenoide_status = 1;
   80a5a:	2301      	movs	r3, #1
   80a5c:	7053      	strb	r3, [r2, #1]
   80a5e:	bd08      	pop	{r3, pc}
   80a60:	200004bc 	.word	0x200004bc
   80a64:	000809f5 	.word	0x000809f5
   80a68:	00081079 	.word	0x00081079
   80a6c:	20000480 	.word	0x20000480
   80a70:	400e1200 	.word	0x400e1200

00080a74 <main>:
#include "timer.h"
#include "feedback.h"
#include "pid.h"

int main(void)
{
   80a74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80a78:	b084      	sub	sp, #16
    /* Initialize the SAM system */
    SystemInit();
   80a7a:	4b3f      	ldr	r3, [pc, #252]	; (80b78 <main+0x104>)
   80a7c:	4798      	blx	r3
	WDT->WDT_MR |= 1 << 15;
   80a7e:	4a3f      	ldr	r2, [pc, #252]	; (80b7c <main+0x108>)
   80a80:	6853      	ldr	r3, [r2, #4]
   80a82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
   80a86:	6053      	str	r3, [r2, #4]
	configure_uart();
   80a88:	4b3d      	ldr	r3, [pc, #244]	; (80b80 <main+0x10c>)
   80a8a:	4798      	blx	r3
	can_init_def_tx_rx_mb(0x00290561); // 0x00290561 = 0b 00000000001010010000010101100001// 0b000000000000100100010001000100010
   80a8c:	483d      	ldr	r0, [pc, #244]	; (80b84 <main+0x110>)
   80a8e:	4b3e      	ldr	r3, [pc, #248]	; (80b88 <main+0x114>)
   80a90:	4798      	blx	r3
	
	printf("hello\n\r");
   80a92:	483e      	ldr	r0, [pc, #248]	; (80b8c <main+0x118>)
   80a94:	4b3e      	ldr	r3, [pc, #248]	; (80b90 <main+0x11c>)
   80a96:	4798      	blx	r3
	PWM->PWM_CH_NUM[2].PWM_CMR &= ~PWM_CMR_CPOL;
	
	PIOA->PIO_ABSR |= PIO_ABSR_P5; //PIO set peripheral b on pin 5*/
	
	
	timer_init();
   80a98:	4b3e      	ldr	r3, [pc, #248]	; (80b94 <main+0x120>)
   80a9a:	4798      	blx	r3
	timer_change_duty(100);
   80a9c:	2064      	movs	r0, #100	; 0x64
   80a9e:	4b3e      	ldr	r3, [pc, #248]	; (80b98 <main+0x124>)
   80aa0:	4798      	blx	r3
	//init_interrupt_PI();
	init_ch1_PI();
   80aa2:	4b3e      	ldr	r3, [pc, #248]	; (80b9c <main+0x128>)
   80aa4:	4798      	blx	r3
	
	
	adc_init();
   80aa6:	4b3e      	ldr	r3, [pc, #248]	; (80ba0 <main+0x12c>)
   80aa8:	4798      	blx	r3
	dac_init();
   80aaa:	4b3e      	ldr	r3, [pc, #248]	; (80ba4 <main+0x130>)
   80aac:	4798      	blx	r3
	
	
	motor_box_init();
   80aae:	4b3e      	ldr	r3, [pc, #248]	; (80ba8 <main+0x134>)
   80ab0:	4798      	blx	r3
	
	
	
	
	//enable and set high, pin to controll servo shoot, pin50 on shield
	PIOC->PIO_PER |= PIO_PER_P13; 
   80ab2:	4b3e      	ldr	r3, [pc, #248]	; (80bac <main+0x138>)
   80ab4:	681a      	ldr	r2, [r3, #0]
   80ab6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   80aba:	601a      	str	r2, [r3, #0]
	PIOC->PIO_OER |= PIO_OER_P13; 
   80abc:	691a      	ldr	r2, [r3, #16]
   80abe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   80ac2:	611a      	str	r2, [r3, #16]
	PIOC->PIO_SODR |= PIO_SODR_P13;
   80ac4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80ac6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   80aca:	631a      	str	r2, [r3, #48]	; 0x30
	
	
	
	
	PIOA->PIO_PER |= PIO_PER_P19; //PIO Enable Register, PIO Enable
   80acc:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
   80ad0:	681a      	ldr	r2, [r3, #0]
   80ad2:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   80ad6:	601a      	str	r2, [r3, #0]
	PIOA->PIO_OER |= PIO_OER_P19; //Output Enable Register, Output Enable
   80ad8:	691a      	ldr	r2, [r3, #16]
   80ada:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   80ade:	611a      	str	r2, [r3, #16]
	
	PIOA->PIO_PER |= PIO_PER_P20; //PIO Enable Register, PIO Enable
   80ae0:	681a      	ldr	r2, [r3, #0]
   80ae2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   80ae6:	601a      	str	r2, [r3, #0]
	PIOA->PIO_OER |= PIO_OER_P20; //Output Enable Register, Output Enable
   80ae8:	691a      	ldr	r2, [r3, #16]
   80aea:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   80aee:	611a      	str	r2, [r3, #16]
	PIOA->PIO_PER |= PIO_PER_P9; //PIO Enable Register, PIO Enable
	PIOA->PIO_OER |= PIO_OER_P9; //Output Enable Register, Output Enable*/
	volatile CAN_MESSAGE msg;
	CAN_MESSAGE msgToSend;
	uint8_t solenoide_pressed = 0;
	SysTick_init();
   80af0:	4b2f      	ldr	r3, [pc, #188]	; (80bb0 <main+0x13c>)
   80af2:	4798      	blx	r3

		send_time_to_node_1(&msgToSend);

		//limits to fewer OLED updates a second, can be tweaked
		if(!(get_controller_runs()%3)){
			send_motor_info_to_node_1(&msgToSend, get_pi_value(), get_solenoid_status());
   80af4:	4e2f      	ldr	r6, [pc, #188]	; (80bb4 <main+0x140>)
   80af6:	4d30      	ldr	r5, [pc, #192]	; (80bb8 <main+0x144>)
   80af8:	4c30      	ldr	r4, [pc, #192]	; (80bbc <main+0x148>)
		move_servo();
   80afa:	4f31      	ldr	r7, [pc, #196]	; (80bc0 <main+0x14c>)
   80afc:	e009      	b.n	80b12 <main+0x9e>
			//Make sure 8 bit doesen't overflow as it would break logic
			if(get_controller_runs > 250){
				reset_controller_runs();
			}
		}
		send_motor_info_to_node_1(&msgToSend, get_pi_value(), get_solenoid_status());
   80afe:	47b0      	blx	r6
   80b00:	4680      	mov	r8, r0
   80b02:	47a8      	blx	r5
   80b04:	4602      	mov	r2, r0
   80b06:	4641      	mov	r1, r8
   80b08:	a801      	add	r0, sp, #4
   80b0a:	47a0      	blx	r4
		
		if(get_goal_flag()){
   80b0c:	4b2d      	ldr	r3, [pc, #180]	; (80bc4 <main+0x150>)
   80b0e:	4798      	blx	r3
   80b10:	bb00      	cbnz	r0, 80b54 <main+0xe0>
		move_servo();
   80b12:	47b8      	blx	r7
		encoder_read();
   80b14:	4b2c      	ldr	r3, [pc, #176]	; (80bc8 <main+0x154>)
   80b16:	4798      	blx	r3
		check_solenoid_shot();
   80b18:	4b2c      	ldr	r3, [pc, #176]	; (80bcc <main+0x158>)
   80b1a:	4798      	blx	r3
		send_time_to_node_1(&msgToSend);
   80b1c:	a801      	add	r0, sp, #4
   80b1e:	4b2c      	ldr	r3, [pc, #176]	; (80bd0 <main+0x15c>)
   80b20:	4798      	blx	r3
		if(!(get_controller_runs()%3)){
   80b22:	4b2c      	ldr	r3, [pc, #176]	; (80bd4 <main+0x160>)
   80b24:	4798      	blx	r3
   80b26:	4b2c      	ldr	r3, [pc, #176]	; (80bd8 <main+0x164>)
   80b28:	fba3 2300 	umull	r2, r3, r3, r0
   80b2c:	085b      	lsrs	r3, r3, #1
   80b2e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   80b32:	1ac3      	subs	r3, r0, r3
   80b34:	f013 0fff 	tst.w	r3, #255	; 0xff
   80b38:	d1e1      	bne.n	80afe <main+0x8a>
			send_motor_info_to_node_1(&msgToSend, get_pi_value(), get_solenoid_status());
   80b3a:	47b0      	blx	r6
   80b3c:	4680      	mov	r8, r0
   80b3e:	47a8      	blx	r5
   80b40:	4602      	mov	r2, r0
   80b42:	4641      	mov	r1, r8
   80b44:	a801      	add	r0, sp, #4
   80b46:	47a0      	blx	r4
			if(get_controller_runs > 250){
   80b48:	4b22      	ldr	r3, [pc, #136]	; (80bd4 <main+0x160>)
   80b4a:	2bfa      	cmp	r3, #250	; 0xfa
   80b4c:	d9d7      	bls.n	80afe <main+0x8a>
				reset_controller_runs();
   80b4e:	4b23      	ldr	r3, [pc, #140]	; (80bdc <main+0x168>)
   80b50:	4798      	blx	r3
   80b52:	e7d4      	b.n	80afe <main+0x8a>
			if((return_trigger_time() + 200) < return_milliseconds()){
   80b54:	4b22      	ldr	r3, [pc, #136]	; (80be0 <main+0x16c>)
   80b56:	4798      	blx	r3
   80b58:	4680      	mov	r8, r0
   80b5a:	4b22      	ldr	r3, [pc, #136]	; (80be4 <main+0x170>)
   80b5c:	4798      	blx	r3
   80b5e:	f108 08c8 	add.w	r8, r8, #200	; 0xc8
   80b62:	4580      	cmp	r8, r0
   80b64:	d302      	bcc.n	80b6c <main+0xf8>
				send_goal_to_node_1(&msgToSend);
				stop_pid();
				
			}
			reset_goal_flag();
   80b66:	4b20      	ldr	r3, [pc, #128]	; (80be8 <main+0x174>)
   80b68:	4798      	blx	r3
   80b6a:	e7d2      	b.n	80b12 <main+0x9e>
				send_goal_to_node_1(&msgToSend);
   80b6c:	a801      	add	r0, sp, #4
   80b6e:	4b1f      	ldr	r3, [pc, #124]	; (80bec <main+0x178>)
   80b70:	4798      	blx	r3
				stop_pid();
   80b72:	4b1f      	ldr	r3, [pc, #124]	; (80bf0 <main+0x17c>)
   80b74:	4798      	blx	r3
   80b76:	e7f6      	b.n	80b66 <main+0xf2>
   80b78:	0008065d 	.word	0x0008065d
   80b7c:	400e1a50 	.word	0x400e1a50
   80b80:	00081201 	.word	0x00081201
   80b84:	00290561 	.word	0x00290561
   80b88:	000802f5 	.word	0x000802f5
   80b8c:	00081d48 	.word	0x00081d48
   80b90:	00081031 	.word	0x00081031
   80b94:	00081101 	.word	0x00081101
   80b98:	00081159 	.word	0x00081159
   80b9c:	000811a9 	.word	0x000811a9
   80ba0:	00080161 	.word	0x00080161
   80ba4:	000805a5 	.word	0x000805a5
   80ba8:	000808a5 	.word	0x000808a5
   80bac:	400e1200 	.word	0x400e1200
   80bb0:	00081055 	.word	0x00081055
   80bb4:	000807e5 	.word	0x000807e5
   80bb8:	000807f1 	.word	0x000807f1
   80bbc:	0008079d 	.word	0x0008079d
   80bc0:	000807fd 	.word	0x000807fd
   80bc4:	0008019d 	.word	0x0008019d
   80bc8:	00080931 	.word	0x00080931
   80bcc:	00080a1d 	.word	0x00080a1d
   80bd0:	00080701 	.word	0x00080701
   80bd4:	000810d9 	.word	0x000810d9
   80bd8:	aaaaaaab 	.word	0xaaaaaaab
   80bdc:	000810f5 	.word	0x000810f5
   80be0:	000810c1 	.word	0x000810c1
   80be4:	00081079 	.word	0x00081079
   80be8:	000801a9 	.word	0x000801a9
   80bec:	0008075d 	.word	0x0008075d
   80bf0:	00080d51 	.word	0x00080d51

00080bf4 <TC1_Handler>:
double T_periode = 0.02;
int active = 0;

uint8_t difficulty = 0;

void TC1_Handler( void ){
   80bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80bf8:	b087      	sub	sp, #28
	
	prev_error = error;
   80bfa:	4c44      	ldr	r4, [pc, #272]	; (80d0c <TC1_Handler+0x118>)
   80bfc:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   80c00:	e9c4 2300 	strd	r2, r3, [r4]
	error = joystick.left_val - get_pi_value();
   80c04:	f8df a130 	ldr.w	sl, [pc, #304]	; 80d38 <TC1_Handler+0x144>
   80c08:	f99a 5003 	ldrsb.w	r5, [sl, #3]
   80c0c:	4b40      	ldr	r3, [pc, #256]	; (80d10 <TC1_Handler+0x11c>)
   80c0e:	4798      	blx	r3
   80c10:	4e40      	ldr	r6, [pc, #256]	; (80d14 <TC1_Handler+0x120>)
   80c12:	1a28      	subs	r0, r5, r0
   80c14:	47b0      	blx	r6
   80c16:	4602      	mov	r2, r0
   80c18:	460b      	mov	r3, r1
   80c1a:	e9cd 2300 	strd	r2, r3, [sp]
   80c1e:	e9c4 2302 	strd	r2, r3, [r4, #8]
	sum_error += error;
   80c22:	4f3d      	ldr	r7, [pc, #244]	; (80d18 <TC1_Handler+0x124>)
   80c24:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   80c28:	47b8      	blx	r7
   80c2a:	e9cd 0104 	strd	r0, r1, [sp, #16]
   80c2e:	460a      	mov	r2, r1
   80c30:	4601      	mov	r1, r0
   80c32:	e9c4 1204 	strd	r1, r2, [r4, #16]
	paadrag = active*((kp+difficulty*10)*error+T_periode*(ki-difficulty*4)*sum_error+((kd + difficulty*1)/T_periode)*(error-prev_error));
   80c36:	f894 b018 	ldrb.w	fp, [r4, #24]
   80c3a:	f8df 8100 	ldr.w	r8, [pc, #256]	; 80d3c <TC1_Handler+0x148>
   80c3e:	e9d8 0100 	ldrd	r0, r1, [r8]
   80c42:	e9cd 0102 	strd	r0, r1, [sp, #8]
   80c46:	ea4f 098b 	mov.w	r9, fp, lsl #2
   80c4a:	4648      	mov	r0, r9
   80c4c:	47b0      	blx	r6
   80c4e:	4602      	mov	r2, r0
   80c50:	460b      	mov	r3, r1
   80c52:	e9d8 0102 	ldrd	r0, r1, [r8, #8]
   80c56:	4d31      	ldr	r5, [pc, #196]	; (80d1c <TC1_Handler+0x128>)
   80c58:	47a8      	blx	r5
   80c5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   80c5e:	4d30      	ldr	r5, [pc, #192]	; (80d20 <TC1_Handler+0x12c>)
   80c60:	47a8      	blx	r5
   80c62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   80c66:	47a8      	blx	r5
   80c68:	e9cd 0104 	strd	r0, r1, [sp, #16]
   80c6c:	eb09 000b 	add.w	r0, r9, fp
   80c70:	0040      	lsls	r0, r0, #1
   80c72:	47b0      	blx	r6
   80c74:	e9d8 2304 	ldrd	r2, r3, [r8, #16]
   80c78:	47b8      	blx	r7
   80c7a:	e9dd 2300 	ldrd	r2, r3, [sp]
   80c7e:	47a8      	blx	r5
   80c80:	4602      	mov	r2, r0
   80c82:	460b      	mov	r3, r1
   80c84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   80c88:	47b8      	blx	r7
   80c8a:	e9cd 0104 	strd	r0, r1, [sp, #16]
   80c8e:	4658      	mov	r0, fp
   80c90:	47b0      	blx	r6
   80c92:	e9d8 2306 	ldrd	r2, r3, [r8, #24]
   80c96:	47b8      	blx	r7
   80c98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   80c9c:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 80d40 <TC1_Handler+0x14c>
   80ca0:	47c0      	blx	r8
   80ca2:	4680      	mov	r8, r0
   80ca4:	4689      	mov	r9, r1
   80ca6:	e9d4 2300 	ldrd	r2, r3, [r4]
   80caa:	e9dd 0100 	ldrd	r0, r1, [sp]
   80cae:	4d1b      	ldr	r5, [pc, #108]	; (80d1c <TC1_Handler+0x128>)
   80cb0:	47a8      	blx	r5
   80cb2:	4602      	mov	r2, r0
   80cb4:	460b      	mov	r3, r1
   80cb6:	4640      	mov	r0, r8
   80cb8:	4649      	mov	r1, r9
   80cba:	4d19      	ldr	r5, [pc, #100]	; (80d20 <TC1_Handler+0x12c>)
   80cbc:	47a8      	blx	r5
   80cbe:	4602      	mov	r2, r0
   80cc0:	460b      	mov	r3, r1
   80cc2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   80cc6:	47b8      	blx	r7
   80cc8:	4680      	mov	r8, r0
   80cca:	4689      	mov	r9, r1
   80ccc:	69e0      	ldr	r0, [r4, #28]
   80cce:	47b0      	blx	r6
   80cd0:	4602      	mov	r2, r0
   80cd2:	460b      	mov	r3, r1
   80cd4:	4640      	mov	r0, r8
   80cd6:	4649      	mov	r1, r9
   80cd8:	47a8      	blx	r5
   80cda:	4b12      	ldr	r3, [pc, #72]	; (80d24 <TC1_Handler+0x130>)
   80cdc:	4798      	blx	r3
   80cde:	6220      	str	r0, [r4, #32]
	if(joystick.left_button){
   80ce0:	f99a 3005 	ldrsb.w	r3, [sl, #5]
   80ce4:	b123      	cbz	r3, 80cf0 <TC1_Handler+0xfc>
		sum_error = 0; 
   80ce6:	2400      	movs	r4, #0
   80ce8:	2500      	movs	r5, #0
   80cea:	4b08      	ldr	r3, [pc, #32]	; (80d0c <TC1_Handler+0x118>)
   80cec:	e9c3 4504 	strd	r4, r5, [r3, #16]
	}
	change_motor_speed_using_paadrag(paadrag);
   80cf0:	4b0d      	ldr	r3, [pc, #52]	; (80d28 <TC1_Handler+0x134>)
   80cf2:	4798      	blx	r3
	//printf("x: %d \n\r",paadrag);
	int a = tc->TC_CHANNEL[1].TC_SR; // funker uten?!
   80cf4:	4b0d      	ldr	r3, [pc, #52]	; (80d2c <TC1_Handler+0x138>)
   80cf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   80cf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80cfc:	4b0c      	ldr	r3, [pc, #48]	; (80d30 <TC1_Handler+0x13c>)
   80cfe:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ClearPendingIRQ(ID_TC1);
	increment_controller_runs();
   80d02:	4b0c      	ldr	r3, [pc, #48]	; (80d34 <TC1_Handler+0x140>)
   80d04:	4798      	blx	r3
}
   80d06:	b007      	add	sp, #28
   80d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80d0c:	20000488 	.word	0x20000488
   80d10:	000807e5 	.word	0x000807e5
   80d14:	00081599 	.word	0x00081599
   80d18:	00081301 	.word	0x00081301
   80d1c:	000812fd 	.word	0x000812fd
   80d20:	00081665 	.word	0x00081665
   80d24:	00081a89 	.word	0x00081a89
   80d28:	00080881 	.word	0x00080881
   80d2c:	40080000 	.word	0x40080000
   80d30:	e000e100 	.word	0xe000e100
   80d34:	000810e5 	.word	0x000810e5
   80d38:	200004bc 	.word	0x200004bc
   80d3c:	20000008 	.word	0x20000008
   80d40:	000818b9 	.word	0x000818b9

00080d44 <set_difficulty>:
uint8_t get_difficulty(){
	return difficulty;
};
void set_difficulty(uint8_t difficulty_to_set){
	difficulty = difficulty_to_set;
   80d44:	4b01      	ldr	r3, [pc, #4]	; (80d4c <set_difficulty+0x8>)
   80d46:	7618      	strb	r0, [r3, #24]
   80d48:	4770      	bx	lr
   80d4a:	bf00      	nop
   80d4c:	20000488 	.word	0x20000488

00080d50 <stop_pid>:
};

void stop_pid(){
	active = 0;
   80d50:	2200      	movs	r2, #0
   80d52:	4b01      	ldr	r3, [pc, #4]	; (80d58 <stop_pid+0x8>)
   80d54:	61da      	str	r2, [r3, #28]
   80d56:	4770      	bx	lr
   80d58:	20000488 	.word	0x20000488

00080d5c <start_pid>:
}
void start_pid(){
	active = 1;
   80d5c:	2201      	movs	r2, #1
   80d5e:	4b01      	ldr	r3, [pc, #4]	; (80d64 <start_pid+0x8>)
   80d60:	61da      	str	r2, [r3, #28]
   80d62:	4770      	bx	lr
   80d64:	20000488 	.word	0x20000488

00080d68 <prints>:

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
   80d68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   80d6c:	460d      	mov	r5, r1
	register int pc = 0, padchar = ' ';

	if (width > 0) {
   80d6e:	1e16      	subs	r6, r2, #0
   80d70:	dd48      	ble.n	80e04 <prints+0x9c>
		register int len = 0;
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
   80d72:	780a      	ldrb	r2, [r1, #0]
   80d74:	2a00      	cmp	r2, #0
   80d76:	d035      	beq.n	80de4 <prints+0x7c>
   80d78:	460a      	mov	r2, r1
   80d7a:	2400      	movs	r4, #0
   80d7c:	3401      	adds	r4, #1
   80d7e:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   80d82:	2900      	cmp	r1, #0
   80d84:	d1fa      	bne.n	80d7c <prints+0x14>
		if (len >= width) width = 0;
   80d86:	42a6      	cmp	r6, r4
   80d88:	dc2d      	bgt.n	80de6 <prints+0x7e>
   80d8a:	2400      	movs	r4, #0
		else width -= len;
		if (pad & PAD_ZERO) padchar = '0';
   80d8c:	f003 0202 	and.w	r2, r3, #2
   80d90:	2a00      	cmp	r2, #0
   80d92:	bf0c      	ite	eq
   80d94:	f04f 0820 	moveq.w	r8, #32
   80d98:	f04f 0830 	movne.w	r8, #48	; 0x30
	}
	if (!(pad & PAD_RIGHT)) {
   80d9c:	f013 0301 	ands.w	r3, r3, #1
   80da0:	d123      	bne.n	80dea <prints+0x82>
		for ( ; width > 0; --width) {
   80da2:	2c00      	cmp	r4, #0
   80da4:	dd28      	ble.n	80df8 <prints+0x90>
   80da6:	4626      	mov	r6, r4
	(void) uart_putchar(c);  //Send characters to uart
   80da8:	fa5f f988 	uxtb.w	r9, r8
   80dac:	4f18      	ldr	r7, [pc, #96]	; (80e10 <prints+0xa8>)
   80dae:	4648      	mov	r0, r9
   80db0:	47b8      	blx	r7
		for ( ; width > 0; --width) {
   80db2:	3e01      	subs	r6, #1
   80db4:	d1fb      	bne.n	80dae <prints+0x46>
			printchar (out, padchar);
			++pc;
		}
	}
	for ( ; *string ; ++string) {
   80db6:	7828      	ldrb	r0, [r5, #0]
   80db8:	b188      	cbz	r0, 80dde <prints+0x76>
	(void) uart_putchar(c);  //Send characters to uart
   80dba:	4f15      	ldr	r7, [pc, #84]	; (80e10 <prints+0xa8>)
   80dbc:	47b8      	blx	r7
		printchar (out, *string);
		++pc;
   80dbe:	3401      	adds	r4, #1
	for ( ; *string ; ++string) {
   80dc0:	f815 0f01 	ldrb.w	r0, [r5, #1]!
   80dc4:	2800      	cmp	r0, #0
   80dc6:	d1f9      	bne.n	80dbc <prints+0x54>
	}
	for ( ; width > 0; --width) {
   80dc8:	2e00      	cmp	r6, #0
   80dca:	dd08      	ble.n	80dde <prints+0x76>
   80dcc:	4635      	mov	r5, r6
	(void) uart_putchar(c);  //Send characters to uart
   80dce:	fa5f f888 	uxtb.w	r8, r8
   80dd2:	4f0f      	ldr	r7, [pc, #60]	; (80e10 <prints+0xa8>)
   80dd4:	4640      	mov	r0, r8
   80dd6:	47b8      	blx	r7
	for ( ; width > 0; --width) {
   80dd8:	3d01      	subs	r5, #1
   80dda:	d1fb      	bne.n	80dd4 <prints+0x6c>
   80ddc:	4434      	add	r4, r6
		printchar (out, padchar);
		++pc;
	}

	return pc;
}
   80dde:	4620      	mov	r0, r4
   80de0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		for (ptr = string; *ptr; ++ptr) ++len;
   80de4:	2400      	movs	r4, #0
		else width -= len;
   80de6:	1b34      	subs	r4, r6, r4
   80de8:	e7d0      	b.n	80d8c <prints+0x24>
   80dea:	4626      	mov	r6, r4
	for ( ; *string ; ++string) {
   80dec:	7828      	ldrb	r0, [r5, #0]
   80dee:	b108      	cbz	r0, 80df4 <prints+0x8c>
	register int pc = 0, padchar = ' ';
   80df0:	2400      	movs	r4, #0
   80df2:	e7e2      	b.n	80dba <prints+0x52>
   80df4:	2400      	movs	r4, #0
   80df6:	e7e7      	b.n	80dc8 <prints+0x60>
		for ( ; width > 0; --width) {
   80df8:	4626      	mov	r6, r4
   80dfa:	461c      	mov	r4, r3
   80dfc:	e7db      	b.n	80db6 <prints+0x4e>
	register int pc = 0, padchar = ' ';
   80dfe:	f04f 0820 	mov.w	r8, #32
   80e02:	e7d8      	b.n	80db6 <prints+0x4e>
	if (!(pad & PAD_RIGHT)) {
   80e04:	f013 0401 	ands.w	r4, r3, #1
   80e08:	d0f9      	beq.n	80dfe <prints+0x96>
	register int pc = 0, padchar = ' ';
   80e0a:	f04f 0820 	mov.w	r8, #32
   80e0e:	e7ed      	b.n	80dec <prints+0x84>
   80e10:	00081269 	.word	0x00081269

00080e14 <printi>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
   80e14:	b5f0      	push	{r4, r5, r6, r7, lr}
   80e16:	b085      	sub	sp, #20
   80e18:	4607      	mov	r7, r0
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
	register unsigned int u = i;

	if (i == 0) {
   80e1a:	b381      	cbz	r1, 80e7e <printi+0x6a>
   80e1c:	460c      	mov	r4, r1
		print_buf[0] = '0';
		print_buf[1] = '\0';
		return prints (out, print_buf, width, pad);
	}

	if (sg && b == 10 && i < 0) {
   80e1e:	b10b      	cbz	r3, 80e24 <printi+0x10>
   80e20:	2a0a      	cmp	r2, #10
   80e22:	d038      	beq.n	80e96 <printi+0x82>
		neg = 1;
		u = -i;
	}

	s = print_buf + PRINT_BUF_LEN-1;
	*s = '\0';
   80e24:	2300      	movs	r3, #0
   80e26:	f88d 300f 	strb.w	r3, [sp, #15]

	while (u) {
   80e2a:	2600      	movs	r6, #0
   80e2c:	2900      	cmp	r1, #0
   80e2e:	d046      	beq.n	80ebe <printi+0xaa>
   80e30:	f10d 050f 	add.w	r5, sp, #15
		t = u % b;
		if( t >= 10 )
			t += letbase - '0' - 10;
   80e34:	990c      	ldr	r1, [sp, #48]	; 0x30
   80e36:	393a      	subs	r1, #58	; 0x3a
		t = u % b;
   80e38:	fbb4 f3f2 	udiv	r3, r4, r2
   80e3c:	fb02 4313 	mls	r3, r2, r3, r4
		if( t >= 10 )
   80e40:	2b09      	cmp	r3, #9
			t += letbase - '0' - 10;
   80e42:	bfc8      	it	gt
   80e44:	185b      	addgt	r3, r3, r1
		*--s = t + '0';
   80e46:	3330      	adds	r3, #48	; 0x30
   80e48:	f805 3d01 	strb.w	r3, [r5, #-1]!
		u /= b;
   80e4c:	fbb4 f4f2 	udiv	r4, r4, r2
	while (u) {
   80e50:	2c00      	cmp	r4, #0
   80e52:	d1f1      	bne.n	80e38 <printi+0x24>
	}

	if (neg) {
   80e54:	b156      	cbz	r6, 80e6c <printi+0x58>
		if( width && (pad & PAD_ZERO) ) {
   80e56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   80e58:	b11b      	cbz	r3, 80e62 <printi+0x4e>
   80e5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80e5c:	f013 0f02 	tst.w	r3, #2
   80e60:	d125      	bne.n	80eae <printi+0x9a>
			printchar (out, '-');
			++pc;
			--width;
		}
		else {
			*--s = '-';
   80e62:	232d      	movs	r3, #45	; 0x2d
   80e64:	f805 3c01 	strb.w	r3, [r5, #-1]
   80e68:	3d01      	subs	r5, #1
	register int t, neg = 0, pc = 0;
   80e6a:	2600      	movs	r6, #0
		}
	}

	return pc + prints (out, s, width, pad);
   80e6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80e6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   80e70:	4629      	mov	r1, r5
   80e72:	4638      	mov	r0, r7
   80e74:	4c14      	ldr	r4, [pc, #80]	; (80ec8 <printi+0xb4>)
   80e76:	47a0      	blx	r4
   80e78:	4430      	add	r0, r6
}
   80e7a:	b005      	add	sp, #20
   80e7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		print_buf[0] = '0';
   80e7e:	2330      	movs	r3, #48	; 0x30
   80e80:	f88d 3004 	strb.w	r3, [sp, #4]
		print_buf[1] = '\0';
   80e84:	2300      	movs	r3, #0
   80e86:	f88d 3005 	strb.w	r3, [sp, #5]
		return prints (out, print_buf, width, pad);
   80e8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80e8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   80e8e:	a901      	add	r1, sp, #4
   80e90:	4c0d      	ldr	r4, [pc, #52]	; (80ec8 <printi+0xb4>)
   80e92:	47a0      	blx	r4
   80e94:	e7f1      	b.n	80e7a <printi+0x66>
	if (sg && b == 10 && i < 0) {
   80e96:	2900      	cmp	r1, #0
   80e98:	dac4      	bge.n	80e24 <printi+0x10>
		u = -i;
   80e9a:	424c      	negs	r4, r1
	*s = '\0';
   80e9c:	2300      	movs	r3, #0
   80e9e:	f88d 300f 	strb.w	r3, [sp, #15]
	s = print_buf + PRINT_BUF_LEN-1;
   80ea2:	f10d 050f 	add.w	r5, sp, #15
	while (u) {
   80ea6:	2c00      	cmp	r4, #0
   80ea8:	d0d5      	beq.n	80e56 <printi+0x42>
		neg = 1;
   80eaa:	2601      	movs	r6, #1
   80eac:	e7c0      	b.n	80e30 <printi+0x1c>
	(void) uart_putchar(c);  //Send characters to uart
   80eae:	202d      	movs	r0, #45	; 0x2d
   80eb0:	4b06      	ldr	r3, [pc, #24]	; (80ecc <printi+0xb8>)
   80eb2:	4798      	blx	r3
			--width;
   80eb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   80eb6:	3b01      	subs	r3, #1
   80eb8:	930a      	str	r3, [sp, #40]	; 0x28
			++pc;
   80eba:	2601      	movs	r6, #1
			--width;
   80ebc:	e7d6      	b.n	80e6c <printi+0x58>
	register int t, neg = 0, pc = 0;
   80ebe:	461e      	mov	r6, r3
	s = print_buf + PRINT_BUF_LEN-1;
   80ec0:	f10d 050f 	add.w	r5, sp, #15
   80ec4:	e7d2      	b.n	80e6c <printi+0x58>
   80ec6:	bf00      	nop
   80ec8:	00080d69 	.word	0x00080d69
   80ecc:	00081269 	.word	0x00081269

00080ed0 <print>:

static int print( char **out, const char *format, va_list args )
{
   80ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80ed4:	b087      	sub	sp, #28
   80ed6:	4680      	mov	r8, r0
	register int width, pad;
	register int pc = 0;
	char scr[2];

	for (; *format != 0; ++format) {
   80ed8:	780b      	ldrb	r3, [r1, #0]
   80eda:	2b00      	cmp	r3, #0
   80edc:	f000 8094 	beq.w	81008 <print+0x138>
   80ee0:	468b      	mov	fp, r1
   80ee2:	4617      	mov	r7, r2
   80ee4:	2500      	movs	r5, #0
	(void) uart_putchar(c);  //Send characters to uart
   80ee6:	4e4e      	ldr	r6, [pc, #312]	; (81020 <print+0x150>)
			}
			if( *format == 'c' ) {
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
				scr[1] = '\0';
				pc += prints (out, scr, width, pad);
   80ee8:	f8df a13c 	ldr.w	sl, [pc, #316]	; 81028 <print+0x158>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
   80eec:	f8df 913c 	ldr.w	r9, [pc, #316]	; 8102c <print+0x15c>
   80ef0:	e046      	b.n	80f80 <print+0xb0>
			for ( ; *format >= '0' && *format <= '9'; ++format) {
   80ef2:	2200      	movs	r2, #0
   80ef4:	e070      	b.n	80fd8 <print+0x108>
				register char *s = (char *)va_arg( args, int );
   80ef6:	6839      	ldr	r1, [r7, #0]
   80ef8:	3704      	adds	r7, #4
				pc += prints (out, s?s:"(null)", width, pad);
   80efa:	484a      	ldr	r0, [pc, #296]	; (81024 <print+0x154>)
   80efc:	2900      	cmp	r1, #0
   80efe:	bf08      	it	eq
   80f00:	4601      	moveq	r1, r0
   80f02:	4640      	mov	r0, r8
   80f04:	47d0      	blx	sl
   80f06:	4405      	add	r5, r0
				continue;
   80f08:	e035      	b.n	80f76 <print+0xa6>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
   80f0a:	6839      	ldr	r1, [r7, #0]
   80f0c:	3704      	adds	r7, #4
   80f0e:	2061      	movs	r0, #97	; 0x61
   80f10:	9002      	str	r0, [sp, #8]
   80f12:	9301      	str	r3, [sp, #4]
   80f14:	9200      	str	r2, [sp, #0]
   80f16:	2301      	movs	r3, #1
   80f18:	220a      	movs	r2, #10
   80f1a:	4640      	mov	r0, r8
   80f1c:	47c8      	blx	r9
   80f1e:	4405      	add	r5, r0
				continue;
   80f20:	e029      	b.n	80f76 <print+0xa6>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
   80f22:	6839      	ldr	r1, [r7, #0]
   80f24:	3704      	adds	r7, #4
   80f26:	2061      	movs	r0, #97	; 0x61
   80f28:	9002      	str	r0, [sp, #8]
   80f2a:	9301      	str	r3, [sp, #4]
   80f2c:	9200      	str	r2, [sp, #0]
   80f2e:	2300      	movs	r3, #0
   80f30:	2210      	movs	r2, #16
   80f32:	4640      	mov	r0, r8
   80f34:	47c8      	blx	r9
   80f36:	4405      	add	r5, r0
				continue;
   80f38:	e01d      	b.n	80f76 <print+0xa6>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
   80f3a:	6839      	ldr	r1, [r7, #0]
   80f3c:	3704      	adds	r7, #4
   80f3e:	2041      	movs	r0, #65	; 0x41
   80f40:	9002      	str	r0, [sp, #8]
   80f42:	9301      	str	r3, [sp, #4]
   80f44:	9200      	str	r2, [sp, #0]
   80f46:	2300      	movs	r3, #0
   80f48:	2210      	movs	r2, #16
   80f4a:	4640      	mov	r0, r8
   80f4c:	47c8      	blx	r9
   80f4e:	4405      	add	r5, r0
				continue;
   80f50:	e011      	b.n	80f76 <print+0xa6>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
   80f52:	6839      	ldr	r1, [r7, #0]
   80f54:	3704      	adds	r7, #4
   80f56:	2061      	movs	r0, #97	; 0x61
   80f58:	9002      	str	r0, [sp, #8]
   80f5a:	9301      	str	r3, [sp, #4]
   80f5c:	9200      	str	r2, [sp, #0]
   80f5e:	2300      	movs	r3, #0
   80f60:	220a      	movs	r2, #10
   80f62:	4640      	mov	r0, r8
   80f64:	47c8      	blx	r9
   80f66:	4405      	add	r5, r0
				continue;
   80f68:	e005      	b.n	80f76 <print+0xa6>
			++format;
   80f6a:	46a3      	mov	fp, r4
	(void) uart_putchar(c);  //Send characters to uart
   80f6c:	f89b 0000 	ldrb.w	r0, [fp]
   80f70:	47b0      	blx	r6
			}
		}
		else {
		out:
			printchar (out, *format);
			++pc;
   80f72:	3501      	adds	r5, #1
   80f74:	465c      	mov	r4, fp
	for (; *format != 0; ++format) {
   80f76:	f104 0b01 	add.w	fp, r4, #1
   80f7a:	7863      	ldrb	r3, [r4, #1]
   80f7c:	2b00      	cmp	r3, #0
   80f7e:	d044      	beq.n	8100a <print+0x13a>
		if (*format == '%') {
   80f80:	2b25      	cmp	r3, #37	; 0x25
   80f82:	d1f3      	bne.n	80f6c <print+0x9c>
			++format;
   80f84:	f10b 0401 	add.w	r4, fp, #1
			if (*format == '\0') break;
   80f88:	f89b 3001 	ldrb.w	r3, [fp, #1]
   80f8c:	2b00      	cmp	r3, #0
   80f8e:	d03c      	beq.n	8100a <print+0x13a>
			if (*format == '%') goto out;
   80f90:	2b25      	cmp	r3, #37	; 0x25
   80f92:	d0ea      	beq.n	80f6a <print+0x9a>
			if (*format == '-') {
   80f94:	2b2d      	cmp	r3, #45	; 0x2d
				++format;
   80f96:	bf06      	itte	eq
   80f98:	f10b 0402 	addeq.w	r4, fp, #2
				pad = PAD_RIGHT;
   80f9c:	2301      	moveq	r3, #1
			width = pad = 0;
   80f9e:	2300      	movne	r3, #0
			while (*format == '0') {
   80fa0:	7822      	ldrb	r2, [r4, #0]
   80fa2:	2a30      	cmp	r2, #48	; 0x30
   80fa4:	d105      	bne.n	80fb2 <print+0xe2>
				pad |= PAD_ZERO;
   80fa6:	f043 0302 	orr.w	r3, r3, #2
			while (*format == '0') {
   80faa:	f814 2f01 	ldrb.w	r2, [r4, #1]!
   80fae:	2a30      	cmp	r2, #48	; 0x30
   80fb0:	d0f9      	beq.n	80fa6 <print+0xd6>
			for ( ; *format >= '0' && *format <= '9'; ++format) {
   80fb2:	7821      	ldrb	r1, [r4, #0]
   80fb4:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   80fb8:	b2d2      	uxtb	r2, r2
   80fba:	2a09      	cmp	r2, #9
   80fbc:	d899      	bhi.n	80ef2 <print+0x22>
   80fbe:	2200      	movs	r2, #0
				width *= 10;
   80fc0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
				width += *format - '0';
   80fc4:	3930      	subs	r1, #48	; 0x30
   80fc6:	eb01 0242 	add.w	r2, r1, r2, lsl #1
			for ( ; *format >= '0' && *format <= '9'; ++format) {
   80fca:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   80fce:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
   80fd2:	b2c0      	uxtb	r0, r0
   80fd4:	2809      	cmp	r0, #9
   80fd6:	d9f3      	bls.n	80fc0 <print+0xf0>
			if( *format == 's' ) {
   80fd8:	2973      	cmp	r1, #115	; 0x73
   80fda:	d08c      	beq.n	80ef6 <print+0x26>
			if( *format == 'd' ) {
   80fdc:	2964      	cmp	r1, #100	; 0x64
   80fde:	d094      	beq.n	80f0a <print+0x3a>
			if( *format == 'x' ) {
   80fe0:	2978      	cmp	r1, #120	; 0x78
   80fe2:	d09e      	beq.n	80f22 <print+0x52>
			if( *format == 'X' ) {
   80fe4:	2958      	cmp	r1, #88	; 0x58
   80fe6:	d0a8      	beq.n	80f3a <print+0x6a>
			if( *format == 'u' ) {
   80fe8:	2975      	cmp	r1, #117	; 0x75
   80fea:	d0b2      	beq.n	80f52 <print+0x82>
			if( *format == 'c' ) {
   80fec:	2963      	cmp	r1, #99	; 0x63
   80fee:	d1c2      	bne.n	80f76 <print+0xa6>
				scr[0] = (char)va_arg( args, int );
   80ff0:	6839      	ldr	r1, [r7, #0]
   80ff2:	3704      	adds	r7, #4
   80ff4:	f88d 1014 	strb.w	r1, [sp, #20]
				scr[1] = '\0';
   80ff8:	2100      	movs	r1, #0
   80ffa:	f88d 1015 	strb.w	r1, [sp, #21]
				pc += prints (out, scr, width, pad);
   80ffe:	a905      	add	r1, sp, #20
   81000:	4640      	mov	r0, r8
   81002:	47d0      	blx	sl
   81004:	4405      	add	r5, r0
				continue;
   81006:	e7b6      	b.n	80f76 <print+0xa6>
	register int pc = 0;
   81008:	2500      	movs	r5, #0
		}
	}
	if (out) **out = '\0';
   8100a:	f1b8 0f00 	cmp.w	r8, #0
   8100e:	d003      	beq.n	81018 <print+0x148>
   81010:	f8d8 3000 	ldr.w	r3, [r8]
   81014:	2200      	movs	r2, #0
   81016:	701a      	strb	r2, [r3, #0]
	va_end( args );
	return pc;
}
   81018:	4628      	mov	r0, r5
   8101a:	b007      	add	sp, #28
   8101c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81020:	00081269 	.word	0x00081269
   81024:	00081d50 	.word	0x00081d50
   81028:	00080d69 	.word	0x00080d69
   8102c:	00080e15 	.word	0x00080e15

00081030 <printf>:

int printf(const char *format, ...)
{
   81030:	b40f      	push	{r0, r1, r2, r3}
   81032:	b500      	push	{lr}
   81034:	b083      	sub	sp, #12
   81036:	aa04      	add	r2, sp, #16
   81038:	f852 1b04 	ldr.w	r1, [r2], #4
        va_list args;
        
        va_start( args, format );
   8103c:	9201      	str	r2, [sp, #4]
        return print( 0, format, args );
   8103e:	2000      	movs	r0, #0
   81040:	4b03      	ldr	r3, [pc, #12]	; (81050 <printf+0x20>)
   81042:	4798      	blx	r3
}
   81044:	b003      	add	sp, #12
   81046:	f85d eb04 	ldr.w	lr, [sp], #4
   8104a:	b004      	add	sp, #16
   8104c:	4770      	bx	lr
   8104e:	bf00      	nop
   81050:	00080ed1 	.word	0x00080ed1

00081054 <SysTick_init>:
static uint32_t milliseconds;
static uint16_t starttime = 0;
//SysTick_Type* SysTick = SysTick_BASE;

void SysTick_init(){
    SysTick->CTRL = 0b011;
   81054:	4b03      	ldr	r3, [pc, #12]	; (81064 <SysTick_init+0x10>)
   81056:	2203      	movs	r2, #3
   81058:	601a      	str	r2, [r3, #0]
    SysTick->LOAD = 0x2904;
   8105a:	f642 1204 	movw	r2, #10500	; 0x2904
   8105e:	605a      	str	r2, [r3, #4]
   81060:	4770      	bx	lr
   81062:	bf00      	nop
   81064:	e000e010 	.word	0xe000e010

00081068 <SysTick_Handler>:
}

void SysTick_Handler       ( void ){
    milliseconds++;
   81068:	4a02      	ldr	r2, [pc, #8]	; (81074 <SysTick_Handler+0xc>)
   8106a:	6813      	ldr	r3, [r2, #0]
   8106c:	3301      	adds	r3, #1
   8106e:	6013      	str	r3, [r2, #0]
   81070:	4770      	bx	lr
   81072:	bf00      	nop
   81074:	200004ac 	.word	0x200004ac

00081078 <return_milliseconds>:
}

uint32_t return_milliseconds(){
	return milliseconds;
}
   81078:	4b01      	ldr	r3, [pc, #4]	; (81080 <return_milliseconds+0x8>)
   8107a:	6818      	ldr	r0, [r3, #0]
   8107c:	4770      	bx	lr
   8107e:	bf00      	nop
   81080:	200004ac 	.word	0x200004ac

00081084 <return_seconds>:

uint16_t return_seconds(){
  uint16_t secs = (milliseconds/1000);
   81084:	4b03      	ldr	r3, [pc, #12]	; (81094 <return_seconds+0x10>)
   81086:	6818      	ldr	r0, [r3, #0]
   81088:	4b03      	ldr	r3, [pc, #12]	; (81098 <return_seconds+0x14>)
   8108a:	fba3 3000 	umull	r3, r0, r3, r0
  return secs;
}
   8108e:	f3c0 108f 	ubfx	r0, r0, #6, #16
   81092:	4770      	bx	lr
   81094:	200004ac 	.word	0x200004ac
   81098:	10624dd3 	.word	0x10624dd3

0008109c <return_starttime>:

uint16_t return_starttime(){
	return starttime;
}
   8109c:	4b01      	ldr	r3, [pc, #4]	; (810a4 <return_starttime+0x8>)
   8109e:	8898      	ldrh	r0, [r3, #4]
   810a0:	4770      	bx	lr
   810a2:	bf00      	nop
   810a4:	200004ac 	.word	0x200004ac

000810a8 <set_starttime>:

void set_starttime(){
	starttime = return_seconds();
   810a8:	4a03      	ldr	r2, [pc, #12]	; (810b8 <set_starttime+0x10>)
  uint16_t secs = (milliseconds/1000);
   810aa:	6813      	ldr	r3, [r2, #0]
   810ac:	4903      	ldr	r1, [pc, #12]	; (810bc <set_starttime+0x14>)
   810ae:	fba1 1303 	umull	r1, r3, r1, r3
   810b2:	099b      	lsrs	r3, r3, #6
   810b4:	8093      	strh	r3, [r2, #4]
   810b6:	4770      	bx	lr
   810b8:	200004ac 	.word	0x200004ac
   810bc:	10624dd3 	.word	0x10624dd3

000810c0 <return_trigger_time>:
}

uint32_t return_trigger_time(){
	return trigger_time;
}
   810c0:	4b01      	ldr	r3, [pc, #4]	; (810c8 <return_trigger_time+0x8>)
   810c2:	6898      	ldr	r0, [r3, #8]
   810c4:	4770      	bx	lr
   810c6:	bf00      	nop
   810c8:	200004ac 	.word	0x200004ac

000810cc <set_trigger_time>:

void set_trigger_time(){
	trigger_time = return_milliseconds();
   810cc:	4b01      	ldr	r3, [pc, #4]	; (810d4 <set_trigger_time+0x8>)
   810ce:	681a      	ldr	r2, [r3, #0]
   810d0:	609a      	str	r2, [r3, #8]
   810d2:	4770      	bx	lr
   810d4:	200004ac 	.word	0x200004ac

000810d8 <get_controller_runs>:
	
#define DEBUG_INTERRUPT 1

uint8_t get_controller_runs(){
	return ti_counter;
}
   810d8:	4b01      	ldr	r3, [pc, #4]	; (810e0 <get_controller_runs+0x8>)
   810da:	7818      	ldrb	r0, [r3, #0]
   810dc:	4770      	bx	lr
   810de:	bf00      	nop
   810e0:	200004b8 	.word	0x200004b8

000810e4 <increment_controller_runs>:

void increment_controller_runs(){
	ti_counter++;
   810e4:	4a02      	ldr	r2, [pc, #8]	; (810f0 <increment_controller_runs+0xc>)
   810e6:	7813      	ldrb	r3, [r2, #0]
   810e8:	3301      	adds	r3, #1
   810ea:	7013      	strb	r3, [r2, #0]
   810ec:	4770      	bx	lr
   810ee:	bf00      	nop
   810f0:	200004b8 	.word	0x200004b8

000810f4 <reset_controller_runs>:
}

void reset_controller_runs(){
	ti_counter = 0;
   810f4:	2200      	movs	r2, #0
   810f6:	4b01      	ldr	r3, [pc, #4]	; (810fc <reset_controller_runs+0x8>)
   810f8:	701a      	strb	r2, [r3, #0]
   810fa:	4770      	bx	lr
   810fc:	200004b8 	.word	0x200004b8

00081100 <timer_init>:
}

void timer_init(){
		
	PMC->PMC_PCER0 |= PMC_PCER0_PID27; //enable timer counter channel 0
   81100:	4a11      	ldr	r2, [pc, #68]	; (81148 <timer_init+0x48>)
   81102:	6913      	ldr	r3, [r2, #16]
   81104:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
   81108:	6113      	str	r3, [r2, #16]
		
	PIOB->PIO_PDR |= PIO_PDR_P25; //disable io on pinb 25
   8110a:	4b10      	ldr	r3, [pc, #64]	; (8114c <timer_init+0x4c>)
   8110c:	685a      	ldr	r2, [r3, #4]
   8110e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   81112:	605a      	str	r2, [r3, #4]
	PIOB->PIO_ABSR |= PIO_ABSR_P25; //PIO set peripheral b on pinb 25*/
   81114:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   81116:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   8111a:	671a      	str	r2, [r3, #112]	; 0x70

	PIOB->PIO_PDR |= PIO_PDR_P27; //disable io on pinb 27
   8111c:	685a      	ldr	r2, [r3, #4]
   8111e:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
   81122:	605a      	str	r2, [r3, #4]
	PIOB->PIO_ABSR |= PIO_ABSR_P27; //PIO set peripheral b on pinb 27*/
   81124:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   81126:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
   8112a:	671a      	str	r2, [r3, #112]	; 0x70
	
	tc->TC_CHANNEL[0].TC_CMR = 0x0909C000;
   8112c:	f5a3 23c2 	sub.w	r3, r3, #397312	; 0x61000
   81130:	4a07      	ldr	r2, [pc, #28]	; (81150 <timer_init+0x50>)
   81132:	605a      	str	r2, [r3, #4]
	tc->TC_CHANNEL[0].TC_RC = 0x000CD140;
   81134:	4a07      	ldr	r2, [pc, #28]	; (81154 <timer_init+0x54>)
   81136:	61da      	str	r2, [r3, #28]
	
	
	
	tc->TC_CHANNEL[0].TC_CCR = 0x00000001; //enables the clock
   81138:	2201      	movs	r2, #1
   8113a:	601a      	str	r2, [r3, #0]
	tc->TC_CHANNEL[0].TC_CCR |= 0x1 << 2;
   8113c:	681a      	ldr	r2, [r3, #0]
   8113e:	f042 0204 	orr.w	r2, r2, #4
   81142:	601a      	str	r2, [r3, #0]
   81144:	4770      	bx	lr
   81146:	bf00      	nop
   81148:	400e0600 	.word	0x400e0600
   8114c:	400e1000 	.word	0x400e1000
   81150:	0909c000 	.word	0x0909c000
   81154:	000cd140 	.word	0x000cd140

00081158 <timer_change_duty>:
	}
	if(dutyCycle > 100){
		dutyCycle = 100;
	}
	
	tc->TC_CHANNEL[0].TC_RA = 0x000CD140 - (0xA410 + 0x1A4*dutyCycle); // TC_RA - (min_value + dutyCycle*1prosentOfDifference)
   81158:	2864      	cmp	r0, #100	; 0x64
   8115a:	bf28      	it	cs
   8115c:	2064      	movcs	r0, #100	; 0x64
   8115e:	4b05      	ldr	r3, [pc, #20]	; (81174 <timer_change_duty+0x1c>)
   81160:	fb03 f000 	mul.w	r0, r3, r0
   81164:	f500 2042 	add.w	r0, r0, #794624	; 0xc2000
   81168:	f500 6053 	add.w	r0, r0, #3376	; 0xd30
   8116c:	4b02      	ldr	r3, [pc, #8]	; (81178 <timer_change_duty+0x20>)
   8116e:	6158      	str	r0, [r3, #20]
   81170:	4770      	bx	lr
   81172:	bf00      	nop
   81174:	fffffe5c 	.word	0xfffffe5c
   81178:	40080000 	.word	0x40080000

0008117c <TC2_Handler>:
	int a = tc->TC_CHANNEL[1].TC_SR; // funker uten?!
	NVIC_ClearPendingIRQ(ID_TC1);
	ti_counter++;
}*/

void TC2_Handler( void ){
   8117c:	b508      	push	{r3, lr}
	
	
	printf("wtrffffff\n\r");
   8117e:	4806      	ldr	r0, [pc, #24]	; (81198 <TC2_Handler+0x1c>)
   81180:	4b06      	ldr	r3, [pc, #24]	; (8119c <TC2_Handler+0x20>)
   81182:	4798      	blx	r3
	int a = tc->TC_CHANNEL[2].TC_SR; // funker uten?!
   81184:	4b06      	ldr	r3, [pc, #24]	; (811a0 <TC2_Handler+0x24>)
   81186:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   8118a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   8118e:	4b05      	ldr	r3, [pc, #20]	; (811a4 <TC2_Handler+0x28>)
   81190:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   81194:	bd08      	pop	{r3, pc}
   81196:	bf00      	nop
   81198:	00081d58 	.word	0x00081d58
   8119c:	00081031 	.word	0x00081031
   811a0:	40080000 	.word	0x40080000
   811a4:	e000e100 	.word	0xe000e100

000811a8 <init_ch1_PI>:
}

void init_ch1_PI(){
	
	
	PMC->PMC_PCER0 |= PMC_PCER0_PID28; //enable timer counter channel 1
   811a8:	4a11      	ldr	r2, [pc, #68]	; (811f0 <init_ch1_PI+0x48>)
   811aa:	6913      	ldr	r3, [r2, #16]
   811ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   811b0:	6113      	str	r3, [r2, #16]
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   811b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   811b6:	4b0f      	ldr	r3, [pc, #60]	; (811f4 <init_ch1_PI+0x4c>)
   811b8:	601a      	str	r2, [r3, #0]
	
	NVIC_EnableIRQ(ID_TC1);
	
	PIOB->PIO_PDR |= PIO_PDR_P0; //disable io on pinb 0
   811ba:	4b0f      	ldr	r3, [pc, #60]	; (811f8 <init_ch1_PI+0x50>)
   811bc:	685a      	ldr	r2, [r3, #4]
   811be:	f042 0201 	orr.w	r2, r2, #1
   811c2:	605a      	str	r2, [r3, #4]
	PIOB->PIO_ABSR |= PIO_ABSR_P0; //PIO set peripheral b on pinb 0*/
   811c4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   811c6:	f042 0201 	orr.w	r2, r2, #1
   811ca:	671a      	str	r2, [r3, #112]	; 0x70
	
	tc->TC_CHANNEL[1].TC_CMR = 0x0009C000;
   811cc:	f5a3 23c2 	sub.w	r3, r3, #397312	; 0x61000
   811d0:	f44f 221c 	mov.w	r2, #638976	; 0x9c000
   811d4:	645a      	str	r2, [r3, #68]	; 0x44
	tc->TC_CHANNEL[1].TC_RC = 0x000CD140;
   811d6:	4a09      	ldr	r2, [pc, #36]	; (811fc <init_ch1_PI+0x54>)
   811d8:	65da      	str	r2, [r3, #92]	; 0x5c
	
	tc->TC_CHANNEL[1].TC_IER |= TC_IER_CPCS; // enable interrupt on compare with RC
   811da:	6e5a      	ldr	r2, [r3, #100]	; 0x64
   811dc:	f042 0210 	orr.w	r2, r2, #16
   811e0:	665a      	str	r2, [r3, #100]	; 0x64
	
	tc->TC_CHANNEL[1].TC_CCR = 0x00000001; //enables the clock
   811e2:	2201      	movs	r2, #1
   811e4:	641a      	str	r2, [r3, #64]	; 0x40
	tc->TC_CHANNEL[1].TC_CCR |= 0x1 << 2;
   811e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   811e8:	f042 0204 	orr.w	r2, r2, #4
   811ec:	641a      	str	r2, [r3, #64]	; 0x40
   811ee:	4770      	bx	lr
   811f0:	400e0600 	.word	0x400e0600
   811f4:	e000e100 	.word	0xe000e100
   811f8:	400e1000 	.word	0x400e1000
   811fc:	000cd140 	.word	0x000cd140

00081200 <configure_uart>:
	uint32_t ul_sr;

/*
Initialize UART ring buffer as empty
*/
rx_buffer.head=0;
   81200:	4b16      	ldr	r3, [pc, #88]	; (8125c <configure_uart+0x5c>)
   81202:	2200      	movs	r2, #0
   81204:	701a      	strb	r2, [r3, #0]
rx_buffer.tail=0;
   81206:	705a      	strb	r2, [r3, #1]
/*
Initialize UART communication
*/
	// Pin configuration
	// Disable interrupts on Uart receive (URXD) and transmit (UTXD) pins
	PIOA->PIO_IDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   81208:	4b15      	ldr	r3, [pc, #84]	; (81260 <configure_uart+0x60>)
   8120a:	f44f 7140 	mov.w	r1, #768	; 0x300
   8120e:	6459      	str	r1, [r3, #68]	; 0x44

	// Disable the Parallel IO (PIO) of the URXD and UTXD pins so that the peripheral controller can use them
	PIOA->PIO_PDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   81210:	6059      	str	r1, [r3, #4]

	// Read current peripheral AB select register and set the UTXD and URXD pins to 0 (UART is connected as peripheral A)
	ul_sr = PIOA->PIO_ABSR;
   81212:	6f1a      	ldr	r2, [r3, #112]	; 0x70
	PIOA->PIO_ABSR &= ~(PIO_PA8A_URXD | PIO_PA9A_UTXD) & ul_sr;
   81214:	6f18      	ldr	r0, [r3, #112]	; 0x70
   81216:	4002      	ands	r2, r0
   81218:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   8121c:	671a      	str	r2, [r3, #112]	; 0x70

	// Enable pull up resistor on URXD and UTXD pin
	PIOA->PIO_PUER = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   8121e:	6659      	str	r1, [r3, #100]	; 0x64

	// Uart configuration
	
	// Enable the peripheral UART controller in Power Management Controller (PMC)
	PMC->PMC_PCER0 = 1 << ID_UART;
   81220:	f44f 7280 	mov.w	r2, #256	; 0x100
   81224:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   81228:	611a      	str	r2, [r3, #16]

	// Reset and disable receiver and transmitter
	UART->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX | UART_CR_RXDIS | UART_CR_TXDIS;
   8122a:	f503 7300 	add.w	r3, r3, #512	; 0x200
   8122e:	21ac      	movs	r1, #172	; 0xac
   81230:	6019      	str	r1, [r3, #0]

	// Set the baudrate
	UART->UART_BRGR = 547; // MCK / 16 * x = BaudRate (write x into UART_BRGR)  
   81232:	f240 2123 	movw	r1, #547	; 0x223
   81236:	6219      	str	r1, [r3, #32]

	// No parity bits
	UART->UART_MR = UART_MR_PAR_NO | UART_MR_CHMODE_NORMAL;	
   81238:	f44f 6100 	mov.w	r1, #2048	; 0x800
   8123c:	6059      	str	r1, [r3, #4]

	// Disable PDC channel
	UART->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   8123e:	f240 2102 	movw	r1, #514	; 0x202
   81242:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120

	// Configure interrupts on receive ready and errors
	UART->UART_IDR = 0xFFFFFFFF;
   81246:	f04f 31ff 	mov.w	r1, #4294967295
   8124a:	60d9      	str	r1, [r3, #12]
	UART->UART_IER = UART_IER_RXRDY | UART_IER_OVRE | UART_IER_FRAME | UART_IER_PARE;
   8124c:	21e1      	movs	r1, #225	; 0xe1
   8124e:	6099      	str	r1, [r3, #8]
   81250:	4904      	ldr	r1, [pc, #16]	; (81264 <configure_uart+0x64>)
   81252:	600a      	str	r2, [r1, #0]

	// Enable UART interrupt in the Nested Vectored Interrupt Controller(NVIC)
	NVIC_EnableIRQ((IRQn_Type) ID_UART);

	// Enable UART receiver and transmitter
	UART->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   81254:	2250      	movs	r2, #80	; 0x50
   81256:	601a      	str	r2, [r3, #0]
   81258:	4770      	bx	lr
   8125a:	bf00      	nop
   8125c:	200004c4 	.word	0x200004c4
   81260:	400e0e00 	.word	0x400e0e00
   81264:	e000e100 	.word	0xe000e100

00081268 <uart_putchar>:
 * \retval Success(0) or failure(1).
 */
int uart_putchar(const uint8_t c)
{
	// Check if the transmitter is ready
	if((UART->UART_SR & UART_SR_TXRDY) != UART_SR_TXRDY)
   81268:	4b07      	ldr	r3, [pc, #28]	; (81288 <uart_putchar+0x20>)
   8126a:	695b      	ldr	r3, [r3, #20]
   8126c:	f013 0f02 	tst.w	r3, #2
   81270:	d008      	beq.n	81284 <uart_putchar+0x1c>
	return 1;

	// Send the character
	UART->UART_THR = c;
   81272:	4b05      	ldr	r3, [pc, #20]	; (81288 <uart_putchar+0x20>)
   81274:	61d8      	str	r0, [r3, #28]
	while(!((UART->UART_SR) & UART_SR_TXEMPTY)); // Wait for the character to be sent, can implement ring buffer to remove the wait
   81276:	461a      	mov	r2, r3
   81278:	6953      	ldr	r3, [r2, #20]
   8127a:	f413 7f00 	tst.w	r3, #512	; 0x200
   8127e:	d0fb      	beq.n	81278 <uart_putchar+0x10>
	return 0;
   81280:	2000      	movs	r0, #0
   81282:	4770      	bx	lr
	return 1;
   81284:	2001      	movs	r0, #1
}
   81286:	4770      	bx	lr
   81288:	400e0800 	.word	0x400e0800

0008128c <UART_Handler>:

void UART_Handler(void)
{
   8128c:	b508      	push	{r3, lr}
	uint32_t status = UART->UART_SR;
   8128e:	4b15      	ldr	r3, [pc, #84]	; (812e4 <UART_Handler+0x58>)
   81290:	695b      	ldr	r3, [r3, #20]
	
	//Reset UART at overflow error and frame error
	if(status & (UART_SR_OVRE | UART_SR_FRAME | UART_SR_PARE))
   81292:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   81296:	d003      	beq.n	812a0 <UART_Handler+0x14>
	{
		UART->UART_CR = UART_CR_RXEN | UART_CR_TXEN | UART_CR_RSTSTA;
   81298:	f44f 71a8 	mov.w	r1, #336	; 0x150
   8129c:	4a11      	ldr	r2, [pc, #68]	; (812e4 <UART_Handler+0x58>)
   8129e:	6011      	str	r1, [r2, #0]
	}
	
	//Check if message is ready to be received
	if(status & UART_SR_RXRDY)
   812a0:	f013 0f01 	tst.w	r3, #1
   812a4:	d012      	beq.n	812cc <UART_Handler+0x40>
	{
		//Check if receive ring buffer is full and 
		if((rx_buffer.tail + 1) % UART_RINGBUFFER_SIZE == rx_buffer.head)
   812a6:	4810      	ldr	r0, [pc, #64]	; (812e8 <UART_Handler+0x5c>)
   812a8:	7842      	ldrb	r2, [r0, #1]
   812aa:	1c53      	adds	r3, r2, #1
   812ac:	4259      	negs	r1, r3
   812ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   812b2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   812b6:	bf58      	it	pl
   812b8:	424b      	negpl	r3, r1
   812ba:	7801      	ldrb	r1, [r0, #0]
   812bc:	428b      	cmp	r3, r1
   812be:	d006      	beq.n	812ce <UART_Handler+0x42>
		{
			printf("ERR: UART RX buffer is full\n\r");
			rx_buffer.data[rx_buffer.tail] = UART->UART_RHR; //Throw away message
			return;
		}
		rx_buffer.data[rx_buffer.tail] = UART->UART_RHR;
   812c0:	4908      	ldr	r1, [pc, #32]	; (812e4 <UART_Handler+0x58>)
   812c2:	6988      	ldr	r0, [r1, #24]
   812c4:	4908      	ldr	r1, [pc, #32]	; (812e8 <UART_Handler+0x5c>)
   812c6:	440a      	add	r2, r1
   812c8:	7090      	strb	r0, [r2, #2]
		rx_buffer.tail = (rx_buffer.tail + 1) % UART_RINGBUFFER_SIZE;
   812ca:	704b      	strb	r3, [r1, #1]
   812cc:	bd08      	pop	{r3, pc}
			printf("ERR: UART RX buffer is full\n\r");
   812ce:	4807      	ldr	r0, [pc, #28]	; (812ec <UART_Handler+0x60>)
   812d0:	4b07      	ldr	r3, [pc, #28]	; (812f0 <UART_Handler+0x64>)
   812d2:	4798      	blx	r3
			rx_buffer.data[rx_buffer.tail] = UART->UART_RHR; //Throw away message
   812d4:	4b03      	ldr	r3, [pc, #12]	; (812e4 <UART_Handler+0x58>)
   812d6:	699a      	ldr	r2, [r3, #24]
   812d8:	4b03      	ldr	r3, [pc, #12]	; (812e8 <UART_Handler+0x5c>)
   812da:	7859      	ldrb	r1, [r3, #1]
   812dc:	440b      	add	r3, r1
   812de:	709a      	strb	r2, [r3, #2]
			return;
   812e0:	bd08      	pop	{r3, pc}
   812e2:	bf00      	nop
   812e4:	400e0800 	.word	0x400e0800
   812e8:	200004c4 	.word	0x200004c4
   812ec:	00081d64 	.word	0x00081d64
   812f0:	00081031 	.word	0x00081031

000812f4 <__aeabi_drsub>:
   812f4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   812f8:	e002      	b.n	81300 <__adddf3>
   812fa:	bf00      	nop

000812fc <__aeabi_dsub>:
   812fc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00081300 <__adddf3>:
   81300:	b530      	push	{r4, r5, lr}
   81302:	ea4f 0441 	mov.w	r4, r1, lsl #1
   81306:	ea4f 0543 	mov.w	r5, r3, lsl #1
   8130a:	ea94 0f05 	teq	r4, r5
   8130e:	bf08      	it	eq
   81310:	ea90 0f02 	teqeq	r0, r2
   81314:	bf1f      	itttt	ne
   81316:	ea54 0c00 	orrsne.w	ip, r4, r0
   8131a:	ea55 0c02 	orrsne.w	ip, r5, r2
   8131e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   81322:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   81326:	f000 80e2 	beq.w	814ee <__adddf3+0x1ee>
   8132a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   8132e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   81332:	bfb8      	it	lt
   81334:	426d      	neglt	r5, r5
   81336:	dd0c      	ble.n	81352 <__adddf3+0x52>
   81338:	442c      	add	r4, r5
   8133a:	ea80 0202 	eor.w	r2, r0, r2
   8133e:	ea81 0303 	eor.w	r3, r1, r3
   81342:	ea82 0000 	eor.w	r0, r2, r0
   81346:	ea83 0101 	eor.w	r1, r3, r1
   8134a:	ea80 0202 	eor.w	r2, r0, r2
   8134e:	ea81 0303 	eor.w	r3, r1, r3
   81352:	2d36      	cmp	r5, #54	; 0x36
   81354:	bf88      	it	hi
   81356:	bd30      	pophi	{r4, r5, pc}
   81358:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8135c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   81360:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   81364:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   81368:	d002      	beq.n	81370 <__adddf3+0x70>
   8136a:	4240      	negs	r0, r0
   8136c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   81370:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   81374:	ea4f 3303 	mov.w	r3, r3, lsl #12
   81378:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   8137c:	d002      	beq.n	81384 <__adddf3+0x84>
   8137e:	4252      	negs	r2, r2
   81380:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   81384:	ea94 0f05 	teq	r4, r5
   81388:	f000 80a7 	beq.w	814da <__adddf3+0x1da>
   8138c:	f1a4 0401 	sub.w	r4, r4, #1
   81390:	f1d5 0e20 	rsbs	lr, r5, #32
   81394:	db0d      	blt.n	813b2 <__adddf3+0xb2>
   81396:	fa02 fc0e 	lsl.w	ip, r2, lr
   8139a:	fa22 f205 	lsr.w	r2, r2, r5
   8139e:	1880      	adds	r0, r0, r2
   813a0:	f141 0100 	adc.w	r1, r1, #0
   813a4:	fa03 f20e 	lsl.w	r2, r3, lr
   813a8:	1880      	adds	r0, r0, r2
   813aa:	fa43 f305 	asr.w	r3, r3, r5
   813ae:	4159      	adcs	r1, r3
   813b0:	e00e      	b.n	813d0 <__adddf3+0xd0>
   813b2:	f1a5 0520 	sub.w	r5, r5, #32
   813b6:	f10e 0e20 	add.w	lr, lr, #32
   813ba:	2a01      	cmp	r2, #1
   813bc:	fa03 fc0e 	lsl.w	ip, r3, lr
   813c0:	bf28      	it	cs
   813c2:	f04c 0c02 	orrcs.w	ip, ip, #2
   813c6:	fa43 f305 	asr.w	r3, r3, r5
   813ca:	18c0      	adds	r0, r0, r3
   813cc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   813d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   813d4:	d507      	bpl.n	813e6 <__adddf3+0xe6>
   813d6:	f04f 0e00 	mov.w	lr, #0
   813da:	f1dc 0c00 	rsbs	ip, ip, #0
   813de:	eb7e 0000 	sbcs.w	r0, lr, r0
   813e2:	eb6e 0101 	sbc.w	r1, lr, r1
   813e6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   813ea:	d31b      	bcc.n	81424 <__adddf3+0x124>
   813ec:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   813f0:	d30c      	bcc.n	8140c <__adddf3+0x10c>
   813f2:	0849      	lsrs	r1, r1, #1
   813f4:	ea5f 0030 	movs.w	r0, r0, rrx
   813f8:	ea4f 0c3c 	mov.w	ip, ip, rrx
   813fc:	f104 0401 	add.w	r4, r4, #1
   81400:	ea4f 5244 	mov.w	r2, r4, lsl #21
   81404:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   81408:	f080 809a 	bcs.w	81540 <__adddf3+0x240>
   8140c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   81410:	bf08      	it	eq
   81412:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   81416:	f150 0000 	adcs.w	r0, r0, #0
   8141a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8141e:	ea41 0105 	orr.w	r1, r1, r5
   81422:	bd30      	pop	{r4, r5, pc}
   81424:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   81428:	4140      	adcs	r0, r0
   8142a:	eb41 0101 	adc.w	r1, r1, r1
   8142e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   81432:	f1a4 0401 	sub.w	r4, r4, #1
   81436:	d1e9      	bne.n	8140c <__adddf3+0x10c>
   81438:	f091 0f00 	teq	r1, #0
   8143c:	bf04      	itt	eq
   8143e:	4601      	moveq	r1, r0
   81440:	2000      	moveq	r0, #0
   81442:	fab1 f381 	clz	r3, r1
   81446:	bf08      	it	eq
   81448:	3320      	addeq	r3, #32
   8144a:	f1a3 030b 	sub.w	r3, r3, #11
   8144e:	f1b3 0220 	subs.w	r2, r3, #32
   81452:	da0c      	bge.n	8146e <__adddf3+0x16e>
   81454:	320c      	adds	r2, #12
   81456:	dd08      	ble.n	8146a <__adddf3+0x16a>
   81458:	f102 0c14 	add.w	ip, r2, #20
   8145c:	f1c2 020c 	rsb	r2, r2, #12
   81460:	fa01 f00c 	lsl.w	r0, r1, ip
   81464:	fa21 f102 	lsr.w	r1, r1, r2
   81468:	e00c      	b.n	81484 <__adddf3+0x184>
   8146a:	f102 0214 	add.w	r2, r2, #20
   8146e:	bfd8      	it	le
   81470:	f1c2 0c20 	rsble	ip, r2, #32
   81474:	fa01 f102 	lsl.w	r1, r1, r2
   81478:	fa20 fc0c 	lsr.w	ip, r0, ip
   8147c:	bfdc      	itt	le
   8147e:	ea41 010c 	orrle.w	r1, r1, ip
   81482:	4090      	lslle	r0, r2
   81484:	1ae4      	subs	r4, r4, r3
   81486:	bfa2      	ittt	ge
   81488:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   8148c:	4329      	orrge	r1, r5
   8148e:	bd30      	popge	{r4, r5, pc}
   81490:	ea6f 0404 	mvn.w	r4, r4
   81494:	3c1f      	subs	r4, #31
   81496:	da1c      	bge.n	814d2 <__adddf3+0x1d2>
   81498:	340c      	adds	r4, #12
   8149a:	dc0e      	bgt.n	814ba <__adddf3+0x1ba>
   8149c:	f104 0414 	add.w	r4, r4, #20
   814a0:	f1c4 0220 	rsb	r2, r4, #32
   814a4:	fa20 f004 	lsr.w	r0, r0, r4
   814a8:	fa01 f302 	lsl.w	r3, r1, r2
   814ac:	ea40 0003 	orr.w	r0, r0, r3
   814b0:	fa21 f304 	lsr.w	r3, r1, r4
   814b4:	ea45 0103 	orr.w	r1, r5, r3
   814b8:	bd30      	pop	{r4, r5, pc}
   814ba:	f1c4 040c 	rsb	r4, r4, #12
   814be:	f1c4 0220 	rsb	r2, r4, #32
   814c2:	fa20 f002 	lsr.w	r0, r0, r2
   814c6:	fa01 f304 	lsl.w	r3, r1, r4
   814ca:	ea40 0003 	orr.w	r0, r0, r3
   814ce:	4629      	mov	r1, r5
   814d0:	bd30      	pop	{r4, r5, pc}
   814d2:	fa21 f004 	lsr.w	r0, r1, r4
   814d6:	4629      	mov	r1, r5
   814d8:	bd30      	pop	{r4, r5, pc}
   814da:	f094 0f00 	teq	r4, #0
   814de:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   814e2:	bf06      	itte	eq
   814e4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   814e8:	3401      	addeq	r4, #1
   814ea:	3d01      	subne	r5, #1
   814ec:	e74e      	b.n	8138c <__adddf3+0x8c>
   814ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   814f2:	bf18      	it	ne
   814f4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   814f8:	d029      	beq.n	8154e <__adddf3+0x24e>
   814fa:	ea94 0f05 	teq	r4, r5
   814fe:	bf08      	it	eq
   81500:	ea90 0f02 	teqeq	r0, r2
   81504:	d005      	beq.n	81512 <__adddf3+0x212>
   81506:	ea54 0c00 	orrs.w	ip, r4, r0
   8150a:	bf04      	itt	eq
   8150c:	4619      	moveq	r1, r3
   8150e:	4610      	moveq	r0, r2
   81510:	bd30      	pop	{r4, r5, pc}
   81512:	ea91 0f03 	teq	r1, r3
   81516:	bf1e      	ittt	ne
   81518:	2100      	movne	r1, #0
   8151a:	2000      	movne	r0, #0
   8151c:	bd30      	popne	{r4, r5, pc}
   8151e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   81522:	d105      	bne.n	81530 <__adddf3+0x230>
   81524:	0040      	lsls	r0, r0, #1
   81526:	4149      	adcs	r1, r1
   81528:	bf28      	it	cs
   8152a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   8152e:	bd30      	pop	{r4, r5, pc}
   81530:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   81534:	bf3c      	itt	cc
   81536:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   8153a:	bd30      	popcc	{r4, r5, pc}
   8153c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   81540:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   81544:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   81548:	f04f 0000 	mov.w	r0, #0
   8154c:	bd30      	pop	{r4, r5, pc}
   8154e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   81552:	bf1a      	itte	ne
   81554:	4619      	movne	r1, r3
   81556:	4610      	movne	r0, r2
   81558:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   8155c:	bf1c      	itt	ne
   8155e:	460b      	movne	r3, r1
   81560:	4602      	movne	r2, r0
   81562:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   81566:	bf06      	itte	eq
   81568:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   8156c:	ea91 0f03 	teqeq	r1, r3
   81570:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   81574:	bd30      	pop	{r4, r5, pc}
   81576:	bf00      	nop

00081578 <__aeabi_ui2d>:
   81578:	f090 0f00 	teq	r0, #0
   8157c:	bf04      	itt	eq
   8157e:	2100      	moveq	r1, #0
   81580:	4770      	bxeq	lr
   81582:	b530      	push	{r4, r5, lr}
   81584:	f44f 6480 	mov.w	r4, #1024	; 0x400
   81588:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8158c:	f04f 0500 	mov.w	r5, #0
   81590:	f04f 0100 	mov.w	r1, #0
   81594:	e750      	b.n	81438 <__adddf3+0x138>
   81596:	bf00      	nop

00081598 <__aeabi_i2d>:
   81598:	f090 0f00 	teq	r0, #0
   8159c:	bf04      	itt	eq
   8159e:	2100      	moveq	r1, #0
   815a0:	4770      	bxeq	lr
   815a2:	b530      	push	{r4, r5, lr}
   815a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   815a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   815ac:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   815b0:	bf48      	it	mi
   815b2:	4240      	negmi	r0, r0
   815b4:	f04f 0100 	mov.w	r1, #0
   815b8:	e73e      	b.n	81438 <__adddf3+0x138>
   815ba:	bf00      	nop

000815bc <__aeabi_f2d>:
   815bc:	0042      	lsls	r2, r0, #1
   815be:	ea4f 01e2 	mov.w	r1, r2, asr #3
   815c2:	ea4f 0131 	mov.w	r1, r1, rrx
   815c6:	ea4f 7002 	mov.w	r0, r2, lsl #28
   815ca:	bf1f      	itttt	ne
   815cc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   815d0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   815d4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   815d8:	4770      	bxne	lr
   815da:	f092 0f00 	teq	r2, #0
   815de:	bf14      	ite	ne
   815e0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   815e4:	4770      	bxeq	lr
   815e6:	b530      	push	{r4, r5, lr}
   815e8:	f44f 7460 	mov.w	r4, #896	; 0x380
   815ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   815f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   815f4:	e720      	b.n	81438 <__adddf3+0x138>
   815f6:	bf00      	nop

000815f8 <__aeabi_ul2d>:
   815f8:	ea50 0201 	orrs.w	r2, r0, r1
   815fc:	bf08      	it	eq
   815fe:	4770      	bxeq	lr
   81600:	b530      	push	{r4, r5, lr}
   81602:	f04f 0500 	mov.w	r5, #0
   81606:	e00a      	b.n	8161e <__aeabi_l2d+0x16>

00081608 <__aeabi_l2d>:
   81608:	ea50 0201 	orrs.w	r2, r0, r1
   8160c:	bf08      	it	eq
   8160e:	4770      	bxeq	lr
   81610:	b530      	push	{r4, r5, lr}
   81612:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   81616:	d502      	bpl.n	8161e <__aeabi_l2d+0x16>
   81618:	4240      	negs	r0, r0
   8161a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8161e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   81622:	f104 0432 	add.w	r4, r4, #50	; 0x32
   81626:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   8162a:	f43f aedc 	beq.w	813e6 <__adddf3+0xe6>
   8162e:	f04f 0203 	mov.w	r2, #3
   81632:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   81636:	bf18      	it	ne
   81638:	3203      	addne	r2, #3
   8163a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8163e:	bf18      	it	ne
   81640:	3203      	addne	r2, #3
   81642:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   81646:	f1c2 0320 	rsb	r3, r2, #32
   8164a:	fa00 fc03 	lsl.w	ip, r0, r3
   8164e:	fa20 f002 	lsr.w	r0, r0, r2
   81652:	fa01 fe03 	lsl.w	lr, r1, r3
   81656:	ea40 000e 	orr.w	r0, r0, lr
   8165a:	fa21 f102 	lsr.w	r1, r1, r2
   8165e:	4414      	add	r4, r2
   81660:	e6c1      	b.n	813e6 <__adddf3+0xe6>
   81662:	bf00      	nop

00081664 <__aeabi_dmul>:
   81664:	b570      	push	{r4, r5, r6, lr}
   81666:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8166a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8166e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   81672:	bf1d      	ittte	ne
   81674:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   81678:	ea94 0f0c 	teqne	r4, ip
   8167c:	ea95 0f0c 	teqne	r5, ip
   81680:	f000 f8de 	bleq	81840 <__aeabi_dmul+0x1dc>
   81684:	442c      	add	r4, r5
   81686:	ea81 0603 	eor.w	r6, r1, r3
   8168a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   8168e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   81692:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   81696:	bf18      	it	ne
   81698:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   8169c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   816a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   816a4:	d038      	beq.n	81718 <__aeabi_dmul+0xb4>
   816a6:	fba0 ce02 	umull	ip, lr, r0, r2
   816aa:	f04f 0500 	mov.w	r5, #0
   816ae:	fbe1 e502 	umlal	lr, r5, r1, r2
   816b2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   816b6:	fbe0 e503 	umlal	lr, r5, r0, r3
   816ba:	f04f 0600 	mov.w	r6, #0
   816be:	fbe1 5603 	umlal	r5, r6, r1, r3
   816c2:	f09c 0f00 	teq	ip, #0
   816c6:	bf18      	it	ne
   816c8:	f04e 0e01 	orrne.w	lr, lr, #1
   816cc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   816d0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   816d4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   816d8:	d204      	bcs.n	816e4 <__aeabi_dmul+0x80>
   816da:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   816de:	416d      	adcs	r5, r5
   816e0:	eb46 0606 	adc.w	r6, r6, r6
   816e4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   816e8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   816ec:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   816f0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   816f4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   816f8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   816fc:	bf88      	it	hi
   816fe:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   81702:	d81e      	bhi.n	81742 <__aeabi_dmul+0xde>
   81704:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   81708:	bf08      	it	eq
   8170a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   8170e:	f150 0000 	adcs.w	r0, r0, #0
   81712:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   81716:	bd70      	pop	{r4, r5, r6, pc}
   81718:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   8171c:	ea46 0101 	orr.w	r1, r6, r1
   81720:	ea40 0002 	orr.w	r0, r0, r2
   81724:	ea81 0103 	eor.w	r1, r1, r3
   81728:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   8172c:	bfc2      	ittt	gt
   8172e:	ebd4 050c 	rsbsgt	r5, r4, ip
   81732:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   81736:	bd70      	popgt	{r4, r5, r6, pc}
   81738:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8173c:	f04f 0e00 	mov.w	lr, #0
   81740:	3c01      	subs	r4, #1
   81742:	f300 80ab 	bgt.w	8189c <__aeabi_dmul+0x238>
   81746:	f114 0f36 	cmn.w	r4, #54	; 0x36
   8174a:	bfde      	ittt	le
   8174c:	2000      	movle	r0, #0
   8174e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   81752:	bd70      	pople	{r4, r5, r6, pc}
   81754:	f1c4 0400 	rsb	r4, r4, #0
   81758:	3c20      	subs	r4, #32
   8175a:	da35      	bge.n	817c8 <__aeabi_dmul+0x164>
   8175c:	340c      	adds	r4, #12
   8175e:	dc1b      	bgt.n	81798 <__aeabi_dmul+0x134>
   81760:	f104 0414 	add.w	r4, r4, #20
   81764:	f1c4 0520 	rsb	r5, r4, #32
   81768:	fa00 f305 	lsl.w	r3, r0, r5
   8176c:	fa20 f004 	lsr.w	r0, r0, r4
   81770:	fa01 f205 	lsl.w	r2, r1, r5
   81774:	ea40 0002 	orr.w	r0, r0, r2
   81778:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   8177c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   81780:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   81784:	fa21 f604 	lsr.w	r6, r1, r4
   81788:	eb42 0106 	adc.w	r1, r2, r6
   8178c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   81790:	bf08      	it	eq
   81792:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   81796:	bd70      	pop	{r4, r5, r6, pc}
   81798:	f1c4 040c 	rsb	r4, r4, #12
   8179c:	f1c4 0520 	rsb	r5, r4, #32
   817a0:	fa00 f304 	lsl.w	r3, r0, r4
   817a4:	fa20 f005 	lsr.w	r0, r0, r5
   817a8:	fa01 f204 	lsl.w	r2, r1, r4
   817ac:	ea40 0002 	orr.w	r0, r0, r2
   817b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   817b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   817b8:	f141 0100 	adc.w	r1, r1, #0
   817bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   817c0:	bf08      	it	eq
   817c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   817c6:	bd70      	pop	{r4, r5, r6, pc}
   817c8:	f1c4 0520 	rsb	r5, r4, #32
   817cc:	fa00 f205 	lsl.w	r2, r0, r5
   817d0:	ea4e 0e02 	orr.w	lr, lr, r2
   817d4:	fa20 f304 	lsr.w	r3, r0, r4
   817d8:	fa01 f205 	lsl.w	r2, r1, r5
   817dc:	ea43 0302 	orr.w	r3, r3, r2
   817e0:	fa21 f004 	lsr.w	r0, r1, r4
   817e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   817e8:	fa21 f204 	lsr.w	r2, r1, r4
   817ec:	ea20 0002 	bic.w	r0, r0, r2
   817f0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   817f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   817f8:	bf08      	it	eq
   817fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   817fe:	bd70      	pop	{r4, r5, r6, pc}
   81800:	f094 0f00 	teq	r4, #0
   81804:	d10f      	bne.n	81826 <__aeabi_dmul+0x1c2>
   81806:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   8180a:	0040      	lsls	r0, r0, #1
   8180c:	eb41 0101 	adc.w	r1, r1, r1
   81810:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   81814:	bf08      	it	eq
   81816:	3c01      	subeq	r4, #1
   81818:	d0f7      	beq.n	8180a <__aeabi_dmul+0x1a6>
   8181a:	ea41 0106 	orr.w	r1, r1, r6
   8181e:	f095 0f00 	teq	r5, #0
   81822:	bf18      	it	ne
   81824:	4770      	bxne	lr
   81826:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   8182a:	0052      	lsls	r2, r2, #1
   8182c:	eb43 0303 	adc.w	r3, r3, r3
   81830:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   81834:	bf08      	it	eq
   81836:	3d01      	subeq	r5, #1
   81838:	d0f7      	beq.n	8182a <__aeabi_dmul+0x1c6>
   8183a:	ea43 0306 	orr.w	r3, r3, r6
   8183e:	4770      	bx	lr
   81840:	ea94 0f0c 	teq	r4, ip
   81844:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   81848:	bf18      	it	ne
   8184a:	ea95 0f0c 	teqne	r5, ip
   8184e:	d00c      	beq.n	8186a <__aeabi_dmul+0x206>
   81850:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   81854:	bf18      	it	ne
   81856:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8185a:	d1d1      	bne.n	81800 <__aeabi_dmul+0x19c>
   8185c:	ea81 0103 	eor.w	r1, r1, r3
   81860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   81864:	f04f 0000 	mov.w	r0, #0
   81868:	bd70      	pop	{r4, r5, r6, pc}
   8186a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8186e:	bf06      	itte	eq
   81870:	4610      	moveq	r0, r2
   81872:	4619      	moveq	r1, r3
   81874:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   81878:	d019      	beq.n	818ae <__aeabi_dmul+0x24a>
   8187a:	ea94 0f0c 	teq	r4, ip
   8187e:	d102      	bne.n	81886 <__aeabi_dmul+0x222>
   81880:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   81884:	d113      	bne.n	818ae <__aeabi_dmul+0x24a>
   81886:	ea95 0f0c 	teq	r5, ip
   8188a:	d105      	bne.n	81898 <__aeabi_dmul+0x234>
   8188c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   81890:	bf1c      	itt	ne
   81892:	4610      	movne	r0, r2
   81894:	4619      	movne	r1, r3
   81896:	d10a      	bne.n	818ae <__aeabi_dmul+0x24a>
   81898:	ea81 0103 	eor.w	r1, r1, r3
   8189c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   818a0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   818a4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   818a8:	f04f 0000 	mov.w	r0, #0
   818ac:	bd70      	pop	{r4, r5, r6, pc}
   818ae:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   818b2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   818b6:	bd70      	pop	{r4, r5, r6, pc}

000818b8 <__aeabi_ddiv>:
   818b8:	b570      	push	{r4, r5, r6, lr}
   818ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
   818be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   818c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   818c6:	bf1d      	ittte	ne
   818c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   818cc:	ea94 0f0c 	teqne	r4, ip
   818d0:	ea95 0f0c 	teqne	r5, ip
   818d4:	f000 f8a7 	bleq	81a26 <__aeabi_ddiv+0x16e>
   818d8:	eba4 0405 	sub.w	r4, r4, r5
   818dc:	ea81 0e03 	eor.w	lr, r1, r3
   818e0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   818e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   818e8:	f000 8088 	beq.w	819fc <__aeabi_ddiv+0x144>
   818ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
   818f0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   818f4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   818f8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   818fc:	ea4f 2202 	mov.w	r2, r2, lsl #8
   81900:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   81904:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   81908:	ea4f 2600 	mov.w	r6, r0, lsl #8
   8190c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   81910:	429d      	cmp	r5, r3
   81912:	bf08      	it	eq
   81914:	4296      	cmpeq	r6, r2
   81916:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   8191a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   8191e:	d202      	bcs.n	81926 <__aeabi_ddiv+0x6e>
   81920:	085b      	lsrs	r3, r3, #1
   81922:	ea4f 0232 	mov.w	r2, r2, rrx
   81926:	1ab6      	subs	r6, r6, r2
   81928:	eb65 0503 	sbc.w	r5, r5, r3
   8192c:	085b      	lsrs	r3, r3, #1
   8192e:	ea4f 0232 	mov.w	r2, r2, rrx
   81932:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   81936:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   8193a:	ebb6 0e02 	subs.w	lr, r6, r2
   8193e:	eb75 0e03 	sbcs.w	lr, r5, r3
   81942:	bf22      	ittt	cs
   81944:	1ab6      	subcs	r6, r6, r2
   81946:	4675      	movcs	r5, lr
   81948:	ea40 000c 	orrcs.w	r0, r0, ip
   8194c:	085b      	lsrs	r3, r3, #1
   8194e:	ea4f 0232 	mov.w	r2, r2, rrx
   81952:	ebb6 0e02 	subs.w	lr, r6, r2
   81956:	eb75 0e03 	sbcs.w	lr, r5, r3
   8195a:	bf22      	ittt	cs
   8195c:	1ab6      	subcs	r6, r6, r2
   8195e:	4675      	movcs	r5, lr
   81960:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   81964:	085b      	lsrs	r3, r3, #1
   81966:	ea4f 0232 	mov.w	r2, r2, rrx
   8196a:	ebb6 0e02 	subs.w	lr, r6, r2
   8196e:	eb75 0e03 	sbcs.w	lr, r5, r3
   81972:	bf22      	ittt	cs
   81974:	1ab6      	subcs	r6, r6, r2
   81976:	4675      	movcs	r5, lr
   81978:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   8197c:	085b      	lsrs	r3, r3, #1
   8197e:	ea4f 0232 	mov.w	r2, r2, rrx
   81982:	ebb6 0e02 	subs.w	lr, r6, r2
   81986:	eb75 0e03 	sbcs.w	lr, r5, r3
   8198a:	bf22      	ittt	cs
   8198c:	1ab6      	subcs	r6, r6, r2
   8198e:	4675      	movcs	r5, lr
   81990:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   81994:	ea55 0e06 	orrs.w	lr, r5, r6
   81998:	d018      	beq.n	819cc <__aeabi_ddiv+0x114>
   8199a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   8199e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   819a2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   819a6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   819aa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   819ae:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   819b2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   819b6:	d1c0      	bne.n	8193a <__aeabi_ddiv+0x82>
   819b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   819bc:	d10b      	bne.n	819d6 <__aeabi_ddiv+0x11e>
   819be:	ea41 0100 	orr.w	r1, r1, r0
   819c2:	f04f 0000 	mov.w	r0, #0
   819c6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   819ca:	e7b6      	b.n	8193a <__aeabi_ddiv+0x82>
   819cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   819d0:	bf04      	itt	eq
   819d2:	4301      	orreq	r1, r0
   819d4:	2000      	moveq	r0, #0
   819d6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   819da:	bf88      	it	hi
   819dc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   819e0:	f63f aeaf 	bhi.w	81742 <__aeabi_dmul+0xde>
   819e4:	ebb5 0c03 	subs.w	ip, r5, r3
   819e8:	bf04      	itt	eq
   819ea:	ebb6 0c02 	subseq.w	ip, r6, r2
   819ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   819f2:	f150 0000 	adcs.w	r0, r0, #0
   819f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   819fa:	bd70      	pop	{r4, r5, r6, pc}
   819fc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   81a00:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   81a04:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   81a08:	bfc2      	ittt	gt
   81a0a:	ebd4 050c 	rsbsgt	r5, r4, ip
   81a0e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   81a12:	bd70      	popgt	{r4, r5, r6, pc}
   81a14:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   81a18:	f04f 0e00 	mov.w	lr, #0
   81a1c:	3c01      	subs	r4, #1
   81a1e:	e690      	b.n	81742 <__aeabi_dmul+0xde>
   81a20:	ea45 0e06 	orr.w	lr, r5, r6
   81a24:	e68d      	b.n	81742 <__aeabi_dmul+0xde>
   81a26:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   81a2a:	ea94 0f0c 	teq	r4, ip
   81a2e:	bf08      	it	eq
   81a30:	ea95 0f0c 	teqeq	r5, ip
   81a34:	f43f af3b 	beq.w	818ae <__aeabi_dmul+0x24a>
   81a38:	ea94 0f0c 	teq	r4, ip
   81a3c:	d10a      	bne.n	81a54 <__aeabi_ddiv+0x19c>
   81a3e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   81a42:	f47f af34 	bne.w	818ae <__aeabi_dmul+0x24a>
   81a46:	ea95 0f0c 	teq	r5, ip
   81a4a:	f47f af25 	bne.w	81898 <__aeabi_dmul+0x234>
   81a4e:	4610      	mov	r0, r2
   81a50:	4619      	mov	r1, r3
   81a52:	e72c      	b.n	818ae <__aeabi_dmul+0x24a>
   81a54:	ea95 0f0c 	teq	r5, ip
   81a58:	d106      	bne.n	81a68 <__aeabi_ddiv+0x1b0>
   81a5a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   81a5e:	f43f aefd 	beq.w	8185c <__aeabi_dmul+0x1f8>
   81a62:	4610      	mov	r0, r2
   81a64:	4619      	mov	r1, r3
   81a66:	e722      	b.n	818ae <__aeabi_dmul+0x24a>
   81a68:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   81a6c:	bf18      	it	ne
   81a6e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   81a72:	f47f aec5 	bne.w	81800 <__aeabi_dmul+0x19c>
   81a76:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   81a7a:	f47f af0d 	bne.w	81898 <__aeabi_dmul+0x234>
   81a7e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   81a82:	f47f aeeb 	bne.w	8185c <__aeabi_dmul+0x1f8>
   81a86:	e712      	b.n	818ae <__aeabi_dmul+0x24a>

00081a88 <__aeabi_d2iz>:
   81a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
   81a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   81a90:	d215      	bcs.n	81abe <__aeabi_d2iz+0x36>
   81a92:	d511      	bpl.n	81ab8 <__aeabi_d2iz+0x30>
   81a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   81a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   81a9c:	d912      	bls.n	81ac4 <__aeabi_d2iz+0x3c>
   81a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   81aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   81aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   81aaa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   81aae:	fa23 f002 	lsr.w	r0, r3, r2
   81ab2:	bf18      	it	ne
   81ab4:	4240      	negne	r0, r0
   81ab6:	4770      	bx	lr
   81ab8:	f04f 0000 	mov.w	r0, #0
   81abc:	4770      	bx	lr
   81abe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   81ac2:	d105      	bne.n	81ad0 <__aeabi_d2iz+0x48>
   81ac4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   81ac8:	bf08      	it	eq
   81aca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   81ace:	4770      	bx	lr
   81ad0:	f04f 0000 	mov.w	r0, #0
   81ad4:	4770      	bx	lr
   81ad6:	bf00      	nop

00081ad8 <__aeabi_d2uiz>:
   81ad8:	004a      	lsls	r2, r1, #1
   81ada:	d211      	bcs.n	81b00 <__aeabi_d2uiz+0x28>
   81adc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   81ae0:	d211      	bcs.n	81b06 <__aeabi_d2uiz+0x2e>
   81ae2:	d50d      	bpl.n	81b00 <__aeabi_d2uiz+0x28>
   81ae4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   81ae8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   81aec:	d40e      	bmi.n	81b0c <__aeabi_d2uiz+0x34>
   81aee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   81af2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   81af6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   81afa:	fa23 f002 	lsr.w	r0, r3, r2
   81afe:	4770      	bx	lr
   81b00:	f04f 0000 	mov.w	r0, #0
   81b04:	4770      	bx	lr
   81b06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   81b0a:	d102      	bne.n	81b12 <__aeabi_d2uiz+0x3a>
   81b0c:	f04f 30ff 	mov.w	r0, #4294967295
   81b10:	4770      	bx	lr
   81b12:	f04f 0000 	mov.w	r0, #0
   81b16:	4770      	bx	lr

00081b18 <__libc_init_array>:
   81b18:	b570      	push	{r4, r5, r6, lr}
   81b1a:	4e0f      	ldr	r6, [pc, #60]	; (81b58 <__libc_init_array+0x40>)
   81b1c:	4d0f      	ldr	r5, [pc, #60]	; (81b5c <__libc_init_array+0x44>)
   81b1e:	1b76      	subs	r6, r6, r5
   81b20:	10b6      	asrs	r6, r6, #2
   81b22:	bf18      	it	ne
   81b24:	2400      	movne	r4, #0
   81b26:	d005      	beq.n	81b34 <__libc_init_array+0x1c>
   81b28:	3401      	adds	r4, #1
   81b2a:	f855 3b04 	ldr.w	r3, [r5], #4
   81b2e:	4798      	blx	r3
   81b30:	42a6      	cmp	r6, r4
   81b32:	d1f9      	bne.n	81b28 <__libc_init_array+0x10>
   81b34:	4e0a      	ldr	r6, [pc, #40]	; (81b60 <__libc_init_array+0x48>)
   81b36:	4d0b      	ldr	r5, [pc, #44]	; (81b64 <__libc_init_array+0x4c>)
   81b38:	f000 f926 	bl	81d88 <_init>
   81b3c:	1b76      	subs	r6, r6, r5
   81b3e:	10b6      	asrs	r6, r6, #2
   81b40:	bf18      	it	ne
   81b42:	2400      	movne	r4, #0
   81b44:	d006      	beq.n	81b54 <__libc_init_array+0x3c>
   81b46:	3401      	adds	r4, #1
   81b48:	f855 3b04 	ldr.w	r3, [r5], #4
   81b4c:	4798      	blx	r3
   81b4e:	42a6      	cmp	r6, r4
   81b50:	d1f9      	bne.n	81b46 <__libc_init_array+0x2e>
   81b52:	bd70      	pop	{r4, r5, r6, pc}
   81b54:	bd70      	pop	{r4, r5, r6, pc}
   81b56:	bf00      	nop
   81b58:	00081d94 	.word	0x00081d94
   81b5c:	00081d94 	.word	0x00081d94
   81b60:	00081d9c 	.word	0x00081d9c
   81b64:	00081d94 	.word	0x00081d94

00081b68 <register_fini>:
   81b68:	4b02      	ldr	r3, [pc, #8]	; (81b74 <register_fini+0xc>)
   81b6a:	b113      	cbz	r3, 81b72 <register_fini+0xa>
   81b6c:	4802      	ldr	r0, [pc, #8]	; (81b78 <register_fini+0x10>)
   81b6e:	f000 b805 	b.w	81b7c <atexit>
   81b72:	4770      	bx	lr
   81b74:	00000000 	.word	0x00000000
   81b78:	00081b89 	.word	0x00081b89

00081b7c <atexit>:
   81b7c:	2300      	movs	r3, #0
   81b7e:	4601      	mov	r1, r0
   81b80:	461a      	mov	r2, r3
   81b82:	4618      	mov	r0, r3
   81b84:	f000 b81e 	b.w	81bc4 <__register_exitproc>

00081b88 <__libc_fini_array>:
   81b88:	b538      	push	{r3, r4, r5, lr}
   81b8a:	4c0a      	ldr	r4, [pc, #40]	; (81bb4 <__libc_fini_array+0x2c>)
   81b8c:	4d0a      	ldr	r5, [pc, #40]	; (81bb8 <__libc_fini_array+0x30>)
   81b8e:	1b64      	subs	r4, r4, r5
   81b90:	10a4      	asrs	r4, r4, #2
   81b92:	d00a      	beq.n	81baa <__libc_fini_array+0x22>
   81b94:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   81b98:	3b01      	subs	r3, #1
   81b9a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   81b9e:	3c01      	subs	r4, #1
   81ba0:	f855 3904 	ldr.w	r3, [r5], #-4
   81ba4:	4798      	blx	r3
   81ba6:	2c00      	cmp	r4, #0
   81ba8:	d1f9      	bne.n	81b9e <__libc_fini_array+0x16>
   81baa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   81bae:	f000 b8f5 	b.w	81d9c <_fini>
   81bb2:	bf00      	nop
   81bb4:	00081dac 	.word	0x00081dac
   81bb8:	00081da8 	.word	0x00081da8

00081bbc <__retarget_lock_acquire_recursive>:
   81bbc:	4770      	bx	lr
   81bbe:	bf00      	nop

00081bc0 <__retarget_lock_release_recursive>:
   81bc0:	4770      	bx	lr
   81bc2:	bf00      	nop

00081bc4 <__register_exitproc>:
   81bc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   81bc8:	4d2c      	ldr	r5, [pc, #176]	; (81c7c <__register_exitproc+0xb8>)
   81bca:	4606      	mov	r6, r0
   81bcc:	6828      	ldr	r0, [r5, #0]
   81bce:	4698      	mov	r8, r3
   81bd0:	460f      	mov	r7, r1
   81bd2:	4691      	mov	r9, r2
   81bd4:	f7ff fff2 	bl	81bbc <__retarget_lock_acquire_recursive>
   81bd8:	4b29      	ldr	r3, [pc, #164]	; (81c80 <__register_exitproc+0xbc>)
   81bda:	681c      	ldr	r4, [r3, #0]
   81bdc:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   81be0:	2b00      	cmp	r3, #0
   81be2:	d03e      	beq.n	81c62 <__register_exitproc+0x9e>
   81be4:	685a      	ldr	r2, [r3, #4]
   81be6:	2a1f      	cmp	r2, #31
   81be8:	dc1c      	bgt.n	81c24 <__register_exitproc+0x60>
   81bea:	f102 0e01 	add.w	lr, r2, #1
   81bee:	b176      	cbz	r6, 81c0e <__register_exitproc+0x4a>
   81bf0:	2101      	movs	r1, #1
   81bf2:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   81bf6:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   81bfa:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   81bfe:	4091      	lsls	r1, r2
   81c00:	4308      	orrs	r0, r1
   81c02:	2e02      	cmp	r6, #2
   81c04:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   81c08:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   81c0c:	d023      	beq.n	81c56 <__register_exitproc+0x92>
   81c0e:	3202      	adds	r2, #2
   81c10:	f8c3 e004 	str.w	lr, [r3, #4]
   81c14:	6828      	ldr	r0, [r5, #0]
   81c16:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   81c1a:	f7ff ffd1 	bl	81bc0 <__retarget_lock_release_recursive>
   81c1e:	2000      	movs	r0, #0
   81c20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   81c24:	4b17      	ldr	r3, [pc, #92]	; (81c84 <__register_exitproc+0xc0>)
   81c26:	b30b      	cbz	r3, 81c6c <__register_exitproc+0xa8>
   81c28:	f44f 70c8 	mov.w	r0, #400	; 0x190
   81c2c:	f3af 8000 	nop.w
   81c30:	4603      	mov	r3, r0
   81c32:	b1d8      	cbz	r0, 81c6c <__register_exitproc+0xa8>
   81c34:	2000      	movs	r0, #0
   81c36:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   81c3a:	f04f 0e01 	mov.w	lr, #1
   81c3e:	6058      	str	r0, [r3, #4]
   81c40:	6019      	str	r1, [r3, #0]
   81c42:	4602      	mov	r2, r0
   81c44:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   81c48:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   81c4c:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   81c50:	2e00      	cmp	r6, #0
   81c52:	d0dc      	beq.n	81c0e <__register_exitproc+0x4a>
   81c54:	e7cc      	b.n	81bf0 <__register_exitproc+0x2c>
   81c56:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   81c5a:	4301      	orrs	r1, r0
   81c5c:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   81c60:	e7d5      	b.n	81c0e <__register_exitproc+0x4a>
   81c62:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   81c66:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   81c6a:	e7bb      	b.n	81be4 <__register_exitproc+0x20>
   81c6c:	6828      	ldr	r0, [r5, #0]
   81c6e:	f7ff ffa7 	bl	81bc0 <__retarget_lock_release_recursive>
   81c72:	f04f 30ff 	mov.w	r0, #4294967295
   81c76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   81c7a:	bf00      	nop
   81c7c:	20000450 	.word	0x20000450
   81c80:	00081d84 	.word	0x00081d84
   81c84:	00000000 	.word	0x00000000
   81c88:	304e4143 	.word	0x304e4143
   81c8c:	73656d20 	.word	0x73656d20
   81c90:	65676173 	.word	0x65676173
   81c94:	72726120 	.word	0x72726120
   81c98:	64657669 	.word	0x64657669
   81c9c:	206e6920 	.word	0x206e6920
   81ca0:	2d6e6f6e 	.word	0x2d6e6f6e
   81ca4:	64657375 	.word	0x64657375
   81ca8:	69616d20 	.word	0x69616d20
   81cac:	786f626c 	.word	0x786f626c
   81cb0:	00000d0a 	.word	0x00000d0a
   81cb4:	7373656d 	.word	0x7373656d
   81cb8:	20656761 	.word	0x20656761
   81cbc:	203a6469 	.word	0x203a6469
   81cc0:	0d0a6425 	.word	0x0d0a6425
   81cc4:	00000000 	.word	0x00000000
   81cc8:	7373656d 	.word	0x7373656d
   81ccc:	20656761 	.word	0x20656761
   81cd0:	61746164 	.word	0x61746164
   81cd4:	6e656c20 	.word	0x6e656c20
   81cd8:	3a687467 	.word	0x3a687467
   81cdc:	0a642520 	.word	0x0a642520
   81ce0:	0000000d 	.word	0x0000000d
   81ce4:	00206425 	.word	0x00206425
   81ce8:	7373656d 	.word	0x7373656d
   81cec:	20656761 	.word	0x20656761
   81cf0:	203a6469 	.word	0x203a6469
   81cf4:	0d207825 	.word	0x0d207825
   81cf8:	0000000a 	.word	0x0000000a
   81cfc:	7373656d 	.word	0x7373656d
   81d00:	20656761 	.word	0x20656761
   81d04:	676e656c 	.word	0x676e656c
   81d08:	203a6874 	.word	0x203a6874
   81d0c:	0d207825 	.word	0x0d207825
   81d10:	0000000a 	.word	0x0000000a
   81d14:	7373656d 	.word	0x7373656d
   81d18:	20656761 	.word	0x20656761
   81d1c:	61746164 	.word	0x61746164
   81d20:	6425203a 	.word	0x6425203a
   81d24:	000a0d20 	.word	0x000a0d20
   81d28:	6f636e45 	.word	0x6f636e45
   81d2c:	20726564 	.word	0x20726564
   81d30:	20202020 	.word	0x20202020
   81d34:	20202020 	.word	0x20202020
   81d38:	20202020 	.word	0x20202020
   81d3c:	61746164 	.word	0x61746164
   81d40:	7825203a 	.word	0x7825203a
   81d44:	000d0a20 	.word	0x000d0a20
   81d48:	6c6c6568 	.word	0x6c6c6568
   81d4c:	000d0a6f 	.word	0x000d0a6f
   81d50:	6c756e28 	.word	0x6c756e28
   81d54:	0000296c 	.word	0x0000296c
   81d58:	66727477 	.word	0x66727477
   81d5c:	66666666 	.word	0x66666666
   81d60:	000d0a66 	.word	0x000d0a66
   81d64:	3a525245 	.word	0x3a525245
   81d68:	52415520 	.word	0x52415520
   81d6c:	58522054 	.word	0x58522054
   81d70:	66756220 	.word	0x66756220
   81d74:	20726566 	.word	0x20726566
   81d78:	66207369 	.word	0x66207369
   81d7c:	0a6c6c75 	.word	0x0a6c6c75
   81d80:	0000000d 	.word	0x0000000d

00081d84 <_global_impure_ptr>:
   81d84:	20000028                                (.. 

00081d88 <_init>:
   81d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81d8a:	bf00      	nop
   81d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   81d8e:	bc08      	pop	{r3}
   81d90:	469e      	mov	lr, r3
   81d92:	4770      	bx	lr

00081d94 <__init_array_start>:
   81d94:	00081b69 	.word	0x00081b69

00081d98 <__frame_dummy_init_array_entry>:
   81d98:	00080119                                ....

00081d9c <_fini>:
   81d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81d9e:	bf00      	nop
   81da0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   81da2:	bc08      	pop	{r3}
   81da4:	469e      	mov	lr, r3
   81da6:	4770      	bx	lr

00081da8 <__fini_array_start>:
   81da8:	000800f5 	.word	0x000800f5
