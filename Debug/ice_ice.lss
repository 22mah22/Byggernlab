
ice_ice.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000009a  00800100  000011be  00001252  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001b  0080019a  0080019a  000012ec  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000012ec  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001348  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000230  00000000  00000000  00001384  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002a57  00000000  00000000  000015b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011ff  00000000  00000000  0000400b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000130d  00000000  00000000  0000520a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000578  00000000  00000000  00006518  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000997  00000000  00000000  00006a90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001a3e  00000000  00000000  00007427  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002e8  00000000  00000000  00008e65  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
       4:	0c 94 57 00 	jmp	0xae	; 0xae <__vector_1>
       8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
       c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
      70:	11 24       	eor	r1, r1
      72:	1f be       	out	0x3f, r1	; 63
      74:	cf ef       	ldi	r28, 0xFF	; 255
      76:	d4 e0       	ldi	r29, 0x04	; 4
      78:	de bf       	out	0x3e, r29	; 62
      7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
      7c:	11 e0       	ldi	r17, 0x01	; 1
      7e:	a0 e0       	ldi	r26, 0x00	; 0
      80:	b1 e0       	ldi	r27, 0x01	; 1
      82:	ee eb       	ldi	r30, 0xBE	; 190
      84:	f1 e1       	ldi	r31, 0x11	; 17
      86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
      88:	05 90       	lpm	r0, Z+
      8a:	0d 92       	st	X+, r0
      8c:	aa 39       	cpi	r26, 0x9A	; 154
      8e:	b1 07       	cpc	r27, r17
      90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
      92:	21 e0       	ldi	r18, 0x01	; 1
      94:	aa e9       	ldi	r26, 0x9A	; 154
      96:	b1 e0       	ldi	r27, 0x01	; 1
      98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
      9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
      9c:	a5 3b       	cpi	r26, 0xB5	; 181
      9e:	b2 07       	cpc	r27, r18
      a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
      a2:	0e 94 96 02 	call	0x52c	; 0x52c <main>
      a6:	0c 94 dd 08 	jmp	0x11ba	; 0x11ba <_exit>

000000aa <__bad_interrupt>:
      aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <__vector_1>:

uint8_t buffer_number = 0;

volatile uint8_t can_flag = 0;

ISR(INT0_vect){
      ae:	1f 92       	push	r1
      b0:	0f 92       	push	r0
      b2:	0f b6       	in	r0, 0x3f	; 63
      b4:	0f 92       	push	r0
      b6:	11 24       	eor	r1, r1
      b8:	8f 93       	push	r24
	can_flag = 1;
      ba:	81 e0       	ldi	r24, 0x01	; 1
      bc:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <can_flag>
}
      c0:	8f 91       	pop	r24
      c2:	0f 90       	pop	r0
      c4:	0f be       	out	0x3f, r0	; 63
      c6:	0f 90       	pop	r0
      c8:	1f 90       	pop	r1
      ca:	18 95       	reti

000000cc <can_interrupted>:

uint8_t can_interrupted(){
	if (can_flag){	
      cc:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <can_flag>
      d0:	88 23       	and	r24, r24
      d2:	19 f0       	breq	.+6      	; 0xda <can_interrupted+0xe>
		can_flag = 0;
      d4:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <can_flag>
		return 1;
      d8:	81 e0       	ldi	r24, 0x01	; 1
	}
	return 0;
}
      da:	08 95       	ret

000000dc <can_interrupt_enable>:

void can_interrupt_enable(){
	cli();
      dc:	f8 94       	cli
	set_bit(MCUCR, ISC01);
      de:	85 b7       	in	r24, 0x35	; 53
      e0:	82 60       	ori	r24, 0x02	; 2
      e2:	85 bf       	out	0x35, r24	; 53
	clear_bit(MCUCR, ISC00);
      e4:	85 b7       	in	r24, 0x35	; 53
      e6:	8e 7f       	andi	r24, 0xFE	; 254
      e8:	85 bf       	out	0x35, r24	; 53
	// Enable interrupt on PD2
	set_bit(GICR,INT0);
      ea:	8b b7       	in	r24, 0x3b	; 59
      ec:	80 64       	ori	r24, 0x40	; 64
      ee:	8b bf       	out	0x3b, r24	; 59
	sei();
      f0:	78 94       	sei
      f2:	08 95       	ret

000000f4 <can_init>:
}

void can_init(){
	
	mcp2515_init();
      f4:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <mcp2515_init>
	mcp2515_reset();
      f8:	0e 94 75 01 	call	0x2ea	; 0x2ea <mcp2515_reset>
	mcp2515_bit_modify(MCP_CNF2, 0b10000000, 0x01<<7);	//BTLMODE: Length of PS2 determined by PHSEG2 bits in CNF3
	
	mcp2515_bit_modify(MCP_CNF1, 0b11000000, 0x00<<6);	//SJW: 1*Tq
	mcp2515_bit_modify(MCP_CNF1, 0b00111111, 0x03);*/
	
	mcp2515_write(MCP_CNF3, 0x01); //0x01 // 0b00000010
      fc:	61 e0       	ldi	r22, 0x01	; 1
      fe:	88 e2       	ldi	r24, 0x28	; 40
     100:	0e 94 46 01 	call	0x28c	; 0x28c <mcp2515_write>
	mcp2515_write(MCP_CNF2, 0xb5); //0xb5 // 0b10010010 original
     104:	65 eb       	ldi	r22, 0xB5	; 181
     106:	89 e2       	ldi	r24, 0x29	; 41
     108:	0e 94 46 01 	call	0x28c	; 0x28c <mcp2515_write>
	mcp2515_write(MCP_CNF1, 0x43); //0x43 // 0b01000000
     10c:	63 e4       	ldi	r22, 0x43	; 67
     10e:	8a e2       	ldi	r24, 0x2A	; 42
     110:	0e 94 46 01 	call	0x28c	; 0x28c <mcp2515_write>
	
	mcp2515_bit_modify(MCP_CANINTE, 0b00000011, MCP_RX_INT);
     114:	43 e0       	ldi	r20, 0x03	; 3
     116:	63 e0       	ldi	r22, 0x03	; 3
     118:	8b e2       	ldi	r24, 0x2B	; 43
     11a:	0e 94 5d 01 	call	0x2ba	; 0x2ba <mcp2515_bit_modify>
	
	mcp2515_write(MCP_CANCTRL, MODE_NORMAL);
     11e:	60 e0       	ldi	r22, 0x00	; 0
     120:	8f e0       	ldi	r24, 0x0F	; 15
     122:	0e 94 46 01 	call	0x28c	; 0x28c <mcp2515_write>
     126:	08 95       	ret

00000128 <send_can_msg>:
// 	sei();
	
}


void send_can_msg(can_message *msg){
     128:	0f 93       	push	r16
     12a:	1f 93       	push	r17
     12c:	cf 93       	push	r28
     12e:	8c 01       	movw	r16, r24
		if(buffer_number > 2){
			buffer_number = 0;
		}
	}*/
	
	mcp2515_write(idBufferHighAddress+16*buffer_number, msg->id>>3);
     130:	fc 01       	movw	r30, r24
     132:	60 81       	ld	r22, Z
     134:	71 81       	ldd	r23, Z+1	; 0x01
     136:	76 95       	lsr	r23
     138:	67 95       	ror	r22
     13a:	76 95       	lsr	r23
     13c:	67 95       	ror	r22
     13e:	76 95       	lsr	r23
     140:	67 95       	ror	r22
     142:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <buffer_number>
     146:	82 95       	swap	r24
     148:	80 7f       	andi	r24, 0xF0	; 240
     14a:	8f 5c       	subi	r24, 0xCF	; 207
     14c:	0e 94 46 01 	call	0x28c	; 0x28c <mcp2515_write>
	uint8_t lowbufferval = mcp2515_read(0x32);
     150:	82 e3       	ldi	r24, 0x32	; 50
     152:	0e 94 38 01 	call	0x270	; 0x270 <mcp2515_read>
	
	mcp2515_write(idBufferLowAddress+16*buffer_number, 0x00ff & ((lowbufferval&0b00011111) | (msg->id<<5)));
     156:	f8 01       	movw	r30, r16
     158:	60 81       	ld	r22, Z
     15a:	62 95       	swap	r22
     15c:	66 0f       	add	r22, r22
     15e:	60 7e       	andi	r22, 0xE0	; 224
     160:	8f 71       	andi	r24, 0x1F	; 31
     162:	68 2b       	or	r22, r24
     164:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <buffer_number>
     168:	82 95       	swap	r24
     16a:	80 7f       	andi	r24, 0xF0	; 240
     16c:	8e 5c       	subi	r24, 0xCE	; 206
     16e:	0e 94 46 01 	call	0x28c	; 0x28c <mcp2515_write>
	
	uint8_t regvalue = mcp2515_read(0x35);
     172:	85 e3       	ldi	r24, 0x35	; 53
     174:	0e 94 38 01 	call	0x270	; 0x270 <mcp2515_read>
	mcp2515_write(dataLengthBufferAddress+16*buffer_number, (regvalue&0b11110000) | msg->data_length);
     178:	80 7f       	andi	r24, 0xF0	; 240
     17a:	f8 01       	movw	r30, r16
     17c:	92 81       	ldd	r25, Z+2	; 0x02
     17e:	68 2f       	mov	r22, r24
     180:	69 2b       	or	r22, r25
     182:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <buffer_number>
     186:	82 95       	swap	r24
     188:	80 7f       	andi	r24, 0xF0	; 240
     18a:	8b 5c       	subi	r24, 0xCB	; 203
     18c:	0e 94 46 01 	call	0x28c	; 0x28c <mcp2515_write>
	
	
	for(uint8_t m = 0; m < msg->data_length; m++){
     190:	f8 01       	movw	r30, r16
     192:	82 81       	ldd	r24, Z+2	; 0x02
     194:	88 23       	and	r24, r24
     196:	a9 f0       	breq	.+42     	; 0x1c2 <send_can_msg+0x9a>
     198:	c0 e0       	ldi	r28, 0x00	; 0
		mcp2515_write(dataBufferAddress+m+16*buffer_number, msg->data[m]);
     19a:	f8 01       	movw	r30, r16
     19c:	ec 0f       	add	r30, r28
     19e:	f1 1d       	adc	r31, r1
     1a0:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <buffer_number>
     1a4:	9c 2f       	mov	r25, r28
     1a6:	20 e1       	ldi	r18, 0x10	; 16
     1a8:	82 9f       	mul	r24, r18
     1aa:	90 0d       	add	r25, r0
     1ac:	11 24       	eor	r1, r1
     1ae:	89 2f       	mov	r24, r25
     1b0:	63 81       	ldd	r22, Z+3	; 0x03
     1b2:	8a 5c       	subi	r24, 0xCA	; 202
     1b4:	0e 94 46 01 	call	0x28c	; 0x28c <mcp2515_write>
	
	uint8_t regvalue = mcp2515_read(0x35);
	mcp2515_write(dataLengthBufferAddress+16*buffer_number, (regvalue&0b11110000) | msg->data_length);
	
	
	for(uint8_t m = 0; m < msg->data_length; m++){
     1b8:	cf 5f       	subi	r28, 0xFF	; 255
     1ba:	f8 01       	movw	r30, r16
     1bc:	82 81       	ldd	r24, Z+2	; 0x02
     1be:	c8 17       	cp	r28, r24
     1c0:	60 f3       	brcs	.-40     	; 0x19a <send_can_msg+0x72>
	/*buffer_number += 1;
	if(buffer_number > 2){
		buffer_number = 0;
	}*/
	
	mcp2515_request_to_send(MCP_RTS_TX0+buffer_number);
     1c2:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <buffer_number>
     1c6:	8f 57       	subi	r24, 0x7F	; 127
     1c8:	0e 94 58 01 	call	0x2b0	; 0x2b0 <mcp2515_request_to_send>
	//mcp2515_bit_modify(MCP_TXB0CTRL+16*buffer_number,0b00001000,0b00001000);
	//mcp2515_bit_modify(0x0D,0b00000111,0b00000111);
}
     1cc:	cf 91       	pop	r28
     1ce:	1f 91       	pop	r17
     1d0:	0f 91       	pop	r16
     1d2:	08 95       	ret

000001d4 <receive_can_msg>:

can_message* receive_can_msg(uint8_t buffer_number){
     1d4:	0f 93       	push	r16
     1d6:	1f 93       	push	r17
     1d8:	cf 93       	push	r28
     1da:	df 93       	push	r29
     1dc:	c8 2f       	mov	r28, r24
	uint8_t status = mcp2515_read_status();
     1de:	0e 94 80 01 	call	0x300	; 0x300 <mcp2515_read_status>
	static can_message msg;
	msg.id = 0x00;
     1e2:	0a e9       	ldi	r16, 0x9A	; 154
     1e4:	11 e0       	ldi	r17, 0x01	; 1
     1e6:	f8 01       	movw	r30, r16
     1e8:	11 82       	std	Z+1, r1	; 0x01
     1ea:	10 82       	st	Z, r1
	uint16_t idHigh = mcp2515_read(idBufferHighAddress+16*buffer_number);
     1ec:	c2 95       	swap	r28
     1ee:	c0 7f       	andi	r28, 0xF0	; 240
     1f0:	81 e3       	ldi	r24, 0x31	; 49
     1f2:	8c 0f       	add	r24, r28
     1f4:	0e 94 38 01 	call	0x270	; 0x270 <mcp2515_read>
     1f8:	d8 2f       	mov	r29, r24
	uint16_t idLow = mcp2515_read(idBufferLowAddress+16*buffer_number);
     1fa:	82 e3       	ldi	r24, 0x32	; 50
     1fc:	8c 0f       	add	r24, r28
     1fe:	0e 94 38 01 	call	0x270	; 0x270 <mcp2515_read>
	
	msg.id |= idLow>>5;
	msg.id |= idHigh<<3;
     202:	90 e0       	ldi	r25, 0x00	; 0
     204:	96 95       	lsr	r25
     206:	87 95       	ror	r24
     208:	92 95       	swap	r25
     20a:	82 95       	swap	r24
     20c:	8f 70       	andi	r24, 0x0F	; 15
     20e:	89 27       	eor	r24, r25
     210:	9f 70       	andi	r25, 0x0F	; 15
     212:	89 27       	eor	r24, r25
     214:	2d 2f       	mov	r18, r29
     216:	30 e0       	ldi	r19, 0x00	; 0
     218:	22 0f       	add	r18, r18
     21a:	33 1f       	adc	r19, r19
     21c:	22 0f       	add	r18, r18
     21e:	33 1f       	adc	r19, r19
     220:	22 0f       	add	r18, r18
     222:	33 1f       	adc	r19, r19
     224:	82 2b       	or	r24, r18
     226:	93 2b       	or	r25, r19
     228:	f8 01       	movw	r30, r16
     22a:	20 81       	ld	r18, Z
     22c:	31 81       	ldd	r19, Z+1	; 0x01
     22e:	82 2b       	or	r24, r18
     230:	93 2b       	or	r25, r19
     232:	91 83       	std	Z+1, r25	; 0x01
     234:	80 83       	st	Z, r24
	
	uint8_t length;
	length = 0b00001111 & mcp2515_read(dataLengthBufferAddress);
     236:	85 e3       	ldi	r24, 0x35	; 53
     238:	0e 94 38 01 	call	0x270	; 0x270 <mcp2515_read>
     23c:	8f 70       	andi	r24, 0x0F	; 15
	msg.data_length = length;
     23e:	f8 01       	movw	r30, r16
     240:	82 83       	std	Z+2, r24	; 0x02
	
	for(uint8_t m = 0; m < length; m++){
     242:	88 23       	and	r24, r24
     244:	71 f0       	breq	.+28     	; 0x262 <receive_can_msg+0x8e>
     246:	ca 59       	subi	r28, 0x9A	; 154
     248:	0d e9       	ldi	r16, 0x9D	; 157
     24a:	11 e0       	ldi	r17, 0x01	; 1
     24c:	dc 2f       	mov	r29, r28
     24e:	d8 0f       	add	r29, r24
		//msg.data[m] = mcp2515_read(dataBufferAddress+m+16*buffer_number);
		msg.data[m] = mcp2515_read(0x66+m+16*buffer_number);
     250:	8c 2f       	mov	r24, r28
     252:	0e 94 38 01 	call	0x270	; 0x270 <mcp2515_read>
     256:	f8 01       	movw	r30, r16
     258:	81 93       	st	Z+, r24
     25a:	8f 01       	movw	r16, r30
     25c:	cf 5f       	subi	r28, 0xFF	; 255
	
	uint8_t length;
	length = 0b00001111 & mcp2515_read(dataLengthBufferAddress);
	msg.data_length = length;
	
	for(uint8_t m = 0; m < length; m++){
     25e:	cd 13       	cpse	r28, r29
     260:	f7 cf       	rjmp	.-18     	; 0x250 <receive_can_msg+0x7c>
	}
	
	//flag recieved
	
	return &msg;
}
     262:	8a e9       	ldi	r24, 0x9A	; 154
     264:	91 e0       	ldi	r25, 0x01	; 1
     266:	df 91       	pop	r29
     268:	cf 91       	pop	r28
     26a:	1f 91       	pop	r17
     26c:	0f 91       	pop	r16
     26e:	08 95       	ret

00000270 <mcp2515_read>:
	value = MODE_LOOPBACK; */
	//mcp2515_write(MCP_CANCTRL, MODE_CONFIG); config is default after restart
	
}

uint8_t mcp2515_read(uint8_t address){
     270:	cf 93       	push	r28
     272:	c8 2f       	mov	r28, r24
	uint8_t result;
	
	PORTB &= ~(1<<PB4); //ss
     274:	c4 98       	cbi	0x18, 4	; 24
	spi_write(MCP_READ);
     276:	83 e0       	ldi	r24, 0x03	; 3
     278:	0e 94 8e 01 	call	0x31c	; 0x31c <spi_write>
	spi_write(address);
     27c:	8c 2f       	mov	r24, r28
     27e:	0e 94 8e 01 	call	0x31c	; 0x31c <spi_write>
	result = spi_read();
     282:	0e 94 92 01 	call	0x324	; 0x324 <spi_read>
	
	PORTB |= (1<<PB4); //!ss
     286:	c4 9a       	sbi	0x18, 4	; 24
	
	return result;
}
     288:	cf 91       	pop	r28
     28a:	08 95       	ret

0000028c <mcp2515_write>:
void mcp2515_write(uint8_t address, uint8_t data){
     28c:	cf 93       	push	r28
     28e:	df 93       	push	r29
     290:	d8 2f       	mov	r29, r24
     292:	c6 2f       	mov	r28, r22
	PORTB &= ~(1<<PB4); //slave select
     294:	c4 98       	cbi	0x18, 4	; 24
	
	spi_write(MCP_WRITE);
     296:	82 e0       	ldi	r24, 0x02	; 2
     298:	0e 94 8e 01 	call	0x31c	; 0x31c <spi_write>
	spi_write(address);
     29c:	8d 2f       	mov	r24, r29
     29e:	0e 94 8e 01 	call	0x31c	; 0x31c <spi_write>
	spi_write(data);
     2a2:	8c 2f       	mov	r24, r28
     2a4:	0e 94 8e 01 	call	0x31c	; 0x31c <spi_write>
	
	PORTB |= (1<<PB4); //slave deselect
     2a8:	c4 9a       	sbi	0x18, 4	; 24
}
     2aa:	df 91       	pop	r29
     2ac:	cf 91       	pop	r28
     2ae:	08 95       	ret

000002b0 <mcp2515_request_to_send>:
void mcp2515_request_to_send(uint8_t command){
	PORTB &= ~(1<<PB4);
     2b0:	c4 98       	cbi	0x18, 4	; 24
	
	spi_write(command);
     2b2:	0e 94 8e 01 	call	0x31c	; 0x31c <spi_write>
	
	
	PORTB |= (1<<PB4);
     2b6:	c4 9a       	sbi	0x18, 4	; 24
     2b8:	08 95       	ret

000002ba <mcp2515_bit_modify>:
}
void mcp2515_bit_modify(uint8_t address, uint8_t mask, uint8_t data){
     2ba:	1f 93       	push	r17
     2bc:	cf 93       	push	r28
     2be:	df 93       	push	r29
     2c0:	18 2f       	mov	r17, r24
     2c2:	d6 2f       	mov	r29, r22
     2c4:	c4 2f       	mov	r28, r20
	PORTB &= ~(1<<PB4);
     2c6:	c4 98       	cbi	0x18, 4	; 24
	
	spi_write(MCP_BITMOD);
     2c8:	85 e0       	ldi	r24, 0x05	; 5
     2ca:	0e 94 8e 01 	call	0x31c	; 0x31c <spi_write>
	spi_write(address);
     2ce:	81 2f       	mov	r24, r17
     2d0:	0e 94 8e 01 	call	0x31c	; 0x31c <spi_write>
	spi_write(mask);
     2d4:	8d 2f       	mov	r24, r29
     2d6:	0e 94 8e 01 	call	0x31c	; 0x31c <spi_write>
	spi_write(data);
     2da:	8c 2f       	mov	r24, r28
     2dc:	0e 94 8e 01 	call	0x31c	; 0x31c <spi_write>
	
	PORTB |= (1<<PB4);
     2e0:	c4 9a       	sbi	0x18, 4	; 24
}
     2e2:	df 91       	pop	r29
     2e4:	cf 91       	pop	r28
     2e6:	1f 91       	pop	r17
     2e8:	08 95       	ret

000002ea <mcp2515_reset>:
void mcp2515_reset(){
	PORTB &= ~(1<<PB4);
     2ea:	c4 98       	cbi	0x18, 4	; 24
	
	spi_write(MCP_RESET);
     2ec:	80 ec       	ldi	r24, 0xC0	; 192
     2ee:	0e 94 8e 01 	call	0x31c	; 0x31c <spi_write>
	
	PORTB |= (1<<PB4);
     2f2:	c4 9a       	sbi	0x18, 4	; 24
     2f4:	08 95       	ret

000002f6 <mcp2515_init>:
//MCP_CANINTF to read and clear interupts, need to clear before we can continue transmitting

uint8_t mcp2515_init(){
	uint8_t value;
	
	spi_init();
     2f6:	0e 94 88 01 	call	0x310	; 0x310 <spi_init>
	mcp2515_reset();
     2fa:	0e 94 75 01 	call	0x2ea	; 0x2ea <mcp2515_reset>
	
	/*value = mcp2515_read(MCP_CANCTRL);
	value = MODE_LOOPBACK; */
	//mcp2515_write(MCP_CANCTRL, MODE_CONFIG); config is default after restart
	
}
     2fe:	08 95       	ret

00000300 <mcp2515_read_status>:
	PORTB |= (1<<PB4);
}
uint8_t mcp2515_read_status(){
	uint8_t result;
	
	PORTB &= ~(1<<PB4);
     300:	c4 98       	cbi	0x18, 4	; 24
	
	spi_write(MCP_READ_STATUS);
     302:	80 ea       	ldi	r24, 0xA0	; 160
     304:	0e 94 8e 01 	call	0x31c	; 0x31c <spi_write>
	result = spi_read();
     308:	0e 94 92 01 	call	0x324	; 0x324 <spi_read>
	
	
	PORTB |= (1<<PB4);
     30c:	c4 9a       	sbi	0x18, 4	; 24
	
	return result;
}
     30e:	08 95       	ret

00000310 <spi_init>:
	spi_write(0xf0);
	return SPDR;
}

void spi_init(){
	DDRB = (1<<DDB4)|(1<<DDB5)|(1<<DDB7); //chip select, mosi, clock
     310:	80 eb       	ldi	r24, 0xB0	; 176
     312:	87 bb       	out	0x17, r24	; 23
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
     314:	81 e5       	ldi	r24, 0x51	; 81
     316:	8d b9       	out	0x0d, r24	; 13
	
	PORTB |= 1<<PB4; //cooked from jentene
     318:	c4 9a       	sbi	0x18, 4	; 24
     31a:	08 95       	ret

0000031c <spi_write>:
}

void spi_write(char data){
	SPDR = data;
     31c:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF))){
     31e:	77 9b       	sbis	0x0e, 7	; 14
     320:	fe cf       	rjmp	.-4      	; 0x31e <spi_write+0x2>
		
	}
     322:	08 95       	ret

00000324 <spi_read>:



uint8_t spi_read(){
	
	spi_write(0xf0);
     324:	80 ef       	ldi	r24, 0xF0	; 240
     326:	0e 94 8e 01 	call	0x31c	; 0x31c <spi_write>
	return SPDR;
     32a:	8f b1       	in	r24, 0x0f	; 15
}
     32c:	08 95       	ret

0000032e <calc_offset>:
			return UP;
		}
		return NEUTRAL;
	}
	return WAITING;
}
     32e:	e0 e0       	ldi	r30, 0x00	; 0
     330:	f4 e1       	ldi	r31, 0x14	; 20
     332:	81 e0       	ldi	r24, 0x01	; 1
     334:	80 83       	st	Z, r24
     336:	80 81       	ld	r24, Z
     338:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <x_offset>
     33c:	80 81       	ld	r24, Z
     33e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <y_offset>
     342:	08 95       	ret

00000344 <update_adc_values>:
     344:	0f 93       	push	r16
     346:	1f 93       	push	r17
     348:	cf 93       	push	r28
     34a:	df 93       	push	r29
     34c:	8c 01       	movw	r16, r24
     34e:	eb 01       	movw	r28, r22
     350:	e0 e0       	ldi	r30, 0x00	; 0
     352:	f4 e1       	ldi	r31, 0x14	; 20
     354:	81 e0       	ldi	r24, 0x01	; 1
     356:	80 83       	st	Z, r24
     358:	40 81       	ld	r20, Z
     35a:	20 81       	ld	r18, Z
     35c:	30 81       	ld	r19, Z
     35e:	e0 81       	ld	r30, Z
     360:	a0 91 0b 01 	lds	r26, 0x010B	; 0x80010b <x_offset>
     364:	4a 17       	cp	r20, r26
     366:	98 f0       	brcs	.+38     	; 0x38e <update_adc_values+0x4a>
     368:	b0 e0       	ldi	r27, 0x00	; 0
     36a:	50 e0       	ldi	r21, 0x00	; 0
     36c:	4a 1b       	sub	r20, r26
     36e:	5b 0b       	sbc	r21, r27
     370:	64 e6       	ldi	r22, 0x64	; 100
     372:	64 9f       	mul	r22, r20
     374:	c0 01       	movw	r24, r0
     376:	65 9f       	mul	r22, r21
     378:	90 0d       	add	r25, r0
     37a:	11 24       	eor	r1, r1
     37c:	6f ef       	ldi	r22, 0xFF	; 255
     37e:	70 e0       	ldi	r23, 0x00	; 0
     380:	6a 1b       	sub	r22, r26
     382:	7b 0b       	sbc	r23, r27
     384:	0e 94 52 03 	call	0x6a4	; 0x6a4 <__divmodhi4>
     388:	d8 01       	movw	r26, r16
     38a:	6c 93       	st	X, r22
     38c:	0f c0       	rjmp	.+30     	; 0x3ac <update_adc_values+0x68>
     38e:	6a 2f       	mov	r22, r26
     390:	70 e0       	ldi	r23, 0x00	; 0
     392:	50 e0       	ldi	r21, 0x00	; 0
     394:	46 1b       	sub	r20, r22
     396:	57 0b       	sbc	r21, r23
     398:	f4 e6       	ldi	r31, 0x64	; 100
     39a:	f4 9f       	mul	r31, r20
     39c:	c0 01       	movw	r24, r0
     39e:	f5 9f       	mul	r31, r21
     3a0:	90 0d       	add	r25, r0
     3a2:	11 24       	eor	r1, r1
     3a4:	0e 94 52 03 	call	0x6a4	; 0x6a4 <__divmodhi4>
     3a8:	d8 01       	movw	r26, r16
     3aa:	6c 93       	st	X, r22
     3ac:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <y_offset>
     3b0:	26 17       	cp	r18, r22
     3b2:	b0 f0       	brcs	.+44     	; 0x3e0 <update_adc_values+0x9c>
     3b4:	46 2f       	mov	r20, r22
     3b6:	50 e0       	ldi	r21, 0x00	; 0
     3b8:	62 2f       	mov	r22, r18
     3ba:	70 e0       	ldi	r23, 0x00	; 0
     3bc:	64 1b       	sub	r22, r20
     3be:	75 0b       	sbc	r23, r21
     3c0:	24 e6       	ldi	r18, 0x64	; 100
     3c2:	26 9f       	mul	r18, r22
     3c4:	c0 01       	movw	r24, r0
     3c6:	27 9f       	mul	r18, r23
     3c8:	90 0d       	add	r25, r0
     3ca:	11 24       	eor	r1, r1
     3cc:	6f ef       	ldi	r22, 0xFF	; 255
     3ce:	70 e0       	ldi	r23, 0x00	; 0
     3d0:	64 1b       	sub	r22, r20
     3d2:	75 0b       	sbc	r23, r21
     3d4:	0e 94 52 03 	call	0x6a4	; 0x6a4 <__divmodhi4>
     3d8:	d8 01       	movw	r26, r16
     3da:	11 96       	adiw	r26, 0x01	; 1
     3dc:	6c 93       	st	X, r22
     3de:	10 c0       	rjmp	.+32     	; 0x400 <__LOCK_REGION_LENGTH__>
     3e0:	70 e0       	ldi	r23, 0x00	; 0
     3e2:	42 2f       	mov	r20, r18
     3e4:	50 e0       	ldi	r21, 0x00	; 0
     3e6:	46 1b       	sub	r20, r22
     3e8:	57 0b       	sbc	r21, r23
     3ea:	24 e6       	ldi	r18, 0x64	; 100
     3ec:	24 9f       	mul	r18, r20
     3ee:	c0 01       	movw	r24, r0
     3f0:	25 9f       	mul	r18, r21
     3f2:	90 0d       	add	r25, r0
     3f4:	11 24       	eor	r1, r1
     3f6:	0e 94 52 03 	call	0x6a4	; 0x6a4 <__divmodhi4>
     3fa:	d8 01       	movw	r26, r16
     3fc:	11 96       	adiw	r26, 0x01	; 1
     3fe:	6c 93       	st	X, r22
     400:	24 e6       	ldi	r18, 0x64	; 100
     402:	23 9f       	mul	r18, r19
     404:	c0 01       	movw	r24, r0
     406:	11 24       	eor	r1, r1
     408:	0f ef       	ldi	r16, 0xFF	; 255
     40a:	10 e0       	ldi	r17, 0x00	; 0
     40c:	b8 01       	movw	r22, r16
     40e:	0e 94 52 03 	call	0x6a4	; 0x6a4 <__divmodhi4>
     412:	68 83       	st	Y, r22
     414:	2e 9f       	mul	r18, r30
     416:	c0 01       	movw	r24, r0
     418:	11 24       	eor	r1, r1
     41a:	b8 01       	movw	r22, r16
     41c:	0e 94 52 03 	call	0x6a4	; 0x6a4 <__divmodhi4>
     420:	69 83       	std	Y+1, r22	; 0x01
     422:	df 91       	pop	r29
     424:	cf 91       	pop	r28
     426:	1f 91       	pop	r17
     428:	0f 91       	pop	r16
     42a:	08 95       	ret

0000042c <send_stick_can>:

void send_stick_can(){
     42c:	0f 93       	push	r16
     42e:	1f 93       	push	r17
     430:	cf 93       	push	r28
     432:	df 93       	push	r29
     434:	cd b7       	in	r28, 0x3d	; 61
     436:	de b7       	in	r29, 0x3e	; 62
     438:	2b 97       	sbiw	r28, 0x0b	; 11
     43a:	0f b6       	in	r0, 0x3f	; 63
     43c:	f8 94       	cli
     43e:	de bf       	out	0x3e, r29	; 62
     440:	0f be       	out	0x3f, r0	; 63
     442:	cd bf       	out	0x3d, r28	; 61
	
	update_adc_values(&joystick, &slider);
     444:	67 ea       	ldi	r22, 0xA7	; 167
     446:	71 e0       	ldi	r23, 0x01	; 1
     448:	89 ea       	ldi	r24, 0xA9	; 169
     44a:	91 e0       	ldi	r25, 0x01	; 1
     44c:	0e 94 a2 01 	call	0x344	; 0x344 <update_adc_values>
	
	can_message msgToSend;
	msgToSend.data_length = 8;
     450:	88 e0       	ldi	r24, 0x08	; 8
     452:	8b 83       	std	Y+3, r24	; 0x03
	msgToSend.data[0] = abs(joystick.x_val);
     454:	30 91 a9 01 	lds	r19, 0x01A9	; 0x8001a9 <joystick>
     458:	83 2f       	mov	r24, r19
     45a:	03 2e       	mov	r0, r19
     45c:	00 0c       	add	r0, r0
     45e:	99 0b       	sbc	r25, r25
     460:	99 23       	and	r25, r25
     462:	1c f4       	brge	.+6      	; 0x46a <send_stick_can+0x3e>
     464:	91 95       	neg	r25
     466:	81 95       	neg	r24
     468:	91 09       	sbc	r25, r1
     46a:	8c 83       	std	Y+4, r24	; 0x04
	msgToSend.data[1] = abs(joystick.y_val);
     46c:	20 91 aa 01 	lds	r18, 0x01AA	; 0x8001aa <joystick+0x1>
     470:	82 2f       	mov	r24, r18
     472:	02 2e       	mov	r0, r18
     474:	00 0c       	add	r0, r0
     476:	99 0b       	sbc	r25, r25
     478:	99 23       	and	r25, r25
     47a:	1c f4       	brge	.+6      	; 0x482 <send_stick_can+0x56>
     47c:	91 95       	neg	r25
     47e:	81 95       	neg	r24
     480:	91 09       	sbc	r25, r1
     482:	8d 83       	std	Y+5, r24	; 0x05
	msgToSend.data[2] = PINB & (1<< PINB1); // button pressed?
     484:	86 b3       	in	r24, 0x16	; 22
     486:	82 70       	andi	r24, 0x02	; 2
     488:	8e 83       	std	Y+6, r24	; 0x06
	
	uint8_t x_positive = (joystick.x_val < 0) ? 0x00 : 0x11;
     48a:	33 23       	and	r19, r19
     48c:	14 f0       	brlt	.+4      	; 0x492 <send_stick_can+0x66>
     48e:	81 e1       	ldi	r24, 0x11	; 17
     490:	01 c0       	rjmp	.+2      	; 0x494 <send_stick_can+0x68>
     492:	80 e0       	ldi	r24, 0x00	; 0
	uint8_t y_positive = (joystick.y_val < 0) ? 0x00 : 0x11;
     494:	22 23       	and	r18, r18
     496:	14 f0       	brlt	.+4      	; 0x49c <send_stick_can+0x70>
     498:	91 e1       	ldi	r25, 0x11	; 17
     49a:	01 c0       	rjmp	.+2      	; 0x49e <send_stick_can+0x72>
     49c:	90 e0       	ldi	r25, 0x00	; 0
	
	msgToSend.data[3] = x_positive;
     49e:	8f 83       	std	Y+7, r24	; 0x07
	msgToSend.data[4] = y_positive;
     4a0:	98 87       	std	Y+8, r25	; 0x08
	msgToSend.data[5] = slider.l_val;
     4a2:	e7 ea       	ldi	r30, 0xA7	; 167
     4a4:	f1 e0       	ldi	r31, 0x01	; 1
     4a6:	80 81       	ld	r24, Z
     4a8:	89 87       	std	Y+9, r24	; 0x09
	msgToSend.data[6] = slider.r_val;
     4aa:	81 81       	ldd	r24, Z+1	; 0x01
     4ac:	8a 87       	std	Y+10, r24	; 0x0a
	msgToSend.data[7] = (PIND & (1<< PIND4)) >> 3 | (PIND & (1<< PIND5)) >> 5; //left and right button on second least significant and least significant
     4ae:	20 b3       	in	r18, 0x10	; 16
     4b0:	90 b3       	in	r25, 0x10	; 16
     4b2:	20 71       	andi	r18, 0x10	; 16
     4b4:	30 e0       	ldi	r19, 0x00	; 0
     4b6:	35 95       	asr	r19
     4b8:	27 95       	ror	r18
     4ba:	35 95       	asr	r19
     4bc:	27 95       	ror	r18
     4be:	35 95       	asr	r19
     4c0:	27 95       	ror	r18
     4c2:	95 fb       	bst	r25, 5
     4c4:	99 27       	eor	r25, r25
     4c6:	90 f9       	bld	r25, 0
     4c8:	82 2f       	mov	r24, r18
     4ca:	89 2b       	or	r24, r25
     4cc:	8b 87       	std	Y+11, r24	; 0x0b
	printf("button data: %d \n\r",msgToSend.data[7]);
     4ce:	28 2f       	mov	r18, r24
     4d0:	08 2e       	mov	r0, r24
     4d2:	00 0c       	add	r0, r0
     4d4:	33 0b       	sbc	r19, r19
     4d6:	3f 93       	push	r19
     4d8:	8f 93       	push	r24
     4da:	0c e0       	ldi	r16, 0x0C	; 12
     4dc:	11 e0       	ldi	r17, 0x01	; 1
     4de:	1f 93       	push	r17
     4e0:	0f 93       	push	r16
     4e2:	0e 94 42 05 	call	0xa84	; 0xa84 <printf>
	printf("button data: %d \n\r",msgToSend.data[5]);
     4e6:	89 85       	ldd	r24, Y+9	; 0x09
     4e8:	28 2f       	mov	r18, r24
     4ea:	08 2e       	mov	r0, r24
     4ec:	00 0c       	add	r0, r0
     4ee:	33 0b       	sbc	r19, r19
     4f0:	3f 93       	push	r19
     4f2:	8f 93       	push	r24
     4f4:	1f 93       	push	r17
     4f6:	0f 93       	push	r16
     4f8:	0e 94 42 05 	call	0xa84	; 0xa84 <printf>
	
	msgToSend.id = 0x0015;
     4fc:	85 e1       	ldi	r24, 0x15	; 21
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	9a 83       	std	Y+2, r25	; 0x02
     502:	89 83       	std	Y+1, r24	; 0x01
	send_can_msg(&msgToSend);
     504:	ce 01       	movw	r24, r28
     506:	01 96       	adiw	r24, 0x01	; 1
     508:	0e 94 94 00 	call	0x128	; 0x128 <send_can_msg>
	
     50c:	0f b6       	in	r0, 0x3f	; 63
     50e:	f8 94       	cli
     510:	de bf       	out	0x3e, r29	; 62
     512:	0f be       	out	0x3f, r0	; 63
     514:	cd bf       	out	0x3d, r28	; 61
     516:	2b 96       	adiw	r28, 0x0b	; 11
     518:	0f b6       	in	r0, 0x3f	; 63
     51a:	f8 94       	cli
     51c:	de bf       	out	0x3e, r29	; 62
     51e:	0f be       	out	0x3f, r0	; 63
     520:	cd bf       	out	0x3d, r28	; 61
     522:	df 91       	pop	r29
     524:	cf 91       	pop	r28
     526:	1f 91       	pop	r17
     528:	0f 91       	pop	r16
     52a:	08 95       	ret

0000052c <main>:
	
//  	joyVal joystick; 
//  	sliderVal slider; 
//	volatile amap* atmelMap = (amap*) BASE;
	
	USART_Init ( MYUBRR );
     52c:	8f e1       	ldi	r24, 0x1F	; 31
     52e:	90 e0       	ldi	r25, 0x00	; 0
     530:	0e 94 42 03 	call	0x684	; 0x684 <USART_Init>
	
	//enable external memory interface
	MCUCR |= (1<<SRE);
     534:	85 b7       	in	r24, 0x35	; 53
     536:	80 68       	ori	r24, 0x80	; 128
     538:	85 bf       	out	0x35, r24	; 53
	
	//select which c pins on atmega to be released for normal use, the rest is used for high address bytes
	SFIOR &= ~(1<<XMM0);
     53a:	80 b7       	in	r24, 0x30	; 48
     53c:	87 7f       	andi	r24, 0xF7	; 247
     53e:	80 bf       	out	0x30, r24	; 48
	SFIOR &= ~(1<<XMM1);
     540:	80 b7       	in	r24, 0x30	; 48
     542:	8f 7e       	andi	r24, 0xEF	; 239
     544:	80 bf       	out	0x30, r24	; 48
	SFIOR |= (1<<XMM2);
     546:	80 b7       	in	r24, 0x30	; 48
     548:	80 62       	ori	r24, 0x20	; 32
     54a:	80 bf       	out	0x30, r24	; 48
	
	DDRA |= 0x18;
     54c:	8a b3       	in	r24, 0x1a	; 26
     54e:	88 61       	ori	r24, 0x18	; 24
     550:	8a bb       	out	0x1a, r24	; 26
	
	
	
	can_init();
     552:	0e 94 7a 00 	call	0xf4	; 0xf4 <can_init>
	TCCR2 |= (1<<COM21);
	TCCR2 |= (1<<COM20);
	*/

	
	SRAM_test(); _delay_ms(1000);
     556:	0e 94 ee 02 	call	0x5dc	; 0x5dc <SRAM_test>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     55a:	2f ef       	ldi	r18, 0xFF	; 255
     55c:	8f ef       	ldi	r24, 0xFF	; 255
     55e:	9e e0       	ldi	r25, 0x0E	; 14
     560:	21 50       	subi	r18, 0x01	; 1
     562:	80 40       	sbci	r24, 0x00	; 0
     564:	90 40       	sbci	r25, 0x00	; 0
     566:	e1 f7       	brne	.-8      	; 0x560 <main+0x34>
     568:	00 c0       	rjmp	.+0      	; 0x56a <main+0x3e>
     56a:	00 00       	nop
	can_init();
     56c:	0e 94 7a 00 	call	0xf4	; 0xf4 <can_init>
		
	//Check if the whole thing just works from up here:
	
	
		
	go_to_line(7);
     570:	87 e0       	ldi	r24, 0x07	; 7
     572:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <go_to_line>
     576:	cc e5       	ldi	r28, 0x5C	; 92
     578:	d0 e0       	ldi	r29, 0x00	; 0
	//oled_write_string(0," Kongeriget Norge er et frit, uafhaengigt og udeleligt Rige. Dets Regjeringsform er indskraenket og arvelig-monarkisk.", 8);
	//character_printer(wojak, 64, 40);
	//_delay_ms(60000);

	for(int i = 0; i < 92; i++){
		printf("\n");
     57a:	8a e0       	ldi	r24, 0x0A	; 10
     57c:	90 e0       	ldi	r25, 0x00	; 0
     57e:	0e 94 58 05 	call	0xab0	; 0xab0 <putchar>
     582:	21 97       	sbiw	r28, 0x01	; 1
	go_to_line(7);
	//oled_write_string(0," Kongeriget Norge er et frit, uafhaengigt og udeleligt Rige. Dets Regjeringsform er indskraenket og arvelig-monarkisk.", 8);
	//character_printer(wojak, 64, 40);
	//_delay_ms(60000);

	for(int i = 0; i < 92; i++){
     584:	d1 f7       	brne	.-12     	; 0x57a <main+0x4e>
			_delay_ms(5000);
		}
	}*/
	
	
	can_interrupt_enable();
     586:	0e 94 6e 00 	call	0xdc	; 0xdc <can_interrupt_enable>
	can_message* receivedMsg;

	
	calc_offset();
     58a:	0e 94 97 01 	call	0x32e	; 0x32e <calc_offset>
		_delay_ms(5);


		if(can_interrupted()){
			receivedMsg = receive_can_msg(0);
			printf("%d sauusss", receivedMsg->data[0]);
     58e:	cf e1       	ldi	r28, 0x1F	; 31
     590:	d1 e0       	ldi	r29, 0x01	; 1
		// CAN BUS TEST
		//msgToReceive = receive_can_msg(0);
		//_delay_ms(5000);
		//send_can_msg(&msgToSend);
		//printf("Program running %d \r\n", 2);
		send_stick_can();
     592:	0e 94 16 02 	call	0x42c	; 0x42c <send_stick_can>
     596:	ef ef       	ldi	r30, 0xFF	; 255
     598:	f7 e1       	ldi	r31, 0x17	; 23
     59a:	31 97       	sbiw	r30, 0x01	; 1
     59c:	f1 f7       	brne	.-4      	; 0x59a <main+0x6e>
     59e:	00 c0       	rjmp	.+0      	; 0x5a0 <main+0x74>
     5a0:	00 00       	nop
		_delay_ms(5);


		if(can_interrupted()){
     5a2:	0e 94 66 00 	call	0xcc	; 0xcc <can_interrupted>
     5a6:	88 23       	and	r24, r24
     5a8:	a1 f3       	breq	.-24     	; 0x592 <main+0x66>
			receivedMsg = receive_can_msg(0);
     5aa:	80 e0       	ldi	r24, 0x00	; 0
     5ac:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <receive_can_msg>
			printf("%d sauusss", receivedMsg->data[0]);
     5b0:	fc 01       	movw	r30, r24
     5b2:	83 81       	ldd	r24, Z+3	; 0x03
     5b4:	28 2f       	mov	r18, r24
     5b6:	08 2e       	mov	r0, r24
     5b8:	00 0c       	add	r0, r0
     5ba:	33 0b       	sbc	r19, r19
     5bc:	3f 93       	push	r19
     5be:	8f 93       	push	r24
     5c0:	df 93       	push	r29
     5c2:	cf 93       	push	r28
     5c4:	0e 94 42 05 	call	0xa84	; 0xa84 <printf>
     5c8:	0f 90       	pop	r0
     5ca:	0f 90       	pop	r0
     5cc:	0f 90       	pop	r0
     5ce:	0f 90       	pop	r0
     5d0:	e0 cf       	rjmp	.-64     	; 0x592 <main+0x66>

000005d2 <go_to_line>:
	oled_write_command(0xa6); //set normal display
	oled_write_command(0xaf); //display on
}

void go_to_line(uint8_t line){
	oled_write_command(0xB0 + line%8);
     5d2:	87 70       	andi	r24, 0x07	; 7
     5d4:	80 55       	subi	r24, 0x50	; 80


void oled_write_command(char c)
{
	volatile char *ext_ram = (char *) 0x1000;
	ext_ram[0] = c;
     5d6:	80 93 00 10 	sts	0x1000, r24	; 0x801000 <__bss_end+0xe4b>
     5da:	08 95       	ret

000005dc <SRAM_test>:
     5dc:	ef 92       	push	r14
     5de:	ff 92       	push	r15
     5e0:	0f 93       	push	r16
     5e2:	1f 93       	push	r17
     5e4:	cf 93       	push	r28
     5e6:	df 93       	push	r29
     5e8:	8a e2       	ldi	r24, 0x2A	; 42
     5ea:	91 e0       	ldi	r25, 0x01	; 1
     5ec:	0e 94 5f 05 	call	0xabe	; 0xabe <puts>
     5f0:	0e 94 e7 04 	call	0x9ce	; 0x9ce <rand>
     5f4:	7c 01       	movw	r14, r24
     5f6:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <srand>
     5fa:	c0 e0       	ldi	r28, 0x00	; 0
     5fc:	d8 e1       	ldi	r29, 0x18	; 24
     5fe:	00 e0       	ldi	r16, 0x00	; 0
     600:	10 e0       	ldi	r17, 0x00	; 0
     602:	0e 94 e7 04 	call	0x9ce	; 0x9ce <rand>
     606:	88 83       	st	Y, r24
     608:	98 81       	ld	r25, Y
     60a:	89 17       	cp	r24, r25
     60c:	11 f0       	breq	.+4      	; 0x612 <SRAM_test+0x36>
     60e:	0f 5f       	subi	r16, 0xFF	; 255
     610:	1f 4f       	sbci	r17, 0xFF	; 255
     612:	21 96       	adiw	r28, 0x01	; 1
     614:	c1 15       	cp	r28, r1
     616:	80 e2       	ldi	r24, 0x20	; 32
     618:	d8 07       	cpc	r29, r24
     61a:	99 f7       	brne	.-26     	; 0x602 <SRAM_test+0x26>
     61c:	c7 01       	movw	r24, r14
     61e:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <srand>
     622:	c0 e0       	ldi	r28, 0x00	; 0
     624:	d8 e1       	ldi	r29, 0x18	; 24
     626:	e1 2c       	mov	r14, r1
     628:	f1 2c       	mov	r15, r1
     62a:	0e 94 e7 04 	call	0x9ce	; 0x9ce <rand>
     62e:	98 81       	ld	r25, Y
     630:	98 17       	cp	r25, r24
     632:	19 f0       	breq	.+6      	; 0x63a <SRAM_test+0x5e>
     634:	8f ef       	ldi	r24, 0xFF	; 255
     636:	e8 1a       	sub	r14, r24
     638:	f8 0a       	sbc	r15, r24
     63a:	21 96       	adiw	r28, 0x01	; 1
     63c:	c1 15       	cp	r28, r1
     63e:	80 e2       	ldi	r24, 0x20	; 32
     640:	d8 07       	cpc	r29, r24
     642:	99 f7       	brne	.-26     	; 0x62a <SRAM_test+0x4e>
     644:	ff 92       	push	r15
     646:	ef 92       	push	r14
     648:	1f 93       	push	r17
     64a:	0f 93       	push	r16
     64c:	80 e4       	ldi	r24, 0x40	; 64
     64e:	91 e0       	ldi	r25, 0x01	; 1
     650:	9f 93       	push	r25
     652:	8f 93       	push	r24
     654:	0e 94 42 05 	call	0xa84	; 0xa84 <printf>
     658:	0f 90       	pop	r0
     65a:	0f 90       	pop	r0
     65c:	0f 90       	pop	r0
     65e:	0f 90       	pop	r0
     660:	0f 90       	pop	r0
     662:	0f 90       	pop	r0
     664:	df 91       	pop	r29
     666:	cf 91       	pop	r28
     668:	1f 91       	pop	r17
     66a:	0f 91       	pop	r16
     66c:	ff 90       	pop	r15
     66e:	ef 90       	pop	r14
     670:	08 95       	ret

00000672 <USART_Transmit>:
	UCSR1C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
	clear_bit(UCSR0C, 0); // Clock polarity
	fdevopen(USART_Transmit, USART_Receive);
}
void USART_Transmit(unsigned char data){
	while (!(UCSR0A & (1<<UDRE0)));
     672:	5d 9b       	sbis	0x0b, 5	; 11
     674:	fe cf       	rjmp	.-4      	; 0x672 <USART_Transmit>
	
	UDR0 = data;
     676:	8c b9       	out	0x0c, r24	; 12
     678:	08 95       	ret

0000067a <USART_Receive>:
}

unsigned int USART_Receive(void)
{
	
	while (!(UCSR0A & (1<<RXC0)));
     67a:	5f 9b       	sbis	0x0b, 7	; 11
     67c:	fe cf       	rjmp	.-4      	; 0x67a <USART_Receive>
	

	return UDR0;
     67e:	8c b1       	in	r24, 0x0c	; 12
     680:	90 e0       	ldi	r25, 0x00	; 0
     682:	08 95       	ret

00000684 <USART_Init>:
#include <stdio.h>
#define clear_bit( reg, bit ) (reg &= ~(1 << bit))

void USART_Init (unsigned int ubrr ){
	
	UBRR0H = (unsigned char)(ubrr>>8);
     684:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)ubrr;
     686:	89 b9       	out	0x09, r24	; 9
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     688:	88 e1       	ldi	r24, 0x18	; 24
     68a:	8a b9       	out	0x0a, r24	; 10
	
	UCSR1C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
     68c:	8e e8       	ldi	r24, 0x8E	; 142
     68e:	8c bf       	out	0x3c, r24	; 60
	clear_bit(UCSR0C, 0); // Clock polarity
     690:	80 b5       	in	r24, 0x20	; 32
     692:	8e 7f       	andi	r24, 0xFE	; 254
     694:	80 bd       	out	0x20, r24	; 32
	fdevopen(USART_Transmit, USART_Receive);
     696:	6d e3       	ldi	r22, 0x3D	; 61
     698:	73 e0       	ldi	r23, 0x03	; 3
     69a:	89 e3       	ldi	r24, 0x39	; 57
     69c:	93 e0       	ldi	r25, 0x03	; 3
     69e:	0e 94 f7 04 	call	0x9ee	; 0x9ee <fdevopen>
     6a2:	08 95       	ret

000006a4 <__divmodhi4>:
     6a4:	97 fb       	bst	r25, 7
     6a6:	07 2e       	mov	r0, r23
     6a8:	16 f4       	brtc	.+4      	; 0x6ae <__divmodhi4+0xa>
     6aa:	00 94       	com	r0
     6ac:	07 d0       	rcall	.+14     	; 0x6bc <__divmodhi4_neg1>
     6ae:	77 fd       	sbrc	r23, 7
     6b0:	09 d0       	rcall	.+18     	; 0x6c4 <__divmodhi4_neg2>
     6b2:	0e 94 66 03 	call	0x6cc	; 0x6cc <__udivmodhi4>
     6b6:	07 fc       	sbrc	r0, 7
     6b8:	05 d0       	rcall	.+10     	; 0x6c4 <__divmodhi4_neg2>
     6ba:	3e f4       	brtc	.+14     	; 0x6ca <__divmodhi4_exit>

000006bc <__divmodhi4_neg1>:
     6bc:	90 95       	com	r25
     6be:	81 95       	neg	r24
     6c0:	9f 4f       	sbci	r25, 0xFF	; 255
     6c2:	08 95       	ret

000006c4 <__divmodhi4_neg2>:
     6c4:	70 95       	com	r23
     6c6:	61 95       	neg	r22
     6c8:	7f 4f       	sbci	r23, 0xFF	; 255

000006ca <__divmodhi4_exit>:
     6ca:	08 95       	ret

000006cc <__udivmodhi4>:
     6cc:	aa 1b       	sub	r26, r26
     6ce:	bb 1b       	sub	r27, r27
     6d0:	51 e1       	ldi	r21, 0x11	; 17
     6d2:	07 c0       	rjmp	.+14     	; 0x6e2 <__udivmodhi4_ep>

000006d4 <__udivmodhi4_loop>:
     6d4:	aa 1f       	adc	r26, r26
     6d6:	bb 1f       	adc	r27, r27
     6d8:	a6 17       	cp	r26, r22
     6da:	b7 07       	cpc	r27, r23
     6dc:	10 f0       	brcs	.+4      	; 0x6e2 <__udivmodhi4_ep>
     6de:	a6 1b       	sub	r26, r22
     6e0:	b7 0b       	sbc	r27, r23

000006e2 <__udivmodhi4_ep>:
     6e2:	88 1f       	adc	r24, r24
     6e4:	99 1f       	adc	r25, r25
     6e6:	5a 95       	dec	r21
     6e8:	a9 f7       	brne	.-22     	; 0x6d4 <__udivmodhi4_loop>
     6ea:	80 95       	com	r24
     6ec:	90 95       	com	r25
     6ee:	bc 01       	movw	r22, r24
     6f0:	cd 01       	movw	r24, r26
     6f2:	08 95       	ret

000006f4 <malloc>:
     6f4:	0f 93       	push	r16
     6f6:	1f 93       	push	r17
     6f8:	cf 93       	push	r28
     6fa:	df 93       	push	r29
     6fc:	82 30       	cpi	r24, 0x02	; 2
     6fe:	91 05       	cpc	r25, r1
     700:	10 f4       	brcc	.+4      	; 0x706 <malloc+0x12>
     702:	82 e0       	ldi	r24, 0x02	; 2
     704:	90 e0       	ldi	r25, 0x00	; 0
     706:	e0 91 ad 01 	lds	r30, 0x01AD	; 0x8001ad <__flp>
     70a:	f0 91 ae 01 	lds	r31, 0x01AE	; 0x8001ae <__flp+0x1>
     70e:	20 e0       	ldi	r18, 0x00	; 0
     710:	30 e0       	ldi	r19, 0x00	; 0
     712:	a0 e0       	ldi	r26, 0x00	; 0
     714:	b0 e0       	ldi	r27, 0x00	; 0
     716:	30 97       	sbiw	r30, 0x00	; 0
     718:	19 f1       	breq	.+70     	; 0x760 <malloc+0x6c>
     71a:	40 81       	ld	r20, Z
     71c:	51 81       	ldd	r21, Z+1	; 0x01
     71e:	02 81       	ldd	r16, Z+2	; 0x02
     720:	13 81       	ldd	r17, Z+3	; 0x03
     722:	48 17       	cp	r20, r24
     724:	59 07       	cpc	r21, r25
     726:	c8 f0       	brcs	.+50     	; 0x75a <malloc+0x66>
     728:	84 17       	cp	r24, r20
     72a:	95 07       	cpc	r25, r21
     72c:	69 f4       	brne	.+26     	; 0x748 <malloc+0x54>
     72e:	10 97       	sbiw	r26, 0x00	; 0
     730:	31 f0       	breq	.+12     	; 0x73e <malloc+0x4a>
     732:	12 96       	adiw	r26, 0x02	; 2
     734:	0c 93       	st	X, r16
     736:	12 97       	sbiw	r26, 0x02	; 2
     738:	13 96       	adiw	r26, 0x03	; 3
     73a:	1c 93       	st	X, r17
     73c:	27 c0       	rjmp	.+78     	; 0x78c <malloc+0x98>
     73e:	00 93 ad 01 	sts	0x01AD, r16	; 0x8001ad <__flp>
     742:	10 93 ae 01 	sts	0x01AE, r17	; 0x8001ae <__flp+0x1>
     746:	22 c0       	rjmp	.+68     	; 0x78c <malloc+0x98>
     748:	21 15       	cp	r18, r1
     74a:	31 05       	cpc	r19, r1
     74c:	19 f0       	breq	.+6      	; 0x754 <malloc+0x60>
     74e:	42 17       	cp	r20, r18
     750:	53 07       	cpc	r21, r19
     752:	18 f4       	brcc	.+6      	; 0x75a <malloc+0x66>
     754:	9a 01       	movw	r18, r20
     756:	bd 01       	movw	r22, r26
     758:	ef 01       	movw	r28, r30
     75a:	df 01       	movw	r26, r30
     75c:	f8 01       	movw	r30, r16
     75e:	db cf       	rjmp	.-74     	; 0x716 <malloc+0x22>
     760:	21 15       	cp	r18, r1
     762:	31 05       	cpc	r19, r1
     764:	f9 f0       	breq	.+62     	; 0x7a4 <malloc+0xb0>
     766:	28 1b       	sub	r18, r24
     768:	39 0b       	sbc	r19, r25
     76a:	24 30       	cpi	r18, 0x04	; 4
     76c:	31 05       	cpc	r19, r1
     76e:	80 f4       	brcc	.+32     	; 0x790 <malloc+0x9c>
     770:	8a 81       	ldd	r24, Y+2	; 0x02
     772:	9b 81       	ldd	r25, Y+3	; 0x03
     774:	61 15       	cp	r22, r1
     776:	71 05       	cpc	r23, r1
     778:	21 f0       	breq	.+8      	; 0x782 <malloc+0x8e>
     77a:	fb 01       	movw	r30, r22
     77c:	93 83       	std	Z+3, r25	; 0x03
     77e:	82 83       	std	Z+2, r24	; 0x02
     780:	04 c0       	rjmp	.+8      	; 0x78a <malloc+0x96>
     782:	90 93 ae 01 	sts	0x01AE, r25	; 0x8001ae <__flp+0x1>
     786:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <__flp>
     78a:	fe 01       	movw	r30, r28
     78c:	32 96       	adiw	r30, 0x02	; 2
     78e:	44 c0       	rjmp	.+136    	; 0x818 <malloc+0x124>
     790:	fe 01       	movw	r30, r28
     792:	e2 0f       	add	r30, r18
     794:	f3 1f       	adc	r31, r19
     796:	81 93       	st	Z+, r24
     798:	91 93       	st	Z+, r25
     79a:	22 50       	subi	r18, 0x02	; 2
     79c:	31 09       	sbc	r19, r1
     79e:	39 83       	std	Y+1, r19	; 0x01
     7a0:	28 83       	st	Y, r18
     7a2:	3a c0       	rjmp	.+116    	; 0x818 <malloc+0x124>
     7a4:	20 91 ab 01 	lds	r18, 0x01AB	; 0x8001ab <__brkval>
     7a8:	30 91 ac 01 	lds	r19, 0x01AC	; 0x8001ac <__brkval+0x1>
     7ac:	23 2b       	or	r18, r19
     7ae:	41 f4       	brne	.+16     	; 0x7c0 <malloc+0xcc>
     7b0:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
     7b4:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
     7b8:	30 93 ac 01 	sts	0x01AC, r19	; 0x8001ac <__brkval+0x1>
     7bc:	20 93 ab 01 	sts	0x01AB, r18	; 0x8001ab <__brkval>
     7c0:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     7c4:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
     7c8:	21 15       	cp	r18, r1
     7ca:	31 05       	cpc	r19, r1
     7cc:	41 f4       	brne	.+16     	; 0x7de <malloc+0xea>
     7ce:	2d b7       	in	r18, 0x3d	; 61
     7d0:	3e b7       	in	r19, 0x3e	; 62
     7d2:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
     7d6:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
     7da:	24 1b       	sub	r18, r20
     7dc:	35 0b       	sbc	r19, r21
     7de:	e0 91 ab 01 	lds	r30, 0x01AB	; 0x8001ab <__brkval>
     7e2:	f0 91 ac 01 	lds	r31, 0x01AC	; 0x8001ac <__brkval+0x1>
     7e6:	e2 17       	cp	r30, r18
     7e8:	f3 07       	cpc	r31, r19
     7ea:	a0 f4       	brcc	.+40     	; 0x814 <malloc+0x120>
     7ec:	2e 1b       	sub	r18, r30
     7ee:	3f 0b       	sbc	r19, r31
     7f0:	28 17       	cp	r18, r24
     7f2:	39 07       	cpc	r19, r25
     7f4:	78 f0       	brcs	.+30     	; 0x814 <malloc+0x120>
     7f6:	ac 01       	movw	r20, r24
     7f8:	4e 5f       	subi	r20, 0xFE	; 254
     7fa:	5f 4f       	sbci	r21, 0xFF	; 255
     7fc:	24 17       	cp	r18, r20
     7fe:	35 07       	cpc	r19, r21
     800:	48 f0       	brcs	.+18     	; 0x814 <malloc+0x120>
     802:	4e 0f       	add	r20, r30
     804:	5f 1f       	adc	r21, r31
     806:	50 93 ac 01 	sts	0x01AC, r21	; 0x8001ac <__brkval+0x1>
     80a:	40 93 ab 01 	sts	0x01AB, r20	; 0x8001ab <__brkval>
     80e:	81 93       	st	Z+, r24
     810:	91 93       	st	Z+, r25
     812:	02 c0       	rjmp	.+4      	; 0x818 <malloc+0x124>
     814:	e0 e0       	ldi	r30, 0x00	; 0
     816:	f0 e0       	ldi	r31, 0x00	; 0
     818:	cf 01       	movw	r24, r30
     81a:	df 91       	pop	r29
     81c:	cf 91       	pop	r28
     81e:	1f 91       	pop	r17
     820:	0f 91       	pop	r16
     822:	08 95       	ret

00000824 <free>:
     824:	cf 93       	push	r28
     826:	df 93       	push	r29
     828:	00 97       	sbiw	r24, 0x00	; 0
     82a:	09 f4       	brne	.+2      	; 0x82e <free+0xa>
     82c:	81 c0       	rjmp	.+258    	; 0x930 <free+0x10c>
     82e:	fc 01       	movw	r30, r24
     830:	32 97       	sbiw	r30, 0x02	; 2
     832:	13 82       	std	Z+3, r1	; 0x03
     834:	12 82       	std	Z+2, r1	; 0x02
     836:	a0 91 ad 01 	lds	r26, 0x01AD	; 0x8001ad <__flp>
     83a:	b0 91 ae 01 	lds	r27, 0x01AE	; 0x8001ae <__flp+0x1>
     83e:	10 97       	sbiw	r26, 0x00	; 0
     840:	81 f4       	brne	.+32     	; 0x862 <free+0x3e>
     842:	20 81       	ld	r18, Z
     844:	31 81       	ldd	r19, Z+1	; 0x01
     846:	82 0f       	add	r24, r18
     848:	93 1f       	adc	r25, r19
     84a:	20 91 ab 01 	lds	r18, 0x01AB	; 0x8001ab <__brkval>
     84e:	30 91 ac 01 	lds	r19, 0x01AC	; 0x8001ac <__brkval+0x1>
     852:	28 17       	cp	r18, r24
     854:	39 07       	cpc	r19, r25
     856:	51 f5       	brne	.+84     	; 0x8ac <free+0x88>
     858:	f0 93 ac 01 	sts	0x01AC, r31	; 0x8001ac <__brkval+0x1>
     85c:	e0 93 ab 01 	sts	0x01AB, r30	; 0x8001ab <__brkval>
     860:	67 c0       	rjmp	.+206    	; 0x930 <free+0x10c>
     862:	ed 01       	movw	r28, r26
     864:	20 e0       	ldi	r18, 0x00	; 0
     866:	30 e0       	ldi	r19, 0x00	; 0
     868:	ce 17       	cp	r28, r30
     86a:	df 07       	cpc	r29, r31
     86c:	40 f4       	brcc	.+16     	; 0x87e <free+0x5a>
     86e:	4a 81       	ldd	r20, Y+2	; 0x02
     870:	5b 81       	ldd	r21, Y+3	; 0x03
     872:	9e 01       	movw	r18, r28
     874:	41 15       	cp	r20, r1
     876:	51 05       	cpc	r21, r1
     878:	f1 f0       	breq	.+60     	; 0x8b6 <free+0x92>
     87a:	ea 01       	movw	r28, r20
     87c:	f5 cf       	rjmp	.-22     	; 0x868 <free+0x44>
     87e:	d3 83       	std	Z+3, r29	; 0x03
     880:	c2 83       	std	Z+2, r28	; 0x02
     882:	40 81       	ld	r20, Z
     884:	51 81       	ldd	r21, Z+1	; 0x01
     886:	84 0f       	add	r24, r20
     888:	95 1f       	adc	r25, r21
     88a:	c8 17       	cp	r28, r24
     88c:	d9 07       	cpc	r29, r25
     88e:	59 f4       	brne	.+22     	; 0x8a6 <free+0x82>
     890:	88 81       	ld	r24, Y
     892:	99 81       	ldd	r25, Y+1	; 0x01
     894:	84 0f       	add	r24, r20
     896:	95 1f       	adc	r25, r21
     898:	02 96       	adiw	r24, 0x02	; 2
     89a:	91 83       	std	Z+1, r25	; 0x01
     89c:	80 83       	st	Z, r24
     89e:	8a 81       	ldd	r24, Y+2	; 0x02
     8a0:	9b 81       	ldd	r25, Y+3	; 0x03
     8a2:	93 83       	std	Z+3, r25	; 0x03
     8a4:	82 83       	std	Z+2, r24	; 0x02
     8a6:	21 15       	cp	r18, r1
     8a8:	31 05       	cpc	r19, r1
     8aa:	29 f4       	brne	.+10     	; 0x8b6 <free+0x92>
     8ac:	f0 93 ae 01 	sts	0x01AE, r31	; 0x8001ae <__flp+0x1>
     8b0:	e0 93 ad 01 	sts	0x01AD, r30	; 0x8001ad <__flp>
     8b4:	3d c0       	rjmp	.+122    	; 0x930 <free+0x10c>
     8b6:	e9 01       	movw	r28, r18
     8b8:	fb 83       	std	Y+3, r31	; 0x03
     8ba:	ea 83       	std	Y+2, r30	; 0x02
     8bc:	49 91       	ld	r20, Y+
     8be:	59 91       	ld	r21, Y+
     8c0:	c4 0f       	add	r28, r20
     8c2:	d5 1f       	adc	r29, r21
     8c4:	ec 17       	cp	r30, r28
     8c6:	fd 07       	cpc	r31, r29
     8c8:	61 f4       	brne	.+24     	; 0x8e2 <free+0xbe>
     8ca:	80 81       	ld	r24, Z
     8cc:	91 81       	ldd	r25, Z+1	; 0x01
     8ce:	84 0f       	add	r24, r20
     8d0:	95 1f       	adc	r25, r21
     8d2:	02 96       	adiw	r24, 0x02	; 2
     8d4:	e9 01       	movw	r28, r18
     8d6:	99 83       	std	Y+1, r25	; 0x01
     8d8:	88 83       	st	Y, r24
     8da:	82 81       	ldd	r24, Z+2	; 0x02
     8dc:	93 81       	ldd	r25, Z+3	; 0x03
     8de:	9b 83       	std	Y+3, r25	; 0x03
     8e0:	8a 83       	std	Y+2, r24	; 0x02
     8e2:	e0 e0       	ldi	r30, 0x00	; 0
     8e4:	f0 e0       	ldi	r31, 0x00	; 0
     8e6:	12 96       	adiw	r26, 0x02	; 2
     8e8:	8d 91       	ld	r24, X+
     8ea:	9c 91       	ld	r25, X
     8ec:	13 97       	sbiw	r26, 0x03	; 3
     8ee:	00 97       	sbiw	r24, 0x00	; 0
     8f0:	19 f0       	breq	.+6      	; 0x8f8 <free+0xd4>
     8f2:	fd 01       	movw	r30, r26
     8f4:	dc 01       	movw	r26, r24
     8f6:	f7 cf       	rjmp	.-18     	; 0x8e6 <free+0xc2>
     8f8:	8d 91       	ld	r24, X+
     8fa:	9c 91       	ld	r25, X
     8fc:	11 97       	sbiw	r26, 0x01	; 1
     8fe:	9d 01       	movw	r18, r26
     900:	2e 5f       	subi	r18, 0xFE	; 254
     902:	3f 4f       	sbci	r19, 0xFF	; 255
     904:	82 0f       	add	r24, r18
     906:	93 1f       	adc	r25, r19
     908:	20 91 ab 01 	lds	r18, 0x01AB	; 0x8001ab <__brkval>
     90c:	30 91 ac 01 	lds	r19, 0x01AC	; 0x8001ac <__brkval+0x1>
     910:	28 17       	cp	r18, r24
     912:	39 07       	cpc	r19, r25
     914:	69 f4       	brne	.+26     	; 0x930 <free+0x10c>
     916:	30 97       	sbiw	r30, 0x00	; 0
     918:	29 f4       	brne	.+10     	; 0x924 <free+0x100>
     91a:	10 92 ae 01 	sts	0x01AE, r1	; 0x8001ae <__flp+0x1>
     91e:	10 92 ad 01 	sts	0x01AD, r1	; 0x8001ad <__flp>
     922:	02 c0       	rjmp	.+4      	; 0x928 <free+0x104>
     924:	13 82       	std	Z+3, r1	; 0x03
     926:	12 82       	std	Z+2, r1	; 0x02
     928:	b0 93 ac 01 	sts	0x01AC, r27	; 0x8001ac <__brkval+0x1>
     92c:	a0 93 ab 01 	sts	0x01AB, r26	; 0x8001ab <__brkval>
     930:	df 91       	pop	r29
     932:	cf 91       	pop	r28
     934:	08 95       	ret

00000936 <do_rand>:
     936:	8f 92       	push	r8
     938:	9f 92       	push	r9
     93a:	af 92       	push	r10
     93c:	bf 92       	push	r11
     93e:	cf 92       	push	r12
     940:	df 92       	push	r13
     942:	ef 92       	push	r14
     944:	ff 92       	push	r15
     946:	cf 93       	push	r28
     948:	df 93       	push	r29
     94a:	ec 01       	movw	r28, r24
     94c:	68 81       	ld	r22, Y
     94e:	79 81       	ldd	r23, Y+1	; 0x01
     950:	8a 81       	ldd	r24, Y+2	; 0x02
     952:	9b 81       	ldd	r25, Y+3	; 0x03
     954:	61 15       	cp	r22, r1
     956:	71 05       	cpc	r23, r1
     958:	81 05       	cpc	r24, r1
     95a:	91 05       	cpc	r25, r1
     95c:	21 f4       	brne	.+8      	; 0x966 <do_rand+0x30>
     95e:	64 e2       	ldi	r22, 0x24	; 36
     960:	79 ed       	ldi	r23, 0xD9	; 217
     962:	8b e5       	ldi	r24, 0x5B	; 91
     964:	97 e0       	ldi	r25, 0x07	; 7
     966:	2d e1       	ldi	r18, 0x1D	; 29
     968:	33 ef       	ldi	r19, 0xF3	; 243
     96a:	41 e0       	ldi	r20, 0x01	; 1
     96c:	50 e0       	ldi	r21, 0x00	; 0
     96e:	0e 94 43 08 	call	0x1086	; 0x1086 <__divmodsi4>
     972:	49 01       	movw	r8, r18
     974:	5a 01       	movw	r10, r20
     976:	9b 01       	movw	r18, r22
     978:	ac 01       	movw	r20, r24
     97a:	a7 ea       	ldi	r26, 0xA7	; 167
     97c:	b1 e4       	ldi	r27, 0x41	; 65
     97e:	0e 94 62 08 	call	0x10c4	; 0x10c4 <__muluhisi3>
     982:	6b 01       	movw	r12, r22
     984:	7c 01       	movw	r14, r24
     986:	ac ee       	ldi	r26, 0xEC	; 236
     988:	b4 ef       	ldi	r27, 0xF4	; 244
     98a:	a5 01       	movw	r20, r10
     98c:	94 01       	movw	r18, r8
     98e:	0e 94 70 08 	call	0x10e0	; 0x10e0 <__mulohisi3>
     992:	dc 01       	movw	r26, r24
     994:	cb 01       	movw	r24, r22
     996:	8c 0d       	add	r24, r12
     998:	9d 1d       	adc	r25, r13
     99a:	ae 1d       	adc	r26, r14
     99c:	bf 1d       	adc	r27, r15
     99e:	b7 ff       	sbrs	r27, 7
     9a0:	03 c0       	rjmp	.+6      	; 0x9a8 <do_rand+0x72>
     9a2:	01 97       	sbiw	r24, 0x01	; 1
     9a4:	a1 09       	sbc	r26, r1
     9a6:	b0 48       	sbci	r27, 0x80	; 128
     9a8:	88 83       	st	Y, r24
     9aa:	99 83       	std	Y+1, r25	; 0x01
     9ac:	aa 83       	std	Y+2, r26	; 0x02
     9ae:	bb 83       	std	Y+3, r27	; 0x03
     9b0:	9f 77       	andi	r25, 0x7F	; 127
     9b2:	df 91       	pop	r29
     9b4:	cf 91       	pop	r28
     9b6:	ff 90       	pop	r15
     9b8:	ef 90       	pop	r14
     9ba:	df 90       	pop	r13
     9bc:	cf 90       	pop	r12
     9be:	bf 90       	pop	r11
     9c0:	af 90       	pop	r10
     9c2:	9f 90       	pop	r9
     9c4:	8f 90       	pop	r8
     9c6:	08 95       	ret

000009c8 <rand_r>:
     9c8:	0e 94 9b 04 	call	0x936	; 0x936 <do_rand>
     9cc:	08 95       	ret

000009ce <rand>:
     9ce:	86 e0       	ldi	r24, 0x06	; 6
     9d0:	91 e0       	ldi	r25, 0x01	; 1
     9d2:	0e 94 9b 04 	call	0x936	; 0x936 <do_rand>
     9d6:	08 95       	ret

000009d8 <srand>:
     9d8:	a0 e0       	ldi	r26, 0x00	; 0
     9da:	b0 e0       	ldi	r27, 0x00	; 0
     9dc:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <next>
     9e0:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <next+0x1>
     9e4:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <next+0x2>
     9e8:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <next+0x3>
     9ec:	08 95       	ret

000009ee <fdevopen>:
     9ee:	0f 93       	push	r16
     9f0:	1f 93       	push	r17
     9f2:	cf 93       	push	r28
     9f4:	df 93       	push	r29
     9f6:	00 97       	sbiw	r24, 0x00	; 0
     9f8:	31 f4       	brne	.+12     	; 0xa06 <fdevopen+0x18>
     9fa:	61 15       	cp	r22, r1
     9fc:	71 05       	cpc	r23, r1
     9fe:	19 f4       	brne	.+6      	; 0xa06 <fdevopen+0x18>
     a00:	80 e0       	ldi	r24, 0x00	; 0
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	3a c0       	rjmp	.+116    	; 0xa7a <fdevopen+0x8c>
     a06:	8b 01       	movw	r16, r22
     a08:	ec 01       	movw	r28, r24
     a0a:	6e e0       	ldi	r22, 0x0E	; 14
     a0c:	70 e0       	ldi	r23, 0x00	; 0
     a0e:	81 e0       	ldi	r24, 0x01	; 1
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	0e 94 70 07 	call	0xee0	; 0xee0 <calloc>
     a16:	fc 01       	movw	r30, r24
     a18:	89 2b       	or	r24, r25
     a1a:	91 f3       	breq	.-28     	; 0xa00 <fdevopen+0x12>
     a1c:	80 e8       	ldi	r24, 0x80	; 128
     a1e:	83 83       	std	Z+3, r24	; 0x03
     a20:	01 15       	cp	r16, r1
     a22:	11 05       	cpc	r17, r1
     a24:	71 f0       	breq	.+28     	; 0xa42 <fdevopen+0x54>
     a26:	13 87       	std	Z+11, r17	; 0x0b
     a28:	02 87       	std	Z+10, r16	; 0x0a
     a2a:	81 e8       	ldi	r24, 0x81	; 129
     a2c:	83 83       	std	Z+3, r24	; 0x03
     a2e:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <__iob>
     a32:	90 91 b0 01 	lds	r25, 0x01B0	; 0x8001b0 <__iob+0x1>
     a36:	89 2b       	or	r24, r25
     a38:	21 f4       	brne	.+8      	; 0xa42 <fdevopen+0x54>
     a3a:	f0 93 b0 01 	sts	0x01B0, r31	; 0x8001b0 <__iob+0x1>
     a3e:	e0 93 af 01 	sts	0x01AF, r30	; 0x8001af <__iob>
     a42:	20 97       	sbiw	r28, 0x00	; 0
     a44:	c9 f0       	breq	.+50     	; 0xa78 <fdevopen+0x8a>
     a46:	d1 87       	std	Z+9, r29	; 0x09
     a48:	c0 87       	std	Z+8, r28	; 0x08
     a4a:	83 81       	ldd	r24, Z+3	; 0x03
     a4c:	82 60       	ori	r24, 0x02	; 2
     a4e:	83 83       	std	Z+3, r24	; 0x03
     a50:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <__iob+0x2>
     a54:	90 91 b2 01 	lds	r25, 0x01B2	; 0x8001b2 <__iob+0x3>
     a58:	89 2b       	or	r24, r25
     a5a:	71 f4       	brne	.+28     	; 0xa78 <fdevopen+0x8a>
     a5c:	f0 93 b2 01 	sts	0x01B2, r31	; 0x8001b2 <__iob+0x3>
     a60:	e0 93 b1 01 	sts	0x01B1, r30	; 0x8001b1 <__iob+0x2>
     a64:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <__iob+0x4>
     a68:	90 91 b4 01 	lds	r25, 0x01B4	; 0x8001b4 <__iob+0x5>
     a6c:	89 2b       	or	r24, r25
     a6e:	21 f4       	brne	.+8      	; 0xa78 <fdevopen+0x8a>
     a70:	f0 93 b4 01 	sts	0x01B4, r31	; 0x8001b4 <__iob+0x5>
     a74:	e0 93 b3 01 	sts	0x01B3, r30	; 0x8001b3 <__iob+0x4>
     a78:	cf 01       	movw	r24, r30
     a7a:	df 91       	pop	r29
     a7c:	cf 91       	pop	r28
     a7e:	1f 91       	pop	r17
     a80:	0f 91       	pop	r16
     a82:	08 95       	ret

00000a84 <printf>:
     a84:	a0 e0       	ldi	r26, 0x00	; 0
     a86:	b0 e0       	ldi	r27, 0x00	; 0
     a88:	e8 e4       	ldi	r30, 0x48	; 72
     a8a:	f5 e0       	ldi	r31, 0x05	; 5
     a8c:	0c 94 85 08 	jmp	0x110a	; 0x110a <__prologue_saves__+0x20>
     a90:	ae 01       	movw	r20, r28
     a92:	4b 5f       	subi	r20, 0xFB	; 251
     a94:	5f 4f       	sbci	r21, 0xFF	; 255
     a96:	fa 01       	movw	r30, r20
     a98:	61 91       	ld	r22, Z+
     a9a:	71 91       	ld	r23, Z+
     a9c:	af 01       	movw	r20, r30
     a9e:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <__iob+0x2>
     aa2:	90 91 b2 01 	lds	r25, 0x01B2	; 0x8001b2 <__iob+0x3>
     aa6:	0e 94 8f 05 	call	0xb1e	; 0xb1e <vfprintf>
     aaa:	e2 e0       	ldi	r30, 0x02	; 2
     aac:	0c 94 a1 08 	jmp	0x1142	; 0x1142 <__epilogue_restores__+0x20>

00000ab0 <putchar>:
     ab0:	60 91 b1 01 	lds	r22, 0x01B1	; 0x8001b1 <__iob+0x2>
     ab4:	70 91 b2 01 	lds	r23, 0x01B2	; 0x8001b2 <__iob+0x3>
     ab8:	0e 94 a9 07 	call	0xf52	; 0xf52 <fputc>
     abc:	08 95       	ret

00000abe <puts>:
     abe:	0f 93       	push	r16
     ac0:	1f 93       	push	r17
     ac2:	cf 93       	push	r28
     ac4:	df 93       	push	r29
     ac6:	e0 91 b1 01 	lds	r30, 0x01B1	; 0x8001b1 <__iob+0x2>
     aca:	f0 91 b2 01 	lds	r31, 0x01B2	; 0x8001b2 <__iob+0x3>
     ace:	23 81       	ldd	r18, Z+3	; 0x03
     ad0:	21 ff       	sbrs	r18, 1
     ad2:	1b c0       	rjmp	.+54     	; 0xb0a <puts+0x4c>
     ad4:	8c 01       	movw	r16, r24
     ad6:	d0 e0       	ldi	r29, 0x00	; 0
     ad8:	c0 e0       	ldi	r28, 0x00	; 0
     ada:	f8 01       	movw	r30, r16
     adc:	81 91       	ld	r24, Z+
     ade:	8f 01       	movw	r16, r30
     ae0:	60 91 b1 01 	lds	r22, 0x01B1	; 0x8001b1 <__iob+0x2>
     ae4:	70 91 b2 01 	lds	r23, 0x01B2	; 0x8001b2 <__iob+0x3>
     ae8:	db 01       	movw	r26, r22
     aea:	18 96       	adiw	r26, 0x08	; 8
     aec:	ed 91       	ld	r30, X+
     aee:	fc 91       	ld	r31, X
     af0:	19 97       	sbiw	r26, 0x09	; 9
     af2:	88 23       	and	r24, r24
     af4:	31 f0       	breq	.+12     	; 0xb02 <puts+0x44>
     af6:	09 95       	icall
     af8:	89 2b       	or	r24, r25
     afa:	79 f3       	breq	.-34     	; 0xada <puts+0x1c>
     afc:	df ef       	ldi	r29, 0xFF	; 255
     afe:	cf ef       	ldi	r28, 0xFF	; 255
     b00:	ec cf       	rjmp	.-40     	; 0xada <puts+0x1c>
     b02:	8a e0       	ldi	r24, 0x0A	; 10
     b04:	09 95       	icall
     b06:	89 2b       	or	r24, r25
     b08:	19 f0       	breq	.+6      	; 0xb10 <puts+0x52>
     b0a:	8f ef       	ldi	r24, 0xFF	; 255
     b0c:	9f ef       	ldi	r25, 0xFF	; 255
     b0e:	02 c0       	rjmp	.+4      	; 0xb14 <puts+0x56>
     b10:	8d 2f       	mov	r24, r29
     b12:	9c 2f       	mov	r25, r28
     b14:	df 91       	pop	r29
     b16:	cf 91       	pop	r28
     b18:	1f 91       	pop	r17
     b1a:	0f 91       	pop	r16
     b1c:	08 95       	ret

00000b1e <vfprintf>:
     b1e:	ab e0       	ldi	r26, 0x0B	; 11
     b20:	b0 e0       	ldi	r27, 0x00	; 0
     b22:	e5 e9       	ldi	r30, 0x95	; 149
     b24:	f5 e0       	ldi	r31, 0x05	; 5
     b26:	0c 94 75 08 	jmp	0x10ea	; 0x10ea <__prologue_saves__>
     b2a:	6c 01       	movw	r12, r24
     b2c:	7b 01       	movw	r14, r22
     b2e:	8a 01       	movw	r16, r20
     b30:	fc 01       	movw	r30, r24
     b32:	17 82       	std	Z+7, r1	; 0x07
     b34:	16 82       	std	Z+6, r1	; 0x06
     b36:	83 81       	ldd	r24, Z+3	; 0x03
     b38:	81 ff       	sbrs	r24, 1
     b3a:	cc c1       	rjmp	.+920    	; 0xed4 <vfprintf+0x3b6>
     b3c:	ce 01       	movw	r24, r28
     b3e:	01 96       	adiw	r24, 0x01	; 1
     b40:	3c 01       	movw	r6, r24
     b42:	f6 01       	movw	r30, r12
     b44:	93 81       	ldd	r25, Z+3	; 0x03
     b46:	f7 01       	movw	r30, r14
     b48:	93 fd       	sbrc	r25, 3
     b4a:	85 91       	lpm	r24, Z+
     b4c:	93 ff       	sbrs	r25, 3
     b4e:	81 91       	ld	r24, Z+
     b50:	7f 01       	movw	r14, r30
     b52:	88 23       	and	r24, r24
     b54:	09 f4       	brne	.+2      	; 0xb58 <vfprintf+0x3a>
     b56:	ba c1       	rjmp	.+884    	; 0xecc <vfprintf+0x3ae>
     b58:	85 32       	cpi	r24, 0x25	; 37
     b5a:	39 f4       	brne	.+14     	; 0xb6a <vfprintf+0x4c>
     b5c:	93 fd       	sbrc	r25, 3
     b5e:	85 91       	lpm	r24, Z+
     b60:	93 ff       	sbrs	r25, 3
     b62:	81 91       	ld	r24, Z+
     b64:	7f 01       	movw	r14, r30
     b66:	85 32       	cpi	r24, 0x25	; 37
     b68:	29 f4       	brne	.+10     	; 0xb74 <vfprintf+0x56>
     b6a:	b6 01       	movw	r22, r12
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	0e 94 a9 07 	call	0xf52	; 0xf52 <fputc>
     b72:	e7 cf       	rjmp	.-50     	; 0xb42 <vfprintf+0x24>
     b74:	91 2c       	mov	r9, r1
     b76:	21 2c       	mov	r2, r1
     b78:	31 2c       	mov	r3, r1
     b7a:	ff e1       	ldi	r31, 0x1F	; 31
     b7c:	f3 15       	cp	r31, r3
     b7e:	d8 f0       	brcs	.+54     	; 0xbb6 <vfprintf+0x98>
     b80:	8b 32       	cpi	r24, 0x2B	; 43
     b82:	79 f0       	breq	.+30     	; 0xba2 <vfprintf+0x84>
     b84:	38 f4       	brcc	.+14     	; 0xb94 <vfprintf+0x76>
     b86:	80 32       	cpi	r24, 0x20	; 32
     b88:	79 f0       	breq	.+30     	; 0xba8 <vfprintf+0x8a>
     b8a:	83 32       	cpi	r24, 0x23	; 35
     b8c:	a1 f4       	brne	.+40     	; 0xbb6 <vfprintf+0x98>
     b8e:	23 2d       	mov	r18, r3
     b90:	20 61       	ori	r18, 0x10	; 16
     b92:	1d c0       	rjmp	.+58     	; 0xbce <vfprintf+0xb0>
     b94:	8d 32       	cpi	r24, 0x2D	; 45
     b96:	61 f0       	breq	.+24     	; 0xbb0 <vfprintf+0x92>
     b98:	80 33       	cpi	r24, 0x30	; 48
     b9a:	69 f4       	brne	.+26     	; 0xbb6 <vfprintf+0x98>
     b9c:	23 2d       	mov	r18, r3
     b9e:	21 60       	ori	r18, 0x01	; 1
     ba0:	16 c0       	rjmp	.+44     	; 0xbce <vfprintf+0xb0>
     ba2:	83 2d       	mov	r24, r3
     ba4:	82 60       	ori	r24, 0x02	; 2
     ba6:	38 2e       	mov	r3, r24
     ba8:	e3 2d       	mov	r30, r3
     baa:	e4 60       	ori	r30, 0x04	; 4
     bac:	3e 2e       	mov	r3, r30
     bae:	2a c0       	rjmp	.+84     	; 0xc04 <vfprintf+0xe6>
     bb0:	f3 2d       	mov	r31, r3
     bb2:	f8 60       	ori	r31, 0x08	; 8
     bb4:	1d c0       	rjmp	.+58     	; 0xbf0 <vfprintf+0xd2>
     bb6:	37 fc       	sbrc	r3, 7
     bb8:	2d c0       	rjmp	.+90     	; 0xc14 <vfprintf+0xf6>
     bba:	20 ed       	ldi	r18, 0xD0	; 208
     bbc:	28 0f       	add	r18, r24
     bbe:	2a 30       	cpi	r18, 0x0A	; 10
     bc0:	40 f0       	brcs	.+16     	; 0xbd2 <vfprintf+0xb4>
     bc2:	8e 32       	cpi	r24, 0x2E	; 46
     bc4:	b9 f4       	brne	.+46     	; 0xbf4 <vfprintf+0xd6>
     bc6:	36 fc       	sbrc	r3, 6
     bc8:	81 c1       	rjmp	.+770    	; 0xecc <vfprintf+0x3ae>
     bca:	23 2d       	mov	r18, r3
     bcc:	20 64       	ori	r18, 0x40	; 64
     bce:	32 2e       	mov	r3, r18
     bd0:	19 c0       	rjmp	.+50     	; 0xc04 <vfprintf+0xe6>
     bd2:	36 fe       	sbrs	r3, 6
     bd4:	06 c0       	rjmp	.+12     	; 0xbe2 <vfprintf+0xc4>
     bd6:	8a e0       	ldi	r24, 0x0A	; 10
     bd8:	98 9e       	mul	r9, r24
     bda:	20 0d       	add	r18, r0
     bdc:	11 24       	eor	r1, r1
     bde:	92 2e       	mov	r9, r18
     be0:	11 c0       	rjmp	.+34     	; 0xc04 <vfprintf+0xe6>
     be2:	ea e0       	ldi	r30, 0x0A	; 10
     be4:	2e 9e       	mul	r2, r30
     be6:	20 0d       	add	r18, r0
     be8:	11 24       	eor	r1, r1
     bea:	22 2e       	mov	r2, r18
     bec:	f3 2d       	mov	r31, r3
     bee:	f0 62       	ori	r31, 0x20	; 32
     bf0:	3f 2e       	mov	r3, r31
     bf2:	08 c0       	rjmp	.+16     	; 0xc04 <vfprintf+0xe6>
     bf4:	8c 36       	cpi	r24, 0x6C	; 108
     bf6:	21 f4       	brne	.+8      	; 0xc00 <vfprintf+0xe2>
     bf8:	83 2d       	mov	r24, r3
     bfa:	80 68       	ori	r24, 0x80	; 128
     bfc:	38 2e       	mov	r3, r24
     bfe:	02 c0       	rjmp	.+4      	; 0xc04 <vfprintf+0xe6>
     c00:	88 36       	cpi	r24, 0x68	; 104
     c02:	41 f4       	brne	.+16     	; 0xc14 <vfprintf+0xf6>
     c04:	f7 01       	movw	r30, r14
     c06:	93 fd       	sbrc	r25, 3
     c08:	85 91       	lpm	r24, Z+
     c0a:	93 ff       	sbrs	r25, 3
     c0c:	81 91       	ld	r24, Z+
     c0e:	7f 01       	movw	r14, r30
     c10:	81 11       	cpse	r24, r1
     c12:	b3 cf       	rjmp	.-154    	; 0xb7a <vfprintf+0x5c>
     c14:	98 2f       	mov	r25, r24
     c16:	9f 7d       	andi	r25, 0xDF	; 223
     c18:	95 54       	subi	r25, 0x45	; 69
     c1a:	93 30       	cpi	r25, 0x03	; 3
     c1c:	28 f4       	brcc	.+10     	; 0xc28 <vfprintf+0x10a>
     c1e:	0c 5f       	subi	r16, 0xFC	; 252
     c20:	1f 4f       	sbci	r17, 0xFF	; 255
     c22:	9f e3       	ldi	r25, 0x3F	; 63
     c24:	99 83       	std	Y+1, r25	; 0x01
     c26:	0d c0       	rjmp	.+26     	; 0xc42 <vfprintf+0x124>
     c28:	83 36       	cpi	r24, 0x63	; 99
     c2a:	31 f0       	breq	.+12     	; 0xc38 <vfprintf+0x11a>
     c2c:	83 37       	cpi	r24, 0x73	; 115
     c2e:	71 f0       	breq	.+28     	; 0xc4c <vfprintf+0x12e>
     c30:	83 35       	cpi	r24, 0x53	; 83
     c32:	09 f0       	breq	.+2      	; 0xc36 <vfprintf+0x118>
     c34:	59 c0       	rjmp	.+178    	; 0xce8 <vfprintf+0x1ca>
     c36:	21 c0       	rjmp	.+66     	; 0xc7a <vfprintf+0x15c>
     c38:	f8 01       	movw	r30, r16
     c3a:	80 81       	ld	r24, Z
     c3c:	89 83       	std	Y+1, r24	; 0x01
     c3e:	0e 5f       	subi	r16, 0xFE	; 254
     c40:	1f 4f       	sbci	r17, 0xFF	; 255
     c42:	88 24       	eor	r8, r8
     c44:	83 94       	inc	r8
     c46:	91 2c       	mov	r9, r1
     c48:	53 01       	movw	r10, r6
     c4a:	13 c0       	rjmp	.+38     	; 0xc72 <vfprintf+0x154>
     c4c:	28 01       	movw	r4, r16
     c4e:	f2 e0       	ldi	r31, 0x02	; 2
     c50:	4f 0e       	add	r4, r31
     c52:	51 1c       	adc	r5, r1
     c54:	f8 01       	movw	r30, r16
     c56:	a0 80       	ld	r10, Z
     c58:	b1 80       	ldd	r11, Z+1	; 0x01
     c5a:	36 fe       	sbrs	r3, 6
     c5c:	03 c0       	rjmp	.+6      	; 0xc64 <vfprintf+0x146>
     c5e:	69 2d       	mov	r22, r9
     c60:	70 e0       	ldi	r23, 0x00	; 0
     c62:	02 c0       	rjmp	.+4      	; 0xc68 <vfprintf+0x14a>
     c64:	6f ef       	ldi	r22, 0xFF	; 255
     c66:	7f ef       	ldi	r23, 0xFF	; 255
     c68:	c5 01       	movw	r24, r10
     c6a:	0e 94 9e 07 	call	0xf3c	; 0xf3c <strnlen>
     c6e:	4c 01       	movw	r8, r24
     c70:	82 01       	movw	r16, r4
     c72:	f3 2d       	mov	r31, r3
     c74:	ff 77       	andi	r31, 0x7F	; 127
     c76:	3f 2e       	mov	r3, r31
     c78:	16 c0       	rjmp	.+44     	; 0xca6 <vfprintf+0x188>
     c7a:	28 01       	movw	r4, r16
     c7c:	22 e0       	ldi	r18, 0x02	; 2
     c7e:	42 0e       	add	r4, r18
     c80:	51 1c       	adc	r5, r1
     c82:	f8 01       	movw	r30, r16
     c84:	a0 80       	ld	r10, Z
     c86:	b1 80       	ldd	r11, Z+1	; 0x01
     c88:	36 fe       	sbrs	r3, 6
     c8a:	03 c0       	rjmp	.+6      	; 0xc92 <vfprintf+0x174>
     c8c:	69 2d       	mov	r22, r9
     c8e:	70 e0       	ldi	r23, 0x00	; 0
     c90:	02 c0       	rjmp	.+4      	; 0xc96 <vfprintf+0x178>
     c92:	6f ef       	ldi	r22, 0xFF	; 255
     c94:	7f ef       	ldi	r23, 0xFF	; 255
     c96:	c5 01       	movw	r24, r10
     c98:	0e 94 8c 07 	call	0xf18	; 0xf18 <strnlen_P>
     c9c:	4c 01       	movw	r8, r24
     c9e:	f3 2d       	mov	r31, r3
     ca0:	f0 68       	ori	r31, 0x80	; 128
     ca2:	3f 2e       	mov	r3, r31
     ca4:	82 01       	movw	r16, r4
     ca6:	33 fc       	sbrc	r3, 3
     ca8:	1b c0       	rjmp	.+54     	; 0xce0 <vfprintf+0x1c2>
     caa:	82 2d       	mov	r24, r2
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	88 16       	cp	r8, r24
     cb0:	99 06       	cpc	r9, r25
     cb2:	b0 f4       	brcc	.+44     	; 0xce0 <vfprintf+0x1c2>
     cb4:	b6 01       	movw	r22, r12
     cb6:	80 e2       	ldi	r24, 0x20	; 32
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	0e 94 a9 07 	call	0xf52	; 0xf52 <fputc>
     cbe:	2a 94       	dec	r2
     cc0:	f4 cf       	rjmp	.-24     	; 0xcaa <vfprintf+0x18c>
     cc2:	f5 01       	movw	r30, r10
     cc4:	37 fc       	sbrc	r3, 7
     cc6:	85 91       	lpm	r24, Z+
     cc8:	37 fe       	sbrs	r3, 7
     cca:	81 91       	ld	r24, Z+
     ccc:	5f 01       	movw	r10, r30
     cce:	b6 01       	movw	r22, r12
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	0e 94 a9 07 	call	0xf52	; 0xf52 <fputc>
     cd6:	21 10       	cpse	r2, r1
     cd8:	2a 94       	dec	r2
     cda:	21 e0       	ldi	r18, 0x01	; 1
     cdc:	82 1a       	sub	r8, r18
     cde:	91 08       	sbc	r9, r1
     ce0:	81 14       	cp	r8, r1
     ce2:	91 04       	cpc	r9, r1
     ce4:	71 f7       	brne	.-36     	; 0xcc2 <vfprintf+0x1a4>
     ce6:	e8 c0       	rjmp	.+464    	; 0xeb8 <vfprintf+0x39a>
     ce8:	84 36       	cpi	r24, 0x64	; 100
     cea:	11 f0       	breq	.+4      	; 0xcf0 <vfprintf+0x1d2>
     cec:	89 36       	cpi	r24, 0x69	; 105
     cee:	41 f5       	brne	.+80     	; 0xd40 <vfprintf+0x222>
     cf0:	f8 01       	movw	r30, r16
     cf2:	37 fe       	sbrs	r3, 7
     cf4:	07 c0       	rjmp	.+14     	; 0xd04 <vfprintf+0x1e6>
     cf6:	60 81       	ld	r22, Z
     cf8:	71 81       	ldd	r23, Z+1	; 0x01
     cfa:	82 81       	ldd	r24, Z+2	; 0x02
     cfc:	93 81       	ldd	r25, Z+3	; 0x03
     cfe:	0c 5f       	subi	r16, 0xFC	; 252
     d00:	1f 4f       	sbci	r17, 0xFF	; 255
     d02:	08 c0       	rjmp	.+16     	; 0xd14 <vfprintf+0x1f6>
     d04:	60 81       	ld	r22, Z
     d06:	71 81       	ldd	r23, Z+1	; 0x01
     d08:	07 2e       	mov	r0, r23
     d0a:	00 0c       	add	r0, r0
     d0c:	88 0b       	sbc	r24, r24
     d0e:	99 0b       	sbc	r25, r25
     d10:	0e 5f       	subi	r16, 0xFE	; 254
     d12:	1f 4f       	sbci	r17, 0xFF	; 255
     d14:	f3 2d       	mov	r31, r3
     d16:	ff 76       	andi	r31, 0x6F	; 111
     d18:	3f 2e       	mov	r3, r31
     d1a:	97 ff       	sbrs	r25, 7
     d1c:	09 c0       	rjmp	.+18     	; 0xd30 <vfprintf+0x212>
     d1e:	90 95       	com	r25
     d20:	80 95       	com	r24
     d22:	70 95       	com	r23
     d24:	61 95       	neg	r22
     d26:	7f 4f       	sbci	r23, 0xFF	; 255
     d28:	8f 4f       	sbci	r24, 0xFF	; 255
     d2a:	9f 4f       	sbci	r25, 0xFF	; 255
     d2c:	f0 68       	ori	r31, 0x80	; 128
     d2e:	3f 2e       	mov	r3, r31
     d30:	2a e0       	ldi	r18, 0x0A	; 10
     d32:	30 e0       	ldi	r19, 0x00	; 0
     d34:	a3 01       	movw	r20, r6
     d36:	0e 94 e5 07 	call	0xfca	; 0xfca <__ultoa_invert>
     d3a:	88 2e       	mov	r8, r24
     d3c:	86 18       	sub	r8, r6
     d3e:	45 c0       	rjmp	.+138    	; 0xdca <vfprintf+0x2ac>
     d40:	85 37       	cpi	r24, 0x75	; 117
     d42:	31 f4       	brne	.+12     	; 0xd50 <vfprintf+0x232>
     d44:	23 2d       	mov	r18, r3
     d46:	2f 7e       	andi	r18, 0xEF	; 239
     d48:	b2 2e       	mov	r11, r18
     d4a:	2a e0       	ldi	r18, 0x0A	; 10
     d4c:	30 e0       	ldi	r19, 0x00	; 0
     d4e:	25 c0       	rjmp	.+74     	; 0xd9a <vfprintf+0x27c>
     d50:	93 2d       	mov	r25, r3
     d52:	99 7f       	andi	r25, 0xF9	; 249
     d54:	b9 2e       	mov	r11, r25
     d56:	8f 36       	cpi	r24, 0x6F	; 111
     d58:	c1 f0       	breq	.+48     	; 0xd8a <vfprintf+0x26c>
     d5a:	18 f4       	brcc	.+6      	; 0xd62 <vfprintf+0x244>
     d5c:	88 35       	cpi	r24, 0x58	; 88
     d5e:	79 f0       	breq	.+30     	; 0xd7e <vfprintf+0x260>
     d60:	b5 c0       	rjmp	.+362    	; 0xecc <vfprintf+0x3ae>
     d62:	80 37       	cpi	r24, 0x70	; 112
     d64:	19 f0       	breq	.+6      	; 0xd6c <vfprintf+0x24e>
     d66:	88 37       	cpi	r24, 0x78	; 120
     d68:	21 f0       	breq	.+8      	; 0xd72 <vfprintf+0x254>
     d6a:	b0 c0       	rjmp	.+352    	; 0xecc <vfprintf+0x3ae>
     d6c:	e9 2f       	mov	r30, r25
     d6e:	e0 61       	ori	r30, 0x10	; 16
     d70:	be 2e       	mov	r11, r30
     d72:	b4 fe       	sbrs	r11, 4
     d74:	0d c0       	rjmp	.+26     	; 0xd90 <vfprintf+0x272>
     d76:	fb 2d       	mov	r31, r11
     d78:	f4 60       	ori	r31, 0x04	; 4
     d7a:	bf 2e       	mov	r11, r31
     d7c:	09 c0       	rjmp	.+18     	; 0xd90 <vfprintf+0x272>
     d7e:	34 fe       	sbrs	r3, 4
     d80:	0a c0       	rjmp	.+20     	; 0xd96 <vfprintf+0x278>
     d82:	29 2f       	mov	r18, r25
     d84:	26 60       	ori	r18, 0x06	; 6
     d86:	b2 2e       	mov	r11, r18
     d88:	06 c0       	rjmp	.+12     	; 0xd96 <vfprintf+0x278>
     d8a:	28 e0       	ldi	r18, 0x08	; 8
     d8c:	30 e0       	ldi	r19, 0x00	; 0
     d8e:	05 c0       	rjmp	.+10     	; 0xd9a <vfprintf+0x27c>
     d90:	20 e1       	ldi	r18, 0x10	; 16
     d92:	30 e0       	ldi	r19, 0x00	; 0
     d94:	02 c0       	rjmp	.+4      	; 0xd9a <vfprintf+0x27c>
     d96:	20 e1       	ldi	r18, 0x10	; 16
     d98:	32 e0       	ldi	r19, 0x02	; 2
     d9a:	f8 01       	movw	r30, r16
     d9c:	b7 fe       	sbrs	r11, 7
     d9e:	07 c0       	rjmp	.+14     	; 0xdae <vfprintf+0x290>
     da0:	60 81       	ld	r22, Z
     da2:	71 81       	ldd	r23, Z+1	; 0x01
     da4:	82 81       	ldd	r24, Z+2	; 0x02
     da6:	93 81       	ldd	r25, Z+3	; 0x03
     da8:	0c 5f       	subi	r16, 0xFC	; 252
     daa:	1f 4f       	sbci	r17, 0xFF	; 255
     dac:	06 c0       	rjmp	.+12     	; 0xdba <vfprintf+0x29c>
     dae:	60 81       	ld	r22, Z
     db0:	71 81       	ldd	r23, Z+1	; 0x01
     db2:	80 e0       	ldi	r24, 0x00	; 0
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	0e 5f       	subi	r16, 0xFE	; 254
     db8:	1f 4f       	sbci	r17, 0xFF	; 255
     dba:	a3 01       	movw	r20, r6
     dbc:	0e 94 e5 07 	call	0xfca	; 0xfca <__ultoa_invert>
     dc0:	88 2e       	mov	r8, r24
     dc2:	86 18       	sub	r8, r6
     dc4:	fb 2d       	mov	r31, r11
     dc6:	ff 77       	andi	r31, 0x7F	; 127
     dc8:	3f 2e       	mov	r3, r31
     dca:	36 fe       	sbrs	r3, 6
     dcc:	0d c0       	rjmp	.+26     	; 0xde8 <vfprintf+0x2ca>
     dce:	23 2d       	mov	r18, r3
     dd0:	2e 7f       	andi	r18, 0xFE	; 254
     dd2:	a2 2e       	mov	r10, r18
     dd4:	89 14       	cp	r8, r9
     dd6:	58 f4       	brcc	.+22     	; 0xdee <vfprintf+0x2d0>
     dd8:	34 fe       	sbrs	r3, 4
     dda:	0b c0       	rjmp	.+22     	; 0xdf2 <vfprintf+0x2d4>
     ddc:	32 fc       	sbrc	r3, 2
     dde:	09 c0       	rjmp	.+18     	; 0xdf2 <vfprintf+0x2d4>
     de0:	83 2d       	mov	r24, r3
     de2:	8e 7e       	andi	r24, 0xEE	; 238
     de4:	a8 2e       	mov	r10, r24
     de6:	05 c0       	rjmp	.+10     	; 0xdf2 <vfprintf+0x2d4>
     de8:	b8 2c       	mov	r11, r8
     dea:	a3 2c       	mov	r10, r3
     dec:	03 c0       	rjmp	.+6      	; 0xdf4 <vfprintf+0x2d6>
     dee:	b8 2c       	mov	r11, r8
     df0:	01 c0       	rjmp	.+2      	; 0xdf4 <vfprintf+0x2d6>
     df2:	b9 2c       	mov	r11, r9
     df4:	a4 fe       	sbrs	r10, 4
     df6:	0f c0       	rjmp	.+30     	; 0xe16 <vfprintf+0x2f8>
     df8:	fe 01       	movw	r30, r28
     dfa:	e8 0d       	add	r30, r8
     dfc:	f1 1d       	adc	r31, r1
     dfe:	80 81       	ld	r24, Z
     e00:	80 33       	cpi	r24, 0x30	; 48
     e02:	21 f4       	brne	.+8      	; 0xe0c <vfprintf+0x2ee>
     e04:	9a 2d       	mov	r25, r10
     e06:	99 7e       	andi	r25, 0xE9	; 233
     e08:	a9 2e       	mov	r10, r25
     e0a:	09 c0       	rjmp	.+18     	; 0xe1e <vfprintf+0x300>
     e0c:	a2 fe       	sbrs	r10, 2
     e0e:	06 c0       	rjmp	.+12     	; 0xe1c <vfprintf+0x2fe>
     e10:	b3 94       	inc	r11
     e12:	b3 94       	inc	r11
     e14:	04 c0       	rjmp	.+8      	; 0xe1e <vfprintf+0x300>
     e16:	8a 2d       	mov	r24, r10
     e18:	86 78       	andi	r24, 0x86	; 134
     e1a:	09 f0       	breq	.+2      	; 0xe1e <vfprintf+0x300>
     e1c:	b3 94       	inc	r11
     e1e:	a3 fc       	sbrc	r10, 3
     e20:	11 c0       	rjmp	.+34     	; 0xe44 <vfprintf+0x326>
     e22:	a0 fe       	sbrs	r10, 0
     e24:	06 c0       	rjmp	.+12     	; 0xe32 <vfprintf+0x314>
     e26:	b2 14       	cp	r11, r2
     e28:	88 f4       	brcc	.+34     	; 0xe4c <vfprintf+0x32e>
     e2a:	28 0c       	add	r2, r8
     e2c:	92 2c       	mov	r9, r2
     e2e:	9b 18       	sub	r9, r11
     e30:	0e c0       	rjmp	.+28     	; 0xe4e <vfprintf+0x330>
     e32:	b2 14       	cp	r11, r2
     e34:	60 f4       	brcc	.+24     	; 0xe4e <vfprintf+0x330>
     e36:	b6 01       	movw	r22, r12
     e38:	80 e2       	ldi	r24, 0x20	; 32
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	0e 94 a9 07 	call	0xf52	; 0xf52 <fputc>
     e40:	b3 94       	inc	r11
     e42:	f7 cf       	rjmp	.-18     	; 0xe32 <vfprintf+0x314>
     e44:	b2 14       	cp	r11, r2
     e46:	18 f4       	brcc	.+6      	; 0xe4e <vfprintf+0x330>
     e48:	2b 18       	sub	r2, r11
     e4a:	02 c0       	rjmp	.+4      	; 0xe50 <vfprintf+0x332>
     e4c:	98 2c       	mov	r9, r8
     e4e:	21 2c       	mov	r2, r1
     e50:	a4 fe       	sbrs	r10, 4
     e52:	10 c0       	rjmp	.+32     	; 0xe74 <vfprintf+0x356>
     e54:	b6 01       	movw	r22, r12
     e56:	80 e3       	ldi	r24, 0x30	; 48
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	0e 94 a9 07 	call	0xf52	; 0xf52 <fputc>
     e5e:	a2 fe       	sbrs	r10, 2
     e60:	17 c0       	rjmp	.+46     	; 0xe90 <vfprintf+0x372>
     e62:	a1 fc       	sbrc	r10, 1
     e64:	03 c0       	rjmp	.+6      	; 0xe6c <vfprintf+0x34e>
     e66:	88 e7       	ldi	r24, 0x78	; 120
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	02 c0       	rjmp	.+4      	; 0xe70 <vfprintf+0x352>
     e6c:	88 e5       	ldi	r24, 0x58	; 88
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	b6 01       	movw	r22, r12
     e72:	0c c0       	rjmp	.+24     	; 0xe8c <vfprintf+0x36e>
     e74:	8a 2d       	mov	r24, r10
     e76:	86 78       	andi	r24, 0x86	; 134
     e78:	59 f0       	breq	.+22     	; 0xe90 <vfprintf+0x372>
     e7a:	a1 fe       	sbrs	r10, 1
     e7c:	02 c0       	rjmp	.+4      	; 0xe82 <vfprintf+0x364>
     e7e:	8b e2       	ldi	r24, 0x2B	; 43
     e80:	01 c0       	rjmp	.+2      	; 0xe84 <vfprintf+0x366>
     e82:	80 e2       	ldi	r24, 0x20	; 32
     e84:	a7 fc       	sbrc	r10, 7
     e86:	8d e2       	ldi	r24, 0x2D	; 45
     e88:	b6 01       	movw	r22, r12
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	0e 94 a9 07 	call	0xf52	; 0xf52 <fputc>
     e90:	89 14       	cp	r8, r9
     e92:	38 f4       	brcc	.+14     	; 0xea2 <vfprintf+0x384>
     e94:	b6 01       	movw	r22, r12
     e96:	80 e3       	ldi	r24, 0x30	; 48
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	0e 94 a9 07 	call	0xf52	; 0xf52 <fputc>
     e9e:	9a 94       	dec	r9
     ea0:	f7 cf       	rjmp	.-18     	; 0xe90 <vfprintf+0x372>
     ea2:	8a 94       	dec	r8
     ea4:	f3 01       	movw	r30, r6
     ea6:	e8 0d       	add	r30, r8
     ea8:	f1 1d       	adc	r31, r1
     eaa:	80 81       	ld	r24, Z
     eac:	b6 01       	movw	r22, r12
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	0e 94 a9 07 	call	0xf52	; 0xf52 <fputc>
     eb4:	81 10       	cpse	r8, r1
     eb6:	f5 cf       	rjmp	.-22     	; 0xea2 <vfprintf+0x384>
     eb8:	22 20       	and	r2, r2
     eba:	09 f4       	brne	.+2      	; 0xebe <vfprintf+0x3a0>
     ebc:	42 ce       	rjmp	.-892    	; 0xb42 <vfprintf+0x24>
     ebe:	b6 01       	movw	r22, r12
     ec0:	80 e2       	ldi	r24, 0x20	; 32
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	0e 94 a9 07 	call	0xf52	; 0xf52 <fputc>
     ec8:	2a 94       	dec	r2
     eca:	f6 cf       	rjmp	.-20     	; 0xeb8 <vfprintf+0x39a>
     ecc:	f6 01       	movw	r30, r12
     ece:	86 81       	ldd	r24, Z+6	; 0x06
     ed0:	97 81       	ldd	r25, Z+7	; 0x07
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <vfprintf+0x3ba>
     ed4:	8f ef       	ldi	r24, 0xFF	; 255
     ed6:	9f ef       	ldi	r25, 0xFF	; 255
     ed8:	2b 96       	adiw	r28, 0x0b	; 11
     eda:	e2 e1       	ldi	r30, 0x12	; 18
     edc:	0c 94 91 08 	jmp	0x1122	; 0x1122 <__epilogue_restores__>

00000ee0 <calloc>:
     ee0:	0f 93       	push	r16
     ee2:	1f 93       	push	r17
     ee4:	cf 93       	push	r28
     ee6:	df 93       	push	r29
     ee8:	86 9f       	mul	r24, r22
     eea:	80 01       	movw	r16, r0
     eec:	87 9f       	mul	r24, r23
     eee:	10 0d       	add	r17, r0
     ef0:	96 9f       	mul	r25, r22
     ef2:	10 0d       	add	r17, r0
     ef4:	11 24       	eor	r1, r1
     ef6:	c8 01       	movw	r24, r16
     ef8:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <malloc>
     efc:	ec 01       	movw	r28, r24
     efe:	00 97       	sbiw	r24, 0x00	; 0
     f00:	29 f0       	breq	.+10     	; 0xf0c <calloc+0x2c>
     f02:	a8 01       	movw	r20, r16
     f04:	60 e0       	ldi	r22, 0x00	; 0
     f06:	70 e0       	ldi	r23, 0x00	; 0
     f08:	0e 94 97 07 	call	0xf2e	; 0xf2e <memset>
     f0c:	ce 01       	movw	r24, r28
     f0e:	df 91       	pop	r29
     f10:	cf 91       	pop	r28
     f12:	1f 91       	pop	r17
     f14:	0f 91       	pop	r16
     f16:	08 95       	ret

00000f18 <strnlen_P>:
     f18:	fc 01       	movw	r30, r24
     f1a:	05 90       	lpm	r0, Z+
     f1c:	61 50       	subi	r22, 0x01	; 1
     f1e:	70 40       	sbci	r23, 0x00	; 0
     f20:	01 10       	cpse	r0, r1
     f22:	d8 f7       	brcc	.-10     	; 0xf1a <strnlen_P+0x2>
     f24:	80 95       	com	r24
     f26:	90 95       	com	r25
     f28:	8e 0f       	add	r24, r30
     f2a:	9f 1f       	adc	r25, r31
     f2c:	08 95       	ret

00000f2e <memset>:
     f2e:	dc 01       	movw	r26, r24
     f30:	01 c0       	rjmp	.+2      	; 0xf34 <memset+0x6>
     f32:	6d 93       	st	X+, r22
     f34:	41 50       	subi	r20, 0x01	; 1
     f36:	50 40       	sbci	r21, 0x00	; 0
     f38:	e0 f7       	brcc	.-8      	; 0xf32 <memset+0x4>
     f3a:	08 95       	ret

00000f3c <strnlen>:
     f3c:	fc 01       	movw	r30, r24
     f3e:	61 50       	subi	r22, 0x01	; 1
     f40:	70 40       	sbci	r23, 0x00	; 0
     f42:	01 90       	ld	r0, Z+
     f44:	01 10       	cpse	r0, r1
     f46:	d8 f7       	brcc	.-10     	; 0xf3e <strnlen+0x2>
     f48:	80 95       	com	r24
     f4a:	90 95       	com	r25
     f4c:	8e 0f       	add	r24, r30
     f4e:	9f 1f       	adc	r25, r31
     f50:	08 95       	ret

00000f52 <fputc>:
     f52:	0f 93       	push	r16
     f54:	1f 93       	push	r17
     f56:	cf 93       	push	r28
     f58:	df 93       	push	r29
     f5a:	fb 01       	movw	r30, r22
     f5c:	23 81       	ldd	r18, Z+3	; 0x03
     f5e:	21 fd       	sbrc	r18, 1
     f60:	03 c0       	rjmp	.+6      	; 0xf68 <fputc+0x16>
     f62:	8f ef       	ldi	r24, 0xFF	; 255
     f64:	9f ef       	ldi	r25, 0xFF	; 255
     f66:	2c c0       	rjmp	.+88     	; 0xfc0 <fputc+0x6e>
     f68:	22 ff       	sbrs	r18, 2
     f6a:	16 c0       	rjmp	.+44     	; 0xf98 <fputc+0x46>
     f6c:	46 81       	ldd	r20, Z+6	; 0x06
     f6e:	57 81       	ldd	r21, Z+7	; 0x07
     f70:	24 81       	ldd	r18, Z+4	; 0x04
     f72:	35 81       	ldd	r19, Z+5	; 0x05
     f74:	42 17       	cp	r20, r18
     f76:	53 07       	cpc	r21, r19
     f78:	44 f4       	brge	.+16     	; 0xf8a <fputc+0x38>
     f7a:	a0 81       	ld	r26, Z
     f7c:	b1 81       	ldd	r27, Z+1	; 0x01
     f7e:	9d 01       	movw	r18, r26
     f80:	2f 5f       	subi	r18, 0xFF	; 255
     f82:	3f 4f       	sbci	r19, 0xFF	; 255
     f84:	31 83       	std	Z+1, r19	; 0x01
     f86:	20 83       	st	Z, r18
     f88:	8c 93       	st	X, r24
     f8a:	26 81       	ldd	r18, Z+6	; 0x06
     f8c:	37 81       	ldd	r19, Z+7	; 0x07
     f8e:	2f 5f       	subi	r18, 0xFF	; 255
     f90:	3f 4f       	sbci	r19, 0xFF	; 255
     f92:	37 83       	std	Z+7, r19	; 0x07
     f94:	26 83       	std	Z+6, r18	; 0x06
     f96:	14 c0       	rjmp	.+40     	; 0xfc0 <fputc+0x6e>
     f98:	8b 01       	movw	r16, r22
     f9a:	ec 01       	movw	r28, r24
     f9c:	fb 01       	movw	r30, r22
     f9e:	00 84       	ldd	r0, Z+8	; 0x08
     fa0:	f1 85       	ldd	r31, Z+9	; 0x09
     fa2:	e0 2d       	mov	r30, r0
     fa4:	09 95       	icall
     fa6:	89 2b       	or	r24, r25
     fa8:	e1 f6       	brne	.-72     	; 0xf62 <fputc+0x10>
     faa:	d8 01       	movw	r26, r16
     fac:	16 96       	adiw	r26, 0x06	; 6
     fae:	8d 91       	ld	r24, X+
     fb0:	9c 91       	ld	r25, X
     fb2:	17 97       	sbiw	r26, 0x07	; 7
     fb4:	01 96       	adiw	r24, 0x01	; 1
     fb6:	17 96       	adiw	r26, 0x07	; 7
     fb8:	9c 93       	st	X, r25
     fba:	8e 93       	st	-X, r24
     fbc:	16 97       	sbiw	r26, 0x06	; 6
     fbe:	ce 01       	movw	r24, r28
     fc0:	df 91       	pop	r29
     fc2:	cf 91       	pop	r28
     fc4:	1f 91       	pop	r17
     fc6:	0f 91       	pop	r16
     fc8:	08 95       	ret

00000fca <__ultoa_invert>:
     fca:	fa 01       	movw	r30, r20
     fcc:	aa 27       	eor	r26, r26
     fce:	28 30       	cpi	r18, 0x08	; 8
     fd0:	51 f1       	breq	.+84     	; 0x1026 <__ultoa_invert+0x5c>
     fd2:	20 31       	cpi	r18, 0x10	; 16
     fd4:	81 f1       	breq	.+96     	; 0x1036 <__ultoa_invert+0x6c>
     fd6:	e8 94       	clt
     fd8:	6f 93       	push	r22
     fda:	6e 7f       	andi	r22, 0xFE	; 254
     fdc:	6e 5f       	subi	r22, 0xFE	; 254
     fde:	7f 4f       	sbci	r23, 0xFF	; 255
     fe0:	8f 4f       	sbci	r24, 0xFF	; 255
     fe2:	9f 4f       	sbci	r25, 0xFF	; 255
     fe4:	af 4f       	sbci	r26, 0xFF	; 255
     fe6:	b1 e0       	ldi	r27, 0x01	; 1
     fe8:	3e d0       	rcall	.+124    	; 0x1066 <__ultoa_invert+0x9c>
     fea:	b4 e0       	ldi	r27, 0x04	; 4
     fec:	3c d0       	rcall	.+120    	; 0x1066 <__ultoa_invert+0x9c>
     fee:	67 0f       	add	r22, r23
     ff0:	78 1f       	adc	r23, r24
     ff2:	89 1f       	adc	r24, r25
     ff4:	9a 1f       	adc	r25, r26
     ff6:	a1 1d       	adc	r26, r1
     ff8:	68 0f       	add	r22, r24
     ffa:	79 1f       	adc	r23, r25
     ffc:	8a 1f       	adc	r24, r26
     ffe:	91 1d       	adc	r25, r1
    1000:	a1 1d       	adc	r26, r1
    1002:	6a 0f       	add	r22, r26
    1004:	71 1d       	adc	r23, r1
    1006:	81 1d       	adc	r24, r1
    1008:	91 1d       	adc	r25, r1
    100a:	a1 1d       	adc	r26, r1
    100c:	20 d0       	rcall	.+64     	; 0x104e <__ultoa_invert+0x84>
    100e:	09 f4       	brne	.+2      	; 0x1012 <__ultoa_invert+0x48>
    1010:	68 94       	set
    1012:	3f 91       	pop	r19
    1014:	2a e0       	ldi	r18, 0x0A	; 10
    1016:	26 9f       	mul	r18, r22
    1018:	11 24       	eor	r1, r1
    101a:	30 19       	sub	r19, r0
    101c:	30 5d       	subi	r19, 0xD0	; 208
    101e:	31 93       	st	Z+, r19
    1020:	de f6       	brtc	.-74     	; 0xfd8 <__ultoa_invert+0xe>
    1022:	cf 01       	movw	r24, r30
    1024:	08 95       	ret
    1026:	46 2f       	mov	r20, r22
    1028:	47 70       	andi	r20, 0x07	; 7
    102a:	40 5d       	subi	r20, 0xD0	; 208
    102c:	41 93       	st	Z+, r20
    102e:	b3 e0       	ldi	r27, 0x03	; 3
    1030:	0f d0       	rcall	.+30     	; 0x1050 <__ultoa_invert+0x86>
    1032:	c9 f7       	brne	.-14     	; 0x1026 <__ultoa_invert+0x5c>
    1034:	f6 cf       	rjmp	.-20     	; 0x1022 <__ultoa_invert+0x58>
    1036:	46 2f       	mov	r20, r22
    1038:	4f 70       	andi	r20, 0x0F	; 15
    103a:	40 5d       	subi	r20, 0xD0	; 208
    103c:	4a 33       	cpi	r20, 0x3A	; 58
    103e:	18 f0       	brcs	.+6      	; 0x1046 <__ultoa_invert+0x7c>
    1040:	49 5d       	subi	r20, 0xD9	; 217
    1042:	31 fd       	sbrc	r19, 1
    1044:	40 52       	subi	r20, 0x20	; 32
    1046:	41 93       	st	Z+, r20
    1048:	02 d0       	rcall	.+4      	; 0x104e <__ultoa_invert+0x84>
    104a:	a9 f7       	brne	.-22     	; 0x1036 <__ultoa_invert+0x6c>
    104c:	ea cf       	rjmp	.-44     	; 0x1022 <__ultoa_invert+0x58>
    104e:	b4 e0       	ldi	r27, 0x04	; 4
    1050:	a6 95       	lsr	r26
    1052:	97 95       	ror	r25
    1054:	87 95       	ror	r24
    1056:	77 95       	ror	r23
    1058:	67 95       	ror	r22
    105a:	ba 95       	dec	r27
    105c:	c9 f7       	brne	.-14     	; 0x1050 <__ultoa_invert+0x86>
    105e:	00 97       	sbiw	r24, 0x00	; 0
    1060:	61 05       	cpc	r22, r1
    1062:	71 05       	cpc	r23, r1
    1064:	08 95       	ret
    1066:	9b 01       	movw	r18, r22
    1068:	ac 01       	movw	r20, r24
    106a:	0a 2e       	mov	r0, r26
    106c:	06 94       	lsr	r0
    106e:	57 95       	ror	r21
    1070:	47 95       	ror	r20
    1072:	37 95       	ror	r19
    1074:	27 95       	ror	r18
    1076:	ba 95       	dec	r27
    1078:	c9 f7       	brne	.-14     	; 0x106c <__ultoa_invert+0xa2>
    107a:	62 0f       	add	r22, r18
    107c:	73 1f       	adc	r23, r19
    107e:	84 1f       	adc	r24, r20
    1080:	95 1f       	adc	r25, r21
    1082:	a0 1d       	adc	r26, r0
    1084:	08 95       	ret

00001086 <__divmodsi4>:
    1086:	05 2e       	mov	r0, r21
    1088:	97 fb       	bst	r25, 7
    108a:	1e f4       	brtc	.+6      	; 0x1092 <__divmodsi4+0xc>
    108c:	00 94       	com	r0
    108e:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <__negsi2>
    1092:	57 fd       	sbrc	r21, 7
    1094:	07 d0       	rcall	.+14     	; 0x10a4 <__divmodsi4_neg2>
    1096:	0e 94 ac 08 	call	0x1158	; 0x1158 <__udivmodsi4>
    109a:	07 fc       	sbrc	r0, 7
    109c:	03 d0       	rcall	.+6      	; 0x10a4 <__divmodsi4_neg2>
    109e:	4e f4       	brtc	.+18     	; 0x10b2 <__divmodsi4_exit>
    10a0:	0c 94 5a 08 	jmp	0x10b4	; 0x10b4 <__negsi2>

000010a4 <__divmodsi4_neg2>:
    10a4:	50 95       	com	r21
    10a6:	40 95       	com	r20
    10a8:	30 95       	com	r19
    10aa:	21 95       	neg	r18
    10ac:	3f 4f       	sbci	r19, 0xFF	; 255
    10ae:	4f 4f       	sbci	r20, 0xFF	; 255
    10b0:	5f 4f       	sbci	r21, 0xFF	; 255

000010b2 <__divmodsi4_exit>:
    10b2:	08 95       	ret

000010b4 <__negsi2>:
    10b4:	90 95       	com	r25
    10b6:	80 95       	com	r24
    10b8:	70 95       	com	r23
    10ba:	61 95       	neg	r22
    10bc:	7f 4f       	sbci	r23, 0xFF	; 255
    10be:	8f 4f       	sbci	r24, 0xFF	; 255
    10c0:	9f 4f       	sbci	r25, 0xFF	; 255
    10c2:	08 95       	ret

000010c4 <__muluhisi3>:
    10c4:	0e 94 ce 08 	call	0x119c	; 0x119c <__umulhisi3>
    10c8:	a5 9f       	mul	r26, r21
    10ca:	90 0d       	add	r25, r0
    10cc:	b4 9f       	mul	r27, r20
    10ce:	90 0d       	add	r25, r0
    10d0:	a4 9f       	mul	r26, r20
    10d2:	80 0d       	add	r24, r0
    10d4:	91 1d       	adc	r25, r1
    10d6:	11 24       	eor	r1, r1
    10d8:	08 95       	ret

000010da <__mulshisi3>:
    10da:	b7 ff       	sbrs	r27, 7
    10dc:	0c 94 62 08 	jmp	0x10c4	; 0x10c4 <__muluhisi3>

000010e0 <__mulohisi3>:
    10e0:	0e 94 62 08 	call	0x10c4	; 0x10c4 <__muluhisi3>
    10e4:	82 1b       	sub	r24, r18
    10e6:	93 0b       	sbc	r25, r19
    10e8:	08 95       	ret

000010ea <__prologue_saves__>:
    10ea:	2f 92       	push	r2
    10ec:	3f 92       	push	r3
    10ee:	4f 92       	push	r4
    10f0:	5f 92       	push	r5
    10f2:	6f 92       	push	r6
    10f4:	7f 92       	push	r7
    10f6:	8f 92       	push	r8
    10f8:	9f 92       	push	r9
    10fa:	af 92       	push	r10
    10fc:	bf 92       	push	r11
    10fe:	cf 92       	push	r12
    1100:	df 92       	push	r13
    1102:	ef 92       	push	r14
    1104:	ff 92       	push	r15
    1106:	0f 93       	push	r16
    1108:	1f 93       	push	r17
    110a:	cf 93       	push	r28
    110c:	df 93       	push	r29
    110e:	cd b7       	in	r28, 0x3d	; 61
    1110:	de b7       	in	r29, 0x3e	; 62
    1112:	ca 1b       	sub	r28, r26
    1114:	db 0b       	sbc	r29, r27
    1116:	0f b6       	in	r0, 0x3f	; 63
    1118:	f8 94       	cli
    111a:	de bf       	out	0x3e, r29	; 62
    111c:	0f be       	out	0x3f, r0	; 63
    111e:	cd bf       	out	0x3d, r28	; 61
    1120:	09 94       	ijmp

00001122 <__epilogue_restores__>:
    1122:	2a 88       	ldd	r2, Y+18	; 0x12
    1124:	39 88       	ldd	r3, Y+17	; 0x11
    1126:	48 88       	ldd	r4, Y+16	; 0x10
    1128:	5f 84       	ldd	r5, Y+15	; 0x0f
    112a:	6e 84       	ldd	r6, Y+14	; 0x0e
    112c:	7d 84       	ldd	r7, Y+13	; 0x0d
    112e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1130:	9b 84       	ldd	r9, Y+11	; 0x0b
    1132:	aa 84       	ldd	r10, Y+10	; 0x0a
    1134:	b9 84       	ldd	r11, Y+9	; 0x09
    1136:	c8 84       	ldd	r12, Y+8	; 0x08
    1138:	df 80       	ldd	r13, Y+7	; 0x07
    113a:	ee 80       	ldd	r14, Y+6	; 0x06
    113c:	fd 80       	ldd	r15, Y+5	; 0x05
    113e:	0c 81       	ldd	r16, Y+4	; 0x04
    1140:	1b 81       	ldd	r17, Y+3	; 0x03
    1142:	aa 81       	ldd	r26, Y+2	; 0x02
    1144:	b9 81       	ldd	r27, Y+1	; 0x01
    1146:	ce 0f       	add	r28, r30
    1148:	d1 1d       	adc	r29, r1
    114a:	0f b6       	in	r0, 0x3f	; 63
    114c:	f8 94       	cli
    114e:	de bf       	out	0x3e, r29	; 62
    1150:	0f be       	out	0x3f, r0	; 63
    1152:	cd bf       	out	0x3d, r28	; 61
    1154:	ed 01       	movw	r28, r26
    1156:	08 95       	ret

00001158 <__udivmodsi4>:
    1158:	a1 e2       	ldi	r26, 0x21	; 33
    115a:	1a 2e       	mov	r1, r26
    115c:	aa 1b       	sub	r26, r26
    115e:	bb 1b       	sub	r27, r27
    1160:	fd 01       	movw	r30, r26
    1162:	0d c0       	rjmp	.+26     	; 0x117e <__udivmodsi4_ep>

00001164 <__udivmodsi4_loop>:
    1164:	aa 1f       	adc	r26, r26
    1166:	bb 1f       	adc	r27, r27
    1168:	ee 1f       	adc	r30, r30
    116a:	ff 1f       	adc	r31, r31
    116c:	a2 17       	cp	r26, r18
    116e:	b3 07       	cpc	r27, r19
    1170:	e4 07       	cpc	r30, r20
    1172:	f5 07       	cpc	r31, r21
    1174:	20 f0       	brcs	.+8      	; 0x117e <__udivmodsi4_ep>
    1176:	a2 1b       	sub	r26, r18
    1178:	b3 0b       	sbc	r27, r19
    117a:	e4 0b       	sbc	r30, r20
    117c:	f5 0b       	sbc	r31, r21

0000117e <__udivmodsi4_ep>:
    117e:	66 1f       	adc	r22, r22
    1180:	77 1f       	adc	r23, r23
    1182:	88 1f       	adc	r24, r24
    1184:	99 1f       	adc	r25, r25
    1186:	1a 94       	dec	r1
    1188:	69 f7       	brne	.-38     	; 0x1164 <__udivmodsi4_loop>
    118a:	60 95       	com	r22
    118c:	70 95       	com	r23
    118e:	80 95       	com	r24
    1190:	90 95       	com	r25
    1192:	9b 01       	movw	r18, r22
    1194:	ac 01       	movw	r20, r24
    1196:	bd 01       	movw	r22, r26
    1198:	cf 01       	movw	r24, r30
    119a:	08 95       	ret

0000119c <__umulhisi3>:
    119c:	a2 9f       	mul	r26, r18
    119e:	b0 01       	movw	r22, r0
    11a0:	b3 9f       	mul	r27, r19
    11a2:	c0 01       	movw	r24, r0
    11a4:	a3 9f       	mul	r26, r19
    11a6:	70 0d       	add	r23, r0
    11a8:	81 1d       	adc	r24, r1
    11aa:	11 24       	eor	r1, r1
    11ac:	91 1d       	adc	r25, r1
    11ae:	b2 9f       	mul	r27, r18
    11b0:	70 0d       	add	r23, r0
    11b2:	81 1d       	adc	r24, r1
    11b4:	11 24       	eor	r1, r1
    11b6:	91 1d       	adc	r25, r1
    11b8:	08 95       	ret

000011ba <_exit>:
    11ba:	f8 94       	cli

000011bc <__stop_program>:
    11bc:	ff cf       	rjmp	.-2      	; 0x11bc <__stop_program>
