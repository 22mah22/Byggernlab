
ice_ice.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000136  00800100  00001d38  00001dcc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001d38  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  00800236  00800236  00001f02  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001f02  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001f60  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000268  00000000  00000000  00001f9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003126  00000000  00000000  00002204  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000013d1  00000000  00000000  0000532a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000015a3  00000000  00000000  000066fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000630  00000000  00000000  00007ca0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a86  00000000  00000000  000082d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001ecd  00000000  00000000  00008d56  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000328  00000000  00000000  0000ac23  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 60 03 	jmp	0x6c0	; 0x6c0 <__ctors_end>
       4:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
       8:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
       c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      10:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      14:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      18:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      1c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      20:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      24:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      28:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      2c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      30:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      34:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      38:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      3c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      40:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      44:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      48:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      4c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      50:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      54:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      58:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      5c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      60:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      64:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      68:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      6c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	00 00       	nop
      72:	00 00       	nop
      74:	00 5c       	subi	r16, 0xC0	; 192
      76:	00 00       	nop
      78:	0c 00       	.word	0x000c	; ????
      7a:	0c 00       	.word	0x000c	; ????
      7c:	7c 28       	or	r7, r12
      7e:	7c 28       	or	r7, r12
      80:	58 dc       	rcall	.-1872   	; 0xfffff932 <__eeprom_end+0xff7ef932>
      82:	68 00       	.word	0x0068	; ????
      84:	24 10       	cpse	r2, r4
      86:	48 00       	.word	0x0048	; ????
      88:	28 54       	subi	r18, 0x48	; 72
      8a:	28 40       	sbci	r18, 0x08	; 8
      8c:	00 0c       	add	r0, r0
      8e:	00 00       	nop
      90:	00 78       	andi	r16, 0x80	; 128
      92:	84 00       	.word	0x0084	; ????
      94:	84 78       	andi	r24, 0x84	; 132
      96:	00 00       	nop
      98:	54 38       	cpi	r21, 0x84	; 132
      9a:	54 00       	.word	0x0054	; ????
      9c:	10 7c       	andi	r17, 0xC0	; 192
      9e:	10 00       	.word	0x0010	; ????
      a0:	80 40       	sbci	r24, 0x00	; 0
      a2:	00 00       	nop
      a4:	10 10       	cpse	r1, r0
      a6:	10 00       	.word	0x0010	; ????
      a8:	00 40       	sbci	r16, 0x00	; 0
      aa:	00 00       	nop
      ac:	60 10       	cpse	r6, r0
      ae:	0c 00       	.word	0x000c	; ????
      b0:	38 54       	subi	r19, 0x48	; 72
      b2:	38 00       	.word	0x0038	; ????
      b4:	48 7c       	andi	r20, 0xC8	; 200
      b6:	40 00       	.word	0x0040	; ????
      b8:	48 64       	ori	r20, 0x48	; 72
      ba:	58 00       	.word	0x0058	; ????
      bc:	44 54       	subi	r20, 0x44	; 68
      be:	2c 00       	.word	0x002c	; ????
      c0:	1c 10       	cpse	r1, r12
      c2:	7c 00       	.word	0x007c	; ????
      c4:	5c 54       	subi	r21, 0x4C	; 76
      c6:	24 00       	.word	0x0024	; ????
      c8:	38 54       	subi	r19, 0x48	; 72
      ca:	24 00       	.word	0x0024	; ????
      cc:	64 14       	cp	r6, r4
      ce:	0c 00       	.word	0x000c	; ????
      d0:	68 54       	subi	r22, 0x48	; 72
      d2:	2c 00       	.word	0x002c	; ????
      d4:	48 54       	subi	r20, 0x48	; 72
      d6:	38 00       	.word	0x0038	; ????
      d8:	00 48       	sbci	r16, 0x80	; 128
      da:	00 00       	nop
      dc:	80 48       	sbci	r24, 0x80	; 128
      de:	00 00       	nop
      e0:	10 28       	or	r1, r0
      e2:	44 00       	.word	0x0044	; ????
      e4:	28 28       	or	r2, r8
      e6:	28 00       	.word	0x0028	; ????
      e8:	44 28       	or	r4, r4
      ea:	10 00       	.word	0x0010	; ????
      ec:	04 54       	subi	r16, 0x44	; 68
      ee:	08 00       	.word	0x0008	; ????
      f0:	38 44       	sbci	r19, 0x48	; 72
      f2:	5c 00       	.word	0x005c	; ????
      f4:	78 14       	cp	r7, r8
      f6:	78 00       	.word	0x0078	; ????
      f8:	7c 54       	subi	r23, 0x4C	; 76
      fa:	28 00       	.word	0x0028	; ????
      fc:	38 44       	sbci	r19, 0x48	; 72
      fe:	28 00       	.word	0x0028	; ????
     100:	7c 44       	sbci	r23, 0x4C	; 76
     102:	38 00       	.word	0x0038	; ????
     104:	7c 54       	subi	r23, 0x4C	; 76
     106:	44 00       	.word	0x0044	; ????
     108:	7c 14       	cp	r7, r12
     10a:	04 00       	.word	0x0004	; ????
     10c:	38 44       	sbci	r19, 0x48	; 72
     10e:	74 00       	.word	0x0074	; ????
     110:	7c 10       	cpse	r7, r12
     112:	7c 00       	.word	0x007c	; ????
     114:	44 7c       	andi	r20, 0xC4	; 196
     116:	44 00       	.word	0x0044	; ????
     118:	20 40       	sbci	r18, 0x00	; 0
     11a:	3c 00       	.word	0x003c	; ????
     11c:	7c 10       	cpse	r7, r12
     11e:	6c 00       	.word	0x006c	; ????
     120:	7c 40       	sbci	r23, 0x0C	; 12
     122:	40 00       	.word	0x0040	; ????
     124:	7c 18       	sub	r7, r12
     126:	7c 00       	.word	0x007c	; ????
     128:	78 10       	cpse	r7, r8
     12a:	3c 00       	.word	0x003c	; ????
     12c:	38 44       	sbci	r19, 0x48	; 72
     12e:	38 00       	.word	0x0038	; ????
     130:	7c 14       	cp	r7, r12
     132:	08 00       	.word	0x0008	; ????
     134:	38 44       	sbci	r19, 0x48	; 72
     136:	b8 00       	.word	0x00b8	; ????
     138:	7c 14       	cp	r7, r12
     13a:	68 00       	.word	0x0068	; ????
     13c:	48 54       	subi	r20, 0x48	; 72
     13e:	24 00       	.word	0x0024	; ????
     140:	04 7c       	andi	r16, 0xC4	; 196
     142:	04 00       	.word	0x0004	; ????
     144:	7c 40       	sbci	r23, 0x0C	; 12
     146:	7c 00       	.word	0x007c	; ????
     148:	3c 60       	ori	r19, 0x0C	; 12
     14a:	3c 00       	.word	0x003c	; ????
     14c:	7c 30       	cpi	r23, 0x0C	; 12
     14e:	7c 00       	.word	0x007c	; ????
     150:	6c 10       	cpse	r6, r12
     152:	6c 00       	.word	0x006c	; ????
     154:	0c 70       	andi	r16, 0x0C	; 12
     156:	0c 00       	.word	0x000c	; ????
     158:	64 54       	subi	r22, 0x44	; 68
     15a:	4c 00       	.word	0x004c	; ????
     15c:	00 7c       	andi	r16, 0xC0	; 192
     15e:	44 00       	.word	0x0044	; ????
     160:	0c 10       	cpse	r0, r12
     162:	60 00       	.word	0x0060	; ????
     164:	44 7c       	andi	r20, 0xC4	; 196
     166:	00 00       	nop
     168:	08 04       	cpc	r0, r8
     16a:	08 00       	.word	0x0008	; ????
     16c:	80 80       	ld	r8, Z
     16e:	80 00       	.word	0x0080	; ????
     170:	00 04       	cpc	r0, r0
     172:	08 00       	.word	0x0008	; ????
     174:	30 48       	sbci	r19, 0x80	; 128
     176:	78 00       	.word	0x0078	; ????
     178:	7c 48       	sbci	r23, 0x8C	; 140
     17a:	30 00       	.word	0x0030	; ????
     17c:	30 48       	sbci	r19, 0x80	; 128
     17e:	48 00       	.word	0x0048	; ????
     180:	30 48       	sbci	r19, 0x80	; 128
     182:	7c 00       	.word	0x007c	; ????
     184:	30 68       	ori	r19, 0x80	; 128
     186:	50 00       	.word	0x0050	; ????
     188:	10 78       	andi	r17, 0x80	; 128
     18a:	14 00       	.word	0x0014	; ????
     18c:	90 a8       	ldd	r9, Z+48	; 0x30
     18e:	78 00       	.word	0x0078	; ????
     190:	7c 08       	sbc	r7, r12
     192:	70 00       	.word	0x0070	; ????
     194:	50 74       	andi	r21, 0x40	; 64
     196:	40 00       	.word	0x0040	; ????
     198:	80 80       	ld	r8, Z
     19a:	74 00       	.word	0x0074	; ????
     19c:	7c 10       	cpse	r7, r12
     19e:	68 00       	.word	0x0068	; ????
     1a0:	44 7c       	andi	r20, 0xC4	; 196
     1a2:	40 00       	.word	0x0040	; ????
     1a4:	78 10       	cpse	r7, r8
     1a6:	78 00       	.word	0x0078	; ????
     1a8:	78 08       	sbc	r7, r8
     1aa:	70 00       	.word	0x0070	; ????
     1ac:	30 48       	sbci	r19, 0x80	; 128
     1ae:	30 00       	.word	0x0030	; ????
     1b0:	f8 28       	or	r15, r8
     1b2:	10 00       	.word	0x0010	; ????
     1b4:	30 48       	sbci	r19, 0x80	; 128
     1b6:	f8 00       	.word	0x00f8	; ????
     1b8:	78 10       	cpse	r7, r8
     1ba:	08 00       	.word	0x0008	; ????
     1bc:	50 58       	subi	r21, 0x80	; 128
     1be:	28 00       	.word	0x0028	; ????
     1c0:	08 3c       	cpi	r16, 0xC8	; 200
     1c2:	48 00       	.word	0x0048	; ????
     1c4:	38 40       	sbci	r19, 0x08	; 8
     1c6:	78 00       	.word	0x0078	; ????
     1c8:	38 40       	sbci	r19, 0x08	; 8
     1ca:	38 00       	.word	0x0038	; ????
     1cc:	78 20       	and	r7, r8
     1ce:	78 00       	.word	0x0078	; ????
     1d0:	48 30       	cpi	r20, 0x08	; 8
     1d2:	48 00       	.word	0x0048	; ????
     1d4:	98 a0       	ldd	r9, Y+32	; 0x20
     1d6:	78 00       	.word	0x0078	; ????
     1d8:	48 68       	ori	r20, 0x88	; 136
     1da:	58 00       	.word	0x0058	; ????
     1dc:	10 78       	andi	r17, 0x80	; 128
     1de:	84 00       	.word	0x0084	; ????
     1e0:	00 7c       	andi	r16, 0xC0	; 192
     1e2:	00 00       	nop
     1e4:	84 78       	andi	r24, 0x84	; 132
     1e6:	10 00       	.word	0x0010	; ????
     1e8:	08 04       	cpc	r0, r8
     1ea:	08 04       	cpc	r0, r8

000001ec <font5>:
     1ec:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     1fc:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     20c:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
     21c:	1c 00 08 2a 1c 2a 08 08 08 3e 08 08 00 50 30 00     ...*.*...>...P0.
     22c:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
     23c:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
     24c:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
     25c:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
     26c:	29 1e 00 36 36 00 00 00 56 36 00 00 00 08 14 22     )..66...V6....."
     27c:	41 14 14 14 14 14 41 22 14 08 00 02 01 51 09 06     A.....A".....Q..
     28c:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     29c:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     2ac:	09 01 01 3e 41 41 51 32 7f 08 08 08 7f 00 41 7f     ...>AAQ2......A.
     2bc:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     2cc:	40 7f 02 04 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     2dc:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     2ec:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     2fc:	40 20 1f 7f 20 18 20 7f 63 14 08 14 63 03 04 78     @ .. . .c...c..x
     30c:	04 03 61 51 49 45 43 00 00 7f 41 41 02 04 08 10     ..aQIEC...AA....
     31c:	20 41 41 7f 00 00 04 02 01 02 04 40 40 40 40 40      AA........@@@@@
     32c:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     33c:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     34c:	09 01 02 08 14 54 54 3c 7f 08 04 04 78 00 44 7d     .....TT<....x.D}
     35c:	40 00 20 40 44 3d 00 00 7f 10 28 44 00 41 7f 40     @. @D=....(D.A.@
     36c:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     37c:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     38c:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     39c:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     3ac:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     3bc:	00 00 41 36 08 00 02 01 03 02 01                    ..A6.......

000003c7 <font8>:
	...
     3cf:	00 06 5f 5f 06 00 00 00 00 07 07 00 07 07 00 00     ..__............
     3df:	14 7f 7f 14 7f 7f 14 00 24 2e 6b 6b 3a 12 00 00     ........$.kk:...
     3ef:	46 66 30 18 0c 66 62 00 30 7a 4f 5d 37 7a 48 00     Ff0..fb.0zO]7zH.
     3ff:	04 07 03 00 00 00 00 00 00 1c 3e 63 41 00 00 00     ..........>cA...
     40f:	00 41 63 3e 1c 00 00 00 08 2a 3e 1c 1c 3e 2a 08     .Ac>.....*>..>*.
     41f:	08 08 3e 3e 08 08 00 00 00 a0 e0 60 00 00 00 00     ..>>.......`....
     42f:	08 08 08 08 08 08 00 00 00 00 60 60 00 00 00 00     ..........``....
     43f:	60 30 18 0c 06 03 01 00 3e 7f 59 4d 7f 3e 00 00     `0......>.YM.>..
     44f:	42 42 7f 7f 40 40 00 00 62 73 59 49 6f 66 00 00     BB..@@..bsYIof..
     45f:	22 63 49 49 7f 36 00 00 18 1c 16 13 7f 7f 10 00     "cII.6..........
     46f:	27 67 45 45 7d 39 00 00 3c 7e 4b 49 79 30 00 00     'gEE}9..<~KIy0..
     47f:	03 63 71 19 0f 07 00 00 36 7f 49 49 7f 36 00 00     .cq.....6.II.6..
     48f:	06 4f 49 69 3f 1e 00 00 00 00 6c 6c 00 00 00 00     .OIi?.....ll....
     49f:	00 a0 ec 6c 00 00 00 00 08 1c 36 63 41 00 00 00     ...l......6cA...
     4af:	14 14 14 14 14 14 00 00 00 41 63 36 1c 08 00 00     .........Ac6....
     4bf:	02 03 51 59 0f 06 00 00 3e 7f 41 5d 5d 1f 1e 00     ..QY....>.A]]...
     4cf:	7c 7e 13 13 7e 7c 00 00 41 7f 7f 49 49 7f 36 00     |~..~|..A..II.6.
     4df:	1c 3e 63 41 41 63 22 00 41 7f 7f 41 63 7f 1c 00     .>cAAc".A..Ac...
     4ef:	41 7f 7f 49 5d 41 63 00 41 7f 7f 49 1d 01 03 00     A..I]Ac.A..I....
     4ff:	1c 3e 63 41 51 73 72 00 7f 7f 08 08 7f 7f 00 00     .>cAQsr.........
     50f:	00 41 7f 7f 41 00 00 00 30 70 40 41 7f 3f 01 00     .A..A...0p@A.?..
     51f:	41 7f 7f 08 1c 77 63 00 41 7f 7f 41 40 60 70 00     A....wc.A..A@`p.
     52f:	7f 7f 06 0c 06 7f 7f 00 7f 7f 06 0c 18 7f 7f 00     ................
     53f:	1c 3e 63 41 63 3e 1c 00 41 7f 7f 49 09 0f 06 00     .>cAc>..A..I....
     54f:	1e 3f 21 71 7f 5e 00 00 41 7f 7f 19 39 6f 46 00     .?!q.^..A...9oF.
     55f:	26 67 4d 59 7b 32 00 00 03 41 7f 7f 41 03 00 00     &gMY{2...A..A...
     56f:	7f 7f 40 40 7f 7f 00 00 1f 3f 60 60 3f 1f 00 00     ..@@.....?``?...
     57f:	7f 7f 30 18 30 7f 7f 00 63 77 1c 08 1c 77 63 00     ..0.0...cw...wc.
     58f:	07 4f 78 78 4f 07 00 00 67 73 59 4d 47 63 71 00     .OxxO...gsYMGcq.
     59f:	00 7f 7f 41 41 00 00 00 01 03 06 0c 18 30 60 00     ...AA........0`.
     5af:	00 41 41 7f 7f 00 00 00 08 0c 06 03 06 0c 08 00     .AA.............
     5bf:	80 80 80 80 80 80 80 80 00 00 03 07 04 00 00 00     ................
     5cf:	20 74 54 54 3c 78 40 00 41 3f 7f 44 44 7c 38 00      tTT<x@.A?.DD|8.
     5df:	38 7c 44 44 6c 28 00 00 30 78 48 49 3f 7f 40 00     8|DDl(..0xHI?.@.
     5ef:	38 7c 54 54 5c 18 00 00 48 7e 7f 49 03 02 00 00     8|TT\...H~.I....
     5ff:	98 bc a4 a4 f8 7c 04 00 41 7f 7f 08 04 7c 78 00     .....|..A....|x.
     60f:	00 44 7d 7d 40 00 00 00 40 c4 84 fd 7d 00 00 00     .D}}@...@...}...
     61f:	41 7f 7f 10 38 6c 44 00 00 41 7f 7f 40 00 00 00     A...8lD..A..@...
     62f:	7c 7c 0c 18 0c 7c 78 00 7c 7c 04 04 7c 78 00 00     ||...|x.||..|x..
     63f:	38 7c 44 44 7c 38 00 00 84 fc f8 a4 24 3c 18 00     8|DD|8......$<..
     64f:	18 3c 24 a4 f8 fc 84 00 44 7c 78 44 1c 18 00 00     .<$.....D|xD....
     65f:	48 5c 54 54 74 24 00 00 00 04 3e 7f 44 24 00 00     H\TTt$....>.D$..
     66f:	3c 7c 40 40 3c 7c 40 00 1c 3c 60 60 3c 1c 00 00     <|@@<|@..<``<...
     67f:	3c 7c 60 30 60 7c 3c 00 44 6c 38 10 38 6c 44 00     <|`0`|<.Dl8.8lD.
     68f:	9c bc a0 a0 fc 7c 00 00 4c 64 74 5c 4c 64 00 00     .....|..Ldt\Ld..
     69f:	08 08 3e 77 41 41 00 00 00 00 00 77 77 00 00 00     ..>wAA.....ww...
     6af:	41 41 77 3e 08 08 00 00 02 03 01 03 02 03 01 00     AAw>............
	...

000006c0 <__ctors_end>:
     6c0:	11 24       	eor	r1, r1
     6c2:	1f be       	out	0x3f, r1	; 63
     6c4:	cf ef       	ldi	r28, 0xFF	; 255
     6c6:	d4 e0       	ldi	r29, 0x04	; 4
     6c8:	de bf       	out	0x3e, r29	; 62
     6ca:	cd bf       	out	0x3d, r28	; 61

000006cc <__do_copy_data>:
     6cc:	12 e0       	ldi	r17, 0x02	; 2
     6ce:	a0 e0       	ldi	r26, 0x00	; 0
     6d0:	b1 e0       	ldi	r27, 0x01	; 1
     6d2:	e8 e3       	ldi	r30, 0x38	; 56
     6d4:	fd e1       	ldi	r31, 0x1D	; 29
     6d6:	02 c0       	rjmp	.+4      	; 0x6dc <__do_copy_data+0x10>
     6d8:	05 90       	lpm	r0, Z+
     6da:	0d 92       	st	X+, r0
     6dc:	a6 33       	cpi	r26, 0x36	; 54
     6de:	b1 07       	cpc	r27, r17
     6e0:	d9 f7       	brne	.-10     	; 0x6d8 <__do_copy_data+0xc>

000006e2 <__do_clear_bss>:
     6e2:	22 e0       	ldi	r18, 0x02	; 2
     6e4:	a6 e3       	ldi	r26, 0x36	; 54
     6e6:	b2 e0       	ldi	r27, 0x02	; 2
     6e8:	01 c0       	rjmp	.+2      	; 0x6ec <.do_clear_bss_start>

000006ea <.do_clear_bss_loop>:
     6ea:	1d 92       	st	X+, r1

000006ec <.do_clear_bss_start>:
     6ec:	a5 34       	cpi	r26, 0x45	; 69
     6ee:	b2 07       	cpc	r27, r18
     6f0:	e1 f7       	brne	.-8      	; 0x6ea <.do_clear_bss_loop>
     6f2:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <main>
     6f6:	0c 94 9a 0e 	jmp	0x1d34	; 0x1d34 <_exit>

000006fa <__bad_interrupt>:
     6fa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000006fe <can_init>:
     6fe:	0e 94 30 04 	call	0x860	; 0x860 <mcp2515_init>
     702:	47 e0       	ldi	r20, 0x07	; 7
     704:	67 e0       	ldi	r22, 0x07	; 7
     706:	8b e2       	ldi	r24, 0x2B	; 43
     708:	0e 94 12 04 	call	0x824	; 0x824 <mcp2515_bit_modify>
     70c:	61 e0       	ldi	r22, 0x01	; 1
     70e:	88 e2       	ldi	r24, 0x28	; 40
     710:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <mcp2515_write>
     714:	65 eb       	ldi	r22, 0xB5	; 181
     716:	89 e2       	ldi	r24, 0x29	; 41
     718:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <mcp2515_write>
     71c:	63 e4       	ldi	r22, 0x43	; 67
     71e:	8a e2       	ldi	r24, 0x2A	; 42
     720:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <mcp2515_write>
     724:	60 e0       	ldi	r22, 0x00	; 0
     726:	8f e0       	ldi	r24, 0x0F	; 15
     728:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <mcp2515_write>
     72c:	08 95       	ret

0000072e <send_can_msg>:
     72e:	0f 93       	push	r16
     730:	1f 93       	push	r17
     732:	cf 93       	push	r28
     734:	8c 01       	movw	r16, r24
     736:	fc 01       	movw	r30, r24
     738:	60 81       	ld	r22, Z
     73a:	71 81       	ldd	r23, Z+1	; 0x01
     73c:	76 95       	lsr	r23
     73e:	67 95       	ror	r22
     740:	76 95       	lsr	r23
     742:	67 95       	ror	r22
     744:	76 95       	lsr	r23
     746:	67 95       	ror	r22
     748:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <__data_end>
     74c:	82 95       	swap	r24
     74e:	80 7f       	andi	r24, 0xF0	; 240
     750:	8f 5c       	subi	r24, 0xCF	; 207
     752:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <mcp2515_write>
     756:	82 e3       	ldi	r24, 0x32	; 50
     758:	0e 94 ed 03 	call	0x7da	; 0x7da <mcp2515_read>
     75c:	f8 01       	movw	r30, r16
     75e:	60 81       	ld	r22, Z
     760:	62 95       	swap	r22
     762:	66 0f       	add	r22, r22
     764:	60 7e       	andi	r22, 0xE0	; 224
     766:	8f 71       	andi	r24, 0x1F	; 31
     768:	68 2b       	or	r22, r24
     76a:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <__data_end>
     76e:	82 95       	swap	r24
     770:	80 7f       	andi	r24, 0xF0	; 240
     772:	8e 5c       	subi	r24, 0xCE	; 206
     774:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <mcp2515_write>
     778:	85 e3       	ldi	r24, 0x35	; 53
     77a:	0e 94 ed 03 	call	0x7da	; 0x7da <mcp2515_read>
     77e:	80 7f       	andi	r24, 0xF0	; 240
     780:	f8 01       	movw	r30, r16
     782:	92 81       	ldd	r25, Z+2	; 0x02
     784:	68 2f       	mov	r22, r24
     786:	69 2b       	or	r22, r25
     788:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <__data_end>
     78c:	82 95       	swap	r24
     78e:	80 7f       	andi	r24, 0xF0	; 240
     790:	8b 5c       	subi	r24, 0xCB	; 203
     792:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <mcp2515_write>
     796:	f8 01       	movw	r30, r16
     798:	82 81       	ldd	r24, Z+2	; 0x02
     79a:	88 23       	and	r24, r24
     79c:	a9 f0       	breq	.+42     	; 0x7c8 <send_can_msg+0x9a>
     79e:	c0 e0       	ldi	r28, 0x00	; 0
     7a0:	f8 01       	movw	r30, r16
     7a2:	ec 0f       	add	r30, r28
     7a4:	f1 1d       	adc	r31, r1
     7a6:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <__data_end>
     7aa:	9c 2f       	mov	r25, r28
     7ac:	20 e1       	ldi	r18, 0x10	; 16
     7ae:	82 9f       	mul	r24, r18
     7b0:	90 0d       	add	r25, r0
     7b2:	11 24       	eor	r1, r1
     7b4:	89 2f       	mov	r24, r25
     7b6:	63 81       	ldd	r22, Z+3	; 0x03
     7b8:	8a 5c       	subi	r24, 0xCA	; 202
     7ba:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <mcp2515_write>
     7be:	cf 5f       	subi	r28, 0xFF	; 255
     7c0:	f8 01       	movw	r30, r16
     7c2:	82 81       	ldd	r24, Z+2	; 0x02
     7c4:	c8 17       	cp	r28, r24
     7c6:	60 f3       	brcs	.-40     	; 0x7a0 <send_can_msg+0x72>
     7c8:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <__data_end>
     7cc:	8f 57       	subi	r24, 0x7F	; 127
     7ce:	0e 94 0d 04 	call	0x81a	; 0x81a <mcp2515_request_to_send>
     7d2:	cf 91       	pop	r28
     7d4:	1f 91       	pop	r17
     7d6:	0f 91       	pop	r16
     7d8:	08 95       	ret

000007da <mcp2515_read>:
     7da:	cf 93       	push	r28
     7dc:	c8 2f       	mov	r28, r24
     7de:	c4 98       	cbi	0x18, 4	; 24
     7e0:	83 e0       	ldi	r24, 0x03	; 3
     7e2:	0e 94 ca 05 	call	0xb94	; 0xb94 <spi_write>
     7e6:	8c 2f       	mov	r24, r28
     7e8:	0e 94 ca 05 	call	0xb94	; 0xb94 <spi_write>
     7ec:	0e 94 ce 05 	call	0xb9c	; 0xb9c <spi_read>
     7f0:	c4 9a       	sbi	0x18, 4	; 24
     7f2:	cf 91       	pop	r28
     7f4:	08 95       	ret

000007f6 <mcp2515_write>:
     7f6:	cf 93       	push	r28
     7f8:	df 93       	push	r29
     7fa:	d8 2f       	mov	r29, r24
     7fc:	c6 2f       	mov	r28, r22
     7fe:	c4 98       	cbi	0x18, 4	; 24
     800:	82 e0       	ldi	r24, 0x02	; 2
     802:	0e 94 ca 05 	call	0xb94	; 0xb94 <spi_write>
     806:	8d 2f       	mov	r24, r29
     808:	0e 94 ca 05 	call	0xb94	; 0xb94 <spi_write>
     80c:	8c 2f       	mov	r24, r28
     80e:	0e 94 ca 05 	call	0xb94	; 0xb94 <spi_write>
     812:	c4 9a       	sbi	0x18, 4	; 24
     814:	df 91       	pop	r29
     816:	cf 91       	pop	r28
     818:	08 95       	ret

0000081a <mcp2515_request_to_send>:
     81a:	c4 98       	cbi	0x18, 4	; 24
     81c:	0e 94 ca 05 	call	0xb94	; 0xb94 <spi_write>
     820:	c4 9a       	sbi	0x18, 4	; 24
     822:	08 95       	ret

00000824 <mcp2515_bit_modify>:
     824:	1f 93       	push	r17
     826:	cf 93       	push	r28
     828:	df 93       	push	r29
     82a:	18 2f       	mov	r17, r24
     82c:	d6 2f       	mov	r29, r22
     82e:	c4 2f       	mov	r28, r20
     830:	c4 98       	cbi	0x18, 4	; 24
     832:	85 e0       	ldi	r24, 0x05	; 5
     834:	0e 94 ca 05 	call	0xb94	; 0xb94 <spi_write>
     838:	81 2f       	mov	r24, r17
     83a:	0e 94 ca 05 	call	0xb94	; 0xb94 <spi_write>
     83e:	8d 2f       	mov	r24, r29
     840:	0e 94 ca 05 	call	0xb94	; 0xb94 <spi_write>
     844:	8c 2f       	mov	r24, r28
     846:	0e 94 ca 05 	call	0xb94	; 0xb94 <spi_write>
     84a:	c4 9a       	sbi	0x18, 4	; 24
     84c:	df 91       	pop	r29
     84e:	cf 91       	pop	r28
     850:	1f 91       	pop	r17
     852:	08 95       	ret

00000854 <mcp2515_reset>:
     854:	c4 98       	cbi	0x18, 4	; 24
     856:	80 ec       	ldi	r24, 0xC0	; 192
     858:	0e 94 ca 05 	call	0xb94	; 0xb94 <spi_write>
     85c:	c4 9a       	sbi	0x18, 4	; 24
     85e:	08 95       	ret

00000860 <mcp2515_init>:
     860:	0e 94 c5 05 	call	0xb8a	; 0xb8a <spi_init>
     864:	0e 94 2a 04 	call	0x854	; 0x854 <mcp2515_reset>
     868:	08 95       	ret

0000086a <new_menu>:
		(*(next_menu->fun_ptr));
	}*/

	write_menu_to_screen(next_menu);
	*menuHead = next_menu;
}
     86a:	cf 93       	push	r28
     86c:	df 93       	push	r29
     86e:	ec 01       	movw	r28, r24
     870:	83 e2       	ldi	r24, 0x23	; 35
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	0e 94 37 09 	call	0x126e	; 0x126e <malloc>
     878:	aa e0       	ldi	r26, 0x0A	; 10
     87a:	b1 e0       	ldi	r27, 0x01	; 1
     87c:	fc 01       	movw	r30, r24
     87e:	4a e1       	ldi	r20, 0x1A	; 26
     880:	51 e0       	ldi	r21, 0x01	; 1
     882:	11 8a       	std	Z+17, r1	; 0x11
     884:	10 8a       	std	Z+16, r1	; 0x10
     886:	2d 91       	ld	r18, X+
     888:	3d 91       	ld	r19, X+
     88a:	21 93       	st	Z+, r18
     88c:	31 93       	st	Z+, r19
     88e:	a4 17       	cp	r26, r20
     890:	b5 07       	cpc	r27, r21
     892:	b9 f7       	brne	.-18     	; 0x882 <new_menu+0x18>
     894:	fc 01       	movw	r30, r24
     896:	10 a2       	std	Z+32, r1	; 0x20
     898:	d7 8f       	std	Z+31, r29	; 0x1f
     89a:	c6 8f       	std	Z+30, r28	; 0x1e
     89c:	2d e1       	ldi	r18, 0x1D	; 29
     89e:	31 e0       	ldi	r19, 0x01	; 1
     8a0:	37 87       	std	Z+15, r19	; 0x0f
     8a2:	26 87       	std	Z+14, r18	; 0x0e
     8a4:	12 a2       	std	Z+34, r1	; 0x22
     8a6:	11 a2       	std	Z+33, r1	; 0x21
     8a8:	df 91       	pop	r29
     8aa:	cf 91       	pop	r28
     8ac:	08 95       	ret

000008ae <invert_selected>:
     8ae:	cf 93       	push	r28
     8b0:	df 93       	push	r29
     8b2:	ec 01       	movw	r28, r24
     8b4:	80 e0       	ldi	r24, 0x00	; 0
     8b6:	0e 94 2c 07 	call	0xe58	; 0xe58 <go_to_column>
     8ba:	88 a1       	ldd	r24, Y+32	; 0x20
     8bc:	e8 2f       	mov	r30, r24
     8be:	f0 e0       	ldi	r31, 0x00	; 0
     8c0:	ee 0f       	add	r30, r30
     8c2:	ff 1f       	adc	r31, r31
     8c4:	ec 0f       	add	r30, r28
     8c6:	fd 1f       	adc	r31, r29
     8c8:	60 81       	ld	r22, Z
     8ca:	71 81       	ldd	r23, Z+1	; 0x01
     8cc:	48 e0       	ldi	r20, 0x08	; 8
     8ce:	0e 94 60 08 	call	0x10c0	; 0x10c0 <oled_write_string_inverted>
     8d2:	df 91       	pop	r29
     8d4:	cf 91       	pop	r28
     8d6:	08 95       	ret

000008d8 <write_menu_to_screen>:
     8d8:	ff 92       	push	r15
     8da:	0f 93       	push	r16
     8dc:	1f 93       	push	r17
     8de:	cf 93       	push	r28
     8e0:	df 93       	push	r29
     8e2:	f8 2e       	mov	r15, r24
     8e4:	d9 2f       	mov	r29, r25
     8e6:	0e 94 4e 07 	call	0xe9c	; 0xe9c <clear_oled_new>
     8ea:	0f 2d       	mov	r16, r15
     8ec:	1d 2f       	mov	r17, r29
     8ee:	c0 e0       	ldi	r28, 0x00	; 0
     8f0:	80 e0       	ldi	r24, 0x00	; 0
     8f2:	0e 94 2c 07 	call	0xe58	; 0xe58 <go_to_column>
     8f6:	f8 01       	movw	r30, r16
     8f8:	61 91       	ld	r22, Z+
     8fa:	71 91       	ld	r23, Z+
     8fc:	8f 01       	movw	r16, r30
     8fe:	48 e0       	ldi	r20, 0x08	; 8
     900:	8c 2f       	mov	r24, r28
     902:	0e 94 bc 07 	call	0xf78	; 0xf78 <oled_write_string>
     906:	cf 5f       	subi	r28, 0xFF	; 255
     908:	c8 30       	cpi	r28, 0x08	; 8
     90a:	91 f7       	brne	.-28     	; 0x8f0 <write_menu_to_screen+0x18>
     90c:	8f 2d       	mov	r24, r15
     90e:	9d 2f       	mov	r25, r29
     910:	0e 94 57 04 	call	0x8ae	; 0x8ae <invert_selected>
     914:	df 91       	pop	r29
     916:	cf 91       	pop	r28
     918:	1f 91       	pop	r17
     91a:	0f 91       	pop	r16
     91c:	ff 90       	pop	r15
     91e:	08 95       	ret

00000920 <change_selected>:
void invert_selected(menu* menuPointer){
	go_to_column(0);
	oled_write_string_inverted((menuPointer->selected), menuPointer->labels[(menuPointer->selected)], 8);
}

void change_selected(menu** menuHead, DIRECTION d){
     920:	1f 93       	push	r17
     922:	cf 93       	push	r28
     924:	df 93       	push	r29
     926:	ec 01       	movw	r28, r24
     928:	16 2f       	mov	r17, r22
	if(d == UP){
     92a:	62 30       	cpi	r22, 0x02	; 2
     92c:	91 f5       	brne	.+100    	; 0x992 <change_selected+0x72>
		((*(menuHead))->selected)--;
     92e:	e8 81       	ld	r30, Y
     930:	f9 81       	ldd	r31, Y+1	; 0x01
     932:	80 a1       	ldd	r24, Z+32	; 0x20
     934:	81 50       	subi	r24, 0x01	; 1
     936:	80 a3       	std	Z+32, r24	; 0x20
		while(((*(menuHead))->labels[((*(menuHead))->selected)]) == ""){
     938:	e8 81       	ld	r30, Y
     93a:	f9 81       	ldd	r31, Y+1	; 0x01
     93c:	80 a1       	ldd	r24, Z+32	; 0x20
     93e:	28 2f       	mov	r18, r24
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	d9 01       	movw	r26, r18
     944:	aa 0f       	add	r26, r26
     946:	bb 1f       	adc	r27, r27
     948:	ae 0f       	add	r26, r30
     94a:	bf 1f       	adc	r27, r31
     94c:	4d 91       	ld	r20, X+
     94e:	5c 91       	ld	r21, X
     950:	45 53       	subi	r20, 0x35	; 53
     952:	52 40       	sbci	r21, 0x02	; 2
     954:	89 f4       	brne	.+34     	; 0x978 <change_selected+0x58>
			((*(menuHead))->selected)--;
     956:	81 50       	subi	r24, 0x01	; 1
     958:	80 a3       	std	Z+32, r24	; 0x20
}

void change_selected(menu** menuHead, DIRECTION d){
	if(d == UP){
		((*(menuHead))->selected)--;
		while(((*(menuHead))->labels[((*(menuHead))->selected)]) == ""){
     95a:	e8 81       	ld	r30, Y
     95c:	f9 81       	ldd	r31, Y+1	; 0x01
     95e:	80 a1       	ldd	r24, Z+32	; 0x20
     960:	28 2f       	mov	r18, r24
     962:	30 e0       	ldi	r19, 0x00	; 0
     964:	d9 01       	movw	r26, r18
     966:	aa 0f       	add	r26, r26
     968:	bb 1f       	adc	r27, r27
     96a:	ae 0f       	add	r26, r30
     96c:	bf 1f       	adc	r27, r31
     96e:	4d 91       	ld	r20, X+
     970:	5c 91       	ld	r21, X
     972:	45 53       	subi	r20, 0x35	; 53
     974:	52 40       	sbci	r21, 0x02	; 2
     976:	79 f3       	breq	.-34     	; 0x956 <change_selected+0x36>
			((*(menuHead))->selected)--;
		}
		printf("%d up",((*(menuHead))->selected));
     978:	3f 93       	push	r19
     97a:	2f 93       	push	r18
     97c:	85 e2       	ldi	r24, 0x25	; 37
     97e:	91 e0       	ldi	r25, 0x01	; 1
     980:	9f 93       	push	r25
     982:	8f 93       	push	r24
     984:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <printf>
     988:	0f 90       	pop	r0
     98a:	0f 90       	pop	r0
     98c:	0f 90       	pop	r0
     98e:	0f 90       	pop	r0
     990:	33 c0       	rjmp	.+102    	; 0x9f8 <change_selected+0xd8>
	}
	if(d == DOWN){
     992:	63 30       	cpi	r22, 0x03	; 3
     994:	89 f5       	brne	.+98     	; 0x9f8 <change_selected+0xd8>
		((*(menuHead))->selected)++;
     996:	e8 81       	ld	r30, Y
     998:	f9 81       	ldd	r31, Y+1	; 0x01
     99a:	80 a1       	ldd	r24, Z+32	; 0x20
     99c:	8f 5f       	subi	r24, 0xFF	; 255
     99e:	80 a3       	std	Z+32, r24	; 0x20
		while(((*(menuHead))->labels[((*(menuHead))->selected)]) == ""){
     9a0:	e8 81       	ld	r30, Y
     9a2:	f9 81       	ldd	r31, Y+1	; 0x01
     9a4:	80 a1       	ldd	r24, Z+32	; 0x20
     9a6:	28 2f       	mov	r18, r24
     9a8:	30 e0       	ldi	r19, 0x00	; 0
     9aa:	d9 01       	movw	r26, r18
     9ac:	aa 0f       	add	r26, r26
     9ae:	bb 1f       	adc	r27, r27
     9b0:	ae 0f       	add	r26, r30
     9b2:	bf 1f       	adc	r27, r31
     9b4:	4d 91       	ld	r20, X+
     9b6:	5c 91       	ld	r21, X
     9b8:	45 53       	subi	r20, 0x35	; 53
     9ba:	52 40       	sbci	r21, 0x02	; 2
     9bc:	89 f4       	brne	.+34     	; 0x9e0 <change_selected+0xc0>
			((*(menuHead))->selected)++;
     9be:	8f 5f       	subi	r24, 0xFF	; 255
     9c0:	80 a3       	std	Z+32, r24	; 0x20
		}
		printf("%d up",((*(menuHead))->selected));
	}
	if(d == DOWN){
		((*(menuHead))->selected)++;
		while(((*(menuHead))->labels[((*(menuHead))->selected)]) == ""){
     9c2:	e8 81       	ld	r30, Y
     9c4:	f9 81       	ldd	r31, Y+1	; 0x01
     9c6:	80 a1       	ldd	r24, Z+32	; 0x20
     9c8:	28 2f       	mov	r18, r24
     9ca:	30 e0       	ldi	r19, 0x00	; 0
     9cc:	d9 01       	movw	r26, r18
     9ce:	aa 0f       	add	r26, r26
     9d0:	bb 1f       	adc	r27, r27
     9d2:	ae 0f       	add	r26, r30
     9d4:	bf 1f       	adc	r27, r31
     9d6:	4d 91       	ld	r20, X+
     9d8:	5c 91       	ld	r21, X
     9da:	45 53       	subi	r20, 0x35	; 53
     9dc:	52 40       	sbci	r21, 0x02	; 2
     9de:	79 f3       	breq	.-34     	; 0x9be <change_selected+0x9e>
			((*(menuHead))->selected)++;
		}
		printf("%d down",((*(menuHead))->selected));
     9e0:	3f 93       	push	r19
     9e2:	2f 93       	push	r18
     9e4:	8b e2       	ldi	r24, 0x2B	; 43
     9e6:	91 e0       	ldi	r25, 0x01	; 1
     9e8:	9f 93       	push	r25
     9ea:	8f 93       	push	r24
     9ec:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <printf>
     9f0:	0f 90       	pop	r0
     9f2:	0f 90       	pop	r0
     9f4:	0f 90       	pop	r0
     9f6:	0f 90       	pop	r0
	}
	if(((*(menuHead))->selected) == 8){
     9f8:	e8 81       	ld	r30, Y
     9fa:	f9 81       	ldd	r31, Y+1	; 0x01
     9fc:	80 a1       	ldd	r24, Z+32	; 0x20
     9fe:	88 30       	cpi	r24, 0x08	; 8
     a00:	09 f4       	brne	.+2      	; 0xa04 <change_selected+0xe4>
		((*(menuHead))->selected) = 0;
     a02:	10 a2       	std	Z+32, r1	; 0x20
	}
	if(((*(menuHead))->selected) == 255){
     a04:	e8 81       	ld	r30, Y
     a06:	f9 81       	ldd	r31, Y+1	; 0x01
     a08:	80 a1       	ldd	r24, Z+32	; 0x20
     a0a:	8f 3f       	cpi	r24, 0xFF	; 255
     a0c:	11 f4       	brne	.+4      	; 0xa12 <change_selected+0xf2>
		((*(menuHead))->selected) = 7;
     a0e:	87 e0       	ldi	r24, 0x07	; 7
     a10:	80 a3       	std	Z+32, r24	; 0x20
	}
	if(d != WAITING && d != NEUTRAL){
     a12:	14 50       	subi	r17, 0x04	; 4
     a14:	12 30       	cpi	r17, 0x02	; 2
     a16:	20 f0       	brcs	.+8      	; 0xa20 <change_selected+0x100>
		write_menu_to_screen(*(menuHead));
     a18:	88 81       	ld	r24, Y
     a1a:	99 81       	ldd	r25, Y+1	; 0x01
     a1c:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <write_menu_to_screen>
	}
	
}
     a20:	df 91       	pop	r29
     a22:	cf 91       	pop	r28
     a24:	1f 91       	pop	r17
     a26:	08 95       	ret

00000a28 <button_pressed>:

void button_pressed(menu** menuHead){
     a28:	0f 93       	push	r16
     a2a:	1f 93       	push	r17
     a2c:	cf 93       	push	r28
     a2e:	df 93       	push	r29
     a30:	dc 01       	movw	r26, r24
	if((*(menuHead))->links[((*(menuHead))->selected)] != NULL){
     a32:	cd 91       	ld	r28, X+
     a34:	dc 91       	ld	r29, X
     a36:	11 97       	sbiw	r26, 0x01	; 1
     a38:	98 a1       	ldd	r25, Y+32	; 0x20
     a3a:	e9 2f       	mov	r30, r25
     a3c:	f0 e0       	ldi	r31, 0x00	; 0
     a3e:	38 96       	adiw	r30, 0x08	; 8
     a40:	ee 0f       	add	r30, r30
     a42:	ff 1f       	adc	r31, r31
     a44:	ec 0f       	add	r30, r28
     a46:	fd 1f       	adc	r31, r29
     a48:	00 81       	ld	r16, Z
     a4a:	11 81       	ldd	r17, Z+1	; 0x01
     a4c:	01 15       	cp	r16, r1
     a4e:	11 05       	cpc	r17, r1
     a50:	31 f0       	breq	.+12     	; 0xa5e <button_pressed+0x36>
     a52:	ed 01       	movw	r28, r26
void change_menu(menu* next_menu, menu** menuHead){
	/*if (next_menu->fun_ptr != NULL){
		(*(next_menu->fun_ptr));
	}*/

	write_menu_to_screen(next_menu);
     a54:	c8 01       	movw	r24, r16
     a56:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <write_menu_to_screen>
	*menuHead = next_menu;
     a5a:	19 83       	std	Y+1, r17	; 0x01
     a5c:	08 83       	st	Y, r16

void button_pressed(menu** menuHead){
	if((*(menuHead))->links[((*(menuHead))->selected)] != NULL){
		change_menu((*(menuHead))->links[((*(menuHead))->selected)], menuHead);
	}
}
     a5e:	df 91       	pop	r29
     a60:	cf 91       	pop	r28
     a62:	1f 91       	pop	r17
     a64:	0f 91       	pop	r16
     a66:	08 95       	ret

00000a68 <launch_menusystem>:

void launch_menusystem(){
     a68:	cf 93       	push	r28
     a6a:	df 93       	push	r29
     a6c:	00 d0       	rcall	.+0      	; 0xa6e <launch_menusystem+0x6>
     a6e:	cd b7       	in	r28, 0x3d	; 61
     a70:	de b7       	in	r29, 0x3e	; 62
	//SETUP
	menu** headPointer = NULL;
	
	menu* mainMenu;
	mainMenu = new_menu(NULL);
     a72:	80 e0       	ldi	r24, 0x00	; 0
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	0e 94 35 04 	call	0x86a	; 0x86a <new_menu>
     a7a:	9a 83       	std	Y+2, r25	; 0x02
     a7c:	89 83       	std	Y+1, r24	; 0x01
	menu* submenu = new_menu(mainMenu);
     a7e:	0e 94 35 04 	call	0x86a	; 0x86a <new_menu>
     a82:	8c 01       	movw	r16, r24
	menu* submenu_4 = new_menu(mainMenu);
     a84:	89 81       	ldd	r24, Y+1	; 0x01
     a86:	9a 81       	ldd	r25, Y+2	; 0x02
     a88:	0e 94 35 04 	call	0x86a	; 0x86a <new_menu>
     a8c:	6c 01       	movw	r12, r24
	menu* submenu_5 = new_menu(mainMenu);
     a8e:	89 81       	ldd	r24, Y+1	; 0x01
     a90:	9a 81       	ldd	r25, Y+2	; 0x02
     a92:	0e 94 35 04 	call	0x86a	; 0x86a <new_menu>
	
	mainMenu->labels[0] = "submenu_demo";
     a96:	e9 81       	ldd	r30, Y+1	; 0x01
     a98:	fa 81       	ldd	r31, Y+2	; 0x02
     a9a:	23 e3       	ldi	r18, 0x33	; 51
     a9c:	31 e0       	ldi	r19, 0x01	; 1
     a9e:	31 83       	std	Z+1, r19	; 0x01
     aa0:	20 83       	st	Z, r18
	mainMenu->labels[1] = "do_nothing";
     aa2:	e9 81       	ldd	r30, Y+1	; 0x01
     aa4:	fa 81       	ldd	r31, Y+2	; 0x02
     aa6:	40 e4       	ldi	r20, 0x40	; 64
     aa8:	51 e0       	ldi	r21, 0x01	; 1
     aaa:	53 83       	std	Z+3, r21	; 0x03
     aac:	42 83       	std	Z+2, r20	; 0x02
	mainMenu->labels[2] = "";
     aae:	25 e3       	ldi	r18, 0x35	; 53
     ab0:	32 e0       	ldi	r19, 0x02	; 2
     ab2:	35 83       	std	Z+5, r19	; 0x05
     ab4:	24 83       	std	Z+4, r18	; 0x04
	mainMenu->labels[3] = "empty_submenu";
     ab6:	6b e4       	ldi	r22, 0x4B	; 75
     ab8:	71 e0       	ldi	r23, 0x01	; 1
     aba:	77 83       	std	Z+7, r23	; 0x07
     abc:	66 83       	std	Z+6, r22	; 0x06
	mainMenu->labels[4] = "empty_submenu";
     abe:	71 87       	std	Z+9, r23	; 0x09
     ac0:	60 87       	std	Z+8, r22	; 0x08
	mainMenu->labels[5] = "";
     ac2:	33 87       	std	Z+11, r19	; 0x0b
     ac4:	22 87       	std	Z+10, r18	; 0x0a
	mainMenu->labels[6] = "";
     ac6:	35 87       	std	Z+13, r19	; 0x0d
     ac8:	24 87       	std	Z+12, r18	; 0x0c
	mainMenu->labels[7] = "";
     aca:	37 87       	std	Z+15, r19	; 0x0f
     acc:	26 87       	std	Z+14, r18	; 0x0e
	mainMenu->links[0] = submenu;
     ace:	11 8b       	std	Z+17, r17	; 0x11
     ad0:	00 8b       	std	Z+16, r16	; 0x10
	mainMenu->links[3] = submenu_4;
     ad2:	d7 8a       	std	Z+23, r13	; 0x17
     ad4:	c6 8a       	std	Z+22, r12	; 0x16
	mainMenu->links[4] = submenu_5;
     ad6:	91 8f       	std	Z+25, r25	; 0x19
     ad8:	80 8f       	std	Z+24, r24	; 0x18
	
	submenu->labels[0] = "do_nothing";
     ada:	f8 01       	movw	r30, r16
     adc:	51 83       	std	Z+1, r21	; 0x01
     ade:	40 83       	st	Z, r20
	submenu->labels[1] = "laks";
     ae0:	89 e5       	ldi	r24, 0x59	; 89
     ae2:	91 e0       	ldi	r25, 0x01	; 1
     ae4:	93 83       	std	Z+3, r25	; 0x03
     ae6:	82 83       	std	Z+2, r24	; 0x02
	submenu->labels[2] = "salami";
     ae8:	8e e5       	ldi	r24, 0x5E	; 94
     aea:	91 e0       	ldi	r25, 0x01	; 1
     aec:	95 83       	std	Z+5, r25	; 0x05
     aee:	84 83       	std	Z+4, r24	; 0x04
	submenu->labels[3] = "draw a wojak";
     af0:	85 e6       	ldi	r24, 0x65	; 101
     af2:	91 e0       	ldi	r25, 0x01	; 1
     af4:	97 83       	std	Z+7, r25	; 0x07
     af6:	86 83       	std	Z+6, r24	; 0x06
	submenu->labels[4] = "";
     af8:	31 87       	std	Z+9, r19	; 0x09
     afa:	20 87       	std	Z+8, r18	; 0x08
	submenu->labels[5] = "";
     afc:	33 87       	std	Z+11, r19	; 0x0b
     afe:	22 87       	std	Z+10, r18	; 0x0a
	submenu->labels[6] = "";
     b00:	35 87       	std	Z+13, r19	; 0x0d
     b02:	24 87       	std	Z+12, r18	; 0x0c
	submenu->links[7] = mainMenu;
     b04:	89 81       	ldd	r24, Y+1	; 0x01
     b06:	9a 81       	ldd	r25, Y+2	; 0x02
     b08:	97 8f       	std	Z+31, r25	; 0x1f
     b0a:	86 8f       	std	Z+30, r24	; 0x1e
	
	//submenu->fun_ptr = printwojak_prototyp;
	
	//INITIATE
	write_menu_to_screen(mainMenu);
     b0c:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <write_menu_to_screen>
	volatile amap* atmelMap = (amap*) BASE;
	
	//RUN
	while(1){
		uint8_t val = 1;
		atmelMap->ADC[1] = 0x04;
     b10:	01 e0       	ldi	r16, 0x01	; 1
     b12:	14 e1       	ldi	r17, 0x14	; 20
     b14:	68 94       	set
     b16:	cc 24       	eor	r12, r12
     b18:	c2 f8       	bld	r12, 2
     b1a:	f8 01       	movw	r30, r16
     b1c:	c0 82       	st	Z, r12
		uint8_t valx = atmelMap->ADC[1];
     b1e:	60 81       	ld	r22, Z
		uint8_t valy = atmelMap->ADC[1];
     b20:	40 81       	ld	r20, Z
		uint8_t vall = atmelMap->ADC[1];
     b22:	d0 80       	ld	r13, Z
		uint8_t valr = atmelMap->ADC[1];
     b24:	b0 80       	ld	r11, Z
		
		uint8_t left_button = PIND & (1<< PIND4);
     b26:	80 b3       	in	r24, 0x10	; 16
		uint8_t right_button = PIND & (1<< PIND5);
     b28:	80 b3       	in	r24, 0x10	; 16
		uint8_t joy_button = PINB & (1<< PINB1);
     b2a:	86 b3       	in	r24, 0x16	; 22
     b2c:	82 70       	andi	r24, 0x02	; 2
     b2e:	f8 2e       	mov	r15, r24
		
		calc_pos(&joystick,valx,valy);
     b30:	50 e0       	ldi	r21, 0x00	; 0
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	89 e3       	ldi	r24, 0x39	; 57
     b36:	92 e0       	ldi	r25, 0x02	; 2
     b38:	0e 94 d3 05 	call	0xba6	; 0xba6 <calc_pos>
		calc_pos_slider(&slider,vall,valr);
     b3c:	4b 2d       	mov	r20, r11
     b3e:	6d 2d       	mov	r22, r13
     b40:	87 e3       	ldi	r24, 0x37	; 55
     b42:	92 e0       	ldi	r25, 0x02	; 2
     b44:	0e 94 1f 06 	call	0xc3e	; 0xc3e <calc_pos_slider>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b48:	8c ec       	ldi	r24, 0xCC	; 204
     b4a:	94 e0       	ldi	r25, 0x04	; 4
     b4c:	01 97       	sbiw	r24, 0x01	; 1
     b4e:	f1 f7       	brne	.-4      	; 0xb4c <launch_menusystem+0xe4>
     b50:	00 c0       	rjmp	.+0      	; 0xb52 <launch_menusystem+0xea>
     b52:	00 00       	nop
	
		_delay_ms(1);
		DIRECTION current_dir = joystick_direction(current_dir, joystick);
     b54:	60 91 39 02 	lds	r22, 0x0239	; 0x800239 <joystick>
     b58:	70 91 3a 02 	lds	r23, 0x023A	; 0x80023a <joystick+0x1>
     b5c:	8e 2d       	mov	r24, r14
     b5e:	0e 94 4d 06 	call	0xc9a	; 0xc9a <joystick_direction>
     b62:	e8 2e       	mov	r14, r24
		if(current_dir != NEUTRAL && current_dir != WAITING){
     b64:	8c ef       	ldi	r24, 0xFC	; 252
     b66:	8e 0d       	add	r24, r14
     b68:	82 30       	cpi	r24, 0x02	; 2
     b6a:	28 f0       	brcs	.+10     	; 0xb76 <launch_menusystem+0x10e>
			change_selected(headPointer, current_dir);
     b6c:	6e 2d       	mov	r22, r14
     b6e:	ce 01       	movw	r24, r28
     b70:	01 96       	adiw	r24, 0x01	; 1
     b72:	0e 94 90 04 	call	0x920	; 0x920 <change_selected>
		}
		if(button_check(joy_button)){
     b76:	8f 2d       	mov	r24, r15
     b78:	0e 94 36 06 	call	0xc6c	; 0xc6c <button_check>
     b7c:	88 23       	and	r24, r24
     b7e:	69 f2       	breq	.-102    	; 0xb1a <launch_menusystem+0xb2>
			button_pressed(headPointer);
     b80:	ce 01       	movw	r24, r28
     b82:	01 96       	adiw	r24, 0x01	; 1
     b84:	0e 94 14 05 	call	0xa28	; 0xa28 <button_pressed>
     b88:	c8 cf       	rjmp	.-112    	; 0xb1a <launch_menusystem+0xb2>

00000b8a <spi_init>:
	spi_write(0xf0);
	return SPDR;
}

void spi_init(){
	DDRB = (1<<DDB4)|(1<<DDB5)|(1<<DDB7); //chip select, mosi, clock
     b8a:	80 eb       	ldi	r24, 0xB0	; 176
     b8c:	87 bb       	out	0x17, r24	; 23
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
     b8e:	81 e5       	ldi	r24, 0x51	; 81
     b90:	8d b9       	out	0x0d, r24	; 13
     b92:	08 95       	ret

00000b94 <spi_write>:
}

void spi_write(char data){
	SPDR = data;
     b94:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF))){
     b96:	77 9b       	sbis	0x0e, 7	; 14
     b98:	fe cf       	rjmp	.-4      	; 0xb96 <spi_write+0x2>
		
	}
     b9a:	08 95       	ret

00000b9c <spi_read>:



uint8_t spi_read(){
	
	spi_write(0xf0);
     b9c:	80 ef       	ldi	r24, 0xF0	; 240
     b9e:	0e 94 ca 05 	call	0xb94	; 0xb94 <spi_write>
	return SPDR;
     ba2:	8f b1       	in	r24, 0x0f	; 15
}
     ba4:	08 95       	ret

00000ba6 <calc_pos>:
	atmelMap->ADC[1] = val;
	x_offset = atmelMap->ADC[1];
	y_offset = atmelMap->ADC[1];
}

void calc_pos(joyVal* values, uint8_t x, uint8_t y){
     ba6:	fc 01       	movw	r30, r24
	if(x>=x_offset){
     ba8:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <x_offset>
     bac:	62 17       	cp	r22, r18
     bae:	90 f0       	brcs	.+36     	; 0xbd4 <calc_pos+0x2e>
		values->x_val = (x-x_offset)*(100)/(255-x_offset);
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	70 e0       	ldi	r23, 0x00	; 0
     bb4:	62 1b       	sub	r22, r18
     bb6:	73 0b       	sbc	r23, r19
     bb8:	54 e6       	ldi	r21, 0x64	; 100
     bba:	56 9f       	mul	r21, r22
     bbc:	c0 01       	movw	r24, r0
     bbe:	57 9f       	mul	r21, r23
     bc0:	90 0d       	add	r25, r0
     bc2:	11 24       	eor	r1, r1
     bc4:	6f ef       	ldi	r22, 0xFF	; 255
     bc6:	70 e0       	ldi	r23, 0x00	; 0
     bc8:	62 1b       	sub	r22, r18
     bca:	73 0b       	sbc	r23, r19
     bcc:	0e 94 0f 09 	call	0x121e	; 0x121e <__divmodhi4>
     bd0:	60 83       	st	Z, r22
     bd2:	10 c0       	rjmp	.+32     	; 0xbf4 <calc_pos+0x4e>
		}else if(x<x_offset){
		values->x_val = -(x_offset-x)*(100)/x_offset;
     bd4:	a2 2f       	mov	r26, r18
     bd6:	b0 e0       	ldi	r27, 0x00	; 0
     bd8:	26 2f       	mov	r18, r22
     bda:	30 e0       	ldi	r19, 0x00	; 0
     bdc:	2a 1b       	sub	r18, r26
     bde:	3b 0b       	sbc	r19, r27
     be0:	54 e6       	ldi	r21, 0x64	; 100
     be2:	52 9f       	mul	r21, r18
     be4:	c0 01       	movw	r24, r0
     be6:	53 9f       	mul	r21, r19
     be8:	90 0d       	add	r25, r0
     bea:	11 24       	eor	r1, r1
     bec:	bd 01       	movw	r22, r26
     bee:	0e 94 0f 09 	call	0x121e	; 0x121e <__divmodhi4>
     bf2:	60 83       	st	Z, r22
	}
	if(y>=y_offset){
     bf4:	60 91 1b 01 	lds	r22, 0x011B	; 0x80011b <y_offset>
     bf8:	46 17       	cp	r20, r22
     bfa:	98 f0       	brcs	.+38     	; 0xc22 <calc_pos+0x7c>
		values->y_val = (y-y_offset)*(100)/(255-y_offset);
     bfc:	26 2f       	mov	r18, r22
     bfe:	30 e0       	ldi	r19, 0x00	; 0
     c00:	50 e0       	ldi	r21, 0x00	; 0
     c02:	42 1b       	sub	r20, r18
     c04:	53 0b       	sbc	r21, r19
     c06:	64 e6       	ldi	r22, 0x64	; 100
     c08:	64 9f       	mul	r22, r20
     c0a:	c0 01       	movw	r24, r0
     c0c:	65 9f       	mul	r22, r21
     c0e:	90 0d       	add	r25, r0
     c10:	11 24       	eor	r1, r1
     c12:	6f ef       	ldi	r22, 0xFF	; 255
     c14:	70 e0       	ldi	r23, 0x00	; 0
     c16:	62 1b       	sub	r22, r18
     c18:	73 0b       	sbc	r23, r19
     c1a:	0e 94 0f 09 	call	0x121e	; 0x121e <__divmodhi4>
     c1e:	61 83       	std	Z+1, r22	; 0x01
     c20:	08 95       	ret
		}else if(y<y_offset){
		values->y_val = -(y_offset-y)*(100)/y_offset;
     c22:	70 e0       	ldi	r23, 0x00	; 0
     c24:	50 e0       	ldi	r21, 0x00	; 0
     c26:	46 1b       	sub	r20, r22
     c28:	57 0b       	sbc	r21, r23
     c2a:	24 e6       	ldi	r18, 0x64	; 100
     c2c:	24 9f       	mul	r18, r20
     c2e:	c0 01       	movw	r24, r0
     c30:	25 9f       	mul	r18, r21
     c32:	90 0d       	add	r25, r0
     c34:	11 24       	eor	r1, r1
     c36:	0e 94 0f 09 	call	0x121e	; 0x121e <__divmodhi4>
     c3a:	61 83       	std	Z+1, r22	; 0x01
     c3c:	08 95       	ret

00000c3e <calc_pos_slider>:
	}
}
void calc_pos_slider(sliderVal* values, uint8_t left, uint8_t right){
     c3e:	cf 93       	push	r28
     c40:	df 93       	push	r29
     c42:	fc 01       	movw	r30, r24
	values->l_val = left*100/255;
     c44:	24 e6       	ldi	r18, 0x64	; 100
     c46:	26 9f       	mul	r18, r22
     c48:	c0 01       	movw	r24, r0
     c4a:	11 24       	eor	r1, r1
     c4c:	cf ef       	ldi	r28, 0xFF	; 255
     c4e:	d0 e0       	ldi	r29, 0x00	; 0
     c50:	be 01       	movw	r22, r28
     c52:	0e 94 0f 09 	call	0x121e	; 0x121e <__divmodhi4>
     c56:	60 83       	st	Z, r22
	values->r_val = right*100/255;
     c58:	24 9f       	mul	r18, r20
     c5a:	c0 01       	movw	r24, r0
     c5c:	11 24       	eor	r1, r1
     c5e:	be 01       	movw	r22, r28
     c60:	0e 94 0f 09 	call	0x121e	; 0x121e <__divmodhi4>
     c64:	61 83       	std	Z+1, r22	; 0x01
}
     c66:	df 91       	pop	r29
     c68:	cf 91       	pop	r28
     c6a:	08 95       	ret

00000c6c <button_check>:

uint8_t button_check(uint8_t current){
     c6c:	cf 93       	push	r28
	if(current == 0 && previous == 1){
     c6e:	81 11       	cpse	r24, r1
     c70:	0b c0       	rjmp	.+22     	; 0xc88 <button_check+0x1c>
     c72:	c0 91 1a 01 	lds	r28, 0x011A	; 0x80011a <previous>
     c76:	c1 30       	cpi	r28, 0x01	; 1
     c78:	61 f4       	brne	.+24     	; 0xc92 <button_check+0x26>
		previous = 0;
     c7a:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <previous>
		printf("%s", "B");
     c7e:	82 e4       	ldi	r24, 0x42	; 66
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	0e 94 15 0b 	call	0x162a	; 0x162a <putchar>
		return 1;
     c86:	06 c0       	rjmp	.+12     	; 0xc94 <button_check+0x28>
	}else if(current != 0){
		previous = 1;
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <previous>
		//printf("%s", "C");
	}
	return 0;
     c8e:	c0 e0       	ldi	r28, 0x00	; 0
     c90:	01 c0       	rjmp	.+2      	; 0xc94 <button_check+0x28>
     c92:	c0 e0       	ldi	r28, 0x00	; 0
}
     c94:	8c 2f       	mov	r24, r28
     c96:	cf 91       	pop	r28
     c98:	08 95       	ret

00000c9a <joystick_direction>:
	joydir = NEUTRAL;
	return joydir;
	
}*/

DIRECTION joystick_direction(DIRECTION dir, joyVal stick){
     c9a:	96 2f       	mov	r25, r22
     c9c:	27 2f       	mov	r18, r23
	if(stick.x_val < 50 && stick.x_val > -50 && stick.y_val < 50 && stick.y_val > -50 ){
     c9e:	6f 5c       	subi	r22, 0xCF	; 207
     ca0:	63 36       	cpi	r22, 0x63	; 99
     ca2:	18 f4       	brcc	.+6      	; 0xcaa <joystick_direction+0x10>
     ca4:	7f 5c       	subi	r23, 0xCF	; 207
     ca6:	73 36       	cpi	r23, 0x63	; 99
     ca8:	10 f0       	brcs	.+4      	; 0xcae <joystick_direction+0x14>
		dir = NEUTRAL;
	}
	if(dir == NEUTRAL){
     caa:	84 30       	cpi	r24, 0x04	; 4
     cac:	51 f4       	brne	.+20     	; 0xcc2 <joystick_direction+0x28>
		if(stick.x_val > 95){
     cae:	90 36       	cpi	r25, 0x60	; 96
     cb0:	54 f4       	brge	.+20     	; 0xcc6 <joystick_direction+0x2c>
			return RIGHT;
		}
		if(stick.x_val < -95){
     cb2:	91 3a       	cpi	r25, 0xA1	; 161
     cb4:	54 f0       	brlt	.+20     	; 0xcca <joystick_direction+0x30>
			return LEFT;
		}
		if(stick.y_val < -95){
     cb6:	21 3a       	cpi	r18, 0xA1	; 161
     cb8:	54 f0       	brlt	.+20     	; 0xcce <joystick_direction+0x34>
			return DOWN;
		}
		if(stick.y_val > 95){
     cba:	20 36       	cpi	r18, 0x60	; 96
     cbc:	54 f4       	brge	.+20     	; 0xcd2 <joystick_direction+0x38>
			return UP;
		}
		return NEUTRAL;
     cbe:	84 e0       	ldi	r24, 0x04	; 4
     cc0:	08 95       	ret
	}
	return WAITING;
     cc2:	85 e0       	ldi	r24, 0x05	; 5
     cc4:	08 95       	ret
	if(stick.x_val < 50 && stick.x_val > -50 && stick.y_val < 50 && stick.y_val > -50 ){
		dir = NEUTRAL;
	}
	if(dir == NEUTRAL){
		if(stick.x_val > 95){
			return RIGHT;
     cc6:	81 e0       	ldi	r24, 0x01	; 1
     cc8:	08 95       	ret
		}
		if(stick.x_val < -95){
			return LEFT;
     cca:	80 e0       	ldi	r24, 0x00	; 0
     ccc:	08 95       	ret
		}
		if(stick.y_val < -95){
			return DOWN;
     cce:	83 e0       	ldi	r24, 0x03	; 3
     cd0:	08 95       	ret
		}
		if(stick.y_val > 95){
			return UP;
     cd2:	82 e0       	ldi	r24, 0x02	; 2
		}
		return NEUTRAL;
	}
	return WAITING;
     cd4:	08 95       	ret

00000cd6 <main>:
} menuItem;




int main(void){
     cd6:	cf 93       	push	r28
     cd8:	df 93       	push	r29
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
     cde:	2b 97       	sbiw	r28, 0x0b	; 11
     ce0:	0f b6       	in	r0, 0x3f	; 63
     ce2:	f8 94       	cli
     ce4:	de bf       	out	0x3e, r29	; 62
     ce6:	0f be       	out	0x3f, r0	; 63
     ce8:	cd bf       	out	0x3d, r28	; 61
	
//  	joyVal joystick; 
//  	sliderVal slider; 
//	volatile amap* atmelMap = (amap*) BASE;
	
	MCUCR |= (1<<SRE);
     cea:	85 b7       	in	r24, 0x35	; 53
     cec:	80 68       	ori	r24, 0x80	; 128
     cee:	85 bf       	out	0x35, r24	; 53
	
	//DDRC = 0xFF;
	//PORTC = 0x00;
	
	SFIOR &= ~(1<<XMM0);
     cf0:	80 b7       	in	r24, 0x30	; 48
     cf2:	87 7f       	andi	r24, 0xF7	; 247
     cf4:	80 bf       	out	0x30, r24	; 48
	SFIOR &= ~(1<<XMM1);
     cf6:	80 b7       	in	r24, 0x30	; 48
     cf8:	8f 7e       	andi	r24, 0xEF	; 239
     cfa:	80 bf       	out	0x30, r24	; 48
	SFIOR |= (1<<XMM2);
     cfc:	80 b7       	in	r24, 0x30	; 48
     cfe:	80 62       	ori	r24, 0x20	; 32
     d00:	80 bf       	out	0x30, r24	; 48
	
	DDRA |= 0x18;
     d02:	8a b3       	in	r24, 0x1a	; 26
     d04:	88 61       	ori	r24, 0x18	; 24
     d06:	8a bb       	out	0x1a, r24	; 26
	TCCR2 |= (1<<WGM20);	
	TCCR2 |= (1<<COM21);
	TCCR2 |= (1<<COM20);
	*/

	USART_Init ( MYUBRR );
     d08:	8f e1       	ldi	r24, 0x1F	; 31
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	0e 94 ff 08 	call	0x11fe	; 0x11fe <USART_Init>
	SRAM_test(); _delay_ms(5000);
     d10:	0e 94 ab 08 	call	0x1156	; 0x1156 <SRAM_test>
     d14:	2f e3       	ldi	r18, 0x3F	; 63
     d16:	82 e4       	ldi	r24, 0x42	; 66
     d18:	9f e0       	ldi	r25, 0x0F	; 15
     d1a:	21 50       	subi	r18, 0x01	; 1
     d1c:	80 40       	sbci	r24, 0x00	; 0
     d1e:	90 40       	sbci	r25, 0x00	; 0
     d20:	e1 f7       	brne	.-8      	; 0xd1a <main+0x44>
     d22:	00 c0       	rjmp	.+0      	; 0xd24 <main+0x4e>
     d24:	00 00       	nop
		


	oled_init();
     d26:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <oled_init>
	clear_oled();
     d2a:	0e 94 36 07 	call	0xe6c	; 0xe6c <clear_oled>
	
		
	go_to_line(7);
     d2e:	87 e0       	ldi	r24, 0x07	; 7
     d30:	0e 94 27 07 	call	0xe4e	; 0xe4e <go_to_line>
     d34:	0c e5       	ldi	r16, 0x5C	; 92
     d36:	10 e0       	ldi	r17, 0x00	; 0
		
		_delay_ms(20);
		
	}*/
	for(int i = 0; i < 92; i++){
		printf("\n");
     d38:	8a e0       	ldi	r24, 0x0A	; 10
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	0e 94 15 0b 	call	0x162a	; 0x162a <putchar>
     d40:	01 50       	subi	r16, 0x01	; 1
     d42:	11 09       	sbc	r17, r1
		}
		
		_delay_ms(20);
		
	}*/
	for(int i = 0; i < 92; i++){
     d44:	c9 f7       	brne	.-14     	; 0xd38 <main+0x62>
		printf("\n");
		
		
	}
	
	can_init();
     d46:	0e 94 7f 03 	call	0x6fe	; 0x6fe <can_init>
	
	can_message msgToSend;
	msgToSend.data_length = 8;
     d4a:	88 e0       	ldi	r24, 0x08	; 8
     d4c:	8b 83       	std	Y+3, r24	; 0x03
	for(int i = 0; i < 8; i++){
		msgToSend.data[i] = 97+i;
     d4e:	81 e6       	ldi	r24, 0x61	; 97
     d50:	8c 83       	std	Y+4, r24	; 0x04
     d52:	82 e6       	ldi	r24, 0x62	; 98
     d54:	8d 83       	std	Y+5, r24	; 0x05
     d56:	83 e6       	ldi	r24, 0x63	; 99
     d58:	8e 83       	std	Y+6, r24	; 0x06
     d5a:	84 e6       	ldi	r24, 0x64	; 100
     d5c:	8f 83       	std	Y+7, r24	; 0x07
     d5e:	85 e6       	ldi	r24, 0x65	; 101
     d60:	88 87       	std	Y+8, r24	; 0x08
     d62:	86 e6       	ldi	r24, 0x66	; 102
     d64:	89 87       	std	Y+9, r24	; 0x09
     d66:	87 e6       	ldi	r24, 0x67	; 103
     d68:	8a 87       	std	Y+10, r24	; 0x0a
     d6a:	88 e6       	ldi	r24, 0x68	; 104
     d6c:	8b 87       	std	Y+11, r24	; 0x0b
	}
	msgToSend.id = 0xffff;
     d6e:	8f ef       	ldi	r24, 0xFF	; 255
     d70:	9f ef       	ldi	r25, 0xFF	; 255
     d72:	9a 83       	std	Y+2, r25	; 0x02
     d74:	89 83       	std	Y+1, r24	; 0x01
		ch = mcp2515_read(0x56);
		printf("%c |||| \r\n", ch);
		_delay_ms(5000);
	}*/
	
	launch_menusystem();
     d76:	0e 94 34 05 	call	0xa68	; 0xa68 <launch_menusystem>
     d7a:	6e 01       	movw	r12, r28
     d7c:	ec e0       	ldi	r30, 0x0C	; 12
     d7e:	ce 0e       	add	r12, r30
     d80:	d1 1c       	adc	r13, r1
		
		_delay_ms(5000);
		send_can_msg(&msgToSend);

		for(int i = 0; i < 8; i++){
			printf("\r   %c | %d | %d   \r",msgToSend.data[i],msgToSend.data_length,msgToSend.id);
     d82:	0f 2e       	mov	r0, r31
     d84:	f2 eb       	ldi	r31, 0xB2	; 178
     d86:	ef 2e       	mov	r14, r31
     d88:	f1 e0       	ldi	r31, 0x01	; 1
     d8a:	ff 2e       	mov	r15, r31
     d8c:	f0 2d       	mov	r31, r0
     d8e:	ff e3       	ldi	r31, 0x3F	; 63
     d90:	22 e4       	ldi	r18, 0x42	; 66
     d92:	8f e0       	ldi	r24, 0x0F	; 15
     d94:	f1 50       	subi	r31, 0x01	; 1
     d96:	20 40       	sbci	r18, 0x00	; 0
     d98:	80 40       	sbci	r24, 0x00	; 0
     d9a:	e1 f7       	brne	.-8      	; 0xd94 <main+0xbe>
     d9c:	00 c0       	rjmp	.+0      	; 0xd9e <main+0xc8>
     d9e:	00 00       	nop
	
	while(1){
		// CAN BUS TEST
		
		_delay_ms(5000);
		send_can_msg(&msgToSend);
     da0:	ce 01       	movw	r24, r28
     da2:	01 96       	adiw	r24, 0x01	; 1
     da4:	0e 94 97 03 	call	0x72e	; 0x72e <send_can_msg>
     da8:	8e 01       	movw	r16, r28
     daa:	0c 5f       	subi	r16, 0xFC	; 252
     dac:	1f 4f       	sbci	r17, 0xFF	; 255

		for(int i = 0; i < 8; i++){
			printf("\r   %c | %d | %d   \r",msgToSend.data[i],msgToSend.data_length,msgToSend.id);
     dae:	f8 01       	movw	r30, r16
     db0:	81 91       	ld	r24, Z+
     db2:	8f 01       	movw	r16, r30
     db4:	9a 81       	ldd	r25, Y+2	; 0x02
     db6:	9f 93       	push	r25
     db8:	99 81       	ldd	r25, Y+1	; 0x01
     dba:	9f 93       	push	r25
     dbc:	9b 81       	ldd	r25, Y+3	; 0x03
     dbe:	1f 92       	push	r1
     dc0:	9f 93       	push	r25
     dc2:	1f 92       	push	r1
     dc4:	8f 93       	push	r24
     dc6:	ff 92       	push	r15
     dc8:	ef 92       	push	r14
     dca:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <printf>
     dce:	ff e3       	ldi	r31, 0x3F	; 63
     dd0:	2d e0       	ldi	r18, 0x0D	; 13
     dd2:	83 e0       	ldi	r24, 0x03	; 3
     dd4:	f1 50       	subi	r31, 0x01	; 1
     dd6:	20 40       	sbci	r18, 0x00	; 0
     dd8:	80 40       	sbci	r24, 0x00	; 0
     dda:	e1 f7       	brne	.-8      	; 0xdd4 <main+0xfe>
     ddc:	00 c0       	rjmp	.+0      	; 0xdde <main+0x108>
     dde:	00 00       	nop
		// CAN BUS TEST
		
		_delay_ms(5000);
		send_can_msg(&msgToSend);

		for(int i = 0; i < 8; i++){
     de0:	0f b6       	in	r0, 0x3f	; 63
     de2:	f8 94       	cli
     de4:	de bf       	out	0x3e, r29	; 62
     de6:	0f be       	out	0x3f, r0	; 63
     de8:	cd bf       	out	0x3d, r28	; 61
     dea:	0c 15       	cp	r16, r12
     dec:	1d 05       	cpc	r17, r13
     dee:	f9 f6       	brne	.-66     	; 0xdae <main+0xd8>
     df0:	ce cf       	rjmp	.-100    	; 0xd8e <main+0xb8>

00000df2 <oled_init>:
	atmelMap->OLED_CMD[1] = 0xB1;
	atmelMap->OLED_CMD[1] = 0x00;
	atmelMap->OLED_CMD[1] = 0x10;
}
void oled_write(amap* atmelMap){
	atmelMap->OLED_DATA[1] = 0x0F;
     df2:	e0 e0       	ldi	r30, 0x00	; 0
     df4:	f0 e1       	ldi	r31, 0x10	; 16
     df6:	8e ea       	ldi	r24, 0xAE	; 174
     df8:	80 83       	st	Z, r24
     dfa:	81 ea       	ldi	r24, 0xA1	; 161
     dfc:	80 83       	st	Z, r24
     dfe:	8a ed       	ldi	r24, 0xDA	; 218
     e00:	80 83       	st	Z, r24
     e02:	82 e1       	ldi	r24, 0x12	; 18
     e04:	80 83       	st	Z, r24
     e06:	88 ec       	ldi	r24, 0xC8	; 200
     e08:	80 83       	st	Z, r24
     e0a:	88 ea       	ldi	r24, 0xA8	; 168
     e0c:	80 83       	st	Z, r24
     e0e:	8f e3       	ldi	r24, 0x3F	; 63
     e10:	80 83       	st	Z, r24
     e12:	85 ed       	ldi	r24, 0xD5	; 213
     e14:	80 83       	st	Z, r24
     e16:	80 e8       	ldi	r24, 0x80	; 128
     e18:	80 83       	st	Z, r24
     e1a:	81 e8       	ldi	r24, 0x81	; 129
     e1c:	80 83       	st	Z, r24
     e1e:	80 e5       	ldi	r24, 0x50	; 80
     e20:	80 83       	st	Z, r24
     e22:	89 ed       	ldi	r24, 0xD9	; 217
     e24:	80 83       	st	Z, r24
     e26:	81 e2       	ldi	r24, 0x21	; 33
     e28:	80 83       	st	Z, r24
     e2a:	80 e2       	ldi	r24, 0x20	; 32
     e2c:	80 83       	st	Z, r24
     e2e:	82 e0       	ldi	r24, 0x02	; 2
     e30:	80 83       	st	Z, r24
     e32:	8b ed       	ldi	r24, 0xDB	; 219
     e34:	80 83       	st	Z, r24
     e36:	80 e3       	ldi	r24, 0x30	; 48
     e38:	80 83       	st	Z, r24
     e3a:	8d ea       	ldi	r24, 0xAD	; 173
     e3c:	80 83       	st	Z, r24
     e3e:	10 82       	st	Z, r1
     e40:	84 ea       	ldi	r24, 0xA4	; 164
     e42:	80 83       	st	Z, r24
     e44:	86 ea       	ldi	r24, 0xA6	; 166
     e46:	80 83       	st	Z, r24
     e48:	8f ea       	ldi	r24, 0xAF	; 175
     e4a:	80 83       	st	Z, r24
     e4c:	08 95       	ret

00000e4e <go_to_line>:
     e4e:	87 70       	andi	r24, 0x07	; 7
     e50:	80 55       	subi	r24, 0x50	; 80
     e52:	80 93 00 10 	sts	0x1000, r24	; 0x801000 <__bss_end+0xdbb>
     e56:	08 95       	ret

00000e58 <go_to_column>:
     e58:	98 2f       	mov	r25, r24
     e5a:	9f 70       	andi	r25, 0x0F	; 15
     e5c:	e0 e0       	ldi	r30, 0x00	; 0
     e5e:	f0 e1       	ldi	r31, 0x10	; 16
     e60:	90 83       	st	Z, r25
     e62:	82 95       	swap	r24
     e64:	8f 70       	andi	r24, 0x0F	; 15
     e66:	80 5f       	subi	r24, 0xF0	; 240
     e68:	80 83       	st	Z, r24
     e6a:	08 95       	ret

00000e6c <clear_oled>:
}

void clear_oled(){
     e6c:	1f 93       	push	r17
     e6e:	cf 93       	push	r28
     e70:	df 93       	push	r29
     e72:	10 e0       	ldi	r17, 0x00	; 0
	ext_ram[0] = c;
}
void oled_write_data(char c)
{
	volatile char *ext_ram = (char *) 0x1200;
	ext_ram[0] = c;
     e74:	c0 e0       	ldi	r28, 0x00	; 0
     e76:	d2 e1       	ldi	r29, 0x12	; 18
	atmelMap->OLED_DATA[1] = 0x0F;
}

void clear_oled(){
	for(int i = 0; i < 8 ; i++){
		go_to_line(i);
     e78:	81 2f       	mov	r24, r17
     e7a:	0e 94 27 07 	call	0xe4e	; 0xe4e <go_to_line>
		
		go_to_column(0);
     e7e:	80 e0       	ldi	r24, 0x00	; 0
     e80:	0e 94 2c 07 	call	0xe58	; 0xe58 <go_to_column>
     e84:	80 e8       	ldi	r24, 0x80	; 128
     e86:	90 e0       	ldi	r25, 0x00	; 0
	ext_ram[0] = c;
}
void oled_write_data(char c)
{
	volatile char *ext_ram = (char *) 0x1200;
	ext_ram[0] = c;
     e88:	18 82       	st	Y, r1
     e8a:	01 97       	sbiw	r24, 0x01	; 1
void clear_oled(){
	for(int i = 0; i < 8 ; i++){
		go_to_line(i);
		
		go_to_column(0);
		for(int j = 0; j < 128; j++){
     e8c:	e9 f7       	brne	.-6      	; 0xe88 <clear_oled+0x1c>
     e8e:	1f 5f       	subi	r17, 0xFF	; 255
void oled_write(amap* atmelMap){
	atmelMap->OLED_DATA[1] = 0x0F;
}

void clear_oled(){
	for(int i = 0; i < 8 ; i++){
     e90:	18 30       	cpi	r17, 0x08	; 8
     e92:	91 f7       	brne	.-28     	; 0xe78 <clear_oled+0xc>
		for(int j = 0; j < 128; j++){
			
			oled_write_data(0x00);
		}
	}
}
     e94:	df 91       	pop	r29
     e96:	cf 91       	pop	r28
     e98:	1f 91       	pop	r17
     e9a:	08 95       	ret

00000e9c <clear_oled_new>:

void clear_oled_new(){
     e9c:	1f 93       	push	r17
     e9e:	cf 93       	push	r28
     ea0:	df 93       	push	r29
     ea2:	10 e0       	ldi	r17, 0x00	; 0
	ext_ram[0] = c;
}
void oled_write_data(char c)
{
	volatile char *ext_ram = (char *) 0x1200;
	ext_ram[0] = c;
     ea4:	c0 e0       	ldi	r28, 0x00	; 0
     ea6:	d2 e1       	ldi	r29, 0x12	; 18
	}
}

void clear_oled_new(){
	for(int i = 0; i < 8 ; i++){
		go_to_line(i);
     ea8:	81 2f       	mov	r24, r17
     eaa:	0e 94 27 07 	call	0xe4e	; 0xe4e <go_to_line>
		
		go_to_column(0);
     eae:	80 e0       	ldi	r24, 0x00	; 0
     eb0:	0e 94 2c 07 	call	0xe58	; 0xe58 <go_to_column>
     eb4:	80 e8       	ldi	r24, 0x80	; 128
     eb6:	90 e0       	ldi	r25, 0x00	; 0
	ext_ram[0] = c;
}
void oled_write_data(char c)
{
	volatile char *ext_ram = (char *) 0x1200;
	ext_ram[0] = c;
     eb8:	18 82       	st	Y, r1
     eba:	01 97       	sbiw	r24, 0x01	; 1
void clear_oled_new(){
	for(int i = 0; i < 8 ; i++){
		go_to_line(i);
		
		go_to_column(0);
		for(int j = 0; j < 128; j++){
     ebc:	e9 f7       	brne	.-6      	; 0xeb8 <clear_oled_new+0x1c>
     ebe:	1f 5f       	subi	r17, 0xFF	; 255
		}
	}
}

void clear_oled_new(){
	for(int i = 0; i < 8 ; i++){
     ec0:	18 30       	cpi	r17, 0x08	; 8
     ec2:	91 f7       	brne	.-28     	; 0xea8 <clear_oled_new+0xc>
		for(int j = 0; j < 128; j++){
			
			oled_write_data(0x00);
		}
	}
}
     ec4:	df 91       	pop	r29
     ec6:	cf 91       	pop	r28
     ec8:	1f 91       	pop	r17
     eca:	08 95       	ret

00000ecc <oled_write_char_using_font>:
	}
	
}

void oled_write_char_using_font(char c, uint8_t n){
	uint8_t character = c-32;
     ecc:	80 52       	subi	r24, 0x20	; 32
	
	if(n==8){
     ece:	68 30       	cpi	r22, 0x08	; 8
     ed0:	f1 f4       	brne	.+60     	; 0xf0e <oled_write_char_using_font+0x42>
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	9c 01       	movw	r18, r24
     ed6:	22 0f       	add	r18, r18
     ed8:	33 1f       	adc	r19, r19
     eda:	22 0f       	add	r18, r18
     edc:	33 1f       	adc	r19, r19
     ede:	22 0f       	add	r18, r18
     ee0:	33 1f       	adc	r19, r19
     ee2:	29 53       	subi	r18, 0x39	; 57
     ee4:	3c 4f       	sbci	r19, 0xFC	; 252
     ee6:	88 0f       	add	r24, r24
     ee8:	99 1f       	adc	r25, r25
     eea:	88 0f       	add	r24, r24
     eec:	99 1f       	adc	r25, r25
     eee:	88 0f       	add	r24, r24
     ef0:	99 1f       	adc	r25, r25
     ef2:	81 53       	subi	r24, 0x31	; 49
     ef4:	9c 4f       	sbci	r25, 0xFC	; 252
	ext_ram[0] = c;
}
void oled_write_data(char c)
{
	volatile char *ext_ram = (char *) 0x1200;
	ext_ram[0] = c;
     ef6:	a0 e0       	ldi	r26, 0x00	; 0
     ef8:	b2 e1       	ldi	r27, 0x12	; 18
void oled_write_char_using_font(char c, uint8_t n){
	uint8_t character = c-32;
	
	if(n==8){
		for (int i=0; i < n; i++) {
			oled_write_data(pgm_read_word(&font8[character][i]));
     efa:	f9 01       	movw	r30, r18
     efc:	45 91       	lpm	r20, Z+
     efe:	54 91       	lpm	r21, Z
	ext_ram[0] = c;
}
void oled_write_data(char c)
{
	volatile char *ext_ram = (char *) 0x1200;
	ext_ram[0] = c;
     f00:	4c 93       	st	X, r20
     f02:	2f 5f       	subi	r18, 0xFF	; 255
     f04:	3f 4f       	sbci	r19, 0xFF	; 255

void oled_write_char_using_font(char c, uint8_t n){
	uint8_t character = c-32;
	
	if(n==8){
		for (int i=0; i < n; i++) {
     f06:	82 17       	cp	r24, r18
     f08:	93 07       	cpc	r25, r19
     f0a:	b9 f7       	brne	.-18     	; 0xefa <oled_write_char_using_font+0x2e>
     f0c:	08 95       	ret
			oled_write_data(pgm_read_word(&font8[character][i]));
		}
	}else if(n == 5){
     f0e:	65 30       	cpi	r22, 0x05	; 5
     f10:	d1 f4       	brne	.+52     	; 0xf46 <oled_write_char_using_font+0x7a>
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	9c 01       	movw	r18, r24
     f16:	22 0f       	add	r18, r18
     f18:	33 1f       	adc	r19, r19
     f1a:	22 0f       	add	r18, r18
     f1c:	33 1f       	adc	r19, r19
     f1e:	82 0f       	add	r24, r18
     f20:	93 1f       	adc	r25, r19
     f22:	20 e0       	ldi	r18, 0x00	; 0
     f24:	30 e0       	ldi	r19, 0x00	; 0
	ext_ram[0] = c;
}
void oled_write_data(char c)
{
	volatile char *ext_ram = (char *) 0x1200;
	ext_ram[0] = c;
     f26:	a0 e0       	ldi	r26, 0x00	; 0
     f28:	b2 e1       	ldi	r27, 0x12	; 18
		for (int i=0; i < n; i++) {
			oled_write_data(pgm_read_word(&font8[character][i]));
		}
	}else if(n == 5){
		for (int i=0; i < n; i++) {
			oled_write_data(pgm_read_word(&font5[character][i]));
     f2a:	f9 01       	movw	r30, r18
     f2c:	e8 0f       	add	r30, r24
     f2e:	f9 1f       	adc	r31, r25
     f30:	e4 51       	subi	r30, 0x14	; 20
     f32:	fe 4f       	sbci	r31, 0xFE	; 254
     f34:	45 91       	lpm	r20, Z+
     f36:	54 91       	lpm	r21, Z
	ext_ram[0] = c;
}
void oled_write_data(char c)
{
	volatile char *ext_ram = (char *) 0x1200;
	ext_ram[0] = c;
     f38:	4c 93       	st	X, r20
	if(n==8){
		for (int i=0; i < n; i++) {
			oled_write_data(pgm_read_word(&font8[character][i]));
		}
	}else if(n == 5){
		for (int i=0; i < n; i++) {
     f3a:	2f 5f       	subi	r18, 0xFF	; 255
     f3c:	3f 4f       	sbci	r19, 0xFF	; 255
     f3e:	25 30       	cpi	r18, 0x05	; 5
     f40:	31 05       	cpc	r19, r1
     f42:	99 f7       	brne	.-26     	; 0xf2a <oled_write_char_using_font+0x5e>
     f44:	08 95       	ret
			oled_write_data(pgm_read_word(&font5[character][i]));
		}
	}else if(n == 4){
     f46:	64 30       	cpi	r22, 0x04	; 4
     f48:	b1 f4       	brne	.+44     	; 0xf76 <oled_write_char_using_font+0xaa>
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	88 0f       	add	r24, r24
     f4e:	99 1f       	adc	r25, r25
     f50:	88 0f       	add	r24, r24
     f52:	99 1f       	adc	r25, r25
     f54:	20 e0       	ldi	r18, 0x00	; 0
     f56:	30 e0       	ldi	r19, 0x00	; 0
	ext_ram[0] = c;
}
void oled_write_data(char c)
{
	volatile char *ext_ram = (char *) 0x1200;
	ext_ram[0] = c;
     f58:	a0 e0       	ldi	r26, 0x00	; 0
     f5a:	b2 e1       	ldi	r27, 0x12	; 18
		for (int i=0; i < n; i++) {
			oled_write_data(pgm_read_word(&font5[character][i]));
		}
	}else if(n == 4){
		for (int i=0; i < n; i++) {
			oled_write_data(pgm_read_word(&font4[character][i]));
     f5c:	f9 01       	movw	r30, r18
     f5e:	e8 0f       	add	r30, r24
     f60:	f9 1f       	adc	r31, r25
     f62:	e0 59       	subi	r30, 0x90	; 144
     f64:	ff 4f       	sbci	r31, 0xFF	; 255
     f66:	45 91       	lpm	r20, Z+
     f68:	54 91       	lpm	r21, Z
	ext_ram[0] = c;
}
void oled_write_data(char c)
{
	volatile char *ext_ram = (char *) 0x1200;
	ext_ram[0] = c;
     f6a:	4c 93       	st	X, r20
	}else if(n == 5){
		for (int i=0; i < n; i++) {
			oled_write_data(pgm_read_word(&font5[character][i]));
		}
	}else if(n == 4){
		for (int i=0; i < n; i++) {
     f6c:	2f 5f       	subi	r18, 0xFF	; 255
     f6e:	3f 4f       	sbci	r19, 0xFF	; 255
     f70:	24 30       	cpi	r18, 0x04	; 4
     f72:	31 05       	cpc	r19, r1
     f74:	99 f7       	brne	.-26     	; 0xf5c <oled_write_char_using_font+0x90>
     f76:	08 95       	ret

00000f78 <oled_write_string>:
			oled_write_data(0x00);
		}
	}
}

void oled_write_string(uint8_t startline, char* c, uint8_t n){
     f78:	8f 92       	push	r8
     f7a:	9f 92       	push	r9
     f7c:	af 92       	push	r10
     f7e:	bf 92       	push	r11
     f80:	cf 92       	push	r12
     f82:	df 92       	push	r13
     f84:	ef 92       	push	r14
     f86:	ff 92       	push	r15
     f88:	0f 93       	push	r16
     f8a:	1f 93       	push	r17
     f8c:	cf 93       	push	r28
     f8e:	df 93       	push	r29
     f90:	88 2e       	mov	r8, r24
     f92:	8b 01       	movw	r16, r22
     f94:	94 2e       	mov	r9, r20
	go_to_line(startline);
     f96:	0e 94 27 07 	call	0xe4e	; 0xe4e <go_to_line>
     f9a:	78 01       	movw	r14, r16
	
	for (int i=0; i < strlen(c); i++) {
     f9c:	c0 e0       	ldi	r28, 0x00	; 0
     f9e:	d0 e0       	ldi	r29, 0x00	; 0
		if(i%((int)128/n) == 0){
     fa0:	a9 2c       	mov	r10, r9
     fa2:	b1 2c       	mov	r11, r1
     fa4:	68 94       	set
     fa6:	cc 24       	eor	r12, r12
     fa8:	c7 f8       	bld	r12, 7
     faa:	d1 2c       	mov	r13, r1
}

void oled_write_string(uint8_t startline, char* c, uint8_t n){
	go_to_line(startline);
	
	for (int i=0; i < strlen(c); i++) {
     fac:	19 c0       	rjmp	.+50     	; 0xfe0 <oled_write_string+0x68>
		if(i%((int)128/n) == 0){
     fae:	c6 01       	movw	r24, r12
     fb0:	b5 01       	movw	r22, r10
     fb2:	0e 94 0f 09 	call	0x121e	; 0x121e <__divmodhi4>
     fb6:	9b 01       	movw	r18, r22
     fb8:	ce 01       	movw	r24, r28
     fba:	0e 94 0f 09 	call	0x121e	; 0x121e <__divmodhi4>
     fbe:	89 2b       	or	r24, r25
     fc0:	41 f4       	brne	.+16     	; 0xfd2 <oled_write_string+0x5a>
			go_to_line(startline+i/((int)128/n));
     fc2:	ce 01       	movw	r24, r28
     fc4:	b9 01       	movw	r22, r18
     fc6:	0e 94 0f 09 	call	0x121e	; 0x121e <__divmodhi4>
     fca:	88 2d       	mov	r24, r8
     fcc:	86 0f       	add	r24, r22
     fce:	0e 94 27 07 	call	0xe4e	; 0xe4e <go_to_line>
		}
		oled_write_char_using_font(c[i],n);
     fd2:	69 2d       	mov	r22, r9
     fd4:	f7 01       	movw	r30, r14
     fd6:	81 91       	ld	r24, Z+
     fd8:	7f 01       	movw	r14, r30
     fda:	0e 94 66 07 	call	0xecc	; 0xecc <oled_write_char_using_font>
}

void oled_write_string(uint8_t startline, char* c, uint8_t n){
	go_to_line(startline);
	
	for (int i=0; i < strlen(c); i++) {
     fde:	21 96       	adiw	r28, 0x01	; 1
     fe0:	f8 01       	movw	r30, r16
     fe2:	01 90       	ld	r0, Z+
     fe4:	00 20       	and	r0, r0
     fe6:	e9 f7       	brne	.-6      	; 0xfe2 <oled_write_string+0x6a>
     fe8:	31 97       	sbiw	r30, 0x01	; 1
     fea:	e0 1b       	sub	r30, r16
     fec:	f1 0b       	sbc	r31, r17
     fee:	ce 17       	cp	r28, r30
     ff0:	df 07       	cpc	r29, r31
     ff2:	e8 f2       	brcs	.-70     	; 0xfae <oled_write_string+0x36>
		}
		oled_write_char_using_font(c[i],n);
		
	}
	
}
     ff4:	df 91       	pop	r29
     ff6:	cf 91       	pop	r28
     ff8:	1f 91       	pop	r17
     ffa:	0f 91       	pop	r16
     ffc:	ff 90       	pop	r15
     ffe:	ef 90       	pop	r14
    1000:	df 90       	pop	r13
    1002:	cf 90       	pop	r12
    1004:	bf 90       	pop	r11
    1006:	af 90       	pop	r10
    1008:	9f 90       	pop	r9
    100a:	8f 90       	pop	r8
    100c:	08 95       	ret

0000100e <oled_write_inverted_char_using_font>:
	}
	
}

void oled_write_inverted_char_using_font(char c, uint8_t n){
	uint8_t character = c-32;
    100e:	80 52       	subi	r24, 0x20	; 32
	
	if(n==8){
    1010:	68 30       	cpi	r22, 0x08	; 8
    1012:	f9 f4       	brne	.+62     	; 0x1052 <oled_write_inverted_char_using_font+0x44>
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	9c 01       	movw	r18, r24
    1018:	22 0f       	add	r18, r18
    101a:	33 1f       	adc	r19, r19
    101c:	22 0f       	add	r18, r18
    101e:	33 1f       	adc	r19, r19
    1020:	22 0f       	add	r18, r18
    1022:	33 1f       	adc	r19, r19
    1024:	29 53       	subi	r18, 0x39	; 57
    1026:	3c 4f       	sbci	r19, 0xFC	; 252
    1028:	88 0f       	add	r24, r24
    102a:	99 1f       	adc	r25, r25
    102c:	88 0f       	add	r24, r24
    102e:	99 1f       	adc	r25, r25
    1030:	88 0f       	add	r24, r24
    1032:	99 1f       	adc	r25, r25
    1034:	81 53       	subi	r24, 0x31	; 49
    1036:	9c 4f       	sbci	r25, 0xFC	; 252
	ext_ram[0] = c;
}
void oled_write_data(char c)
{
	volatile char *ext_ram = (char *) 0x1200;
	ext_ram[0] = c;
    1038:	a0 e0       	ldi	r26, 0x00	; 0
    103a:	b2 e1       	ldi	r27, 0x12	; 18
void oled_write_inverted_char_using_font(char c, uint8_t n){
	uint8_t character = c-32;
	
	if(n==8){
		for (int i=0; i < n; i++) {
			oled_write_data(~pgm_read_word(&font8[character][i]));
    103c:	f9 01       	movw	r30, r18
    103e:	45 91       	lpm	r20, Z+
    1040:	54 91       	lpm	r21, Z
    1042:	40 95       	com	r20
	ext_ram[0] = c;
}
void oled_write_data(char c)
{
	volatile char *ext_ram = (char *) 0x1200;
	ext_ram[0] = c;
    1044:	4c 93       	st	X, r20
    1046:	2f 5f       	subi	r18, 0xFF	; 255
    1048:	3f 4f       	sbci	r19, 0xFF	; 255

void oled_write_inverted_char_using_font(char c, uint8_t n){
	uint8_t character = c-32;
	
	if(n==8){
		for (int i=0; i < n; i++) {
    104a:	82 17       	cp	r24, r18
    104c:	93 07       	cpc	r25, r19
    104e:	b1 f7       	brne	.-20     	; 0x103c <oled_write_inverted_char_using_font+0x2e>
    1050:	08 95       	ret
			oled_write_data(~pgm_read_word(&font8[character][i]));
		}
		}else if(n == 5){
    1052:	65 30       	cpi	r22, 0x05	; 5
    1054:	d9 f4       	brne	.+54     	; 0x108c <oled_write_inverted_char_using_font+0x7e>
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	9c 01       	movw	r18, r24
    105a:	22 0f       	add	r18, r18
    105c:	33 1f       	adc	r19, r19
    105e:	22 0f       	add	r18, r18
    1060:	33 1f       	adc	r19, r19
    1062:	82 0f       	add	r24, r18
    1064:	93 1f       	adc	r25, r19
    1066:	20 e0       	ldi	r18, 0x00	; 0
    1068:	30 e0       	ldi	r19, 0x00	; 0
	ext_ram[0] = c;
}
void oled_write_data(char c)
{
	volatile char *ext_ram = (char *) 0x1200;
	ext_ram[0] = c;
    106a:	a0 e0       	ldi	r26, 0x00	; 0
    106c:	b2 e1       	ldi	r27, 0x12	; 18
		for (int i=0; i < n; i++) {
			oled_write_data(~pgm_read_word(&font8[character][i]));
		}
		}else if(n == 5){
		for (int i=0; i < n; i++) {
			oled_write_data(~pgm_read_word(&font5[character][i]));
    106e:	f9 01       	movw	r30, r18
    1070:	e8 0f       	add	r30, r24
    1072:	f9 1f       	adc	r31, r25
    1074:	e4 51       	subi	r30, 0x14	; 20
    1076:	fe 4f       	sbci	r31, 0xFE	; 254
    1078:	45 91       	lpm	r20, Z+
    107a:	54 91       	lpm	r21, Z
    107c:	40 95       	com	r20
	ext_ram[0] = c;
}
void oled_write_data(char c)
{
	volatile char *ext_ram = (char *) 0x1200;
	ext_ram[0] = c;
    107e:	4c 93       	st	X, r20
	if(n==8){
		for (int i=0; i < n; i++) {
			oled_write_data(~pgm_read_word(&font8[character][i]));
		}
		}else if(n == 5){
		for (int i=0; i < n; i++) {
    1080:	2f 5f       	subi	r18, 0xFF	; 255
    1082:	3f 4f       	sbci	r19, 0xFF	; 255
    1084:	25 30       	cpi	r18, 0x05	; 5
    1086:	31 05       	cpc	r19, r1
    1088:	91 f7       	brne	.-28     	; 0x106e <oled_write_inverted_char_using_font+0x60>
    108a:	08 95       	ret
			oled_write_data(~pgm_read_word(&font5[character][i]));
		}
		}else if(n == 4){
    108c:	64 30       	cpi	r22, 0x04	; 4
    108e:	b9 f4       	brne	.+46     	; 0x10be <oled_write_inverted_char_using_font+0xb0>
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	88 0f       	add	r24, r24
    1094:	99 1f       	adc	r25, r25
    1096:	88 0f       	add	r24, r24
    1098:	99 1f       	adc	r25, r25
    109a:	20 e0       	ldi	r18, 0x00	; 0
    109c:	30 e0       	ldi	r19, 0x00	; 0
	ext_ram[0] = c;
}
void oled_write_data(char c)
{
	volatile char *ext_ram = (char *) 0x1200;
	ext_ram[0] = c;
    109e:	a0 e0       	ldi	r26, 0x00	; 0
    10a0:	b2 e1       	ldi	r27, 0x12	; 18
		for (int i=0; i < n; i++) {
			oled_write_data(~pgm_read_word(&font5[character][i]));
		}
		}else if(n == 4){
		for (int i=0; i < n; i++) {
			oled_write_data(~pgm_read_word(&font4[character][i]));
    10a2:	f9 01       	movw	r30, r18
    10a4:	e8 0f       	add	r30, r24
    10a6:	f9 1f       	adc	r31, r25
    10a8:	e0 59       	subi	r30, 0x90	; 144
    10aa:	ff 4f       	sbci	r31, 0xFF	; 255
    10ac:	45 91       	lpm	r20, Z+
    10ae:	54 91       	lpm	r21, Z
    10b0:	40 95       	com	r20
	ext_ram[0] = c;
}
void oled_write_data(char c)
{
	volatile char *ext_ram = (char *) 0x1200;
	ext_ram[0] = c;
    10b2:	4c 93       	st	X, r20
		}else if(n == 5){
		for (int i=0; i < n; i++) {
			oled_write_data(~pgm_read_word(&font5[character][i]));
		}
		}else if(n == 4){
		for (int i=0; i < n; i++) {
    10b4:	2f 5f       	subi	r18, 0xFF	; 255
    10b6:	3f 4f       	sbci	r19, 0xFF	; 255
    10b8:	24 30       	cpi	r18, 0x04	; 4
    10ba:	31 05       	cpc	r19, r1
    10bc:	91 f7       	brne	.-28     	; 0x10a2 <oled_write_inverted_char_using_font+0x94>
    10be:	08 95       	ret

000010c0 <oled_write_string_inverted>:
		
	}
	
}

void oled_write_string_inverted(uint8_t startline, char* c, uint8_t n){
    10c0:	8f 92       	push	r8
    10c2:	9f 92       	push	r9
    10c4:	af 92       	push	r10
    10c6:	bf 92       	push	r11
    10c8:	cf 92       	push	r12
    10ca:	df 92       	push	r13
    10cc:	ef 92       	push	r14
    10ce:	ff 92       	push	r15
    10d0:	0f 93       	push	r16
    10d2:	1f 93       	push	r17
    10d4:	cf 93       	push	r28
    10d6:	df 93       	push	r29
    10d8:	88 2e       	mov	r8, r24
    10da:	8b 01       	movw	r16, r22
    10dc:	94 2e       	mov	r9, r20
	go_to_line(startline);
    10de:	0e 94 27 07 	call	0xe4e	; 0xe4e <go_to_line>
    10e2:	78 01       	movw	r14, r16
	
	for (int i=0; i < strlen(c); i++) {
    10e4:	c0 e0       	ldi	r28, 0x00	; 0
    10e6:	d0 e0       	ldi	r29, 0x00	; 0
		if(i%((int)128/n) == 0){
    10e8:	a9 2c       	mov	r10, r9
    10ea:	b1 2c       	mov	r11, r1
    10ec:	68 94       	set
    10ee:	cc 24       	eor	r12, r12
    10f0:	c7 f8       	bld	r12, 7
    10f2:	d1 2c       	mov	r13, r1
}

void oled_write_string_inverted(uint8_t startline, char* c, uint8_t n){
	go_to_line(startline);
	
	for (int i=0; i < strlen(c); i++) {
    10f4:	19 c0       	rjmp	.+50     	; 0x1128 <oled_write_string_inverted+0x68>
		if(i%((int)128/n) == 0){
    10f6:	c6 01       	movw	r24, r12
    10f8:	b5 01       	movw	r22, r10
    10fa:	0e 94 0f 09 	call	0x121e	; 0x121e <__divmodhi4>
    10fe:	9b 01       	movw	r18, r22
    1100:	ce 01       	movw	r24, r28
    1102:	0e 94 0f 09 	call	0x121e	; 0x121e <__divmodhi4>
    1106:	89 2b       	or	r24, r25
    1108:	41 f4       	brne	.+16     	; 0x111a <oled_write_string_inverted+0x5a>
			go_to_line(startline+i/((int)128/n));
    110a:	ce 01       	movw	r24, r28
    110c:	b9 01       	movw	r22, r18
    110e:	0e 94 0f 09 	call	0x121e	; 0x121e <__divmodhi4>
    1112:	88 2d       	mov	r24, r8
    1114:	86 0f       	add	r24, r22
    1116:	0e 94 27 07 	call	0xe4e	; 0xe4e <go_to_line>
		}
		oled_write_inverted_char_using_font(c[i],n);
    111a:	69 2d       	mov	r22, r9
    111c:	f7 01       	movw	r30, r14
    111e:	81 91       	ld	r24, Z+
    1120:	7f 01       	movw	r14, r30
    1122:	0e 94 07 08 	call	0x100e	; 0x100e <oled_write_inverted_char_using_font>
}

void oled_write_string_inverted(uint8_t startline, char* c, uint8_t n){
	go_to_line(startline);
	
	for (int i=0; i < strlen(c); i++) {
    1126:	21 96       	adiw	r28, 0x01	; 1
    1128:	f8 01       	movw	r30, r16
    112a:	01 90       	ld	r0, Z+
    112c:	00 20       	and	r0, r0
    112e:	e9 f7       	brne	.-6      	; 0x112a <oled_write_string_inverted+0x6a>
    1130:	31 97       	sbiw	r30, 0x01	; 1
    1132:	e0 1b       	sub	r30, r16
    1134:	f1 0b       	sbc	r31, r17
    1136:	ce 17       	cp	r28, r30
    1138:	df 07       	cpc	r29, r31
    113a:	e8 f2       	brcs	.-70     	; 0x10f6 <oled_write_string_inverted+0x36>
		}
		oled_write_inverted_char_using_font(c[i],n);
		
	}
	
}
    113c:	df 91       	pop	r29
    113e:	cf 91       	pop	r28
    1140:	1f 91       	pop	r17
    1142:	0f 91       	pop	r16
    1144:	ff 90       	pop	r15
    1146:	ef 90       	pop	r14
    1148:	df 90       	pop	r13
    114a:	cf 90       	pop	r12
    114c:	bf 90       	pop	r11
    114e:	af 90       	pop	r10
    1150:	9f 90       	pop	r9
    1152:	8f 90       	pop	r8
    1154:	08 95       	ret

00001156 <SRAM_test>:
#include "sram_test.h"
    void SRAM_test(void)
    {
    1156:	ef 92       	push	r14
    1158:	ff 92       	push	r15
    115a:	0f 93       	push	r16
    115c:	1f 93       	push	r17
    115e:	cf 93       	push	r28
    1160:	df 93       	push	r29
		volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
        uint16_t ext_ram_size = 0x800;
        uint16_t write_errors = 0;
        uint16_t retrieval_errors = 0;
        printf("Starting SRAM test...\n");
    1162:	87 ec       	ldi	r24, 0xC7	; 199
    1164:	91 e0       	ldi	r25, 0x01	; 1
    1166:	0e 94 1c 0b 	call	0x1638	; 0x1638 <puts>
        // rand() stores some internal state, so calling this function in a loop will
        // yield different seeds each time (unless srand() is called before this function)
        uint16_t seed = rand();
    116a:	0e 94 a4 0a 	call	0x1548	; 0x1548 <rand>
    116e:	7c 01       	movw	r14, r24
        // Write phase: Immediately check that the correct value was stored
        srand(seed);
    1170:	0e 94 a9 0a 	call	0x1552	; 0x1552 <srand>
    1174:	c0 e0       	ldi	r28, 0x00	; 0
    1176:	d8 e1       	ldi	r29, 0x18	; 24
#include "sram_test.h"
    void SRAM_test(void)
    {
		volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
        uint16_t ext_ram_size = 0x800;
        uint16_t write_errors = 0;
    1178:	00 e0       	ldi	r16, 0x00	; 0
    117a:	10 e0       	ldi	r17, 0x00	; 0
        // yield different seeds each time (unless srand() is called before this function)
        uint16_t seed = rand();
        // Write phase: Immediately check that the correct value was stored
        srand(seed);
        for (uint16_t i = 0; i < ext_ram_size; i++) {
            uint8_t some_value = rand();
    117c:	0e 94 a4 0a 	call	0x1548	; 0x1548 <rand>
            ext_ram[i] = some_value;
    1180:	88 83       	st	Y, r24
            uint8_t retreived_value = ext_ram[i];
    1182:	98 81       	ld	r25, Y
            if (retreived_value != some_value) {
    1184:	89 17       	cp	r24, r25
    1186:	11 f0       	breq	.+4      	; 0x118c <SRAM_test+0x36>
                //printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
                write_errors++;
    1188:	0f 5f       	subi	r16, 0xFF	; 255
    118a:	1f 4f       	sbci	r17, 0xFF	; 255
    118c:	21 96       	adiw	r28, 0x01	; 1
        // rand() stores some internal state, so calling this function in a loop will
        // yield different seeds each time (unless srand() is called before this function)
        uint16_t seed = rand();
        // Write phase: Immediately check that the correct value was stored
        srand(seed);
        for (uint16_t i = 0; i < ext_ram_size; i++) {
    118e:	c1 15       	cp	r28, r1
    1190:	80 e2       	ldi	r24, 0x20	; 32
    1192:	d8 07       	cpc	r29, r24
    1194:	99 f7       	brne	.-26     	; 0x117c <SRAM_test+0x26>
                //printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
                write_errors++;
            }
        }
        // Retrieval phase: Check that no values were changed during or after the write phase
        srand(seed);
    1196:	c7 01       	movw	r24, r14
    1198:	0e 94 a9 0a 	call	0x1552	; 0x1552 <srand>
    119c:	c0 e0       	ldi	r28, 0x00	; 0
    119e:	d8 e1       	ldi	r29, 0x18	; 24
    void SRAM_test(void)
    {
		volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
        uint16_t ext_ram_size = 0x800;
        uint16_t write_errors = 0;
        uint16_t retrieval_errors = 0;
    11a0:	e1 2c       	mov	r14, r1
    11a2:	f1 2c       	mov	r15, r1
        }
        // Retrieval phase: Check that no values were changed during or after the write phase
        srand(seed);
        // reset the PRNG to the state it had before the write phase
        for (uint16_t i = 0; i < ext_ram_size; i++) {
            uint8_t some_value = rand();
    11a4:	0e 94 a4 0a 	call	0x1548	; 0x1548 <rand>
            uint8_t retreived_value = ext_ram[i];
    11a8:	98 81       	ld	r25, Y
            if (retreived_value != some_value) {
    11aa:	98 17       	cp	r25, r24
    11ac:	19 f0       	breq	.+6      	; 0x11b4 <SRAM_test+0x5e>
               // printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
                retrieval_errors++;
    11ae:	8f ef       	ldi	r24, 0xFF	; 255
    11b0:	e8 1a       	sub	r14, r24
    11b2:	f8 0a       	sbc	r15, r24
    11b4:	21 96       	adiw	r28, 0x01	; 1
            }
        }
        // Retrieval phase: Check that no values were changed during or after the write phase
        srand(seed);
        // reset the PRNG to the state it had before the write phase
        for (uint16_t i = 0; i < ext_ram_size; i++) {
    11b6:	c1 15       	cp	r28, r1
    11b8:	80 e2       	ldi	r24, 0x20	; 32
    11ba:	d8 07       	cpc	r29, r24
    11bc:	99 f7       	brne	.-26     	; 0x11a4 <SRAM_test+0x4e>
            if (retreived_value != some_value) {
               // printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
                retrieval_errors++;
            }
        }
        printf("SRAM test completed with \n%4d errors in write phase and \n%4d errors in retrieval phase\n\n", write_errors, retrieval_errors);
    11be:	ff 92       	push	r15
    11c0:	ef 92       	push	r14
    11c2:	1f 93       	push	r17
    11c4:	0f 93       	push	r16
    11c6:	8d ed       	ldi	r24, 0xDD	; 221
    11c8:	91 e0       	ldi	r25, 0x01	; 1
    11ca:	9f 93       	push	r25
    11cc:	8f 93       	push	r24
    11ce:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <printf>
    11d2:	0f 90       	pop	r0
    11d4:	0f 90       	pop	r0
    11d6:	0f 90       	pop	r0
    11d8:	0f 90       	pop	r0
    11da:	0f 90       	pop	r0
    11dc:	0f 90       	pop	r0
    11de:	df 91       	pop	r29
    11e0:	cf 91       	pop	r28
    11e2:	1f 91       	pop	r17
    11e4:	0f 91       	pop	r16
    11e6:	ff 90       	pop	r15
    11e8:	ef 90       	pop	r14
    11ea:	08 95       	ret

000011ec <USART_Transmit>:
	UCSR1C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
	clear_bit(UCSR0C, 0); // Clock polarity
	fdevopen(USART_Transmit, USART_Receive);
}
void USART_Transmit(unsigned char data){
	while (!(UCSR0A & (1<<UDRE0)));
    11ec:	5d 9b       	sbis	0x0b, 5	; 11
    11ee:	fe cf       	rjmp	.-4      	; 0x11ec <USART_Transmit>
	
	UDR0 = data;
    11f0:	8c b9       	out	0x0c, r24	; 12
    11f2:	08 95       	ret

000011f4 <USART_Receive>:
}

unsigned int USART_Receive(void)
{
	
	while (!(UCSR0A & (1<<RXC0)));
    11f4:	5f 9b       	sbis	0x0b, 7	; 11
    11f6:	fe cf       	rjmp	.-4      	; 0x11f4 <USART_Receive>
	

	return UDR0;
    11f8:	8c b1       	in	r24, 0x0c	; 12
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	08 95       	ret

000011fe <USART_Init>:
#include <stdio.h>
#define clear_bit( reg, bit ) (reg &= ~(1 << bit))

void USART_Init (unsigned int ubrr ){
	
	UBRR0H = (unsigned char)(ubrr>>8);
    11fe:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)ubrr;
    1200:	89 b9       	out	0x09, r24	; 9
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    1202:	88 e1       	ldi	r24, 0x18	; 24
    1204:	8a b9       	out	0x0a, r24	; 10
	
	UCSR1C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
    1206:	8e e8       	ldi	r24, 0x8E	; 142
    1208:	8c bf       	out	0x3c, r24	; 60
	clear_bit(UCSR0C, 0); // Clock polarity
    120a:	80 b5       	in	r24, 0x20	; 32
    120c:	8e 7f       	andi	r24, 0xFE	; 254
    120e:	80 bd       	out	0x20, r24	; 32
	fdevopen(USART_Transmit, USART_Receive);
    1210:	6a ef       	ldi	r22, 0xFA	; 250
    1212:	78 e0       	ldi	r23, 0x08	; 8
    1214:	86 ef       	ldi	r24, 0xF6	; 246
    1216:	98 e0       	ldi	r25, 0x08	; 8
    1218:	0e 94 b4 0a 	call	0x1568	; 0x1568 <fdevopen>
    121c:	08 95       	ret

0000121e <__divmodhi4>:
    121e:	97 fb       	bst	r25, 7
    1220:	07 2e       	mov	r0, r23
    1222:	16 f4       	brtc	.+4      	; 0x1228 <__divmodhi4+0xa>
    1224:	00 94       	com	r0
    1226:	07 d0       	rcall	.+14     	; 0x1236 <__divmodhi4_neg1>
    1228:	77 fd       	sbrc	r23, 7
    122a:	09 d0       	rcall	.+18     	; 0x123e <__divmodhi4_neg2>
    122c:	0e 94 23 09 	call	0x1246	; 0x1246 <__udivmodhi4>
    1230:	07 fc       	sbrc	r0, 7
    1232:	05 d0       	rcall	.+10     	; 0x123e <__divmodhi4_neg2>
    1234:	3e f4       	brtc	.+14     	; 0x1244 <__divmodhi4_exit>

00001236 <__divmodhi4_neg1>:
    1236:	90 95       	com	r25
    1238:	81 95       	neg	r24
    123a:	9f 4f       	sbci	r25, 0xFF	; 255
    123c:	08 95       	ret

0000123e <__divmodhi4_neg2>:
    123e:	70 95       	com	r23
    1240:	61 95       	neg	r22
    1242:	7f 4f       	sbci	r23, 0xFF	; 255

00001244 <__divmodhi4_exit>:
    1244:	08 95       	ret

00001246 <__udivmodhi4>:
    1246:	aa 1b       	sub	r26, r26
    1248:	bb 1b       	sub	r27, r27
    124a:	51 e1       	ldi	r21, 0x11	; 17
    124c:	07 c0       	rjmp	.+14     	; 0x125c <__udivmodhi4_ep>

0000124e <__udivmodhi4_loop>:
    124e:	aa 1f       	adc	r26, r26
    1250:	bb 1f       	adc	r27, r27
    1252:	a6 17       	cp	r26, r22
    1254:	b7 07       	cpc	r27, r23
    1256:	10 f0       	brcs	.+4      	; 0x125c <__udivmodhi4_ep>
    1258:	a6 1b       	sub	r26, r22
    125a:	b7 0b       	sbc	r27, r23

0000125c <__udivmodhi4_ep>:
    125c:	88 1f       	adc	r24, r24
    125e:	99 1f       	adc	r25, r25
    1260:	5a 95       	dec	r21
    1262:	a9 f7       	brne	.-22     	; 0x124e <__udivmodhi4_loop>
    1264:	80 95       	com	r24
    1266:	90 95       	com	r25
    1268:	bc 01       	movw	r22, r24
    126a:	cd 01       	movw	r24, r26
    126c:	08 95       	ret

0000126e <malloc>:
    126e:	0f 93       	push	r16
    1270:	1f 93       	push	r17
    1272:	cf 93       	push	r28
    1274:	df 93       	push	r29
    1276:	82 30       	cpi	r24, 0x02	; 2
    1278:	91 05       	cpc	r25, r1
    127a:	10 f4       	brcc	.+4      	; 0x1280 <malloc+0x12>
    127c:	82 e0       	ldi	r24, 0x02	; 2
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	e0 91 3d 02 	lds	r30, 0x023D	; 0x80023d <__flp>
    1284:	f0 91 3e 02 	lds	r31, 0x023E	; 0x80023e <__flp+0x1>
    1288:	20 e0       	ldi	r18, 0x00	; 0
    128a:	30 e0       	ldi	r19, 0x00	; 0
    128c:	a0 e0       	ldi	r26, 0x00	; 0
    128e:	b0 e0       	ldi	r27, 0x00	; 0
    1290:	30 97       	sbiw	r30, 0x00	; 0
    1292:	19 f1       	breq	.+70     	; 0x12da <malloc+0x6c>
    1294:	40 81       	ld	r20, Z
    1296:	51 81       	ldd	r21, Z+1	; 0x01
    1298:	02 81       	ldd	r16, Z+2	; 0x02
    129a:	13 81       	ldd	r17, Z+3	; 0x03
    129c:	48 17       	cp	r20, r24
    129e:	59 07       	cpc	r21, r25
    12a0:	c8 f0       	brcs	.+50     	; 0x12d4 <malloc+0x66>
    12a2:	84 17       	cp	r24, r20
    12a4:	95 07       	cpc	r25, r21
    12a6:	69 f4       	brne	.+26     	; 0x12c2 <malloc+0x54>
    12a8:	10 97       	sbiw	r26, 0x00	; 0
    12aa:	31 f0       	breq	.+12     	; 0x12b8 <malloc+0x4a>
    12ac:	12 96       	adiw	r26, 0x02	; 2
    12ae:	0c 93       	st	X, r16
    12b0:	12 97       	sbiw	r26, 0x02	; 2
    12b2:	13 96       	adiw	r26, 0x03	; 3
    12b4:	1c 93       	st	X, r17
    12b6:	27 c0       	rjmp	.+78     	; 0x1306 <malloc+0x98>
    12b8:	00 93 3d 02 	sts	0x023D, r16	; 0x80023d <__flp>
    12bc:	10 93 3e 02 	sts	0x023E, r17	; 0x80023e <__flp+0x1>
    12c0:	22 c0       	rjmp	.+68     	; 0x1306 <malloc+0x98>
    12c2:	21 15       	cp	r18, r1
    12c4:	31 05       	cpc	r19, r1
    12c6:	19 f0       	breq	.+6      	; 0x12ce <malloc+0x60>
    12c8:	42 17       	cp	r20, r18
    12ca:	53 07       	cpc	r21, r19
    12cc:	18 f4       	brcc	.+6      	; 0x12d4 <malloc+0x66>
    12ce:	9a 01       	movw	r18, r20
    12d0:	bd 01       	movw	r22, r26
    12d2:	ef 01       	movw	r28, r30
    12d4:	df 01       	movw	r26, r30
    12d6:	f8 01       	movw	r30, r16
    12d8:	db cf       	rjmp	.-74     	; 0x1290 <malloc+0x22>
    12da:	21 15       	cp	r18, r1
    12dc:	31 05       	cpc	r19, r1
    12de:	f9 f0       	breq	.+62     	; 0x131e <malloc+0xb0>
    12e0:	28 1b       	sub	r18, r24
    12e2:	39 0b       	sbc	r19, r25
    12e4:	24 30       	cpi	r18, 0x04	; 4
    12e6:	31 05       	cpc	r19, r1
    12e8:	80 f4       	brcc	.+32     	; 0x130a <malloc+0x9c>
    12ea:	8a 81       	ldd	r24, Y+2	; 0x02
    12ec:	9b 81       	ldd	r25, Y+3	; 0x03
    12ee:	61 15       	cp	r22, r1
    12f0:	71 05       	cpc	r23, r1
    12f2:	21 f0       	breq	.+8      	; 0x12fc <malloc+0x8e>
    12f4:	fb 01       	movw	r30, r22
    12f6:	93 83       	std	Z+3, r25	; 0x03
    12f8:	82 83       	std	Z+2, r24	; 0x02
    12fa:	04 c0       	rjmp	.+8      	; 0x1304 <malloc+0x96>
    12fc:	90 93 3e 02 	sts	0x023E, r25	; 0x80023e <__flp+0x1>
    1300:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <__flp>
    1304:	fe 01       	movw	r30, r28
    1306:	32 96       	adiw	r30, 0x02	; 2
    1308:	44 c0       	rjmp	.+136    	; 0x1392 <malloc+0x124>
    130a:	fe 01       	movw	r30, r28
    130c:	e2 0f       	add	r30, r18
    130e:	f3 1f       	adc	r31, r19
    1310:	81 93       	st	Z+, r24
    1312:	91 93       	st	Z+, r25
    1314:	22 50       	subi	r18, 0x02	; 2
    1316:	31 09       	sbc	r19, r1
    1318:	39 83       	std	Y+1, r19	; 0x01
    131a:	28 83       	st	Y, r18
    131c:	3a c0       	rjmp	.+116    	; 0x1392 <malloc+0x124>
    131e:	20 91 3b 02 	lds	r18, 0x023B	; 0x80023b <__brkval>
    1322:	30 91 3c 02 	lds	r19, 0x023C	; 0x80023c <__brkval+0x1>
    1326:	23 2b       	or	r18, r19
    1328:	41 f4       	brne	.+16     	; 0x133a <malloc+0xcc>
    132a:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    132e:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    1332:	30 93 3c 02 	sts	0x023C, r19	; 0x80023c <__brkval+0x1>
    1336:	20 93 3b 02 	sts	0x023B, r18	; 0x80023b <__brkval>
    133a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    133e:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    1342:	21 15       	cp	r18, r1
    1344:	31 05       	cpc	r19, r1
    1346:	41 f4       	brne	.+16     	; 0x1358 <malloc+0xea>
    1348:	2d b7       	in	r18, 0x3d	; 61
    134a:	3e b7       	in	r19, 0x3e	; 62
    134c:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1350:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1354:	24 1b       	sub	r18, r20
    1356:	35 0b       	sbc	r19, r21
    1358:	e0 91 3b 02 	lds	r30, 0x023B	; 0x80023b <__brkval>
    135c:	f0 91 3c 02 	lds	r31, 0x023C	; 0x80023c <__brkval+0x1>
    1360:	e2 17       	cp	r30, r18
    1362:	f3 07       	cpc	r31, r19
    1364:	a0 f4       	brcc	.+40     	; 0x138e <malloc+0x120>
    1366:	2e 1b       	sub	r18, r30
    1368:	3f 0b       	sbc	r19, r31
    136a:	28 17       	cp	r18, r24
    136c:	39 07       	cpc	r19, r25
    136e:	78 f0       	brcs	.+30     	; 0x138e <malloc+0x120>
    1370:	ac 01       	movw	r20, r24
    1372:	4e 5f       	subi	r20, 0xFE	; 254
    1374:	5f 4f       	sbci	r21, 0xFF	; 255
    1376:	24 17       	cp	r18, r20
    1378:	35 07       	cpc	r19, r21
    137a:	48 f0       	brcs	.+18     	; 0x138e <malloc+0x120>
    137c:	4e 0f       	add	r20, r30
    137e:	5f 1f       	adc	r21, r31
    1380:	50 93 3c 02 	sts	0x023C, r21	; 0x80023c <__brkval+0x1>
    1384:	40 93 3b 02 	sts	0x023B, r20	; 0x80023b <__brkval>
    1388:	81 93       	st	Z+, r24
    138a:	91 93       	st	Z+, r25
    138c:	02 c0       	rjmp	.+4      	; 0x1392 <malloc+0x124>
    138e:	e0 e0       	ldi	r30, 0x00	; 0
    1390:	f0 e0       	ldi	r31, 0x00	; 0
    1392:	cf 01       	movw	r24, r30
    1394:	df 91       	pop	r29
    1396:	cf 91       	pop	r28
    1398:	1f 91       	pop	r17
    139a:	0f 91       	pop	r16
    139c:	08 95       	ret

0000139e <free>:
    139e:	cf 93       	push	r28
    13a0:	df 93       	push	r29
    13a2:	00 97       	sbiw	r24, 0x00	; 0
    13a4:	09 f4       	brne	.+2      	; 0x13a8 <free+0xa>
    13a6:	81 c0       	rjmp	.+258    	; 0x14aa <free+0x10c>
    13a8:	fc 01       	movw	r30, r24
    13aa:	32 97       	sbiw	r30, 0x02	; 2
    13ac:	13 82       	std	Z+3, r1	; 0x03
    13ae:	12 82       	std	Z+2, r1	; 0x02
    13b0:	a0 91 3d 02 	lds	r26, 0x023D	; 0x80023d <__flp>
    13b4:	b0 91 3e 02 	lds	r27, 0x023E	; 0x80023e <__flp+0x1>
    13b8:	10 97       	sbiw	r26, 0x00	; 0
    13ba:	81 f4       	brne	.+32     	; 0x13dc <free+0x3e>
    13bc:	20 81       	ld	r18, Z
    13be:	31 81       	ldd	r19, Z+1	; 0x01
    13c0:	82 0f       	add	r24, r18
    13c2:	93 1f       	adc	r25, r19
    13c4:	20 91 3b 02 	lds	r18, 0x023B	; 0x80023b <__brkval>
    13c8:	30 91 3c 02 	lds	r19, 0x023C	; 0x80023c <__brkval+0x1>
    13cc:	28 17       	cp	r18, r24
    13ce:	39 07       	cpc	r19, r25
    13d0:	51 f5       	brne	.+84     	; 0x1426 <free+0x88>
    13d2:	f0 93 3c 02 	sts	0x023C, r31	; 0x80023c <__brkval+0x1>
    13d6:	e0 93 3b 02 	sts	0x023B, r30	; 0x80023b <__brkval>
    13da:	67 c0       	rjmp	.+206    	; 0x14aa <free+0x10c>
    13dc:	ed 01       	movw	r28, r26
    13de:	20 e0       	ldi	r18, 0x00	; 0
    13e0:	30 e0       	ldi	r19, 0x00	; 0
    13e2:	ce 17       	cp	r28, r30
    13e4:	df 07       	cpc	r29, r31
    13e6:	40 f4       	brcc	.+16     	; 0x13f8 <free+0x5a>
    13e8:	4a 81       	ldd	r20, Y+2	; 0x02
    13ea:	5b 81       	ldd	r21, Y+3	; 0x03
    13ec:	9e 01       	movw	r18, r28
    13ee:	41 15       	cp	r20, r1
    13f0:	51 05       	cpc	r21, r1
    13f2:	f1 f0       	breq	.+60     	; 0x1430 <free+0x92>
    13f4:	ea 01       	movw	r28, r20
    13f6:	f5 cf       	rjmp	.-22     	; 0x13e2 <free+0x44>
    13f8:	d3 83       	std	Z+3, r29	; 0x03
    13fa:	c2 83       	std	Z+2, r28	; 0x02
    13fc:	40 81       	ld	r20, Z
    13fe:	51 81       	ldd	r21, Z+1	; 0x01
    1400:	84 0f       	add	r24, r20
    1402:	95 1f       	adc	r25, r21
    1404:	c8 17       	cp	r28, r24
    1406:	d9 07       	cpc	r29, r25
    1408:	59 f4       	brne	.+22     	; 0x1420 <free+0x82>
    140a:	88 81       	ld	r24, Y
    140c:	99 81       	ldd	r25, Y+1	; 0x01
    140e:	84 0f       	add	r24, r20
    1410:	95 1f       	adc	r25, r21
    1412:	02 96       	adiw	r24, 0x02	; 2
    1414:	91 83       	std	Z+1, r25	; 0x01
    1416:	80 83       	st	Z, r24
    1418:	8a 81       	ldd	r24, Y+2	; 0x02
    141a:	9b 81       	ldd	r25, Y+3	; 0x03
    141c:	93 83       	std	Z+3, r25	; 0x03
    141e:	82 83       	std	Z+2, r24	; 0x02
    1420:	21 15       	cp	r18, r1
    1422:	31 05       	cpc	r19, r1
    1424:	29 f4       	brne	.+10     	; 0x1430 <free+0x92>
    1426:	f0 93 3e 02 	sts	0x023E, r31	; 0x80023e <__flp+0x1>
    142a:	e0 93 3d 02 	sts	0x023D, r30	; 0x80023d <__flp>
    142e:	3d c0       	rjmp	.+122    	; 0x14aa <free+0x10c>
    1430:	e9 01       	movw	r28, r18
    1432:	fb 83       	std	Y+3, r31	; 0x03
    1434:	ea 83       	std	Y+2, r30	; 0x02
    1436:	49 91       	ld	r20, Y+
    1438:	59 91       	ld	r21, Y+
    143a:	c4 0f       	add	r28, r20
    143c:	d5 1f       	adc	r29, r21
    143e:	ec 17       	cp	r30, r28
    1440:	fd 07       	cpc	r31, r29
    1442:	61 f4       	brne	.+24     	; 0x145c <free+0xbe>
    1444:	80 81       	ld	r24, Z
    1446:	91 81       	ldd	r25, Z+1	; 0x01
    1448:	84 0f       	add	r24, r20
    144a:	95 1f       	adc	r25, r21
    144c:	02 96       	adiw	r24, 0x02	; 2
    144e:	e9 01       	movw	r28, r18
    1450:	99 83       	std	Y+1, r25	; 0x01
    1452:	88 83       	st	Y, r24
    1454:	82 81       	ldd	r24, Z+2	; 0x02
    1456:	93 81       	ldd	r25, Z+3	; 0x03
    1458:	9b 83       	std	Y+3, r25	; 0x03
    145a:	8a 83       	std	Y+2, r24	; 0x02
    145c:	e0 e0       	ldi	r30, 0x00	; 0
    145e:	f0 e0       	ldi	r31, 0x00	; 0
    1460:	12 96       	adiw	r26, 0x02	; 2
    1462:	8d 91       	ld	r24, X+
    1464:	9c 91       	ld	r25, X
    1466:	13 97       	sbiw	r26, 0x03	; 3
    1468:	00 97       	sbiw	r24, 0x00	; 0
    146a:	19 f0       	breq	.+6      	; 0x1472 <free+0xd4>
    146c:	fd 01       	movw	r30, r26
    146e:	dc 01       	movw	r26, r24
    1470:	f7 cf       	rjmp	.-18     	; 0x1460 <free+0xc2>
    1472:	8d 91       	ld	r24, X+
    1474:	9c 91       	ld	r25, X
    1476:	11 97       	sbiw	r26, 0x01	; 1
    1478:	9d 01       	movw	r18, r26
    147a:	2e 5f       	subi	r18, 0xFE	; 254
    147c:	3f 4f       	sbci	r19, 0xFF	; 255
    147e:	82 0f       	add	r24, r18
    1480:	93 1f       	adc	r25, r19
    1482:	20 91 3b 02 	lds	r18, 0x023B	; 0x80023b <__brkval>
    1486:	30 91 3c 02 	lds	r19, 0x023C	; 0x80023c <__brkval+0x1>
    148a:	28 17       	cp	r18, r24
    148c:	39 07       	cpc	r19, r25
    148e:	69 f4       	brne	.+26     	; 0x14aa <free+0x10c>
    1490:	30 97       	sbiw	r30, 0x00	; 0
    1492:	29 f4       	brne	.+10     	; 0x149e <free+0x100>
    1494:	10 92 3e 02 	sts	0x023E, r1	; 0x80023e <__flp+0x1>
    1498:	10 92 3d 02 	sts	0x023D, r1	; 0x80023d <__flp>
    149c:	02 c0       	rjmp	.+4      	; 0x14a2 <free+0x104>
    149e:	13 82       	std	Z+3, r1	; 0x03
    14a0:	12 82       	std	Z+2, r1	; 0x02
    14a2:	b0 93 3c 02 	sts	0x023C, r27	; 0x80023c <__brkval+0x1>
    14a6:	a0 93 3b 02 	sts	0x023B, r26	; 0x80023b <__brkval>
    14aa:	df 91       	pop	r29
    14ac:	cf 91       	pop	r28
    14ae:	08 95       	ret

000014b0 <do_rand>:
    14b0:	8f 92       	push	r8
    14b2:	9f 92       	push	r9
    14b4:	af 92       	push	r10
    14b6:	bf 92       	push	r11
    14b8:	cf 92       	push	r12
    14ba:	df 92       	push	r13
    14bc:	ef 92       	push	r14
    14be:	ff 92       	push	r15
    14c0:	cf 93       	push	r28
    14c2:	df 93       	push	r29
    14c4:	ec 01       	movw	r28, r24
    14c6:	68 81       	ld	r22, Y
    14c8:	79 81       	ldd	r23, Y+1	; 0x01
    14ca:	8a 81       	ldd	r24, Y+2	; 0x02
    14cc:	9b 81       	ldd	r25, Y+3	; 0x03
    14ce:	61 15       	cp	r22, r1
    14d0:	71 05       	cpc	r23, r1
    14d2:	81 05       	cpc	r24, r1
    14d4:	91 05       	cpc	r25, r1
    14d6:	21 f4       	brne	.+8      	; 0x14e0 <do_rand+0x30>
    14d8:	64 e2       	ldi	r22, 0x24	; 36
    14da:	79 ed       	ldi	r23, 0xD9	; 217
    14dc:	8b e5       	ldi	r24, 0x5B	; 91
    14de:	97 e0       	ldi	r25, 0x07	; 7
    14e0:	2d e1       	ldi	r18, 0x1D	; 29
    14e2:	33 ef       	ldi	r19, 0xF3	; 243
    14e4:	41 e0       	ldi	r20, 0x01	; 1
    14e6:	50 e0       	ldi	r21, 0x00	; 0
    14e8:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <__divmodsi4>
    14ec:	49 01       	movw	r8, r18
    14ee:	5a 01       	movw	r10, r20
    14f0:	9b 01       	movw	r18, r22
    14f2:	ac 01       	movw	r20, r24
    14f4:	a7 ea       	ldi	r26, 0xA7	; 167
    14f6:	b1 e4       	ldi	r27, 0x41	; 65
    14f8:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <__muluhisi3>
    14fc:	6b 01       	movw	r12, r22
    14fe:	7c 01       	movw	r14, r24
    1500:	ac ee       	ldi	r26, 0xEC	; 236
    1502:	b4 ef       	ldi	r27, 0xF4	; 244
    1504:	a5 01       	movw	r20, r10
    1506:	94 01       	movw	r18, r8
    1508:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <__mulohisi3>
    150c:	dc 01       	movw	r26, r24
    150e:	cb 01       	movw	r24, r22
    1510:	8c 0d       	add	r24, r12
    1512:	9d 1d       	adc	r25, r13
    1514:	ae 1d       	adc	r26, r14
    1516:	bf 1d       	adc	r27, r15
    1518:	b7 ff       	sbrs	r27, 7
    151a:	03 c0       	rjmp	.+6      	; 0x1522 <do_rand+0x72>
    151c:	01 97       	sbiw	r24, 0x01	; 1
    151e:	a1 09       	sbc	r26, r1
    1520:	b0 48       	sbci	r27, 0x80	; 128
    1522:	88 83       	st	Y, r24
    1524:	99 83       	std	Y+1, r25	; 0x01
    1526:	aa 83       	std	Y+2, r26	; 0x02
    1528:	bb 83       	std	Y+3, r27	; 0x03
    152a:	9f 77       	andi	r25, 0x7F	; 127
    152c:	df 91       	pop	r29
    152e:	cf 91       	pop	r28
    1530:	ff 90       	pop	r15
    1532:	ef 90       	pop	r14
    1534:	df 90       	pop	r13
    1536:	cf 90       	pop	r12
    1538:	bf 90       	pop	r11
    153a:	af 90       	pop	r10
    153c:	9f 90       	pop	r9
    153e:	8f 90       	pop	r8
    1540:	08 95       	ret

00001542 <rand_r>:
    1542:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <do_rand>
    1546:	08 95       	ret

00001548 <rand>:
    1548:	86 e0       	ldi	r24, 0x06	; 6
    154a:	91 e0       	ldi	r25, 0x01	; 1
    154c:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <do_rand>
    1550:	08 95       	ret

00001552 <srand>:
    1552:	a0 e0       	ldi	r26, 0x00	; 0
    1554:	b0 e0       	ldi	r27, 0x00	; 0
    1556:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <next>
    155a:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <next+0x1>
    155e:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <next+0x2>
    1562:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <next+0x3>
    1566:	08 95       	ret

00001568 <fdevopen>:
    1568:	0f 93       	push	r16
    156a:	1f 93       	push	r17
    156c:	cf 93       	push	r28
    156e:	df 93       	push	r29
    1570:	00 97       	sbiw	r24, 0x00	; 0
    1572:	31 f4       	brne	.+12     	; 0x1580 <fdevopen+0x18>
    1574:	61 15       	cp	r22, r1
    1576:	71 05       	cpc	r23, r1
    1578:	19 f4       	brne	.+6      	; 0x1580 <fdevopen+0x18>
    157a:	80 e0       	ldi	r24, 0x00	; 0
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	3a c0       	rjmp	.+116    	; 0x15f4 <fdevopen+0x8c>
    1580:	8b 01       	movw	r16, r22
    1582:	ec 01       	movw	r28, r24
    1584:	6e e0       	ldi	r22, 0x0E	; 14
    1586:	70 e0       	ldi	r23, 0x00	; 0
    1588:	81 e0       	ldi	r24, 0x01	; 1
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <calloc>
    1590:	fc 01       	movw	r30, r24
    1592:	89 2b       	or	r24, r25
    1594:	91 f3       	breq	.-28     	; 0x157a <fdevopen+0x12>
    1596:	80 e8       	ldi	r24, 0x80	; 128
    1598:	83 83       	std	Z+3, r24	; 0x03
    159a:	01 15       	cp	r16, r1
    159c:	11 05       	cpc	r17, r1
    159e:	71 f0       	breq	.+28     	; 0x15bc <fdevopen+0x54>
    15a0:	13 87       	std	Z+11, r17	; 0x0b
    15a2:	02 87       	std	Z+10, r16	; 0x0a
    15a4:	81 e8       	ldi	r24, 0x81	; 129
    15a6:	83 83       	std	Z+3, r24	; 0x03
    15a8:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <__iob>
    15ac:	90 91 40 02 	lds	r25, 0x0240	; 0x800240 <__iob+0x1>
    15b0:	89 2b       	or	r24, r25
    15b2:	21 f4       	brne	.+8      	; 0x15bc <fdevopen+0x54>
    15b4:	f0 93 40 02 	sts	0x0240, r31	; 0x800240 <__iob+0x1>
    15b8:	e0 93 3f 02 	sts	0x023F, r30	; 0x80023f <__iob>
    15bc:	20 97       	sbiw	r28, 0x00	; 0
    15be:	c9 f0       	breq	.+50     	; 0x15f2 <fdevopen+0x8a>
    15c0:	d1 87       	std	Z+9, r29	; 0x09
    15c2:	c0 87       	std	Z+8, r28	; 0x08
    15c4:	83 81       	ldd	r24, Z+3	; 0x03
    15c6:	82 60       	ori	r24, 0x02	; 2
    15c8:	83 83       	std	Z+3, r24	; 0x03
    15ca:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <__iob+0x2>
    15ce:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <__iob+0x3>
    15d2:	89 2b       	or	r24, r25
    15d4:	71 f4       	brne	.+28     	; 0x15f2 <fdevopen+0x8a>
    15d6:	f0 93 42 02 	sts	0x0242, r31	; 0x800242 <__iob+0x3>
    15da:	e0 93 41 02 	sts	0x0241, r30	; 0x800241 <__iob+0x2>
    15de:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <__iob+0x4>
    15e2:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <__iob+0x5>
    15e6:	89 2b       	or	r24, r25
    15e8:	21 f4       	brne	.+8      	; 0x15f2 <fdevopen+0x8a>
    15ea:	f0 93 44 02 	sts	0x0244, r31	; 0x800244 <__iob+0x5>
    15ee:	e0 93 43 02 	sts	0x0243, r30	; 0x800243 <__iob+0x4>
    15f2:	cf 01       	movw	r24, r30
    15f4:	df 91       	pop	r29
    15f6:	cf 91       	pop	r28
    15f8:	1f 91       	pop	r17
    15fa:	0f 91       	pop	r16
    15fc:	08 95       	ret

000015fe <printf>:
    15fe:	a0 e0       	ldi	r26, 0x00	; 0
    1600:	b0 e0       	ldi	r27, 0x00	; 0
    1602:	e5 e0       	ldi	r30, 0x05	; 5
    1604:	fb e0       	ldi	r31, 0x0B	; 11
    1606:	0c 94 42 0e 	jmp	0x1c84	; 0x1c84 <__prologue_saves__+0x20>
    160a:	ae 01       	movw	r20, r28
    160c:	4b 5f       	subi	r20, 0xFB	; 251
    160e:	5f 4f       	sbci	r21, 0xFF	; 255
    1610:	fa 01       	movw	r30, r20
    1612:	61 91       	ld	r22, Z+
    1614:	71 91       	ld	r23, Z+
    1616:	af 01       	movw	r20, r30
    1618:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <__iob+0x2>
    161c:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <__iob+0x3>
    1620:	0e 94 4c 0b 	call	0x1698	; 0x1698 <vfprintf>
    1624:	e2 e0       	ldi	r30, 0x02	; 2
    1626:	0c 94 5e 0e 	jmp	0x1cbc	; 0x1cbc <__epilogue_restores__+0x20>

0000162a <putchar>:
    162a:	60 91 41 02 	lds	r22, 0x0241	; 0x800241 <__iob+0x2>
    162e:	70 91 42 02 	lds	r23, 0x0242	; 0x800242 <__iob+0x3>
    1632:	0e 94 66 0d 	call	0x1acc	; 0x1acc <fputc>
    1636:	08 95       	ret

00001638 <puts>:
    1638:	0f 93       	push	r16
    163a:	1f 93       	push	r17
    163c:	cf 93       	push	r28
    163e:	df 93       	push	r29
    1640:	e0 91 41 02 	lds	r30, 0x0241	; 0x800241 <__iob+0x2>
    1644:	f0 91 42 02 	lds	r31, 0x0242	; 0x800242 <__iob+0x3>
    1648:	23 81       	ldd	r18, Z+3	; 0x03
    164a:	21 ff       	sbrs	r18, 1
    164c:	1b c0       	rjmp	.+54     	; 0x1684 <puts+0x4c>
    164e:	8c 01       	movw	r16, r24
    1650:	d0 e0       	ldi	r29, 0x00	; 0
    1652:	c0 e0       	ldi	r28, 0x00	; 0
    1654:	f8 01       	movw	r30, r16
    1656:	81 91       	ld	r24, Z+
    1658:	8f 01       	movw	r16, r30
    165a:	60 91 41 02 	lds	r22, 0x0241	; 0x800241 <__iob+0x2>
    165e:	70 91 42 02 	lds	r23, 0x0242	; 0x800242 <__iob+0x3>
    1662:	db 01       	movw	r26, r22
    1664:	18 96       	adiw	r26, 0x08	; 8
    1666:	ed 91       	ld	r30, X+
    1668:	fc 91       	ld	r31, X
    166a:	19 97       	sbiw	r26, 0x09	; 9
    166c:	88 23       	and	r24, r24
    166e:	31 f0       	breq	.+12     	; 0x167c <puts+0x44>
    1670:	09 95       	icall
    1672:	89 2b       	or	r24, r25
    1674:	79 f3       	breq	.-34     	; 0x1654 <puts+0x1c>
    1676:	df ef       	ldi	r29, 0xFF	; 255
    1678:	cf ef       	ldi	r28, 0xFF	; 255
    167a:	ec cf       	rjmp	.-40     	; 0x1654 <puts+0x1c>
    167c:	8a e0       	ldi	r24, 0x0A	; 10
    167e:	09 95       	icall
    1680:	89 2b       	or	r24, r25
    1682:	19 f0       	breq	.+6      	; 0x168a <puts+0x52>
    1684:	8f ef       	ldi	r24, 0xFF	; 255
    1686:	9f ef       	ldi	r25, 0xFF	; 255
    1688:	02 c0       	rjmp	.+4      	; 0x168e <puts+0x56>
    168a:	8d 2f       	mov	r24, r29
    168c:	9c 2f       	mov	r25, r28
    168e:	df 91       	pop	r29
    1690:	cf 91       	pop	r28
    1692:	1f 91       	pop	r17
    1694:	0f 91       	pop	r16
    1696:	08 95       	ret

00001698 <vfprintf>:
    1698:	ab e0       	ldi	r26, 0x0B	; 11
    169a:	b0 e0       	ldi	r27, 0x00	; 0
    169c:	e2 e5       	ldi	r30, 0x52	; 82
    169e:	fb e0       	ldi	r31, 0x0B	; 11
    16a0:	0c 94 32 0e 	jmp	0x1c64	; 0x1c64 <__prologue_saves__>
    16a4:	6c 01       	movw	r12, r24
    16a6:	7b 01       	movw	r14, r22
    16a8:	8a 01       	movw	r16, r20
    16aa:	fc 01       	movw	r30, r24
    16ac:	17 82       	std	Z+7, r1	; 0x07
    16ae:	16 82       	std	Z+6, r1	; 0x06
    16b0:	83 81       	ldd	r24, Z+3	; 0x03
    16b2:	81 ff       	sbrs	r24, 1
    16b4:	cc c1       	rjmp	.+920    	; 0x1a4e <vfprintf+0x3b6>
    16b6:	ce 01       	movw	r24, r28
    16b8:	01 96       	adiw	r24, 0x01	; 1
    16ba:	3c 01       	movw	r6, r24
    16bc:	f6 01       	movw	r30, r12
    16be:	93 81       	ldd	r25, Z+3	; 0x03
    16c0:	f7 01       	movw	r30, r14
    16c2:	93 fd       	sbrc	r25, 3
    16c4:	85 91       	lpm	r24, Z+
    16c6:	93 ff       	sbrs	r25, 3
    16c8:	81 91       	ld	r24, Z+
    16ca:	7f 01       	movw	r14, r30
    16cc:	88 23       	and	r24, r24
    16ce:	09 f4       	brne	.+2      	; 0x16d2 <vfprintf+0x3a>
    16d0:	ba c1       	rjmp	.+884    	; 0x1a46 <vfprintf+0x3ae>
    16d2:	85 32       	cpi	r24, 0x25	; 37
    16d4:	39 f4       	brne	.+14     	; 0x16e4 <vfprintf+0x4c>
    16d6:	93 fd       	sbrc	r25, 3
    16d8:	85 91       	lpm	r24, Z+
    16da:	93 ff       	sbrs	r25, 3
    16dc:	81 91       	ld	r24, Z+
    16de:	7f 01       	movw	r14, r30
    16e0:	85 32       	cpi	r24, 0x25	; 37
    16e2:	29 f4       	brne	.+10     	; 0x16ee <vfprintf+0x56>
    16e4:	b6 01       	movw	r22, r12
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	0e 94 66 0d 	call	0x1acc	; 0x1acc <fputc>
    16ec:	e7 cf       	rjmp	.-50     	; 0x16bc <vfprintf+0x24>
    16ee:	91 2c       	mov	r9, r1
    16f0:	21 2c       	mov	r2, r1
    16f2:	31 2c       	mov	r3, r1
    16f4:	ff e1       	ldi	r31, 0x1F	; 31
    16f6:	f3 15       	cp	r31, r3
    16f8:	d8 f0       	brcs	.+54     	; 0x1730 <vfprintf+0x98>
    16fa:	8b 32       	cpi	r24, 0x2B	; 43
    16fc:	79 f0       	breq	.+30     	; 0x171c <vfprintf+0x84>
    16fe:	38 f4       	brcc	.+14     	; 0x170e <vfprintf+0x76>
    1700:	80 32       	cpi	r24, 0x20	; 32
    1702:	79 f0       	breq	.+30     	; 0x1722 <vfprintf+0x8a>
    1704:	83 32       	cpi	r24, 0x23	; 35
    1706:	a1 f4       	brne	.+40     	; 0x1730 <vfprintf+0x98>
    1708:	23 2d       	mov	r18, r3
    170a:	20 61       	ori	r18, 0x10	; 16
    170c:	1d c0       	rjmp	.+58     	; 0x1748 <vfprintf+0xb0>
    170e:	8d 32       	cpi	r24, 0x2D	; 45
    1710:	61 f0       	breq	.+24     	; 0x172a <vfprintf+0x92>
    1712:	80 33       	cpi	r24, 0x30	; 48
    1714:	69 f4       	brne	.+26     	; 0x1730 <vfprintf+0x98>
    1716:	23 2d       	mov	r18, r3
    1718:	21 60       	ori	r18, 0x01	; 1
    171a:	16 c0       	rjmp	.+44     	; 0x1748 <vfprintf+0xb0>
    171c:	83 2d       	mov	r24, r3
    171e:	82 60       	ori	r24, 0x02	; 2
    1720:	38 2e       	mov	r3, r24
    1722:	e3 2d       	mov	r30, r3
    1724:	e4 60       	ori	r30, 0x04	; 4
    1726:	3e 2e       	mov	r3, r30
    1728:	2a c0       	rjmp	.+84     	; 0x177e <vfprintf+0xe6>
    172a:	f3 2d       	mov	r31, r3
    172c:	f8 60       	ori	r31, 0x08	; 8
    172e:	1d c0       	rjmp	.+58     	; 0x176a <vfprintf+0xd2>
    1730:	37 fc       	sbrc	r3, 7
    1732:	2d c0       	rjmp	.+90     	; 0x178e <vfprintf+0xf6>
    1734:	20 ed       	ldi	r18, 0xD0	; 208
    1736:	28 0f       	add	r18, r24
    1738:	2a 30       	cpi	r18, 0x0A	; 10
    173a:	40 f0       	brcs	.+16     	; 0x174c <vfprintf+0xb4>
    173c:	8e 32       	cpi	r24, 0x2E	; 46
    173e:	b9 f4       	brne	.+46     	; 0x176e <vfprintf+0xd6>
    1740:	36 fc       	sbrc	r3, 6
    1742:	81 c1       	rjmp	.+770    	; 0x1a46 <vfprintf+0x3ae>
    1744:	23 2d       	mov	r18, r3
    1746:	20 64       	ori	r18, 0x40	; 64
    1748:	32 2e       	mov	r3, r18
    174a:	19 c0       	rjmp	.+50     	; 0x177e <vfprintf+0xe6>
    174c:	36 fe       	sbrs	r3, 6
    174e:	06 c0       	rjmp	.+12     	; 0x175c <vfprintf+0xc4>
    1750:	8a e0       	ldi	r24, 0x0A	; 10
    1752:	98 9e       	mul	r9, r24
    1754:	20 0d       	add	r18, r0
    1756:	11 24       	eor	r1, r1
    1758:	92 2e       	mov	r9, r18
    175a:	11 c0       	rjmp	.+34     	; 0x177e <vfprintf+0xe6>
    175c:	ea e0       	ldi	r30, 0x0A	; 10
    175e:	2e 9e       	mul	r2, r30
    1760:	20 0d       	add	r18, r0
    1762:	11 24       	eor	r1, r1
    1764:	22 2e       	mov	r2, r18
    1766:	f3 2d       	mov	r31, r3
    1768:	f0 62       	ori	r31, 0x20	; 32
    176a:	3f 2e       	mov	r3, r31
    176c:	08 c0       	rjmp	.+16     	; 0x177e <vfprintf+0xe6>
    176e:	8c 36       	cpi	r24, 0x6C	; 108
    1770:	21 f4       	brne	.+8      	; 0x177a <vfprintf+0xe2>
    1772:	83 2d       	mov	r24, r3
    1774:	80 68       	ori	r24, 0x80	; 128
    1776:	38 2e       	mov	r3, r24
    1778:	02 c0       	rjmp	.+4      	; 0x177e <vfprintf+0xe6>
    177a:	88 36       	cpi	r24, 0x68	; 104
    177c:	41 f4       	brne	.+16     	; 0x178e <vfprintf+0xf6>
    177e:	f7 01       	movw	r30, r14
    1780:	93 fd       	sbrc	r25, 3
    1782:	85 91       	lpm	r24, Z+
    1784:	93 ff       	sbrs	r25, 3
    1786:	81 91       	ld	r24, Z+
    1788:	7f 01       	movw	r14, r30
    178a:	81 11       	cpse	r24, r1
    178c:	b3 cf       	rjmp	.-154    	; 0x16f4 <vfprintf+0x5c>
    178e:	98 2f       	mov	r25, r24
    1790:	9f 7d       	andi	r25, 0xDF	; 223
    1792:	95 54       	subi	r25, 0x45	; 69
    1794:	93 30       	cpi	r25, 0x03	; 3
    1796:	28 f4       	brcc	.+10     	; 0x17a2 <vfprintf+0x10a>
    1798:	0c 5f       	subi	r16, 0xFC	; 252
    179a:	1f 4f       	sbci	r17, 0xFF	; 255
    179c:	9f e3       	ldi	r25, 0x3F	; 63
    179e:	99 83       	std	Y+1, r25	; 0x01
    17a0:	0d c0       	rjmp	.+26     	; 0x17bc <vfprintf+0x124>
    17a2:	83 36       	cpi	r24, 0x63	; 99
    17a4:	31 f0       	breq	.+12     	; 0x17b2 <vfprintf+0x11a>
    17a6:	83 37       	cpi	r24, 0x73	; 115
    17a8:	71 f0       	breq	.+28     	; 0x17c6 <vfprintf+0x12e>
    17aa:	83 35       	cpi	r24, 0x53	; 83
    17ac:	09 f0       	breq	.+2      	; 0x17b0 <vfprintf+0x118>
    17ae:	59 c0       	rjmp	.+178    	; 0x1862 <vfprintf+0x1ca>
    17b0:	21 c0       	rjmp	.+66     	; 0x17f4 <vfprintf+0x15c>
    17b2:	f8 01       	movw	r30, r16
    17b4:	80 81       	ld	r24, Z
    17b6:	89 83       	std	Y+1, r24	; 0x01
    17b8:	0e 5f       	subi	r16, 0xFE	; 254
    17ba:	1f 4f       	sbci	r17, 0xFF	; 255
    17bc:	88 24       	eor	r8, r8
    17be:	83 94       	inc	r8
    17c0:	91 2c       	mov	r9, r1
    17c2:	53 01       	movw	r10, r6
    17c4:	13 c0       	rjmp	.+38     	; 0x17ec <vfprintf+0x154>
    17c6:	28 01       	movw	r4, r16
    17c8:	f2 e0       	ldi	r31, 0x02	; 2
    17ca:	4f 0e       	add	r4, r31
    17cc:	51 1c       	adc	r5, r1
    17ce:	f8 01       	movw	r30, r16
    17d0:	a0 80       	ld	r10, Z
    17d2:	b1 80       	ldd	r11, Z+1	; 0x01
    17d4:	36 fe       	sbrs	r3, 6
    17d6:	03 c0       	rjmp	.+6      	; 0x17de <vfprintf+0x146>
    17d8:	69 2d       	mov	r22, r9
    17da:	70 e0       	ldi	r23, 0x00	; 0
    17dc:	02 c0       	rjmp	.+4      	; 0x17e2 <vfprintf+0x14a>
    17de:	6f ef       	ldi	r22, 0xFF	; 255
    17e0:	7f ef       	ldi	r23, 0xFF	; 255
    17e2:	c5 01       	movw	r24, r10
    17e4:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <strnlen>
    17e8:	4c 01       	movw	r8, r24
    17ea:	82 01       	movw	r16, r4
    17ec:	f3 2d       	mov	r31, r3
    17ee:	ff 77       	andi	r31, 0x7F	; 127
    17f0:	3f 2e       	mov	r3, r31
    17f2:	16 c0       	rjmp	.+44     	; 0x1820 <vfprintf+0x188>
    17f4:	28 01       	movw	r4, r16
    17f6:	22 e0       	ldi	r18, 0x02	; 2
    17f8:	42 0e       	add	r4, r18
    17fa:	51 1c       	adc	r5, r1
    17fc:	f8 01       	movw	r30, r16
    17fe:	a0 80       	ld	r10, Z
    1800:	b1 80       	ldd	r11, Z+1	; 0x01
    1802:	36 fe       	sbrs	r3, 6
    1804:	03 c0       	rjmp	.+6      	; 0x180c <vfprintf+0x174>
    1806:	69 2d       	mov	r22, r9
    1808:	70 e0       	ldi	r23, 0x00	; 0
    180a:	02 c0       	rjmp	.+4      	; 0x1810 <vfprintf+0x178>
    180c:	6f ef       	ldi	r22, 0xFF	; 255
    180e:	7f ef       	ldi	r23, 0xFF	; 255
    1810:	c5 01       	movw	r24, r10
    1812:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <strnlen_P>
    1816:	4c 01       	movw	r8, r24
    1818:	f3 2d       	mov	r31, r3
    181a:	f0 68       	ori	r31, 0x80	; 128
    181c:	3f 2e       	mov	r3, r31
    181e:	82 01       	movw	r16, r4
    1820:	33 fc       	sbrc	r3, 3
    1822:	1b c0       	rjmp	.+54     	; 0x185a <vfprintf+0x1c2>
    1824:	82 2d       	mov	r24, r2
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	88 16       	cp	r8, r24
    182a:	99 06       	cpc	r9, r25
    182c:	b0 f4       	brcc	.+44     	; 0x185a <vfprintf+0x1c2>
    182e:	b6 01       	movw	r22, r12
    1830:	80 e2       	ldi	r24, 0x20	; 32
    1832:	90 e0       	ldi	r25, 0x00	; 0
    1834:	0e 94 66 0d 	call	0x1acc	; 0x1acc <fputc>
    1838:	2a 94       	dec	r2
    183a:	f4 cf       	rjmp	.-24     	; 0x1824 <vfprintf+0x18c>
    183c:	f5 01       	movw	r30, r10
    183e:	37 fc       	sbrc	r3, 7
    1840:	85 91       	lpm	r24, Z+
    1842:	37 fe       	sbrs	r3, 7
    1844:	81 91       	ld	r24, Z+
    1846:	5f 01       	movw	r10, r30
    1848:	b6 01       	movw	r22, r12
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	0e 94 66 0d 	call	0x1acc	; 0x1acc <fputc>
    1850:	21 10       	cpse	r2, r1
    1852:	2a 94       	dec	r2
    1854:	21 e0       	ldi	r18, 0x01	; 1
    1856:	82 1a       	sub	r8, r18
    1858:	91 08       	sbc	r9, r1
    185a:	81 14       	cp	r8, r1
    185c:	91 04       	cpc	r9, r1
    185e:	71 f7       	brne	.-36     	; 0x183c <vfprintf+0x1a4>
    1860:	e8 c0       	rjmp	.+464    	; 0x1a32 <vfprintf+0x39a>
    1862:	84 36       	cpi	r24, 0x64	; 100
    1864:	11 f0       	breq	.+4      	; 0x186a <vfprintf+0x1d2>
    1866:	89 36       	cpi	r24, 0x69	; 105
    1868:	41 f5       	brne	.+80     	; 0x18ba <vfprintf+0x222>
    186a:	f8 01       	movw	r30, r16
    186c:	37 fe       	sbrs	r3, 7
    186e:	07 c0       	rjmp	.+14     	; 0x187e <vfprintf+0x1e6>
    1870:	60 81       	ld	r22, Z
    1872:	71 81       	ldd	r23, Z+1	; 0x01
    1874:	82 81       	ldd	r24, Z+2	; 0x02
    1876:	93 81       	ldd	r25, Z+3	; 0x03
    1878:	0c 5f       	subi	r16, 0xFC	; 252
    187a:	1f 4f       	sbci	r17, 0xFF	; 255
    187c:	08 c0       	rjmp	.+16     	; 0x188e <vfprintf+0x1f6>
    187e:	60 81       	ld	r22, Z
    1880:	71 81       	ldd	r23, Z+1	; 0x01
    1882:	07 2e       	mov	r0, r23
    1884:	00 0c       	add	r0, r0
    1886:	88 0b       	sbc	r24, r24
    1888:	99 0b       	sbc	r25, r25
    188a:	0e 5f       	subi	r16, 0xFE	; 254
    188c:	1f 4f       	sbci	r17, 0xFF	; 255
    188e:	f3 2d       	mov	r31, r3
    1890:	ff 76       	andi	r31, 0x6F	; 111
    1892:	3f 2e       	mov	r3, r31
    1894:	97 ff       	sbrs	r25, 7
    1896:	09 c0       	rjmp	.+18     	; 0x18aa <vfprintf+0x212>
    1898:	90 95       	com	r25
    189a:	80 95       	com	r24
    189c:	70 95       	com	r23
    189e:	61 95       	neg	r22
    18a0:	7f 4f       	sbci	r23, 0xFF	; 255
    18a2:	8f 4f       	sbci	r24, 0xFF	; 255
    18a4:	9f 4f       	sbci	r25, 0xFF	; 255
    18a6:	f0 68       	ori	r31, 0x80	; 128
    18a8:	3f 2e       	mov	r3, r31
    18aa:	2a e0       	ldi	r18, 0x0A	; 10
    18ac:	30 e0       	ldi	r19, 0x00	; 0
    18ae:	a3 01       	movw	r20, r6
    18b0:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <__ultoa_invert>
    18b4:	88 2e       	mov	r8, r24
    18b6:	86 18       	sub	r8, r6
    18b8:	45 c0       	rjmp	.+138    	; 0x1944 <vfprintf+0x2ac>
    18ba:	85 37       	cpi	r24, 0x75	; 117
    18bc:	31 f4       	brne	.+12     	; 0x18ca <vfprintf+0x232>
    18be:	23 2d       	mov	r18, r3
    18c0:	2f 7e       	andi	r18, 0xEF	; 239
    18c2:	b2 2e       	mov	r11, r18
    18c4:	2a e0       	ldi	r18, 0x0A	; 10
    18c6:	30 e0       	ldi	r19, 0x00	; 0
    18c8:	25 c0       	rjmp	.+74     	; 0x1914 <vfprintf+0x27c>
    18ca:	93 2d       	mov	r25, r3
    18cc:	99 7f       	andi	r25, 0xF9	; 249
    18ce:	b9 2e       	mov	r11, r25
    18d0:	8f 36       	cpi	r24, 0x6F	; 111
    18d2:	c1 f0       	breq	.+48     	; 0x1904 <vfprintf+0x26c>
    18d4:	18 f4       	brcc	.+6      	; 0x18dc <vfprintf+0x244>
    18d6:	88 35       	cpi	r24, 0x58	; 88
    18d8:	79 f0       	breq	.+30     	; 0x18f8 <vfprintf+0x260>
    18da:	b5 c0       	rjmp	.+362    	; 0x1a46 <vfprintf+0x3ae>
    18dc:	80 37       	cpi	r24, 0x70	; 112
    18de:	19 f0       	breq	.+6      	; 0x18e6 <vfprintf+0x24e>
    18e0:	88 37       	cpi	r24, 0x78	; 120
    18e2:	21 f0       	breq	.+8      	; 0x18ec <vfprintf+0x254>
    18e4:	b0 c0       	rjmp	.+352    	; 0x1a46 <vfprintf+0x3ae>
    18e6:	e9 2f       	mov	r30, r25
    18e8:	e0 61       	ori	r30, 0x10	; 16
    18ea:	be 2e       	mov	r11, r30
    18ec:	b4 fe       	sbrs	r11, 4
    18ee:	0d c0       	rjmp	.+26     	; 0x190a <vfprintf+0x272>
    18f0:	fb 2d       	mov	r31, r11
    18f2:	f4 60       	ori	r31, 0x04	; 4
    18f4:	bf 2e       	mov	r11, r31
    18f6:	09 c0       	rjmp	.+18     	; 0x190a <vfprintf+0x272>
    18f8:	34 fe       	sbrs	r3, 4
    18fa:	0a c0       	rjmp	.+20     	; 0x1910 <vfprintf+0x278>
    18fc:	29 2f       	mov	r18, r25
    18fe:	26 60       	ori	r18, 0x06	; 6
    1900:	b2 2e       	mov	r11, r18
    1902:	06 c0       	rjmp	.+12     	; 0x1910 <vfprintf+0x278>
    1904:	28 e0       	ldi	r18, 0x08	; 8
    1906:	30 e0       	ldi	r19, 0x00	; 0
    1908:	05 c0       	rjmp	.+10     	; 0x1914 <vfprintf+0x27c>
    190a:	20 e1       	ldi	r18, 0x10	; 16
    190c:	30 e0       	ldi	r19, 0x00	; 0
    190e:	02 c0       	rjmp	.+4      	; 0x1914 <vfprintf+0x27c>
    1910:	20 e1       	ldi	r18, 0x10	; 16
    1912:	32 e0       	ldi	r19, 0x02	; 2
    1914:	f8 01       	movw	r30, r16
    1916:	b7 fe       	sbrs	r11, 7
    1918:	07 c0       	rjmp	.+14     	; 0x1928 <vfprintf+0x290>
    191a:	60 81       	ld	r22, Z
    191c:	71 81       	ldd	r23, Z+1	; 0x01
    191e:	82 81       	ldd	r24, Z+2	; 0x02
    1920:	93 81       	ldd	r25, Z+3	; 0x03
    1922:	0c 5f       	subi	r16, 0xFC	; 252
    1924:	1f 4f       	sbci	r17, 0xFF	; 255
    1926:	06 c0       	rjmp	.+12     	; 0x1934 <vfprintf+0x29c>
    1928:	60 81       	ld	r22, Z
    192a:	71 81       	ldd	r23, Z+1	; 0x01
    192c:	80 e0       	ldi	r24, 0x00	; 0
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	0e 5f       	subi	r16, 0xFE	; 254
    1932:	1f 4f       	sbci	r17, 0xFF	; 255
    1934:	a3 01       	movw	r20, r6
    1936:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <__ultoa_invert>
    193a:	88 2e       	mov	r8, r24
    193c:	86 18       	sub	r8, r6
    193e:	fb 2d       	mov	r31, r11
    1940:	ff 77       	andi	r31, 0x7F	; 127
    1942:	3f 2e       	mov	r3, r31
    1944:	36 fe       	sbrs	r3, 6
    1946:	0d c0       	rjmp	.+26     	; 0x1962 <vfprintf+0x2ca>
    1948:	23 2d       	mov	r18, r3
    194a:	2e 7f       	andi	r18, 0xFE	; 254
    194c:	a2 2e       	mov	r10, r18
    194e:	89 14       	cp	r8, r9
    1950:	58 f4       	brcc	.+22     	; 0x1968 <vfprintf+0x2d0>
    1952:	34 fe       	sbrs	r3, 4
    1954:	0b c0       	rjmp	.+22     	; 0x196c <vfprintf+0x2d4>
    1956:	32 fc       	sbrc	r3, 2
    1958:	09 c0       	rjmp	.+18     	; 0x196c <vfprintf+0x2d4>
    195a:	83 2d       	mov	r24, r3
    195c:	8e 7e       	andi	r24, 0xEE	; 238
    195e:	a8 2e       	mov	r10, r24
    1960:	05 c0       	rjmp	.+10     	; 0x196c <vfprintf+0x2d4>
    1962:	b8 2c       	mov	r11, r8
    1964:	a3 2c       	mov	r10, r3
    1966:	03 c0       	rjmp	.+6      	; 0x196e <vfprintf+0x2d6>
    1968:	b8 2c       	mov	r11, r8
    196a:	01 c0       	rjmp	.+2      	; 0x196e <vfprintf+0x2d6>
    196c:	b9 2c       	mov	r11, r9
    196e:	a4 fe       	sbrs	r10, 4
    1970:	0f c0       	rjmp	.+30     	; 0x1990 <vfprintf+0x2f8>
    1972:	fe 01       	movw	r30, r28
    1974:	e8 0d       	add	r30, r8
    1976:	f1 1d       	adc	r31, r1
    1978:	80 81       	ld	r24, Z
    197a:	80 33       	cpi	r24, 0x30	; 48
    197c:	21 f4       	brne	.+8      	; 0x1986 <vfprintf+0x2ee>
    197e:	9a 2d       	mov	r25, r10
    1980:	99 7e       	andi	r25, 0xE9	; 233
    1982:	a9 2e       	mov	r10, r25
    1984:	09 c0       	rjmp	.+18     	; 0x1998 <vfprintf+0x300>
    1986:	a2 fe       	sbrs	r10, 2
    1988:	06 c0       	rjmp	.+12     	; 0x1996 <vfprintf+0x2fe>
    198a:	b3 94       	inc	r11
    198c:	b3 94       	inc	r11
    198e:	04 c0       	rjmp	.+8      	; 0x1998 <vfprintf+0x300>
    1990:	8a 2d       	mov	r24, r10
    1992:	86 78       	andi	r24, 0x86	; 134
    1994:	09 f0       	breq	.+2      	; 0x1998 <vfprintf+0x300>
    1996:	b3 94       	inc	r11
    1998:	a3 fc       	sbrc	r10, 3
    199a:	11 c0       	rjmp	.+34     	; 0x19be <vfprintf+0x326>
    199c:	a0 fe       	sbrs	r10, 0
    199e:	06 c0       	rjmp	.+12     	; 0x19ac <vfprintf+0x314>
    19a0:	b2 14       	cp	r11, r2
    19a2:	88 f4       	brcc	.+34     	; 0x19c6 <vfprintf+0x32e>
    19a4:	28 0c       	add	r2, r8
    19a6:	92 2c       	mov	r9, r2
    19a8:	9b 18       	sub	r9, r11
    19aa:	0e c0       	rjmp	.+28     	; 0x19c8 <vfprintf+0x330>
    19ac:	b2 14       	cp	r11, r2
    19ae:	60 f4       	brcc	.+24     	; 0x19c8 <vfprintf+0x330>
    19b0:	b6 01       	movw	r22, r12
    19b2:	80 e2       	ldi	r24, 0x20	; 32
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	0e 94 66 0d 	call	0x1acc	; 0x1acc <fputc>
    19ba:	b3 94       	inc	r11
    19bc:	f7 cf       	rjmp	.-18     	; 0x19ac <vfprintf+0x314>
    19be:	b2 14       	cp	r11, r2
    19c0:	18 f4       	brcc	.+6      	; 0x19c8 <vfprintf+0x330>
    19c2:	2b 18       	sub	r2, r11
    19c4:	02 c0       	rjmp	.+4      	; 0x19ca <vfprintf+0x332>
    19c6:	98 2c       	mov	r9, r8
    19c8:	21 2c       	mov	r2, r1
    19ca:	a4 fe       	sbrs	r10, 4
    19cc:	10 c0       	rjmp	.+32     	; 0x19ee <vfprintf+0x356>
    19ce:	b6 01       	movw	r22, r12
    19d0:	80 e3       	ldi	r24, 0x30	; 48
    19d2:	90 e0       	ldi	r25, 0x00	; 0
    19d4:	0e 94 66 0d 	call	0x1acc	; 0x1acc <fputc>
    19d8:	a2 fe       	sbrs	r10, 2
    19da:	17 c0       	rjmp	.+46     	; 0x1a0a <vfprintf+0x372>
    19dc:	a1 fc       	sbrc	r10, 1
    19de:	03 c0       	rjmp	.+6      	; 0x19e6 <vfprintf+0x34e>
    19e0:	88 e7       	ldi	r24, 0x78	; 120
    19e2:	90 e0       	ldi	r25, 0x00	; 0
    19e4:	02 c0       	rjmp	.+4      	; 0x19ea <vfprintf+0x352>
    19e6:	88 e5       	ldi	r24, 0x58	; 88
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	b6 01       	movw	r22, r12
    19ec:	0c c0       	rjmp	.+24     	; 0x1a06 <vfprintf+0x36e>
    19ee:	8a 2d       	mov	r24, r10
    19f0:	86 78       	andi	r24, 0x86	; 134
    19f2:	59 f0       	breq	.+22     	; 0x1a0a <vfprintf+0x372>
    19f4:	a1 fe       	sbrs	r10, 1
    19f6:	02 c0       	rjmp	.+4      	; 0x19fc <vfprintf+0x364>
    19f8:	8b e2       	ldi	r24, 0x2B	; 43
    19fa:	01 c0       	rjmp	.+2      	; 0x19fe <vfprintf+0x366>
    19fc:	80 e2       	ldi	r24, 0x20	; 32
    19fe:	a7 fc       	sbrc	r10, 7
    1a00:	8d e2       	ldi	r24, 0x2D	; 45
    1a02:	b6 01       	movw	r22, r12
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	0e 94 66 0d 	call	0x1acc	; 0x1acc <fputc>
    1a0a:	89 14       	cp	r8, r9
    1a0c:	38 f4       	brcc	.+14     	; 0x1a1c <vfprintf+0x384>
    1a0e:	b6 01       	movw	r22, r12
    1a10:	80 e3       	ldi	r24, 0x30	; 48
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	0e 94 66 0d 	call	0x1acc	; 0x1acc <fputc>
    1a18:	9a 94       	dec	r9
    1a1a:	f7 cf       	rjmp	.-18     	; 0x1a0a <vfprintf+0x372>
    1a1c:	8a 94       	dec	r8
    1a1e:	f3 01       	movw	r30, r6
    1a20:	e8 0d       	add	r30, r8
    1a22:	f1 1d       	adc	r31, r1
    1a24:	80 81       	ld	r24, Z
    1a26:	b6 01       	movw	r22, r12
    1a28:	90 e0       	ldi	r25, 0x00	; 0
    1a2a:	0e 94 66 0d 	call	0x1acc	; 0x1acc <fputc>
    1a2e:	81 10       	cpse	r8, r1
    1a30:	f5 cf       	rjmp	.-22     	; 0x1a1c <vfprintf+0x384>
    1a32:	22 20       	and	r2, r2
    1a34:	09 f4       	brne	.+2      	; 0x1a38 <vfprintf+0x3a0>
    1a36:	42 ce       	rjmp	.-892    	; 0x16bc <vfprintf+0x24>
    1a38:	b6 01       	movw	r22, r12
    1a3a:	80 e2       	ldi	r24, 0x20	; 32
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	0e 94 66 0d 	call	0x1acc	; 0x1acc <fputc>
    1a42:	2a 94       	dec	r2
    1a44:	f6 cf       	rjmp	.-20     	; 0x1a32 <vfprintf+0x39a>
    1a46:	f6 01       	movw	r30, r12
    1a48:	86 81       	ldd	r24, Z+6	; 0x06
    1a4a:	97 81       	ldd	r25, Z+7	; 0x07
    1a4c:	02 c0       	rjmp	.+4      	; 0x1a52 <vfprintf+0x3ba>
    1a4e:	8f ef       	ldi	r24, 0xFF	; 255
    1a50:	9f ef       	ldi	r25, 0xFF	; 255
    1a52:	2b 96       	adiw	r28, 0x0b	; 11
    1a54:	e2 e1       	ldi	r30, 0x12	; 18
    1a56:	0c 94 4e 0e 	jmp	0x1c9c	; 0x1c9c <__epilogue_restores__>

00001a5a <calloc>:
    1a5a:	0f 93       	push	r16
    1a5c:	1f 93       	push	r17
    1a5e:	cf 93       	push	r28
    1a60:	df 93       	push	r29
    1a62:	86 9f       	mul	r24, r22
    1a64:	80 01       	movw	r16, r0
    1a66:	87 9f       	mul	r24, r23
    1a68:	10 0d       	add	r17, r0
    1a6a:	96 9f       	mul	r25, r22
    1a6c:	10 0d       	add	r17, r0
    1a6e:	11 24       	eor	r1, r1
    1a70:	c8 01       	movw	r24, r16
    1a72:	0e 94 37 09 	call	0x126e	; 0x126e <malloc>
    1a76:	ec 01       	movw	r28, r24
    1a78:	00 97       	sbiw	r24, 0x00	; 0
    1a7a:	29 f0       	breq	.+10     	; 0x1a86 <calloc+0x2c>
    1a7c:	a8 01       	movw	r20, r16
    1a7e:	60 e0       	ldi	r22, 0x00	; 0
    1a80:	70 e0       	ldi	r23, 0x00	; 0
    1a82:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <memset>
    1a86:	ce 01       	movw	r24, r28
    1a88:	df 91       	pop	r29
    1a8a:	cf 91       	pop	r28
    1a8c:	1f 91       	pop	r17
    1a8e:	0f 91       	pop	r16
    1a90:	08 95       	ret

00001a92 <strnlen_P>:
    1a92:	fc 01       	movw	r30, r24
    1a94:	05 90       	lpm	r0, Z+
    1a96:	61 50       	subi	r22, 0x01	; 1
    1a98:	70 40       	sbci	r23, 0x00	; 0
    1a9a:	01 10       	cpse	r0, r1
    1a9c:	d8 f7       	brcc	.-10     	; 0x1a94 <strnlen_P+0x2>
    1a9e:	80 95       	com	r24
    1aa0:	90 95       	com	r25
    1aa2:	8e 0f       	add	r24, r30
    1aa4:	9f 1f       	adc	r25, r31
    1aa6:	08 95       	ret

00001aa8 <memset>:
    1aa8:	dc 01       	movw	r26, r24
    1aaa:	01 c0       	rjmp	.+2      	; 0x1aae <memset+0x6>
    1aac:	6d 93       	st	X+, r22
    1aae:	41 50       	subi	r20, 0x01	; 1
    1ab0:	50 40       	sbci	r21, 0x00	; 0
    1ab2:	e0 f7       	brcc	.-8      	; 0x1aac <memset+0x4>
    1ab4:	08 95       	ret

00001ab6 <strnlen>:
    1ab6:	fc 01       	movw	r30, r24
    1ab8:	61 50       	subi	r22, 0x01	; 1
    1aba:	70 40       	sbci	r23, 0x00	; 0
    1abc:	01 90       	ld	r0, Z+
    1abe:	01 10       	cpse	r0, r1
    1ac0:	d8 f7       	brcc	.-10     	; 0x1ab8 <strnlen+0x2>
    1ac2:	80 95       	com	r24
    1ac4:	90 95       	com	r25
    1ac6:	8e 0f       	add	r24, r30
    1ac8:	9f 1f       	adc	r25, r31
    1aca:	08 95       	ret

00001acc <fputc>:
    1acc:	0f 93       	push	r16
    1ace:	1f 93       	push	r17
    1ad0:	cf 93       	push	r28
    1ad2:	df 93       	push	r29
    1ad4:	fb 01       	movw	r30, r22
    1ad6:	23 81       	ldd	r18, Z+3	; 0x03
    1ad8:	21 fd       	sbrc	r18, 1
    1ada:	03 c0       	rjmp	.+6      	; 0x1ae2 <fputc+0x16>
    1adc:	8f ef       	ldi	r24, 0xFF	; 255
    1ade:	9f ef       	ldi	r25, 0xFF	; 255
    1ae0:	2c c0       	rjmp	.+88     	; 0x1b3a <fputc+0x6e>
    1ae2:	22 ff       	sbrs	r18, 2
    1ae4:	16 c0       	rjmp	.+44     	; 0x1b12 <fputc+0x46>
    1ae6:	46 81       	ldd	r20, Z+6	; 0x06
    1ae8:	57 81       	ldd	r21, Z+7	; 0x07
    1aea:	24 81       	ldd	r18, Z+4	; 0x04
    1aec:	35 81       	ldd	r19, Z+5	; 0x05
    1aee:	42 17       	cp	r20, r18
    1af0:	53 07       	cpc	r21, r19
    1af2:	44 f4       	brge	.+16     	; 0x1b04 <fputc+0x38>
    1af4:	a0 81       	ld	r26, Z
    1af6:	b1 81       	ldd	r27, Z+1	; 0x01
    1af8:	9d 01       	movw	r18, r26
    1afa:	2f 5f       	subi	r18, 0xFF	; 255
    1afc:	3f 4f       	sbci	r19, 0xFF	; 255
    1afe:	31 83       	std	Z+1, r19	; 0x01
    1b00:	20 83       	st	Z, r18
    1b02:	8c 93       	st	X, r24
    1b04:	26 81       	ldd	r18, Z+6	; 0x06
    1b06:	37 81       	ldd	r19, Z+7	; 0x07
    1b08:	2f 5f       	subi	r18, 0xFF	; 255
    1b0a:	3f 4f       	sbci	r19, 0xFF	; 255
    1b0c:	37 83       	std	Z+7, r19	; 0x07
    1b0e:	26 83       	std	Z+6, r18	; 0x06
    1b10:	14 c0       	rjmp	.+40     	; 0x1b3a <fputc+0x6e>
    1b12:	8b 01       	movw	r16, r22
    1b14:	ec 01       	movw	r28, r24
    1b16:	fb 01       	movw	r30, r22
    1b18:	00 84       	ldd	r0, Z+8	; 0x08
    1b1a:	f1 85       	ldd	r31, Z+9	; 0x09
    1b1c:	e0 2d       	mov	r30, r0
    1b1e:	09 95       	icall
    1b20:	89 2b       	or	r24, r25
    1b22:	e1 f6       	brne	.-72     	; 0x1adc <fputc+0x10>
    1b24:	d8 01       	movw	r26, r16
    1b26:	16 96       	adiw	r26, 0x06	; 6
    1b28:	8d 91       	ld	r24, X+
    1b2a:	9c 91       	ld	r25, X
    1b2c:	17 97       	sbiw	r26, 0x07	; 7
    1b2e:	01 96       	adiw	r24, 0x01	; 1
    1b30:	17 96       	adiw	r26, 0x07	; 7
    1b32:	9c 93       	st	X, r25
    1b34:	8e 93       	st	-X, r24
    1b36:	16 97       	sbiw	r26, 0x06	; 6
    1b38:	ce 01       	movw	r24, r28
    1b3a:	df 91       	pop	r29
    1b3c:	cf 91       	pop	r28
    1b3e:	1f 91       	pop	r17
    1b40:	0f 91       	pop	r16
    1b42:	08 95       	ret

00001b44 <__ultoa_invert>:
    1b44:	fa 01       	movw	r30, r20
    1b46:	aa 27       	eor	r26, r26
    1b48:	28 30       	cpi	r18, 0x08	; 8
    1b4a:	51 f1       	breq	.+84     	; 0x1ba0 <__ultoa_invert+0x5c>
    1b4c:	20 31       	cpi	r18, 0x10	; 16
    1b4e:	81 f1       	breq	.+96     	; 0x1bb0 <__ultoa_invert+0x6c>
    1b50:	e8 94       	clt
    1b52:	6f 93       	push	r22
    1b54:	6e 7f       	andi	r22, 0xFE	; 254
    1b56:	6e 5f       	subi	r22, 0xFE	; 254
    1b58:	7f 4f       	sbci	r23, 0xFF	; 255
    1b5a:	8f 4f       	sbci	r24, 0xFF	; 255
    1b5c:	9f 4f       	sbci	r25, 0xFF	; 255
    1b5e:	af 4f       	sbci	r26, 0xFF	; 255
    1b60:	b1 e0       	ldi	r27, 0x01	; 1
    1b62:	3e d0       	rcall	.+124    	; 0x1be0 <__ultoa_invert+0x9c>
    1b64:	b4 e0       	ldi	r27, 0x04	; 4
    1b66:	3c d0       	rcall	.+120    	; 0x1be0 <__ultoa_invert+0x9c>
    1b68:	67 0f       	add	r22, r23
    1b6a:	78 1f       	adc	r23, r24
    1b6c:	89 1f       	adc	r24, r25
    1b6e:	9a 1f       	adc	r25, r26
    1b70:	a1 1d       	adc	r26, r1
    1b72:	68 0f       	add	r22, r24
    1b74:	79 1f       	adc	r23, r25
    1b76:	8a 1f       	adc	r24, r26
    1b78:	91 1d       	adc	r25, r1
    1b7a:	a1 1d       	adc	r26, r1
    1b7c:	6a 0f       	add	r22, r26
    1b7e:	71 1d       	adc	r23, r1
    1b80:	81 1d       	adc	r24, r1
    1b82:	91 1d       	adc	r25, r1
    1b84:	a1 1d       	adc	r26, r1
    1b86:	20 d0       	rcall	.+64     	; 0x1bc8 <__ultoa_invert+0x84>
    1b88:	09 f4       	brne	.+2      	; 0x1b8c <__ultoa_invert+0x48>
    1b8a:	68 94       	set
    1b8c:	3f 91       	pop	r19
    1b8e:	2a e0       	ldi	r18, 0x0A	; 10
    1b90:	26 9f       	mul	r18, r22
    1b92:	11 24       	eor	r1, r1
    1b94:	30 19       	sub	r19, r0
    1b96:	30 5d       	subi	r19, 0xD0	; 208
    1b98:	31 93       	st	Z+, r19
    1b9a:	de f6       	brtc	.-74     	; 0x1b52 <__ultoa_invert+0xe>
    1b9c:	cf 01       	movw	r24, r30
    1b9e:	08 95       	ret
    1ba0:	46 2f       	mov	r20, r22
    1ba2:	47 70       	andi	r20, 0x07	; 7
    1ba4:	40 5d       	subi	r20, 0xD0	; 208
    1ba6:	41 93       	st	Z+, r20
    1ba8:	b3 e0       	ldi	r27, 0x03	; 3
    1baa:	0f d0       	rcall	.+30     	; 0x1bca <__ultoa_invert+0x86>
    1bac:	c9 f7       	brne	.-14     	; 0x1ba0 <__ultoa_invert+0x5c>
    1bae:	f6 cf       	rjmp	.-20     	; 0x1b9c <__ultoa_invert+0x58>
    1bb0:	46 2f       	mov	r20, r22
    1bb2:	4f 70       	andi	r20, 0x0F	; 15
    1bb4:	40 5d       	subi	r20, 0xD0	; 208
    1bb6:	4a 33       	cpi	r20, 0x3A	; 58
    1bb8:	18 f0       	brcs	.+6      	; 0x1bc0 <__ultoa_invert+0x7c>
    1bba:	49 5d       	subi	r20, 0xD9	; 217
    1bbc:	31 fd       	sbrc	r19, 1
    1bbe:	40 52       	subi	r20, 0x20	; 32
    1bc0:	41 93       	st	Z+, r20
    1bc2:	02 d0       	rcall	.+4      	; 0x1bc8 <__ultoa_invert+0x84>
    1bc4:	a9 f7       	brne	.-22     	; 0x1bb0 <__ultoa_invert+0x6c>
    1bc6:	ea cf       	rjmp	.-44     	; 0x1b9c <__ultoa_invert+0x58>
    1bc8:	b4 e0       	ldi	r27, 0x04	; 4
    1bca:	a6 95       	lsr	r26
    1bcc:	97 95       	ror	r25
    1bce:	87 95       	ror	r24
    1bd0:	77 95       	ror	r23
    1bd2:	67 95       	ror	r22
    1bd4:	ba 95       	dec	r27
    1bd6:	c9 f7       	brne	.-14     	; 0x1bca <__ultoa_invert+0x86>
    1bd8:	00 97       	sbiw	r24, 0x00	; 0
    1bda:	61 05       	cpc	r22, r1
    1bdc:	71 05       	cpc	r23, r1
    1bde:	08 95       	ret
    1be0:	9b 01       	movw	r18, r22
    1be2:	ac 01       	movw	r20, r24
    1be4:	0a 2e       	mov	r0, r26
    1be6:	06 94       	lsr	r0
    1be8:	57 95       	ror	r21
    1bea:	47 95       	ror	r20
    1bec:	37 95       	ror	r19
    1bee:	27 95       	ror	r18
    1bf0:	ba 95       	dec	r27
    1bf2:	c9 f7       	brne	.-14     	; 0x1be6 <__ultoa_invert+0xa2>
    1bf4:	62 0f       	add	r22, r18
    1bf6:	73 1f       	adc	r23, r19
    1bf8:	84 1f       	adc	r24, r20
    1bfa:	95 1f       	adc	r25, r21
    1bfc:	a0 1d       	adc	r26, r0
    1bfe:	08 95       	ret

00001c00 <__divmodsi4>:
    1c00:	05 2e       	mov	r0, r21
    1c02:	97 fb       	bst	r25, 7
    1c04:	1e f4       	brtc	.+6      	; 0x1c0c <__divmodsi4+0xc>
    1c06:	00 94       	com	r0
    1c08:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <__negsi2>
    1c0c:	57 fd       	sbrc	r21, 7
    1c0e:	07 d0       	rcall	.+14     	; 0x1c1e <__divmodsi4_neg2>
    1c10:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <__udivmodsi4>
    1c14:	07 fc       	sbrc	r0, 7
    1c16:	03 d0       	rcall	.+6      	; 0x1c1e <__divmodsi4_neg2>
    1c18:	4e f4       	brtc	.+18     	; 0x1c2c <__divmodsi4_exit>
    1c1a:	0c 94 17 0e 	jmp	0x1c2e	; 0x1c2e <__negsi2>

00001c1e <__divmodsi4_neg2>:
    1c1e:	50 95       	com	r21
    1c20:	40 95       	com	r20
    1c22:	30 95       	com	r19
    1c24:	21 95       	neg	r18
    1c26:	3f 4f       	sbci	r19, 0xFF	; 255
    1c28:	4f 4f       	sbci	r20, 0xFF	; 255
    1c2a:	5f 4f       	sbci	r21, 0xFF	; 255

00001c2c <__divmodsi4_exit>:
    1c2c:	08 95       	ret

00001c2e <__negsi2>:
    1c2e:	90 95       	com	r25
    1c30:	80 95       	com	r24
    1c32:	70 95       	com	r23
    1c34:	61 95       	neg	r22
    1c36:	7f 4f       	sbci	r23, 0xFF	; 255
    1c38:	8f 4f       	sbci	r24, 0xFF	; 255
    1c3a:	9f 4f       	sbci	r25, 0xFF	; 255
    1c3c:	08 95       	ret

00001c3e <__muluhisi3>:
    1c3e:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <__umulhisi3>
    1c42:	a5 9f       	mul	r26, r21
    1c44:	90 0d       	add	r25, r0
    1c46:	b4 9f       	mul	r27, r20
    1c48:	90 0d       	add	r25, r0
    1c4a:	a4 9f       	mul	r26, r20
    1c4c:	80 0d       	add	r24, r0
    1c4e:	91 1d       	adc	r25, r1
    1c50:	11 24       	eor	r1, r1
    1c52:	08 95       	ret

00001c54 <__mulshisi3>:
    1c54:	b7 ff       	sbrs	r27, 7
    1c56:	0c 94 1f 0e 	jmp	0x1c3e	; 0x1c3e <__muluhisi3>

00001c5a <__mulohisi3>:
    1c5a:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <__muluhisi3>
    1c5e:	82 1b       	sub	r24, r18
    1c60:	93 0b       	sbc	r25, r19
    1c62:	08 95       	ret

00001c64 <__prologue_saves__>:
    1c64:	2f 92       	push	r2
    1c66:	3f 92       	push	r3
    1c68:	4f 92       	push	r4
    1c6a:	5f 92       	push	r5
    1c6c:	6f 92       	push	r6
    1c6e:	7f 92       	push	r7
    1c70:	8f 92       	push	r8
    1c72:	9f 92       	push	r9
    1c74:	af 92       	push	r10
    1c76:	bf 92       	push	r11
    1c78:	cf 92       	push	r12
    1c7a:	df 92       	push	r13
    1c7c:	ef 92       	push	r14
    1c7e:	ff 92       	push	r15
    1c80:	0f 93       	push	r16
    1c82:	1f 93       	push	r17
    1c84:	cf 93       	push	r28
    1c86:	df 93       	push	r29
    1c88:	cd b7       	in	r28, 0x3d	; 61
    1c8a:	de b7       	in	r29, 0x3e	; 62
    1c8c:	ca 1b       	sub	r28, r26
    1c8e:	db 0b       	sbc	r29, r27
    1c90:	0f b6       	in	r0, 0x3f	; 63
    1c92:	f8 94       	cli
    1c94:	de bf       	out	0x3e, r29	; 62
    1c96:	0f be       	out	0x3f, r0	; 63
    1c98:	cd bf       	out	0x3d, r28	; 61
    1c9a:	09 94       	ijmp

00001c9c <__epilogue_restores__>:
    1c9c:	2a 88       	ldd	r2, Y+18	; 0x12
    1c9e:	39 88       	ldd	r3, Y+17	; 0x11
    1ca0:	48 88       	ldd	r4, Y+16	; 0x10
    1ca2:	5f 84       	ldd	r5, Y+15	; 0x0f
    1ca4:	6e 84       	ldd	r6, Y+14	; 0x0e
    1ca6:	7d 84       	ldd	r7, Y+13	; 0x0d
    1ca8:	8c 84       	ldd	r8, Y+12	; 0x0c
    1caa:	9b 84       	ldd	r9, Y+11	; 0x0b
    1cac:	aa 84       	ldd	r10, Y+10	; 0x0a
    1cae:	b9 84       	ldd	r11, Y+9	; 0x09
    1cb0:	c8 84       	ldd	r12, Y+8	; 0x08
    1cb2:	df 80       	ldd	r13, Y+7	; 0x07
    1cb4:	ee 80       	ldd	r14, Y+6	; 0x06
    1cb6:	fd 80       	ldd	r15, Y+5	; 0x05
    1cb8:	0c 81       	ldd	r16, Y+4	; 0x04
    1cba:	1b 81       	ldd	r17, Y+3	; 0x03
    1cbc:	aa 81       	ldd	r26, Y+2	; 0x02
    1cbe:	b9 81       	ldd	r27, Y+1	; 0x01
    1cc0:	ce 0f       	add	r28, r30
    1cc2:	d1 1d       	adc	r29, r1
    1cc4:	0f b6       	in	r0, 0x3f	; 63
    1cc6:	f8 94       	cli
    1cc8:	de bf       	out	0x3e, r29	; 62
    1cca:	0f be       	out	0x3f, r0	; 63
    1ccc:	cd bf       	out	0x3d, r28	; 61
    1cce:	ed 01       	movw	r28, r26
    1cd0:	08 95       	ret

00001cd2 <__udivmodsi4>:
    1cd2:	a1 e2       	ldi	r26, 0x21	; 33
    1cd4:	1a 2e       	mov	r1, r26
    1cd6:	aa 1b       	sub	r26, r26
    1cd8:	bb 1b       	sub	r27, r27
    1cda:	fd 01       	movw	r30, r26
    1cdc:	0d c0       	rjmp	.+26     	; 0x1cf8 <__udivmodsi4_ep>

00001cde <__udivmodsi4_loop>:
    1cde:	aa 1f       	adc	r26, r26
    1ce0:	bb 1f       	adc	r27, r27
    1ce2:	ee 1f       	adc	r30, r30
    1ce4:	ff 1f       	adc	r31, r31
    1ce6:	a2 17       	cp	r26, r18
    1ce8:	b3 07       	cpc	r27, r19
    1cea:	e4 07       	cpc	r30, r20
    1cec:	f5 07       	cpc	r31, r21
    1cee:	20 f0       	brcs	.+8      	; 0x1cf8 <__udivmodsi4_ep>
    1cf0:	a2 1b       	sub	r26, r18
    1cf2:	b3 0b       	sbc	r27, r19
    1cf4:	e4 0b       	sbc	r30, r20
    1cf6:	f5 0b       	sbc	r31, r21

00001cf8 <__udivmodsi4_ep>:
    1cf8:	66 1f       	adc	r22, r22
    1cfa:	77 1f       	adc	r23, r23
    1cfc:	88 1f       	adc	r24, r24
    1cfe:	99 1f       	adc	r25, r25
    1d00:	1a 94       	dec	r1
    1d02:	69 f7       	brne	.-38     	; 0x1cde <__udivmodsi4_loop>
    1d04:	60 95       	com	r22
    1d06:	70 95       	com	r23
    1d08:	80 95       	com	r24
    1d0a:	90 95       	com	r25
    1d0c:	9b 01       	movw	r18, r22
    1d0e:	ac 01       	movw	r20, r24
    1d10:	bd 01       	movw	r22, r26
    1d12:	cf 01       	movw	r24, r30
    1d14:	08 95       	ret

00001d16 <__umulhisi3>:
    1d16:	a2 9f       	mul	r26, r18
    1d18:	b0 01       	movw	r22, r0
    1d1a:	b3 9f       	mul	r27, r19
    1d1c:	c0 01       	movw	r24, r0
    1d1e:	a3 9f       	mul	r26, r19
    1d20:	70 0d       	add	r23, r0
    1d22:	81 1d       	adc	r24, r1
    1d24:	11 24       	eor	r1, r1
    1d26:	91 1d       	adc	r25, r1
    1d28:	b2 9f       	mul	r27, r18
    1d2a:	70 0d       	add	r23, r0
    1d2c:	81 1d       	adc	r24, r1
    1d2e:	11 24       	eor	r1, r1
    1d30:	91 1d       	adc	r25, r1
    1d32:	08 95       	ret

00001d34 <_exit>:
    1d34:	f8 94       	cli

00001d36 <__stop_program>:
    1d36:	ff cf       	rjmp	.-2      	; 0x1d36 <__stop_program>
