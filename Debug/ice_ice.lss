
ice_ice.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b4  00800100  000011cc  00001260  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001b  008001b4  008001b4  00001314  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001314  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001370  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000230  00000000  00000000  000013ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002b4a  00000000  00000000  000015dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001253  00000000  00000000  00004126  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000137a  00000000  00000000  00005379  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000588  00000000  00000000  000066f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000099e  00000000  00000000  00006c7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001b00  00000000  00000000  0000761a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000300  00000000  00000000  0000911a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
       4:	0c 94 57 00 	jmp	0xae	; 0xae <__vector_1>
       8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
       c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
      70:	11 24       	eor	r1, r1
      72:	1f be       	out	0x3f, r1	; 63
      74:	cf ef       	ldi	r28, 0xFF	; 255
      76:	d4 e0       	ldi	r29, 0x04	; 4
      78:	de bf       	out	0x3e, r29	; 62
      7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
      7c:	11 e0       	ldi	r17, 0x01	; 1
      7e:	a0 e0       	ldi	r26, 0x00	; 0
      80:	b1 e0       	ldi	r27, 0x01	; 1
      82:	ec ec       	ldi	r30, 0xCC	; 204
      84:	f1 e1       	ldi	r31, 0x11	; 17
      86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
      88:	05 90       	lpm	r0, Z+
      8a:	0d 92       	st	X+, r0
      8c:	a4 3b       	cpi	r26, 0xB4	; 180
      8e:	b1 07       	cpc	r27, r17
      90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
      92:	21 e0       	ldi	r18, 0x01	; 1
      94:	a4 eb       	ldi	r26, 0xB4	; 180
      96:	b1 e0       	ldi	r27, 0x01	; 1
      98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
      9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
      9c:	af 3c       	cpi	r26, 0xCF	; 207
      9e:	b2 07       	cpc	r27, r18
      a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
      a2:	0e 94 a3 02 	call	0x546	; 0x546 <main>
      a6:	0c 94 e4 08 	jmp	0x11c8	; 0x11c8 <_exit>

000000aa <__bad_interrupt>:
      aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <__vector_1>:

uint8_t buffer_number = 0;

volatile uint8_t can_flag = 0;

ISR(INT0_vect){
      ae:	1f 92       	push	r1
      b0:	0f 92       	push	r0
      b2:	0f b6       	in	r0, 0x3f	; 63
      b4:	0f 92       	push	r0
      b6:	11 24       	eor	r1, r1
      b8:	8f 93       	push	r24
	can_flag = 1;
      ba:	81 e0       	ldi	r24, 0x01	; 1
      bc:	80 93 bf 01 	sts	0x01BF, r24	; 0x8001bf <can_flag>
}
      c0:	8f 91       	pop	r24
      c2:	0f 90       	pop	r0
      c4:	0f be       	out	0x3f, r0	; 63
      c6:	0f 90       	pop	r0
      c8:	1f 90       	pop	r1
      ca:	18 95       	reti

000000cc <can_interrupted>:

uint8_t can_interrupted(){
	if (can_flag){	
      cc:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <can_flag>
      d0:	88 23       	and	r24, r24
      d2:	19 f0       	breq	.+6      	; 0xda <can_interrupted+0xe>
		can_flag = 0;
      d4:	10 92 bf 01 	sts	0x01BF, r1	; 0x8001bf <can_flag>
		return 1;
      d8:	81 e0       	ldi	r24, 0x01	; 1
	}
	return 0;
}
      da:	08 95       	ret

000000dc <can_interrupt_enable>:

void can_interrupt_enable(){
	cli();
      dc:	f8 94       	cli
	set_bit(MCUCR, ISC01);
      de:	85 b7       	in	r24, 0x35	; 53
      e0:	82 60       	ori	r24, 0x02	; 2
      e2:	85 bf       	out	0x35, r24	; 53
	clear_bit(MCUCR, ISC00);
      e4:	85 b7       	in	r24, 0x35	; 53
      e6:	8e 7f       	andi	r24, 0xFE	; 254
      e8:	85 bf       	out	0x35, r24	; 53
	// Enable interrupt on PD2/INT0 on the AtMega
	set_bit(GICR,INT0);
      ea:	8b b7       	in	r24, 0x3b	; 59
      ec:	80 64       	ori	r24, 0x40	; 64
      ee:	8b bf       	out	0x3b, r24	; 59
	sei();
      f0:	78 94       	sei
      f2:	08 95       	ret

000000f4 <can_init>:
}

void can_init(){
	
	mcp2515_init();
      f4:	0e 94 a3 01 	call	0x346	; 0x346 <mcp2515_init>
	mcp2515_reset();
      f8:	0e 94 9d 01 	call	0x33a	; 0x33a <mcp2515_reset>
	mcp2515_bit_modify(MCP_CNF2, 0b10000000, 0x01<<7);	//BTLMODE: Length of PS2 determined by PHSEG2 bits in CNF3
	
	mcp2515_bit_modify(MCP_CNF1, 0b11000000, 0x00<<6);	//SJW: 1*Tq
	mcp2515_bit_modify(MCP_CNF1, 0b00111111, 0x03);*/
	
	mcp2515_write(MCP_CNF3, 0x01); //0x01 // 0b00000010
      fc:	61 e0       	ldi	r22, 0x01	; 1
      fe:	88 e2       	ldi	r24, 0x28	; 40
     100:	0e 94 6e 01 	call	0x2dc	; 0x2dc <mcp2515_write>
	mcp2515_write(MCP_CNF2, 0xb5); //0xb5 // 0b10010010 original
     104:	65 eb       	ldi	r22, 0xB5	; 181
     106:	89 e2       	ldi	r24, 0x29	; 41
     108:	0e 94 6e 01 	call	0x2dc	; 0x2dc <mcp2515_write>
	mcp2515_write(MCP_CNF1, 0x43); //0x43 // 0b01000000
     10c:	63 e4       	ldi	r22, 0x43	; 67
     10e:	8a e2       	ldi	r24, 0x2A	; 42
     110:	0e 94 6e 01 	call	0x2dc	; 0x2dc <mcp2515_write>
	
	mcp2515_bit_modify(MCP_CANINTE, 0b00000011, MCP_RX_INT);
     114:	43 e0       	ldi	r20, 0x03	; 3
     116:	63 e0       	ldi	r22, 0x03	; 3
     118:	8b e2       	ldi	r24, 0x2B	; 43
     11a:	0e 94 85 01 	call	0x30a	; 0x30a <mcp2515_bit_modify>
	
	mcp2515_write(MCP_CANCTRL, MODE_NORMAL);
     11e:	60 e0       	ldi	r22, 0x00	; 0
     120:	8f e0       	ldi	r24, 0x0F	; 15
     122:	0e 94 6e 01 	call	0x2dc	; 0x2dc <mcp2515_write>
     126:	08 95       	ret

00000128 <send_can_msg>:
// 	sei();
	
}


void send_can_msg(can_message *msg){
     128:	0f 93       	push	r16
     12a:	1f 93       	push	r17
     12c:	cf 93       	push	r28
     12e:	8c 01       	movw	r16, r24
		if(buffer_number > 2){
			buffer_number = 0;
		}
	}*/
	
	mcp2515_write(idBufferHighAddress+16*buffer_number, msg->id>>3);
     130:	fc 01       	movw	r30, r24
     132:	60 81       	ld	r22, Z
     134:	71 81       	ldd	r23, Z+1	; 0x01
     136:	76 95       	lsr	r23
     138:	67 95       	ror	r22
     13a:	76 95       	lsr	r23
     13c:	67 95       	ror	r22
     13e:	76 95       	lsr	r23
     140:	67 95       	ror	r22
     142:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <buffer_number>
     146:	82 95       	swap	r24
     148:	80 7f       	andi	r24, 0xF0	; 240
     14a:	8f 5c       	subi	r24, 0xCF	; 207
     14c:	0e 94 6e 01 	call	0x2dc	; 0x2dc <mcp2515_write>
	uint8_t lowbufferval = mcp2515_read(0x32);
     150:	82 e3       	ldi	r24, 0x32	; 50
     152:	0e 94 60 01 	call	0x2c0	; 0x2c0 <mcp2515_read>
	
	mcp2515_write(idBufferLowAddress+16*buffer_number, 0x00ff & ((lowbufferval&0b00011111) | (msg->id<<5)));
     156:	f8 01       	movw	r30, r16
     158:	60 81       	ld	r22, Z
     15a:	62 95       	swap	r22
     15c:	66 0f       	add	r22, r22
     15e:	60 7e       	andi	r22, 0xE0	; 224
     160:	8f 71       	andi	r24, 0x1F	; 31
     162:	68 2b       	or	r22, r24
     164:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <buffer_number>
     168:	82 95       	swap	r24
     16a:	80 7f       	andi	r24, 0xF0	; 240
     16c:	8e 5c       	subi	r24, 0xCE	; 206
     16e:	0e 94 6e 01 	call	0x2dc	; 0x2dc <mcp2515_write>
	
	uint8_t regvalue = mcp2515_read(0x35);
     172:	85 e3       	ldi	r24, 0x35	; 53
     174:	0e 94 60 01 	call	0x2c0	; 0x2c0 <mcp2515_read>
	mcp2515_write(dataLengthBufferAddress+16*buffer_number, (regvalue&0b11110000) | msg->data_length);
     178:	80 7f       	andi	r24, 0xF0	; 240
     17a:	f8 01       	movw	r30, r16
     17c:	92 81       	ldd	r25, Z+2	; 0x02
     17e:	68 2f       	mov	r22, r24
     180:	69 2b       	or	r22, r25
     182:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <buffer_number>
     186:	82 95       	swap	r24
     188:	80 7f       	andi	r24, 0xF0	; 240
     18a:	8b 5c       	subi	r24, 0xCB	; 203
     18c:	0e 94 6e 01 	call	0x2dc	; 0x2dc <mcp2515_write>
	
	
	for(uint8_t m = 0; m < msg->data_length; m++){
     190:	f8 01       	movw	r30, r16
     192:	82 81       	ldd	r24, Z+2	; 0x02
     194:	88 23       	and	r24, r24
     196:	a9 f0       	breq	.+42     	; 0x1c2 <send_can_msg+0x9a>
     198:	c0 e0       	ldi	r28, 0x00	; 0
		mcp2515_write(dataBufferAddress+m+16*buffer_number, msg->data[m]);
     19a:	f8 01       	movw	r30, r16
     19c:	ec 0f       	add	r30, r28
     19e:	f1 1d       	adc	r31, r1
     1a0:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <buffer_number>
     1a4:	9c 2f       	mov	r25, r28
     1a6:	20 e1       	ldi	r18, 0x10	; 16
     1a8:	82 9f       	mul	r24, r18
     1aa:	90 0d       	add	r25, r0
     1ac:	11 24       	eor	r1, r1
     1ae:	89 2f       	mov	r24, r25
     1b0:	63 81       	ldd	r22, Z+3	; 0x03
     1b2:	8a 5c       	subi	r24, 0xCA	; 202
     1b4:	0e 94 6e 01 	call	0x2dc	; 0x2dc <mcp2515_write>
	
	uint8_t regvalue = mcp2515_read(0x35);
	mcp2515_write(dataLengthBufferAddress+16*buffer_number, (regvalue&0b11110000) | msg->data_length);
	
	
	for(uint8_t m = 0; m < msg->data_length; m++){
     1b8:	cf 5f       	subi	r28, 0xFF	; 255
     1ba:	f8 01       	movw	r30, r16
     1bc:	82 81       	ldd	r24, Z+2	; 0x02
     1be:	c8 17       	cp	r28, r24
     1c0:	60 f3       	brcs	.-40     	; 0x19a <send_can_msg+0x72>
	/*buffer_number += 1;
	if(buffer_number > 2){
		buffer_number = 0;
	}*/
	//mcp2515_bit_modify(MCP_CANINTF, 0xff, 0x00);
	mcp2515_request_to_send(MCP_RTS_TX0+buffer_number);
     1c2:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <buffer_number>
     1c6:	8f 57       	subi	r24, 0x7F	; 127
     1c8:	0e 94 80 01 	call	0x300	; 0x300 <mcp2515_request_to_send>
	
	printf("canintef %x \n\r", mcp2515_read(MCP_CANINTF));
     1cc:	8c e2       	ldi	r24, 0x2C	; 44
     1ce:	0e 94 60 01 	call	0x2c0	; 0x2c0 <mcp2515_read>
     1d2:	1f 92       	push	r1
     1d4:	8f 93       	push	r24
     1d6:	8c e0       	ldi	r24, 0x0C	; 12
     1d8:	91 e0       	ldi	r25, 0x01	; 1
     1da:	9f 93       	push	r25
     1dc:	8f 93       	push	r24
     1de:	0e 94 49 05 	call	0xa92	; 0xa92 <printf>
	printf("eflg %x \n\r", mcp2515_read(MCP_EFLG));
     1e2:	8d e2       	ldi	r24, 0x2D	; 45
     1e4:	0e 94 60 01 	call	0x2c0	; 0x2c0 <mcp2515_read>
     1e8:	1f 92       	push	r1
     1ea:	8f 93       	push	r24
     1ec:	8b e1       	ldi	r24, 0x1B	; 27
     1ee:	91 e0       	ldi	r25, 0x01	; 1
     1f0:	9f 93       	push	r25
     1f2:	8f 93       	push	r24
     1f4:	0e 94 49 05 	call	0xa92	; 0xa92 <printf>
	//mcp2515_bit_modify(MCP_TXB0CTRL+16*buffer_number,0b00001000,0b00001000);
	//mcp2515_bit_modify(0x0D,0b00000111,0b00000111);
}
     1f8:	8d b7       	in	r24, 0x3d	; 61
     1fa:	9e b7       	in	r25, 0x3e	; 62
     1fc:	08 96       	adiw	r24, 0x08	; 8
     1fe:	0f b6       	in	r0, 0x3f	; 63
     200:	f8 94       	cli
     202:	9e bf       	out	0x3e, r25	; 62
     204:	0f be       	out	0x3f, r0	; 63
     206:	8d bf       	out	0x3d, r24	; 61
     208:	cf 91       	pop	r28
     20a:	1f 91       	pop	r17
     20c:	0f 91       	pop	r16
     20e:	08 95       	ret

00000210 <receive_can_msg>:

can_message* receive_can_msg(uint8_t buffer_number){
     210:	0f 93       	push	r16
     212:	1f 93       	push	r17
     214:	cf 93       	push	r28
     216:	df 93       	push	r29
     218:	c8 2f       	mov	r28, r24
	uint8_t status = mcp2515_read_status();
     21a:	0e 94 a8 01 	call	0x350	; 0x350 <mcp2515_read_status>
	static can_message msg;
	msg.id = 0x00;
     21e:	04 eb       	ldi	r16, 0xB4	; 180
     220:	11 e0       	ldi	r17, 0x01	; 1
     222:	f8 01       	movw	r30, r16
     224:	11 82       	std	Z+1, r1	; 0x01
     226:	10 82       	st	Z, r1
	uint16_t idHigh = mcp2515_read(idBufferHighAddress+16*buffer_number);
     228:	c2 95       	swap	r28
     22a:	c0 7f       	andi	r28, 0xF0	; 240
     22c:	81 e3       	ldi	r24, 0x31	; 49
     22e:	8c 0f       	add	r24, r28
     230:	0e 94 60 01 	call	0x2c0	; 0x2c0 <mcp2515_read>
     234:	d8 2f       	mov	r29, r24
	uint16_t idLow = mcp2515_read(idBufferLowAddress+16*buffer_number);
     236:	82 e3       	ldi	r24, 0x32	; 50
     238:	8c 0f       	add	r24, r28
     23a:	0e 94 60 01 	call	0x2c0	; 0x2c0 <mcp2515_read>
	
	msg.id |= idLow>>5;
	msg.id |= idHigh<<3;
     23e:	90 e0       	ldi	r25, 0x00	; 0
     240:	96 95       	lsr	r25
     242:	87 95       	ror	r24
     244:	92 95       	swap	r25
     246:	82 95       	swap	r24
     248:	8f 70       	andi	r24, 0x0F	; 15
     24a:	89 27       	eor	r24, r25
     24c:	9f 70       	andi	r25, 0x0F	; 15
     24e:	89 27       	eor	r24, r25
     250:	2d 2f       	mov	r18, r29
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	22 0f       	add	r18, r18
     256:	33 1f       	adc	r19, r19
     258:	22 0f       	add	r18, r18
     25a:	33 1f       	adc	r19, r19
     25c:	22 0f       	add	r18, r18
     25e:	33 1f       	adc	r19, r19
     260:	82 2b       	or	r24, r18
     262:	93 2b       	or	r25, r19
     264:	f8 01       	movw	r30, r16
     266:	20 81       	ld	r18, Z
     268:	31 81       	ldd	r19, Z+1	; 0x01
     26a:	82 2b       	or	r24, r18
     26c:	93 2b       	or	r25, r19
     26e:	91 83       	std	Z+1, r25	; 0x01
     270:	80 83       	st	Z, r24
	
	uint8_t length;
	length = 0b00001111 & mcp2515_read(dataLengthBufferAddress);
     272:	85 e3       	ldi	r24, 0x35	; 53
     274:	0e 94 60 01 	call	0x2c0	; 0x2c0 <mcp2515_read>
     278:	8f 70       	andi	r24, 0x0F	; 15
	msg.data_length = length;
     27a:	f8 01       	movw	r30, r16
     27c:	82 83       	std	Z+2, r24	; 0x02
	
	for(uint8_t m = 0; m < length; m++){
     27e:	88 23       	and	r24, r24
     280:	71 f0       	breq	.+28     	; 0x29e <receive_can_msg+0x8e>
     282:	ca 59       	subi	r28, 0x9A	; 154
     284:	07 eb       	ldi	r16, 0xB7	; 183
     286:	11 e0       	ldi	r17, 0x01	; 1
     288:	dc 2f       	mov	r29, r28
     28a:	d8 0f       	add	r29, r24
		//msg.data[m] = mcp2515_read(dataBufferAddress+m+16*buffer_number);
		msg.data[m] = mcp2515_read(0x66+m+16*buffer_number);
     28c:	8c 2f       	mov	r24, r28
     28e:	0e 94 60 01 	call	0x2c0	; 0x2c0 <mcp2515_read>
     292:	f8 01       	movw	r30, r16
     294:	81 93       	st	Z+, r24
     296:	8f 01       	movw	r16, r30
     298:	cf 5f       	subi	r28, 0xFF	; 255
	
	uint8_t length;
	length = 0b00001111 & mcp2515_read(dataLengthBufferAddress);
	msg.data_length = length;
	
	for(uint8_t m = 0; m < length; m++){
     29a:	cd 13       	cpse	r28, r29
     29c:	f7 cf       	rjmp	.-18     	; 0x28c <receive_can_msg+0x7c>
		//msg.data[m] = mcp2515_read(dataBufferAddress+m+16*buffer_number);
		msg.data[m] = mcp2515_read(0x66+m+16*buffer_number);
	}
	
	//Reset interrupt flag
	mcp2515_bit_modify(MCP_CANINTF, 1, 0);
     29e:	40 e0       	ldi	r20, 0x00	; 0
     2a0:	61 e0       	ldi	r22, 0x01	; 1
     2a2:	8c e2       	ldi	r24, 0x2C	; 44
     2a4:	0e 94 85 01 	call	0x30a	; 0x30a <mcp2515_bit_modify>
	mcp2515_bit_modify(MCP_CANINTF, 2, 0);
     2a8:	40 e0       	ldi	r20, 0x00	; 0
     2aa:	62 e0       	ldi	r22, 0x02	; 2
     2ac:	8c e2       	ldi	r24, 0x2C	; 44
     2ae:	0e 94 85 01 	call	0x30a	; 0x30a <mcp2515_bit_modify>
	
	return &msg;
}
     2b2:	84 eb       	ldi	r24, 0xB4	; 180
     2b4:	91 e0       	ldi	r25, 0x01	; 1
     2b6:	df 91       	pop	r29
     2b8:	cf 91       	pop	r28
     2ba:	1f 91       	pop	r17
     2bc:	0f 91       	pop	r16
     2be:	08 95       	ret

000002c0 <mcp2515_read>:
	value = MODE_LOOPBACK; */
	//mcp2515_write(MCP_CANCTRL, MODE_CONFIG); config is default after restart
	
}

uint8_t mcp2515_read(uint8_t address){
     2c0:	cf 93       	push	r28
     2c2:	c8 2f       	mov	r28, r24
	uint8_t result;
	
	PORTB &= ~(1<<PB4); //ss
     2c4:	c4 98       	cbi	0x18, 4	; 24
	spi_write(MCP_READ);
     2c6:	83 e0       	ldi	r24, 0x03	; 3
     2c8:	0e 94 b6 01 	call	0x36c	; 0x36c <spi_write>
	spi_write(address);
     2cc:	8c 2f       	mov	r24, r28
     2ce:	0e 94 b6 01 	call	0x36c	; 0x36c <spi_write>
	result = spi_read();
     2d2:	0e 94 ba 01 	call	0x374	; 0x374 <spi_read>
	
	PORTB |= (1<<PB4); //!ss
     2d6:	c4 9a       	sbi	0x18, 4	; 24
	
	return result;
}
     2d8:	cf 91       	pop	r28
     2da:	08 95       	ret

000002dc <mcp2515_write>:
void mcp2515_write(uint8_t address, uint8_t data){
     2dc:	cf 93       	push	r28
     2de:	df 93       	push	r29
     2e0:	d8 2f       	mov	r29, r24
     2e2:	c6 2f       	mov	r28, r22
	PORTB &= ~(1<<PB4); //slave select
     2e4:	c4 98       	cbi	0x18, 4	; 24
	
	spi_write(MCP_WRITE);
     2e6:	82 e0       	ldi	r24, 0x02	; 2
     2e8:	0e 94 b6 01 	call	0x36c	; 0x36c <spi_write>
	spi_write(address);
     2ec:	8d 2f       	mov	r24, r29
     2ee:	0e 94 b6 01 	call	0x36c	; 0x36c <spi_write>
	spi_write(data);
     2f2:	8c 2f       	mov	r24, r28
     2f4:	0e 94 b6 01 	call	0x36c	; 0x36c <spi_write>
	
	PORTB |= (1<<PB4); //slave deselect
     2f8:	c4 9a       	sbi	0x18, 4	; 24
}
     2fa:	df 91       	pop	r29
     2fc:	cf 91       	pop	r28
     2fe:	08 95       	ret

00000300 <mcp2515_request_to_send>:
void mcp2515_request_to_send(uint8_t command){
	PORTB &= ~(1<<PB4);
     300:	c4 98       	cbi	0x18, 4	; 24
	
	spi_write(command);
     302:	0e 94 b6 01 	call	0x36c	; 0x36c <spi_write>
	
	
	PORTB |= (1<<PB4);
     306:	c4 9a       	sbi	0x18, 4	; 24
     308:	08 95       	ret

0000030a <mcp2515_bit_modify>:
}
void mcp2515_bit_modify(uint8_t address, uint8_t mask, uint8_t data){
     30a:	1f 93       	push	r17
     30c:	cf 93       	push	r28
     30e:	df 93       	push	r29
     310:	18 2f       	mov	r17, r24
     312:	d6 2f       	mov	r29, r22
     314:	c4 2f       	mov	r28, r20
	PORTB &= ~(1<<PB4);
     316:	c4 98       	cbi	0x18, 4	; 24
	
	spi_write(MCP_BITMOD);
     318:	85 e0       	ldi	r24, 0x05	; 5
     31a:	0e 94 b6 01 	call	0x36c	; 0x36c <spi_write>
	spi_write(address);
     31e:	81 2f       	mov	r24, r17
     320:	0e 94 b6 01 	call	0x36c	; 0x36c <spi_write>
	spi_write(mask);
     324:	8d 2f       	mov	r24, r29
     326:	0e 94 b6 01 	call	0x36c	; 0x36c <spi_write>
	spi_write(data);
     32a:	8c 2f       	mov	r24, r28
     32c:	0e 94 b6 01 	call	0x36c	; 0x36c <spi_write>
	
	PORTB |= (1<<PB4);
     330:	c4 9a       	sbi	0x18, 4	; 24
}
     332:	df 91       	pop	r29
     334:	cf 91       	pop	r28
     336:	1f 91       	pop	r17
     338:	08 95       	ret

0000033a <mcp2515_reset>:
void mcp2515_reset(){
	PORTB &= ~(1<<PB4);
     33a:	c4 98       	cbi	0x18, 4	; 24
	
	spi_write(MCP_RESET);
     33c:	80 ec       	ldi	r24, 0xC0	; 192
     33e:	0e 94 b6 01 	call	0x36c	; 0x36c <spi_write>
	
	PORTB |= (1<<PB4);
     342:	c4 9a       	sbi	0x18, 4	; 24
     344:	08 95       	ret

00000346 <mcp2515_init>:
//MCP_CANINTF to read and clear interupts, need to clear before we can continue transmitting

uint8_t mcp2515_init(){
	uint8_t value;
	
	spi_init();
     346:	0e 94 b0 01 	call	0x360	; 0x360 <spi_init>
	mcp2515_reset();
     34a:	0e 94 9d 01 	call	0x33a	; 0x33a <mcp2515_reset>
	
	/*value = mcp2515_read(MCP_CANCTRL);
	value = MODE_LOOPBACK; */
	//mcp2515_write(MCP_CANCTRL, MODE_CONFIG); config is default after restart
	
}
     34e:	08 95       	ret

00000350 <mcp2515_read_status>:
	PORTB |= (1<<PB4);
}
uint8_t mcp2515_read_status(){
	uint8_t result;
	
	PORTB &= ~(1<<PB4);
     350:	c4 98       	cbi	0x18, 4	; 24
	
	spi_write(MCP_READ_STATUS);
     352:	80 ea       	ldi	r24, 0xA0	; 160
     354:	0e 94 b6 01 	call	0x36c	; 0x36c <spi_write>
	result = spi_read();
     358:	0e 94 ba 01 	call	0x374	; 0x374 <spi_read>
	
	
	PORTB |= (1<<PB4);
     35c:	c4 9a       	sbi	0x18, 4	; 24
	
	return result;
}
     35e:	08 95       	ret

00000360 <spi_init>:
	spi_write(0xf0);
	return SPDR;
}

void spi_init(){
	DDRB = (1<<DDB4)|(1<<DDB5)|(1<<DDB7); //chip select, mosi, clock
     360:	80 eb       	ldi	r24, 0xB0	; 176
     362:	87 bb       	out	0x17, r24	; 23
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
     364:	81 e5       	ldi	r24, 0x51	; 81
     366:	8d b9       	out	0x0d, r24	; 13
	
	PORTB |= 1<<PB4; //cooked from jentene
     368:	c4 9a       	sbi	0x18, 4	; 24
     36a:	08 95       	ret

0000036c <spi_write>:
}

void spi_write(char data){
	SPDR = data;
     36c:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF))){
     36e:	77 9b       	sbis	0x0e, 7	; 14
     370:	fe cf       	rjmp	.-4      	; 0x36e <spi_write+0x2>
		
	}
     372:	08 95       	ret

00000374 <spi_read>:



uint8_t spi_read(){
	
	spi_write(0xf0);
     374:	80 ef       	ldi	r24, 0xF0	; 240
     376:	0e 94 b6 01 	call	0x36c	; 0x36c <spi_write>
	return SPDR;
     37a:	8f b1       	in	r24, 0x0f	; 15
}
     37c:	08 95       	ret

0000037e <calc_offset>:
			return UP;
		}
		return NEUTRAL;
	}
	return WAITING;
}
     37e:	e0 e0       	ldi	r30, 0x00	; 0
     380:	f4 e1       	ldi	r31, 0x14	; 20
     382:	81 e0       	ldi	r24, 0x01	; 1
     384:	80 83       	st	Z, r24
     386:	80 81       	ld	r24, Z
     388:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <x_offset>
     38c:	80 81       	ld	r24, Z
     38e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <y_offset>
     392:	08 95       	ret

00000394 <update_adc_values>:
     394:	0f 93       	push	r16
     396:	1f 93       	push	r17
     398:	cf 93       	push	r28
     39a:	df 93       	push	r29
     39c:	8c 01       	movw	r16, r24
     39e:	eb 01       	movw	r28, r22
     3a0:	e0 e0       	ldi	r30, 0x00	; 0
     3a2:	f4 e1       	ldi	r31, 0x14	; 20
     3a4:	81 e0       	ldi	r24, 0x01	; 1
     3a6:	80 83       	st	Z, r24
     3a8:	40 81       	ld	r20, Z
     3aa:	20 81       	ld	r18, Z
     3ac:	30 81       	ld	r19, Z
     3ae:	e0 81       	ld	r30, Z
     3b0:	a0 91 0b 01 	lds	r26, 0x010B	; 0x80010b <x_offset>
     3b4:	4a 17       	cp	r20, r26
     3b6:	98 f0       	brcs	.+38     	; 0x3de <update_adc_values+0x4a>
     3b8:	b0 e0       	ldi	r27, 0x00	; 0
     3ba:	50 e0       	ldi	r21, 0x00	; 0
     3bc:	4a 1b       	sub	r20, r26
     3be:	5b 0b       	sbc	r21, r27
     3c0:	64 e6       	ldi	r22, 0x64	; 100
     3c2:	64 9f       	mul	r22, r20
     3c4:	c0 01       	movw	r24, r0
     3c6:	65 9f       	mul	r22, r21
     3c8:	90 0d       	add	r25, r0
     3ca:	11 24       	eor	r1, r1
     3cc:	6f ef       	ldi	r22, 0xFF	; 255
     3ce:	70 e0       	ldi	r23, 0x00	; 0
     3d0:	6a 1b       	sub	r22, r26
     3d2:	7b 0b       	sbc	r23, r27
     3d4:	0e 94 59 03 	call	0x6b2	; 0x6b2 <__divmodhi4>
     3d8:	d8 01       	movw	r26, r16
     3da:	6c 93       	st	X, r22
     3dc:	0f c0       	rjmp	.+30     	; 0x3fc <update_adc_values+0x68>
     3de:	6a 2f       	mov	r22, r26
     3e0:	70 e0       	ldi	r23, 0x00	; 0
     3e2:	50 e0       	ldi	r21, 0x00	; 0
     3e4:	46 1b       	sub	r20, r22
     3e6:	57 0b       	sbc	r21, r23
     3e8:	f4 e6       	ldi	r31, 0x64	; 100
     3ea:	f4 9f       	mul	r31, r20
     3ec:	c0 01       	movw	r24, r0
     3ee:	f5 9f       	mul	r31, r21
     3f0:	90 0d       	add	r25, r0
     3f2:	11 24       	eor	r1, r1
     3f4:	0e 94 59 03 	call	0x6b2	; 0x6b2 <__divmodhi4>
     3f8:	d8 01       	movw	r26, r16
     3fa:	6c 93       	st	X, r22
     3fc:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <y_offset>
     400:	26 17       	cp	r18, r22
     402:	b0 f0       	brcs	.+44     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
     404:	46 2f       	mov	r20, r22
     406:	50 e0       	ldi	r21, 0x00	; 0
     408:	62 2f       	mov	r22, r18
     40a:	70 e0       	ldi	r23, 0x00	; 0
     40c:	64 1b       	sub	r22, r20
     40e:	75 0b       	sbc	r23, r21
     410:	24 e6       	ldi	r18, 0x64	; 100
     412:	26 9f       	mul	r18, r22
     414:	c0 01       	movw	r24, r0
     416:	27 9f       	mul	r18, r23
     418:	90 0d       	add	r25, r0
     41a:	11 24       	eor	r1, r1
     41c:	6f ef       	ldi	r22, 0xFF	; 255
     41e:	70 e0       	ldi	r23, 0x00	; 0
     420:	64 1b       	sub	r22, r20
     422:	75 0b       	sbc	r23, r21
     424:	0e 94 59 03 	call	0x6b2	; 0x6b2 <__divmodhi4>
     428:	d8 01       	movw	r26, r16
     42a:	11 96       	adiw	r26, 0x01	; 1
     42c:	6c 93       	st	X, r22
     42e:	10 c0       	rjmp	.+32     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     430:	70 e0       	ldi	r23, 0x00	; 0
     432:	42 2f       	mov	r20, r18
     434:	50 e0       	ldi	r21, 0x00	; 0
     436:	46 1b       	sub	r20, r22
     438:	57 0b       	sbc	r21, r23
     43a:	24 e6       	ldi	r18, 0x64	; 100
     43c:	24 9f       	mul	r18, r20
     43e:	c0 01       	movw	r24, r0
     440:	25 9f       	mul	r18, r21
     442:	90 0d       	add	r25, r0
     444:	11 24       	eor	r1, r1
     446:	0e 94 59 03 	call	0x6b2	; 0x6b2 <__divmodhi4>
     44a:	d8 01       	movw	r26, r16
     44c:	11 96       	adiw	r26, 0x01	; 1
     44e:	6c 93       	st	X, r22
     450:	24 e6       	ldi	r18, 0x64	; 100
     452:	23 9f       	mul	r18, r19
     454:	c0 01       	movw	r24, r0
     456:	11 24       	eor	r1, r1
     458:	0f ef       	ldi	r16, 0xFF	; 255
     45a:	10 e0       	ldi	r17, 0x00	; 0
     45c:	b8 01       	movw	r22, r16
     45e:	0e 94 59 03 	call	0x6b2	; 0x6b2 <__divmodhi4>
     462:	68 83       	st	Y, r22
     464:	2e 9f       	mul	r18, r30
     466:	c0 01       	movw	r24, r0
     468:	11 24       	eor	r1, r1
     46a:	b8 01       	movw	r22, r16
     46c:	0e 94 59 03 	call	0x6b2	; 0x6b2 <__divmodhi4>
     470:	69 83       	std	Y+1, r22	; 0x01
     472:	df 91       	pop	r29
     474:	cf 91       	pop	r28
     476:	1f 91       	pop	r17
     478:	0f 91       	pop	r16
     47a:	08 95       	ret

0000047c <send_stick_can>:

void send_stick_can(){
     47c:	cf 93       	push	r28
     47e:	df 93       	push	r29
     480:	cd b7       	in	r28, 0x3d	; 61
     482:	de b7       	in	r29, 0x3e	; 62
     484:	2b 97       	sbiw	r28, 0x0b	; 11
     486:	0f b6       	in	r0, 0x3f	; 63
     488:	f8 94       	cli
     48a:	de bf       	out	0x3e, r29	; 62
     48c:	0f be       	out	0x3f, r0	; 63
     48e:	cd bf       	out	0x3d, r28	; 61
	
	update_adc_values(&joystick, &slider);
     490:	61 ec       	ldi	r22, 0xC1	; 193
     492:	71 e0       	ldi	r23, 0x01	; 1
     494:	83 ec       	ldi	r24, 0xC3	; 195
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	0e 94 ca 01 	call	0x394	; 0x394 <update_adc_values>
	
	can_message msgToSend;
	msgToSend.data_length = 8;
     49c:	88 e0       	ldi	r24, 0x08	; 8
     49e:	8b 83       	std	Y+3, r24	; 0x03
	msgToSend.data[0] = abs(joystick.x_val);
     4a0:	30 91 c3 01 	lds	r19, 0x01C3	; 0x8001c3 <joystick>
     4a4:	83 2f       	mov	r24, r19
     4a6:	03 2e       	mov	r0, r19
     4a8:	00 0c       	add	r0, r0
     4aa:	99 0b       	sbc	r25, r25
     4ac:	99 23       	and	r25, r25
     4ae:	1c f4       	brge	.+6      	; 0x4b6 <send_stick_can+0x3a>
     4b0:	91 95       	neg	r25
     4b2:	81 95       	neg	r24
     4b4:	91 09       	sbc	r25, r1
     4b6:	8c 83       	std	Y+4, r24	; 0x04
	msgToSend.data[1] = abs(joystick.y_val);
     4b8:	20 91 c4 01 	lds	r18, 0x01C4	; 0x8001c4 <joystick+0x1>
     4bc:	82 2f       	mov	r24, r18
     4be:	02 2e       	mov	r0, r18
     4c0:	00 0c       	add	r0, r0
     4c2:	99 0b       	sbc	r25, r25
     4c4:	99 23       	and	r25, r25
     4c6:	1c f4       	brge	.+6      	; 0x4ce <send_stick_can+0x52>
     4c8:	91 95       	neg	r25
     4ca:	81 95       	neg	r24
     4cc:	91 09       	sbc	r25, r1
     4ce:	8d 83       	std	Y+5, r24	; 0x05
	msgToSend.data[2] = PINB & (1<< PINB1); // button pressed?
     4d0:	86 b3       	in	r24, 0x16	; 22
     4d2:	82 70       	andi	r24, 0x02	; 2
     4d4:	8e 83       	std	Y+6, r24	; 0x06
	
	uint8_t x_positive = (joystick.x_val < 0) ? 0x00 : 0x11;
     4d6:	33 23       	and	r19, r19
     4d8:	14 f0       	brlt	.+4      	; 0x4de <send_stick_can+0x62>
     4da:	81 e1       	ldi	r24, 0x11	; 17
     4dc:	01 c0       	rjmp	.+2      	; 0x4e0 <send_stick_can+0x64>
     4de:	80 e0       	ldi	r24, 0x00	; 0
	uint8_t y_positive = (joystick.y_val < 0) ? 0x00 : 0x11;
     4e0:	22 23       	and	r18, r18
     4e2:	14 f0       	brlt	.+4      	; 0x4e8 <send_stick_can+0x6c>
     4e4:	91 e1       	ldi	r25, 0x11	; 17
     4e6:	01 c0       	rjmp	.+2      	; 0x4ea <send_stick_can+0x6e>
     4e8:	90 e0       	ldi	r25, 0x00	; 0
	
	msgToSend.data[3] = x_positive;
     4ea:	8f 83       	std	Y+7, r24	; 0x07
	msgToSend.data[4] = y_positive;
     4ec:	98 87       	std	Y+8, r25	; 0x08
	msgToSend.data[5] = slider.l_val;
     4ee:	e1 ec       	ldi	r30, 0xC1	; 193
     4f0:	f1 e0       	ldi	r31, 0x01	; 1
     4f2:	80 81       	ld	r24, Z
     4f4:	89 87       	std	Y+9, r24	; 0x09
	msgToSend.data[6] = slider.r_val;
     4f6:	81 81       	ldd	r24, Z+1	; 0x01
     4f8:	8a 87       	std	Y+10, r24	; 0x0a
	msgToSend.data[7] = (PIND & (1<< PIND4)) >> 3 | (PIND & (1<< PIND5)) >> 5; //left and right button on second least significant and least significant
     4fa:	80 b3       	in	r24, 0x10	; 16
     4fc:	20 b3       	in	r18, 0x10	; 16
     4fe:	80 71       	andi	r24, 0x10	; 16
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	95 95       	asr	r25
     504:	87 95       	ror	r24
     506:	95 95       	asr	r25
     508:	87 95       	ror	r24
     50a:	95 95       	asr	r25
     50c:	87 95       	ror	r24
     50e:	25 fb       	bst	r18, 5
     510:	99 27       	eor	r25, r25
     512:	90 f9       	bld	r25, 0
     514:	89 2b       	or	r24, r25
     516:	8b 87       	std	Y+11, r24	; 0x0b
// 	printf("button data: %d \n\r",msgToSend.data[7]);
 	//printf("button data: %d \n\r",msgToSend.data[5]);
	 
	
	msgToSend.id = 0x0016;
     518:	86 e1       	ldi	r24, 0x16	; 22
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	9a 83       	std	Y+2, r25	; 0x02
     51e:	89 83       	std	Y+1, r24	; 0x01
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     520:	8f ef       	ldi	r24, 0xFF	; 255
     522:	9f e5       	ldi	r25, 0x5F	; 95
     524:	01 97       	sbiw	r24, 0x01	; 1
     526:	f1 f7       	brne	.-4      	; 0x524 <__stack+0x25>
     528:	00 c0       	rjmp	.+0      	; 0x52a <__stack+0x2b>
     52a:	00 00       	nop
	_delay_ms(20);
	send_can_msg(&msgToSend);
     52c:	ce 01       	movw	r24, r28
     52e:	01 96       	adiw	r24, 0x01	; 1
     530:	0e 94 94 00 	call	0x128	; 0x128 <send_can_msg>
	
     534:	2b 96       	adiw	r28, 0x0b	; 11
     536:	0f b6       	in	r0, 0x3f	; 63
     538:	f8 94       	cli
     53a:	de bf       	out	0x3e, r29	; 62
     53c:	0f be       	out	0x3f, r0	; 63
     53e:	cd bf       	out	0x3d, r28	; 61
     540:	df 91       	pop	r29
     542:	cf 91       	pop	r28
     544:	08 95       	ret

00000546 <main>:
	
//  	joyVal joystick; 
//  	sliderVal slider; 
//	volatile amap* atmelMap = (amap*) BASE;
	
	USART_Init ( MYUBRR );
     546:	8f e1       	ldi	r24, 0x1F	; 31
     548:	90 e0       	ldi	r25, 0x00	; 0
     54a:	0e 94 49 03 	call	0x692	; 0x692 <USART_Init>
	
	//enable external memory interface
	MCUCR |= (1<<SRE);
     54e:	85 b7       	in	r24, 0x35	; 53
     550:	80 68       	ori	r24, 0x80	; 128
     552:	85 bf       	out	0x35, r24	; 53
	
	//select which c pins on atmega to be released for normal use, the rest is used for high address bytes
	SFIOR &= ~(1<<XMM0);
     554:	80 b7       	in	r24, 0x30	; 48
     556:	87 7f       	andi	r24, 0xF7	; 247
     558:	80 bf       	out	0x30, r24	; 48
	SFIOR &= ~(1<<XMM1);
     55a:	80 b7       	in	r24, 0x30	; 48
     55c:	8f 7e       	andi	r24, 0xEF	; 239
     55e:	80 bf       	out	0x30, r24	; 48
	SFIOR |= (1<<XMM2);
     560:	80 b7       	in	r24, 0x30	; 48
     562:	80 62       	ori	r24, 0x20	; 32
     564:	80 bf       	out	0x30, r24	; 48
	
	DDRA |= 0x18;
     566:	8a b3       	in	r24, 0x1a	; 26
     568:	88 61       	ori	r24, 0x18	; 24
     56a:	8a bb       	out	0x1a, r24	; 26
	
	
	
	can_init();
     56c:	0e 94 7a 00 	call	0xf4	; 0xf4 <can_init>
	TCCR2 |= (1<<COM21);
	TCCR2 |= (1<<COM20);
	*/

	
	SRAM_test(); _delay_ms(1000);
     570:	0e 94 f5 02 	call	0x5ea	; 0x5ea <SRAM_test>
     574:	2f ef       	ldi	r18, 0xFF	; 255
     576:	8f ef       	ldi	r24, 0xFF	; 255
     578:	9e e0       	ldi	r25, 0x0E	; 14
     57a:	21 50       	subi	r18, 0x01	; 1
     57c:	80 40       	sbci	r24, 0x00	; 0
     57e:	90 40       	sbci	r25, 0x00	; 0
     580:	e1 f7       	brne	.-8      	; 0x57a <main+0x34>
     582:	00 c0       	rjmp	.+0      	; 0x584 <main+0x3e>
     584:	00 00       	nop
	can_init();
     586:	0e 94 7a 00 	call	0xf4	; 0xf4 <can_init>
		
	//Check if the whole thing just works from up here:
	
	
		
	go_to_line(7);
     58a:	87 e0       	ldi	r24, 0x07	; 7
     58c:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <go_to_line>
     590:	cc e5       	ldi	r28, 0x5C	; 92
     592:	d0 e0       	ldi	r29, 0x00	; 0
	//oled_write_string(0," Kongeriget Norge er et frit, uafhaengigt og udeleligt Rige. Dets Regjeringsform er indskraenket og arvelig-monarkisk.", 8);
	//character_printer(wojak, 64, 40);
	//_delay_ms(60000);

	for(int i = 0; i < 92; i++){
		printf("\n");
     594:	8a e0       	ldi	r24, 0x0A	; 10
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	0e 94 5f 05 	call	0xabe	; 0xabe <putchar>
     59c:	21 97       	sbiw	r28, 0x01	; 1
	go_to_line(7);
	//oled_write_string(0," Kongeriget Norge er et frit, uafhaengigt og udeleligt Rige. Dets Regjeringsform er indskraenket og arvelig-monarkisk.", 8);
	//character_printer(wojak, 64, 40);
	//_delay_ms(60000);

	for(int i = 0; i < 92; i++){
     59e:	d1 f7       	brne	.-12     	; 0x594 <main+0x4e>
			_delay_ms(5000);
		}
	}*/
	
	
	can_interrupt_enable();
     5a0:	0e 94 6e 00 	call	0xdc	; 0xdc <can_interrupt_enable>
	can_message* receivedMsg;
	
	calc_offset();
     5a4:	0e 94 bf 01 	call	0x37e	; 0x37e <calc_offset>


		if(can_interrupted()){
			receivedMsg = receive_can_msg(0);
			uint8_t myTime = receivedMsg->data[0];
			printf("time running: %d", myTime);
     5a8:	c4 e3       	ldi	r28, 0x34	; 52
     5aa:	d1 e0       	ldi	r29, 0x01	; 1
	while(1){
		// CAN BUS TEST
		//msgToReceive = receive_can_msg(0);
		//_delay_ms(5000);
		//send_can_msg(&msgToSend);
		send_stick_can();
     5ac:	0e 94 3e 02 	call	0x47c	; 0x47c <send_stick_can>
     5b0:	e0 e0       	ldi	r30, 0x00	; 0
     5b2:	f0 ef       	ldi	r31, 0xF0	; 240
     5b4:	31 97       	sbiw	r30, 0x01	; 1
     5b6:	f1 f7       	brne	.-4      	; 0x5b4 <main+0x6e>
		_delay_ms(50);


		if(can_interrupted()){
     5b8:	0e 94 66 00 	call	0xcc	; 0xcc <can_interrupted>
     5bc:	88 23       	and	r24, r24
     5be:	b1 f3       	breq	.-20     	; 0x5ac <main+0x66>
			receivedMsg = receive_can_msg(0);
     5c0:	80 e0       	ldi	r24, 0x00	; 0
     5c2:	0e 94 08 01 	call	0x210	; 0x210 <receive_can_msg>
			uint8_t myTime = receivedMsg->data[0];
			printf("time running: %d", myTime);
     5c6:	fc 01       	movw	r30, r24
     5c8:	83 81       	ldd	r24, Z+3	; 0x03
     5ca:	1f 92       	push	r1
     5cc:	8f 93       	push	r24
     5ce:	df 93       	push	r29
     5d0:	cf 93       	push	r28
     5d2:	0e 94 49 05 	call	0xa92	; 0xa92 <printf>
     5d6:	0f 90       	pop	r0
     5d8:	0f 90       	pop	r0
     5da:	0f 90       	pop	r0
     5dc:	0f 90       	pop	r0
     5de:	e6 cf       	rjmp	.-52     	; 0x5ac <main+0x66>

000005e0 <go_to_line>:
     5e0:	87 70       	andi	r24, 0x07	; 7
     5e2:	80 55       	subi	r24, 0x50	; 80
     5e4:	80 93 00 10 	sts	0x1000, r24	; 0x801000 <__bss_end+0xe31>
     5e8:	08 95       	ret

000005ea <SRAM_test>:
#include "sram_test.h"
    void SRAM_test(void)
    {
     5ea:	ef 92       	push	r14
     5ec:	ff 92       	push	r15
     5ee:	0f 93       	push	r16
     5f0:	1f 93       	push	r17
     5f2:	cf 93       	push	r28
     5f4:	df 93       	push	r29
		volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
        uint16_t ext_ram_size = 0x800;
        uint16_t write_errors = 0;
        uint16_t retrieval_errors = 0;
        printf("Starting SRAM test...\n");
     5f6:	85 e4       	ldi	r24, 0x45	; 69
     5f8:	91 e0       	ldi	r25, 0x01	; 1
     5fa:	0e 94 66 05 	call	0xacc	; 0xacc <puts>
        // rand() stores some internal state, so calling this function in a loop will
        // yield different seeds each time (unless srand() is called before this function)
        uint16_t seed = rand();
     5fe:	0e 94 ee 04 	call	0x9dc	; 0x9dc <rand>
     602:	7c 01       	movw	r14, r24
        // Write phase: Immediately check that the correct value was stored
        srand(seed);
     604:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <srand>
     608:	c0 e0       	ldi	r28, 0x00	; 0
     60a:	d8 e1       	ldi	r29, 0x18	; 24
#include "sram_test.h"
    void SRAM_test(void)
    {
		volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
        uint16_t ext_ram_size = 0x800;
        uint16_t write_errors = 0;
     60c:	00 e0       	ldi	r16, 0x00	; 0
     60e:	10 e0       	ldi	r17, 0x00	; 0
        // yield different seeds each time (unless srand() is called before this function)
        uint16_t seed = rand();
        // Write phase: Immediately check that the correct value was stored
        srand(seed);
        for (uint16_t i = 0; i < ext_ram_size; i++) {
            uint8_t some_value = rand();
     610:	0e 94 ee 04 	call	0x9dc	; 0x9dc <rand>
            ext_ram[i] = some_value;
     614:	88 83       	st	Y, r24
            uint8_t retreived_value = ext_ram[i];
     616:	98 81       	ld	r25, Y
            if (retreived_value != some_value) {
     618:	89 17       	cp	r24, r25
     61a:	11 f0       	breq	.+4      	; 0x620 <SRAM_test+0x36>
                //printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
                write_errors++;
     61c:	0f 5f       	subi	r16, 0xFF	; 255
     61e:	1f 4f       	sbci	r17, 0xFF	; 255
     620:	21 96       	adiw	r28, 0x01	; 1
        // rand() stores some internal state, so calling this function in a loop will
        // yield different seeds each time (unless srand() is called before this function)
        uint16_t seed = rand();
        // Write phase: Immediately check that the correct value was stored
        srand(seed);
        for (uint16_t i = 0; i < ext_ram_size; i++) {
     622:	c1 15       	cp	r28, r1
     624:	80 e2       	ldi	r24, 0x20	; 32
     626:	d8 07       	cpc	r29, r24
     628:	99 f7       	brne	.-26     	; 0x610 <SRAM_test+0x26>
                //printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
                write_errors++;
            }
        }
        // Retrieval phase: Check that no values were changed during or after the write phase
        srand(seed);
     62a:	c7 01       	movw	r24, r14
     62c:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <srand>
     630:	c0 e0       	ldi	r28, 0x00	; 0
     632:	d8 e1       	ldi	r29, 0x18	; 24
    void SRAM_test(void)
    {
		volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
        uint16_t ext_ram_size = 0x800;
        uint16_t write_errors = 0;
        uint16_t retrieval_errors = 0;
     634:	e1 2c       	mov	r14, r1
     636:	f1 2c       	mov	r15, r1
        }
        // Retrieval phase: Check that no values were changed during or after the write phase
        srand(seed);
        // reset the PRNG to the state it had before the write phase
        for (uint16_t i = 0; i < ext_ram_size; i++) {
            uint8_t some_value = rand();
     638:	0e 94 ee 04 	call	0x9dc	; 0x9dc <rand>
            uint8_t retreived_value = ext_ram[i];
     63c:	98 81       	ld	r25, Y
            if (retreived_value != some_value) {
     63e:	98 17       	cp	r25, r24
     640:	19 f0       	breq	.+6      	; 0x648 <SRAM_test+0x5e>
               // printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
                retrieval_errors++;
     642:	8f ef       	ldi	r24, 0xFF	; 255
     644:	e8 1a       	sub	r14, r24
     646:	f8 0a       	sbc	r15, r24
     648:	21 96       	adiw	r28, 0x01	; 1
            }
        }
        // Retrieval phase: Check that no values were changed during or after the write phase
        srand(seed);
        // reset the PRNG to the state it had before the write phase
        for (uint16_t i = 0; i < ext_ram_size; i++) {
     64a:	c1 15       	cp	r28, r1
     64c:	80 e2       	ldi	r24, 0x20	; 32
     64e:	d8 07       	cpc	r29, r24
     650:	99 f7       	brne	.-26     	; 0x638 <SRAM_test+0x4e>
            if (retreived_value != some_value) {
               // printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
                retrieval_errors++;
            }
        }
        printf("SRAM test completed with \n%4d errors in write phase and \n%4d errors in retrieval phase\n\n", write_errors, retrieval_errors);
     652:	ff 92       	push	r15
     654:	ef 92       	push	r14
     656:	1f 93       	push	r17
     658:	0f 93       	push	r16
     65a:	8b e5       	ldi	r24, 0x5B	; 91
     65c:	91 e0       	ldi	r25, 0x01	; 1
     65e:	9f 93       	push	r25
     660:	8f 93       	push	r24
     662:	0e 94 49 05 	call	0xa92	; 0xa92 <printf>
     666:	0f 90       	pop	r0
     668:	0f 90       	pop	r0
     66a:	0f 90       	pop	r0
     66c:	0f 90       	pop	r0
     66e:	0f 90       	pop	r0
     670:	0f 90       	pop	r0
     672:	df 91       	pop	r29
     674:	cf 91       	pop	r28
     676:	1f 91       	pop	r17
     678:	0f 91       	pop	r16
     67a:	ff 90       	pop	r15
     67c:	ef 90       	pop	r14
     67e:	08 95       	ret

00000680 <USART_Transmit>:
	UCSR1C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
	clear_bit(UCSR0C, 0); // Clock polarity
	fdevopen(USART_Transmit, USART_Receive);
}
void USART_Transmit(unsigned char data){
	while (!(UCSR0A & (1<<UDRE0)));
     680:	5d 9b       	sbis	0x0b, 5	; 11
     682:	fe cf       	rjmp	.-4      	; 0x680 <USART_Transmit>
	
	UDR0 = data;
     684:	8c b9       	out	0x0c, r24	; 12
     686:	08 95       	ret

00000688 <USART_Receive>:
}

unsigned int USART_Receive(void)
{
	
	while (!(UCSR0A & (1<<RXC0)));
     688:	5f 9b       	sbis	0x0b, 7	; 11
     68a:	fe cf       	rjmp	.-4      	; 0x688 <USART_Receive>
	

	return UDR0;
     68c:	8c b1       	in	r24, 0x0c	; 12
     68e:	90 e0       	ldi	r25, 0x00	; 0
     690:	08 95       	ret

00000692 <USART_Init>:
#include <stdio.h>
#define clear_bit( reg, bit ) (reg &= ~(1 << bit))

void USART_Init (unsigned int ubrr ){
	
	UBRR0H = (unsigned char)(ubrr>>8);
     692:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)ubrr;
     694:	89 b9       	out	0x09, r24	; 9
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     696:	88 e1       	ldi	r24, 0x18	; 24
     698:	8a b9       	out	0x0a, r24	; 10
	
	UCSR1C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
     69a:	8e e8       	ldi	r24, 0x8E	; 142
     69c:	8c bf       	out	0x3c, r24	; 60
	clear_bit(UCSR0C, 0); // Clock polarity
     69e:	80 b5       	in	r24, 0x20	; 32
     6a0:	8e 7f       	andi	r24, 0xFE	; 254
     6a2:	80 bd       	out	0x20, r24	; 32
	fdevopen(USART_Transmit, USART_Receive);
     6a4:	64 e4       	ldi	r22, 0x44	; 68
     6a6:	73 e0       	ldi	r23, 0x03	; 3
     6a8:	80 e4       	ldi	r24, 0x40	; 64
     6aa:	93 e0       	ldi	r25, 0x03	; 3
     6ac:	0e 94 fe 04 	call	0x9fc	; 0x9fc <fdevopen>
     6b0:	08 95       	ret

000006b2 <__divmodhi4>:
     6b2:	97 fb       	bst	r25, 7
     6b4:	07 2e       	mov	r0, r23
     6b6:	16 f4       	brtc	.+4      	; 0x6bc <__divmodhi4+0xa>
     6b8:	00 94       	com	r0
     6ba:	07 d0       	rcall	.+14     	; 0x6ca <__divmodhi4_neg1>
     6bc:	77 fd       	sbrc	r23, 7
     6be:	09 d0       	rcall	.+18     	; 0x6d2 <__divmodhi4_neg2>
     6c0:	0e 94 6d 03 	call	0x6da	; 0x6da <__udivmodhi4>
     6c4:	07 fc       	sbrc	r0, 7
     6c6:	05 d0       	rcall	.+10     	; 0x6d2 <__divmodhi4_neg2>
     6c8:	3e f4       	brtc	.+14     	; 0x6d8 <__divmodhi4_exit>

000006ca <__divmodhi4_neg1>:
     6ca:	90 95       	com	r25
     6cc:	81 95       	neg	r24
     6ce:	9f 4f       	sbci	r25, 0xFF	; 255
     6d0:	08 95       	ret

000006d2 <__divmodhi4_neg2>:
     6d2:	70 95       	com	r23
     6d4:	61 95       	neg	r22
     6d6:	7f 4f       	sbci	r23, 0xFF	; 255

000006d8 <__divmodhi4_exit>:
     6d8:	08 95       	ret

000006da <__udivmodhi4>:
     6da:	aa 1b       	sub	r26, r26
     6dc:	bb 1b       	sub	r27, r27
     6de:	51 e1       	ldi	r21, 0x11	; 17
     6e0:	07 c0       	rjmp	.+14     	; 0x6f0 <__udivmodhi4_ep>

000006e2 <__udivmodhi4_loop>:
     6e2:	aa 1f       	adc	r26, r26
     6e4:	bb 1f       	adc	r27, r27
     6e6:	a6 17       	cp	r26, r22
     6e8:	b7 07       	cpc	r27, r23
     6ea:	10 f0       	brcs	.+4      	; 0x6f0 <__udivmodhi4_ep>
     6ec:	a6 1b       	sub	r26, r22
     6ee:	b7 0b       	sbc	r27, r23

000006f0 <__udivmodhi4_ep>:
     6f0:	88 1f       	adc	r24, r24
     6f2:	99 1f       	adc	r25, r25
     6f4:	5a 95       	dec	r21
     6f6:	a9 f7       	brne	.-22     	; 0x6e2 <__udivmodhi4_loop>
     6f8:	80 95       	com	r24
     6fa:	90 95       	com	r25
     6fc:	bc 01       	movw	r22, r24
     6fe:	cd 01       	movw	r24, r26
     700:	08 95       	ret

00000702 <malloc>:
     702:	0f 93       	push	r16
     704:	1f 93       	push	r17
     706:	cf 93       	push	r28
     708:	df 93       	push	r29
     70a:	82 30       	cpi	r24, 0x02	; 2
     70c:	91 05       	cpc	r25, r1
     70e:	10 f4       	brcc	.+4      	; 0x714 <malloc+0x12>
     710:	82 e0       	ldi	r24, 0x02	; 2
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	e0 91 c7 01 	lds	r30, 0x01C7	; 0x8001c7 <__flp>
     718:	f0 91 c8 01 	lds	r31, 0x01C8	; 0x8001c8 <__flp+0x1>
     71c:	20 e0       	ldi	r18, 0x00	; 0
     71e:	30 e0       	ldi	r19, 0x00	; 0
     720:	a0 e0       	ldi	r26, 0x00	; 0
     722:	b0 e0       	ldi	r27, 0x00	; 0
     724:	30 97       	sbiw	r30, 0x00	; 0
     726:	19 f1       	breq	.+70     	; 0x76e <malloc+0x6c>
     728:	40 81       	ld	r20, Z
     72a:	51 81       	ldd	r21, Z+1	; 0x01
     72c:	02 81       	ldd	r16, Z+2	; 0x02
     72e:	13 81       	ldd	r17, Z+3	; 0x03
     730:	48 17       	cp	r20, r24
     732:	59 07       	cpc	r21, r25
     734:	c8 f0       	brcs	.+50     	; 0x768 <malloc+0x66>
     736:	84 17       	cp	r24, r20
     738:	95 07       	cpc	r25, r21
     73a:	69 f4       	brne	.+26     	; 0x756 <malloc+0x54>
     73c:	10 97       	sbiw	r26, 0x00	; 0
     73e:	31 f0       	breq	.+12     	; 0x74c <malloc+0x4a>
     740:	12 96       	adiw	r26, 0x02	; 2
     742:	0c 93       	st	X, r16
     744:	12 97       	sbiw	r26, 0x02	; 2
     746:	13 96       	adiw	r26, 0x03	; 3
     748:	1c 93       	st	X, r17
     74a:	27 c0       	rjmp	.+78     	; 0x79a <malloc+0x98>
     74c:	00 93 c7 01 	sts	0x01C7, r16	; 0x8001c7 <__flp>
     750:	10 93 c8 01 	sts	0x01C8, r17	; 0x8001c8 <__flp+0x1>
     754:	22 c0       	rjmp	.+68     	; 0x79a <malloc+0x98>
     756:	21 15       	cp	r18, r1
     758:	31 05       	cpc	r19, r1
     75a:	19 f0       	breq	.+6      	; 0x762 <malloc+0x60>
     75c:	42 17       	cp	r20, r18
     75e:	53 07       	cpc	r21, r19
     760:	18 f4       	brcc	.+6      	; 0x768 <malloc+0x66>
     762:	9a 01       	movw	r18, r20
     764:	bd 01       	movw	r22, r26
     766:	ef 01       	movw	r28, r30
     768:	df 01       	movw	r26, r30
     76a:	f8 01       	movw	r30, r16
     76c:	db cf       	rjmp	.-74     	; 0x724 <malloc+0x22>
     76e:	21 15       	cp	r18, r1
     770:	31 05       	cpc	r19, r1
     772:	f9 f0       	breq	.+62     	; 0x7b2 <malloc+0xb0>
     774:	28 1b       	sub	r18, r24
     776:	39 0b       	sbc	r19, r25
     778:	24 30       	cpi	r18, 0x04	; 4
     77a:	31 05       	cpc	r19, r1
     77c:	80 f4       	brcc	.+32     	; 0x79e <malloc+0x9c>
     77e:	8a 81       	ldd	r24, Y+2	; 0x02
     780:	9b 81       	ldd	r25, Y+3	; 0x03
     782:	61 15       	cp	r22, r1
     784:	71 05       	cpc	r23, r1
     786:	21 f0       	breq	.+8      	; 0x790 <malloc+0x8e>
     788:	fb 01       	movw	r30, r22
     78a:	93 83       	std	Z+3, r25	; 0x03
     78c:	82 83       	std	Z+2, r24	; 0x02
     78e:	04 c0       	rjmp	.+8      	; 0x798 <malloc+0x96>
     790:	90 93 c8 01 	sts	0x01C8, r25	; 0x8001c8 <__flp+0x1>
     794:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <__flp>
     798:	fe 01       	movw	r30, r28
     79a:	32 96       	adiw	r30, 0x02	; 2
     79c:	44 c0       	rjmp	.+136    	; 0x826 <malloc+0x124>
     79e:	fe 01       	movw	r30, r28
     7a0:	e2 0f       	add	r30, r18
     7a2:	f3 1f       	adc	r31, r19
     7a4:	81 93       	st	Z+, r24
     7a6:	91 93       	st	Z+, r25
     7a8:	22 50       	subi	r18, 0x02	; 2
     7aa:	31 09       	sbc	r19, r1
     7ac:	39 83       	std	Y+1, r19	; 0x01
     7ae:	28 83       	st	Y, r18
     7b0:	3a c0       	rjmp	.+116    	; 0x826 <malloc+0x124>
     7b2:	20 91 c5 01 	lds	r18, 0x01C5	; 0x8001c5 <__brkval>
     7b6:	30 91 c6 01 	lds	r19, 0x01C6	; 0x8001c6 <__brkval+0x1>
     7ba:	23 2b       	or	r18, r19
     7bc:	41 f4       	brne	.+16     	; 0x7ce <malloc+0xcc>
     7be:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
     7c2:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
     7c6:	30 93 c6 01 	sts	0x01C6, r19	; 0x8001c6 <__brkval+0x1>
     7ca:	20 93 c5 01 	sts	0x01C5, r18	; 0x8001c5 <__brkval>
     7ce:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     7d2:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
     7d6:	21 15       	cp	r18, r1
     7d8:	31 05       	cpc	r19, r1
     7da:	41 f4       	brne	.+16     	; 0x7ec <malloc+0xea>
     7dc:	2d b7       	in	r18, 0x3d	; 61
     7de:	3e b7       	in	r19, 0x3e	; 62
     7e0:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
     7e4:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
     7e8:	24 1b       	sub	r18, r20
     7ea:	35 0b       	sbc	r19, r21
     7ec:	e0 91 c5 01 	lds	r30, 0x01C5	; 0x8001c5 <__brkval>
     7f0:	f0 91 c6 01 	lds	r31, 0x01C6	; 0x8001c6 <__brkval+0x1>
     7f4:	e2 17       	cp	r30, r18
     7f6:	f3 07       	cpc	r31, r19
     7f8:	a0 f4       	brcc	.+40     	; 0x822 <malloc+0x120>
     7fa:	2e 1b       	sub	r18, r30
     7fc:	3f 0b       	sbc	r19, r31
     7fe:	28 17       	cp	r18, r24
     800:	39 07       	cpc	r19, r25
     802:	78 f0       	brcs	.+30     	; 0x822 <malloc+0x120>
     804:	ac 01       	movw	r20, r24
     806:	4e 5f       	subi	r20, 0xFE	; 254
     808:	5f 4f       	sbci	r21, 0xFF	; 255
     80a:	24 17       	cp	r18, r20
     80c:	35 07       	cpc	r19, r21
     80e:	48 f0       	brcs	.+18     	; 0x822 <malloc+0x120>
     810:	4e 0f       	add	r20, r30
     812:	5f 1f       	adc	r21, r31
     814:	50 93 c6 01 	sts	0x01C6, r21	; 0x8001c6 <__brkval+0x1>
     818:	40 93 c5 01 	sts	0x01C5, r20	; 0x8001c5 <__brkval>
     81c:	81 93       	st	Z+, r24
     81e:	91 93       	st	Z+, r25
     820:	02 c0       	rjmp	.+4      	; 0x826 <malloc+0x124>
     822:	e0 e0       	ldi	r30, 0x00	; 0
     824:	f0 e0       	ldi	r31, 0x00	; 0
     826:	cf 01       	movw	r24, r30
     828:	df 91       	pop	r29
     82a:	cf 91       	pop	r28
     82c:	1f 91       	pop	r17
     82e:	0f 91       	pop	r16
     830:	08 95       	ret

00000832 <free>:
     832:	cf 93       	push	r28
     834:	df 93       	push	r29
     836:	00 97       	sbiw	r24, 0x00	; 0
     838:	09 f4       	brne	.+2      	; 0x83c <free+0xa>
     83a:	81 c0       	rjmp	.+258    	; 0x93e <free+0x10c>
     83c:	fc 01       	movw	r30, r24
     83e:	32 97       	sbiw	r30, 0x02	; 2
     840:	13 82       	std	Z+3, r1	; 0x03
     842:	12 82       	std	Z+2, r1	; 0x02
     844:	a0 91 c7 01 	lds	r26, 0x01C7	; 0x8001c7 <__flp>
     848:	b0 91 c8 01 	lds	r27, 0x01C8	; 0x8001c8 <__flp+0x1>
     84c:	10 97       	sbiw	r26, 0x00	; 0
     84e:	81 f4       	brne	.+32     	; 0x870 <free+0x3e>
     850:	20 81       	ld	r18, Z
     852:	31 81       	ldd	r19, Z+1	; 0x01
     854:	82 0f       	add	r24, r18
     856:	93 1f       	adc	r25, r19
     858:	20 91 c5 01 	lds	r18, 0x01C5	; 0x8001c5 <__brkval>
     85c:	30 91 c6 01 	lds	r19, 0x01C6	; 0x8001c6 <__brkval+0x1>
     860:	28 17       	cp	r18, r24
     862:	39 07       	cpc	r19, r25
     864:	51 f5       	brne	.+84     	; 0x8ba <free+0x88>
     866:	f0 93 c6 01 	sts	0x01C6, r31	; 0x8001c6 <__brkval+0x1>
     86a:	e0 93 c5 01 	sts	0x01C5, r30	; 0x8001c5 <__brkval>
     86e:	67 c0       	rjmp	.+206    	; 0x93e <free+0x10c>
     870:	ed 01       	movw	r28, r26
     872:	20 e0       	ldi	r18, 0x00	; 0
     874:	30 e0       	ldi	r19, 0x00	; 0
     876:	ce 17       	cp	r28, r30
     878:	df 07       	cpc	r29, r31
     87a:	40 f4       	brcc	.+16     	; 0x88c <free+0x5a>
     87c:	4a 81       	ldd	r20, Y+2	; 0x02
     87e:	5b 81       	ldd	r21, Y+3	; 0x03
     880:	9e 01       	movw	r18, r28
     882:	41 15       	cp	r20, r1
     884:	51 05       	cpc	r21, r1
     886:	f1 f0       	breq	.+60     	; 0x8c4 <free+0x92>
     888:	ea 01       	movw	r28, r20
     88a:	f5 cf       	rjmp	.-22     	; 0x876 <free+0x44>
     88c:	d3 83       	std	Z+3, r29	; 0x03
     88e:	c2 83       	std	Z+2, r28	; 0x02
     890:	40 81       	ld	r20, Z
     892:	51 81       	ldd	r21, Z+1	; 0x01
     894:	84 0f       	add	r24, r20
     896:	95 1f       	adc	r25, r21
     898:	c8 17       	cp	r28, r24
     89a:	d9 07       	cpc	r29, r25
     89c:	59 f4       	brne	.+22     	; 0x8b4 <free+0x82>
     89e:	88 81       	ld	r24, Y
     8a0:	99 81       	ldd	r25, Y+1	; 0x01
     8a2:	84 0f       	add	r24, r20
     8a4:	95 1f       	adc	r25, r21
     8a6:	02 96       	adiw	r24, 0x02	; 2
     8a8:	91 83       	std	Z+1, r25	; 0x01
     8aa:	80 83       	st	Z, r24
     8ac:	8a 81       	ldd	r24, Y+2	; 0x02
     8ae:	9b 81       	ldd	r25, Y+3	; 0x03
     8b0:	93 83       	std	Z+3, r25	; 0x03
     8b2:	82 83       	std	Z+2, r24	; 0x02
     8b4:	21 15       	cp	r18, r1
     8b6:	31 05       	cpc	r19, r1
     8b8:	29 f4       	brne	.+10     	; 0x8c4 <free+0x92>
     8ba:	f0 93 c8 01 	sts	0x01C8, r31	; 0x8001c8 <__flp+0x1>
     8be:	e0 93 c7 01 	sts	0x01C7, r30	; 0x8001c7 <__flp>
     8c2:	3d c0       	rjmp	.+122    	; 0x93e <free+0x10c>
     8c4:	e9 01       	movw	r28, r18
     8c6:	fb 83       	std	Y+3, r31	; 0x03
     8c8:	ea 83       	std	Y+2, r30	; 0x02
     8ca:	49 91       	ld	r20, Y+
     8cc:	59 91       	ld	r21, Y+
     8ce:	c4 0f       	add	r28, r20
     8d0:	d5 1f       	adc	r29, r21
     8d2:	ec 17       	cp	r30, r28
     8d4:	fd 07       	cpc	r31, r29
     8d6:	61 f4       	brne	.+24     	; 0x8f0 <free+0xbe>
     8d8:	80 81       	ld	r24, Z
     8da:	91 81       	ldd	r25, Z+1	; 0x01
     8dc:	84 0f       	add	r24, r20
     8de:	95 1f       	adc	r25, r21
     8e0:	02 96       	adiw	r24, 0x02	; 2
     8e2:	e9 01       	movw	r28, r18
     8e4:	99 83       	std	Y+1, r25	; 0x01
     8e6:	88 83       	st	Y, r24
     8e8:	82 81       	ldd	r24, Z+2	; 0x02
     8ea:	93 81       	ldd	r25, Z+3	; 0x03
     8ec:	9b 83       	std	Y+3, r25	; 0x03
     8ee:	8a 83       	std	Y+2, r24	; 0x02
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	12 96       	adiw	r26, 0x02	; 2
     8f6:	8d 91       	ld	r24, X+
     8f8:	9c 91       	ld	r25, X
     8fa:	13 97       	sbiw	r26, 0x03	; 3
     8fc:	00 97       	sbiw	r24, 0x00	; 0
     8fe:	19 f0       	breq	.+6      	; 0x906 <free+0xd4>
     900:	fd 01       	movw	r30, r26
     902:	dc 01       	movw	r26, r24
     904:	f7 cf       	rjmp	.-18     	; 0x8f4 <free+0xc2>
     906:	8d 91       	ld	r24, X+
     908:	9c 91       	ld	r25, X
     90a:	11 97       	sbiw	r26, 0x01	; 1
     90c:	9d 01       	movw	r18, r26
     90e:	2e 5f       	subi	r18, 0xFE	; 254
     910:	3f 4f       	sbci	r19, 0xFF	; 255
     912:	82 0f       	add	r24, r18
     914:	93 1f       	adc	r25, r19
     916:	20 91 c5 01 	lds	r18, 0x01C5	; 0x8001c5 <__brkval>
     91a:	30 91 c6 01 	lds	r19, 0x01C6	; 0x8001c6 <__brkval+0x1>
     91e:	28 17       	cp	r18, r24
     920:	39 07       	cpc	r19, r25
     922:	69 f4       	brne	.+26     	; 0x93e <free+0x10c>
     924:	30 97       	sbiw	r30, 0x00	; 0
     926:	29 f4       	brne	.+10     	; 0x932 <free+0x100>
     928:	10 92 c8 01 	sts	0x01C8, r1	; 0x8001c8 <__flp+0x1>
     92c:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <__flp>
     930:	02 c0       	rjmp	.+4      	; 0x936 <free+0x104>
     932:	13 82       	std	Z+3, r1	; 0x03
     934:	12 82       	std	Z+2, r1	; 0x02
     936:	b0 93 c6 01 	sts	0x01C6, r27	; 0x8001c6 <__brkval+0x1>
     93a:	a0 93 c5 01 	sts	0x01C5, r26	; 0x8001c5 <__brkval>
     93e:	df 91       	pop	r29
     940:	cf 91       	pop	r28
     942:	08 95       	ret

00000944 <do_rand>:
     944:	8f 92       	push	r8
     946:	9f 92       	push	r9
     948:	af 92       	push	r10
     94a:	bf 92       	push	r11
     94c:	cf 92       	push	r12
     94e:	df 92       	push	r13
     950:	ef 92       	push	r14
     952:	ff 92       	push	r15
     954:	cf 93       	push	r28
     956:	df 93       	push	r29
     958:	ec 01       	movw	r28, r24
     95a:	68 81       	ld	r22, Y
     95c:	79 81       	ldd	r23, Y+1	; 0x01
     95e:	8a 81       	ldd	r24, Y+2	; 0x02
     960:	9b 81       	ldd	r25, Y+3	; 0x03
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	21 f4       	brne	.+8      	; 0x974 <do_rand+0x30>
     96c:	64 e2       	ldi	r22, 0x24	; 36
     96e:	79 ed       	ldi	r23, 0xD9	; 217
     970:	8b e5       	ldi	r24, 0x5B	; 91
     972:	97 e0       	ldi	r25, 0x07	; 7
     974:	2d e1       	ldi	r18, 0x1D	; 29
     976:	33 ef       	ldi	r19, 0xF3	; 243
     978:	41 e0       	ldi	r20, 0x01	; 1
     97a:	50 e0       	ldi	r21, 0x00	; 0
     97c:	0e 94 4a 08 	call	0x1094	; 0x1094 <__divmodsi4>
     980:	49 01       	movw	r8, r18
     982:	5a 01       	movw	r10, r20
     984:	9b 01       	movw	r18, r22
     986:	ac 01       	movw	r20, r24
     988:	a7 ea       	ldi	r26, 0xA7	; 167
     98a:	b1 e4       	ldi	r27, 0x41	; 65
     98c:	0e 94 69 08 	call	0x10d2	; 0x10d2 <__muluhisi3>
     990:	6b 01       	movw	r12, r22
     992:	7c 01       	movw	r14, r24
     994:	ac ee       	ldi	r26, 0xEC	; 236
     996:	b4 ef       	ldi	r27, 0xF4	; 244
     998:	a5 01       	movw	r20, r10
     99a:	94 01       	movw	r18, r8
     99c:	0e 94 77 08 	call	0x10ee	; 0x10ee <__mulohisi3>
     9a0:	dc 01       	movw	r26, r24
     9a2:	cb 01       	movw	r24, r22
     9a4:	8c 0d       	add	r24, r12
     9a6:	9d 1d       	adc	r25, r13
     9a8:	ae 1d       	adc	r26, r14
     9aa:	bf 1d       	adc	r27, r15
     9ac:	b7 ff       	sbrs	r27, 7
     9ae:	03 c0       	rjmp	.+6      	; 0x9b6 <do_rand+0x72>
     9b0:	01 97       	sbiw	r24, 0x01	; 1
     9b2:	a1 09       	sbc	r26, r1
     9b4:	b0 48       	sbci	r27, 0x80	; 128
     9b6:	88 83       	st	Y, r24
     9b8:	99 83       	std	Y+1, r25	; 0x01
     9ba:	aa 83       	std	Y+2, r26	; 0x02
     9bc:	bb 83       	std	Y+3, r27	; 0x03
     9be:	9f 77       	andi	r25, 0x7F	; 127
     9c0:	df 91       	pop	r29
     9c2:	cf 91       	pop	r28
     9c4:	ff 90       	pop	r15
     9c6:	ef 90       	pop	r14
     9c8:	df 90       	pop	r13
     9ca:	cf 90       	pop	r12
     9cc:	bf 90       	pop	r11
     9ce:	af 90       	pop	r10
     9d0:	9f 90       	pop	r9
     9d2:	8f 90       	pop	r8
     9d4:	08 95       	ret

000009d6 <rand_r>:
     9d6:	0e 94 a2 04 	call	0x944	; 0x944 <do_rand>
     9da:	08 95       	ret

000009dc <rand>:
     9dc:	86 e0       	ldi	r24, 0x06	; 6
     9de:	91 e0       	ldi	r25, 0x01	; 1
     9e0:	0e 94 a2 04 	call	0x944	; 0x944 <do_rand>
     9e4:	08 95       	ret

000009e6 <srand>:
     9e6:	a0 e0       	ldi	r26, 0x00	; 0
     9e8:	b0 e0       	ldi	r27, 0x00	; 0
     9ea:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <next>
     9ee:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <next+0x1>
     9f2:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <next+0x2>
     9f6:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <next+0x3>
     9fa:	08 95       	ret

000009fc <fdevopen>:
     9fc:	0f 93       	push	r16
     9fe:	1f 93       	push	r17
     a00:	cf 93       	push	r28
     a02:	df 93       	push	r29
     a04:	00 97       	sbiw	r24, 0x00	; 0
     a06:	31 f4       	brne	.+12     	; 0xa14 <fdevopen+0x18>
     a08:	61 15       	cp	r22, r1
     a0a:	71 05       	cpc	r23, r1
     a0c:	19 f4       	brne	.+6      	; 0xa14 <fdevopen+0x18>
     a0e:	80 e0       	ldi	r24, 0x00	; 0
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	3a c0       	rjmp	.+116    	; 0xa88 <fdevopen+0x8c>
     a14:	8b 01       	movw	r16, r22
     a16:	ec 01       	movw	r28, r24
     a18:	6e e0       	ldi	r22, 0x0E	; 14
     a1a:	70 e0       	ldi	r23, 0x00	; 0
     a1c:	81 e0       	ldi	r24, 0x01	; 1
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	0e 94 77 07 	call	0xeee	; 0xeee <calloc>
     a24:	fc 01       	movw	r30, r24
     a26:	89 2b       	or	r24, r25
     a28:	91 f3       	breq	.-28     	; 0xa0e <fdevopen+0x12>
     a2a:	80 e8       	ldi	r24, 0x80	; 128
     a2c:	83 83       	std	Z+3, r24	; 0x03
     a2e:	01 15       	cp	r16, r1
     a30:	11 05       	cpc	r17, r1
     a32:	71 f0       	breq	.+28     	; 0xa50 <fdevopen+0x54>
     a34:	13 87       	std	Z+11, r17	; 0x0b
     a36:	02 87       	std	Z+10, r16	; 0x0a
     a38:	81 e8       	ldi	r24, 0x81	; 129
     a3a:	83 83       	std	Z+3, r24	; 0x03
     a3c:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <__iob>
     a40:	90 91 ca 01 	lds	r25, 0x01CA	; 0x8001ca <__iob+0x1>
     a44:	89 2b       	or	r24, r25
     a46:	21 f4       	brne	.+8      	; 0xa50 <fdevopen+0x54>
     a48:	f0 93 ca 01 	sts	0x01CA, r31	; 0x8001ca <__iob+0x1>
     a4c:	e0 93 c9 01 	sts	0x01C9, r30	; 0x8001c9 <__iob>
     a50:	20 97       	sbiw	r28, 0x00	; 0
     a52:	c9 f0       	breq	.+50     	; 0xa86 <fdevopen+0x8a>
     a54:	d1 87       	std	Z+9, r29	; 0x09
     a56:	c0 87       	std	Z+8, r28	; 0x08
     a58:	83 81       	ldd	r24, Z+3	; 0x03
     a5a:	82 60       	ori	r24, 0x02	; 2
     a5c:	83 83       	std	Z+3, r24	; 0x03
     a5e:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <__iob+0x2>
     a62:	90 91 cc 01 	lds	r25, 0x01CC	; 0x8001cc <__iob+0x3>
     a66:	89 2b       	or	r24, r25
     a68:	71 f4       	brne	.+28     	; 0xa86 <fdevopen+0x8a>
     a6a:	f0 93 cc 01 	sts	0x01CC, r31	; 0x8001cc <__iob+0x3>
     a6e:	e0 93 cb 01 	sts	0x01CB, r30	; 0x8001cb <__iob+0x2>
     a72:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <__iob+0x4>
     a76:	90 91 ce 01 	lds	r25, 0x01CE	; 0x8001ce <__iob+0x5>
     a7a:	89 2b       	or	r24, r25
     a7c:	21 f4       	brne	.+8      	; 0xa86 <fdevopen+0x8a>
     a7e:	f0 93 ce 01 	sts	0x01CE, r31	; 0x8001ce <__iob+0x5>
     a82:	e0 93 cd 01 	sts	0x01CD, r30	; 0x8001cd <__iob+0x4>
     a86:	cf 01       	movw	r24, r30
     a88:	df 91       	pop	r29
     a8a:	cf 91       	pop	r28
     a8c:	1f 91       	pop	r17
     a8e:	0f 91       	pop	r16
     a90:	08 95       	ret

00000a92 <printf>:
     a92:	a0 e0       	ldi	r26, 0x00	; 0
     a94:	b0 e0       	ldi	r27, 0x00	; 0
     a96:	ef e4       	ldi	r30, 0x4F	; 79
     a98:	f5 e0       	ldi	r31, 0x05	; 5
     a9a:	0c 94 8c 08 	jmp	0x1118	; 0x1118 <__prologue_saves__+0x20>
     a9e:	ae 01       	movw	r20, r28
     aa0:	4b 5f       	subi	r20, 0xFB	; 251
     aa2:	5f 4f       	sbci	r21, 0xFF	; 255
     aa4:	fa 01       	movw	r30, r20
     aa6:	61 91       	ld	r22, Z+
     aa8:	71 91       	ld	r23, Z+
     aaa:	af 01       	movw	r20, r30
     aac:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <__iob+0x2>
     ab0:	90 91 cc 01 	lds	r25, 0x01CC	; 0x8001cc <__iob+0x3>
     ab4:	0e 94 96 05 	call	0xb2c	; 0xb2c <vfprintf>
     ab8:	e2 e0       	ldi	r30, 0x02	; 2
     aba:	0c 94 a8 08 	jmp	0x1150	; 0x1150 <__epilogue_restores__+0x20>

00000abe <putchar>:
     abe:	60 91 cb 01 	lds	r22, 0x01CB	; 0x8001cb <__iob+0x2>
     ac2:	70 91 cc 01 	lds	r23, 0x01CC	; 0x8001cc <__iob+0x3>
     ac6:	0e 94 b0 07 	call	0xf60	; 0xf60 <fputc>
     aca:	08 95       	ret

00000acc <puts>:
     acc:	0f 93       	push	r16
     ace:	1f 93       	push	r17
     ad0:	cf 93       	push	r28
     ad2:	df 93       	push	r29
     ad4:	e0 91 cb 01 	lds	r30, 0x01CB	; 0x8001cb <__iob+0x2>
     ad8:	f0 91 cc 01 	lds	r31, 0x01CC	; 0x8001cc <__iob+0x3>
     adc:	23 81       	ldd	r18, Z+3	; 0x03
     ade:	21 ff       	sbrs	r18, 1
     ae0:	1b c0       	rjmp	.+54     	; 0xb18 <puts+0x4c>
     ae2:	8c 01       	movw	r16, r24
     ae4:	d0 e0       	ldi	r29, 0x00	; 0
     ae6:	c0 e0       	ldi	r28, 0x00	; 0
     ae8:	f8 01       	movw	r30, r16
     aea:	81 91       	ld	r24, Z+
     aec:	8f 01       	movw	r16, r30
     aee:	60 91 cb 01 	lds	r22, 0x01CB	; 0x8001cb <__iob+0x2>
     af2:	70 91 cc 01 	lds	r23, 0x01CC	; 0x8001cc <__iob+0x3>
     af6:	db 01       	movw	r26, r22
     af8:	18 96       	adiw	r26, 0x08	; 8
     afa:	ed 91       	ld	r30, X+
     afc:	fc 91       	ld	r31, X
     afe:	19 97       	sbiw	r26, 0x09	; 9
     b00:	88 23       	and	r24, r24
     b02:	31 f0       	breq	.+12     	; 0xb10 <puts+0x44>
     b04:	09 95       	icall
     b06:	89 2b       	or	r24, r25
     b08:	79 f3       	breq	.-34     	; 0xae8 <puts+0x1c>
     b0a:	df ef       	ldi	r29, 0xFF	; 255
     b0c:	cf ef       	ldi	r28, 0xFF	; 255
     b0e:	ec cf       	rjmp	.-40     	; 0xae8 <puts+0x1c>
     b10:	8a e0       	ldi	r24, 0x0A	; 10
     b12:	09 95       	icall
     b14:	89 2b       	or	r24, r25
     b16:	19 f0       	breq	.+6      	; 0xb1e <puts+0x52>
     b18:	8f ef       	ldi	r24, 0xFF	; 255
     b1a:	9f ef       	ldi	r25, 0xFF	; 255
     b1c:	02 c0       	rjmp	.+4      	; 0xb22 <puts+0x56>
     b1e:	8d 2f       	mov	r24, r29
     b20:	9c 2f       	mov	r25, r28
     b22:	df 91       	pop	r29
     b24:	cf 91       	pop	r28
     b26:	1f 91       	pop	r17
     b28:	0f 91       	pop	r16
     b2a:	08 95       	ret

00000b2c <vfprintf>:
     b2c:	ab e0       	ldi	r26, 0x0B	; 11
     b2e:	b0 e0       	ldi	r27, 0x00	; 0
     b30:	ec e9       	ldi	r30, 0x9C	; 156
     b32:	f5 e0       	ldi	r31, 0x05	; 5
     b34:	0c 94 7c 08 	jmp	0x10f8	; 0x10f8 <__prologue_saves__>
     b38:	6c 01       	movw	r12, r24
     b3a:	7b 01       	movw	r14, r22
     b3c:	8a 01       	movw	r16, r20
     b3e:	fc 01       	movw	r30, r24
     b40:	17 82       	std	Z+7, r1	; 0x07
     b42:	16 82       	std	Z+6, r1	; 0x06
     b44:	83 81       	ldd	r24, Z+3	; 0x03
     b46:	81 ff       	sbrs	r24, 1
     b48:	cc c1       	rjmp	.+920    	; 0xee2 <vfprintf+0x3b6>
     b4a:	ce 01       	movw	r24, r28
     b4c:	01 96       	adiw	r24, 0x01	; 1
     b4e:	3c 01       	movw	r6, r24
     b50:	f6 01       	movw	r30, r12
     b52:	93 81       	ldd	r25, Z+3	; 0x03
     b54:	f7 01       	movw	r30, r14
     b56:	93 fd       	sbrc	r25, 3
     b58:	85 91       	lpm	r24, Z+
     b5a:	93 ff       	sbrs	r25, 3
     b5c:	81 91       	ld	r24, Z+
     b5e:	7f 01       	movw	r14, r30
     b60:	88 23       	and	r24, r24
     b62:	09 f4       	brne	.+2      	; 0xb66 <vfprintf+0x3a>
     b64:	ba c1       	rjmp	.+884    	; 0xeda <vfprintf+0x3ae>
     b66:	85 32       	cpi	r24, 0x25	; 37
     b68:	39 f4       	brne	.+14     	; 0xb78 <vfprintf+0x4c>
     b6a:	93 fd       	sbrc	r25, 3
     b6c:	85 91       	lpm	r24, Z+
     b6e:	93 ff       	sbrs	r25, 3
     b70:	81 91       	ld	r24, Z+
     b72:	7f 01       	movw	r14, r30
     b74:	85 32       	cpi	r24, 0x25	; 37
     b76:	29 f4       	brne	.+10     	; 0xb82 <vfprintf+0x56>
     b78:	b6 01       	movw	r22, r12
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	0e 94 b0 07 	call	0xf60	; 0xf60 <fputc>
     b80:	e7 cf       	rjmp	.-50     	; 0xb50 <vfprintf+0x24>
     b82:	91 2c       	mov	r9, r1
     b84:	21 2c       	mov	r2, r1
     b86:	31 2c       	mov	r3, r1
     b88:	ff e1       	ldi	r31, 0x1F	; 31
     b8a:	f3 15       	cp	r31, r3
     b8c:	d8 f0       	brcs	.+54     	; 0xbc4 <vfprintf+0x98>
     b8e:	8b 32       	cpi	r24, 0x2B	; 43
     b90:	79 f0       	breq	.+30     	; 0xbb0 <vfprintf+0x84>
     b92:	38 f4       	brcc	.+14     	; 0xba2 <vfprintf+0x76>
     b94:	80 32       	cpi	r24, 0x20	; 32
     b96:	79 f0       	breq	.+30     	; 0xbb6 <vfprintf+0x8a>
     b98:	83 32       	cpi	r24, 0x23	; 35
     b9a:	a1 f4       	brne	.+40     	; 0xbc4 <vfprintf+0x98>
     b9c:	23 2d       	mov	r18, r3
     b9e:	20 61       	ori	r18, 0x10	; 16
     ba0:	1d c0       	rjmp	.+58     	; 0xbdc <vfprintf+0xb0>
     ba2:	8d 32       	cpi	r24, 0x2D	; 45
     ba4:	61 f0       	breq	.+24     	; 0xbbe <vfprintf+0x92>
     ba6:	80 33       	cpi	r24, 0x30	; 48
     ba8:	69 f4       	brne	.+26     	; 0xbc4 <vfprintf+0x98>
     baa:	23 2d       	mov	r18, r3
     bac:	21 60       	ori	r18, 0x01	; 1
     bae:	16 c0       	rjmp	.+44     	; 0xbdc <vfprintf+0xb0>
     bb0:	83 2d       	mov	r24, r3
     bb2:	82 60       	ori	r24, 0x02	; 2
     bb4:	38 2e       	mov	r3, r24
     bb6:	e3 2d       	mov	r30, r3
     bb8:	e4 60       	ori	r30, 0x04	; 4
     bba:	3e 2e       	mov	r3, r30
     bbc:	2a c0       	rjmp	.+84     	; 0xc12 <vfprintf+0xe6>
     bbe:	f3 2d       	mov	r31, r3
     bc0:	f8 60       	ori	r31, 0x08	; 8
     bc2:	1d c0       	rjmp	.+58     	; 0xbfe <vfprintf+0xd2>
     bc4:	37 fc       	sbrc	r3, 7
     bc6:	2d c0       	rjmp	.+90     	; 0xc22 <vfprintf+0xf6>
     bc8:	20 ed       	ldi	r18, 0xD0	; 208
     bca:	28 0f       	add	r18, r24
     bcc:	2a 30       	cpi	r18, 0x0A	; 10
     bce:	40 f0       	brcs	.+16     	; 0xbe0 <vfprintf+0xb4>
     bd0:	8e 32       	cpi	r24, 0x2E	; 46
     bd2:	b9 f4       	brne	.+46     	; 0xc02 <vfprintf+0xd6>
     bd4:	36 fc       	sbrc	r3, 6
     bd6:	81 c1       	rjmp	.+770    	; 0xeda <vfprintf+0x3ae>
     bd8:	23 2d       	mov	r18, r3
     bda:	20 64       	ori	r18, 0x40	; 64
     bdc:	32 2e       	mov	r3, r18
     bde:	19 c0       	rjmp	.+50     	; 0xc12 <vfprintf+0xe6>
     be0:	36 fe       	sbrs	r3, 6
     be2:	06 c0       	rjmp	.+12     	; 0xbf0 <vfprintf+0xc4>
     be4:	8a e0       	ldi	r24, 0x0A	; 10
     be6:	98 9e       	mul	r9, r24
     be8:	20 0d       	add	r18, r0
     bea:	11 24       	eor	r1, r1
     bec:	92 2e       	mov	r9, r18
     bee:	11 c0       	rjmp	.+34     	; 0xc12 <vfprintf+0xe6>
     bf0:	ea e0       	ldi	r30, 0x0A	; 10
     bf2:	2e 9e       	mul	r2, r30
     bf4:	20 0d       	add	r18, r0
     bf6:	11 24       	eor	r1, r1
     bf8:	22 2e       	mov	r2, r18
     bfa:	f3 2d       	mov	r31, r3
     bfc:	f0 62       	ori	r31, 0x20	; 32
     bfe:	3f 2e       	mov	r3, r31
     c00:	08 c0       	rjmp	.+16     	; 0xc12 <vfprintf+0xe6>
     c02:	8c 36       	cpi	r24, 0x6C	; 108
     c04:	21 f4       	brne	.+8      	; 0xc0e <vfprintf+0xe2>
     c06:	83 2d       	mov	r24, r3
     c08:	80 68       	ori	r24, 0x80	; 128
     c0a:	38 2e       	mov	r3, r24
     c0c:	02 c0       	rjmp	.+4      	; 0xc12 <vfprintf+0xe6>
     c0e:	88 36       	cpi	r24, 0x68	; 104
     c10:	41 f4       	brne	.+16     	; 0xc22 <vfprintf+0xf6>
     c12:	f7 01       	movw	r30, r14
     c14:	93 fd       	sbrc	r25, 3
     c16:	85 91       	lpm	r24, Z+
     c18:	93 ff       	sbrs	r25, 3
     c1a:	81 91       	ld	r24, Z+
     c1c:	7f 01       	movw	r14, r30
     c1e:	81 11       	cpse	r24, r1
     c20:	b3 cf       	rjmp	.-154    	; 0xb88 <vfprintf+0x5c>
     c22:	98 2f       	mov	r25, r24
     c24:	9f 7d       	andi	r25, 0xDF	; 223
     c26:	95 54       	subi	r25, 0x45	; 69
     c28:	93 30       	cpi	r25, 0x03	; 3
     c2a:	28 f4       	brcc	.+10     	; 0xc36 <vfprintf+0x10a>
     c2c:	0c 5f       	subi	r16, 0xFC	; 252
     c2e:	1f 4f       	sbci	r17, 0xFF	; 255
     c30:	9f e3       	ldi	r25, 0x3F	; 63
     c32:	99 83       	std	Y+1, r25	; 0x01
     c34:	0d c0       	rjmp	.+26     	; 0xc50 <vfprintf+0x124>
     c36:	83 36       	cpi	r24, 0x63	; 99
     c38:	31 f0       	breq	.+12     	; 0xc46 <vfprintf+0x11a>
     c3a:	83 37       	cpi	r24, 0x73	; 115
     c3c:	71 f0       	breq	.+28     	; 0xc5a <vfprintf+0x12e>
     c3e:	83 35       	cpi	r24, 0x53	; 83
     c40:	09 f0       	breq	.+2      	; 0xc44 <vfprintf+0x118>
     c42:	59 c0       	rjmp	.+178    	; 0xcf6 <vfprintf+0x1ca>
     c44:	21 c0       	rjmp	.+66     	; 0xc88 <vfprintf+0x15c>
     c46:	f8 01       	movw	r30, r16
     c48:	80 81       	ld	r24, Z
     c4a:	89 83       	std	Y+1, r24	; 0x01
     c4c:	0e 5f       	subi	r16, 0xFE	; 254
     c4e:	1f 4f       	sbci	r17, 0xFF	; 255
     c50:	88 24       	eor	r8, r8
     c52:	83 94       	inc	r8
     c54:	91 2c       	mov	r9, r1
     c56:	53 01       	movw	r10, r6
     c58:	13 c0       	rjmp	.+38     	; 0xc80 <vfprintf+0x154>
     c5a:	28 01       	movw	r4, r16
     c5c:	f2 e0       	ldi	r31, 0x02	; 2
     c5e:	4f 0e       	add	r4, r31
     c60:	51 1c       	adc	r5, r1
     c62:	f8 01       	movw	r30, r16
     c64:	a0 80       	ld	r10, Z
     c66:	b1 80       	ldd	r11, Z+1	; 0x01
     c68:	36 fe       	sbrs	r3, 6
     c6a:	03 c0       	rjmp	.+6      	; 0xc72 <vfprintf+0x146>
     c6c:	69 2d       	mov	r22, r9
     c6e:	70 e0       	ldi	r23, 0x00	; 0
     c70:	02 c0       	rjmp	.+4      	; 0xc76 <vfprintf+0x14a>
     c72:	6f ef       	ldi	r22, 0xFF	; 255
     c74:	7f ef       	ldi	r23, 0xFF	; 255
     c76:	c5 01       	movw	r24, r10
     c78:	0e 94 a5 07 	call	0xf4a	; 0xf4a <strnlen>
     c7c:	4c 01       	movw	r8, r24
     c7e:	82 01       	movw	r16, r4
     c80:	f3 2d       	mov	r31, r3
     c82:	ff 77       	andi	r31, 0x7F	; 127
     c84:	3f 2e       	mov	r3, r31
     c86:	16 c0       	rjmp	.+44     	; 0xcb4 <vfprintf+0x188>
     c88:	28 01       	movw	r4, r16
     c8a:	22 e0       	ldi	r18, 0x02	; 2
     c8c:	42 0e       	add	r4, r18
     c8e:	51 1c       	adc	r5, r1
     c90:	f8 01       	movw	r30, r16
     c92:	a0 80       	ld	r10, Z
     c94:	b1 80       	ldd	r11, Z+1	; 0x01
     c96:	36 fe       	sbrs	r3, 6
     c98:	03 c0       	rjmp	.+6      	; 0xca0 <vfprintf+0x174>
     c9a:	69 2d       	mov	r22, r9
     c9c:	70 e0       	ldi	r23, 0x00	; 0
     c9e:	02 c0       	rjmp	.+4      	; 0xca4 <vfprintf+0x178>
     ca0:	6f ef       	ldi	r22, 0xFF	; 255
     ca2:	7f ef       	ldi	r23, 0xFF	; 255
     ca4:	c5 01       	movw	r24, r10
     ca6:	0e 94 93 07 	call	0xf26	; 0xf26 <strnlen_P>
     caa:	4c 01       	movw	r8, r24
     cac:	f3 2d       	mov	r31, r3
     cae:	f0 68       	ori	r31, 0x80	; 128
     cb0:	3f 2e       	mov	r3, r31
     cb2:	82 01       	movw	r16, r4
     cb4:	33 fc       	sbrc	r3, 3
     cb6:	1b c0       	rjmp	.+54     	; 0xcee <vfprintf+0x1c2>
     cb8:	82 2d       	mov	r24, r2
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	88 16       	cp	r8, r24
     cbe:	99 06       	cpc	r9, r25
     cc0:	b0 f4       	brcc	.+44     	; 0xcee <vfprintf+0x1c2>
     cc2:	b6 01       	movw	r22, r12
     cc4:	80 e2       	ldi	r24, 0x20	; 32
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	0e 94 b0 07 	call	0xf60	; 0xf60 <fputc>
     ccc:	2a 94       	dec	r2
     cce:	f4 cf       	rjmp	.-24     	; 0xcb8 <vfprintf+0x18c>
     cd0:	f5 01       	movw	r30, r10
     cd2:	37 fc       	sbrc	r3, 7
     cd4:	85 91       	lpm	r24, Z+
     cd6:	37 fe       	sbrs	r3, 7
     cd8:	81 91       	ld	r24, Z+
     cda:	5f 01       	movw	r10, r30
     cdc:	b6 01       	movw	r22, r12
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	0e 94 b0 07 	call	0xf60	; 0xf60 <fputc>
     ce4:	21 10       	cpse	r2, r1
     ce6:	2a 94       	dec	r2
     ce8:	21 e0       	ldi	r18, 0x01	; 1
     cea:	82 1a       	sub	r8, r18
     cec:	91 08       	sbc	r9, r1
     cee:	81 14       	cp	r8, r1
     cf0:	91 04       	cpc	r9, r1
     cf2:	71 f7       	brne	.-36     	; 0xcd0 <vfprintf+0x1a4>
     cf4:	e8 c0       	rjmp	.+464    	; 0xec6 <vfprintf+0x39a>
     cf6:	84 36       	cpi	r24, 0x64	; 100
     cf8:	11 f0       	breq	.+4      	; 0xcfe <vfprintf+0x1d2>
     cfa:	89 36       	cpi	r24, 0x69	; 105
     cfc:	41 f5       	brne	.+80     	; 0xd4e <vfprintf+0x222>
     cfe:	f8 01       	movw	r30, r16
     d00:	37 fe       	sbrs	r3, 7
     d02:	07 c0       	rjmp	.+14     	; 0xd12 <vfprintf+0x1e6>
     d04:	60 81       	ld	r22, Z
     d06:	71 81       	ldd	r23, Z+1	; 0x01
     d08:	82 81       	ldd	r24, Z+2	; 0x02
     d0a:	93 81       	ldd	r25, Z+3	; 0x03
     d0c:	0c 5f       	subi	r16, 0xFC	; 252
     d0e:	1f 4f       	sbci	r17, 0xFF	; 255
     d10:	08 c0       	rjmp	.+16     	; 0xd22 <vfprintf+0x1f6>
     d12:	60 81       	ld	r22, Z
     d14:	71 81       	ldd	r23, Z+1	; 0x01
     d16:	07 2e       	mov	r0, r23
     d18:	00 0c       	add	r0, r0
     d1a:	88 0b       	sbc	r24, r24
     d1c:	99 0b       	sbc	r25, r25
     d1e:	0e 5f       	subi	r16, 0xFE	; 254
     d20:	1f 4f       	sbci	r17, 0xFF	; 255
     d22:	f3 2d       	mov	r31, r3
     d24:	ff 76       	andi	r31, 0x6F	; 111
     d26:	3f 2e       	mov	r3, r31
     d28:	97 ff       	sbrs	r25, 7
     d2a:	09 c0       	rjmp	.+18     	; 0xd3e <vfprintf+0x212>
     d2c:	90 95       	com	r25
     d2e:	80 95       	com	r24
     d30:	70 95       	com	r23
     d32:	61 95       	neg	r22
     d34:	7f 4f       	sbci	r23, 0xFF	; 255
     d36:	8f 4f       	sbci	r24, 0xFF	; 255
     d38:	9f 4f       	sbci	r25, 0xFF	; 255
     d3a:	f0 68       	ori	r31, 0x80	; 128
     d3c:	3f 2e       	mov	r3, r31
     d3e:	2a e0       	ldi	r18, 0x0A	; 10
     d40:	30 e0       	ldi	r19, 0x00	; 0
     d42:	a3 01       	movw	r20, r6
     d44:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <__ultoa_invert>
     d48:	88 2e       	mov	r8, r24
     d4a:	86 18       	sub	r8, r6
     d4c:	45 c0       	rjmp	.+138    	; 0xdd8 <vfprintf+0x2ac>
     d4e:	85 37       	cpi	r24, 0x75	; 117
     d50:	31 f4       	brne	.+12     	; 0xd5e <vfprintf+0x232>
     d52:	23 2d       	mov	r18, r3
     d54:	2f 7e       	andi	r18, 0xEF	; 239
     d56:	b2 2e       	mov	r11, r18
     d58:	2a e0       	ldi	r18, 0x0A	; 10
     d5a:	30 e0       	ldi	r19, 0x00	; 0
     d5c:	25 c0       	rjmp	.+74     	; 0xda8 <vfprintf+0x27c>
     d5e:	93 2d       	mov	r25, r3
     d60:	99 7f       	andi	r25, 0xF9	; 249
     d62:	b9 2e       	mov	r11, r25
     d64:	8f 36       	cpi	r24, 0x6F	; 111
     d66:	c1 f0       	breq	.+48     	; 0xd98 <vfprintf+0x26c>
     d68:	18 f4       	brcc	.+6      	; 0xd70 <vfprintf+0x244>
     d6a:	88 35       	cpi	r24, 0x58	; 88
     d6c:	79 f0       	breq	.+30     	; 0xd8c <vfprintf+0x260>
     d6e:	b5 c0       	rjmp	.+362    	; 0xeda <vfprintf+0x3ae>
     d70:	80 37       	cpi	r24, 0x70	; 112
     d72:	19 f0       	breq	.+6      	; 0xd7a <vfprintf+0x24e>
     d74:	88 37       	cpi	r24, 0x78	; 120
     d76:	21 f0       	breq	.+8      	; 0xd80 <vfprintf+0x254>
     d78:	b0 c0       	rjmp	.+352    	; 0xeda <vfprintf+0x3ae>
     d7a:	e9 2f       	mov	r30, r25
     d7c:	e0 61       	ori	r30, 0x10	; 16
     d7e:	be 2e       	mov	r11, r30
     d80:	b4 fe       	sbrs	r11, 4
     d82:	0d c0       	rjmp	.+26     	; 0xd9e <vfprintf+0x272>
     d84:	fb 2d       	mov	r31, r11
     d86:	f4 60       	ori	r31, 0x04	; 4
     d88:	bf 2e       	mov	r11, r31
     d8a:	09 c0       	rjmp	.+18     	; 0xd9e <vfprintf+0x272>
     d8c:	34 fe       	sbrs	r3, 4
     d8e:	0a c0       	rjmp	.+20     	; 0xda4 <vfprintf+0x278>
     d90:	29 2f       	mov	r18, r25
     d92:	26 60       	ori	r18, 0x06	; 6
     d94:	b2 2e       	mov	r11, r18
     d96:	06 c0       	rjmp	.+12     	; 0xda4 <vfprintf+0x278>
     d98:	28 e0       	ldi	r18, 0x08	; 8
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	05 c0       	rjmp	.+10     	; 0xda8 <vfprintf+0x27c>
     d9e:	20 e1       	ldi	r18, 0x10	; 16
     da0:	30 e0       	ldi	r19, 0x00	; 0
     da2:	02 c0       	rjmp	.+4      	; 0xda8 <vfprintf+0x27c>
     da4:	20 e1       	ldi	r18, 0x10	; 16
     da6:	32 e0       	ldi	r19, 0x02	; 2
     da8:	f8 01       	movw	r30, r16
     daa:	b7 fe       	sbrs	r11, 7
     dac:	07 c0       	rjmp	.+14     	; 0xdbc <vfprintf+0x290>
     dae:	60 81       	ld	r22, Z
     db0:	71 81       	ldd	r23, Z+1	; 0x01
     db2:	82 81       	ldd	r24, Z+2	; 0x02
     db4:	93 81       	ldd	r25, Z+3	; 0x03
     db6:	0c 5f       	subi	r16, 0xFC	; 252
     db8:	1f 4f       	sbci	r17, 0xFF	; 255
     dba:	06 c0       	rjmp	.+12     	; 0xdc8 <vfprintf+0x29c>
     dbc:	60 81       	ld	r22, Z
     dbe:	71 81       	ldd	r23, Z+1	; 0x01
     dc0:	80 e0       	ldi	r24, 0x00	; 0
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	0e 5f       	subi	r16, 0xFE	; 254
     dc6:	1f 4f       	sbci	r17, 0xFF	; 255
     dc8:	a3 01       	movw	r20, r6
     dca:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <__ultoa_invert>
     dce:	88 2e       	mov	r8, r24
     dd0:	86 18       	sub	r8, r6
     dd2:	fb 2d       	mov	r31, r11
     dd4:	ff 77       	andi	r31, 0x7F	; 127
     dd6:	3f 2e       	mov	r3, r31
     dd8:	36 fe       	sbrs	r3, 6
     dda:	0d c0       	rjmp	.+26     	; 0xdf6 <vfprintf+0x2ca>
     ddc:	23 2d       	mov	r18, r3
     dde:	2e 7f       	andi	r18, 0xFE	; 254
     de0:	a2 2e       	mov	r10, r18
     de2:	89 14       	cp	r8, r9
     de4:	58 f4       	brcc	.+22     	; 0xdfc <vfprintf+0x2d0>
     de6:	34 fe       	sbrs	r3, 4
     de8:	0b c0       	rjmp	.+22     	; 0xe00 <vfprintf+0x2d4>
     dea:	32 fc       	sbrc	r3, 2
     dec:	09 c0       	rjmp	.+18     	; 0xe00 <vfprintf+0x2d4>
     dee:	83 2d       	mov	r24, r3
     df0:	8e 7e       	andi	r24, 0xEE	; 238
     df2:	a8 2e       	mov	r10, r24
     df4:	05 c0       	rjmp	.+10     	; 0xe00 <vfprintf+0x2d4>
     df6:	b8 2c       	mov	r11, r8
     df8:	a3 2c       	mov	r10, r3
     dfa:	03 c0       	rjmp	.+6      	; 0xe02 <vfprintf+0x2d6>
     dfc:	b8 2c       	mov	r11, r8
     dfe:	01 c0       	rjmp	.+2      	; 0xe02 <vfprintf+0x2d6>
     e00:	b9 2c       	mov	r11, r9
     e02:	a4 fe       	sbrs	r10, 4
     e04:	0f c0       	rjmp	.+30     	; 0xe24 <vfprintf+0x2f8>
     e06:	fe 01       	movw	r30, r28
     e08:	e8 0d       	add	r30, r8
     e0a:	f1 1d       	adc	r31, r1
     e0c:	80 81       	ld	r24, Z
     e0e:	80 33       	cpi	r24, 0x30	; 48
     e10:	21 f4       	brne	.+8      	; 0xe1a <vfprintf+0x2ee>
     e12:	9a 2d       	mov	r25, r10
     e14:	99 7e       	andi	r25, 0xE9	; 233
     e16:	a9 2e       	mov	r10, r25
     e18:	09 c0       	rjmp	.+18     	; 0xe2c <vfprintf+0x300>
     e1a:	a2 fe       	sbrs	r10, 2
     e1c:	06 c0       	rjmp	.+12     	; 0xe2a <vfprintf+0x2fe>
     e1e:	b3 94       	inc	r11
     e20:	b3 94       	inc	r11
     e22:	04 c0       	rjmp	.+8      	; 0xe2c <vfprintf+0x300>
     e24:	8a 2d       	mov	r24, r10
     e26:	86 78       	andi	r24, 0x86	; 134
     e28:	09 f0       	breq	.+2      	; 0xe2c <vfprintf+0x300>
     e2a:	b3 94       	inc	r11
     e2c:	a3 fc       	sbrc	r10, 3
     e2e:	11 c0       	rjmp	.+34     	; 0xe52 <vfprintf+0x326>
     e30:	a0 fe       	sbrs	r10, 0
     e32:	06 c0       	rjmp	.+12     	; 0xe40 <vfprintf+0x314>
     e34:	b2 14       	cp	r11, r2
     e36:	88 f4       	brcc	.+34     	; 0xe5a <vfprintf+0x32e>
     e38:	28 0c       	add	r2, r8
     e3a:	92 2c       	mov	r9, r2
     e3c:	9b 18       	sub	r9, r11
     e3e:	0e c0       	rjmp	.+28     	; 0xe5c <vfprintf+0x330>
     e40:	b2 14       	cp	r11, r2
     e42:	60 f4       	brcc	.+24     	; 0xe5c <vfprintf+0x330>
     e44:	b6 01       	movw	r22, r12
     e46:	80 e2       	ldi	r24, 0x20	; 32
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	0e 94 b0 07 	call	0xf60	; 0xf60 <fputc>
     e4e:	b3 94       	inc	r11
     e50:	f7 cf       	rjmp	.-18     	; 0xe40 <vfprintf+0x314>
     e52:	b2 14       	cp	r11, r2
     e54:	18 f4       	brcc	.+6      	; 0xe5c <vfprintf+0x330>
     e56:	2b 18       	sub	r2, r11
     e58:	02 c0       	rjmp	.+4      	; 0xe5e <vfprintf+0x332>
     e5a:	98 2c       	mov	r9, r8
     e5c:	21 2c       	mov	r2, r1
     e5e:	a4 fe       	sbrs	r10, 4
     e60:	10 c0       	rjmp	.+32     	; 0xe82 <vfprintf+0x356>
     e62:	b6 01       	movw	r22, r12
     e64:	80 e3       	ldi	r24, 0x30	; 48
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	0e 94 b0 07 	call	0xf60	; 0xf60 <fputc>
     e6c:	a2 fe       	sbrs	r10, 2
     e6e:	17 c0       	rjmp	.+46     	; 0xe9e <vfprintf+0x372>
     e70:	a1 fc       	sbrc	r10, 1
     e72:	03 c0       	rjmp	.+6      	; 0xe7a <vfprintf+0x34e>
     e74:	88 e7       	ldi	r24, 0x78	; 120
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	02 c0       	rjmp	.+4      	; 0xe7e <vfprintf+0x352>
     e7a:	88 e5       	ldi	r24, 0x58	; 88
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	b6 01       	movw	r22, r12
     e80:	0c c0       	rjmp	.+24     	; 0xe9a <vfprintf+0x36e>
     e82:	8a 2d       	mov	r24, r10
     e84:	86 78       	andi	r24, 0x86	; 134
     e86:	59 f0       	breq	.+22     	; 0xe9e <vfprintf+0x372>
     e88:	a1 fe       	sbrs	r10, 1
     e8a:	02 c0       	rjmp	.+4      	; 0xe90 <vfprintf+0x364>
     e8c:	8b e2       	ldi	r24, 0x2B	; 43
     e8e:	01 c0       	rjmp	.+2      	; 0xe92 <vfprintf+0x366>
     e90:	80 e2       	ldi	r24, 0x20	; 32
     e92:	a7 fc       	sbrc	r10, 7
     e94:	8d e2       	ldi	r24, 0x2D	; 45
     e96:	b6 01       	movw	r22, r12
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	0e 94 b0 07 	call	0xf60	; 0xf60 <fputc>
     e9e:	89 14       	cp	r8, r9
     ea0:	38 f4       	brcc	.+14     	; 0xeb0 <vfprintf+0x384>
     ea2:	b6 01       	movw	r22, r12
     ea4:	80 e3       	ldi	r24, 0x30	; 48
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	0e 94 b0 07 	call	0xf60	; 0xf60 <fputc>
     eac:	9a 94       	dec	r9
     eae:	f7 cf       	rjmp	.-18     	; 0xe9e <vfprintf+0x372>
     eb0:	8a 94       	dec	r8
     eb2:	f3 01       	movw	r30, r6
     eb4:	e8 0d       	add	r30, r8
     eb6:	f1 1d       	adc	r31, r1
     eb8:	80 81       	ld	r24, Z
     eba:	b6 01       	movw	r22, r12
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	0e 94 b0 07 	call	0xf60	; 0xf60 <fputc>
     ec2:	81 10       	cpse	r8, r1
     ec4:	f5 cf       	rjmp	.-22     	; 0xeb0 <vfprintf+0x384>
     ec6:	22 20       	and	r2, r2
     ec8:	09 f4       	brne	.+2      	; 0xecc <vfprintf+0x3a0>
     eca:	42 ce       	rjmp	.-892    	; 0xb50 <vfprintf+0x24>
     ecc:	b6 01       	movw	r22, r12
     ece:	80 e2       	ldi	r24, 0x20	; 32
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	0e 94 b0 07 	call	0xf60	; 0xf60 <fputc>
     ed6:	2a 94       	dec	r2
     ed8:	f6 cf       	rjmp	.-20     	; 0xec6 <vfprintf+0x39a>
     eda:	f6 01       	movw	r30, r12
     edc:	86 81       	ldd	r24, Z+6	; 0x06
     ede:	97 81       	ldd	r25, Z+7	; 0x07
     ee0:	02 c0       	rjmp	.+4      	; 0xee6 <vfprintf+0x3ba>
     ee2:	8f ef       	ldi	r24, 0xFF	; 255
     ee4:	9f ef       	ldi	r25, 0xFF	; 255
     ee6:	2b 96       	adiw	r28, 0x0b	; 11
     ee8:	e2 e1       	ldi	r30, 0x12	; 18
     eea:	0c 94 98 08 	jmp	0x1130	; 0x1130 <__epilogue_restores__>

00000eee <calloc>:
     eee:	0f 93       	push	r16
     ef0:	1f 93       	push	r17
     ef2:	cf 93       	push	r28
     ef4:	df 93       	push	r29
     ef6:	86 9f       	mul	r24, r22
     ef8:	80 01       	movw	r16, r0
     efa:	87 9f       	mul	r24, r23
     efc:	10 0d       	add	r17, r0
     efe:	96 9f       	mul	r25, r22
     f00:	10 0d       	add	r17, r0
     f02:	11 24       	eor	r1, r1
     f04:	c8 01       	movw	r24, r16
     f06:	0e 94 81 03 	call	0x702	; 0x702 <malloc>
     f0a:	ec 01       	movw	r28, r24
     f0c:	00 97       	sbiw	r24, 0x00	; 0
     f0e:	29 f0       	breq	.+10     	; 0xf1a <calloc+0x2c>
     f10:	a8 01       	movw	r20, r16
     f12:	60 e0       	ldi	r22, 0x00	; 0
     f14:	70 e0       	ldi	r23, 0x00	; 0
     f16:	0e 94 9e 07 	call	0xf3c	; 0xf3c <memset>
     f1a:	ce 01       	movw	r24, r28
     f1c:	df 91       	pop	r29
     f1e:	cf 91       	pop	r28
     f20:	1f 91       	pop	r17
     f22:	0f 91       	pop	r16
     f24:	08 95       	ret

00000f26 <strnlen_P>:
     f26:	fc 01       	movw	r30, r24
     f28:	05 90       	lpm	r0, Z+
     f2a:	61 50       	subi	r22, 0x01	; 1
     f2c:	70 40       	sbci	r23, 0x00	; 0
     f2e:	01 10       	cpse	r0, r1
     f30:	d8 f7       	brcc	.-10     	; 0xf28 <strnlen_P+0x2>
     f32:	80 95       	com	r24
     f34:	90 95       	com	r25
     f36:	8e 0f       	add	r24, r30
     f38:	9f 1f       	adc	r25, r31
     f3a:	08 95       	ret

00000f3c <memset>:
     f3c:	dc 01       	movw	r26, r24
     f3e:	01 c0       	rjmp	.+2      	; 0xf42 <memset+0x6>
     f40:	6d 93       	st	X+, r22
     f42:	41 50       	subi	r20, 0x01	; 1
     f44:	50 40       	sbci	r21, 0x00	; 0
     f46:	e0 f7       	brcc	.-8      	; 0xf40 <memset+0x4>
     f48:	08 95       	ret

00000f4a <strnlen>:
     f4a:	fc 01       	movw	r30, r24
     f4c:	61 50       	subi	r22, 0x01	; 1
     f4e:	70 40       	sbci	r23, 0x00	; 0
     f50:	01 90       	ld	r0, Z+
     f52:	01 10       	cpse	r0, r1
     f54:	d8 f7       	brcc	.-10     	; 0xf4c <strnlen+0x2>
     f56:	80 95       	com	r24
     f58:	90 95       	com	r25
     f5a:	8e 0f       	add	r24, r30
     f5c:	9f 1f       	adc	r25, r31
     f5e:	08 95       	ret

00000f60 <fputc>:
     f60:	0f 93       	push	r16
     f62:	1f 93       	push	r17
     f64:	cf 93       	push	r28
     f66:	df 93       	push	r29
     f68:	fb 01       	movw	r30, r22
     f6a:	23 81       	ldd	r18, Z+3	; 0x03
     f6c:	21 fd       	sbrc	r18, 1
     f6e:	03 c0       	rjmp	.+6      	; 0xf76 <fputc+0x16>
     f70:	8f ef       	ldi	r24, 0xFF	; 255
     f72:	9f ef       	ldi	r25, 0xFF	; 255
     f74:	2c c0       	rjmp	.+88     	; 0xfce <fputc+0x6e>
     f76:	22 ff       	sbrs	r18, 2
     f78:	16 c0       	rjmp	.+44     	; 0xfa6 <fputc+0x46>
     f7a:	46 81       	ldd	r20, Z+6	; 0x06
     f7c:	57 81       	ldd	r21, Z+7	; 0x07
     f7e:	24 81       	ldd	r18, Z+4	; 0x04
     f80:	35 81       	ldd	r19, Z+5	; 0x05
     f82:	42 17       	cp	r20, r18
     f84:	53 07       	cpc	r21, r19
     f86:	44 f4       	brge	.+16     	; 0xf98 <fputc+0x38>
     f88:	a0 81       	ld	r26, Z
     f8a:	b1 81       	ldd	r27, Z+1	; 0x01
     f8c:	9d 01       	movw	r18, r26
     f8e:	2f 5f       	subi	r18, 0xFF	; 255
     f90:	3f 4f       	sbci	r19, 0xFF	; 255
     f92:	31 83       	std	Z+1, r19	; 0x01
     f94:	20 83       	st	Z, r18
     f96:	8c 93       	st	X, r24
     f98:	26 81       	ldd	r18, Z+6	; 0x06
     f9a:	37 81       	ldd	r19, Z+7	; 0x07
     f9c:	2f 5f       	subi	r18, 0xFF	; 255
     f9e:	3f 4f       	sbci	r19, 0xFF	; 255
     fa0:	37 83       	std	Z+7, r19	; 0x07
     fa2:	26 83       	std	Z+6, r18	; 0x06
     fa4:	14 c0       	rjmp	.+40     	; 0xfce <fputc+0x6e>
     fa6:	8b 01       	movw	r16, r22
     fa8:	ec 01       	movw	r28, r24
     faa:	fb 01       	movw	r30, r22
     fac:	00 84       	ldd	r0, Z+8	; 0x08
     fae:	f1 85       	ldd	r31, Z+9	; 0x09
     fb0:	e0 2d       	mov	r30, r0
     fb2:	09 95       	icall
     fb4:	89 2b       	or	r24, r25
     fb6:	e1 f6       	brne	.-72     	; 0xf70 <fputc+0x10>
     fb8:	d8 01       	movw	r26, r16
     fba:	16 96       	adiw	r26, 0x06	; 6
     fbc:	8d 91       	ld	r24, X+
     fbe:	9c 91       	ld	r25, X
     fc0:	17 97       	sbiw	r26, 0x07	; 7
     fc2:	01 96       	adiw	r24, 0x01	; 1
     fc4:	17 96       	adiw	r26, 0x07	; 7
     fc6:	9c 93       	st	X, r25
     fc8:	8e 93       	st	-X, r24
     fca:	16 97       	sbiw	r26, 0x06	; 6
     fcc:	ce 01       	movw	r24, r28
     fce:	df 91       	pop	r29
     fd0:	cf 91       	pop	r28
     fd2:	1f 91       	pop	r17
     fd4:	0f 91       	pop	r16
     fd6:	08 95       	ret

00000fd8 <__ultoa_invert>:
     fd8:	fa 01       	movw	r30, r20
     fda:	aa 27       	eor	r26, r26
     fdc:	28 30       	cpi	r18, 0x08	; 8
     fde:	51 f1       	breq	.+84     	; 0x1034 <__ultoa_invert+0x5c>
     fe0:	20 31       	cpi	r18, 0x10	; 16
     fe2:	81 f1       	breq	.+96     	; 0x1044 <__ultoa_invert+0x6c>
     fe4:	e8 94       	clt
     fe6:	6f 93       	push	r22
     fe8:	6e 7f       	andi	r22, 0xFE	; 254
     fea:	6e 5f       	subi	r22, 0xFE	; 254
     fec:	7f 4f       	sbci	r23, 0xFF	; 255
     fee:	8f 4f       	sbci	r24, 0xFF	; 255
     ff0:	9f 4f       	sbci	r25, 0xFF	; 255
     ff2:	af 4f       	sbci	r26, 0xFF	; 255
     ff4:	b1 e0       	ldi	r27, 0x01	; 1
     ff6:	3e d0       	rcall	.+124    	; 0x1074 <__ultoa_invert+0x9c>
     ff8:	b4 e0       	ldi	r27, 0x04	; 4
     ffa:	3c d0       	rcall	.+120    	; 0x1074 <__ultoa_invert+0x9c>
     ffc:	67 0f       	add	r22, r23
     ffe:	78 1f       	adc	r23, r24
    1000:	89 1f       	adc	r24, r25
    1002:	9a 1f       	adc	r25, r26
    1004:	a1 1d       	adc	r26, r1
    1006:	68 0f       	add	r22, r24
    1008:	79 1f       	adc	r23, r25
    100a:	8a 1f       	adc	r24, r26
    100c:	91 1d       	adc	r25, r1
    100e:	a1 1d       	adc	r26, r1
    1010:	6a 0f       	add	r22, r26
    1012:	71 1d       	adc	r23, r1
    1014:	81 1d       	adc	r24, r1
    1016:	91 1d       	adc	r25, r1
    1018:	a1 1d       	adc	r26, r1
    101a:	20 d0       	rcall	.+64     	; 0x105c <__ultoa_invert+0x84>
    101c:	09 f4       	brne	.+2      	; 0x1020 <__ultoa_invert+0x48>
    101e:	68 94       	set
    1020:	3f 91       	pop	r19
    1022:	2a e0       	ldi	r18, 0x0A	; 10
    1024:	26 9f       	mul	r18, r22
    1026:	11 24       	eor	r1, r1
    1028:	30 19       	sub	r19, r0
    102a:	30 5d       	subi	r19, 0xD0	; 208
    102c:	31 93       	st	Z+, r19
    102e:	de f6       	brtc	.-74     	; 0xfe6 <__ultoa_invert+0xe>
    1030:	cf 01       	movw	r24, r30
    1032:	08 95       	ret
    1034:	46 2f       	mov	r20, r22
    1036:	47 70       	andi	r20, 0x07	; 7
    1038:	40 5d       	subi	r20, 0xD0	; 208
    103a:	41 93       	st	Z+, r20
    103c:	b3 e0       	ldi	r27, 0x03	; 3
    103e:	0f d0       	rcall	.+30     	; 0x105e <__ultoa_invert+0x86>
    1040:	c9 f7       	brne	.-14     	; 0x1034 <__ultoa_invert+0x5c>
    1042:	f6 cf       	rjmp	.-20     	; 0x1030 <__ultoa_invert+0x58>
    1044:	46 2f       	mov	r20, r22
    1046:	4f 70       	andi	r20, 0x0F	; 15
    1048:	40 5d       	subi	r20, 0xD0	; 208
    104a:	4a 33       	cpi	r20, 0x3A	; 58
    104c:	18 f0       	brcs	.+6      	; 0x1054 <__ultoa_invert+0x7c>
    104e:	49 5d       	subi	r20, 0xD9	; 217
    1050:	31 fd       	sbrc	r19, 1
    1052:	40 52       	subi	r20, 0x20	; 32
    1054:	41 93       	st	Z+, r20
    1056:	02 d0       	rcall	.+4      	; 0x105c <__ultoa_invert+0x84>
    1058:	a9 f7       	brne	.-22     	; 0x1044 <__ultoa_invert+0x6c>
    105a:	ea cf       	rjmp	.-44     	; 0x1030 <__ultoa_invert+0x58>
    105c:	b4 e0       	ldi	r27, 0x04	; 4
    105e:	a6 95       	lsr	r26
    1060:	97 95       	ror	r25
    1062:	87 95       	ror	r24
    1064:	77 95       	ror	r23
    1066:	67 95       	ror	r22
    1068:	ba 95       	dec	r27
    106a:	c9 f7       	brne	.-14     	; 0x105e <__ultoa_invert+0x86>
    106c:	00 97       	sbiw	r24, 0x00	; 0
    106e:	61 05       	cpc	r22, r1
    1070:	71 05       	cpc	r23, r1
    1072:	08 95       	ret
    1074:	9b 01       	movw	r18, r22
    1076:	ac 01       	movw	r20, r24
    1078:	0a 2e       	mov	r0, r26
    107a:	06 94       	lsr	r0
    107c:	57 95       	ror	r21
    107e:	47 95       	ror	r20
    1080:	37 95       	ror	r19
    1082:	27 95       	ror	r18
    1084:	ba 95       	dec	r27
    1086:	c9 f7       	brne	.-14     	; 0x107a <__ultoa_invert+0xa2>
    1088:	62 0f       	add	r22, r18
    108a:	73 1f       	adc	r23, r19
    108c:	84 1f       	adc	r24, r20
    108e:	95 1f       	adc	r25, r21
    1090:	a0 1d       	adc	r26, r0
    1092:	08 95       	ret

00001094 <__divmodsi4>:
    1094:	05 2e       	mov	r0, r21
    1096:	97 fb       	bst	r25, 7
    1098:	1e f4       	brtc	.+6      	; 0x10a0 <__divmodsi4+0xc>
    109a:	00 94       	com	r0
    109c:	0e 94 61 08 	call	0x10c2	; 0x10c2 <__negsi2>
    10a0:	57 fd       	sbrc	r21, 7
    10a2:	07 d0       	rcall	.+14     	; 0x10b2 <__divmodsi4_neg2>
    10a4:	0e 94 b3 08 	call	0x1166	; 0x1166 <__udivmodsi4>
    10a8:	07 fc       	sbrc	r0, 7
    10aa:	03 d0       	rcall	.+6      	; 0x10b2 <__divmodsi4_neg2>
    10ac:	4e f4       	brtc	.+18     	; 0x10c0 <__divmodsi4_exit>
    10ae:	0c 94 61 08 	jmp	0x10c2	; 0x10c2 <__negsi2>

000010b2 <__divmodsi4_neg2>:
    10b2:	50 95       	com	r21
    10b4:	40 95       	com	r20
    10b6:	30 95       	com	r19
    10b8:	21 95       	neg	r18
    10ba:	3f 4f       	sbci	r19, 0xFF	; 255
    10bc:	4f 4f       	sbci	r20, 0xFF	; 255
    10be:	5f 4f       	sbci	r21, 0xFF	; 255

000010c0 <__divmodsi4_exit>:
    10c0:	08 95       	ret

000010c2 <__negsi2>:
    10c2:	90 95       	com	r25
    10c4:	80 95       	com	r24
    10c6:	70 95       	com	r23
    10c8:	61 95       	neg	r22
    10ca:	7f 4f       	sbci	r23, 0xFF	; 255
    10cc:	8f 4f       	sbci	r24, 0xFF	; 255
    10ce:	9f 4f       	sbci	r25, 0xFF	; 255
    10d0:	08 95       	ret

000010d2 <__muluhisi3>:
    10d2:	0e 94 d5 08 	call	0x11aa	; 0x11aa <__umulhisi3>
    10d6:	a5 9f       	mul	r26, r21
    10d8:	90 0d       	add	r25, r0
    10da:	b4 9f       	mul	r27, r20
    10dc:	90 0d       	add	r25, r0
    10de:	a4 9f       	mul	r26, r20
    10e0:	80 0d       	add	r24, r0
    10e2:	91 1d       	adc	r25, r1
    10e4:	11 24       	eor	r1, r1
    10e6:	08 95       	ret

000010e8 <__mulshisi3>:
    10e8:	b7 ff       	sbrs	r27, 7
    10ea:	0c 94 69 08 	jmp	0x10d2	; 0x10d2 <__muluhisi3>

000010ee <__mulohisi3>:
    10ee:	0e 94 69 08 	call	0x10d2	; 0x10d2 <__muluhisi3>
    10f2:	82 1b       	sub	r24, r18
    10f4:	93 0b       	sbc	r25, r19
    10f6:	08 95       	ret

000010f8 <__prologue_saves__>:
    10f8:	2f 92       	push	r2
    10fa:	3f 92       	push	r3
    10fc:	4f 92       	push	r4
    10fe:	5f 92       	push	r5
    1100:	6f 92       	push	r6
    1102:	7f 92       	push	r7
    1104:	8f 92       	push	r8
    1106:	9f 92       	push	r9
    1108:	af 92       	push	r10
    110a:	bf 92       	push	r11
    110c:	cf 92       	push	r12
    110e:	df 92       	push	r13
    1110:	ef 92       	push	r14
    1112:	ff 92       	push	r15
    1114:	0f 93       	push	r16
    1116:	1f 93       	push	r17
    1118:	cf 93       	push	r28
    111a:	df 93       	push	r29
    111c:	cd b7       	in	r28, 0x3d	; 61
    111e:	de b7       	in	r29, 0x3e	; 62
    1120:	ca 1b       	sub	r28, r26
    1122:	db 0b       	sbc	r29, r27
    1124:	0f b6       	in	r0, 0x3f	; 63
    1126:	f8 94       	cli
    1128:	de bf       	out	0x3e, r29	; 62
    112a:	0f be       	out	0x3f, r0	; 63
    112c:	cd bf       	out	0x3d, r28	; 61
    112e:	09 94       	ijmp

00001130 <__epilogue_restores__>:
    1130:	2a 88       	ldd	r2, Y+18	; 0x12
    1132:	39 88       	ldd	r3, Y+17	; 0x11
    1134:	48 88       	ldd	r4, Y+16	; 0x10
    1136:	5f 84       	ldd	r5, Y+15	; 0x0f
    1138:	6e 84       	ldd	r6, Y+14	; 0x0e
    113a:	7d 84       	ldd	r7, Y+13	; 0x0d
    113c:	8c 84       	ldd	r8, Y+12	; 0x0c
    113e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1140:	aa 84       	ldd	r10, Y+10	; 0x0a
    1142:	b9 84       	ldd	r11, Y+9	; 0x09
    1144:	c8 84       	ldd	r12, Y+8	; 0x08
    1146:	df 80       	ldd	r13, Y+7	; 0x07
    1148:	ee 80       	ldd	r14, Y+6	; 0x06
    114a:	fd 80       	ldd	r15, Y+5	; 0x05
    114c:	0c 81       	ldd	r16, Y+4	; 0x04
    114e:	1b 81       	ldd	r17, Y+3	; 0x03
    1150:	aa 81       	ldd	r26, Y+2	; 0x02
    1152:	b9 81       	ldd	r27, Y+1	; 0x01
    1154:	ce 0f       	add	r28, r30
    1156:	d1 1d       	adc	r29, r1
    1158:	0f b6       	in	r0, 0x3f	; 63
    115a:	f8 94       	cli
    115c:	de bf       	out	0x3e, r29	; 62
    115e:	0f be       	out	0x3f, r0	; 63
    1160:	cd bf       	out	0x3d, r28	; 61
    1162:	ed 01       	movw	r28, r26
    1164:	08 95       	ret

00001166 <__udivmodsi4>:
    1166:	a1 e2       	ldi	r26, 0x21	; 33
    1168:	1a 2e       	mov	r1, r26
    116a:	aa 1b       	sub	r26, r26
    116c:	bb 1b       	sub	r27, r27
    116e:	fd 01       	movw	r30, r26
    1170:	0d c0       	rjmp	.+26     	; 0x118c <__udivmodsi4_ep>

00001172 <__udivmodsi4_loop>:
    1172:	aa 1f       	adc	r26, r26
    1174:	bb 1f       	adc	r27, r27
    1176:	ee 1f       	adc	r30, r30
    1178:	ff 1f       	adc	r31, r31
    117a:	a2 17       	cp	r26, r18
    117c:	b3 07       	cpc	r27, r19
    117e:	e4 07       	cpc	r30, r20
    1180:	f5 07       	cpc	r31, r21
    1182:	20 f0       	brcs	.+8      	; 0x118c <__udivmodsi4_ep>
    1184:	a2 1b       	sub	r26, r18
    1186:	b3 0b       	sbc	r27, r19
    1188:	e4 0b       	sbc	r30, r20
    118a:	f5 0b       	sbc	r31, r21

0000118c <__udivmodsi4_ep>:
    118c:	66 1f       	adc	r22, r22
    118e:	77 1f       	adc	r23, r23
    1190:	88 1f       	adc	r24, r24
    1192:	99 1f       	adc	r25, r25
    1194:	1a 94       	dec	r1
    1196:	69 f7       	brne	.-38     	; 0x1172 <__udivmodsi4_loop>
    1198:	60 95       	com	r22
    119a:	70 95       	com	r23
    119c:	80 95       	com	r24
    119e:	90 95       	com	r25
    11a0:	9b 01       	movw	r18, r22
    11a2:	ac 01       	movw	r20, r24
    11a4:	bd 01       	movw	r22, r26
    11a6:	cf 01       	movw	r24, r30
    11a8:	08 95       	ret

000011aa <__umulhisi3>:
    11aa:	a2 9f       	mul	r26, r18
    11ac:	b0 01       	movw	r22, r0
    11ae:	b3 9f       	mul	r27, r19
    11b0:	c0 01       	movw	r24, r0
    11b2:	a3 9f       	mul	r26, r19
    11b4:	70 0d       	add	r23, r0
    11b6:	81 1d       	adc	r24, r1
    11b8:	11 24       	eor	r1, r1
    11ba:	91 1d       	adc	r25, r1
    11bc:	b2 9f       	mul	r27, r18
    11be:	70 0d       	add	r23, r0
    11c0:	81 1d       	adc	r24, r1
    11c2:	11 24       	eor	r1, r1
    11c4:	91 1d       	adc	r25, r1
    11c6:	08 95       	ret

000011c8 <_exit>:
    11c8:	f8 94       	cli

000011ca <__stop_program>:
    11ca:	ff cf       	rjmp	.-2      	; 0x11ca <__stop_program>
