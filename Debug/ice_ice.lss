
ice_ice.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000108  00800100  00001a3a  00001ace  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a3a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000016  00800208  00800208  00001bd6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001bd6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001c34  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000210  00000000  00000000  00001c70  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002a64  00000000  00000000  00001e80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000114b  00000000  00000000  000048e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011c9  00000000  00000000  00005a2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000054c  00000000  00000000  00006bf8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000090d  00000000  00000000  00007144  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001b0e  00000000  00000000  00007a51  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002c8  00000000  00000000  0000955f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 60 03 	jmp	0x6c0	; 0x6c0 <__ctors_end>
       4:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
       8:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
       c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      10:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      14:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      18:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      1c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      20:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      24:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      28:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      2c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      30:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      34:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      38:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      3c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      40:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      44:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      48:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      4c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      50:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      54:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      58:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      5c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      60:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      64:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      68:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      6c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	00 00       	nop
      72:	00 00       	nop
      74:	00 5c       	subi	r16, 0xC0	; 192
      76:	00 00       	nop
      78:	0c 00       	.word	0x000c	; ????
      7a:	0c 00       	.word	0x000c	; ????
      7c:	7c 28       	or	r7, r12
      7e:	7c 28       	or	r7, r12
      80:	58 dc       	rcall	.-1872   	; 0xfffff932 <__eeprom_end+0xff7ef932>
      82:	68 00       	.word	0x0068	; ????
      84:	24 10       	cpse	r2, r4
      86:	48 00       	.word	0x0048	; ????
      88:	28 54       	subi	r18, 0x48	; 72
      8a:	28 40       	sbci	r18, 0x08	; 8
      8c:	00 0c       	add	r0, r0
      8e:	00 00       	nop
      90:	00 78       	andi	r16, 0x80	; 128
      92:	84 00       	.word	0x0084	; ????
      94:	84 78       	andi	r24, 0x84	; 132
      96:	00 00       	nop
      98:	54 38       	cpi	r21, 0x84	; 132
      9a:	54 00       	.word	0x0054	; ????
      9c:	10 7c       	andi	r17, 0xC0	; 192
      9e:	10 00       	.word	0x0010	; ????
      a0:	80 40       	sbci	r24, 0x00	; 0
      a2:	00 00       	nop
      a4:	10 10       	cpse	r1, r0
      a6:	10 00       	.word	0x0010	; ????
      a8:	00 40       	sbci	r16, 0x00	; 0
      aa:	00 00       	nop
      ac:	60 10       	cpse	r6, r0
      ae:	0c 00       	.word	0x000c	; ????
      b0:	38 54       	subi	r19, 0x48	; 72
      b2:	38 00       	.word	0x0038	; ????
      b4:	48 7c       	andi	r20, 0xC8	; 200
      b6:	40 00       	.word	0x0040	; ????
      b8:	48 64       	ori	r20, 0x48	; 72
      ba:	58 00       	.word	0x0058	; ????
      bc:	44 54       	subi	r20, 0x44	; 68
      be:	2c 00       	.word	0x002c	; ????
      c0:	1c 10       	cpse	r1, r12
      c2:	7c 00       	.word	0x007c	; ????
      c4:	5c 54       	subi	r21, 0x4C	; 76
      c6:	24 00       	.word	0x0024	; ????
      c8:	38 54       	subi	r19, 0x48	; 72
      ca:	24 00       	.word	0x0024	; ????
      cc:	64 14       	cp	r6, r4
      ce:	0c 00       	.word	0x000c	; ????
      d0:	68 54       	subi	r22, 0x48	; 72
      d2:	2c 00       	.word	0x002c	; ????
      d4:	48 54       	subi	r20, 0x48	; 72
      d6:	38 00       	.word	0x0038	; ????
      d8:	00 48       	sbci	r16, 0x80	; 128
      da:	00 00       	nop
      dc:	80 48       	sbci	r24, 0x80	; 128
      de:	00 00       	nop
      e0:	10 28       	or	r1, r0
      e2:	44 00       	.word	0x0044	; ????
      e4:	28 28       	or	r2, r8
      e6:	28 00       	.word	0x0028	; ????
      e8:	44 28       	or	r4, r4
      ea:	10 00       	.word	0x0010	; ????
      ec:	04 54       	subi	r16, 0x44	; 68
      ee:	08 00       	.word	0x0008	; ????
      f0:	38 44       	sbci	r19, 0x48	; 72
      f2:	5c 00       	.word	0x005c	; ????
      f4:	78 14       	cp	r7, r8
      f6:	78 00       	.word	0x0078	; ????
      f8:	7c 54       	subi	r23, 0x4C	; 76
      fa:	28 00       	.word	0x0028	; ????
      fc:	38 44       	sbci	r19, 0x48	; 72
      fe:	28 00       	.word	0x0028	; ????
     100:	7c 44       	sbci	r23, 0x4C	; 76
     102:	38 00       	.word	0x0038	; ????
     104:	7c 54       	subi	r23, 0x4C	; 76
     106:	44 00       	.word	0x0044	; ????
     108:	7c 14       	cp	r7, r12
     10a:	04 00       	.word	0x0004	; ????
     10c:	38 44       	sbci	r19, 0x48	; 72
     10e:	74 00       	.word	0x0074	; ????
     110:	7c 10       	cpse	r7, r12
     112:	7c 00       	.word	0x007c	; ????
     114:	44 7c       	andi	r20, 0xC4	; 196
     116:	44 00       	.word	0x0044	; ????
     118:	20 40       	sbci	r18, 0x00	; 0
     11a:	3c 00       	.word	0x003c	; ????
     11c:	7c 10       	cpse	r7, r12
     11e:	6c 00       	.word	0x006c	; ????
     120:	7c 40       	sbci	r23, 0x0C	; 12
     122:	40 00       	.word	0x0040	; ????
     124:	7c 18       	sub	r7, r12
     126:	7c 00       	.word	0x007c	; ????
     128:	78 10       	cpse	r7, r8
     12a:	3c 00       	.word	0x003c	; ????
     12c:	38 44       	sbci	r19, 0x48	; 72
     12e:	38 00       	.word	0x0038	; ????
     130:	7c 14       	cp	r7, r12
     132:	08 00       	.word	0x0008	; ????
     134:	38 44       	sbci	r19, 0x48	; 72
     136:	b8 00       	.word	0x00b8	; ????
     138:	7c 14       	cp	r7, r12
     13a:	68 00       	.word	0x0068	; ????
     13c:	48 54       	subi	r20, 0x48	; 72
     13e:	24 00       	.word	0x0024	; ????
     140:	04 7c       	andi	r16, 0xC4	; 196
     142:	04 00       	.word	0x0004	; ????
     144:	7c 40       	sbci	r23, 0x0C	; 12
     146:	7c 00       	.word	0x007c	; ????
     148:	3c 60       	ori	r19, 0x0C	; 12
     14a:	3c 00       	.word	0x003c	; ????
     14c:	7c 30       	cpi	r23, 0x0C	; 12
     14e:	7c 00       	.word	0x007c	; ????
     150:	6c 10       	cpse	r6, r12
     152:	6c 00       	.word	0x006c	; ????
     154:	0c 70       	andi	r16, 0x0C	; 12
     156:	0c 00       	.word	0x000c	; ????
     158:	64 54       	subi	r22, 0x44	; 68
     15a:	4c 00       	.word	0x004c	; ????
     15c:	00 7c       	andi	r16, 0xC0	; 192
     15e:	44 00       	.word	0x0044	; ????
     160:	0c 10       	cpse	r0, r12
     162:	60 00       	.word	0x0060	; ????
     164:	44 7c       	andi	r20, 0xC4	; 196
     166:	00 00       	nop
     168:	08 04       	cpc	r0, r8
     16a:	08 00       	.word	0x0008	; ????
     16c:	80 80       	ld	r8, Z
     16e:	80 00       	.word	0x0080	; ????
     170:	00 04       	cpc	r0, r0
     172:	08 00       	.word	0x0008	; ????
     174:	30 48       	sbci	r19, 0x80	; 128
     176:	78 00       	.word	0x0078	; ????
     178:	7c 48       	sbci	r23, 0x8C	; 140
     17a:	30 00       	.word	0x0030	; ????
     17c:	30 48       	sbci	r19, 0x80	; 128
     17e:	48 00       	.word	0x0048	; ????
     180:	30 48       	sbci	r19, 0x80	; 128
     182:	7c 00       	.word	0x007c	; ????
     184:	30 68       	ori	r19, 0x80	; 128
     186:	50 00       	.word	0x0050	; ????
     188:	10 78       	andi	r17, 0x80	; 128
     18a:	14 00       	.word	0x0014	; ????
     18c:	90 a8       	ldd	r9, Z+48	; 0x30
     18e:	78 00       	.word	0x0078	; ????
     190:	7c 08       	sbc	r7, r12
     192:	70 00       	.word	0x0070	; ????
     194:	50 74       	andi	r21, 0x40	; 64
     196:	40 00       	.word	0x0040	; ????
     198:	80 80       	ld	r8, Z
     19a:	74 00       	.word	0x0074	; ????
     19c:	7c 10       	cpse	r7, r12
     19e:	68 00       	.word	0x0068	; ????
     1a0:	44 7c       	andi	r20, 0xC4	; 196
     1a2:	40 00       	.word	0x0040	; ????
     1a4:	78 10       	cpse	r7, r8
     1a6:	78 00       	.word	0x0078	; ????
     1a8:	78 08       	sbc	r7, r8
     1aa:	70 00       	.word	0x0070	; ????
     1ac:	30 48       	sbci	r19, 0x80	; 128
     1ae:	30 00       	.word	0x0030	; ????
     1b0:	f8 28       	or	r15, r8
     1b2:	10 00       	.word	0x0010	; ????
     1b4:	30 48       	sbci	r19, 0x80	; 128
     1b6:	f8 00       	.word	0x00f8	; ????
     1b8:	78 10       	cpse	r7, r8
     1ba:	08 00       	.word	0x0008	; ????
     1bc:	50 58       	subi	r21, 0x80	; 128
     1be:	28 00       	.word	0x0028	; ????
     1c0:	08 3c       	cpi	r16, 0xC8	; 200
     1c2:	48 00       	.word	0x0048	; ????
     1c4:	38 40       	sbci	r19, 0x08	; 8
     1c6:	78 00       	.word	0x0078	; ????
     1c8:	38 40       	sbci	r19, 0x08	; 8
     1ca:	38 00       	.word	0x0038	; ????
     1cc:	78 20       	and	r7, r8
     1ce:	78 00       	.word	0x0078	; ????
     1d0:	48 30       	cpi	r20, 0x08	; 8
     1d2:	48 00       	.word	0x0048	; ????
     1d4:	98 a0       	ldd	r9, Y+32	; 0x20
     1d6:	78 00       	.word	0x0078	; ????
     1d8:	48 68       	ori	r20, 0x88	; 136
     1da:	58 00       	.word	0x0058	; ????
     1dc:	10 78       	andi	r17, 0x80	; 128
     1de:	84 00       	.word	0x0084	; ????
     1e0:	00 7c       	andi	r16, 0xC0	; 192
     1e2:	00 00       	nop
     1e4:	84 78       	andi	r24, 0x84	; 132
     1e6:	10 00       	.word	0x0010	; ????
     1e8:	08 04       	cpc	r0, r8
     1ea:	08 04       	cpc	r0, r8

000001ec <font5>:
     1ec:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     1fc:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     20c:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
     21c:	1c 00 08 2a 1c 2a 08 08 08 3e 08 08 00 50 30 00     ...*.*...>...P0.
     22c:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
     23c:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
     24c:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
     25c:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
     26c:	29 1e 00 36 36 00 00 00 56 36 00 00 00 08 14 22     )..66...V6....."
     27c:	41 14 14 14 14 14 41 22 14 08 00 02 01 51 09 06     A.....A".....Q..
     28c:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     29c:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     2ac:	09 01 01 3e 41 41 51 32 7f 08 08 08 7f 00 41 7f     ...>AAQ2......A.
     2bc:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     2cc:	40 7f 02 04 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     2dc:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     2ec:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     2fc:	40 20 1f 7f 20 18 20 7f 63 14 08 14 63 03 04 78     @ .. . .c...c..x
     30c:	04 03 61 51 49 45 43 00 00 7f 41 41 02 04 08 10     ..aQIEC...AA....
     31c:	20 41 41 7f 00 00 04 02 01 02 04 40 40 40 40 40      AA........@@@@@
     32c:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     33c:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     34c:	09 01 02 08 14 54 54 3c 7f 08 04 04 78 00 44 7d     .....TT<....x.D}
     35c:	40 00 20 40 44 3d 00 00 7f 10 28 44 00 41 7f 40     @. @D=....(D.A.@
     36c:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     37c:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     38c:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     39c:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     3ac:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     3bc:	00 00 41 36 08 00 02 01 03 02 01                    ..A6.......

000003c7 <font8>:
	...
     3cf:	00 06 5f 5f 06 00 00 00 00 07 07 00 07 07 00 00     ..__............
     3df:	14 7f 7f 14 7f 7f 14 00 24 2e 6b 6b 3a 12 00 00     ........$.kk:...
     3ef:	46 66 30 18 0c 66 62 00 30 7a 4f 5d 37 7a 48 00     Ff0..fb.0zO]7zH.
     3ff:	04 07 03 00 00 00 00 00 00 1c 3e 63 41 00 00 00     ..........>cA...
     40f:	00 41 63 3e 1c 00 00 00 08 2a 3e 1c 1c 3e 2a 08     .Ac>.....*>..>*.
     41f:	08 08 3e 3e 08 08 00 00 00 a0 e0 60 00 00 00 00     ..>>.......`....
     42f:	08 08 08 08 08 08 00 00 00 00 60 60 00 00 00 00     ..........``....
     43f:	60 30 18 0c 06 03 01 00 3e 7f 59 4d 7f 3e 00 00     `0......>.YM.>..
     44f:	42 42 7f 7f 40 40 00 00 62 73 59 49 6f 66 00 00     BB..@@..bsYIof..
     45f:	22 63 49 49 7f 36 00 00 18 1c 16 13 7f 7f 10 00     "cII.6..........
     46f:	27 67 45 45 7d 39 00 00 3c 7e 4b 49 79 30 00 00     'gEE}9..<~KIy0..
     47f:	03 63 71 19 0f 07 00 00 36 7f 49 49 7f 36 00 00     .cq.....6.II.6..
     48f:	06 4f 49 69 3f 1e 00 00 00 00 6c 6c 00 00 00 00     .OIi?.....ll....
     49f:	00 a0 ec 6c 00 00 00 00 08 1c 36 63 41 00 00 00     ...l......6cA...
     4af:	14 14 14 14 14 14 00 00 00 41 63 36 1c 08 00 00     .........Ac6....
     4bf:	02 03 51 59 0f 06 00 00 3e 7f 41 5d 5d 1f 1e 00     ..QY....>.A]]...
     4cf:	7c 7e 13 13 7e 7c 00 00 41 7f 7f 49 49 7f 36 00     |~..~|..A..II.6.
     4df:	1c 3e 63 41 41 63 22 00 41 7f 7f 41 63 7f 1c 00     .>cAAc".A..Ac...
     4ef:	41 7f 7f 49 5d 41 63 00 41 7f 7f 49 1d 01 03 00     A..I]Ac.A..I....
     4ff:	1c 3e 63 41 51 73 72 00 7f 7f 08 08 7f 7f 00 00     .>cAQsr.........
     50f:	00 41 7f 7f 41 00 00 00 30 70 40 41 7f 3f 01 00     .A..A...0p@A.?..
     51f:	41 7f 7f 08 1c 77 63 00 41 7f 7f 41 40 60 70 00     A....wc.A..A@`p.
     52f:	7f 7f 06 0c 06 7f 7f 00 7f 7f 06 0c 18 7f 7f 00     ................
     53f:	1c 3e 63 41 63 3e 1c 00 41 7f 7f 49 09 0f 06 00     .>cAc>..A..I....
     54f:	1e 3f 21 71 7f 5e 00 00 41 7f 7f 19 39 6f 46 00     .?!q.^..A...9oF.
     55f:	26 67 4d 59 7b 32 00 00 03 41 7f 7f 41 03 00 00     &gMY{2...A..A...
     56f:	7f 7f 40 40 7f 7f 00 00 1f 3f 60 60 3f 1f 00 00     ..@@.....?``?...
     57f:	7f 7f 30 18 30 7f 7f 00 63 77 1c 08 1c 77 63 00     ..0.0...cw...wc.
     58f:	07 4f 78 78 4f 07 00 00 67 73 59 4d 47 63 71 00     .OxxO...gsYMGcq.
     59f:	00 7f 7f 41 41 00 00 00 01 03 06 0c 18 30 60 00     ...AA........0`.
     5af:	00 41 41 7f 7f 00 00 00 08 0c 06 03 06 0c 08 00     .AA.............
     5bf:	80 80 80 80 80 80 80 80 00 00 03 07 04 00 00 00     ................
     5cf:	20 74 54 54 3c 78 40 00 41 3f 7f 44 44 7c 38 00      tTT<x@.A?.DD|8.
     5df:	38 7c 44 44 6c 28 00 00 30 78 48 49 3f 7f 40 00     8|DDl(..0xHI?.@.
     5ef:	38 7c 54 54 5c 18 00 00 48 7e 7f 49 03 02 00 00     8|TT\...H~.I....
     5ff:	98 bc a4 a4 f8 7c 04 00 41 7f 7f 08 04 7c 78 00     .....|..A....|x.
     60f:	00 44 7d 7d 40 00 00 00 40 c4 84 fd 7d 00 00 00     .D}}@...@...}...
     61f:	41 7f 7f 10 38 6c 44 00 00 41 7f 7f 40 00 00 00     A...8lD..A..@...
     62f:	7c 7c 0c 18 0c 7c 78 00 7c 7c 04 04 7c 78 00 00     ||...|x.||..|x..
     63f:	38 7c 44 44 7c 38 00 00 84 fc f8 a4 24 3c 18 00     8|DD|8......$<..
     64f:	18 3c 24 a4 f8 fc 84 00 44 7c 78 44 1c 18 00 00     .<$.....D|xD....
     65f:	48 5c 54 54 74 24 00 00 00 04 3e 7f 44 24 00 00     H\TTt$....>.D$..
     66f:	3c 7c 40 40 3c 7c 40 00 1c 3c 60 60 3c 1c 00 00     <|@@<|@..<``<...
     67f:	3c 7c 60 30 60 7c 3c 00 44 6c 38 10 38 6c 44 00     <|`0`|<.Dl8.8lD.
     68f:	9c bc a0 a0 fc 7c 00 00 4c 64 74 5c 4c 64 00 00     .....|..Ldt\Ld..
     69f:	08 08 3e 77 41 41 00 00 00 00 00 77 77 00 00 00     ..>wAA.....ww...
     6af:	41 41 77 3e 08 08 00 00 02 03 01 03 02 03 01 00     AAw>............
	...

000006c0 <__ctors_end>:
     6c0:	11 24       	eor	r1, r1
     6c2:	1f be       	out	0x3f, r1	; 63
     6c4:	cf ef       	ldi	r28, 0xFF	; 255
     6c6:	d4 e0       	ldi	r29, 0x04	; 4
     6c8:	de bf       	out	0x3e, r29	; 62
     6ca:	cd bf       	out	0x3d, r28	; 61

000006cc <__do_copy_data>:
     6cc:	12 e0       	ldi	r17, 0x02	; 2
     6ce:	a0 e0       	ldi	r26, 0x00	; 0
     6d0:	b1 e0       	ldi	r27, 0x01	; 1
     6d2:	ea e3       	ldi	r30, 0x3A	; 58
     6d4:	fa e1       	ldi	r31, 0x1A	; 26
     6d6:	02 c0       	rjmp	.+4      	; 0x6dc <__do_copy_data+0x10>
     6d8:	05 90       	lpm	r0, Z+
     6da:	0d 92       	st	X+, r0
     6dc:	a8 30       	cpi	r26, 0x08	; 8
     6de:	b1 07       	cpc	r27, r17
     6e0:	d9 f7       	brne	.-10     	; 0x6d8 <__do_copy_data+0xc>

000006e2 <__do_clear_bss>:
     6e2:	22 e0       	ldi	r18, 0x02	; 2
     6e4:	a8 e0       	ldi	r26, 0x08	; 8
     6e6:	b2 e0       	ldi	r27, 0x02	; 2
     6e8:	01 c0       	rjmp	.+2      	; 0x6ec <.do_clear_bss_start>

000006ea <.do_clear_bss_loop>:
     6ea:	1d 92       	st	X+, r1

000006ec <.do_clear_bss_start>:
     6ec:	ae 31       	cpi	r26, 0x1E	; 30
     6ee:	b2 07       	cpc	r27, r18
     6f0:	e1 f7       	brne	.-8      	; 0x6ea <.do_clear_bss_loop>
     6f2:	0e 94 c3 04 	call	0x986	; 0x986 <main>
     6f6:	0c 94 1b 0d 	jmp	0x1a36	; 0x1a36 <_exit>

000006fa <__bad_interrupt>:
     6fa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000006fe <can_init>:
uint8_t buffer_number = 0;


uint8_t can_init(){
	
	mcp2515_init();
     6fe:	0e 94 53 04 	call	0x8a6	; 0x8a6 <mcp2515_init>
	
	
	//mcp2515_bit_modify(MCP_CANINTE,0b00001111,0b00001111);
	mcp2515_write(MCP_CANCTRL, MODE_LOOPBACK);	
     702:	60 e4       	ldi	r22, 0x40	; 64
     704:	8f e0       	ldi	r24, 0x0F	; 15
     706:	0e 94 36 04 	call	0x86c	; 0x86c <mcp2515_write>
}
     70a:	08 95       	ret

0000070c <send_can_msg>:

void send_can_msg(can_message *msg){
     70c:	0f 93       	push	r16
     70e:	1f 93       	push	r17
     710:	cf 93       	push	r28
     712:	8c 01       	movw	r16, r24
	
	mcp2515_write(0x31+16*buffer_number, msg->id>>3);
     714:	fc 01       	movw	r30, r24
     716:	60 81       	ld	r22, Z
     718:	71 81       	ldd	r23, Z+1	; 0x01
     71a:	76 95       	lsr	r23
     71c:	67 95       	ror	r22
     71e:	76 95       	lsr	r23
     720:	67 95       	ror	r22
     722:	76 95       	lsr	r23
     724:	67 95       	ror	r22
     726:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <buffer_number>
     72a:	82 95       	swap	r24
     72c:	80 7f       	andi	r24, 0xF0	; 240
     72e:	8f 5c       	subi	r24, 0xCF	; 207
     730:	0e 94 36 04 	call	0x86c	; 0x86c <mcp2515_write>
	uint8_t lowbufferval = mcp2515_read(0x32);
     734:	82 e3       	ldi	r24, 0x32	; 50
     736:	0e 94 28 04 	call	0x850	; 0x850 <mcp2515_read>
	
	mcp2515_write(0x32+16*buffer_number, 0x00ff & ((lowbufferval&0b00011111) | (msg->id<<5)));
     73a:	f8 01       	movw	r30, r16
     73c:	60 81       	ld	r22, Z
     73e:	62 95       	swap	r22
     740:	66 0f       	add	r22, r22
     742:	60 7e       	andi	r22, 0xE0	; 224
     744:	8f 71       	andi	r24, 0x1F	; 31
     746:	68 2b       	or	r22, r24
     748:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <buffer_number>
     74c:	82 95       	swap	r24
     74e:	80 7f       	andi	r24, 0xF0	; 240
     750:	8e 5c       	subi	r24, 0xCE	; 206
     752:	0e 94 36 04 	call	0x86c	; 0x86c <mcp2515_write>
	
	uint8_t regvalue = mcp2515_read(0x35);
     756:	85 e3       	ldi	r24, 0x35	; 53
     758:	0e 94 28 04 	call	0x850	; 0x850 <mcp2515_read>
	mcp2515_write(0x35+16*buffer_number, (regvalue&0b11110000) | msg->data_length);
     75c:	80 7f       	andi	r24, 0xF0	; 240
     75e:	f8 01       	movw	r30, r16
     760:	92 81       	ldd	r25, Z+2	; 0x02
     762:	68 2f       	mov	r22, r24
     764:	69 2b       	or	r22, r25
     766:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <buffer_number>
     76a:	82 95       	swap	r24
     76c:	80 7f       	andi	r24, 0xF0	; 240
     76e:	8b 5c       	subi	r24, 0xCB	; 203
     770:	0e 94 36 04 	call	0x86c	; 0x86c <mcp2515_write>
	
	for(uint8_t m = 0; m < msg->data_length; m++){
     774:	f8 01       	movw	r30, r16
     776:	82 81       	ldd	r24, Z+2	; 0x02
     778:	88 23       	and	r24, r24
     77a:	a9 f0       	breq	.+42     	; 0x7a6 <send_can_msg+0x9a>
     77c:	c0 e0       	ldi	r28, 0x00	; 0
		mcp2515_write(0x36+m+16*buffer_number, msg->data[m]);
     77e:	f8 01       	movw	r30, r16
     780:	ec 0f       	add	r30, r28
     782:	f1 1d       	adc	r31, r1
     784:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <buffer_number>
     788:	9c 2f       	mov	r25, r28
     78a:	20 e1       	ldi	r18, 0x10	; 16
     78c:	82 9f       	mul	r24, r18
     78e:	90 0d       	add	r25, r0
     790:	11 24       	eor	r1, r1
     792:	89 2f       	mov	r24, r25
     794:	63 81       	ldd	r22, Z+3	; 0x03
     796:	8a 5c       	subi	r24, 0xCA	; 202
     798:	0e 94 36 04 	call	0x86c	; 0x86c <mcp2515_write>
	mcp2515_write(0x32+16*buffer_number, 0x00ff & ((lowbufferval&0b00011111) | (msg->id<<5)));
	
	uint8_t regvalue = mcp2515_read(0x35);
	mcp2515_write(0x35+16*buffer_number, (regvalue&0b11110000) | msg->data_length);
	
	for(uint8_t m = 0; m < msg->data_length; m++){
     79c:	cf 5f       	subi	r28, 0xFF	; 255
     79e:	f8 01       	movw	r30, r16
     7a0:	82 81       	ldd	r24, Z+2	; 0x02
     7a2:	c8 17       	cp	r28, r24
     7a4:	60 f3       	brcs	.-40     	; 0x77e <send_can_msg+0x72>
		mcp2515_write(0x36+m+16*buffer_number, msg->data[m]);
	}
	
	mcp2515_request_to_send(MCP_RTS_TX0+buffer_number);
     7a6:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <buffer_number>
     7aa:	8f 57       	subi	r24, 0x7F	; 127
     7ac:	0e 94 48 04 	call	0x890	; 0x890 <mcp2515_request_to_send>
}
     7b0:	cf 91       	pop	r28
     7b2:	1f 91       	pop	r17
     7b4:	0f 91       	pop	r16
     7b6:	08 95       	ret

000007b8 <receive_can_msg>:

can_message* receive_can_msg(uint8_t buffer_number){
     7b8:	0f 93       	push	r16
     7ba:	1f 93       	push	r17
     7bc:	cf 93       	push	r28
     7be:	df 93       	push	r29
	static can_message msg;
	msg.id = 0x00;
     7c0:	08 e0       	ldi	r16, 0x08	; 8
     7c2:	12 e0       	ldi	r17, 0x02	; 2
     7c4:	f8 01       	movw	r30, r16
     7c6:	11 82       	std	Z+1, r1	; 0x01
     7c8:	10 82       	st	Z, r1
	uint16_t idHigh = mcp2515_read(0x31+16*buffer_number);
     7ca:	c8 2f       	mov	r28, r24
     7cc:	c2 95       	swap	r28
     7ce:	c0 7f       	andi	r28, 0xF0	; 240
     7d0:	81 e3       	ldi	r24, 0x31	; 49
     7d2:	8c 0f       	add	r24, r28
     7d4:	0e 94 28 04 	call	0x850	; 0x850 <mcp2515_read>
     7d8:	d8 2f       	mov	r29, r24
	uint16_t idLow = mcp2515_read(0x32+16*buffer_number);
     7da:	82 e3       	ldi	r24, 0x32	; 50
     7dc:	8c 0f       	add	r24, r28
     7de:	0e 94 28 04 	call	0x850	; 0x850 <mcp2515_read>
	
	msg.id |= idLow>>5;
	msg.id |= idHigh<<3;
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	96 95       	lsr	r25
     7e6:	87 95       	ror	r24
     7e8:	92 95       	swap	r25
     7ea:	82 95       	swap	r24
     7ec:	8f 70       	andi	r24, 0x0F	; 15
     7ee:	89 27       	eor	r24, r25
     7f0:	9f 70       	andi	r25, 0x0F	; 15
     7f2:	89 27       	eor	r24, r25
     7f4:	2d 2f       	mov	r18, r29
     7f6:	30 e0       	ldi	r19, 0x00	; 0
     7f8:	22 0f       	add	r18, r18
     7fa:	33 1f       	adc	r19, r19
     7fc:	22 0f       	add	r18, r18
     7fe:	33 1f       	adc	r19, r19
     800:	22 0f       	add	r18, r18
     802:	33 1f       	adc	r19, r19
     804:	82 2b       	or	r24, r18
     806:	93 2b       	or	r25, r19
     808:	f8 01       	movw	r30, r16
     80a:	20 81       	ld	r18, Z
     80c:	31 81       	ldd	r19, Z+1	; 0x01
     80e:	82 2b       	or	r24, r18
     810:	93 2b       	or	r25, r19
     812:	91 83       	std	Z+1, r25	; 0x01
     814:	80 83       	st	Z, r24
	
	uint8_t length;
	length = 0b00001111 & mcp2515_read(0x35);
     816:	85 e3       	ldi	r24, 0x35	; 53
     818:	0e 94 28 04 	call	0x850	; 0x850 <mcp2515_read>
     81c:	8f 70       	andi	r24, 0x0F	; 15
	msg.data_length = length;
     81e:	f8 01       	movw	r30, r16
     820:	82 83       	std	Z+2, r24	; 0x02
	
	for(uint8_t m = 0; m < length; m++){
     822:	88 23       	and	r24, r24
     824:	71 f0       	breq	.+28     	; 0x842 <receive_can_msg+0x8a>
     826:	ca 5c       	subi	r28, 0xCA	; 202
     828:	0b e0       	ldi	r16, 0x0B	; 11
     82a:	12 e0       	ldi	r17, 0x02	; 2
     82c:	dc 2f       	mov	r29, r28
     82e:	d8 0f       	add	r29, r24
		msg.data[m] = mcp2515_read(0x36+m+16*buffer_number);
     830:	8c 2f       	mov	r24, r28
     832:	0e 94 28 04 	call	0x850	; 0x850 <mcp2515_read>
     836:	f8 01       	movw	r30, r16
     838:	81 93       	st	Z+, r24
     83a:	8f 01       	movw	r16, r30
     83c:	cf 5f       	subi	r28, 0xFF	; 255
	
	uint8_t length;
	length = 0b00001111 & mcp2515_read(0x35);
	msg.data_length = length;
	
	for(uint8_t m = 0; m < length; m++){
     83e:	cd 13       	cpse	r28, r29
     840:	f7 cf       	rjmp	.-18     	; 0x830 <receive_can_msg+0x78>
	}
	
	//flag recieved
	
	return &msg;
     842:	88 e0       	ldi	r24, 0x08	; 8
     844:	92 e0       	ldi	r25, 0x02	; 2
     846:	df 91       	pop	r29
     848:	cf 91       	pop	r28
     84a:	1f 91       	pop	r17
     84c:	0f 91       	pop	r16
     84e:	08 95       	ret

00000850 <mcp2515_read>:
	spi_write(address);
	spi_write(mask);
	spi_write(data);
	
	PORTB |= (1<<PB4);
}
     850:	cf 93       	push	r28
     852:	c8 2f       	mov	r28, r24
     854:	c4 98       	cbi	0x18, 4	; 24
     856:	83 e0       	ldi	r24, 0x03	; 3
     858:	0e 94 ba 04 	call	0x974	; 0x974 <spi_write>
     85c:	8c 2f       	mov	r24, r28
     85e:	0e 94 ba 04 	call	0x974	; 0x974 <spi_write>
     862:	0e 94 be 04 	call	0x97c	; 0x97c <spi_read>
     866:	c4 9a       	sbi	0x18, 4	; 24
     868:	cf 91       	pop	r28
     86a:	08 95       	ret

0000086c <mcp2515_write>:
     86c:	cf 93       	push	r28
     86e:	df 93       	push	r29
     870:	d8 2f       	mov	r29, r24
     872:	c6 2f       	mov	r28, r22
     874:	c4 98       	cbi	0x18, 4	; 24
     876:	82 e0       	ldi	r24, 0x02	; 2
     878:	0e 94 ba 04 	call	0x974	; 0x974 <spi_write>
     87c:	8d 2f       	mov	r24, r29
     87e:	0e 94 ba 04 	call	0x974	; 0x974 <spi_write>
     882:	8c 2f       	mov	r24, r28
     884:	0e 94 ba 04 	call	0x974	; 0x974 <spi_write>
     888:	c4 9a       	sbi	0x18, 4	; 24
     88a:	df 91       	pop	r29
     88c:	cf 91       	pop	r28
     88e:	08 95       	ret

00000890 <mcp2515_request_to_send>:
     890:	c4 98       	cbi	0x18, 4	; 24
     892:	0e 94 ba 04 	call	0x974	; 0x974 <spi_write>
     896:	c4 9a       	sbi	0x18, 4	; 24
     898:	08 95       	ret

0000089a <mcp2515_reset>:
void mcp2515_reset(){
	PORTB &= ~(1<<PB4);
     89a:	c4 98       	cbi	0x18, 4	; 24
	
	spi_write(MCP_RESET);
     89c:	80 ec       	ldi	r24, 0xC0	; 192
     89e:	0e 94 ba 04 	call	0x974	; 0x974 <spi_write>
	
	PORTB |= (1<<PB4);
     8a2:	c4 9a       	sbi	0x18, 4	; 24
     8a4:	08 95       	ret

000008a6 <mcp2515_init>:
//MCP_CANINTF to read and clear interupts, need to clear before we can continue transmitting

uint8_t mcp2515_init(){
	uint8_t value;
	
	spi_init();
     8a6:	0e 94 b5 04 	call	0x96a	; 0x96a <spi_init>
	mcp2515_reset();
     8aa:	0e 94 4d 04 	call	0x89a	; 0x89a <mcp2515_reset>
	//sei();
	
	/*value = mcp2515_read(MCP_CANCTRL);
	value = MODE_LOOPBACK; */
	mcp2515_write(MCP_CANCTRL, MODE_LOOPBACK);	
     8ae:	60 e4       	ldi	r22, 0x40	; 64
     8b0:	8f e0       	ldi	r24, 0x0F	; 15
     8b2:	0e 94 36 04 	call	0x86c	; 0x86c <mcp2515_write>
}
     8b6:	08 95       	ret

000008b8 <new_menu>:
	"option5",
	"option6",
	"option7",
	"option8",
};
menu* new_menu(menu* parent){
     8b8:	cf 93       	push	r28
     8ba:	df 93       	push	r29
     8bc:	ec 01       	movw	r28, r24
	menu* mymenu = malloc(sizeof(menu));
     8be:	81 e2       	ldi	r24, 0x21	; 33
     8c0:	90 e0       	ldi	r25, 0x00	; 0
     8c2:	0e 94 b8 07 	call	0xf70	; 0xf70 <malloc>
     8c6:	aa e0       	ldi	r26, 0x0A	; 10
     8c8:	b1 e0       	ldi	r27, 0x01	; 1
     8ca:	fc 01       	movw	r30, r24
     8cc:	4a e1       	ldi	r20, 0x1A	; 26
     8ce:	51 e0       	ldi	r21, 0x01	; 1
	for(unsigned int i = 0; i < 8; i++){
		mymenu->links[i] = NULL;
     8d0:	11 8a       	std	Z+17, r1	; 0x11
     8d2:	10 8a       	std	Z+16, r1	; 0x10
		mymenu->labels[i] = string_list[i];
     8d4:	2d 91       	ld	r18, X+
     8d6:	3d 91       	ld	r19, X+
     8d8:	21 93       	st	Z+, r18
     8da:	31 93       	st	Z+, r19
	"option7",
	"option8",
};
menu* new_menu(menu* parent){
	menu* mymenu = malloc(sizeof(menu));
	for(unsigned int i = 0; i < 8; i++){
     8dc:	a4 17       	cp	r26, r20
     8de:	b5 07       	cpc	r27, r21
     8e0:	b9 f7       	brne	.-18     	; 0x8d0 <new_menu+0x18>
		mymenu->links[i] = NULL;
		mymenu->labels[i] = string_list[i];
	}
	
	(mymenu->selected) = 0;
     8e2:	fc 01       	movw	r30, r24
     8e4:	10 a2       	std	Z+32, r1	; 0x20
	mymenu->links[7] = (parent);
     8e6:	d7 8f       	std	Z+31, r29	; 0x1f
     8e8:	c6 8f       	std	Z+30, r28	; 0x1e
	mymenu->labels[7] = "<- Back";
     8ea:	2c e1       	ldi	r18, 0x1C	; 28
     8ec:	31 e0       	ldi	r19, 0x01	; 1
     8ee:	37 87       	std	Z+15, r19	; 0x0f
     8f0:	26 87       	std	Z+14, r18	; 0x0e
	return mymenu;
}
     8f2:	df 91       	pop	r29
     8f4:	cf 91       	pop	r28
     8f6:	08 95       	ret

000008f8 <invert_selected>:
void change_menu(menu* next_menu, menu** menuHead){
	write_menu_to_screen(next_menu);
	*menuHead = next_menu;
}

void invert_selected(menu* menuPointer){
     8f8:	cf 93       	push	r28
     8fa:	df 93       	push	r29
     8fc:	ec 01       	movw	r28, r24
	go_to_column(0);
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	0e 94 ad 05 	call	0xb5a	; 0xb5a <go_to_column>
	oled_write_string_inverted((menuPointer->selected), menuPointer->labels[(menuPointer->selected)], 8);
     904:	88 a1       	ldd	r24, Y+32	; 0x20
     906:	e8 2f       	mov	r30, r24
     908:	f0 e0       	ldi	r31, 0x00	; 0
     90a:	ee 0f       	add	r30, r30
     90c:	ff 1f       	adc	r31, r31
     90e:	ec 0f       	add	r30, r28
     910:	fd 1f       	adc	r31, r29
     912:	60 81       	ld	r22, Z
     914:	71 81       	ldd	r23, Z+1	; 0x01
     916:	48 e0       	ldi	r20, 0x08	; 8
     918:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <oled_write_string_inverted>
}
     91c:	df 91       	pop	r29
     91e:	cf 91       	pop	r28
     920:	08 95       	ret

00000922 <write_menu_to_screen>:
	mymenu->links[7] = (parent);
	mymenu->labels[7] = "<- Back";
	return mymenu;
}

void write_menu_to_screen(menu* menuPointer){
     922:	ff 92       	push	r15
     924:	0f 93       	push	r16
     926:	1f 93       	push	r17
     928:	cf 93       	push	r28
     92a:	df 93       	push	r29
     92c:	f8 2e       	mov	r15, r24
     92e:	d9 2f       	mov	r29, r25
	clear_oled_new();
     930:	0e 94 cf 05 	call	0xb9e	; 0xb9e <clear_oled_new>
     934:	0f 2d       	mov	r16, r15
     936:	1d 2f       	mov	r17, r29
     938:	c0 e0       	ldi	r28, 0x00	; 0
	for(unsigned int i = 0; i < 8; i++){
		go_to_column(0);
     93a:	80 e0       	ldi	r24, 0x00	; 0
     93c:	0e 94 ad 05 	call	0xb5a	; 0xb5a <go_to_column>
		oled_write_string(i, menuPointer->labels[i], 8);
     940:	f8 01       	movw	r30, r16
     942:	61 91       	ld	r22, Z+
     944:	71 91       	ld	r23, Z+
     946:	8f 01       	movw	r16, r30
     948:	48 e0       	ldi	r20, 0x08	; 8
     94a:	8c 2f       	mov	r24, r28
     94c:	0e 94 3d 06 	call	0xc7a	; 0xc7a <oled_write_string>
     950:	cf 5f       	subi	r28, 0xFF	; 255
	return mymenu;
}

void write_menu_to_screen(menu* menuPointer){
	clear_oled_new();
	for(unsigned int i = 0; i < 8; i++){
     952:	c8 30       	cpi	r28, 0x08	; 8
     954:	91 f7       	brne	.-28     	; 0x93a <write_menu_to_screen+0x18>
		go_to_column(0);
		oled_write_string(i, menuPointer->labels[i], 8);
	}
	invert_selected(menuPointer);
     956:	8f 2d       	mov	r24, r15
     958:	9d 2f       	mov	r25, r29
     95a:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <invert_selected>
}
     95e:	df 91       	pop	r29
     960:	cf 91       	pop	r28
     962:	1f 91       	pop	r17
     964:	0f 91       	pop	r16
     966:	ff 90       	pop	r15
     968:	08 95       	ret

0000096a <spi_init>:
	spi_write(0xf0);
	return SPDR;
}

void spi_init(){
	DDRB = (1<<DDB4)|(1<<DDB5)|(1<<DDB7); //chip select, mosi, clock
     96a:	80 eb       	ldi	r24, 0xB0	; 176
     96c:	87 bb       	out	0x17, r24	; 23
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
     96e:	81 e5       	ldi	r24, 0x51	; 81
     970:	8d b9       	out	0x0d, r24	; 13
     972:	08 95       	ret

00000974 <spi_write>:
}

void spi_write(char data){
	SPDR = data;
     974:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF))){
     976:	77 9b       	sbis	0x0e, 7	; 14
     978:	fe cf       	rjmp	.-4      	; 0x976 <spi_write+0x2>
		
	}
     97a:	08 95       	ret

0000097c <spi_read>:



uint8_t spi_read(){
	
	spi_write(0xf0);
     97c:	80 ef       	ldi	r24, 0xF0	; 240
     97e:	0e 94 ba 04 	call	0x974	; 0x974 <spi_write>
	return SPDR;
     982:	8f b1       	in	r24, 0x0f	; 15
}
     984:	08 95       	ret

00000986 <main>:
} menuItem;




int main(void){
     986:	cf 93       	push	r28
     988:	df 93       	push	r29
     98a:	cd b7       	in	r28, 0x3d	; 61
     98c:	de b7       	in	r29, 0x3e	; 62
     98e:	2b 97       	sbiw	r28, 0x0b	; 11
     990:	0f b6       	in	r0, 0x3f	; 63
     992:	f8 94       	cli
     994:	de bf       	out	0x3e, r29	; 62
     996:	0f be       	out	0x3f, r0	; 63
     998:	cd bf       	out	0x3d, r28	; 61
	
	joyVal joystick; 
	sliderVal slider; 
	volatile amap* atmelMap = (amap*) BASE;
     99a:	00 91 1a 01 	lds	r16, 0x011A	; 0x80011a <BASE>
     99e:	10 91 1b 01 	lds	r17, 0x011B	; 0x80011b <BASE+0x1>
	
	MCUCR |= (1<<SRE);
     9a2:	85 b7       	in	r24, 0x35	; 53
     9a4:	80 68       	ori	r24, 0x80	; 128
     9a6:	85 bf       	out	0x35, r24	; 53
	
	//DDRC = 0xFF;
	//PORTC = 0x00;
	
	SFIOR &= ~(1<<XMM0);
     9a8:	80 b7       	in	r24, 0x30	; 48
     9aa:	87 7f       	andi	r24, 0xF7	; 247
     9ac:	80 bf       	out	0x30, r24	; 48
	SFIOR &= ~(1<<XMM1);
     9ae:	80 b7       	in	r24, 0x30	; 48
     9b0:	8f 7e       	andi	r24, 0xEF	; 239
     9b2:	80 bf       	out	0x30, r24	; 48
	SFIOR |= (1<<XMM2);
     9b4:	80 b7       	in	r24, 0x30	; 48
     9b6:	80 62       	ori	r24, 0x20	; 32
     9b8:	80 bf       	out	0x30, r24	; 48
	
	DDRA |= 0x18;
     9ba:	8a b3       	in	r24, 0x1a	; 26
     9bc:	88 61       	ori	r24, 0x18	; 24
     9be:	8a bb       	out	0x1a, r24	; 26
	TCCR2 |= (1<<WGM20);	
	TCCR2 |= (1<<COM21);
	TCCR2 |= (1<<COM20);
	*/

	USART_Init ( MYUBRR );
     9c0:	8f e1       	ldi	r24, 0x1F	; 31
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	0e 94 80 07 	call	0xf00	; 0xf00 <USART_Init>
	SRAM_test(); _delay_ms(5000);
     9c8:	0e 94 2c 07 	call	0xe58	; 0xe58 <SRAM_test>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9cc:	2f e3       	ldi	r18, 0x3F	; 63
     9ce:	82 e4       	ldi	r24, 0x42	; 66
     9d0:	9f e0       	ldi	r25, 0x0F	; 15
     9d2:	21 50       	subi	r18, 0x01	; 1
     9d4:	80 40       	sbci	r24, 0x00	; 0
     9d6:	90 40       	sbci	r25, 0x00	; 0
     9d8:	e1 f7       	brne	.-8      	; 0x9d2 <main+0x4c>
     9da:	00 c0       	rjmp	.+0      	; 0x9dc <main+0x56>
     9dc:	00 00       	nop
		


	oled_init(atmelMap);
     9de:	c8 01       	movw	r24, r16
     9e0:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <oled_init>
	clear_oled(atmelMap);
     9e4:	c8 01       	movw	r24, r16
     9e6:	0e 94 b7 05 	call	0xb6e	; 0xb6e <clear_oled>
	
		
	go_to_line(7);
     9ea:	87 e0       	ldi	r24, 0x07	; 7
     9ec:	0e 94 a8 05 	call	0xb50	; 0xb50 <go_to_line>
     9f0:	0c e5       	ldi	r16, 0x5C	; 92
     9f2:	10 e0       	ldi	r17, 0x00	; 0
		
		_delay_ms(20);
		
	}*/
	for(int i = 0; i < 92; i++){
		printf("\n");
     9f4:	8a e0       	ldi	r24, 0x0A	; 10
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	0e 94 96 09 	call	0x132c	; 0x132c <putchar>
     9fc:	01 50       	subi	r16, 0x01	; 1
     9fe:	11 09       	sbc	r17, r1
		}
		
		_delay_ms(20);
		
	}*/
	for(int i = 0; i < 92; i++){
     a00:	c9 f7       	brne	.-14     	; 0x9f4 <main+0x6e>
	}
	
	menu** headPointer = NULL;
	
	menu* mainMenu;
	mainMenu = new_menu(NULL);
     a02:	80 e0       	ldi	r24, 0x00	; 0
     a04:	90 e0       	ldi	r25, 0x00	; 0
     a06:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <new_menu>
     a0a:	8c 01       	movw	r16, r24
	menu* submenu = new_menu(mainMenu);
     a0c:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <new_menu>
     a10:	fc 01       	movw	r30, r24
	submenu->labels[0] = "laks1";
     a12:	82 e7       	ldi	r24, 0x72	; 114
     a14:	91 e0       	ldi	r25, 0x01	; 1
     a16:	91 83       	std	Z+1, r25	; 0x01
     a18:	80 83       	st	Z, r24
	submenu->labels[1] = "laks2";
     a1a:	88 e7       	ldi	r24, 0x78	; 120
     a1c:	91 e0       	ldi	r25, 0x01	; 1
     a1e:	93 83       	std	Z+3, r25	; 0x03
     a20:	82 83       	std	Z+2, r24	; 0x02
	submenu->labels[2] = "laks3";
     a22:	8e e7       	ldi	r24, 0x7E	; 126
     a24:	91 e0       	ldi	r25, 0x01	; 1
     a26:	95 83       	std	Z+5, r25	; 0x05
     a28:	84 83       	std	Z+4, r24	; 0x04
	submenu->labels[3] = "laks4";
     a2a:	84 e8       	ldi	r24, 0x84	; 132
     a2c:	91 e0       	ldi	r25, 0x01	; 1
     a2e:	97 83       	std	Z+7, r25	; 0x07
     a30:	86 83       	std	Z+6, r24	; 0x06
	submenu->labels[4] = "";
     a32:	87 e0       	ldi	r24, 0x07	; 7
     a34:	92 e0       	ldi	r25, 0x02	; 2
     a36:	91 87       	std	Z+9, r25	; 0x09
     a38:	80 87       	std	Z+8, r24	; 0x08
	submenu->labels[5] = "";
     a3a:	93 87       	std	Z+11, r25	; 0x0b
     a3c:	82 87       	std	Z+10, r24	; 0x0a
	submenu->labels[6] = "";
     a3e:	95 87       	std	Z+13, r25	; 0x0d
     a40:	84 87       	std	Z+12, r24	; 0x0c
	mainMenu->links[0] = submenu;
     a42:	d8 01       	movw	r26, r16
     a44:	51 96       	adiw	r26, 0x11	; 17
     a46:	fc 93       	st	X, r31
     a48:	ee 93       	st	-X, r30
     a4a:	50 97       	sbiw	r26, 0x10	; 16
	write_menu_to_screen(mainMenu);
     a4c:	c8 01       	movw	r24, r16
     a4e:	0e 94 91 04 	call	0x922	; 0x922 <write_menu_to_screen>
	
	headPointer = &mainMenu;
	
	
	can_init();
     a52:	0e 94 7f 03 	call	0x6fe	; 0x6fe <can_init>
	
	can_message msgToSend;
	msgToSend.data_length = 8;
     a56:	88 e0       	ldi	r24, 0x08	; 8
     a58:	8b 83       	std	Y+3, r24	; 0x03
	for(int i = 0; i < 8; i++){
		msgToSend.data[i] = 97+i;
     a5a:	81 e6       	ldi	r24, 0x61	; 97
     a5c:	8c 83       	std	Y+4, r24	; 0x04
     a5e:	82 e6       	ldi	r24, 0x62	; 98
     a60:	8d 83       	std	Y+5, r24	; 0x05
     a62:	83 e6       	ldi	r24, 0x63	; 99
     a64:	8e 83       	std	Y+6, r24	; 0x06
     a66:	84 e6       	ldi	r24, 0x64	; 100
     a68:	8f 83       	std	Y+7, r24	; 0x07
     a6a:	85 e6       	ldi	r24, 0x65	; 101
     a6c:	88 87       	std	Y+8, r24	; 0x08
     a6e:	86 e6       	ldi	r24, 0x66	; 102
     a70:	89 87       	std	Y+9, r24	; 0x09
     a72:	87 e6       	ldi	r24, 0x67	; 103
     a74:	8a 87       	std	Y+10, r24	; 0x0a
     a76:	88 e6       	ldi	r24, 0x68	; 104
     a78:	8b 87       	std	Y+11, r24	; 0x0b
	}
	msgToSend.id = 0x000f;
     a7a:	8f e0       	ldi	r24, 0x0F	; 15
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	9a 83       	std	Y+2, r25	; 0x02
     a80:	89 83       	std	Y+1, r24	; 0x01
	
	can_message* msgToReceive;
	
	send_can_msg(&msgToSend);
     a82:	ce 01       	movw	r24, r28
     a84:	01 96       	adiw	r24, 0x01	; 1
     a86:	0e 94 86 03 	call	0x70c	; 0x70c <send_can_msg>
	msgToReceive = receive_can_msg(0);
     a8a:	80 e0       	ldi	r24, 0x00	; 0
     a8c:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <receive_can_msg>
     a90:	8c 01       	movw	r16, r24
     a92:	5c 01       	movw	r10, r24
     a94:	bb e0       	ldi	r27, 0x0B	; 11
     a96:	ab 0e       	add	r10, r27
     a98:	b1 1c       	adc	r11, r1
	
	while(1){
		for(int i = 0; i < 8; i++){
			printf("%c | %d | %d \r",msgToReceive->data[i],msgToReceive->data_length,msgToReceive->id);
     a9a:	0f 2e       	mov	r0, r31
     a9c:	fa e8       	ldi	r31, 0x8A	; 138
     a9e:	cf 2e       	mov	r12, r31
     aa0:	f1 e0       	ldi	r31, 0x01	; 1
     aa2:	df 2e       	mov	r13, r31
     aa4:	f0 2d       	mov	r31, r0
     aa6:	78 01       	movw	r14, r16
     aa8:	e3 e0       	ldi	r30, 0x03	; 3
     aaa:	ee 0e       	add	r14, r30
     aac:	f1 1c       	adc	r15, r1
     aae:	d7 01       	movw	r26, r14
     ab0:	8d 91       	ld	r24, X+
     ab2:	7d 01       	movw	r14, r26
     ab4:	f8 01       	movw	r30, r16
     ab6:	91 81       	ldd	r25, Z+1	; 0x01
     ab8:	9f 93       	push	r25
     aba:	90 81       	ld	r25, Z
     abc:	9f 93       	push	r25
     abe:	92 81       	ldd	r25, Z+2	; 0x02
     ac0:	1f 92       	push	r1
     ac2:	9f 93       	push	r25
     ac4:	1f 92       	push	r1
     ac6:	8f 93       	push	r24
     ac8:	df 92       	push	r13
     aca:	cf 92       	push	r12
     acc:	0e 94 80 09 	call	0x1300	; 0x1300 <printf>
     ad0:	ff e3       	ldi	r31, 0x3F	; 63
     ad2:	22 e4       	ldi	r18, 0x42	; 66
     ad4:	8f e0       	ldi	r24, 0x0F	; 15
     ad6:	f1 50       	subi	r31, 0x01	; 1
     ad8:	20 40       	sbci	r18, 0x00	; 0
     ada:	80 40       	sbci	r24, 0x00	; 0
     adc:	e1 f7       	brne	.-8      	; 0xad6 <main+0x150>
     ade:	00 c0       	rjmp	.+0      	; 0xae0 <main+0x15a>
     ae0:	00 00       	nop
	
	send_can_msg(&msgToSend);
	msgToReceive = receive_can_msg(0);
	
	while(1){
		for(int i = 0; i < 8; i++){
     ae2:	0f b6       	in	r0, 0x3f	; 63
     ae4:	f8 94       	cli
     ae6:	de bf       	out	0x3e, r29	; 62
     ae8:	0f be       	out	0x3f, r0	; 63
     aea:	cd bf       	out	0x3d, r28	; 61
     aec:	ea 14       	cp	r14, r10
     aee:	fb 04       	cpc	r15, r11
     af0:	f1 f6       	brne	.-68     	; 0xaae <main+0x128>
     af2:	d9 cf       	rjmp	.-78     	; 0xaa6 <main+0x120>

00000af4 <oled_init>:
	atmelMap->OLED_CMD[1] = 0xB1;
	atmelMap->OLED_CMD[1] = 0x00;
	atmelMap->OLED_CMD[1] = 0x10;
}
void oled_write(amap* atmelMap){
	atmelMap->OLED_DATA[1] = 0x0F;
     af4:	e0 e0       	ldi	r30, 0x00	; 0
     af6:	f0 e1       	ldi	r31, 0x10	; 16
     af8:	8e ea       	ldi	r24, 0xAE	; 174
     afa:	80 83       	st	Z, r24
     afc:	81 ea       	ldi	r24, 0xA1	; 161
     afe:	80 83       	st	Z, r24
     b00:	8a ed       	ldi	r24, 0xDA	; 218
     b02:	80 83       	st	Z, r24
     b04:	82 e1       	ldi	r24, 0x12	; 18
     b06:	80 83       	st	Z, r24
     b08:	88 ec       	ldi	r24, 0xC8	; 200
     b0a:	80 83       	st	Z, r24
     b0c:	88 ea       	ldi	r24, 0xA8	; 168
     b0e:	80 83       	st	Z, r24
     b10:	8f e3       	ldi	r24, 0x3F	; 63
     b12:	80 83       	st	Z, r24
     b14:	85 ed       	ldi	r24, 0xD5	; 213
     b16:	80 83       	st	Z, r24
     b18:	80 e8       	ldi	r24, 0x80	; 128
     b1a:	80 83       	st	Z, r24
     b1c:	81 e8       	ldi	r24, 0x81	; 129
     b1e:	80 83       	st	Z, r24
     b20:	80 e5       	ldi	r24, 0x50	; 80
     b22:	80 83       	st	Z, r24
     b24:	89 ed       	ldi	r24, 0xD9	; 217
     b26:	80 83       	st	Z, r24
     b28:	81 e2       	ldi	r24, 0x21	; 33
     b2a:	80 83       	st	Z, r24
     b2c:	80 e2       	ldi	r24, 0x20	; 32
     b2e:	80 83       	st	Z, r24
     b30:	82 e0       	ldi	r24, 0x02	; 2
     b32:	80 83       	st	Z, r24
     b34:	8b ed       	ldi	r24, 0xDB	; 219
     b36:	80 83       	st	Z, r24
     b38:	80 e3       	ldi	r24, 0x30	; 48
     b3a:	80 83       	st	Z, r24
     b3c:	8d ea       	ldi	r24, 0xAD	; 173
     b3e:	80 83       	st	Z, r24
     b40:	10 82       	st	Z, r1
     b42:	84 ea       	ldi	r24, 0xA4	; 164
     b44:	80 83       	st	Z, r24
     b46:	86 ea       	ldi	r24, 0xA6	; 166
     b48:	80 83       	st	Z, r24
     b4a:	8f ea       	ldi	r24, 0xAF	; 175
     b4c:	80 83       	st	Z, r24
     b4e:	08 95       	ret

00000b50 <go_to_line>:
     b50:	87 70       	andi	r24, 0x07	; 7
     b52:	80 55       	subi	r24, 0x50	; 80
     b54:	80 93 00 10 	sts	0x1000, r24	; 0x801000 <__bss_end+0xde2>
     b58:	08 95       	ret

00000b5a <go_to_column>:
     b5a:	98 2f       	mov	r25, r24
     b5c:	9f 70       	andi	r25, 0x0F	; 15
     b5e:	e0 e0       	ldi	r30, 0x00	; 0
     b60:	f0 e1       	ldi	r31, 0x10	; 16
     b62:	90 83       	st	Z, r25
     b64:	82 95       	swap	r24
     b66:	8f 70       	andi	r24, 0x0F	; 15
     b68:	80 5f       	subi	r24, 0xF0	; 240
     b6a:	80 83       	st	Z, r24
     b6c:	08 95       	ret

00000b6e <clear_oled>:
}

void clear_oled(amap* atmelMap){
     b6e:	1f 93       	push	r17
     b70:	cf 93       	push	r28
     b72:	df 93       	push	r29
     b74:	10 e0       	ldi	r17, 0x00	; 0
	ext_ram[0] = c;
}
void oled_write_data(char c)
{
	volatile char *ext_ram = (char *) 0x1200;
	ext_ram[0] = c;
     b76:	c0 e0       	ldi	r28, 0x00	; 0
     b78:	d2 e1       	ldi	r29, 0x12	; 18
	atmelMap->OLED_DATA[1] = 0x0F;
}

void clear_oled(amap* atmelMap){
	for(int i = 0; i < 8 ; i++){
		go_to_line(i);
     b7a:	81 2f       	mov	r24, r17
     b7c:	0e 94 a8 05 	call	0xb50	; 0xb50 <go_to_line>
		
		go_to_column(0);
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	0e 94 ad 05 	call	0xb5a	; 0xb5a <go_to_column>
     b86:	80 e8       	ldi	r24, 0x80	; 128
     b88:	90 e0       	ldi	r25, 0x00	; 0
	ext_ram[0] = c;
}
void oled_write_data(char c)
{
	volatile char *ext_ram = (char *) 0x1200;
	ext_ram[0] = c;
     b8a:	18 82       	st	Y, r1
     b8c:	01 97       	sbiw	r24, 0x01	; 1
void clear_oled(amap* atmelMap){
	for(int i = 0; i < 8 ; i++){
		go_to_line(i);
		
		go_to_column(0);
		for(int j = 0; j < 128; j++){
     b8e:	e9 f7       	brne	.-6      	; 0xb8a <clear_oled+0x1c>
     b90:	1f 5f       	subi	r17, 0xFF	; 255
void oled_write(amap* atmelMap){
	atmelMap->OLED_DATA[1] = 0x0F;
}

void clear_oled(amap* atmelMap){
	for(int i = 0; i < 8 ; i++){
     b92:	18 30       	cpi	r17, 0x08	; 8
     b94:	91 f7       	brne	.-28     	; 0xb7a <clear_oled+0xc>
		for(int j = 0; j < 128; j++){
			
			oled_write_data(0x00);
		}
	}
}
     b96:	df 91       	pop	r29
     b98:	cf 91       	pop	r28
     b9a:	1f 91       	pop	r17
     b9c:	08 95       	ret

00000b9e <clear_oled_new>:

void clear_oled_new(){
     b9e:	1f 93       	push	r17
     ba0:	cf 93       	push	r28
     ba2:	df 93       	push	r29
     ba4:	10 e0       	ldi	r17, 0x00	; 0
	ext_ram[0] = c;
}
void oled_write_data(char c)
{
	volatile char *ext_ram = (char *) 0x1200;
	ext_ram[0] = c;
     ba6:	c0 e0       	ldi	r28, 0x00	; 0
     ba8:	d2 e1       	ldi	r29, 0x12	; 18
	}
}

void clear_oled_new(){
	for(int i = 0; i < 8 ; i++){
		go_to_line(i);
     baa:	81 2f       	mov	r24, r17
     bac:	0e 94 a8 05 	call	0xb50	; 0xb50 <go_to_line>
		
		go_to_column(0);
     bb0:	80 e0       	ldi	r24, 0x00	; 0
     bb2:	0e 94 ad 05 	call	0xb5a	; 0xb5a <go_to_column>
     bb6:	80 e8       	ldi	r24, 0x80	; 128
     bb8:	90 e0       	ldi	r25, 0x00	; 0
	ext_ram[0] = c;
}
void oled_write_data(char c)
{
	volatile char *ext_ram = (char *) 0x1200;
	ext_ram[0] = c;
     bba:	18 82       	st	Y, r1
     bbc:	01 97       	sbiw	r24, 0x01	; 1
void clear_oled_new(){
	for(int i = 0; i < 8 ; i++){
		go_to_line(i);
		
		go_to_column(0);
		for(int j = 0; j < 128; j++){
     bbe:	e9 f7       	brne	.-6      	; 0xbba <clear_oled_new+0x1c>
     bc0:	1f 5f       	subi	r17, 0xFF	; 255
		}
	}
}

void clear_oled_new(){
	for(int i = 0; i < 8 ; i++){
     bc2:	18 30       	cpi	r17, 0x08	; 8
     bc4:	91 f7       	brne	.-28     	; 0xbaa <clear_oled_new+0xc>
		for(int j = 0; j < 128; j++){
			
			oled_write_data(0x00);
		}
	}
}
     bc6:	df 91       	pop	r29
     bc8:	cf 91       	pop	r28
     bca:	1f 91       	pop	r17
     bcc:	08 95       	ret

00000bce <oled_write_char_using_font>:
	}
	
}

void oled_write_char_using_font(char c, uint8_t n){
	uint8_t character = c-32;
     bce:	80 52       	subi	r24, 0x20	; 32
	
	if(n==8){
     bd0:	68 30       	cpi	r22, 0x08	; 8
     bd2:	f1 f4       	brne	.+60     	; 0xc10 <oled_write_char_using_font+0x42>
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	9c 01       	movw	r18, r24
     bd8:	22 0f       	add	r18, r18
     bda:	33 1f       	adc	r19, r19
     bdc:	22 0f       	add	r18, r18
     bde:	33 1f       	adc	r19, r19
     be0:	22 0f       	add	r18, r18
     be2:	33 1f       	adc	r19, r19
     be4:	29 53       	subi	r18, 0x39	; 57
     be6:	3c 4f       	sbci	r19, 0xFC	; 252
     be8:	88 0f       	add	r24, r24
     bea:	99 1f       	adc	r25, r25
     bec:	88 0f       	add	r24, r24
     bee:	99 1f       	adc	r25, r25
     bf0:	88 0f       	add	r24, r24
     bf2:	99 1f       	adc	r25, r25
     bf4:	81 53       	subi	r24, 0x31	; 49
     bf6:	9c 4f       	sbci	r25, 0xFC	; 252
	ext_ram[0] = c;
}
void oled_write_data(char c)
{
	volatile char *ext_ram = (char *) 0x1200;
	ext_ram[0] = c;
     bf8:	a0 e0       	ldi	r26, 0x00	; 0
     bfa:	b2 e1       	ldi	r27, 0x12	; 18
void oled_write_char_using_font(char c, uint8_t n){
	uint8_t character = c-32;
	
	if(n==8){
		for (int i=0; i < n; i++) {
			oled_write_data(pgm_read_word(&font8[character][i]));
     bfc:	f9 01       	movw	r30, r18
     bfe:	45 91       	lpm	r20, Z+
     c00:	54 91       	lpm	r21, Z
	ext_ram[0] = c;
}
void oled_write_data(char c)
{
	volatile char *ext_ram = (char *) 0x1200;
	ext_ram[0] = c;
     c02:	4c 93       	st	X, r20
     c04:	2f 5f       	subi	r18, 0xFF	; 255
     c06:	3f 4f       	sbci	r19, 0xFF	; 255

void oled_write_char_using_font(char c, uint8_t n){
	uint8_t character = c-32;
	
	if(n==8){
		for (int i=0; i < n; i++) {
     c08:	82 17       	cp	r24, r18
     c0a:	93 07       	cpc	r25, r19
     c0c:	b9 f7       	brne	.-18     	; 0xbfc <oled_write_char_using_font+0x2e>
     c0e:	08 95       	ret
			oled_write_data(pgm_read_word(&font8[character][i]));
		}
	}else if(n == 5){
     c10:	65 30       	cpi	r22, 0x05	; 5
     c12:	d1 f4       	brne	.+52     	; 0xc48 <oled_write_char_using_font+0x7a>
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	9c 01       	movw	r18, r24
     c18:	22 0f       	add	r18, r18
     c1a:	33 1f       	adc	r19, r19
     c1c:	22 0f       	add	r18, r18
     c1e:	33 1f       	adc	r19, r19
     c20:	82 0f       	add	r24, r18
     c22:	93 1f       	adc	r25, r19
     c24:	20 e0       	ldi	r18, 0x00	; 0
     c26:	30 e0       	ldi	r19, 0x00	; 0
	ext_ram[0] = c;
}
void oled_write_data(char c)
{
	volatile char *ext_ram = (char *) 0x1200;
	ext_ram[0] = c;
     c28:	a0 e0       	ldi	r26, 0x00	; 0
     c2a:	b2 e1       	ldi	r27, 0x12	; 18
		for (int i=0; i < n; i++) {
			oled_write_data(pgm_read_word(&font8[character][i]));
		}
	}else if(n == 5){
		for (int i=0; i < n; i++) {
			oled_write_data(pgm_read_word(&font5[character][i]));
     c2c:	f9 01       	movw	r30, r18
     c2e:	e8 0f       	add	r30, r24
     c30:	f9 1f       	adc	r31, r25
     c32:	e4 51       	subi	r30, 0x14	; 20
     c34:	fe 4f       	sbci	r31, 0xFE	; 254
     c36:	45 91       	lpm	r20, Z+
     c38:	54 91       	lpm	r21, Z
	ext_ram[0] = c;
}
void oled_write_data(char c)
{
	volatile char *ext_ram = (char *) 0x1200;
	ext_ram[0] = c;
     c3a:	4c 93       	st	X, r20
	if(n==8){
		for (int i=0; i < n; i++) {
			oled_write_data(pgm_read_word(&font8[character][i]));
		}
	}else if(n == 5){
		for (int i=0; i < n; i++) {
     c3c:	2f 5f       	subi	r18, 0xFF	; 255
     c3e:	3f 4f       	sbci	r19, 0xFF	; 255
     c40:	25 30       	cpi	r18, 0x05	; 5
     c42:	31 05       	cpc	r19, r1
     c44:	99 f7       	brne	.-26     	; 0xc2c <oled_write_char_using_font+0x5e>
     c46:	08 95       	ret
			oled_write_data(pgm_read_word(&font5[character][i]));
		}
	}else if(n == 4){
     c48:	64 30       	cpi	r22, 0x04	; 4
     c4a:	b1 f4       	brne	.+44     	; 0xc78 <oled_write_char_using_font+0xaa>
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	88 0f       	add	r24, r24
     c50:	99 1f       	adc	r25, r25
     c52:	88 0f       	add	r24, r24
     c54:	99 1f       	adc	r25, r25
     c56:	20 e0       	ldi	r18, 0x00	; 0
     c58:	30 e0       	ldi	r19, 0x00	; 0
	ext_ram[0] = c;
}
void oled_write_data(char c)
{
	volatile char *ext_ram = (char *) 0x1200;
	ext_ram[0] = c;
     c5a:	a0 e0       	ldi	r26, 0x00	; 0
     c5c:	b2 e1       	ldi	r27, 0x12	; 18
		for (int i=0; i < n; i++) {
			oled_write_data(pgm_read_word(&font5[character][i]));
		}
	}else if(n == 4){
		for (int i=0; i < n; i++) {
			oled_write_data(pgm_read_word(&font4[character][i]));
     c5e:	f9 01       	movw	r30, r18
     c60:	e8 0f       	add	r30, r24
     c62:	f9 1f       	adc	r31, r25
     c64:	e0 59       	subi	r30, 0x90	; 144
     c66:	ff 4f       	sbci	r31, 0xFF	; 255
     c68:	45 91       	lpm	r20, Z+
     c6a:	54 91       	lpm	r21, Z
	ext_ram[0] = c;
}
void oled_write_data(char c)
{
	volatile char *ext_ram = (char *) 0x1200;
	ext_ram[0] = c;
     c6c:	4c 93       	st	X, r20
	}else if(n == 5){
		for (int i=0; i < n; i++) {
			oled_write_data(pgm_read_word(&font5[character][i]));
		}
	}else if(n == 4){
		for (int i=0; i < n; i++) {
     c6e:	2f 5f       	subi	r18, 0xFF	; 255
     c70:	3f 4f       	sbci	r19, 0xFF	; 255
     c72:	24 30       	cpi	r18, 0x04	; 4
     c74:	31 05       	cpc	r19, r1
     c76:	99 f7       	brne	.-26     	; 0xc5e <oled_write_char_using_font+0x90>
     c78:	08 95       	ret

00000c7a <oled_write_string>:
			oled_write_data(0x00);
		}
	}
}

void oled_write_string(uint8_t startline, char* c, uint8_t n){
     c7a:	8f 92       	push	r8
     c7c:	9f 92       	push	r9
     c7e:	af 92       	push	r10
     c80:	bf 92       	push	r11
     c82:	cf 92       	push	r12
     c84:	df 92       	push	r13
     c86:	ef 92       	push	r14
     c88:	ff 92       	push	r15
     c8a:	0f 93       	push	r16
     c8c:	1f 93       	push	r17
     c8e:	cf 93       	push	r28
     c90:	df 93       	push	r29
     c92:	88 2e       	mov	r8, r24
     c94:	8b 01       	movw	r16, r22
     c96:	94 2e       	mov	r9, r20
	go_to_line(startline);
     c98:	0e 94 a8 05 	call	0xb50	; 0xb50 <go_to_line>
     c9c:	78 01       	movw	r14, r16
	
	for (int i=0; i < strlen(c); i++) {
     c9e:	c0 e0       	ldi	r28, 0x00	; 0
     ca0:	d0 e0       	ldi	r29, 0x00	; 0
		if(i%((int)128/n) == 0){
     ca2:	a9 2c       	mov	r10, r9
     ca4:	b1 2c       	mov	r11, r1
     ca6:	68 94       	set
     ca8:	cc 24       	eor	r12, r12
     caa:	c7 f8       	bld	r12, 7
     cac:	d1 2c       	mov	r13, r1
}

void oled_write_string(uint8_t startline, char* c, uint8_t n){
	go_to_line(startline);
	
	for (int i=0; i < strlen(c); i++) {
     cae:	19 c0       	rjmp	.+50     	; 0xce2 <oled_write_string+0x68>
		if(i%((int)128/n) == 0){
     cb0:	c6 01       	movw	r24, r12
     cb2:	b5 01       	movw	r22, r10
     cb4:	0e 94 90 07 	call	0xf20	; 0xf20 <__divmodhi4>
     cb8:	9b 01       	movw	r18, r22
     cba:	ce 01       	movw	r24, r28
     cbc:	0e 94 90 07 	call	0xf20	; 0xf20 <__divmodhi4>
     cc0:	89 2b       	or	r24, r25
     cc2:	41 f4       	brne	.+16     	; 0xcd4 <oled_write_string+0x5a>
			go_to_line(startline+i/((int)128/n));
     cc4:	ce 01       	movw	r24, r28
     cc6:	b9 01       	movw	r22, r18
     cc8:	0e 94 90 07 	call	0xf20	; 0xf20 <__divmodhi4>
     ccc:	88 2d       	mov	r24, r8
     cce:	86 0f       	add	r24, r22
     cd0:	0e 94 a8 05 	call	0xb50	; 0xb50 <go_to_line>
		}
		oled_write_char_using_font(c[i],n);
     cd4:	69 2d       	mov	r22, r9
     cd6:	f7 01       	movw	r30, r14
     cd8:	81 91       	ld	r24, Z+
     cda:	7f 01       	movw	r14, r30
     cdc:	0e 94 e7 05 	call	0xbce	; 0xbce <oled_write_char_using_font>
}

void oled_write_string(uint8_t startline, char* c, uint8_t n){
	go_to_line(startline);
	
	for (int i=0; i < strlen(c); i++) {
     ce0:	21 96       	adiw	r28, 0x01	; 1
     ce2:	f8 01       	movw	r30, r16
     ce4:	01 90       	ld	r0, Z+
     ce6:	00 20       	and	r0, r0
     ce8:	e9 f7       	brne	.-6      	; 0xce4 <oled_write_string+0x6a>
     cea:	31 97       	sbiw	r30, 0x01	; 1
     cec:	e0 1b       	sub	r30, r16
     cee:	f1 0b       	sbc	r31, r17
     cf0:	ce 17       	cp	r28, r30
     cf2:	df 07       	cpc	r29, r31
     cf4:	e8 f2       	brcs	.-70     	; 0xcb0 <oled_write_string+0x36>
		}
		oled_write_char_using_font(c[i],n);
		
	}
	
}
     cf6:	df 91       	pop	r29
     cf8:	cf 91       	pop	r28
     cfa:	1f 91       	pop	r17
     cfc:	0f 91       	pop	r16
     cfe:	ff 90       	pop	r15
     d00:	ef 90       	pop	r14
     d02:	df 90       	pop	r13
     d04:	cf 90       	pop	r12
     d06:	bf 90       	pop	r11
     d08:	af 90       	pop	r10
     d0a:	9f 90       	pop	r9
     d0c:	8f 90       	pop	r8
     d0e:	08 95       	ret

00000d10 <oled_write_inverted_char_using_font>:
	}
	
}

void oled_write_inverted_char_using_font(char c, uint8_t n){
	uint8_t character = c-32;
     d10:	80 52       	subi	r24, 0x20	; 32
	
	if(n==8){
     d12:	68 30       	cpi	r22, 0x08	; 8
     d14:	f9 f4       	brne	.+62     	; 0xd54 <oled_write_inverted_char_using_font+0x44>
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	9c 01       	movw	r18, r24
     d1a:	22 0f       	add	r18, r18
     d1c:	33 1f       	adc	r19, r19
     d1e:	22 0f       	add	r18, r18
     d20:	33 1f       	adc	r19, r19
     d22:	22 0f       	add	r18, r18
     d24:	33 1f       	adc	r19, r19
     d26:	29 53       	subi	r18, 0x39	; 57
     d28:	3c 4f       	sbci	r19, 0xFC	; 252
     d2a:	88 0f       	add	r24, r24
     d2c:	99 1f       	adc	r25, r25
     d2e:	88 0f       	add	r24, r24
     d30:	99 1f       	adc	r25, r25
     d32:	88 0f       	add	r24, r24
     d34:	99 1f       	adc	r25, r25
     d36:	81 53       	subi	r24, 0x31	; 49
     d38:	9c 4f       	sbci	r25, 0xFC	; 252
	ext_ram[0] = c;
}
void oled_write_data(char c)
{
	volatile char *ext_ram = (char *) 0x1200;
	ext_ram[0] = c;
     d3a:	a0 e0       	ldi	r26, 0x00	; 0
     d3c:	b2 e1       	ldi	r27, 0x12	; 18
void oled_write_inverted_char_using_font(char c, uint8_t n){
	uint8_t character = c-32;
	
	if(n==8){
		for (int i=0; i < n; i++) {
			oled_write_data(~pgm_read_word(&font8[character][i]));
     d3e:	f9 01       	movw	r30, r18
     d40:	45 91       	lpm	r20, Z+
     d42:	54 91       	lpm	r21, Z
     d44:	40 95       	com	r20
	ext_ram[0] = c;
}
void oled_write_data(char c)
{
	volatile char *ext_ram = (char *) 0x1200;
	ext_ram[0] = c;
     d46:	4c 93       	st	X, r20
     d48:	2f 5f       	subi	r18, 0xFF	; 255
     d4a:	3f 4f       	sbci	r19, 0xFF	; 255

void oled_write_inverted_char_using_font(char c, uint8_t n){
	uint8_t character = c-32;
	
	if(n==8){
		for (int i=0; i < n; i++) {
     d4c:	82 17       	cp	r24, r18
     d4e:	93 07       	cpc	r25, r19
     d50:	b1 f7       	brne	.-20     	; 0xd3e <oled_write_inverted_char_using_font+0x2e>
     d52:	08 95       	ret
			oled_write_data(~pgm_read_word(&font8[character][i]));
		}
		}else if(n == 5){
     d54:	65 30       	cpi	r22, 0x05	; 5
     d56:	d9 f4       	brne	.+54     	; 0xd8e <oled_write_inverted_char_using_font+0x7e>
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	9c 01       	movw	r18, r24
     d5c:	22 0f       	add	r18, r18
     d5e:	33 1f       	adc	r19, r19
     d60:	22 0f       	add	r18, r18
     d62:	33 1f       	adc	r19, r19
     d64:	82 0f       	add	r24, r18
     d66:	93 1f       	adc	r25, r19
     d68:	20 e0       	ldi	r18, 0x00	; 0
     d6a:	30 e0       	ldi	r19, 0x00	; 0
	ext_ram[0] = c;
}
void oled_write_data(char c)
{
	volatile char *ext_ram = (char *) 0x1200;
	ext_ram[0] = c;
     d6c:	a0 e0       	ldi	r26, 0x00	; 0
     d6e:	b2 e1       	ldi	r27, 0x12	; 18
		for (int i=0; i < n; i++) {
			oled_write_data(~pgm_read_word(&font8[character][i]));
		}
		}else if(n == 5){
		for (int i=0; i < n; i++) {
			oled_write_data(~pgm_read_word(&font5[character][i]));
     d70:	f9 01       	movw	r30, r18
     d72:	e8 0f       	add	r30, r24
     d74:	f9 1f       	adc	r31, r25
     d76:	e4 51       	subi	r30, 0x14	; 20
     d78:	fe 4f       	sbci	r31, 0xFE	; 254
     d7a:	45 91       	lpm	r20, Z+
     d7c:	54 91       	lpm	r21, Z
     d7e:	40 95       	com	r20
	ext_ram[0] = c;
}
void oled_write_data(char c)
{
	volatile char *ext_ram = (char *) 0x1200;
	ext_ram[0] = c;
     d80:	4c 93       	st	X, r20
	if(n==8){
		for (int i=0; i < n; i++) {
			oled_write_data(~pgm_read_word(&font8[character][i]));
		}
		}else if(n == 5){
		for (int i=0; i < n; i++) {
     d82:	2f 5f       	subi	r18, 0xFF	; 255
     d84:	3f 4f       	sbci	r19, 0xFF	; 255
     d86:	25 30       	cpi	r18, 0x05	; 5
     d88:	31 05       	cpc	r19, r1
     d8a:	91 f7       	brne	.-28     	; 0xd70 <oled_write_inverted_char_using_font+0x60>
     d8c:	08 95       	ret
			oled_write_data(~pgm_read_word(&font5[character][i]));
		}
		}else if(n == 4){
     d8e:	64 30       	cpi	r22, 0x04	; 4
     d90:	b9 f4       	brne	.+46     	; 0xdc0 <oled_write_inverted_char_using_font+0xb0>
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	88 0f       	add	r24, r24
     d96:	99 1f       	adc	r25, r25
     d98:	88 0f       	add	r24, r24
     d9a:	99 1f       	adc	r25, r25
     d9c:	20 e0       	ldi	r18, 0x00	; 0
     d9e:	30 e0       	ldi	r19, 0x00	; 0
	ext_ram[0] = c;
}
void oled_write_data(char c)
{
	volatile char *ext_ram = (char *) 0x1200;
	ext_ram[0] = c;
     da0:	a0 e0       	ldi	r26, 0x00	; 0
     da2:	b2 e1       	ldi	r27, 0x12	; 18
		for (int i=0; i < n; i++) {
			oled_write_data(~pgm_read_word(&font5[character][i]));
		}
		}else if(n == 4){
		for (int i=0; i < n; i++) {
			oled_write_data(~pgm_read_word(&font4[character][i]));
     da4:	f9 01       	movw	r30, r18
     da6:	e8 0f       	add	r30, r24
     da8:	f9 1f       	adc	r31, r25
     daa:	e0 59       	subi	r30, 0x90	; 144
     dac:	ff 4f       	sbci	r31, 0xFF	; 255
     dae:	45 91       	lpm	r20, Z+
     db0:	54 91       	lpm	r21, Z
     db2:	40 95       	com	r20
	ext_ram[0] = c;
}
void oled_write_data(char c)
{
	volatile char *ext_ram = (char *) 0x1200;
	ext_ram[0] = c;
     db4:	4c 93       	st	X, r20
		}else if(n == 5){
		for (int i=0; i < n; i++) {
			oled_write_data(~pgm_read_word(&font5[character][i]));
		}
		}else if(n == 4){
		for (int i=0; i < n; i++) {
     db6:	2f 5f       	subi	r18, 0xFF	; 255
     db8:	3f 4f       	sbci	r19, 0xFF	; 255
     dba:	24 30       	cpi	r18, 0x04	; 4
     dbc:	31 05       	cpc	r19, r1
     dbe:	91 f7       	brne	.-28     	; 0xda4 <oled_write_inverted_char_using_font+0x94>
     dc0:	08 95       	ret

00000dc2 <oled_write_string_inverted>:
		
	}
	
}

void oled_write_string_inverted(uint8_t startline, char* c, uint8_t n){
     dc2:	8f 92       	push	r8
     dc4:	9f 92       	push	r9
     dc6:	af 92       	push	r10
     dc8:	bf 92       	push	r11
     dca:	cf 92       	push	r12
     dcc:	df 92       	push	r13
     dce:	ef 92       	push	r14
     dd0:	ff 92       	push	r15
     dd2:	0f 93       	push	r16
     dd4:	1f 93       	push	r17
     dd6:	cf 93       	push	r28
     dd8:	df 93       	push	r29
     dda:	88 2e       	mov	r8, r24
     ddc:	8b 01       	movw	r16, r22
     dde:	94 2e       	mov	r9, r20
	go_to_line(startline);
     de0:	0e 94 a8 05 	call	0xb50	; 0xb50 <go_to_line>
     de4:	78 01       	movw	r14, r16
	
	for (int i=0; i < strlen(c); i++) {
     de6:	c0 e0       	ldi	r28, 0x00	; 0
     de8:	d0 e0       	ldi	r29, 0x00	; 0
		if(i%((int)128/n) == 0){
     dea:	a9 2c       	mov	r10, r9
     dec:	b1 2c       	mov	r11, r1
     dee:	68 94       	set
     df0:	cc 24       	eor	r12, r12
     df2:	c7 f8       	bld	r12, 7
     df4:	d1 2c       	mov	r13, r1
}

void oled_write_string_inverted(uint8_t startline, char* c, uint8_t n){
	go_to_line(startline);
	
	for (int i=0; i < strlen(c); i++) {
     df6:	19 c0       	rjmp	.+50     	; 0xe2a <oled_write_string_inverted+0x68>
		if(i%((int)128/n) == 0){
     df8:	c6 01       	movw	r24, r12
     dfa:	b5 01       	movw	r22, r10
     dfc:	0e 94 90 07 	call	0xf20	; 0xf20 <__divmodhi4>
     e00:	9b 01       	movw	r18, r22
     e02:	ce 01       	movw	r24, r28
     e04:	0e 94 90 07 	call	0xf20	; 0xf20 <__divmodhi4>
     e08:	89 2b       	or	r24, r25
     e0a:	41 f4       	brne	.+16     	; 0xe1c <oled_write_string_inverted+0x5a>
			go_to_line(startline+i/((int)128/n));
     e0c:	ce 01       	movw	r24, r28
     e0e:	b9 01       	movw	r22, r18
     e10:	0e 94 90 07 	call	0xf20	; 0xf20 <__divmodhi4>
     e14:	88 2d       	mov	r24, r8
     e16:	86 0f       	add	r24, r22
     e18:	0e 94 a8 05 	call	0xb50	; 0xb50 <go_to_line>
		}
		oled_write_inverted_char_using_font(c[i],n);
     e1c:	69 2d       	mov	r22, r9
     e1e:	f7 01       	movw	r30, r14
     e20:	81 91       	ld	r24, Z+
     e22:	7f 01       	movw	r14, r30
     e24:	0e 94 88 06 	call	0xd10	; 0xd10 <oled_write_inverted_char_using_font>
}

void oled_write_string_inverted(uint8_t startline, char* c, uint8_t n){
	go_to_line(startline);
	
	for (int i=0; i < strlen(c); i++) {
     e28:	21 96       	adiw	r28, 0x01	; 1
     e2a:	f8 01       	movw	r30, r16
     e2c:	01 90       	ld	r0, Z+
     e2e:	00 20       	and	r0, r0
     e30:	e9 f7       	brne	.-6      	; 0xe2c <oled_write_string_inverted+0x6a>
     e32:	31 97       	sbiw	r30, 0x01	; 1
     e34:	e0 1b       	sub	r30, r16
     e36:	f1 0b       	sbc	r31, r17
     e38:	ce 17       	cp	r28, r30
     e3a:	df 07       	cpc	r29, r31
     e3c:	e8 f2       	brcs	.-70     	; 0xdf8 <oled_write_string_inverted+0x36>
		}
		oled_write_inverted_char_using_font(c[i],n);
		
	}
	
}
     e3e:	df 91       	pop	r29
     e40:	cf 91       	pop	r28
     e42:	1f 91       	pop	r17
     e44:	0f 91       	pop	r16
     e46:	ff 90       	pop	r15
     e48:	ef 90       	pop	r14
     e4a:	df 90       	pop	r13
     e4c:	cf 90       	pop	r12
     e4e:	bf 90       	pop	r11
     e50:	af 90       	pop	r10
     e52:	9f 90       	pop	r9
     e54:	8f 90       	pop	r8
     e56:	08 95       	ret

00000e58 <SRAM_test>:
#include "sram_test.h"
    void SRAM_test(void)
    {
     e58:	ef 92       	push	r14
     e5a:	ff 92       	push	r15
     e5c:	0f 93       	push	r16
     e5e:	1f 93       	push	r17
     e60:	cf 93       	push	r28
     e62:	df 93       	push	r29
		volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
        uint16_t ext_ram_size = 0x800;
        uint16_t write_errors = 0;
        uint16_t retrieval_errors = 0;
        printf("Starting SRAM test...\n");
     e64:	89 e9       	ldi	r24, 0x99	; 153
     e66:	91 e0       	ldi	r25, 0x01	; 1
     e68:	0e 94 9d 09 	call	0x133a	; 0x133a <puts>
        // rand() stores some internal state, so calling this function in a loop will
        // yield different seeds each time (unless srand() is called before this function)
        uint16_t seed = rand();
     e6c:	0e 94 25 09 	call	0x124a	; 0x124a <rand>
     e70:	7c 01       	movw	r14, r24
        // Write phase: Immediately check that the correct value was stored
        srand(seed);
     e72:	0e 94 2a 09 	call	0x1254	; 0x1254 <srand>
     e76:	c0 e0       	ldi	r28, 0x00	; 0
     e78:	d8 e1       	ldi	r29, 0x18	; 24
#include "sram_test.h"
    void SRAM_test(void)
    {
		volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
        uint16_t ext_ram_size = 0x800;
        uint16_t write_errors = 0;
     e7a:	00 e0       	ldi	r16, 0x00	; 0
     e7c:	10 e0       	ldi	r17, 0x00	; 0
        // yield different seeds each time (unless srand() is called before this function)
        uint16_t seed = rand();
        // Write phase: Immediately check that the correct value was stored
        srand(seed);
        for (uint16_t i = 0; i < ext_ram_size; i++) {
            uint8_t some_value = rand();
     e7e:	0e 94 25 09 	call	0x124a	; 0x124a <rand>
            ext_ram[i] = some_value;
     e82:	88 83       	st	Y, r24
            uint8_t retreived_value = ext_ram[i];
     e84:	98 81       	ld	r25, Y
            if (retreived_value != some_value) {
     e86:	89 17       	cp	r24, r25
     e88:	11 f0       	breq	.+4      	; 0xe8e <SRAM_test+0x36>
                //printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
                write_errors++;
     e8a:	0f 5f       	subi	r16, 0xFF	; 255
     e8c:	1f 4f       	sbci	r17, 0xFF	; 255
     e8e:	21 96       	adiw	r28, 0x01	; 1
        // rand() stores some internal state, so calling this function in a loop will
        // yield different seeds each time (unless srand() is called before this function)
        uint16_t seed = rand();
        // Write phase: Immediately check that the correct value was stored
        srand(seed);
        for (uint16_t i = 0; i < ext_ram_size; i++) {
     e90:	c1 15       	cp	r28, r1
     e92:	80 e2       	ldi	r24, 0x20	; 32
     e94:	d8 07       	cpc	r29, r24
     e96:	99 f7       	brne	.-26     	; 0xe7e <SRAM_test+0x26>
                //printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
                write_errors++;
            }
        }
        // Retrieval phase: Check that no values were changed during or after the write phase
        srand(seed);
     e98:	c7 01       	movw	r24, r14
     e9a:	0e 94 2a 09 	call	0x1254	; 0x1254 <srand>
     e9e:	c0 e0       	ldi	r28, 0x00	; 0
     ea0:	d8 e1       	ldi	r29, 0x18	; 24
    void SRAM_test(void)
    {
		volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
        uint16_t ext_ram_size = 0x800;
        uint16_t write_errors = 0;
        uint16_t retrieval_errors = 0;
     ea2:	e1 2c       	mov	r14, r1
     ea4:	f1 2c       	mov	r15, r1
        }
        // Retrieval phase: Check that no values were changed during or after the write phase
        srand(seed);
        // reset the PRNG to the state it had before the write phase
        for (uint16_t i = 0; i < ext_ram_size; i++) {
            uint8_t some_value = rand();
     ea6:	0e 94 25 09 	call	0x124a	; 0x124a <rand>
            uint8_t retreived_value = ext_ram[i];
     eaa:	98 81       	ld	r25, Y
            if (retreived_value != some_value) {
     eac:	98 17       	cp	r25, r24
     eae:	19 f0       	breq	.+6      	; 0xeb6 <SRAM_test+0x5e>
               // printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
                retrieval_errors++;
     eb0:	8f ef       	ldi	r24, 0xFF	; 255
     eb2:	e8 1a       	sub	r14, r24
     eb4:	f8 0a       	sbc	r15, r24
     eb6:	21 96       	adiw	r28, 0x01	; 1
            }
        }
        // Retrieval phase: Check that no values were changed during or after the write phase
        srand(seed);
        // reset the PRNG to the state it had before the write phase
        for (uint16_t i = 0; i < ext_ram_size; i++) {
     eb8:	c1 15       	cp	r28, r1
     eba:	80 e2       	ldi	r24, 0x20	; 32
     ebc:	d8 07       	cpc	r29, r24
     ebe:	99 f7       	brne	.-26     	; 0xea6 <SRAM_test+0x4e>
            if (retreived_value != some_value) {
               // printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
                retrieval_errors++;
            }
        }
        printf("SRAM test completed with \n%4d errors in write phase and \n%4d errors in retrieval phase\n\n", write_errors, retrieval_errors);
     ec0:	ff 92       	push	r15
     ec2:	ef 92       	push	r14
     ec4:	1f 93       	push	r17
     ec6:	0f 93       	push	r16
     ec8:	8f ea       	ldi	r24, 0xAF	; 175
     eca:	91 e0       	ldi	r25, 0x01	; 1
     ecc:	9f 93       	push	r25
     ece:	8f 93       	push	r24
     ed0:	0e 94 80 09 	call	0x1300	; 0x1300 <printf>
     ed4:	0f 90       	pop	r0
     ed6:	0f 90       	pop	r0
     ed8:	0f 90       	pop	r0
     eda:	0f 90       	pop	r0
     edc:	0f 90       	pop	r0
     ede:	0f 90       	pop	r0
     ee0:	df 91       	pop	r29
     ee2:	cf 91       	pop	r28
     ee4:	1f 91       	pop	r17
     ee6:	0f 91       	pop	r16
     ee8:	ff 90       	pop	r15
     eea:	ef 90       	pop	r14
     eec:	08 95       	ret

00000eee <USART_Transmit>:
	UCSR1C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
	clear_bit(UCSR0C, 0); // Clock polarity
	fdevopen(USART_Transmit, USART_Receive);
}
void USART_Transmit(unsigned char data){
	while (!(UCSR0A & (1<<UDRE0)));
     eee:	5d 9b       	sbis	0x0b, 5	; 11
     ef0:	fe cf       	rjmp	.-4      	; 0xeee <USART_Transmit>
	
	UDR0 = data;
     ef2:	8c b9       	out	0x0c, r24	; 12
     ef4:	08 95       	ret

00000ef6 <USART_Receive>:
}

unsigned int USART_Receive(void)
{
	
	while (!(UCSR0A & (1<<RXC0)));
     ef6:	5f 9b       	sbis	0x0b, 7	; 11
     ef8:	fe cf       	rjmp	.-4      	; 0xef6 <USART_Receive>
	

	return UDR0;
     efa:	8c b1       	in	r24, 0x0c	; 12
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	08 95       	ret

00000f00 <USART_Init>:
#include <stdio.h>
#define clear_bit( reg, bit ) (reg &= ~(1 << bit))

void USART_Init (unsigned int ubrr ){
	
	UBRR0H = (unsigned char)(ubrr>>8);
     f00:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)ubrr;
     f02:	89 b9       	out	0x09, r24	; 9
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     f04:	88 e1       	ldi	r24, 0x18	; 24
     f06:	8a b9       	out	0x0a, r24	; 10
	
	UCSR1C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
     f08:	8e e8       	ldi	r24, 0x8E	; 142
     f0a:	8c bf       	out	0x3c, r24	; 60
	clear_bit(UCSR0C, 0); // Clock polarity
     f0c:	80 b5       	in	r24, 0x20	; 32
     f0e:	8e 7f       	andi	r24, 0xFE	; 254
     f10:	80 bd       	out	0x20, r24	; 32
	fdevopen(USART_Transmit, USART_Receive);
     f12:	6b e7       	ldi	r22, 0x7B	; 123
     f14:	77 e0       	ldi	r23, 0x07	; 7
     f16:	87 e7       	ldi	r24, 0x77	; 119
     f18:	97 e0       	ldi	r25, 0x07	; 7
     f1a:	0e 94 35 09 	call	0x126a	; 0x126a <fdevopen>
     f1e:	08 95       	ret

00000f20 <__divmodhi4>:
     f20:	97 fb       	bst	r25, 7
     f22:	07 2e       	mov	r0, r23
     f24:	16 f4       	brtc	.+4      	; 0xf2a <__divmodhi4+0xa>
     f26:	00 94       	com	r0
     f28:	07 d0       	rcall	.+14     	; 0xf38 <__divmodhi4_neg1>
     f2a:	77 fd       	sbrc	r23, 7
     f2c:	09 d0       	rcall	.+18     	; 0xf40 <__divmodhi4_neg2>
     f2e:	0e 94 a4 07 	call	0xf48	; 0xf48 <__udivmodhi4>
     f32:	07 fc       	sbrc	r0, 7
     f34:	05 d0       	rcall	.+10     	; 0xf40 <__divmodhi4_neg2>
     f36:	3e f4       	brtc	.+14     	; 0xf46 <__divmodhi4_exit>

00000f38 <__divmodhi4_neg1>:
     f38:	90 95       	com	r25
     f3a:	81 95       	neg	r24
     f3c:	9f 4f       	sbci	r25, 0xFF	; 255
     f3e:	08 95       	ret

00000f40 <__divmodhi4_neg2>:
     f40:	70 95       	com	r23
     f42:	61 95       	neg	r22
     f44:	7f 4f       	sbci	r23, 0xFF	; 255

00000f46 <__divmodhi4_exit>:
     f46:	08 95       	ret

00000f48 <__udivmodhi4>:
     f48:	aa 1b       	sub	r26, r26
     f4a:	bb 1b       	sub	r27, r27
     f4c:	51 e1       	ldi	r21, 0x11	; 17
     f4e:	07 c0       	rjmp	.+14     	; 0xf5e <__udivmodhi4_ep>

00000f50 <__udivmodhi4_loop>:
     f50:	aa 1f       	adc	r26, r26
     f52:	bb 1f       	adc	r27, r27
     f54:	a6 17       	cp	r26, r22
     f56:	b7 07       	cpc	r27, r23
     f58:	10 f0       	brcs	.+4      	; 0xf5e <__udivmodhi4_ep>
     f5a:	a6 1b       	sub	r26, r22
     f5c:	b7 0b       	sbc	r27, r23

00000f5e <__udivmodhi4_ep>:
     f5e:	88 1f       	adc	r24, r24
     f60:	99 1f       	adc	r25, r25
     f62:	5a 95       	dec	r21
     f64:	a9 f7       	brne	.-22     	; 0xf50 <__udivmodhi4_loop>
     f66:	80 95       	com	r24
     f68:	90 95       	com	r25
     f6a:	bc 01       	movw	r22, r24
     f6c:	cd 01       	movw	r24, r26
     f6e:	08 95       	ret

00000f70 <malloc>:
     f70:	0f 93       	push	r16
     f72:	1f 93       	push	r17
     f74:	cf 93       	push	r28
     f76:	df 93       	push	r29
     f78:	82 30       	cpi	r24, 0x02	; 2
     f7a:	91 05       	cpc	r25, r1
     f7c:	10 f4       	brcc	.+4      	; 0xf82 <malloc+0x12>
     f7e:	82 e0       	ldi	r24, 0x02	; 2
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	e0 91 16 02 	lds	r30, 0x0216	; 0x800216 <__flp>
     f86:	f0 91 17 02 	lds	r31, 0x0217	; 0x800217 <__flp+0x1>
     f8a:	20 e0       	ldi	r18, 0x00	; 0
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	a0 e0       	ldi	r26, 0x00	; 0
     f90:	b0 e0       	ldi	r27, 0x00	; 0
     f92:	30 97       	sbiw	r30, 0x00	; 0
     f94:	19 f1       	breq	.+70     	; 0xfdc <malloc+0x6c>
     f96:	40 81       	ld	r20, Z
     f98:	51 81       	ldd	r21, Z+1	; 0x01
     f9a:	02 81       	ldd	r16, Z+2	; 0x02
     f9c:	13 81       	ldd	r17, Z+3	; 0x03
     f9e:	48 17       	cp	r20, r24
     fa0:	59 07       	cpc	r21, r25
     fa2:	c8 f0       	brcs	.+50     	; 0xfd6 <malloc+0x66>
     fa4:	84 17       	cp	r24, r20
     fa6:	95 07       	cpc	r25, r21
     fa8:	69 f4       	brne	.+26     	; 0xfc4 <malloc+0x54>
     faa:	10 97       	sbiw	r26, 0x00	; 0
     fac:	31 f0       	breq	.+12     	; 0xfba <malloc+0x4a>
     fae:	12 96       	adiw	r26, 0x02	; 2
     fb0:	0c 93       	st	X, r16
     fb2:	12 97       	sbiw	r26, 0x02	; 2
     fb4:	13 96       	adiw	r26, 0x03	; 3
     fb6:	1c 93       	st	X, r17
     fb8:	27 c0       	rjmp	.+78     	; 0x1008 <malloc+0x98>
     fba:	00 93 16 02 	sts	0x0216, r16	; 0x800216 <__flp>
     fbe:	10 93 17 02 	sts	0x0217, r17	; 0x800217 <__flp+0x1>
     fc2:	22 c0       	rjmp	.+68     	; 0x1008 <malloc+0x98>
     fc4:	21 15       	cp	r18, r1
     fc6:	31 05       	cpc	r19, r1
     fc8:	19 f0       	breq	.+6      	; 0xfd0 <malloc+0x60>
     fca:	42 17       	cp	r20, r18
     fcc:	53 07       	cpc	r21, r19
     fce:	18 f4       	brcc	.+6      	; 0xfd6 <malloc+0x66>
     fd0:	9a 01       	movw	r18, r20
     fd2:	bd 01       	movw	r22, r26
     fd4:	ef 01       	movw	r28, r30
     fd6:	df 01       	movw	r26, r30
     fd8:	f8 01       	movw	r30, r16
     fda:	db cf       	rjmp	.-74     	; 0xf92 <malloc+0x22>
     fdc:	21 15       	cp	r18, r1
     fde:	31 05       	cpc	r19, r1
     fe0:	f9 f0       	breq	.+62     	; 0x1020 <malloc+0xb0>
     fe2:	28 1b       	sub	r18, r24
     fe4:	39 0b       	sbc	r19, r25
     fe6:	24 30       	cpi	r18, 0x04	; 4
     fe8:	31 05       	cpc	r19, r1
     fea:	80 f4       	brcc	.+32     	; 0x100c <malloc+0x9c>
     fec:	8a 81       	ldd	r24, Y+2	; 0x02
     fee:	9b 81       	ldd	r25, Y+3	; 0x03
     ff0:	61 15       	cp	r22, r1
     ff2:	71 05       	cpc	r23, r1
     ff4:	21 f0       	breq	.+8      	; 0xffe <malloc+0x8e>
     ff6:	fb 01       	movw	r30, r22
     ff8:	93 83       	std	Z+3, r25	; 0x03
     ffa:	82 83       	std	Z+2, r24	; 0x02
     ffc:	04 c0       	rjmp	.+8      	; 0x1006 <malloc+0x96>
     ffe:	90 93 17 02 	sts	0x0217, r25	; 0x800217 <__flp+0x1>
    1002:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <__flp>
    1006:	fe 01       	movw	r30, r28
    1008:	32 96       	adiw	r30, 0x02	; 2
    100a:	44 c0       	rjmp	.+136    	; 0x1094 <malloc+0x124>
    100c:	fe 01       	movw	r30, r28
    100e:	e2 0f       	add	r30, r18
    1010:	f3 1f       	adc	r31, r19
    1012:	81 93       	st	Z+, r24
    1014:	91 93       	st	Z+, r25
    1016:	22 50       	subi	r18, 0x02	; 2
    1018:	31 09       	sbc	r19, r1
    101a:	39 83       	std	Y+1, r19	; 0x01
    101c:	28 83       	st	Y, r18
    101e:	3a c0       	rjmp	.+116    	; 0x1094 <malloc+0x124>
    1020:	20 91 14 02 	lds	r18, 0x0214	; 0x800214 <__brkval>
    1024:	30 91 15 02 	lds	r19, 0x0215	; 0x800215 <__brkval+0x1>
    1028:	23 2b       	or	r18, r19
    102a:	41 f4       	brne	.+16     	; 0x103c <malloc+0xcc>
    102c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    1030:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    1034:	30 93 15 02 	sts	0x0215, r19	; 0x800215 <__brkval+0x1>
    1038:	20 93 14 02 	sts	0x0214, r18	; 0x800214 <__brkval>
    103c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    1040:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    1044:	21 15       	cp	r18, r1
    1046:	31 05       	cpc	r19, r1
    1048:	41 f4       	brne	.+16     	; 0x105a <malloc+0xea>
    104a:	2d b7       	in	r18, 0x3d	; 61
    104c:	3e b7       	in	r19, 0x3e	; 62
    104e:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1052:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1056:	24 1b       	sub	r18, r20
    1058:	35 0b       	sbc	r19, r21
    105a:	e0 91 14 02 	lds	r30, 0x0214	; 0x800214 <__brkval>
    105e:	f0 91 15 02 	lds	r31, 0x0215	; 0x800215 <__brkval+0x1>
    1062:	e2 17       	cp	r30, r18
    1064:	f3 07       	cpc	r31, r19
    1066:	a0 f4       	brcc	.+40     	; 0x1090 <malloc+0x120>
    1068:	2e 1b       	sub	r18, r30
    106a:	3f 0b       	sbc	r19, r31
    106c:	28 17       	cp	r18, r24
    106e:	39 07       	cpc	r19, r25
    1070:	78 f0       	brcs	.+30     	; 0x1090 <malloc+0x120>
    1072:	ac 01       	movw	r20, r24
    1074:	4e 5f       	subi	r20, 0xFE	; 254
    1076:	5f 4f       	sbci	r21, 0xFF	; 255
    1078:	24 17       	cp	r18, r20
    107a:	35 07       	cpc	r19, r21
    107c:	48 f0       	brcs	.+18     	; 0x1090 <malloc+0x120>
    107e:	4e 0f       	add	r20, r30
    1080:	5f 1f       	adc	r21, r31
    1082:	50 93 15 02 	sts	0x0215, r21	; 0x800215 <__brkval+0x1>
    1086:	40 93 14 02 	sts	0x0214, r20	; 0x800214 <__brkval>
    108a:	81 93       	st	Z+, r24
    108c:	91 93       	st	Z+, r25
    108e:	02 c0       	rjmp	.+4      	; 0x1094 <malloc+0x124>
    1090:	e0 e0       	ldi	r30, 0x00	; 0
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	cf 01       	movw	r24, r30
    1096:	df 91       	pop	r29
    1098:	cf 91       	pop	r28
    109a:	1f 91       	pop	r17
    109c:	0f 91       	pop	r16
    109e:	08 95       	ret

000010a0 <free>:
    10a0:	cf 93       	push	r28
    10a2:	df 93       	push	r29
    10a4:	00 97       	sbiw	r24, 0x00	; 0
    10a6:	09 f4       	brne	.+2      	; 0x10aa <free+0xa>
    10a8:	81 c0       	rjmp	.+258    	; 0x11ac <free+0x10c>
    10aa:	fc 01       	movw	r30, r24
    10ac:	32 97       	sbiw	r30, 0x02	; 2
    10ae:	13 82       	std	Z+3, r1	; 0x03
    10b0:	12 82       	std	Z+2, r1	; 0x02
    10b2:	a0 91 16 02 	lds	r26, 0x0216	; 0x800216 <__flp>
    10b6:	b0 91 17 02 	lds	r27, 0x0217	; 0x800217 <__flp+0x1>
    10ba:	10 97       	sbiw	r26, 0x00	; 0
    10bc:	81 f4       	brne	.+32     	; 0x10de <free+0x3e>
    10be:	20 81       	ld	r18, Z
    10c0:	31 81       	ldd	r19, Z+1	; 0x01
    10c2:	82 0f       	add	r24, r18
    10c4:	93 1f       	adc	r25, r19
    10c6:	20 91 14 02 	lds	r18, 0x0214	; 0x800214 <__brkval>
    10ca:	30 91 15 02 	lds	r19, 0x0215	; 0x800215 <__brkval+0x1>
    10ce:	28 17       	cp	r18, r24
    10d0:	39 07       	cpc	r19, r25
    10d2:	51 f5       	brne	.+84     	; 0x1128 <free+0x88>
    10d4:	f0 93 15 02 	sts	0x0215, r31	; 0x800215 <__brkval+0x1>
    10d8:	e0 93 14 02 	sts	0x0214, r30	; 0x800214 <__brkval>
    10dc:	67 c0       	rjmp	.+206    	; 0x11ac <free+0x10c>
    10de:	ed 01       	movw	r28, r26
    10e0:	20 e0       	ldi	r18, 0x00	; 0
    10e2:	30 e0       	ldi	r19, 0x00	; 0
    10e4:	ce 17       	cp	r28, r30
    10e6:	df 07       	cpc	r29, r31
    10e8:	40 f4       	brcc	.+16     	; 0x10fa <free+0x5a>
    10ea:	4a 81       	ldd	r20, Y+2	; 0x02
    10ec:	5b 81       	ldd	r21, Y+3	; 0x03
    10ee:	9e 01       	movw	r18, r28
    10f0:	41 15       	cp	r20, r1
    10f2:	51 05       	cpc	r21, r1
    10f4:	f1 f0       	breq	.+60     	; 0x1132 <free+0x92>
    10f6:	ea 01       	movw	r28, r20
    10f8:	f5 cf       	rjmp	.-22     	; 0x10e4 <free+0x44>
    10fa:	d3 83       	std	Z+3, r29	; 0x03
    10fc:	c2 83       	std	Z+2, r28	; 0x02
    10fe:	40 81       	ld	r20, Z
    1100:	51 81       	ldd	r21, Z+1	; 0x01
    1102:	84 0f       	add	r24, r20
    1104:	95 1f       	adc	r25, r21
    1106:	c8 17       	cp	r28, r24
    1108:	d9 07       	cpc	r29, r25
    110a:	59 f4       	brne	.+22     	; 0x1122 <free+0x82>
    110c:	88 81       	ld	r24, Y
    110e:	99 81       	ldd	r25, Y+1	; 0x01
    1110:	84 0f       	add	r24, r20
    1112:	95 1f       	adc	r25, r21
    1114:	02 96       	adiw	r24, 0x02	; 2
    1116:	91 83       	std	Z+1, r25	; 0x01
    1118:	80 83       	st	Z, r24
    111a:	8a 81       	ldd	r24, Y+2	; 0x02
    111c:	9b 81       	ldd	r25, Y+3	; 0x03
    111e:	93 83       	std	Z+3, r25	; 0x03
    1120:	82 83       	std	Z+2, r24	; 0x02
    1122:	21 15       	cp	r18, r1
    1124:	31 05       	cpc	r19, r1
    1126:	29 f4       	brne	.+10     	; 0x1132 <free+0x92>
    1128:	f0 93 17 02 	sts	0x0217, r31	; 0x800217 <__flp+0x1>
    112c:	e0 93 16 02 	sts	0x0216, r30	; 0x800216 <__flp>
    1130:	3d c0       	rjmp	.+122    	; 0x11ac <free+0x10c>
    1132:	e9 01       	movw	r28, r18
    1134:	fb 83       	std	Y+3, r31	; 0x03
    1136:	ea 83       	std	Y+2, r30	; 0x02
    1138:	49 91       	ld	r20, Y+
    113a:	59 91       	ld	r21, Y+
    113c:	c4 0f       	add	r28, r20
    113e:	d5 1f       	adc	r29, r21
    1140:	ec 17       	cp	r30, r28
    1142:	fd 07       	cpc	r31, r29
    1144:	61 f4       	brne	.+24     	; 0x115e <free+0xbe>
    1146:	80 81       	ld	r24, Z
    1148:	91 81       	ldd	r25, Z+1	; 0x01
    114a:	84 0f       	add	r24, r20
    114c:	95 1f       	adc	r25, r21
    114e:	02 96       	adiw	r24, 0x02	; 2
    1150:	e9 01       	movw	r28, r18
    1152:	99 83       	std	Y+1, r25	; 0x01
    1154:	88 83       	st	Y, r24
    1156:	82 81       	ldd	r24, Z+2	; 0x02
    1158:	93 81       	ldd	r25, Z+3	; 0x03
    115a:	9b 83       	std	Y+3, r25	; 0x03
    115c:	8a 83       	std	Y+2, r24	; 0x02
    115e:	e0 e0       	ldi	r30, 0x00	; 0
    1160:	f0 e0       	ldi	r31, 0x00	; 0
    1162:	12 96       	adiw	r26, 0x02	; 2
    1164:	8d 91       	ld	r24, X+
    1166:	9c 91       	ld	r25, X
    1168:	13 97       	sbiw	r26, 0x03	; 3
    116a:	00 97       	sbiw	r24, 0x00	; 0
    116c:	19 f0       	breq	.+6      	; 0x1174 <free+0xd4>
    116e:	fd 01       	movw	r30, r26
    1170:	dc 01       	movw	r26, r24
    1172:	f7 cf       	rjmp	.-18     	; 0x1162 <free+0xc2>
    1174:	8d 91       	ld	r24, X+
    1176:	9c 91       	ld	r25, X
    1178:	11 97       	sbiw	r26, 0x01	; 1
    117a:	9d 01       	movw	r18, r26
    117c:	2e 5f       	subi	r18, 0xFE	; 254
    117e:	3f 4f       	sbci	r19, 0xFF	; 255
    1180:	82 0f       	add	r24, r18
    1182:	93 1f       	adc	r25, r19
    1184:	20 91 14 02 	lds	r18, 0x0214	; 0x800214 <__brkval>
    1188:	30 91 15 02 	lds	r19, 0x0215	; 0x800215 <__brkval+0x1>
    118c:	28 17       	cp	r18, r24
    118e:	39 07       	cpc	r19, r25
    1190:	69 f4       	brne	.+26     	; 0x11ac <free+0x10c>
    1192:	30 97       	sbiw	r30, 0x00	; 0
    1194:	29 f4       	brne	.+10     	; 0x11a0 <free+0x100>
    1196:	10 92 17 02 	sts	0x0217, r1	; 0x800217 <__flp+0x1>
    119a:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <__flp>
    119e:	02 c0       	rjmp	.+4      	; 0x11a4 <free+0x104>
    11a0:	13 82       	std	Z+3, r1	; 0x03
    11a2:	12 82       	std	Z+2, r1	; 0x02
    11a4:	b0 93 15 02 	sts	0x0215, r27	; 0x800215 <__brkval+0x1>
    11a8:	a0 93 14 02 	sts	0x0214, r26	; 0x800214 <__brkval>
    11ac:	df 91       	pop	r29
    11ae:	cf 91       	pop	r28
    11b0:	08 95       	ret

000011b2 <do_rand>:
    11b2:	8f 92       	push	r8
    11b4:	9f 92       	push	r9
    11b6:	af 92       	push	r10
    11b8:	bf 92       	push	r11
    11ba:	cf 92       	push	r12
    11bc:	df 92       	push	r13
    11be:	ef 92       	push	r14
    11c0:	ff 92       	push	r15
    11c2:	cf 93       	push	r28
    11c4:	df 93       	push	r29
    11c6:	ec 01       	movw	r28, r24
    11c8:	68 81       	ld	r22, Y
    11ca:	79 81       	ldd	r23, Y+1	; 0x01
    11cc:	8a 81       	ldd	r24, Y+2	; 0x02
    11ce:	9b 81       	ldd	r25, Y+3	; 0x03
    11d0:	61 15       	cp	r22, r1
    11d2:	71 05       	cpc	r23, r1
    11d4:	81 05       	cpc	r24, r1
    11d6:	91 05       	cpc	r25, r1
    11d8:	21 f4       	brne	.+8      	; 0x11e2 <do_rand+0x30>
    11da:	64 e2       	ldi	r22, 0x24	; 36
    11dc:	79 ed       	ldi	r23, 0xD9	; 217
    11de:	8b e5       	ldi	r24, 0x5B	; 91
    11e0:	97 e0       	ldi	r25, 0x07	; 7
    11e2:	2d e1       	ldi	r18, 0x1D	; 29
    11e4:	33 ef       	ldi	r19, 0xF3	; 243
    11e6:	41 e0       	ldi	r20, 0x01	; 1
    11e8:	50 e0       	ldi	r21, 0x00	; 0
    11ea:	0e 94 81 0c 	call	0x1902	; 0x1902 <__divmodsi4>
    11ee:	49 01       	movw	r8, r18
    11f0:	5a 01       	movw	r10, r20
    11f2:	9b 01       	movw	r18, r22
    11f4:	ac 01       	movw	r20, r24
    11f6:	a7 ea       	ldi	r26, 0xA7	; 167
    11f8:	b1 e4       	ldi	r27, 0x41	; 65
    11fa:	0e 94 a0 0c 	call	0x1940	; 0x1940 <__muluhisi3>
    11fe:	6b 01       	movw	r12, r22
    1200:	7c 01       	movw	r14, r24
    1202:	ac ee       	ldi	r26, 0xEC	; 236
    1204:	b4 ef       	ldi	r27, 0xF4	; 244
    1206:	a5 01       	movw	r20, r10
    1208:	94 01       	movw	r18, r8
    120a:	0e 94 ae 0c 	call	0x195c	; 0x195c <__mulohisi3>
    120e:	dc 01       	movw	r26, r24
    1210:	cb 01       	movw	r24, r22
    1212:	8c 0d       	add	r24, r12
    1214:	9d 1d       	adc	r25, r13
    1216:	ae 1d       	adc	r26, r14
    1218:	bf 1d       	adc	r27, r15
    121a:	b7 ff       	sbrs	r27, 7
    121c:	03 c0       	rjmp	.+6      	; 0x1224 <do_rand+0x72>
    121e:	01 97       	sbiw	r24, 0x01	; 1
    1220:	a1 09       	sbc	r26, r1
    1222:	b0 48       	sbci	r27, 0x80	; 128
    1224:	88 83       	st	Y, r24
    1226:	99 83       	std	Y+1, r25	; 0x01
    1228:	aa 83       	std	Y+2, r26	; 0x02
    122a:	bb 83       	std	Y+3, r27	; 0x03
    122c:	9f 77       	andi	r25, 0x7F	; 127
    122e:	df 91       	pop	r29
    1230:	cf 91       	pop	r28
    1232:	ff 90       	pop	r15
    1234:	ef 90       	pop	r14
    1236:	df 90       	pop	r13
    1238:	cf 90       	pop	r12
    123a:	bf 90       	pop	r11
    123c:	af 90       	pop	r10
    123e:	9f 90       	pop	r9
    1240:	8f 90       	pop	r8
    1242:	08 95       	ret

00001244 <rand_r>:
    1244:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <do_rand>
    1248:	08 95       	ret

0000124a <rand>:
    124a:	86 e0       	ldi	r24, 0x06	; 6
    124c:	91 e0       	ldi	r25, 0x01	; 1
    124e:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <do_rand>
    1252:	08 95       	ret

00001254 <srand>:
    1254:	a0 e0       	ldi	r26, 0x00	; 0
    1256:	b0 e0       	ldi	r27, 0x00	; 0
    1258:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <next>
    125c:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <next+0x1>
    1260:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <next+0x2>
    1264:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <next+0x3>
    1268:	08 95       	ret

0000126a <fdevopen>:
    126a:	0f 93       	push	r16
    126c:	1f 93       	push	r17
    126e:	cf 93       	push	r28
    1270:	df 93       	push	r29
    1272:	00 97       	sbiw	r24, 0x00	; 0
    1274:	31 f4       	brne	.+12     	; 0x1282 <fdevopen+0x18>
    1276:	61 15       	cp	r22, r1
    1278:	71 05       	cpc	r23, r1
    127a:	19 f4       	brne	.+6      	; 0x1282 <fdevopen+0x18>
    127c:	80 e0       	ldi	r24, 0x00	; 0
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	3a c0       	rjmp	.+116    	; 0x12f6 <fdevopen+0x8c>
    1282:	8b 01       	movw	r16, r22
    1284:	ec 01       	movw	r28, r24
    1286:	6e e0       	ldi	r22, 0x0E	; 14
    1288:	70 e0       	ldi	r23, 0x00	; 0
    128a:	81 e0       	ldi	r24, 0x01	; 1
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	0e 94 ae 0b 	call	0x175c	; 0x175c <calloc>
    1292:	fc 01       	movw	r30, r24
    1294:	89 2b       	or	r24, r25
    1296:	91 f3       	breq	.-28     	; 0x127c <fdevopen+0x12>
    1298:	80 e8       	ldi	r24, 0x80	; 128
    129a:	83 83       	std	Z+3, r24	; 0x03
    129c:	01 15       	cp	r16, r1
    129e:	11 05       	cpc	r17, r1
    12a0:	71 f0       	breq	.+28     	; 0x12be <fdevopen+0x54>
    12a2:	13 87       	std	Z+11, r17	; 0x0b
    12a4:	02 87       	std	Z+10, r16	; 0x0a
    12a6:	81 e8       	ldi	r24, 0x81	; 129
    12a8:	83 83       	std	Z+3, r24	; 0x03
    12aa:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <__iob>
    12ae:	90 91 19 02 	lds	r25, 0x0219	; 0x800219 <__iob+0x1>
    12b2:	89 2b       	or	r24, r25
    12b4:	21 f4       	brne	.+8      	; 0x12be <fdevopen+0x54>
    12b6:	f0 93 19 02 	sts	0x0219, r31	; 0x800219 <__iob+0x1>
    12ba:	e0 93 18 02 	sts	0x0218, r30	; 0x800218 <__iob>
    12be:	20 97       	sbiw	r28, 0x00	; 0
    12c0:	c9 f0       	breq	.+50     	; 0x12f4 <fdevopen+0x8a>
    12c2:	d1 87       	std	Z+9, r29	; 0x09
    12c4:	c0 87       	std	Z+8, r28	; 0x08
    12c6:	83 81       	ldd	r24, Z+3	; 0x03
    12c8:	82 60       	ori	r24, 0x02	; 2
    12ca:	83 83       	std	Z+3, r24	; 0x03
    12cc:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <__iob+0x2>
    12d0:	90 91 1b 02 	lds	r25, 0x021B	; 0x80021b <__iob+0x3>
    12d4:	89 2b       	or	r24, r25
    12d6:	71 f4       	brne	.+28     	; 0x12f4 <fdevopen+0x8a>
    12d8:	f0 93 1b 02 	sts	0x021B, r31	; 0x80021b <__iob+0x3>
    12dc:	e0 93 1a 02 	sts	0x021A, r30	; 0x80021a <__iob+0x2>
    12e0:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <__iob+0x4>
    12e4:	90 91 1d 02 	lds	r25, 0x021D	; 0x80021d <__iob+0x5>
    12e8:	89 2b       	or	r24, r25
    12ea:	21 f4       	brne	.+8      	; 0x12f4 <fdevopen+0x8a>
    12ec:	f0 93 1d 02 	sts	0x021D, r31	; 0x80021d <__iob+0x5>
    12f0:	e0 93 1c 02 	sts	0x021C, r30	; 0x80021c <__iob+0x4>
    12f4:	cf 01       	movw	r24, r30
    12f6:	df 91       	pop	r29
    12f8:	cf 91       	pop	r28
    12fa:	1f 91       	pop	r17
    12fc:	0f 91       	pop	r16
    12fe:	08 95       	ret

00001300 <printf>:
    1300:	a0 e0       	ldi	r26, 0x00	; 0
    1302:	b0 e0       	ldi	r27, 0x00	; 0
    1304:	e6 e8       	ldi	r30, 0x86	; 134
    1306:	f9 e0       	ldi	r31, 0x09	; 9
    1308:	0c 94 c3 0c 	jmp	0x1986	; 0x1986 <__prologue_saves__+0x20>
    130c:	ae 01       	movw	r20, r28
    130e:	4b 5f       	subi	r20, 0xFB	; 251
    1310:	5f 4f       	sbci	r21, 0xFF	; 255
    1312:	fa 01       	movw	r30, r20
    1314:	61 91       	ld	r22, Z+
    1316:	71 91       	ld	r23, Z+
    1318:	af 01       	movw	r20, r30
    131a:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <__iob+0x2>
    131e:	90 91 1b 02 	lds	r25, 0x021B	; 0x80021b <__iob+0x3>
    1322:	0e 94 cd 09 	call	0x139a	; 0x139a <vfprintf>
    1326:	e2 e0       	ldi	r30, 0x02	; 2
    1328:	0c 94 df 0c 	jmp	0x19be	; 0x19be <__epilogue_restores__+0x20>

0000132c <putchar>:
    132c:	60 91 1a 02 	lds	r22, 0x021A	; 0x80021a <__iob+0x2>
    1330:	70 91 1b 02 	lds	r23, 0x021B	; 0x80021b <__iob+0x3>
    1334:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <fputc>
    1338:	08 95       	ret

0000133a <puts>:
    133a:	0f 93       	push	r16
    133c:	1f 93       	push	r17
    133e:	cf 93       	push	r28
    1340:	df 93       	push	r29
    1342:	e0 91 1a 02 	lds	r30, 0x021A	; 0x80021a <__iob+0x2>
    1346:	f0 91 1b 02 	lds	r31, 0x021B	; 0x80021b <__iob+0x3>
    134a:	23 81       	ldd	r18, Z+3	; 0x03
    134c:	21 ff       	sbrs	r18, 1
    134e:	1b c0       	rjmp	.+54     	; 0x1386 <puts+0x4c>
    1350:	8c 01       	movw	r16, r24
    1352:	d0 e0       	ldi	r29, 0x00	; 0
    1354:	c0 e0       	ldi	r28, 0x00	; 0
    1356:	f8 01       	movw	r30, r16
    1358:	81 91       	ld	r24, Z+
    135a:	8f 01       	movw	r16, r30
    135c:	60 91 1a 02 	lds	r22, 0x021A	; 0x80021a <__iob+0x2>
    1360:	70 91 1b 02 	lds	r23, 0x021B	; 0x80021b <__iob+0x3>
    1364:	db 01       	movw	r26, r22
    1366:	18 96       	adiw	r26, 0x08	; 8
    1368:	ed 91       	ld	r30, X+
    136a:	fc 91       	ld	r31, X
    136c:	19 97       	sbiw	r26, 0x09	; 9
    136e:	88 23       	and	r24, r24
    1370:	31 f0       	breq	.+12     	; 0x137e <puts+0x44>
    1372:	09 95       	icall
    1374:	89 2b       	or	r24, r25
    1376:	79 f3       	breq	.-34     	; 0x1356 <puts+0x1c>
    1378:	df ef       	ldi	r29, 0xFF	; 255
    137a:	cf ef       	ldi	r28, 0xFF	; 255
    137c:	ec cf       	rjmp	.-40     	; 0x1356 <puts+0x1c>
    137e:	8a e0       	ldi	r24, 0x0A	; 10
    1380:	09 95       	icall
    1382:	89 2b       	or	r24, r25
    1384:	19 f0       	breq	.+6      	; 0x138c <puts+0x52>
    1386:	8f ef       	ldi	r24, 0xFF	; 255
    1388:	9f ef       	ldi	r25, 0xFF	; 255
    138a:	02 c0       	rjmp	.+4      	; 0x1390 <puts+0x56>
    138c:	8d 2f       	mov	r24, r29
    138e:	9c 2f       	mov	r25, r28
    1390:	df 91       	pop	r29
    1392:	cf 91       	pop	r28
    1394:	1f 91       	pop	r17
    1396:	0f 91       	pop	r16
    1398:	08 95       	ret

0000139a <vfprintf>:
    139a:	ab e0       	ldi	r26, 0x0B	; 11
    139c:	b0 e0       	ldi	r27, 0x00	; 0
    139e:	e3 ed       	ldi	r30, 0xD3	; 211
    13a0:	f9 e0       	ldi	r31, 0x09	; 9
    13a2:	0c 94 b3 0c 	jmp	0x1966	; 0x1966 <__prologue_saves__>
    13a6:	6c 01       	movw	r12, r24
    13a8:	7b 01       	movw	r14, r22
    13aa:	8a 01       	movw	r16, r20
    13ac:	fc 01       	movw	r30, r24
    13ae:	17 82       	std	Z+7, r1	; 0x07
    13b0:	16 82       	std	Z+6, r1	; 0x06
    13b2:	83 81       	ldd	r24, Z+3	; 0x03
    13b4:	81 ff       	sbrs	r24, 1
    13b6:	cc c1       	rjmp	.+920    	; 0x1750 <vfprintf+0x3b6>
    13b8:	ce 01       	movw	r24, r28
    13ba:	01 96       	adiw	r24, 0x01	; 1
    13bc:	3c 01       	movw	r6, r24
    13be:	f6 01       	movw	r30, r12
    13c0:	93 81       	ldd	r25, Z+3	; 0x03
    13c2:	f7 01       	movw	r30, r14
    13c4:	93 fd       	sbrc	r25, 3
    13c6:	85 91       	lpm	r24, Z+
    13c8:	93 ff       	sbrs	r25, 3
    13ca:	81 91       	ld	r24, Z+
    13cc:	7f 01       	movw	r14, r30
    13ce:	88 23       	and	r24, r24
    13d0:	09 f4       	brne	.+2      	; 0x13d4 <vfprintf+0x3a>
    13d2:	ba c1       	rjmp	.+884    	; 0x1748 <vfprintf+0x3ae>
    13d4:	85 32       	cpi	r24, 0x25	; 37
    13d6:	39 f4       	brne	.+14     	; 0x13e6 <vfprintf+0x4c>
    13d8:	93 fd       	sbrc	r25, 3
    13da:	85 91       	lpm	r24, Z+
    13dc:	93 ff       	sbrs	r25, 3
    13de:	81 91       	ld	r24, Z+
    13e0:	7f 01       	movw	r14, r30
    13e2:	85 32       	cpi	r24, 0x25	; 37
    13e4:	29 f4       	brne	.+10     	; 0x13f0 <vfprintf+0x56>
    13e6:	b6 01       	movw	r22, r12
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <fputc>
    13ee:	e7 cf       	rjmp	.-50     	; 0x13be <vfprintf+0x24>
    13f0:	91 2c       	mov	r9, r1
    13f2:	21 2c       	mov	r2, r1
    13f4:	31 2c       	mov	r3, r1
    13f6:	ff e1       	ldi	r31, 0x1F	; 31
    13f8:	f3 15       	cp	r31, r3
    13fa:	d8 f0       	brcs	.+54     	; 0x1432 <vfprintf+0x98>
    13fc:	8b 32       	cpi	r24, 0x2B	; 43
    13fe:	79 f0       	breq	.+30     	; 0x141e <vfprintf+0x84>
    1400:	38 f4       	brcc	.+14     	; 0x1410 <vfprintf+0x76>
    1402:	80 32       	cpi	r24, 0x20	; 32
    1404:	79 f0       	breq	.+30     	; 0x1424 <vfprintf+0x8a>
    1406:	83 32       	cpi	r24, 0x23	; 35
    1408:	a1 f4       	brne	.+40     	; 0x1432 <vfprintf+0x98>
    140a:	23 2d       	mov	r18, r3
    140c:	20 61       	ori	r18, 0x10	; 16
    140e:	1d c0       	rjmp	.+58     	; 0x144a <vfprintf+0xb0>
    1410:	8d 32       	cpi	r24, 0x2D	; 45
    1412:	61 f0       	breq	.+24     	; 0x142c <vfprintf+0x92>
    1414:	80 33       	cpi	r24, 0x30	; 48
    1416:	69 f4       	brne	.+26     	; 0x1432 <vfprintf+0x98>
    1418:	23 2d       	mov	r18, r3
    141a:	21 60       	ori	r18, 0x01	; 1
    141c:	16 c0       	rjmp	.+44     	; 0x144a <vfprintf+0xb0>
    141e:	83 2d       	mov	r24, r3
    1420:	82 60       	ori	r24, 0x02	; 2
    1422:	38 2e       	mov	r3, r24
    1424:	e3 2d       	mov	r30, r3
    1426:	e4 60       	ori	r30, 0x04	; 4
    1428:	3e 2e       	mov	r3, r30
    142a:	2a c0       	rjmp	.+84     	; 0x1480 <vfprintf+0xe6>
    142c:	f3 2d       	mov	r31, r3
    142e:	f8 60       	ori	r31, 0x08	; 8
    1430:	1d c0       	rjmp	.+58     	; 0x146c <vfprintf+0xd2>
    1432:	37 fc       	sbrc	r3, 7
    1434:	2d c0       	rjmp	.+90     	; 0x1490 <vfprintf+0xf6>
    1436:	20 ed       	ldi	r18, 0xD0	; 208
    1438:	28 0f       	add	r18, r24
    143a:	2a 30       	cpi	r18, 0x0A	; 10
    143c:	40 f0       	brcs	.+16     	; 0x144e <vfprintf+0xb4>
    143e:	8e 32       	cpi	r24, 0x2E	; 46
    1440:	b9 f4       	brne	.+46     	; 0x1470 <vfprintf+0xd6>
    1442:	36 fc       	sbrc	r3, 6
    1444:	81 c1       	rjmp	.+770    	; 0x1748 <vfprintf+0x3ae>
    1446:	23 2d       	mov	r18, r3
    1448:	20 64       	ori	r18, 0x40	; 64
    144a:	32 2e       	mov	r3, r18
    144c:	19 c0       	rjmp	.+50     	; 0x1480 <vfprintf+0xe6>
    144e:	36 fe       	sbrs	r3, 6
    1450:	06 c0       	rjmp	.+12     	; 0x145e <vfprintf+0xc4>
    1452:	8a e0       	ldi	r24, 0x0A	; 10
    1454:	98 9e       	mul	r9, r24
    1456:	20 0d       	add	r18, r0
    1458:	11 24       	eor	r1, r1
    145a:	92 2e       	mov	r9, r18
    145c:	11 c0       	rjmp	.+34     	; 0x1480 <vfprintf+0xe6>
    145e:	ea e0       	ldi	r30, 0x0A	; 10
    1460:	2e 9e       	mul	r2, r30
    1462:	20 0d       	add	r18, r0
    1464:	11 24       	eor	r1, r1
    1466:	22 2e       	mov	r2, r18
    1468:	f3 2d       	mov	r31, r3
    146a:	f0 62       	ori	r31, 0x20	; 32
    146c:	3f 2e       	mov	r3, r31
    146e:	08 c0       	rjmp	.+16     	; 0x1480 <vfprintf+0xe6>
    1470:	8c 36       	cpi	r24, 0x6C	; 108
    1472:	21 f4       	brne	.+8      	; 0x147c <vfprintf+0xe2>
    1474:	83 2d       	mov	r24, r3
    1476:	80 68       	ori	r24, 0x80	; 128
    1478:	38 2e       	mov	r3, r24
    147a:	02 c0       	rjmp	.+4      	; 0x1480 <vfprintf+0xe6>
    147c:	88 36       	cpi	r24, 0x68	; 104
    147e:	41 f4       	brne	.+16     	; 0x1490 <vfprintf+0xf6>
    1480:	f7 01       	movw	r30, r14
    1482:	93 fd       	sbrc	r25, 3
    1484:	85 91       	lpm	r24, Z+
    1486:	93 ff       	sbrs	r25, 3
    1488:	81 91       	ld	r24, Z+
    148a:	7f 01       	movw	r14, r30
    148c:	81 11       	cpse	r24, r1
    148e:	b3 cf       	rjmp	.-154    	; 0x13f6 <vfprintf+0x5c>
    1490:	98 2f       	mov	r25, r24
    1492:	9f 7d       	andi	r25, 0xDF	; 223
    1494:	95 54       	subi	r25, 0x45	; 69
    1496:	93 30       	cpi	r25, 0x03	; 3
    1498:	28 f4       	brcc	.+10     	; 0x14a4 <vfprintf+0x10a>
    149a:	0c 5f       	subi	r16, 0xFC	; 252
    149c:	1f 4f       	sbci	r17, 0xFF	; 255
    149e:	9f e3       	ldi	r25, 0x3F	; 63
    14a0:	99 83       	std	Y+1, r25	; 0x01
    14a2:	0d c0       	rjmp	.+26     	; 0x14be <vfprintf+0x124>
    14a4:	83 36       	cpi	r24, 0x63	; 99
    14a6:	31 f0       	breq	.+12     	; 0x14b4 <vfprintf+0x11a>
    14a8:	83 37       	cpi	r24, 0x73	; 115
    14aa:	71 f0       	breq	.+28     	; 0x14c8 <vfprintf+0x12e>
    14ac:	83 35       	cpi	r24, 0x53	; 83
    14ae:	09 f0       	breq	.+2      	; 0x14b2 <vfprintf+0x118>
    14b0:	59 c0       	rjmp	.+178    	; 0x1564 <vfprintf+0x1ca>
    14b2:	21 c0       	rjmp	.+66     	; 0x14f6 <vfprintf+0x15c>
    14b4:	f8 01       	movw	r30, r16
    14b6:	80 81       	ld	r24, Z
    14b8:	89 83       	std	Y+1, r24	; 0x01
    14ba:	0e 5f       	subi	r16, 0xFE	; 254
    14bc:	1f 4f       	sbci	r17, 0xFF	; 255
    14be:	88 24       	eor	r8, r8
    14c0:	83 94       	inc	r8
    14c2:	91 2c       	mov	r9, r1
    14c4:	53 01       	movw	r10, r6
    14c6:	13 c0       	rjmp	.+38     	; 0x14ee <vfprintf+0x154>
    14c8:	28 01       	movw	r4, r16
    14ca:	f2 e0       	ldi	r31, 0x02	; 2
    14cc:	4f 0e       	add	r4, r31
    14ce:	51 1c       	adc	r5, r1
    14d0:	f8 01       	movw	r30, r16
    14d2:	a0 80       	ld	r10, Z
    14d4:	b1 80       	ldd	r11, Z+1	; 0x01
    14d6:	36 fe       	sbrs	r3, 6
    14d8:	03 c0       	rjmp	.+6      	; 0x14e0 <vfprintf+0x146>
    14da:	69 2d       	mov	r22, r9
    14dc:	70 e0       	ldi	r23, 0x00	; 0
    14de:	02 c0       	rjmp	.+4      	; 0x14e4 <vfprintf+0x14a>
    14e0:	6f ef       	ldi	r22, 0xFF	; 255
    14e2:	7f ef       	ldi	r23, 0xFF	; 255
    14e4:	c5 01       	movw	r24, r10
    14e6:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <strnlen>
    14ea:	4c 01       	movw	r8, r24
    14ec:	82 01       	movw	r16, r4
    14ee:	f3 2d       	mov	r31, r3
    14f0:	ff 77       	andi	r31, 0x7F	; 127
    14f2:	3f 2e       	mov	r3, r31
    14f4:	16 c0       	rjmp	.+44     	; 0x1522 <vfprintf+0x188>
    14f6:	28 01       	movw	r4, r16
    14f8:	22 e0       	ldi	r18, 0x02	; 2
    14fa:	42 0e       	add	r4, r18
    14fc:	51 1c       	adc	r5, r1
    14fe:	f8 01       	movw	r30, r16
    1500:	a0 80       	ld	r10, Z
    1502:	b1 80       	ldd	r11, Z+1	; 0x01
    1504:	36 fe       	sbrs	r3, 6
    1506:	03 c0       	rjmp	.+6      	; 0x150e <vfprintf+0x174>
    1508:	69 2d       	mov	r22, r9
    150a:	70 e0       	ldi	r23, 0x00	; 0
    150c:	02 c0       	rjmp	.+4      	; 0x1512 <vfprintf+0x178>
    150e:	6f ef       	ldi	r22, 0xFF	; 255
    1510:	7f ef       	ldi	r23, 0xFF	; 255
    1512:	c5 01       	movw	r24, r10
    1514:	0e 94 ca 0b 	call	0x1794	; 0x1794 <strnlen_P>
    1518:	4c 01       	movw	r8, r24
    151a:	f3 2d       	mov	r31, r3
    151c:	f0 68       	ori	r31, 0x80	; 128
    151e:	3f 2e       	mov	r3, r31
    1520:	82 01       	movw	r16, r4
    1522:	33 fc       	sbrc	r3, 3
    1524:	1b c0       	rjmp	.+54     	; 0x155c <vfprintf+0x1c2>
    1526:	82 2d       	mov	r24, r2
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	88 16       	cp	r8, r24
    152c:	99 06       	cpc	r9, r25
    152e:	b0 f4       	brcc	.+44     	; 0x155c <vfprintf+0x1c2>
    1530:	b6 01       	movw	r22, r12
    1532:	80 e2       	ldi	r24, 0x20	; 32
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <fputc>
    153a:	2a 94       	dec	r2
    153c:	f4 cf       	rjmp	.-24     	; 0x1526 <vfprintf+0x18c>
    153e:	f5 01       	movw	r30, r10
    1540:	37 fc       	sbrc	r3, 7
    1542:	85 91       	lpm	r24, Z+
    1544:	37 fe       	sbrs	r3, 7
    1546:	81 91       	ld	r24, Z+
    1548:	5f 01       	movw	r10, r30
    154a:	b6 01       	movw	r22, r12
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <fputc>
    1552:	21 10       	cpse	r2, r1
    1554:	2a 94       	dec	r2
    1556:	21 e0       	ldi	r18, 0x01	; 1
    1558:	82 1a       	sub	r8, r18
    155a:	91 08       	sbc	r9, r1
    155c:	81 14       	cp	r8, r1
    155e:	91 04       	cpc	r9, r1
    1560:	71 f7       	brne	.-36     	; 0x153e <vfprintf+0x1a4>
    1562:	e8 c0       	rjmp	.+464    	; 0x1734 <vfprintf+0x39a>
    1564:	84 36       	cpi	r24, 0x64	; 100
    1566:	11 f0       	breq	.+4      	; 0x156c <vfprintf+0x1d2>
    1568:	89 36       	cpi	r24, 0x69	; 105
    156a:	41 f5       	brne	.+80     	; 0x15bc <vfprintf+0x222>
    156c:	f8 01       	movw	r30, r16
    156e:	37 fe       	sbrs	r3, 7
    1570:	07 c0       	rjmp	.+14     	; 0x1580 <vfprintf+0x1e6>
    1572:	60 81       	ld	r22, Z
    1574:	71 81       	ldd	r23, Z+1	; 0x01
    1576:	82 81       	ldd	r24, Z+2	; 0x02
    1578:	93 81       	ldd	r25, Z+3	; 0x03
    157a:	0c 5f       	subi	r16, 0xFC	; 252
    157c:	1f 4f       	sbci	r17, 0xFF	; 255
    157e:	08 c0       	rjmp	.+16     	; 0x1590 <vfprintf+0x1f6>
    1580:	60 81       	ld	r22, Z
    1582:	71 81       	ldd	r23, Z+1	; 0x01
    1584:	07 2e       	mov	r0, r23
    1586:	00 0c       	add	r0, r0
    1588:	88 0b       	sbc	r24, r24
    158a:	99 0b       	sbc	r25, r25
    158c:	0e 5f       	subi	r16, 0xFE	; 254
    158e:	1f 4f       	sbci	r17, 0xFF	; 255
    1590:	f3 2d       	mov	r31, r3
    1592:	ff 76       	andi	r31, 0x6F	; 111
    1594:	3f 2e       	mov	r3, r31
    1596:	97 ff       	sbrs	r25, 7
    1598:	09 c0       	rjmp	.+18     	; 0x15ac <vfprintf+0x212>
    159a:	90 95       	com	r25
    159c:	80 95       	com	r24
    159e:	70 95       	com	r23
    15a0:	61 95       	neg	r22
    15a2:	7f 4f       	sbci	r23, 0xFF	; 255
    15a4:	8f 4f       	sbci	r24, 0xFF	; 255
    15a6:	9f 4f       	sbci	r25, 0xFF	; 255
    15a8:	f0 68       	ori	r31, 0x80	; 128
    15aa:	3f 2e       	mov	r3, r31
    15ac:	2a e0       	ldi	r18, 0x0A	; 10
    15ae:	30 e0       	ldi	r19, 0x00	; 0
    15b0:	a3 01       	movw	r20, r6
    15b2:	0e 94 23 0c 	call	0x1846	; 0x1846 <__ultoa_invert>
    15b6:	88 2e       	mov	r8, r24
    15b8:	86 18       	sub	r8, r6
    15ba:	45 c0       	rjmp	.+138    	; 0x1646 <vfprintf+0x2ac>
    15bc:	85 37       	cpi	r24, 0x75	; 117
    15be:	31 f4       	brne	.+12     	; 0x15cc <vfprintf+0x232>
    15c0:	23 2d       	mov	r18, r3
    15c2:	2f 7e       	andi	r18, 0xEF	; 239
    15c4:	b2 2e       	mov	r11, r18
    15c6:	2a e0       	ldi	r18, 0x0A	; 10
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	25 c0       	rjmp	.+74     	; 0x1616 <vfprintf+0x27c>
    15cc:	93 2d       	mov	r25, r3
    15ce:	99 7f       	andi	r25, 0xF9	; 249
    15d0:	b9 2e       	mov	r11, r25
    15d2:	8f 36       	cpi	r24, 0x6F	; 111
    15d4:	c1 f0       	breq	.+48     	; 0x1606 <vfprintf+0x26c>
    15d6:	18 f4       	brcc	.+6      	; 0x15de <vfprintf+0x244>
    15d8:	88 35       	cpi	r24, 0x58	; 88
    15da:	79 f0       	breq	.+30     	; 0x15fa <vfprintf+0x260>
    15dc:	b5 c0       	rjmp	.+362    	; 0x1748 <vfprintf+0x3ae>
    15de:	80 37       	cpi	r24, 0x70	; 112
    15e0:	19 f0       	breq	.+6      	; 0x15e8 <vfprintf+0x24e>
    15e2:	88 37       	cpi	r24, 0x78	; 120
    15e4:	21 f0       	breq	.+8      	; 0x15ee <vfprintf+0x254>
    15e6:	b0 c0       	rjmp	.+352    	; 0x1748 <vfprintf+0x3ae>
    15e8:	e9 2f       	mov	r30, r25
    15ea:	e0 61       	ori	r30, 0x10	; 16
    15ec:	be 2e       	mov	r11, r30
    15ee:	b4 fe       	sbrs	r11, 4
    15f0:	0d c0       	rjmp	.+26     	; 0x160c <vfprintf+0x272>
    15f2:	fb 2d       	mov	r31, r11
    15f4:	f4 60       	ori	r31, 0x04	; 4
    15f6:	bf 2e       	mov	r11, r31
    15f8:	09 c0       	rjmp	.+18     	; 0x160c <vfprintf+0x272>
    15fa:	34 fe       	sbrs	r3, 4
    15fc:	0a c0       	rjmp	.+20     	; 0x1612 <vfprintf+0x278>
    15fe:	29 2f       	mov	r18, r25
    1600:	26 60       	ori	r18, 0x06	; 6
    1602:	b2 2e       	mov	r11, r18
    1604:	06 c0       	rjmp	.+12     	; 0x1612 <vfprintf+0x278>
    1606:	28 e0       	ldi	r18, 0x08	; 8
    1608:	30 e0       	ldi	r19, 0x00	; 0
    160a:	05 c0       	rjmp	.+10     	; 0x1616 <vfprintf+0x27c>
    160c:	20 e1       	ldi	r18, 0x10	; 16
    160e:	30 e0       	ldi	r19, 0x00	; 0
    1610:	02 c0       	rjmp	.+4      	; 0x1616 <vfprintf+0x27c>
    1612:	20 e1       	ldi	r18, 0x10	; 16
    1614:	32 e0       	ldi	r19, 0x02	; 2
    1616:	f8 01       	movw	r30, r16
    1618:	b7 fe       	sbrs	r11, 7
    161a:	07 c0       	rjmp	.+14     	; 0x162a <vfprintf+0x290>
    161c:	60 81       	ld	r22, Z
    161e:	71 81       	ldd	r23, Z+1	; 0x01
    1620:	82 81       	ldd	r24, Z+2	; 0x02
    1622:	93 81       	ldd	r25, Z+3	; 0x03
    1624:	0c 5f       	subi	r16, 0xFC	; 252
    1626:	1f 4f       	sbci	r17, 0xFF	; 255
    1628:	06 c0       	rjmp	.+12     	; 0x1636 <vfprintf+0x29c>
    162a:	60 81       	ld	r22, Z
    162c:	71 81       	ldd	r23, Z+1	; 0x01
    162e:	80 e0       	ldi	r24, 0x00	; 0
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	0e 5f       	subi	r16, 0xFE	; 254
    1634:	1f 4f       	sbci	r17, 0xFF	; 255
    1636:	a3 01       	movw	r20, r6
    1638:	0e 94 23 0c 	call	0x1846	; 0x1846 <__ultoa_invert>
    163c:	88 2e       	mov	r8, r24
    163e:	86 18       	sub	r8, r6
    1640:	fb 2d       	mov	r31, r11
    1642:	ff 77       	andi	r31, 0x7F	; 127
    1644:	3f 2e       	mov	r3, r31
    1646:	36 fe       	sbrs	r3, 6
    1648:	0d c0       	rjmp	.+26     	; 0x1664 <vfprintf+0x2ca>
    164a:	23 2d       	mov	r18, r3
    164c:	2e 7f       	andi	r18, 0xFE	; 254
    164e:	a2 2e       	mov	r10, r18
    1650:	89 14       	cp	r8, r9
    1652:	58 f4       	brcc	.+22     	; 0x166a <vfprintf+0x2d0>
    1654:	34 fe       	sbrs	r3, 4
    1656:	0b c0       	rjmp	.+22     	; 0x166e <vfprintf+0x2d4>
    1658:	32 fc       	sbrc	r3, 2
    165a:	09 c0       	rjmp	.+18     	; 0x166e <vfprintf+0x2d4>
    165c:	83 2d       	mov	r24, r3
    165e:	8e 7e       	andi	r24, 0xEE	; 238
    1660:	a8 2e       	mov	r10, r24
    1662:	05 c0       	rjmp	.+10     	; 0x166e <vfprintf+0x2d4>
    1664:	b8 2c       	mov	r11, r8
    1666:	a3 2c       	mov	r10, r3
    1668:	03 c0       	rjmp	.+6      	; 0x1670 <vfprintf+0x2d6>
    166a:	b8 2c       	mov	r11, r8
    166c:	01 c0       	rjmp	.+2      	; 0x1670 <vfprintf+0x2d6>
    166e:	b9 2c       	mov	r11, r9
    1670:	a4 fe       	sbrs	r10, 4
    1672:	0f c0       	rjmp	.+30     	; 0x1692 <vfprintf+0x2f8>
    1674:	fe 01       	movw	r30, r28
    1676:	e8 0d       	add	r30, r8
    1678:	f1 1d       	adc	r31, r1
    167a:	80 81       	ld	r24, Z
    167c:	80 33       	cpi	r24, 0x30	; 48
    167e:	21 f4       	brne	.+8      	; 0x1688 <vfprintf+0x2ee>
    1680:	9a 2d       	mov	r25, r10
    1682:	99 7e       	andi	r25, 0xE9	; 233
    1684:	a9 2e       	mov	r10, r25
    1686:	09 c0       	rjmp	.+18     	; 0x169a <vfprintf+0x300>
    1688:	a2 fe       	sbrs	r10, 2
    168a:	06 c0       	rjmp	.+12     	; 0x1698 <vfprintf+0x2fe>
    168c:	b3 94       	inc	r11
    168e:	b3 94       	inc	r11
    1690:	04 c0       	rjmp	.+8      	; 0x169a <vfprintf+0x300>
    1692:	8a 2d       	mov	r24, r10
    1694:	86 78       	andi	r24, 0x86	; 134
    1696:	09 f0       	breq	.+2      	; 0x169a <vfprintf+0x300>
    1698:	b3 94       	inc	r11
    169a:	a3 fc       	sbrc	r10, 3
    169c:	11 c0       	rjmp	.+34     	; 0x16c0 <vfprintf+0x326>
    169e:	a0 fe       	sbrs	r10, 0
    16a0:	06 c0       	rjmp	.+12     	; 0x16ae <vfprintf+0x314>
    16a2:	b2 14       	cp	r11, r2
    16a4:	88 f4       	brcc	.+34     	; 0x16c8 <vfprintf+0x32e>
    16a6:	28 0c       	add	r2, r8
    16a8:	92 2c       	mov	r9, r2
    16aa:	9b 18       	sub	r9, r11
    16ac:	0e c0       	rjmp	.+28     	; 0x16ca <vfprintf+0x330>
    16ae:	b2 14       	cp	r11, r2
    16b0:	60 f4       	brcc	.+24     	; 0x16ca <vfprintf+0x330>
    16b2:	b6 01       	movw	r22, r12
    16b4:	80 e2       	ldi	r24, 0x20	; 32
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <fputc>
    16bc:	b3 94       	inc	r11
    16be:	f7 cf       	rjmp	.-18     	; 0x16ae <vfprintf+0x314>
    16c0:	b2 14       	cp	r11, r2
    16c2:	18 f4       	brcc	.+6      	; 0x16ca <vfprintf+0x330>
    16c4:	2b 18       	sub	r2, r11
    16c6:	02 c0       	rjmp	.+4      	; 0x16cc <vfprintf+0x332>
    16c8:	98 2c       	mov	r9, r8
    16ca:	21 2c       	mov	r2, r1
    16cc:	a4 fe       	sbrs	r10, 4
    16ce:	10 c0       	rjmp	.+32     	; 0x16f0 <vfprintf+0x356>
    16d0:	b6 01       	movw	r22, r12
    16d2:	80 e3       	ldi	r24, 0x30	; 48
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <fputc>
    16da:	a2 fe       	sbrs	r10, 2
    16dc:	17 c0       	rjmp	.+46     	; 0x170c <vfprintf+0x372>
    16de:	a1 fc       	sbrc	r10, 1
    16e0:	03 c0       	rjmp	.+6      	; 0x16e8 <vfprintf+0x34e>
    16e2:	88 e7       	ldi	r24, 0x78	; 120
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	02 c0       	rjmp	.+4      	; 0x16ec <vfprintf+0x352>
    16e8:	88 e5       	ldi	r24, 0x58	; 88
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	b6 01       	movw	r22, r12
    16ee:	0c c0       	rjmp	.+24     	; 0x1708 <vfprintf+0x36e>
    16f0:	8a 2d       	mov	r24, r10
    16f2:	86 78       	andi	r24, 0x86	; 134
    16f4:	59 f0       	breq	.+22     	; 0x170c <vfprintf+0x372>
    16f6:	a1 fe       	sbrs	r10, 1
    16f8:	02 c0       	rjmp	.+4      	; 0x16fe <vfprintf+0x364>
    16fa:	8b e2       	ldi	r24, 0x2B	; 43
    16fc:	01 c0       	rjmp	.+2      	; 0x1700 <vfprintf+0x366>
    16fe:	80 e2       	ldi	r24, 0x20	; 32
    1700:	a7 fc       	sbrc	r10, 7
    1702:	8d e2       	ldi	r24, 0x2D	; 45
    1704:	b6 01       	movw	r22, r12
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <fputc>
    170c:	89 14       	cp	r8, r9
    170e:	38 f4       	brcc	.+14     	; 0x171e <vfprintf+0x384>
    1710:	b6 01       	movw	r22, r12
    1712:	80 e3       	ldi	r24, 0x30	; 48
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <fputc>
    171a:	9a 94       	dec	r9
    171c:	f7 cf       	rjmp	.-18     	; 0x170c <vfprintf+0x372>
    171e:	8a 94       	dec	r8
    1720:	f3 01       	movw	r30, r6
    1722:	e8 0d       	add	r30, r8
    1724:	f1 1d       	adc	r31, r1
    1726:	80 81       	ld	r24, Z
    1728:	b6 01       	movw	r22, r12
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <fputc>
    1730:	81 10       	cpse	r8, r1
    1732:	f5 cf       	rjmp	.-22     	; 0x171e <vfprintf+0x384>
    1734:	22 20       	and	r2, r2
    1736:	09 f4       	brne	.+2      	; 0x173a <vfprintf+0x3a0>
    1738:	42 ce       	rjmp	.-892    	; 0x13be <vfprintf+0x24>
    173a:	b6 01       	movw	r22, r12
    173c:	80 e2       	ldi	r24, 0x20	; 32
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <fputc>
    1744:	2a 94       	dec	r2
    1746:	f6 cf       	rjmp	.-20     	; 0x1734 <vfprintf+0x39a>
    1748:	f6 01       	movw	r30, r12
    174a:	86 81       	ldd	r24, Z+6	; 0x06
    174c:	97 81       	ldd	r25, Z+7	; 0x07
    174e:	02 c0       	rjmp	.+4      	; 0x1754 <vfprintf+0x3ba>
    1750:	8f ef       	ldi	r24, 0xFF	; 255
    1752:	9f ef       	ldi	r25, 0xFF	; 255
    1754:	2b 96       	adiw	r28, 0x0b	; 11
    1756:	e2 e1       	ldi	r30, 0x12	; 18
    1758:	0c 94 cf 0c 	jmp	0x199e	; 0x199e <__epilogue_restores__>

0000175c <calloc>:
    175c:	0f 93       	push	r16
    175e:	1f 93       	push	r17
    1760:	cf 93       	push	r28
    1762:	df 93       	push	r29
    1764:	86 9f       	mul	r24, r22
    1766:	80 01       	movw	r16, r0
    1768:	87 9f       	mul	r24, r23
    176a:	10 0d       	add	r17, r0
    176c:	96 9f       	mul	r25, r22
    176e:	10 0d       	add	r17, r0
    1770:	11 24       	eor	r1, r1
    1772:	c8 01       	movw	r24, r16
    1774:	0e 94 b8 07 	call	0xf70	; 0xf70 <malloc>
    1778:	ec 01       	movw	r28, r24
    177a:	00 97       	sbiw	r24, 0x00	; 0
    177c:	29 f0       	breq	.+10     	; 0x1788 <calloc+0x2c>
    177e:	a8 01       	movw	r20, r16
    1780:	60 e0       	ldi	r22, 0x00	; 0
    1782:	70 e0       	ldi	r23, 0x00	; 0
    1784:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <memset>
    1788:	ce 01       	movw	r24, r28
    178a:	df 91       	pop	r29
    178c:	cf 91       	pop	r28
    178e:	1f 91       	pop	r17
    1790:	0f 91       	pop	r16
    1792:	08 95       	ret

00001794 <strnlen_P>:
    1794:	fc 01       	movw	r30, r24
    1796:	05 90       	lpm	r0, Z+
    1798:	61 50       	subi	r22, 0x01	; 1
    179a:	70 40       	sbci	r23, 0x00	; 0
    179c:	01 10       	cpse	r0, r1
    179e:	d8 f7       	brcc	.-10     	; 0x1796 <strnlen_P+0x2>
    17a0:	80 95       	com	r24
    17a2:	90 95       	com	r25
    17a4:	8e 0f       	add	r24, r30
    17a6:	9f 1f       	adc	r25, r31
    17a8:	08 95       	ret

000017aa <memset>:
    17aa:	dc 01       	movw	r26, r24
    17ac:	01 c0       	rjmp	.+2      	; 0x17b0 <memset+0x6>
    17ae:	6d 93       	st	X+, r22
    17b0:	41 50       	subi	r20, 0x01	; 1
    17b2:	50 40       	sbci	r21, 0x00	; 0
    17b4:	e0 f7       	brcc	.-8      	; 0x17ae <memset+0x4>
    17b6:	08 95       	ret

000017b8 <strnlen>:
    17b8:	fc 01       	movw	r30, r24
    17ba:	61 50       	subi	r22, 0x01	; 1
    17bc:	70 40       	sbci	r23, 0x00	; 0
    17be:	01 90       	ld	r0, Z+
    17c0:	01 10       	cpse	r0, r1
    17c2:	d8 f7       	brcc	.-10     	; 0x17ba <strnlen+0x2>
    17c4:	80 95       	com	r24
    17c6:	90 95       	com	r25
    17c8:	8e 0f       	add	r24, r30
    17ca:	9f 1f       	adc	r25, r31
    17cc:	08 95       	ret

000017ce <fputc>:
    17ce:	0f 93       	push	r16
    17d0:	1f 93       	push	r17
    17d2:	cf 93       	push	r28
    17d4:	df 93       	push	r29
    17d6:	fb 01       	movw	r30, r22
    17d8:	23 81       	ldd	r18, Z+3	; 0x03
    17da:	21 fd       	sbrc	r18, 1
    17dc:	03 c0       	rjmp	.+6      	; 0x17e4 <fputc+0x16>
    17de:	8f ef       	ldi	r24, 0xFF	; 255
    17e0:	9f ef       	ldi	r25, 0xFF	; 255
    17e2:	2c c0       	rjmp	.+88     	; 0x183c <fputc+0x6e>
    17e4:	22 ff       	sbrs	r18, 2
    17e6:	16 c0       	rjmp	.+44     	; 0x1814 <fputc+0x46>
    17e8:	46 81       	ldd	r20, Z+6	; 0x06
    17ea:	57 81       	ldd	r21, Z+7	; 0x07
    17ec:	24 81       	ldd	r18, Z+4	; 0x04
    17ee:	35 81       	ldd	r19, Z+5	; 0x05
    17f0:	42 17       	cp	r20, r18
    17f2:	53 07       	cpc	r21, r19
    17f4:	44 f4       	brge	.+16     	; 0x1806 <fputc+0x38>
    17f6:	a0 81       	ld	r26, Z
    17f8:	b1 81       	ldd	r27, Z+1	; 0x01
    17fa:	9d 01       	movw	r18, r26
    17fc:	2f 5f       	subi	r18, 0xFF	; 255
    17fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1800:	31 83       	std	Z+1, r19	; 0x01
    1802:	20 83       	st	Z, r18
    1804:	8c 93       	st	X, r24
    1806:	26 81       	ldd	r18, Z+6	; 0x06
    1808:	37 81       	ldd	r19, Z+7	; 0x07
    180a:	2f 5f       	subi	r18, 0xFF	; 255
    180c:	3f 4f       	sbci	r19, 0xFF	; 255
    180e:	37 83       	std	Z+7, r19	; 0x07
    1810:	26 83       	std	Z+6, r18	; 0x06
    1812:	14 c0       	rjmp	.+40     	; 0x183c <fputc+0x6e>
    1814:	8b 01       	movw	r16, r22
    1816:	ec 01       	movw	r28, r24
    1818:	fb 01       	movw	r30, r22
    181a:	00 84       	ldd	r0, Z+8	; 0x08
    181c:	f1 85       	ldd	r31, Z+9	; 0x09
    181e:	e0 2d       	mov	r30, r0
    1820:	09 95       	icall
    1822:	89 2b       	or	r24, r25
    1824:	e1 f6       	brne	.-72     	; 0x17de <fputc+0x10>
    1826:	d8 01       	movw	r26, r16
    1828:	16 96       	adiw	r26, 0x06	; 6
    182a:	8d 91       	ld	r24, X+
    182c:	9c 91       	ld	r25, X
    182e:	17 97       	sbiw	r26, 0x07	; 7
    1830:	01 96       	adiw	r24, 0x01	; 1
    1832:	17 96       	adiw	r26, 0x07	; 7
    1834:	9c 93       	st	X, r25
    1836:	8e 93       	st	-X, r24
    1838:	16 97       	sbiw	r26, 0x06	; 6
    183a:	ce 01       	movw	r24, r28
    183c:	df 91       	pop	r29
    183e:	cf 91       	pop	r28
    1840:	1f 91       	pop	r17
    1842:	0f 91       	pop	r16
    1844:	08 95       	ret

00001846 <__ultoa_invert>:
    1846:	fa 01       	movw	r30, r20
    1848:	aa 27       	eor	r26, r26
    184a:	28 30       	cpi	r18, 0x08	; 8
    184c:	51 f1       	breq	.+84     	; 0x18a2 <__ultoa_invert+0x5c>
    184e:	20 31       	cpi	r18, 0x10	; 16
    1850:	81 f1       	breq	.+96     	; 0x18b2 <__ultoa_invert+0x6c>
    1852:	e8 94       	clt
    1854:	6f 93       	push	r22
    1856:	6e 7f       	andi	r22, 0xFE	; 254
    1858:	6e 5f       	subi	r22, 0xFE	; 254
    185a:	7f 4f       	sbci	r23, 0xFF	; 255
    185c:	8f 4f       	sbci	r24, 0xFF	; 255
    185e:	9f 4f       	sbci	r25, 0xFF	; 255
    1860:	af 4f       	sbci	r26, 0xFF	; 255
    1862:	b1 e0       	ldi	r27, 0x01	; 1
    1864:	3e d0       	rcall	.+124    	; 0x18e2 <__ultoa_invert+0x9c>
    1866:	b4 e0       	ldi	r27, 0x04	; 4
    1868:	3c d0       	rcall	.+120    	; 0x18e2 <__ultoa_invert+0x9c>
    186a:	67 0f       	add	r22, r23
    186c:	78 1f       	adc	r23, r24
    186e:	89 1f       	adc	r24, r25
    1870:	9a 1f       	adc	r25, r26
    1872:	a1 1d       	adc	r26, r1
    1874:	68 0f       	add	r22, r24
    1876:	79 1f       	adc	r23, r25
    1878:	8a 1f       	adc	r24, r26
    187a:	91 1d       	adc	r25, r1
    187c:	a1 1d       	adc	r26, r1
    187e:	6a 0f       	add	r22, r26
    1880:	71 1d       	adc	r23, r1
    1882:	81 1d       	adc	r24, r1
    1884:	91 1d       	adc	r25, r1
    1886:	a1 1d       	adc	r26, r1
    1888:	20 d0       	rcall	.+64     	; 0x18ca <__ultoa_invert+0x84>
    188a:	09 f4       	brne	.+2      	; 0x188e <__ultoa_invert+0x48>
    188c:	68 94       	set
    188e:	3f 91       	pop	r19
    1890:	2a e0       	ldi	r18, 0x0A	; 10
    1892:	26 9f       	mul	r18, r22
    1894:	11 24       	eor	r1, r1
    1896:	30 19       	sub	r19, r0
    1898:	30 5d       	subi	r19, 0xD0	; 208
    189a:	31 93       	st	Z+, r19
    189c:	de f6       	brtc	.-74     	; 0x1854 <__ultoa_invert+0xe>
    189e:	cf 01       	movw	r24, r30
    18a0:	08 95       	ret
    18a2:	46 2f       	mov	r20, r22
    18a4:	47 70       	andi	r20, 0x07	; 7
    18a6:	40 5d       	subi	r20, 0xD0	; 208
    18a8:	41 93       	st	Z+, r20
    18aa:	b3 e0       	ldi	r27, 0x03	; 3
    18ac:	0f d0       	rcall	.+30     	; 0x18cc <__ultoa_invert+0x86>
    18ae:	c9 f7       	brne	.-14     	; 0x18a2 <__ultoa_invert+0x5c>
    18b0:	f6 cf       	rjmp	.-20     	; 0x189e <__ultoa_invert+0x58>
    18b2:	46 2f       	mov	r20, r22
    18b4:	4f 70       	andi	r20, 0x0F	; 15
    18b6:	40 5d       	subi	r20, 0xD0	; 208
    18b8:	4a 33       	cpi	r20, 0x3A	; 58
    18ba:	18 f0       	brcs	.+6      	; 0x18c2 <__ultoa_invert+0x7c>
    18bc:	49 5d       	subi	r20, 0xD9	; 217
    18be:	31 fd       	sbrc	r19, 1
    18c0:	40 52       	subi	r20, 0x20	; 32
    18c2:	41 93       	st	Z+, r20
    18c4:	02 d0       	rcall	.+4      	; 0x18ca <__ultoa_invert+0x84>
    18c6:	a9 f7       	brne	.-22     	; 0x18b2 <__ultoa_invert+0x6c>
    18c8:	ea cf       	rjmp	.-44     	; 0x189e <__ultoa_invert+0x58>
    18ca:	b4 e0       	ldi	r27, 0x04	; 4
    18cc:	a6 95       	lsr	r26
    18ce:	97 95       	ror	r25
    18d0:	87 95       	ror	r24
    18d2:	77 95       	ror	r23
    18d4:	67 95       	ror	r22
    18d6:	ba 95       	dec	r27
    18d8:	c9 f7       	brne	.-14     	; 0x18cc <__ultoa_invert+0x86>
    18da:	00 97       	sbiw	r24, 0x00	; 0
    18dc:	61 05       	cpc	r22, r1
    18de:	71 05       	cpc	r23, r1
    18e0:	08 95       	ret
    18e2:	9b 01       	movw	r18, r22
    18e4:	ac 01       	movw	r20, r24
    18e6:	0a 2e       	mov	r0, r26
    18e8:	06 94       	lsr	r0
    18ea:	57 95       	ror	r21
    18ec:	47 95       	ror	r20
    18ee:	37 95       	ror	r19
    18f0:	27 95       	ror	r18
    18f2:	ba 95       	dec	r27
    18f4:	c9 f7       	brne	.-14     	; 0x18e8 <__ultoa_invert+0xa2>
    18f6:	62 0f       	add	r22, r18
    18f8:	73 1f       	adc	r23, r19
    18fa:	84 1f       	adc	r24, r20
    18fc:	95 1f       	adc	r25, r21
    18fe:	a0 1d       	adc	r26, r0
    1900:	08 95       	ret

00001902 <__divmodsi4>:
    1902:	05 2e       	mov	r0, r21
    1904:	97 fb       	bst	r25, 7
    1906:	1e f4       	brtc	.+6      	; 0x190e <__divmodsi4+0xc>
    1908:	00 94       	com	r0
    190a:	0e 94 98 0c 	call	0x1930	; 0x1930 <__negsi2>
    190e:	57 fd       	sbrc	r21, 7
    1910:	07 d0       	rcall	.+14     	; 0x1920 <__divmodsi4_neg2>
    1912:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <__udivmodsi4>
    1916:	07 fc       	sbrc	r0, 7
    1918:	03 d0       	rcall	.+6      	; 0x1920 <__divmodsi4_neg2>
    191a:	4e f4       	brtc	.+18     	; 0x192e <__divmodsi4_exit>
    191c:	0c 94 98 0c 	jmp	0x1930	; 0x1930 <__negsi2>

00001920 <__divmodsi4_neg2>:
    1920:	50 95       	com	r21
    1922:	40 95       	com	r20
    1924:	30 95       	com	r19
    1926:	21 95       	neg	r18
    1928:	3f 4f       	sbci	r19, 0xFF	; 255
    192a:	4f 4f       	sbci	r20, 0xFF	; 255
    192c:	5f 4f       	sbci	r21, 0xFF	; 255

0000192e <__divmodsi4_exit>:
    192e:	08 95       	ret

00001930 <__negsi2>:
    1930:	90 95       	com	r25
    1932:	80 95       	com	r24
    1934:	70 95       	com	r23
    1936:	61 95       	neg	r22
    1938:	7f 4f       	sbci	r23, 0xFF	; 255
    193a:	8f 4f       	sbci	r24, 0xFF	; 255
    193c:	9f 4f       	sbci	r25, 0xFF	; 255
    193e:	08 95       	ret

00001940 <__muluhisi3>:
    1940:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <__umulhisi3>
    1944:	a5 9f       	mul	r26, r21
    1946:	90 0d       	add	r25, r0
    1948:	b4 9f       	mul	r27, r20
    194a:	90 0d       	add	r25, r0
    194c:	a4 9f       	mul	r26, r20
    194e:	80 0d       	add	r24, r0
    1950:	91 1d       	adc	r25, r1
    1952:	11 24       	eor	r1, r1
    1954:	08 95       	ret

00001956 <__mulshisi3>:
    1956:	b7 ff       	sbrs	r27, 7
    1958:	0c 94 a0 0c 	jmp	0x1940	; 0x1940 <__muluhisi3>

0000195c <__mulohisi3>:
    195c:	0e 94 a0 0c 	call	0x1940	; 0x1940 <__muluhisi3>
    1960:	82 1b       	sub	r24, r18
    1962:	93 0b       	sbc	r25, r19
    1964:	08 95       	ret

00001966 <__prologue_saves__>:
    1966:	2f 92       	push	r2
    1968:	3f 92       	push	r3
    196a:	4f 92       	push	r4
    196c:	5f 92       	push	r5
    196e:	6f 92       	push	r6
    1970:	7f 92       	push	r7
    1972:	8f 92       	push	r8
    1974:	9f 92       	push	r9
    1976:	af 92       	push	r10
    1978:	bf 92       	push	r11
    197a:	cf 92       	push	r12
    197c:	df 92       	push	r13
    197e:	ef 92       	push	r14
    1980:	ff 92       	push	r15
    1982:	0f 93       	push	r16
    1984:	1f 93       	push	r17
    1986:	cf 93       	push	r28
    1988:	df 93       	push	r29
    198a:	cd b7       	in	r28, 0x3d	; 61
    198c:	de b7       	in	r29, 0x3e	; 62
    198e:	ca 1b       	sub	r28, r26
    1990:	db 0b       	sbc	r29, r27
    1992:	0f b6       	in	r0, 0x3f	; 63
    1994:	f8 94       	cli
    1996:	de bf       	out	0x3e, r29	; 62
    1998:	0f be       	out	0x3f, r0	; 63
    199a:	cd bf       	out	0x3d, r28	; 61
    199c:	09 94       	ijmp

0000199e <__epilogue_restores__>:
    199e:	2a 88       	ldd	r2, Y+18	; 0x12
    19a0:	39 88       	ldd	r3, Y+17	; 0x11
    19a2:	48 88       	ldd	r4, Y+16	; 0x10
    19a4:	5f 84       	ldd	r5, Y+15	; 0x0f
    19a6:	6e 84       	ldd	r6, Y+14	; 0x0e
    19a8:	7d 84       	ldd	r7, Y+13	; 0x0d
    19aa:	8c 84       	ldd	r8, Y+12	; 0x0c
    19ac:	9b 84       	ldd	r9, Y+11	; 0x0b
    19ae:	aa 84       	ldd	r10, Y+10	; 0x0a
    19b0:	b9 84       	ldd	r11, Y+9	; 0x09
    19b2:	c8 84       	ldd	r12, Y+8	; 0x08
    19b4:	df 80       	ldd	r13, Y+7	; 0x07
    19b6:	ee 80       	ldd	r14, Y+6	; 0x06
    19b8:	fd 80       	ldd	r15, Y+5	; 0x05
    19ba:	0c 81       	ldd	r16, Y+4	; 0x04
    19bc:	1b 81       	ldd	r17, Y+3	; 0x03
    19be:	aa 81       	ldd	r26, Y+2	; 0x02
    19c0:	b9 81       	ldd	r27, Y+1	; 0x01
    19c2:	ce 0f       	add	r28, r30
    19c4:	d1 1d       	adc	r29, r1
    19c6:	0f b6       	in	r0, 0x3f	; 63
    19c8:	f8 94       	cli
    19ca:	de bf       	out	0x3e, r29	; 62
    19cc:	0f be       	out	0x3f, r0	; 63
    19ce:	cd bf       	out	0x3d, r28	; 61
    19d0:	ed 01       	movw	r28, r26
    19d2:	08 95       	ret

000019d4 <__udivmodsi4>:
    19d4:	a1 e2       	ldi	r26, 0x21	; 33
    19d6:	1a 2e       	mov	r1, r26
    19d8:	aa 1b       	sub	r26, r26
    19da:	bb 1b       	sub	r27, r27
    19dc:	fd 01       	movw	r30, r26
    19de:	0d c0       	rjmp	.+26     	; 0x19fa <__udivmodsi4_ep>

000019e0 <__udivmodsi4_loop>:
    19e0:	aa 1f       	adc	r26, r26
    19e2:	bb 1f       	adc	r27, r27
    19e4:	ee 1f       	adc	r30, r30
    19e6:	ff 1f       	adc	r31, r31
    19e8:	a2 17       	cp	r26, r18
    19ea:	b3 07       	cpc	r27, r19
    19ec:	e4 07       	cpc	r30, r20
    19ee:	f5 07       	cpc	r31, r21
    19f0:	20 f0       	brcs	.+8      	; 0x19fa <__udivmodsi4_ep>
    19f2:	a2 1b       	sub	r26, r18
    19f4:	b3 0b       	sbc	r27, r19
    19f6:	e4 0b       	sbc	r30, r20
    19f8:	f5 0b       	sbc	r31, r21

000019fa <__udivmodsi4_ep>:
    19fa:	66 1f       	adc	r22, r22
    19fc:	77 1f       	adc	r23, r23
    19fe:	88 1f       	adc	r24, r24
    1a00:	99 1f       	adc	r25, r25
    1a02:	1a 94       	dec	r1
    1a04:	69 f7       	brne	.-38     	; 0x19e0 <__udivmodsi4_loop>
    1a06:	60 95       	com	r22
    1a08:	70 95       	com	r23
    1a0a:	80 95       	com	r24
    1a0c:	90 95       	com	r25
    1a0e:	9b 01       	movw	r18, r22
    1a10:	ac 01       	movw	r20, r24
    1a12:	bd 01       	movw	r22, r26
    1a14:	cf 01       	movw	r24, r30
    1a16:	08 95       	ret

00001a18 <__umulhisi3>:
    1a18:	a2 9f       	mul	r26, r18
    1a1a:	b0 01       	movw	r22, r0
    1a1c:	b3 9f       	mul	r27, r19
    1a1e:	c0 01       	movw	r24, r0
    1a20:	a3 9f       	mul	r26, r19
    1a22:	70 0d       	add	r23, r0
    1a24:	81 1d       	adc	r24, r1
    1a26:	11 24       	eor	r1, r1
    1a28:	91 1d       	adc	r25, r1
    1a2a:	b2 9f       	mul	r27, r18
    1a2c:	70 0d       	add	r23, r0
    1a2e:	81 1d       	adc	r24, r1
    1a30:	11 24       	eor	r1, r1
    1a32:	91 1d       	adc	r25, r1
    1a34:	08 95       	ret

00001a36 <_exit>:
    1a36:	f8 94       	cli

00001a38 <__stop_program>:
    1a38:	ff cf       	rjmp	.-2      	; 0x1a38 <__stop_program>
