
ice_ice.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000092  00800100  0000114c  000011e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000114c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  00800192  00800192  00001272  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001272  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000012d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000218  00000000  00000000  0000130c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002910  00000000  00000000  00001524  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001184  00000000  00000000  00003e34  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000125d  00000000  00000000  00004fb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000528  00000000  00000000  00006218  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000916  00000000  00000000  00006740  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001974  00000000  00000000  00007056  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002e8  00000000  00000000  000089ca  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
       4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
       8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
       c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
      70:	11 24       	eor	r1, r1
      72:	1f be       	out	0x3f, r1	; 63
      74:	cf ef       	ldi	r28, 0xFF	; 255
      76:	d4 e0       	ldi	r29, 0x04	; 4
      78:	de bf       	out	0x3e, r29	; 62
      7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
      7c:	11 e0       	ldi	r17, 0x01	; 1
      7e:	a0 e0       	ldi	r26, 0x00	; 0
      80:	b1 e0       	ldi	r27, 0x01	; 1
      82:	ec e4       	ldi	r30, 0x4C	; 76
      84:	f1 e1       	ldi	r31, 0x11	; 17
      86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
      88:	05 90       	lpm	r0, Z+
      8a:	0d 92       	st	X+, r0
      8c:	a2 39       	cpi	r26, 0x92	; 146
      8e:	b1 07       	cpc	r27, r17
      90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
      92:	21 e0       	ldi	r18, 0x01	; 1
      94:	a2 e9       	ldi	r26, 0x92	; 146
      96:	b1 e0       	ldi	r27, 0x01	; 1
      98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
      9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
      9c:	a1 3a       	cpi	r26, 0xA1	; 161
      9e:	b2 07       	cpc	r27, r18
      a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
      a2:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <main>
      a6:	0c 94 a4 08 	jmp	0x1148	; 0x1148 <_exit>

000000aa <__bad_interrupt>:
      aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <can_init>:
uint8_t buffer_number = 0;


uint8_t can_init(){
	
	mcp2515_init();
      ae:	0e 94 08 01 	call	0x210	; 0x210 <mcp2515_init>
	
	
	mcp2515_bit_modify(MCP_CANINTE,0b00000111,0b00000111);
      b2:	47 e0       	ldi	r20, 0x07	; 7
      b4:	67 e0       	ldi	r22, 0x07	; 7
      b6:	8b e2       	ldi	r24, 0x2B	; 43
      b8:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <mcp2515_bit_modify>
	//mcp2515_write(MCP_CANCTRL, MODE_LOOPBACK);	
	mcp2515_write(MCP_CNF3, 0x01); //0x01 // 0b00000010
      bc:	61 e0       	ldi	r22, 0x01	; 1
      be:	88 e2       	ldi	r24, 0x28	; 40
      c0:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <mcp2515_write>
	mcp2515_write(MCP_CNF2, 0xb5); //0xb5 // 0b10010010
      c4:	65 eb       	ldi	r22, 0xB5	; 181
      c6:	89 e2       	ldi	r24, 0x29	; 41
      c8:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <mcp2515_write>
	mcp2515_write(MCP_CNF1, 0x43); //0x43 // 0b01000000
      cc:	63 e4       	ldi	r22, 0x43	; 67
      ce:	8a e2       	ldi	r24, 0x2A	; 42
      d0:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <mcp2515_write>
	
	
	mcp2515_write(MCP_CANCTRL, MODE_NORMAL);
      d4:	60 e0       	ldi	r22, 0x00	; 0
      d6:	8f e0       	ldi	r24, 0x0F	; 15
      d8:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <mcp2515_write>
// 	MCUCR &= ~(1 << ISC00);
// 	GICR |= 1 << INT0;
// 	
// 	sei();
	
}
      dc:	08 95       	ret

000000de <send_can_msg>:

void send_can_msg(can_message *msg){
      de:	0f 93       	push	r16
      e0:	1f 93       	push	r17
      e2:	cf 93       	push	r28
      e4:	8c 01       	movw	r16, r24
		if(buffer_number > 2){
			buffer_number = 0;
		}
	}*/
	
	mcp2515_write(idBufferHighAddress+16*buffer_number, msg->id>>3);
      e6:	fc 01       	movw	r30, r24
      e8:	60 81       	ld	r22, Z
      ea:	71 81       	ldd	r23, Z+1	; 0x01
      ec:	76 95       	lsr	r23
      ee:	67 95       	ror	r22
      f0:	76 95       	lsr	r23
      f2:	67 95       	ror	r22
      f4:	76 95       	lsr	r23
      f6:	67 95       	ror	r22
      f8:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <__data_end>
      fc:	82 95       	swap	r24
      fe:	80 7f       	andi	r24, 0xF0	; 240
     100:	8f 5c       	subi	r24, 0xCF	; 207
     102:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <mcp2515_write>
	uint8_t lowbufferval = mcp2515_read(0x32);
     106:	82 e3       	ldi	r24, 0x32	; 50
     108:	0e 94 c5 00 	call	0x18a	; 0x18a <mcp2515_read>
	
	mcp2515_write(idBufferLowAddress+16*buffer_number, 0x00ff & ((lowbufferval&0b00011111) | (msg->id<<5)));
     10c:	f8 01       	movw	r30, r16
     10e:	60 81       	ld	r22, Z
     110:	62 95       	swap	r22
     112:	66 0f       	add	r22, r22
     114:	60 7e       	andi	r22, 0xE0	; 224
     116:	8f 71       	andi	r24, 0x1F	; 31
     118:	68 2b       	or	r22, r24
     11a:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <__data_end>
     11e:	82 95       	swap	r24
     120:	80 7f       	andi	r24, 0xF0	; 240
     122:	8e 5c       	subi	r24, 0xCE	; 206
     124:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <mcp2515_write>
	
	uint8_t regvalue = mcp2515_read(0x35);
     128:	85 e3       	ldi	r24, 0x35	; 53
     12a:	0e 94 c5 00 	call	0x18a	; 0x18a <mcp2515_read>
	mcp2515_write(dataLengthBufferAddress+16*buffer_number, (regvalue&0b11110000) | msg->data_length);
     12e:	80 7f       	andi	r24, 0xF0	; 240
     130:	f8 01       	movw	r30, r16
     132:	92 81       	ldd	r25, Z+2	; 0x02
     134:	68 2f       	mov	r22, r24
     136:	69 2b       	or	r22, r25
     138:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <__data_end>
     13c:	82 95       	swap	r24
     13e:	80 7f       	andi	r24, 0xF0	; 240
     140:	8b 5c       	subi	r24, 0xCB	; 203
     142:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <mcp2515_write>
	
	for(uint8_t m = 0; m < msg->data_length; m++){
     146:	f8 01       	movw	r30, r16
     148:	82 81       	ldd	r24, Z+2	; 0x02
     14a:	88 23       	and	r24, r24
     14c:	a9 f0       	breq	.+42     	; 0x178 <send_can_msg+0x9a>
     14e:	c0 e0       	ldi	r28, 0x00	; 0
		mcp2515_write(dataBufferAddress+m+16*buffer_number, msg->data[m]);
     150:	f8 01       	movw	r30, r16
     152:	ec 0f       	add	r30, r28
     154:	f1 1d       	adc	r31, r1
     156:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <__data_end>
     15a:	9c 2f       	mov	r25, r28
     15c:	20 e1       	ldi	r18, 0x10	; 16
     15e:	82 9f       	mul	r24, r18
     160:	90 0d       	add	r25, r0
     162:	11 24       	eor	r1, r1
     164:	89 2f       	mov	r24, r25
     166:	63 81       	ldd	r22, Z+3	; 0x03
     168:	8a 5c       	subi	r24, 0xCA	; 202
     16a:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <mcp2515_write>
	mcp2515_write(idBufferLowAddress+16*buffer_number, 0x00ff & ((lowbufferval&0b00011111) | (msg->id<<5)));
	
	uint8_t regvalue = mcp2515_read(0x35);
	mcp2515_write(dataLengthBufferAddress+16*buffer_number, (regvalue&0b11110000) | msg->data_length);
	
	for(uint8_t m = 0; m < msg->data_length; m++){
     16e:	cf 5f       	subi	r28, 0xFF	; 255
     170:	f8 01       	movw	r30, r16
     172:	82 81       	ldd	r24, Z+2	; 0x02
     174:	c8 17       	cp	r28, r24
     176:	60 f3       	brcs	.-40     	; 0x150 <send_can_msg+0x72>
	/*buffer_number += 1;
	if(buffer_number > 2){
		buffer_number = 0;
	}*/
	
	mcp2515_request_to_send(MCP_RTS_TX0+buffer_number);
     178:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <__data_end>
     17c:	8f 57       	subi	r24, 0x7F	; 127
     17e:	0e 94 e5 00 	call	0x1ca	; 0x1ca <mcp2515_request_to_send>
	//mcp2515_bit_modify(MCP_TXB0CTRL+16*buffer_number,0b00001000,0b00001000);
	//mcp2515_bit_modify(0x0D,0b00000111,0b00000111);
}
     182:	cf 91       	pop	r28
     184:	1f 91       	pop	r17
     186:	0f 91       	pop	r16
     188:	08 95       	ret

0000018a <mcp2515_read>:
	value = MODE_LOOPBACK; */
	//mcp2515_write(MCP_CANCTRL, MODE_CONFIG); config is default after restart
	
}

uint8_t mcp2515_read(uint8_t address){
     18a:	cf 93       	push	r28
     18c:	c8 2f       	mov	r28, r24
	uint8_t result;
	
	PORTB &= ~(1<<PB4); //ss
     18e:	c4 98       	cbi	0x18, 4	; 24
	spi_write(MCP_READ);
     190:	83 e0       	ldi	r24, 0x03	; 3
     192:	0e 94 12 01 	call	0x224	; 0x224 <spi_write>
	spi_write(address);
     196:	8c 2f       	mov	r24, r28
     198:	0e 94 12 01 	call	0x224	; 0x224 <spi_write>
	result = spi_read();
     19c:	0e 94 16 01 	call	0x22c	; 0x22c <spi_read>
	
	PORTB |= (1<<PB4); //!ss
     1a0:	c4 9a       	sbi	0x18, 4	; 24
	
	return result;
}
     1a2:	cf 91       	pop	r28
     1a4:	08 95       	ret

000001a6 <mcp2515_write>:
void mcp2515_write(uint8_t address, uint8_t data){
     1a6:	cf 93       	push	r28
     1a8:	df 93       	push	r29
     1aa:	d8 2f       	mov	r29, r24
     1ac:	c6 2f       	mov	r28, r22
	PORTB &= ~(1<<PB4); //slave select
     1ae:	c4 98       	cbi	0x18, 4	; 24
	
	spi_write(MCP_WRITE);
     1b0:	82 e0       	ldi	r24, 0x02	; 2
     1b2:	0e 94 12 01 	call	0x224	; 0x224 <spi_write>
	spi_write(address);
     1b6:	8d 2f       	mov	r24, r29
     1b8:	0e 94 12 01 	call	0x224	; 0x224 <spi_write>
	spi_write(data);
     1bc:	8c 2f       	mov	r24, r28
     1be:	0e 94 12 01 	call	0x224	; 0x224 <spi_write>
	
	PORTB |= (1<<PB4); //slave deselect
     1c2:	c4 9a       	sbi	0x18, 4	; 24
}
     1c4:	df 91       	pop	r29
     1c6:	cf 91       	pop	r28
     1c8:	08 95       	ret

000001ca <mcp2515_request_to_send>:
void mcp2515_request_to_send(uint8_t command){
	PORTB &= ~(1<<PB4);
     1ca:	c4 98       	cbi	0x18, 4	; 24
	
	spi_write(command);
     1cc:	0e 94 12 01 	call	0x224	; 0x224 <spi_write>
	
	PORTB |= (1<<PB4);
     1d0:	c4 9a       	sbi	0x18, 4	; 24
     1d2:	08 95       	ret

000001d4 <mcp2515_bit_modify>:
}
void mcp2515_bit_modify(uint8_t address, uint8_t mask, uint8_t data){
     1d4:	1f 93       	push	r17
     1d6:	cf 93       	push	r28
     1d8:	df 93       	push	r29
     1da:	18 2f       	mov	r17, r24
     1dc:	d6 2f       	mov	r29, r22
     1de:	c4 2f       	mov	r28, r20
	PORTB &= ~(1<<PB4);
     1e0:	c4 98       	cbi	0x18, 4	; 24
	
	spi_write(MCP_BITMOD);
     1e2:	85 e0       	ldi	r24, 0x05	; 5
     1e4:	0e 94 12 01 	call	0x224	; 0x224 <spi_write>
	spi_write(address);
     1e8:	81 2f       	mov	r24, r17
     1ea:	0e 94 12 01 	call	0x224	; 0x224 <spi_write>
	spi_write(mask);
     1ee:	8d 2f       	mov	r24, r29
     1f0:	0e 94 12 01 	call	0x224	; 0x224 <spi_write>
	spi_write(data);
     1f4:	8c 2f       	mov	r24, r28
     1f6:	0e 94 12 01 	call	0x224	; 0x224 <spi_write>
	
	PORTB |= (1<<PB4);
     1fa:	c4 9a       	sbi	0x18, 4	; 24
}
     1fc:	df 91       	pop	r29
     1fe:	cf 91       	pop	r28
     200:	1f 91       	pop	r17
     202:	08 95       	ret

00000204 <mcp2515_reset>:
void mcp2515_reset(){
	PORTB &= ~(1<<PB4);
     204:	c4 98       	cbi	0x18, 4	; 24
	
	spi_write(MCP_RESET);
     206:	80 ec       	ldi	r24, 0xC0	; 192
     208:	0e 94 12 01 	call	0x224	; 0x224 <spi_write>
	
	PORTB |= (1<<PB4);
     20c:	c4 9a       	sbi	0x18, 4	; 24
     20e:	08 95       	ret

00000210 <mcp2515_init>:
//MCP_CANINTF to read and clear interupts, need to clear before we can continue transmitting

uint8_t mcp2515_init(){
	uint8_t value;
	
	spi_init();
     210:	0e 94 0d 01 	call	0x21a	; 0x21a <spi_init>
	mcp2515_reset();
     214:	0e 94 02 01 	call	0x204	; 0x204 <mcp2515_reset>
	
	/*value = mcp2515_read(MCP_CANCTRL);
	value = MODE_LOOPBACK; */
	//mcp2515_write(MCP_CANCTRL, MODE_CONFIG); config is default after restart
	
}
     218:	08 95       	ret

0000021a <spi_init>:
	spi_write(0xf0);
	return SPDR;
}

void spi_init(){
	DDRB = (1<<DDB4)|(1<<DDB5)|(1<<DDB7); //chip select, mosi, clock
     21a:	80 eb       	ldi	r24, 0xB0	; 176
     21c:	87 bb       	out	0x17, r24	; 23
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
     21e:	81 e5       	ldi	r24, 0x51	; 81
     220:	8d b9       	out	0x0d, r24	; 13
     222:	08 95       	ret

00000224 <spi_write>:
}

void spi_write(char data){
	SPDR = data;
     224:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF))){
     226:	77 9b       	sbis	0x0e, 7	; 14
     228:	fe cf       	rjmp	.-4      	; 0x226 <spi_write+0x2>
		
	}
     22a:	08 95       	ret

0000022c <spi_read>:



uint8_t spi_read(){
	
	spi_write(0xf0);
     22c:	80 ef       	ldi	r24, 0xF0	; 240
     22e:	0e 94 12 01 	call	0x224	; 0x224 <spi_write>
	return SPDR;
     232:	8f b1       	in	r24, 0x0f	; 15
}
     234:	08 95       	ret

00000236 <update_adc_values>:
			return UP;
		}
		return NEUTRAL;
	}
	return WAITING;
}
     236:	0f 93       	push	r16
     238:	1f 93       	push	r17
     23a:	cf 93       	push	r28
     23c:	df 93       	push	r29
     23e:	8c 01       	movw	r16, r24
     240:	eb 01       	movw	r28, r22
     242:	e0 e0       	ldi	r30, 0x00	; 0
     244:	f4 e1       	ldi	r31, 0x14	; 20
     246:	81 e0       	ldi	r24, 0x01	; 1
     248:	80 83       	st	Z, r24
     24a:	40 81       	ld	r20, Z
     24c:	20 81       	ld	r18, Z
     24e:	30 81       	ld	r19, Z
     250:	e0 81       	ld	r30, Z
     252:	a0 91 0b 01 	lds	r26, 0x010B	; 0x80010b <x_offset>
     256:	4a 17       	cp	r20, r26
     258:	98 f0       	brcs	.+38     	; 0x280 <update_adc_values+0x4a>
     25a:	b0 e0       	ldi	r27, 0x00	; 0
     25c:	50 e0       	ldi	r21, 0x00	; 0
     25e:	4a 1b       	sub	r20, r26
     260:	5b 0b       	sbc	r21, r27
     262:	64 e6       	ldi	r22, 0x64	; 100
     264:	64 9f       	mul	r22, r20
     266:	c0 01       	movw	r24, r0
     268:	65 9f       	mul	r22, r21
     26a:	90 0d       	add	r25, r0
     26c:	11 24       	eor	r1, r1
     26e:	6f ef       	ldi	r22, 0xFF	; 255
     270:	70 e0       	ldi	r23, 0x00	; 0
     272:	6a 1b       	sub	r22, r26
     274:	7b 0b       	sbc	r23, r27
     276:	0e 94 19 03 	call	0x632	; 0x632 <__divmodhi4>
     27a:	d8 01       	movw	r26, r16
     27c:	6c 93       	st	X, r22
     27e:	0f c0       	rjmp	.+30     	; 0x29e <update_adc_values+0x68>
     280:	6a 2f       	mov	r22, r26
     282:	70 e0       	ldi	r23, 0x00	; 0
     284:	50 e0       	ldi	r21, 0x00	; 0
     286:	46 1b       	sub	r20, r22
     288:	57 0b       	sbc	r21, r23
     28a:	f4 e6       	ldi	r31, 0x64	; 100
     28c:	f4 9f       	mul	r31, r20
     28e:	c0 01       	movw	r24, r0
     290:	f5 9f       	mul	r31, r21
     292:	90 0d       	add	r25, r0
     294:	11 24       	eor	r1, r1
     296:	0e 94 19 03 	call	0x632	; 0x632 <__divmodhi4>
     29a:	d8 01       	movw	r26, r16
     29c:	6c 93       	st	X, r22
     29e:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <y_offset>
     2a2:	26 17       	cp	r18, r22
     2a4:	b0 f0       	brcs	.+44     	; 0x2d2 <update_adc_values+0x9c>
     2a6:	46 2f       	mov	r20, r22
     2a8:	50 e0       	ldi	r21, 0x00	; 0
     2aa:	62 2f       	mov	r22, r18
     2ac:	70 e0       	ldi	r23, 0x00	; 0
     2ae:	64 1b       	sub	r22, r20
     2b0:	75 0b       	sbc	r23, r21
     2b2:	24 e6       	ldi	r18, 0x64	; 100
     2b4:	26 9f       	mul	r18, r22
     2b6:	c0 01       	movw	r24, r0
     2b8:	27 9f       	mul	r18, r23
     2ba:	90 0d       	add	r25, r0
     2bc:	11 24       	eor	r1, r1
     2be:	6f ef       	ldi	r22, 0xFF	; 255
     2c0:	70 e0       	ldi	r23, 0x00	; 0
     2c2:	64 1b       	sub	r22, r20
     2c4:	75 0b       	sbc	r23, r21
     2c6:	0e 94 19 03 	call	0x632	; 0x632 <__divmodhi4>
     2ca:	d8 01       	movw	r26, r16
     2cc:	11 96       	adiw	r26, 0x01	; 1
     2ce:	6c 93       	st	X, r22
     2d0:	10 c0       	rjmp	.+32     	; 0x2f2 <update_adc_values+0xbc>
     2d2:	70 e0       	ldi	r23, 0x00	; 0
     2d4:	42 2f       	mov	r20, r18
     2d6:	50 e0       	ldi	r21, 0x00	; 0
     2d8:	46 1b       	sub	r20, r22
     2da:	57 0b       	sbc	r21, r23
     2dc:	24 e6       	ldi	r18, 0x64	; 100
     2de:	24 9f       	mul	r18, r20
     2e0:	c0 01       	movw	r24, r0
     2e2:	25 9f       	mul	r18, r21
     2e4:	90 0d       	add	r25, r0
     2e6:	11 24       	eor	r1, r1
     2e8:	0e 94 19 03 	call	0x632	; 0x632 <__divmodhi4>
     2ec:	d8 01       	movw	r26, r16
     2ee:	11 96       	adiw	r26, 0x01	; 1
     2f0:	6c 93       	st	X, r22
     2f2:	24 e6       	ldi	r18, 0x64	; 100
     2f4:	23 9f       	mul	r18, r19
     2f6:	c0 01       	movw	r24, r0
     2f8:	11 24       	eor	r1, r1
     2fa:	0f ef       	ldi	r16, 0xFF	; 255
     2fc:	10 e0       	ldi	r17, 0x00	; 0
     2fe:	b8 01       	movw	r22, r16
     300:	0e 94 19 03 	call	0x632	; 0x632 <__divmodhi4>
     304:	68 83       	st	Y, r22
     306:	2e 9f       	mul	r18, r30
     308:	c0 01       	movw	r24, r0
     30a:	11 24       	eor	r1, r1
     30c:	b8 01       	movw	r22, r16
     30e:	0e 94 19 03 	call	0x632	; 0x632 <__divmodhi4>
     312:	69 83       	std	Y+1, r22	; 0x01
     314:	df 91       	pop	r29
     316:	cf 91       	pop	r28
     318:	1f 91       	pop	r17
     31a:	0f 91       	pop	r16
     31c:	08 95       	ret

0000031e <send_stick_can>:

void send_stick_can(){
     31e:	cf 93       	push	r28
     320:	df 93       	push	r29
     322:	cd b7       	in	r28, 0x3d	; 61
     324:	de b7       	in	r29, 0x3e	; 62
     326:	2b 97       	sbiw	r28, 0x0b	; 11
     328:	0f b6       	in	r0, 0x3f	; 63
     32a:	f8 94       	cli
     32c:	de bf       	out	0x3e, r29	; 62
     32e:	0f be       	out	0x3f, r0	; 63
     330:	cd bf       	out	0x3d, r28	; 61
	
	update_adc_values(&joystick, &slider);
     332:	63 e9       	ldi	r22, 0x93	; 147
     334:	71 e0       	ldi	r23, 0x01	; 1
     336:	85 e9       	ldi	r24, 0x95	; 149
     338:	91 e0       	ldi	r25, 0x01	; 1
     33a:	0e 94 1b 01 	call	0x236	; 0x236 <update_adc_values>
	
	can_message msgToSend;
	msgToSend.data_length = 5;
     33e:	85 e0       	ldi	r24, 0x05	; 5
     340:	8b 83       	std	Y+3, r24	; 0x03
	msgToSend.data[0] = abs(joystick.x_val);
     342:	30 91 95 01 	lds	r19, 0x0195	; 0x800195 <joystick>
     346:	83 2f       	mov	r24, r19
     348:	03 2e       	mov	r0, r19
     34a:	00 0c       	add	r0, r0
     34c:	99 0b       	sbc	r25, r25
     34e:	99 23       	and	r25, r25
     350:	1c f4       	brge	.+6      	; 0x358 <send_stick_can+0x3a>
     352:	91 95       	neg	r25
     354:	81 95       	neg	r24
     356:	91 09       	sbc	r25, r1
     358:	8c 83       	std	Y+4, r24	; 0x04
	msgToSend.data[1] = abs(joystick.y_val);
     35a:	20 91 96 01 	lds	r18, 0x0196	; 0x800196 <joystick+0x1>
     35e:	82 2f       	mov	r24, r18
     360:	02 2e       	mov	r0, r18
     362:	00 0c       	add	r0, r0
     364:	99 0b       	sbc	r25, r25
     366:	99 23       	and	r25, r25
     368:	1c f4       	brge	.+6      	; 0x370 <send_stick_can+0x52>
     36a:	91 95       	neg	r25
     36c:	81 95       	neg	r24
     36e:	91 09       	sbc	r25, r1
     370:	8d 83       	std	Y+5, r24	; 0x05
	msgToSend.data[2] = PINB & (1<< PINB1); // button pressed?
     372:	86 b3       	in	r24, 0x16	; 22
     374:	82 70       	andi	r24, 0x02	; 2
     376:	8e 83       	std	Y+6, r24	; 0x06
	
	uint8_t x_positive = (joystick.x_val < 0) ? 0x00 : 0x11;
     378:	33 23       	and	r19, r19
     37a:	14 f0       	brlt	.+4      	; 0x380 <send_stick_can+0x62>
     37c:	81 e1       	ldi	r24, 0x11	; 17
     37e:	01 c0       	rjmp	.+2      	; 0x382 <send_stick_can+0x64>
     380:	80 e0       	ldi	r24, 0x00	; 0
	uint8_t y_positive = (joystick.y_val < 0) ? 0x00 : 0x11;
     382:	22 23       	and	r18, r18
     384:	14 f0       	brlt	.+4      	; 0x38a <send_stick_can+0x6c>
     386:	91 e1       	ldi	r25, 0x11	; 17
     388:	01 c0       	rjmp	.+2      	; 0x38c <send_stick_can+0x6e>
     38a:	90 e0       	ldi	r25, 0x00	; 0
	
	msgToSend.data[3] = x_positive;
     38c:	8f 83       	std	Y+7, r24	; 0x07
	msgToSend.data[4] = y_positive;
     38e:	98 87       	std	Y+8, r25	; 0x08
	
	msgToSend.id = 0x0010;
     390:	80 e1       	ldi	r24, 0x10	; 16
     392:	90 e0       	ldi	r25, 0x00	; 0
     394:	9a 83       	std	Y+2, r25	; 0x02
     396:	89 83       	std	Y+1, r24	; 0x01
	send_can_msg(&msgToSend);
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	0e 94 6f 00 	call	0xde	; 0xde <send_can_msg>
	
     3a0:	2b 96       	adiw	r28, 0x0b	; 11
     3a2:	0f b6       	in	r0, 0x3f	; 63
     3a4:	f8 94       	cli
     3a6:	de bf       	out	0x3e, r29	; 62
     3a8:	0f be       	out	0x3f, r0	; 63
     3aa:	cd bf       	out	0x3d, r28	; 61
     3ac:	df 91       	pop	r29
     3ae:	cf 91       	pop	r28
     3b0:	08 95       	ret

000003b2 <main>:
} menuItem;




int main(void){
     3b2:	cf 93       	push	r28
     3b4:	df 93       	push	r29
     3b6:	cd b7       	in	r28, 0x3d	; 61
     3b8:	de b7       	in	r29, 0x3e	; 62
     3ba:	2b 97       	sbiw	r28, 0x0b	; 11
     3bc:	0f b6       	in	r0, 0x3f	; 63
     3be:	f8 94       	cli
     3c0:	de bf       	out	0x3e, r29	; 62
     3c2:	0f be       	out	0x3f, r0	; 63
     3c4:	cd bf       	out	0x3d, r28	; 61
	
//  	joyVal joystick; 
//  	sliderVal slider; 
//	volatile amap* atmelMap = (amap*) BASE;
	
	MCUCR |= (1<<SRE);
     3c6:	85 b7       	in	r24, 0x35	; 53
     3c8:	80 68       	ori	r24, 0x80	; 128
     3ca:	85 bf       	out	0x35, r24	; 53
	
	//DDRC = 0xFF;
	//PORTC = 0x00;
	
	SFIOR &= ~(1<<XMM0);
     3cc:	80 b7       	in	r24, 0x30	; 48
     3ce:	87 7f       	andi	r24, 0xF7	; 247
     3d0:	80 bf       	out	0x30, r24	; 48
	SFIOR &= ~(1<<XMM1);
     3d2:	80 b7       	in	r24, 0x30	; 48
     3d4:	8f 7e       	andi	r24, 0xEF	; 239
     3d6:	80 bf       	out	0x30, r24	; 48
	SFIOR |= (1<<XMM2);
     3d8:	80 b7       	in	r24, 0x30	; 48
     3da:	80 62       	ori	r24, 0x20	; 32
     3dc:	80 bf       	out	0x30, r24	; 48
	
	DDRA |= 0x18;
     3de:	8a b3       	in	r24, 0x1a	; 26
     3e0:	88 61       	ori	r24, 0x18	; 24
     3e2:	8a bb       	out	0x1a, r24	; 26
	TCCR2 |= (1<<WGM20);	
	TCCR2 |= (1<<COM21);
	TCCR2 |= (1<<COM20);
	*/

	USART_Init ( MYUBRR );
     3e4:	8f e1       	ldi	r24, 0x1F	; 31
     3e6:	90 e0       	ldi	r25, 0x00	; 0
     3e8:	0e 94 09 03 	call	0x612	; 0x612 <USART_Init>
	SRAM_test(); _delay_ms(1000);
     3ec:	0e 94 b5 02 	call	0x56a	; 0x56a <SRAM_test>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3f0:	2f ef       	ldi	r18, 0xFF	; 255
     3f2:	8f ef       	ldi	r24, 0xFF	; 255
     3f4:	9e e0       	ldi	r25, 0x0E	; 14
     3f6:	21 50       	subi	r18, 0x01	; 1
     3f8:	80 40       	sbci	r24, 0x00	; 0
     3fa:	90 40       	sbci	r25, 0x00	; 0
     3fc:	e1 f7       	brne	.-8      	; 0x3f6 <main+0x44>
     3fe:	00 c0       	rjmp	.+0      	; 0x400 <__LOCK_REGION_LENGTH__>
     400:	00 00       	nop
		
		
	oled_init();
     402:	0e 94 60 02 	call	0x4c0	; 0x4c0 <oled_init>
	clear_oled();
     406:	0e 94 9d 02 	call	0x53a	; 0x53a <clear_oled>
	
		
	go_to_line(7);
     40a:	87 e0       	ldi	r24, 0x07	; 7
     40c:	0e 94 8e 02 	call	0x51c	; 0x51c <go_to_line>
     410:	0c e5       	ldi	r16, 0x5C	; 92
     412:	10 e0       	ldi	r17, 0x00	; 0
	//oled_write_string(0," Kongeriget Norge er et frit, uafhaengigt og udeleligt Rige. Dets Regjeringsform er indskraenket og arvelig-monarkisk.", 8);
	//character_printer(wojak, 64, 40);
	//_delay_ms(60000);

	for(int i = 0; i < 92; i++){
		printf("\n");
     414:	8a e0       	ldi	r24, 0x0A	; 10
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	0e 94 1f 05 	call	0xa3e	; 0xa3e <putchar>
     41c:	01 50       	subi	r16, 0x01	; 1
     41e:	11 09       	sbc	r17, r1
	go_to_line(7);
	//oled_write_string(0," Kongeriget Norge er et frit, uafhaengigt og udeleligt Rige. Dets Regjeringsform er indskraenket og arvelig-monarkisk.", 8);
	//character_printer(wojak, 64, 40);
	//_delay_ms(60000);

	for(int i = 0; i < 92; i++){
     420:	c9 f7       	brne	.-14     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
		printf("\n");
		
		
	}
	
	can_init();
     422:	0e 94 57 00 	call	0xae	; 0xae <can_init>
	
	can_message msgToSend;
	msgToSend.data_length = 8;
     426:	88 e0       	ldi	r24, 0x08	; 8
     428:	8b 83       	std	Y+3, r24	; 0x03
	for(int i = 0; i < 8; i++){
		msgToSend.data[i] = 97+i;
     42a:	81 e6       	ldi	r24, 0x61	; 97
     42c:	8c 83       	std	Y+4, r24	; 0x04
     42e:	82 e6       	ldi	r24, 0x62	; 98
     430:	8d 83       	std	Y+5, r24	; 0x05
     432:	83 e6       	ldi	r24, 0x63	; 99
     434:	8e 83       	std	Y+6, r24	; 0x06
     436:	84 e6       	ldi	r24, 0x64	; 100
     438:	8f 83       	std	Y+7, r24	; 0x07
     43a:	85 e6       	ldi	r24, 0x65	; 101
     43c:	88 87       	std	Y+8, r24	; 0x08
     43e:	86 e6       	ldi	r24, 0x66	; 102
     440:	89 87       	std	Y+9, r24	; 0x09
     442:	87 e6       	ldi	r24, 0x67	; 103
     444:	8a 87       	std	Y+10, r24	; 0x0a
     446:	88 e6       	ldi	r24, 0x68	; 104
     448:	8b 87       	std	Y+11, r24	; 0x0b
	}
	msgToSend.id = 0x0006;
     44a:	86 e0       	ldi	r24, 0x06	; 6
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	9a 83       	std	Y+2, r25	; 0x02
     450:	89 83       	std	Y+1, r24	; 0x01
     452:	6e 01       	movw	r12, r28
     454:	ec e0       	ldi	r30, 0x0C	; 12
     456:	ce 0e       	add	r12, r30
     458:	d1 1c       	adc	r13, r1
		//_delay_ms(5000);
		//send_can_msg(&msgToSend);
		send_stick_can(&msgToSend);

		for(int i = 0; i < 8; i++){
			printf("\r   %c | %d | %d   \n\r",msgToSend.data[i],msgToSend.data_length,msgToSend.id);
     45a:	0f 2e       	mov	r0, r31
     45c:	fc e0       	ldi	r31, 0x0C	; 12
     45e:	ef 2e       	mov	r14, r31
     460:	f1 e0       	ldi	r31, 0x01	; 1
     462:	ff 2e       	mov	r15, r31
     464:	f0 2d       	mov	r31, r0
	while(1){
		// CAN BUS TEST
		
		//_delay_ms(5000);
		//send_can_msg(&msgToSend);
		send_stick_can(&msgToSend);
     466:	ce 01       	movw	r24, r28
     468:	01 96       	adiw	r24, 0x01	; 1
     46a:	0e 94 8f 01 	call	0x31e	; 0x31e <send_stick_can>
     46e:	8e 01       	movw	r16, r28
     470:	0c 5f       	subi	r16, 0xFC	; 252
     472:	1f 4f       	sbci	r17, 0xFF	; 255

		for(int i = 0; i < 8; i++){
			printf("\r   %c | %d | %d   \n\r",msgToSend.data[i],msgToSend.data_length,msgToSend.id);
     474:	f8 01       	movw	r30, r16
     476:	81 91       	ld	r24, Z+
     478:	8f 01       	movw	r16, r30
     47a:	9a 81       	ldd	r25, Y+2	; 0x02
     47c:	9f 93       	push	r25
     47e:	99 81       	ldd	r25, Y+1	; 0x01
     480:	9f 93       	push	r25
     482:	9b 81       	ldd	r25, Y+3	; 0x03
     484:	1f 92       	push	r1
     486:	9f 93       	push	r25
     488:	28 2f       	mov	r18, r24
     48a:	08 2e       	mov	r0, r24
     48c:	00 0c       	add	r0, r0
     48e:	33 0b       	sbc	r19, r19
     490:	3f 93       	push	r19
     492:	8f 93       	push	r24
     494:	ff 92       	push	r15
     496:	ef 92       	push	r14
     498:	0e 94 09 05 	call	0xa12	; 0xa12 <printf>
     49c:	ff ef       	ldi	r31, 0xFF	; 255
     49e:	2f ef       	ldi	r18, 0xFF	; 255
     4a0:	82 e0       	ldi	r24, 0x02	; 2
     4a2:	f1 50       	subi	r31, 0x01	; 1
     4a4:	20 40       	sbci	r18, 0x00	; 0
     4a6:	80 40       	sbci	r24, 0x00	; 0
     4a8:	e1 f7       	brne	.-8      	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
     4aa:	00 c0       	rjmp	.+0      	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
     4ac:	00 c0       	rjmp	.+0      	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
		
		//_delay_ms(5000);
		//send_can_msg(&msgToSend);
		send_stick_can(&msgToSend);

		for(int i = 0; i < 8; i++){
     4ae:	0f b6       	in	r0, 0x3f	; 63
     4b0:	f8 94       	cli
     4b2:	de bf       	out	0x3e, r29	; 62
     4b4:	0f be       	out	0x3f, r0	; 63
     4b6:	cd bf       	out	0x3d, r28	; 61
     4b8:	0c 15       	cp	r16, r12
     4ba:	1d 05       	cpc	r17, r13
     4bc:	d9 f6       	brne	.-74     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
     4be:	d3 cf       	rjmp	.-90     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>

000004c0 <oled_init>:
	atmelMap->OLED_CMD[1] = 0xB1;
	atmelMap->OLED_CMD[1] = 0x00;
	atmelMap->OLED_CMD[1] = 0x10;
}
void oled_write(amap* atmelMap){
	atmelMap->OLED_DATA[1] = 0x0F;
     4c0:	e0 e0       	ldi	r30, 0x00	; 0
     4c2:	f0 e1       	ldi	r31, 0x10	; 16
     4c4:	8e ea       	ldi	r24, 0xAE	; 174
     4c6:	80 83       	st	Z, r24
     4c8:	81 ea       	ldi	r24, 0xA1	; 161
     4ca:	80 83       	st	Z, r24
     4cc:	8a ed       	ldi	r24, 0xDA	; 218
     4ce:	80 83       	st	Z, r24
     4d0:	82 e1       	ldi	r24, 0x12	; 18
     4d2:	80 83       	st	Z, r24
     4d4:	88 ec       	ldi	r24, 0xC8	; 200
     4d6:	80 83       	st	Z, r24
     4d8:	88 ea       	ldi	r24, 0xA8	; 168
     4da:	80 83       	st	Z, r24
     4dc:	8f e3       	ldi	r24, 0x3F	; 63
     4de:	80 83       	st	Z, r24
     4e0:	85 ed       	ldi	r24, 0xD5	; 213
     4e2:	80 83       	st	Z, r24
     4e4:	80 e8       	ldi	r24, 0x80	; 128
     4e6:	80 83       	st	Z, r24
     4e8:	81 e8       	ldi	r24, 0x81	; 129
     4ea:	80 83       	st	Z, r24
     4ec:	80 e5       	ldi	r24, 0x50	; 80
     4ee:	80 83       	st	Z, r24
     4f0:	89 ed       	ldi	r24, 0xD9	; 217
     4f2:	80 83       	st	Z, r24
     4f4:	81 e2       	ldi	r24, 0x21	; 33
     4f6:	80 83       	st	Z, r24
     4f8:	80 e2       	ldi	r24, 0x20	; 32
     4fa:	80 83       	st	Z, r24
     4fc:	82 e0       	ldi	r24, 0x02	; 2
     4fe:	80 83       	st	Z, r24
     500:	8b ed       	ldi	r24, 0xDB	; 219
     502:	80 83       	st	Z, r24
     504:	80 e3       	ldi	r24, 0x30	; 48
     506:	80 83       	st	Z, r24
     508:	8d ea       	ldi	r24, 0xAD	; 173
     50a:	80 83       	st	Z, r24
     50c:	10 82       	st	Z, r1
     50e:	84 ea       	ldi	r24, 0xA4	; 164
     510:	80 83       	st	Z, r24
     512:	86 ea       	ldi	r24, 0xA6	; 166
     514:	80 83       	st	Z, r24
     516:	8f ea       	ldi	r24, 0xAF	; 175
     518:	80 83       	st	Z, r24
     51a:	08 95       	ret

0000051c <go_to_line>:
     51c:	87 70       	andi	r24, 0x07	; 7
     51e:	80 55       	subi	r24, 0x50	; 80
     520:	80 93 00 10 	sts	0x1000, r24	; 0x801000 <__bss_end+0xe5f>
     524:	08 95       	ret

00000526 <go_to_column>:
     526:	98 2f       	mov	r25, r24
     528:	9f 70       	andi	r25, 0x0F	; 15
     52a:	e0 e0       	ldi	r30, 0x00	; 0
     52c:	f0 e1       	ldi	r31, 0x10	; 16
     52e:	90 83       	st	Z, r25
     530:	82 95       	swap	r24
     532:	8f 70       	andi	r24, 0x0F	; 15
     534:	80 5f       	subi	r24, 0xF0	; 240
     536:	80 83       	st	Z, r24
     538:	08 95       	ret

0000053a <clear_oled>:
}

void clear_oled(){
     53a:	1f 93       	push	r17
     53c:	cf 93       	push	r28
     53e:	df 93       	push	r29
     540:	10 e0       	ldi	r17, 0x00	; 0
	ext_ram[0] = c;
}
void oled_write_data(char c)
{
	volatile char *ext_ram = (char *) 0x1200;
	ext_ram[0] = c;
     542:	c0 e0       	ldi	r28, 0x00	; 0
     544:	d2 e1       	ldi	r29, 0x12	; 18
	atmelMap->OLED_DATA[1] = 0x0F;
}

void clear_oled(){
	for(int i = 0; i < 8 ; i++){
		go_to_line(i);
     546:	81 2f       	mov	r24, r17
     548:	0e 94 8e 02 	call	0x51c	; 0x51c <go_to_line>
		
		go_to_column(0);
     54c:	80 e0       	ldi	r24, 0x00	; 0
     54e:	0e 94 93 02 	call	0x526	; 0x526 <go_to_column>
     552:	80 e8       	ldi	r24, 0x80	; 128
     554:	90 e0       	ldi	r25, 0x00	; 0
	ext_ram[0] = c;
}
void oled_write_data(char c)
{
	volatile char *ext_ram = (char *) 0x1200;
	ext_ram[0] = c;
     556:	18 82       	st	Y, r1
     558:	01 97       	sbiw	r24, 0x01	; 1
void clear_oled(){
	for(int i = 0; i < 8 ; i++){
		go_to_line(i);
		
		go_to_column(0);
		for(int j = 0; j < 128; j++){
     55a:	e9 f7       	brne	.-6      	; 0x556 <clear_oled+0x1c>
     55c:	1f 5f       	subi	r17, 0xFF	; 255
void oled_write(amap* atmelMap){
	atmelMap->OLED_DATA[1] = 0x0F;
}

void clear_oled(){
	for(int i = 0; i < 8 ; i++){
     55e:	18 30       	cpi	r17, 0x08	; 8
     560:	91 f7       	brne	.-28     	; 0x546 <clear_oled+0xc>
		for(int j = 0; j < 128; j++){
			
			oled_write_data(0x00);
		}
	}
}
     562:	df 91       	pop	r29
     564:	cf 91       	pop	r28
     566:	1f 91       	pop	r17
     568:	08 95       	ret

0000056a <SRAM_test>:
#include "sram_test.h"
    void SRAM_test(void)
    {
     56a:	ef 92       	push	r14
     56c:	ff 92       	push	r15
     56e:	0f 93       	push	r16
     570:	1f 93       	push	r17
     572:	cf 93       	push	r28
     574:	df 93       	push	r29
		volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
        uint16_t ext_ram_size = 0x800;
        uint16_t write_errors = 0;
        uint16_t retrieval_errors = 0;
        printf("Starting SRAM test...\n");
     576:	82 e2       	ldi	r24, 0x22	; 34
     578:	91 e0       	ldi	r25, 0x01	; 1
     57a:	0e 94 26 05 	call	0xa4c	; 0xa4c <puts>
        // rand() stores some internal state, so calling this function in a loop will
        // yield different seeds each time (unless srand() is called before this function)
        uint16_t seed = rand();
     57e:	0e 94 ae 04 	call	0x95c	; 0x95c <rand>
     582:	7c 01       	movw	r14, r24
        // Write phase: Immediately check that the correct value was stored
        srand(seed);
     584:	0e 94 b3 04 	call	0x966	; 0x966 <srand>
     588:	c0 e0       	ldi	r28, 0x00	; 0
     58a:	d8 e1       	ldi	r29, 0x18	; 24
#include "sram_test.h"
    void SRAM_test(void)
    {
		volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
        uint16_t ext_ram_size = 0x800;
        uint16_t write_errors = 0;
     58c:	00 e0       	ldi	r16, 0x00	; 0
     58e:	10 e0       	ldi	r17, 0x00	; 0
        // yield different seeds each time (unless srand() is called before this function)
        uint16_t seed = rand();
        // Write phase: Immediately check that the correct value was stored
        srand(seed);
        for (uint16_t i = 0; i < ext_ram_size; i++) {
            uint8_t some_value = rand();
     590:	0e 94 ae 04 	call	0x95c	; 0x95c <rand>
            ext_ram[i] = some_value;
     594:	88 83       	st	Y, r24
            uint8_t retreived_value = ext_ram[i];
     596:	98 81       	ld	r25, Y
            if (retreived_value != some_value) {
     598:	89 17       	cp	r24, r25
     59a:	11 f0       	breq	.+4      	; 0x5a0 <SRAM_test+0x36>
                //printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
                write_errors++;
     59c:	0f 5f       	subi	r16, 0xFF	; 255
     59e:	1f 4f       	sbci	r17, 0xFF	; 255
     5a0:	21 96       	adiw	r28, 0x01	; 1
        // rand() stores some internal state, so calling this function in a loop will
        // yield different seeds each time (unless srand() is called before this function)
        uint16_t seed = rand();
        // Write phase: Immediately check that the correct value was stored
        srand(seed);
        for (uint16_t i = 0; i < ext_ram_size; i++) {
     5a2:	c1 15       	cp	r28, r1
     5a4:	80 e2       	ldi	r24, 0x20	; 32
     5a6:	d8 07       	cpc	r29, r24
     5a8:	99 f7       	brne	.-26     	; 0x590 <SRAM_test+0x26>
                //printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
                write_errors++;
            }
        }
        // Retrieval phase: Check that no values were changed during or after the write phase
        srand(seed);
     5aa:	c7 01       	movw	r24, r14
     5ac:	0e 94 b3 04 	call	0x966	; 0x966 <srand>
     5b0:	c0 e0       	ldi	r28, 0x00	; 0
     5b2:	d8 e1       	ldi	r29, 0x18	; 24
    void SRAM_test(void)
    {
		volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
        uint16_t ext_ram_size = 0x800;
        uint16_t write_errors = 0;
        uint16_t retrieval_errors = 0;
     5b4:	e1 2c       	mov	r14, r1
     5b6:	f1 2c       	mov	r15, r1
        }
        // Retrieval phase: Check that no values were changed during or after the write phase
        srand(seed);
        // reset the PRNG to the state it had before the write phase
        for (uint16_t i = 0; i < ext_ram_size; i++) {
            uint8_t some_value = rand();
     5b8:	0e 94 ae 04 	call	0x95c	; 0x95c <rand>
            uint8_t retreived_value = ext_ram[i];
     5bc:	98 81       	ld	r25, Y
            if (retreived_value != some_value) {
     5be:	98 17       	cp	r25, r24
     5c0:	19 f0       	breq	.+6      	; 0x5c8 <SRAM_test+0x5e>
               // printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
                retrieval_errors++;
     5c2:	8f ef       	ldi	r24, 0xFF	; 255
     5c4:	e8 1a       	sub	r14, r24
     5c6:	f8 0a       	sbc	r15, r24
     5c8:	21 96       	adiw	r28, 0x01	; 1
            }
        }
        // Retrieval phase: Check that no values were changed during or after the write phase
        srand(seed);
        // reset the PRNG to the state it had before the write phase
        for (uint16_t i = 0; i < ext_ram_size; i++) {
     5ca:	c1 15       	cp	r28, r1
     5cc:	80 e2       	ldi	r24, 0x20	; 32
     5ce:	d8 07       	cpc	r29, r24
     5d0:	99 f7       	brne	.-26     	; 0x5b8 <SRAM_test+0x4e>
            if (retreived_value != some_value) {
               // printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
                retrieval_errors++;
            }
        }
        printf("SRAM test completed with \n%4d errors in write phase and \n%4d errors in retrieval phase\n\n", write_errors, retrieval_errors);
     5d2:	ff 92       	push	r15
     5d4:	ef 92       	push	r14
     5d6:	1f 93       	push	r17
     5d8:	0f 93       	push	r16
     5da:	88 e3       	ldi	r24, 0x38	; 56
     5dc:	91 e0       	ldi	r25, 0x01	; 1
     5de:	9f 93       	push	r25
     5e0:	8f 93       	push	r24
     5e2:	0e 94 09 05 	call	0xa12	; 0xa12 <printf>
     5e6:	0f 90       	pop	r0
     5e8:	0f 90       	pop	r0
     5ea:	0f 90       	pop	r0
     5ec:	0f 90       	pop	r0
     5ee:	0f 90       	pop	r0
     5f0:	0f 90       	pop	r0
     5f2:	df 91       	pop	r29
     5f4:	cf 91       	pop	r28
     5f6:	1f 91       	pop	r17
     5f8:	0f 91       	pop	r16
     5fa:	ff 90       	pop	r15
     5fc:	ef 90       	pop	r14
     5fe:	08 95       	ret

00000600 <USART_Transmit>:
	UCSR1C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
	clear_bit(UCSR0C, 0); // Clock polarity
	fdevopen(USART_Transmit, USART_Receive);
}
void USART_Transmit(unsigned char data){
	while (!(UCSR0A & (1<<UDRE0)));
     600:	5d 9b       	sbis	0x0b, 5	; 11
     602:	fe cf       	rjmp	.-4      	; 0x600 <USART_Transmit>
	
	UDR0 = data;
     604:	8c b9       	out	0x0c, r24	; 12
     606:	08 95       	ret

00000608 <USART_Receive>:
}

unsigned int USART_Receive(void)
{
	
	while (!(UCSR0A & (1<<RXC0)));
     608:	5f 9b       	sbis	0x0b, 7	; 11
     60a:	fe cf       	rjmp	.-4      	; 0x608 <USART_Receive>
	

	return UDR0;
     60c:	8c b1       	in	r24, 0x0c	; 12
     60e:	90 e0       	ldi	r25, 0x00	; 0
     610:	08 95       	ret

00000612 <USART_Init>:
#include <stdio.h>
#define clear_bit( reg, bit ) (reg &= ~(1 << bit))

void USART_Init (unsigned int ubrr ){
	
	UBRR0H = (unsigned char)(ubrr>>8);
     612:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)ubrr;
     614:	89 b9       	out	0x09, r24	; 9
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     616:	88 e1       	ldi	r24, 0x18	; 24
     618:	8a b9       	out	0x0a, r24	; 10
	
	UCSR1C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
     61a:	8e e8       	ldi	r24, 0x8E	; 142
     61c:	8c bf       	out	0x3c, r24	; 60
	clear_bit(UCSR0C, 0); // Clock polarity
     61e:	80 b5       	in	r24, 0x20	; 32
     620:	8e 7f       	andi	r24, 0xFE	; 254
     622:	80 bd       	out	0x20, r24	; 32
	fdevopen(USART_Transmit, USART_Receive);
     624:	64 e0       	ldi	r22, 0x04	; 4
     626:	73 e0       	ldi	r23, 0x03	; 3
     628:	80 e0       	ldi	r24, 0x00	; 0
     62a:	93 e0       	ldi	r25, 0x03	; 3
     62c:	0e 94 be 04 	call	0x97c	; 0x97c <fdevopen>
     630:	08 95       	ret

00000632 <__divmodhi4>:
     632:	97 fb       	bst	r25, 7
     634:	07 2e       	mov	r0, r23
     636:	16 f4       	brtc	.+4      	; 0x63c <__divmodhi4+0xa>
     638:	00 94       	com	r0
     63a:	07 d0       	rcall	.+14     	; 0x64a <__divmodhi4_neg1>
     63c:	77 fd       	sbrc	r23, 7
     63e:	09 d0       	rcall	.+18     	; 0x652 <__divmodhi4_neg2>
     640:	0e 94 2d 03 	call	0x65a	; 0x65a <__udivmodhi4>
     644:	07 fc       	sbrc	r0, 7
     646:	05 d0       	rcall	.+10     	; 0x652 <__divmodhi4_neg2>
     648:	3e f4       	brtc	.+14     	; 0x658 <__divmodhi4_exit>

0000064a <__divmodhi4_neg1>:
     64a:	90 95       	com	r25
     64c:	81 95       	neg	r24
     64e:	9f 4f       	sbci	r25, 0xFF	; 255
     650:	08 95       	ret

00000652 <__divmodhi4_neg2>:
     652:	70 95       	com	r23
     654:	61 95       	neg	r22
     656:	7f 4f       	sbci	r23, 0xFF	; 255

00000658 <__divmodhi4_exit>:
     658:	08 95       	ret

0000065a <__udivmodhi4>:
     65a:	aa 1b       	sub	r26, r26
     65c:	bb 1b       	sub	r27, r27
     65e:	51 e1       	ldi	r21, 0x11	; 17
     660:	07 c0       	rjmp	.+14     	; 0x670 <__udivmodhi4_ep>

00000662 <__udivmodhi4_loop>:
     662:	aa 1f       	adc	r26, r26
     664:	bb 1f       	adc	r27, r27
     666:	a6 17       	cp	r26, r22
     668:	b7 07       	cpc	r27, r23
     66a:	10 f0       	brcs	.+4      	; 0x670 <__udivmodhi4_ep>
     66c:	a6 1b       	sub	r26, r22
     66e:	b7 0b       	sbc	r27, r23

00000670 <__udivmodhi4_ep>:
     670:	88 1f       	adc	r24, r24
     672:	99 1f       	adc	r25, r25
     674:	5a 95       	dec	r21
     676:	a9 f7       	brne	.-22     	; 0x662 <__udivmodhi4_loop>
     678:	80 95       	com	r24
     67a:	90 95       	com	r25
     67c:	bc 01       	movw	r22, r24
     67e:	cd 01       	movw	r24, r26
     680:	08 95       	ret

00000682 <malloc>:
     682:	0f 93       	push	r16
     684:	1f 93       	push	r17
     686:	cf 93       	push	r28
     688:	df 93       	push	r29
     68a:	82 30       	cpi	r24, 0x02	; 2
     68c:	91 05       	cpc	r25, r1
     68e:	10 f4       	brcc	.+4      	; 0x694 <malloc+0x12>
     690:	82 e0       	ldi	r24, 0x02	; 2
     692:	90 e0       	ldi	r25, 0x00	; 0
     694:	e0 91 99 01 	lds	r30, 0x0199	; 0x800199 <__flp>
     698:	f0 91 9a 01 	lds	r31, 0x019A	; 0x80019a <__flp+0x1>
     69c:	20 e0       	ldi	r18, 0x00	; 0
     69e:	30 e0       	ldi	r19, 0x00	; 0
     6a0:	a0 e0       	ldi	r26, 0x00	; 0
     6a2:	b0 e0       	ldi	r27, 0x00	; 0
     6a4:	30 97       	sbiw	r30, 0x00	; 0
     6a6:	19 f1       	breq	.+70     	; 0x6ee <malloc+0x6c>
     6a8:	40 81       	ld	r20, Z
     6aa:	51 81       	ldd	r21, Z+1	; 0x01
     6ac:	02 81       	ldd	r16, Z+2	; 0x02
     6ae:	13 81       	ldd	r17, Z+3	; 0x03
     6b0:	48 17       	cp	r20, r24
     6b2:	59 07       	cpc	r21, r25
     6b4:	c8 f0       	brcs	.+50     	; 0x6e8 <malloc+0x66>
     6b6:	84 17       	cp	r24, r20
     6b8:	95 07       	cpc	r25, r21
     6ba:	69 f4       	brne	.+26     	; 0x6d6 <malloc+0x54>
     6bc:	10 97       	sbiw	r26, 0x00	; 0
     6be:	31 f0       	breq	.+12     	; 0x6cc <malloc+0x4a>
     6c0:	12 96       	adiw	r26, 0x02	; 2
     6c2:	0c 93       	st	X, r16
     6c4:	12 97       	sbiw	r26, 0x02	; 2
     6c6:	13 96       	adiw	r26, 0x03	; 3
     6c8:	1c 93       	st	X, r17
     6ca:	27 c0       	rjmp	.+78     	; 0x71a <malloc+0x98>
     6cc:	00 93 99 01 	sts	0x0199, r16	; 0x800199 <__flp>
     6d0:	10 93 9a 01 	sts	0x019A, r17	; 0x80019a <__flp+0x1>
     6d4:	22 c0       	rjmp	.+68     	; 0x71a <malloc+0x98>
     6d6:	21 15       	cp	r18, r1
     6d8:	31 05       	cpc	r19, r1
     6da:	19 f0       	breq	.+6      	; 0x6e2 <malloc+0x60>
     6dc:	42 17       	cp	r20, r18
     6de:	53 07       	cpc	r21, r19
     6e0:	18 f4       	brcc	.+6      	; 0x6e8 <malloc+0x66>
     6e2:	9a 01       	movw	r18, r20
     6e4:	bd 01       	movw	r22, r26
     6e6:	ef 01       	movw	r28, r30
     6e8:	df 01       	movw	r26, r30
     6ea:	f8 01       	movw	r30, r16
     6ec:	db cf       	rjmp	.-74     	; 0x6a4 <malloc+0x22>
     6ee:	21 15       	cp	r18, r1
     6f0:	31 05       	cpc	r19, r1
     6f2:	f9 f0       	breq	.+62     	; 0x732 <malloc+0xb0>
     6f4:	28 1b       	sub	r18, r24
     6f6:	39 0b       	sbc	r19, r25
     6f8:	24 30       	cpi	r18, 0x04	; 4
     6fa:	31 05       	cpc	r19, r1
     6fc:	80 f4       	brcc	.+32     	; 0x71e <malloc+0x9c>
     6fe:	8a 81       	ldd	r24, Y+2	; 0x02
     700:	9b 81       	ldd	r25, Y+3	; 0x03
     702:	61 15       	cp	r22, r1
     704:	71 05       	cpc	r23, r1
     706:	21 f0       	breq	.+8      	; 0x710 <malloc+0x8e>
     708:	fb 01       	movw	r30, r22
     70a:	93 83       	std	Z+3, r25	; 0x03
     70c:	82 83       	std	Z+2, r24	; 0x02
     70e:	04 c0       	rjmp	.+8      	; 0x718 <malloc+0x96>
     710:	90 93 9a 01 	sts	0x019A, r25	; 0x80019a <__flp+0x1>
     714:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <__flp>
     718:	fe 01       	movw	r30, r28
     71a:	32 96       	adiw	r30, 0x02	; 2
     71c:	44 c0       	rjmp	.+136    	; 0x7a6 <malloc+0x124>
     71e:	fe 01       	movw	r30, r28
     720:	e2 0f       	add	r30, r18
     722:	f3 1f       	adc	r31, r19
     724:	81 93       	st	Z+, r24
     726:	91 93       	st	Z+, r25
     728:	22 50       	subi	r18, 0x02	; 2
     72a:	31 09       	sbc	r19, r1
     72c:	39 83       	std	Y+1, r19	; 0x01
     72e:	28 83       	st	Y, r18
     730:	3a c0       	rjmp	.+116    	; 0x7a6 <malloc+0x124>
     732:	20 91 97 01 	lds	r18, 0x0197	; 0x800197 <__brkval>
     736:	30 91 98 01 	lds	r19, 0x0198	; 0x800198 <__brkval+0x1>
     73a:	23 2b       	or	r18, r19
     73c:	41 f4       	brne	.+16     	; 0x74e <malloc+0xcc>
     73e:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
     742:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
     746:	30 93 98 01 	sts	0x0198, r19	; 0x800198 <__brkval+0x1>
     74a:	20 93 97 01 	sts	0x0197, r18	; 0x800197 <__brkval>
     74e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     752:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
     756:	21 15       	cp	r18, r1
     758:	31 05       	cpc	r19, r1
     75a:	41 f4       	brne	.+16     	; 0x76c <malloc+0xea>
     75c:	2d b7       	in	r18, 0x3d	; 61
     75e:	3e b7       	in	r19, 0x3e	; 62
     760:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
     764:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
     768:	24 1b       	sub	r18, r20
     76a:	35 0b       	sbc	r19, r21
     76c:	e0 91 97 01 	lds	r30, 0x0197	; 0x800197 <__brkval>
     770:	f0 91 98 01 	lds	r31, 0x0198	; 0x800198 <__brkval+0x1>
     774:	e2 17       	cp	r30, r18
     776:	f3 07       	cpc	r31, r19
     778:	a0 f4       	brcc	.+40     	; 0x7a2 <malloc+0x120>
     77a:	2e 1b       	sub	r18, r30
     77c:	3f 0b       	sbc	r19, r31
     77e:	28 17       	cp	r18, r24
     780:	39 07       	cpc	r19, r25
     782:	78 f0       	brcs	.+30     	; 0x7a2 <malloc+0x120>
     784:	ac 01       	movw	r20, r24
     786:	4e 5f       	subi	r20, 0xFE	; 254
     788:	5f 4f       	sbci	r21, 0xFF	; 255
     78a:	24 17       	cp	r18, r20
     78c:	35 07       	cpc	r19, r21
     78e:	48 f0       	brcs	.+18     	; 0x7a2 <malloc+0x120>
     790:	4e 0f       	add	r20, r30
     792:	5f 1f       	adc	r21, r31
     794:	50 93 98 01 	sts	0x0198, r21	; 0x800198 <__brkval+0x1>
     798:	40 93 97 01 	sts	0x0197, r20	; 0x800197 <__brkval>
     79c:	81 93       	st	Z+, r24
     79e:	91 93       	st	Z+, r25
     7a0:	02 c0       	rjmp	.+4      	; 0x7a6 <malloc+0x124>
     7a2:	e0 e0       	ldi	r30, 0x00	; 0
     7a4:	f0 e0       	ldi	r31, 0x00	; 0
     7a6:	cf 01       	movw	r24, r30
     7a8:	df 91       	pop	r29
     7aa:	cf 91       	pop	r28
     7ac:	1f 91       	pop	r17
     7ae:	0f 91       	pop	r16
     7b0:	08 95       	ret

000007b2 <free>:
     7b2:	cf 93       	push	r28
     7b4:	df 93       	push	r29
     7b6:	00 97       	sbiw	r24, 0x00	; 0
     7b8:	09 f4       	brne	.+2      	; 0x7bc <free+0xa>
     7ba:	81 c0       	rjmp	.+258    	; 0x8be <free+0x10c>
     7bc:	fc 01       	movw	r30, r24
     7be:	32 97       	sbiw	r30, 0x02	; 2
     7c0:	13 82       	std	Z+3, r1	; 0x03
     7c2:	12 82       	std	Z+2, r1	; 0x02
     7c4:	a0 91 99 01 	lds	r26, 0x0199	; 0x800199 <__flp>
     7c8:	b0 91 9a 01 	lds	r27, 0x019A	; 0x80019a <__flp+0x1>
     7cc:	10 97       	sbiw	r26, 0x00	; 0
     7ce:	81 f4       	brne	.+32     	; 0x7f0 <free+0x3e>
     7d0:	20 81       	ld	r18, Z
     7d2:	31 81       	ldd	r19, Z+1	; 0x01
     7d4:	82 0f       	add	r24, r18
     7d6:	93 1f       	adc	r25, r19
     7d8:	20 91 97 01 	lds	r18, 0x0197	; 0x800197 <__brkval>
     7dc:	30 91 98 01 	lds	r19, 0x0198	; 0x800198 <__brkval+0x1>
     7e0:	28 17       	cp	r18, r24
     7e2:	39 07       	cpc	r19, r25
     7e4:	51 f5       	brne	.+84     	; 0x83a <free+0x88>
     7e6:	f0 93 98 01 	sts	0x0198, r31	; 0x800198 <__brkval+0x1>
     7ea:	e0 93 97 01 	sts	0x0197, r30	; 0x800197 <__brkval>
     7ee:	67 c0       	rjmp	.+206    	; 0x8be <free+0x10c>
     7f0:	ed 01       	movw	r28, r26
     7f2:	20 e0       	ldi	r18, 0x00	; 0
     7f4:	30 e0       	ldi	r19, 0x00	; 0
     7f6:	ce 17       	cp	r28, r30
     7f8:	df 07       	cpc	r29, r31
     7fa:	40 f4       	brcc	.+16     	; 0x80c <free+0x5a>
     7fc:	4a 81       	ldd	r20, Y+2	; 0x02
     7fe:	5b 81       	ldd	r21, Y+3	; 0x03
     800:	9e 01       	movw	r18, r28
     802:	41 15       	cp	r20, r1
     804:	51 05       	cpc	r21, r1
     806:	f1 f0       	breq	.+60     	; 0x844 <free+0x92>
     808:	ea 01       	movw	r28, r20
     80a:	f5 cf       	rjmp	.-22     	; 0x7f6 <free+0x44>
     80c:	d3 83       	std	Z+3, r29	; 0x03
     80e:	c2 83       	std	Z+2, r28	; 0x02
     810:	40 81       	ld	r20, Z
     812:	51 81       	ldd	r21, Z+1	; 0x01
     814:	84 0f       	add	r24, r20
     816:	95 1f       	adc	r25, r21
     818:	c8 17       	cp	r28, r24
     81a:	d9 07       	cpc	r29, r25
     81c:	59 f4       	brne	.+22     	; 0x834 <free+0x82>
     81e:	88 81       	ld	r24, Y
     820:	99 81       	ldd	r25, Y+1	; 0x01
     822:	84 0f       	add	r24, r20
     824:	95 1f       	adc	r25, r21
     826:	02 96       	adiw	r24, 0x02	; 2
     828:	91 83       	std	Z+1, r25	; 0x01
     82a:	80 83       	st	Z, r24
     82c:	8a 81       	ldd	r24, Y+2	; 0x02
     82e:	9b 81       	ldd	r25, Y+3	; 0x03
     830:	93 83       	std	Z+3, r25	; 0x03
     832:	82 83       	std	Z+2, r24	; 0x02
     834:	21 15       	cp	r18, r1
     836:	31 05       	cpc	r19, r1
     838:	29 f4       	brne	.+10     	; 0x844 <free+0x92>
     83a:	f0 93 9a 01 	sts	0x019A, r31	; 0x80019a <__flp+0x1>
     83e:	e0 93 99 01 	sts	0x0199, r30	; 0x800199 <__flp>
     842:	3d c0       	rjmp	.+122    	; 0x8be <free+0x10c>
     844:	e9 01       	movw	r28, r18
     846:	fb 83       	std	Y+3, r31	; 0x03
     848:	ea 83       	std	Y+2, r30	; 0x02
     84a:	49 91       	ld	r20, Y+
     84c:	59 91       	ld	r21, Y+
     84e:	c4 0f       	add	r28, r20
     850:	d5 1f       	adc	r29, r21
     852:	ec 17       	cp	r30, r28
     854:	fd 07       	cpc	r31, r29
     856:	61 f4       	brne	.+24     	; 0x870 <free+0xbe>
     858:	80 81       	ld	r24, Z
     85a:	91 81       	ldd	r25, Z+1	; 0x01
     85c:	84 0f       	add	r24, r20
     85e:	95 1f       	adc	r25, r21
     860:	02 96       	adiw	r24, 0x02	; 2
     862:	e9 01       	movw	r28, r18
     864:	99 83       	std	Y+1, r25	; 0x01
     866:	88 83       	st	Y, r24
     868:	82 81       	ldd	r24, Z+2	; 0x02
     86a:	93 81       	ldd	r25, Z+3	; 0x03
     86c:	9b 83       	std	Y+3, r25	; 0x03
     86e:	8a 83       	std	Y+2, r24	; 0x02
     870:	e0 e0       	ldi	r30, 0x00	; 0
     872:	f0 e0       	ldi	r31, 0x00	; 0
     874:	12 96       	adiw	r26, 0x02	; 2
     876:	8d 91       	ld	r24, X+
     878:	9c 91       	ld	r25, X
     87a:	13 97       	sbiw	r26, 0x03	; 3
     87c:	00 97       	sbiw	r24, 0x00	; 0
     87e:	19 f0       	breq	.+6      	; 0x886 <free+0xd4>
     880:	fd 01       	movw	r30, r26
     882:	dc 01       	movw	r26, r24
     884:	f7 cf       	rjmp	.-18     	; 0x874 <free+0xc2>
     886:	8d 91       	ld	r24, X+
     888:	9c 91       	ld	r25, X
     88a:	11 97       	sbiw	r26, 0x01	; 1
     88c:	9d 01       	movw	r18, r26
     88e:	2e 5f       	subi	r18, 0xFE	; 254
     890:	3f 4f       	sbci	r19, 0xFF	; 255
     892:	82 0f       	add	r24, r18
     894:	93 1f       	adc	r25, r19
     896:	20 91 97 01 	lds	r18, 0x0197	; 0x800197 <__brkval>
     89a:	30 91 98 01 	lds	r19, 0x0198	; 0x800198 <__brkval+0x1>
     89e:	28 17       	cp	r18, r24
     8a0:	39 07       	cpc	r19, r25
     8a2:	69 f4       	brne	.+26     	; 0x8be <free+0x10c>
     8a4:	30 97       	sbiw	r30, 0x00	; 0
     8a6:	29 f4       	brne	.+10     	; 0x8b2 <free+0x100>
     8a8:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <__flp+0x1>
     8ac:	10 92 99 01 	sts	0x0199, r1	; 0x800199 <__flp>
     8b0:	02 c0       	rjmp	.+4      	; 0x8b6 <free+0x104>
     8b2:	13 82       	std	Z+3, r1	; 0x03
     8b4:	12 82       	std	Z+2, r1	; 0x02
     8b6:	b0 93 98 01 	sts	0x0198, r27	; 0x800198 <__brkval+0x1>
     8ba:	a0 93 97 01 	sts	0x0197, r26	; 0x800197 <__brkval>
     8be:	df 91       	pop	r29
     8c0:	cf 91       	pop	r28
     8c2:	08 95       	ret

000008c4 <do_rand>:
     8c4:	8f 92       	push	r8
     8c6:	9f 92       	push	r9
     8c8:	af 92       	push	r10
     8ca:	bf 92       	push	r11
     8cc:	cf 92       	push	r12
     8ce:	df 92       	push	r13
     8d0:	ef 92       	push	r14
     8d2:	ff 92       	push	r15
     8d4:	cf 93       	push	r28
     8d6:	df 93       	push	r29
     8d8:	ec 01       	movw	r28, r24
     8da:	68 81       	ld	r22, Y
     8dc:	79 81       	ldd	r23, Y+1	; 0x01
     8de:	8a 81       	ldd	r24, Y+2	; 0x02
     8e0:	9b 81       	ldd	r25, Y+3	; 0x03
     8e2:	61 15       	cp	r22, r1
     8e4:	71 05       	cpc	r23, r1
     8e6:	81 05       	cpc	r24, r1
     8e8:	91 05       	cpc	r25, r1
     8ea:	21 f4       	brne	.+8      	; 0x8f4 <do_rand+0x30>
     8ec:	64 e2       	ldi	r22, 0x24	; 36
     8ee:	79 ed       	ldi	r23, 0xD9	; 217
     8f0:	8b e5       	ldi	r24, 0x5B	; 91
     8f2:	97 e0       	ldi	r25, 0x07	; 7
     8f4:	2d e1       	ldi	r18, 0x1D	; 29
     8f6:	33 ef       	ldi	r19, 0xF3	; 243
     8f8:	41 e0       	ldi	r20, 0x01	; 1
     8fa:	50 e0       	ldi	r21, 0x00	; 0
     8fc:	0e 94 0a 08 	call	0x1014	; 0x1014 <__divmodsi4>
     900:	49 01       	movw	r8, r18
     902:	5a 01       	movw	r10, r20
     904:	9b 01       	movw	r18, r22
     906:	ac 01       	movw	r20, r24
     908:	a7 ea       	ldi	r26, 0xA7	; 167
     90a:	b1 e4       	ldi	r27, 0x41	; 65
     90c:	0e 94 29 08 	call	0x1052	; 0x1052 <__muluhisi3>
     910:	6b 01       	movw	r12, r22
     912:	7c 01       	movw	r14, r24
     914:	ac ee       	ldi	r26, 0xEC	; 236
     916:	b4 ef       	ldi	r27, 0xF4	; 244
     918:	a5 01       	movw	r20, r10
     91a:	94 01       	movw	r18, r8
     91c:	0e 94 37 08 	call	0x106e	; 0x106e <__mulohisi3>
     920:	dc 01       	movw	r26, r24
     922:	cb 01       	movw	r24, r22
     924:	8c 0d       	add	r24, r12
     926:	9d 1d       	adc	r25, r13
     928:	ae 1d       	adc	r26, r14
     92a:	bf 1d       	adc	r27, r15
     92c:	b7 ff       	sbrs	r27, 7
     92e:	03 c0       	rjmp	.+6      	; 0x936 <do_rand+0x72>
     930:	01 97       	sbiw	r24, 0x01	; 1
     932:	a1 09       	sbc	r26, r1
     934:	b0 48       	sbci	r27, 0x80	; 128
     936:	88 83       	st	Y, r24
     938:	99 83       	std	Y+1, r25	; 0x01
     93a:	aa 83       	std	Y+2, r26	; 0x02
     93c:	bb 83       	std	Y+3, r27	; 0x03
     93e:	9f 77       	andi	r25, 0x7F	; 127
     940:	df 91       	pop	r29
     942:	cf 91       	pop	r28
     944:	ff 90       	pop	r15
     946:	ef 90       	pop	r14
     948:	df 90       	pop	r13
     94a:	cf 90       	pop	r12
     94c:	bf 90       	pop	r11
     94e:	af 90       	pop	r10
     950:	9f 90       	pop	r9
     952:	8f 90       	pop	r8
     954:	08 95       	ret

00000956 <rand_r>:
     956:	0e 94 62 04 	call	0x8c4	; 0x8c4 <do_rand>
     95a:	08 95       	ret

0000095c <rand>:
     95c:	86 e0       	ldi	r24, 0x06	; 6
     95e:	91 e0       	ldi	r25, 0x01	; 1
     960:	0e 94 62 04 	call	0x8c4	; 0x8c4 <do_rand>
     964:	08 95       	ret

00000966 <srand>:
     966:	a0 e0       	ldi	r26, 0x00	; 0
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <next>
     96e:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <next+0x1>
     972:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <next+0x2>
     976:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <next+0x3>
     97a:	08 95       	ret

0000097c <fdevopen>:
     97c:	0f 93       	push	r16
     97e:	1f 93       	push	r17
     980:	cf 93       	push	r28
     982:	df 93       	push	r29
     984:	00 97       	sbiw	r24, 0x00	; 0
     986:	31 f4       	brne	.+12     	; 0x994 <fdevopen+0x18>
     988:	61 15       	cp	r22, r1
     98a:	71 05       	cpc	r23, r1
     98c:	19 f4       	brne	.+6      	; 0x994 <fdevopen+0x18>
     98e:	80 e0       	ldi	r24, 0x00	; 0
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	3a c0       	rjmp	.+116    	; 0xa08 <fdevopen+0x8c>
     994:	8b 01       	movw	r16, r22
     996:	ec 01       	movw	r28, r24
     998:	6e e0       	ldi	r22, 0x0E	; 14
     99a:	70 e0       	ldi	r23, 0x00	; 0
     99c:	81 e0       	ldi	r24, 0x01	; 1
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	0e 94 37 07 	call	0xe6e	; 0xe6e <calloc>
     9a4:	fc 01       	movw	r30, r24
     9a6:	89 2b       	or	r24, r25
     9a8:	91 f3       	breq	.-28     	; 0x98e <fdevopen+0x12>
     9aa:	80 e8       	ldi	r24, 0x80	; 128
     9ac:	83 83       	std	Z+3, r24	; 0x03
     9ae:	01 15       	cp	r16, r1
     9b0:	11 05       	cpc	r17, r1
     9b2:	71 f0       	breq	.+28     	; 0x9d0 <fdevopen+0x54>
     9b4:	13 87       	std	Z+11, r17	; 0x0b
     9b6:	02 87       	std	Z+10, r16	; 0x0a
     9b8:	81 e8       	ldi	r24, 0x81	; 129
     9ba:	83 83       	std	Z+3, r24	; 0x03
     9bc:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <__iob>
     9c0:	90 91 9c 01 	lds	r25, 0x019C	; 0x80019c <__iob+0x1>
     9c4:	89 2b       	or	r24, r25
     9c6:	21 f4       	brne	.+8      	; 0x9d0 <fdevopen+0x54>
     9c8:	f0 93 9c 01 	sts	0x019C, r31	; 0x80019c <__iob+0x1>
     9cc:	e0 93 9b 01 	sts	0x019B, r30	; 0x80019b <__iob>
     9d0:	20 97       	sbiw	r28, 0x00	; 0
     9d2:	c9 f0       	breq	.+50     	; 0xa06 <fdevopen+0x8a>
     9d4:	d1 87       	std	Z+9, r29	; 0x09
     9d6:	c0 87       	std	Z+8, r28	; 0x08
     9d8:	83 81       	ldd	r24, Z+3	; 0x03
     9da:	82 60       	ori	r24, 0x02	; 2
     9dc:	83 83       	std	Z+3, r24	; 0x03
     9de:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <__iob+0x2>
     9e2:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <__iob+0x3>
     9e6:	89 2b       	or	r24, r25
     9e8:	71 f4       	brne	.+28     	; 0xa06 <fdevopen+0x8a>
     9ea:	f0 93 9e 01 	sts	0x019E, r31	; 0x80019e <__iob+0x3>
     9ee:	e0 93 9d 01 	sts	0x019D, r30	; 0x80019d <__iob+0x2>
     9f2:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <__iob+0x4>
     9f6:	90 91 a0 01 	lds	r25, 0x01A0	; 0x8001a0 <__iob+0x5>
     9fa:	89 2b       	or	r24, r25
     9fc:	21 f4       	brne	.+8      	; 0xa06 <fdevopen+0x8a>
     9fe:	f0 93 a0 01 	sts	0x01A0, r31	; 0x8001a0 <__iob+0x5>
     a02:	e0 93 9f 01 	sts	0x019F, r30	; 0x80019f <__iob+0x4>
     a06:	cf 01       	movw	r24, r30
     a08:	df 91       	pop	r29
     a0a:	cf 91       	pop	r28
     a0c:	1f 91       	pop	r17
     a0e:	0f 91       	pop	r16
     a10:	08 95       	ret

00000a12 <printf>:
     a12:	a0 e0       	ldi	r26, 0x00	; 0
     a14:	b0 e0       	ldi	r27, 0x00	; 0
     a16:	ef e0       	ldi	r30, 0x0F	; 15
     a18:	f5 e0       	ldi	r31, 0x05	; 5
     a1a:	0c 94 4c 08 	jmp	0x1098	; 0x1098 <__prologue_saves__+0x20>
     a1e:	ae 01       	movw	r20, r28
     a20:	4b 5f       	subi	r20, 0xFB	; 251
     a22:	5f 4f       	sbci	r21, 0xFF	; 255
     a24:	fa 01       	movw	r30, r20
     a26:	61 91       	ld	r22, Z+
     a28:	71 91       	ld	r23, Z+
     a2a:	af 01       	movw	r20, r30
     a2c:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <__iob+0x2>
     a30:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <__iob+0x3>
     a34:	0e 94 56 05 	call	0xaac	; 0xaac <vfprintf>
     a38:	e2 e0       	ldi	r30, 0x02	; 2
     a3a:	0c 94 68 08 	jmp	0x10d0	; 0x10d0 <__epilogue_restores__+0x20>

00000a3e <putchar>:
     a3e:	60 91 9d 01 	lds	r22, 0x019D	; 0x80019d <__iob+0x2>
     a42:	70 91 9e 01 	lds	r23, 0x019E	; 0x80019e <__iob+0x3>
     a46:	0e 94 70 07 	call	0xee0	; 0xee0 <fputc>
     a4a:	08 95       	ret

00000a4c <puts>:
     a4c:	0f 93       	push	r16
     a4e:	1f 93       	push	r17
     a50:	cf 93       	push	r28
     a52:	df 93       	push	r29
     a54:	e0 91 9d 01 	lds	r30, 0x019D	; 0x80019d <__iob+0x2>
     a58:	f0 91 9e 01 	lds	r31, 0x019E	; 0x80019e <__iob+0x3>
     a5c:	23 81       	ldd	r18, Z+3	; 0x03
     a5e:	21 ff       	sbrs	r18, 1
     a60:	1b c0       	rjmp	.+54     	; 0xa98 <puts+0x4c>
     a62:	8c 01       	movw	r16, r24
     a64:	d0 e0       	ldi	r29, 0x00	; 0
     a66:	c0 e0       	ldi	r28, 0x00	; 0
     a68:	f8 01       	movw	r30, r16
     a6a:	81 91       	ld	r24, Z+
     a6c:	8f 01       	movw	r16, r30
     a6e:	60 91 9d 01 	lds	r22, 0x019D	; 0x80019d <__iob+0x2>
     a72:	70 91 9e 01 	lds	r23, 0x019E	; 0x80019e <__iob+0x3>
     a76:	db 01       	movw	r26, r22
     a78:	18 96       	adiw	r26, 0x08	; 8
     a7a:	ed 91       	ld	r30, X+
     a7c:	fc 91       	ld	r31, X
     a7e:	19 97       	sbiw	r26, 0x09	; 9
     a80:	88 23       	and	r24, r24
     a82:	31 f0       	breq	.+12     	; 0xa90 <puts+0x44>
     a84:	09 95       	icall
     a86:	89 2b       	or	r24, r25
     a88:	79 f3       	breq	.-34     	; 0xa68 <puts+0x1c>
     a8a:	df ef       	ldi	r29, 0xFF	; 255
     a8c:	cf ef       	ldi	r28, 0xFF	; 255
     a8e:	ec cf       	rjmp	.-40     	; 0xa68 <puts+0x1c>
     a90:	8a e0       	ldi	r24, 0x0A	; 10
     a92:	09 95       	icall
     a94:	89 2b       	or	r24, r25
     a96:	19 f0       	breq	.+6      	; 0xa9e <puts+0x52>
     a98:	8f ef       	ldi	r24, 0xFF	; 255
     a9a:	9f ef       	ldi	r25, 0xFF	; 255
     a9c:	02 c0       	rjmp	.+4      	; 0xaa2 <puts+0x56>
     a9e:	8d 2f       	mov	r24, r29
     aa0:	9c 2f       	mov	r25, r28
     aa2:	df 91       	pop	r29
     aa4:	cf 91       	pop	r28
     aa6:	1f 91       	pop	r17
     aa8:	0f 91       	pop	r16
     aaa:	08 95       	ret

00000aac <vfprintf>:
     aac:	ab e0       	ldi	r26, 0x0B	; 11
     aae:	b0 e0       	ldi	r27, 0x00	; 0
     ab0:	ec e5       	ldi	r30, 0x5C	; 92
     ab2:	f5 e0       	ldi	r31, 0x05	; 5
     ab4:	0c 94 3c 08 	jmp	0x1078	; 0x1078 <__prologue_saves__>
     ab8:	6c 01       	movw	r12, r24
     aba:	7b 01       	movw	r14, r22
     abc:	8a 01       	movw	r16, r20
     abe:	fc 01       	movw	r30, r24
     ac0:	17 82       	std	Z+7, r1	; 0x07
     ac2:	16 82       	std	Z+6, r1	; 0x06
     ac4:	83 81       	ldd	r24, Z+3	; 0x03
     ac6:	81 ff       	sbrs	r24, 1
     ac8:	cc c1       	rjmp	.+920    	; 0xe62 <vfprintf+0x3b6>
     aca:	ce 01       	movw	r24, r28
     acc:	01 96       	adiw	r24, 0x01	; 1
     ace:	3c 01       	movw	r6, r24
     ad0:	f6 01       	movw	r30, r12
     ad2:	93 81       	ldd	r25, Z+3	; 0x03
     ad4:	f7 01       	movw	r30, r14
     ad6:	93 fd       	sbrc	r25, 3
     ad8:	85 91       	lpm	r24, Z+
     ada:	93 ff       	sbrs	r25, 3
     adc:	81 91       	ld	r24, Z+
     ade:	7f 01       	movw	r14, r30
     ae0:	88 23       	and	r24, r24
     ae2:	09 f4       	brne	.+2      	; 0xae6 <vfprintf+0x3a>
     ae4:	ba c1       	rjmp	.+884    	; 0xe5a <vfprintf+0x3ae>
     ae6:	85 32       	cpi	r24, 0x25	; 37
     ae8:	39 f4       	brne	.+14     	; 0xaf8 <vfprintf+0x4c>
     aea:	93 fd       	sbrc	r25, 3
     aec:	85 91       	lpm	r24, Z+
     aee:	93 ff       	sbrs	r25, 3
     af0:	81 91       	ld	r24, Z+
     af2:	7f 01       	movw	r14, r30
     af4:	85 32       	cpi	r24, 0x25	; 37
     af6:	29 f4       	brne	.+10     	; 0xb02 <vfprintf+0x56>
     af8:	b6 01       	movw	r22, r12
     afa:	90 e0       	ldi	r25, 0x00	; 0
     afc:	0e 94 70 07 	call	0xee0	; 0xee0 <fputc>
     b00:	e7 cf       	rjmp	.-50     	; 0xad0 <vfprintf+0x24>
     b02:	91 2c       	mov	r9, r1
     b04:	21 2c       	mov	r2, r1
     b06:	31 2c       	mov	r3, r1
     b08:	ff e1       	ldi	r31, 0x1F	; 31
     b0a:	f3 15       	cp	r31, r3
     b0c:	d8 f0       	brcs	.+54     	; 0xb44 <vfprintf+0x98>
     b0e:	8b 32       	cpi	r24, 0x2B	; 43
     b10:	79 f0       	breq	.+30     	; 0xb30 <vfprintf+0x84>
     b12:	38 f4       	brcc	.+14     	; 0xb22 <vfprintf+0x76>
     b14:	80 32       	cpi	r24, 0x20	; 32
     b16:	79 f0       	breq	.+30     	; 0xb36 <vfprintf+0x8a>
     b18:	83 32       	cpi	r24, 0x23	; 35
     b1a:	a1 f4       	brne	.+40     	; 0xb44 <vfprintf+0x98>
     b1c:	23 2d       	mov	r18, r3
     b1e:	20 61       	ori	r18, 0x10	; 16
     b20:	1d c0       	rjmp	.+58     	; 0xb5c <vfprintf+0xb0>
     b22:	8d 32       	cpi	r24, 0x2D	; 45
     b24:	61 f0       	breq	.+24     	; 0xb3e <vfprintf+0x92>
     b26:	80 33       	cpi	r24, 0x30	; 48
     b28:	69 f4       	brne	.+26     	; 0xb44 <vfprintf+0x98>
     b2a:	23 2d       	mov	r18, r3
     b2c:	21 60       	ori	r18, 0x01	; 1
     b2e:	16 c0       	rjmp	.+44     	; 0xb5c <vfprintf+0xb0>
     b30:	83 2d       	mov	r24, r3
     b32:	82 60       	ori	r24, 0x02	; 2
     b34:	38 2e       	mov	r3, r24
     b36:	e3 2d       	mov	r30, r3
     b38:	e4 60       	ori	r30, 0x04	; 4
     b3a:	3e 2e       	mov	r3, r30
     b3c:	2a c0       	rjmp	.+84     	; 0xb92 <vfprintf+0xe6>
     b3e:	f3 2d       	mov	r31, r3
     b40:	f8 60       	ori	r31, 0x08	; 8
     b42:	1d c0       	rjmp	.+58     	; 0xb7e <vfprintf+0xd2>
     b44:	37 fc       	sbrc	r3, 7
     b46:	2d c0       	rjmp	.+90     	; 0xba2 <vfprintf+0xf6>
     b48:	20 ed       	ldi	r18, 0xD0	; 208
     b4a:	28 0f       	add	r18, r24
     b4c:	2a 30       	cpi	r18, 0x0A	; 10
     b4e:	40 f0       	brcs	.+16     	; 0xb60 <vfprintf+0xb4>
     b50:	8e 32       	cpi	r24, 0x2E	; 46
     b52:	b9 f4       	brne	.+46     	; 0xb82 <vfprintf+0xd6>
     b54:	36 fc       	sbrc	r3, 6
     b56:	81 c1       	rjmp	.+770    	; 0xe5a <vfprintf+0x3ae>
     b58:	23 2d       	mov	r18, r3
     b5a:	20 64       	ori	r18, 0x40	; 64
     b5c:	32 2e       	mov	r3, r18
     b5e:	19 c0       	rjmp	.+50     	; 0xb92 <vfprintf+0xe6>
     b60:	36 fe       	sbrs	r3, 6
     b62:	06 c0       	rjmp	.+12     	; 0xb70 <vfprintf+0xc4>
     b64:	8a e0       	ldi	r24, 0x0A	; 10
     b66:	98 9e       	mul	r9, r24
     b68:	20 0d       	add	r18, r0
     b6a:	11 24       	eor	r1, r1
     b6c:	92 2e       	mov	r9, r18
     b6e:	11 c0       	rjmp	.+34     	; 0xb92 <vfprintf+0xe6>
     b70:	ea e0       	ldi	r30, 0x0A	; 10
     b72:	2e 9e       	mul	r2, r30
     b74:	20 0d       	add	r18, r0
     b76:	11 24       	eor	r1, r1
     b78:	22 2e       	mov	r2, r18
     b7a:	f3 2d       	mov	r31, r3
     b7c:	f0 62       	ori	r31, 0x20	; 32
     b7e:	3f 2e       	mov	r3, r31
     b80:	08 c0       	rjmp	.+16     	; 0xb92 <vfprintf+0xe6>
     b82:	8c 36       	cpi	r24, 0x6C	; 108
     b84:	21 f4       	brne	.+8      	; 0xb8e <vfprintf+0xe2>
     b86:	83 2d       	mov	r24, r3
     b88:	80 68       	ori	r24, 0x80	; 128
     b8a:	38 2e       	mov	r3, r24
     b8c:	02 c0       	rjmp	.+4      	; 0xb92 <vfprintf+0xe6>
     b8e:	88 36       	cpi	r24, 0x68	; 104
     b90:	41 f4       	brne	.+16     	; 0xba2 <vfprintf+0xf6>
     b92:	f7 01       	movw	r30, r14
     b94:	93 fd       	sbrc	r25, 3
     b96:	85 91       	lpm	r24, Z+
     b98:	93 ff       	sbrs	r25, 3
     b9a:	81 91       	ld	r24, Z+
     b9c:	7f 01       	movw	r14, r30
     b9e:	81 11       	cpse	r24, r1
     ba0:	b3 cf       	rjmp	.-154    	; 0xb08 <vfprintf+0x5c>
     ba2:	98 2f       	mov	r25, r24
     ba4:	9f 7d       	andi	r25, 0xDF	; 223
     ba6:	95 54       	subi	r25, 0x45	; 69
     ba8:	93 30       	cpi	r25, 0x03	; 3
     baa:	28 f4       	brcc	.+10     	; 0xbb6 <vfprintf+0x10a>
     bac:	0c 5f       	subi	r16, 0xFC	; 252
     bae:	1f 4f       	sbci	r17, 0xFF	; 255
     bb0:	9f e3       	ldi	r25, 0x3F	; 63
     bb2:	99 83       	std	Y+1, r25	; 0x01
     bb4:	0d c0       	rjmp	.+26     	; 0xbd0 <vfprintf+0x124>
     bb6:	83 36       	cpi	r24, 0x63	; 99
     bb8:	31 f0       	breq	.+12     	; 0xbc6 <vfprintf+0x11a>
     bba:	83 37       	cpi	r24, 0x73	; 115
     bbc:	71 f0       	breq	.+28     	; 0xbda <vfprintf+0x12e>
     bbe:	83 35       	cpi	r24, 0x53	; 83
     bc0:	09 f0       	breq	.+2      	; 0xbc4 <vfprintf+0x118>
     bc2:	59 c0       	rjmp	.+178    	; 0xc76 <vfprintf+0x1ca>
     bc4:	21 c0       	rjmp	.+66     	; 0xc08 <vfprintf+0x15c>
     bc6:	f8 01       	movw	r30, r16
     bc8:	80 81       	ld	r24, Z
     bca:	89 83       	std	Y+1, r24	; 0x01
     bcc:	0e 5f       	subi	r16, 0xFE	; 254
     bce:	1f 4f       	sbci	r17, 0xFF	; 255
     bd0:	88 24       	eor	r8, r8
     bd2:	83 94       	inc	r8
     bd4:	91 2c       	mov	r9, r1
     bd6:	53 01       	movw	r10, r6
     bd8:	13 c0       	rjmp	.+38     	; 0xc00 <vfprintf+0x154>
     bda:	28 01       	movw	r4, r16
     bdc:	f2 e0       	ldi	r31, 0x02	; 2
     bde:	4f 0e       	add	r4, r31
     be0:	51 1c       	adc	r5, r1
     be2:	f8 01       	movw	r30, r16
     be4:	a0 80       	ld	r10, Z
     be6:	b1 80       	ldd	r11, Z+1	; 0x01
     be8:	36 fe       	sbrs	r3, 6
     bea:	03 c0       	rjmp	.+6      	; 0xbf2 <vfprintf+0x146>
     bec:	69 2d       	mov	r22, r9
     bee:	70 e0       	ldi	r23, 0x00	; 0
     bf0:	02 c0       	rjmp	.+4      	; 0xbf6 <vfprintf+0x14a>
     bf2:	6f ef       	ldi	r22, 0xFF	; 255
     bf4:	7f ef       	ldi	r23, 0xFF	; 255
     bf6:	c5 01       	movw	r24, r10
     bf8:	0e 94 65 07 	call	0xeca	; 0xeca <strnlen>
     bfc:	4c 01       	movw	r8, r24
     bfe:	82 01       	movw	r16, r4
     c00:	f3 2d       	mov	r31, r3
     c02:	ff 77       	andi	r31, 0x7F	; 127
     c04:	3f 2e       	mov	r3, r31
     c06:	16 c0       	rjmp	.+44     	; 0xc34 <vfprintf+0x188>
     c08:	28 01       	movw	r4, r16
     c0a:	22 e0       	ldi	r18, 0x02	; 2
     c0c:	42 0e       	add	r4, r18
     c0e:	51 1c       	adc	r5, r1
     c10:	f8 01       	movw	r30, r16
     c12:	a0 80       	ld	r10, Z
     c14:	b1 80       	ldd	r11, Z+1	; 0x01
     c16:	36 fe       	sbrs	r3, 6
     c18:	03 c0       	rjmp	.+6      	; 0xc20 <vfprintf+0x174>
     c1a:	69 2d       	mov	r22, r9
     c1c:	70 e0       	ldi	r23, 0x00	; 0
     c1e:	02 c0       	rjmp	.+4      	; 0xc24 <vfprintf+0x178>
     c20:	6f ef       	ldi	r22, 0xFF	; 255
     c22:	7f ef       	ldi	r23, 0xFF	; 255
     c24:	c5 01       	movw	r24, r10
     c26:	0e 94 53 07 	call	0xea6	; 0xea6 <strnlen_P>
     c2a:	4c 01       	movw	r8, r24
     c2c:	f3 2d       	mov	r31, r3
     c2e:	f0 68       	ori	r31, 0x80	; 128
     c30:	3f 2e       	mov	r3, r31
     c32:	82 01       	movw	r16, r4
     c34:	33 fc       	sbrc	r3, 3
     c36:	1b c0       	rjmp	.+54     	; 0xc6e <vfprintf+0x1c2>
     c38:	82 2d       	mov	r24, r2
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	88 16       	cp	r8, r24
     c3e:	99 06       	cpc	r9, r25
     c40:	b0 f4       	brcc	.+44     	; 0xc6e <vfprintf+0x1c2>
     c42:	b6 01       	movw	r22, r12
     c44:	80 e2       	ldi	r24, 0x20	; 32
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	0e 94 70 07 	call	0xee0	; 0xee0 <fputc>
     c4c:	2a 94       	dec	r2
     c4e:	f4 cf       	rjmp	.-24     	; 0xc38 <vfprintf+0x18c>
     c50:	f5 01       	movw	r30, r10
     c52:	37 fc       	sbrc	r3, 7
     c54:	85 91       	lpm	r24, Z+
     c56:	37 fe       	sbrs	r3, 7
     c58:	81 91       	ld	r24, Z+
     c5a:	5f 01       	movw	r10, r30
     c5c:	b6 01       	movw	r22, r12
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	0e 94 70 07 	call	0xee0	; 0xee0 <fputc>
     c64:	21 10       	cpse	r2, r1
     c66:	2a 94       	dec	r2
     c68:	21 e0       	ldi	r18, 0x01	; 1
     c6a:	82 1a       	sub	r8, r18
     c6c:	91 08       	sbc	r9, r1
     c6e:	81 14       	cp	r8, r1
     c70:	91 04       	cpc	r9, r1
     c72:	71 f7       	brne	.-36     	; 0xc50 <vfprintf+0x1a4>
     c74:	e8 c0       	rjmp	.+464    	; 0xe46 <vfprintf+0x39a>
     c76:	84 36       	cpi	r24, 0x64	; 100
     c78:	11 f0       	breq	.+4      	; 0xc7e <vfprintf+0x1d2>
     c7a:	89 36       	cpi	r24, 0x69	; 105
     c7c:	41 f5       	brne	.+80     	; 0xcce <vfprintf+0x222>
     c7e:	f8 01       	movw	r30, r16
     c80:	37 fe       	sbrs	r3, 7
     c82:	07 c0       	rjmp	.+14     	; 0xc92 <vfprintf+0x1e6>
     c84:	60 81       	ld	r22, Z
     c86:	71 81       	ldd	r23, Z+1	; 0x01
     c88:	82 81       	ldd	r24, Z+2	; 0x02
     c8a:	93 81       	ldd	r25, Z+3	; 0x03
     c8c:	0c 5f       	subi	r16, 0xFC	; 252
     c8e:	1f 4f       	sbci	r17, 0xFF	; 255
     c90:	08 c0       	rjmp	.+16     	; 0xca2 <vfprintf+0x1f6>
     c92:	60 81       	ld	r22, Z
     c94:	71 81       	ldd	r23, Z+1	; 0x01
     c96:	07 2e       	mov	r0, r23
     c98:	00 0c       	add	r0, r0
     c9a:	88 0b       	sbc	r24, r24
     c9c:	99 0b       	sbc	r25, r25
     c9e:	0e 5f       	subi	r16, 0xFE	; 254
     ca0:	1f 4f       	sbci	r17, 0xFF	; 255
     ca2:	f3 2d       	mov	r31, r3
     ca4:	ff 76       	andi	r31, 0x6F	; 111
     ca6:	3f 2e       	mov	r3, r31
     ca8:	97 ff       	sbrs	r25, 7
     caa:	09 c0       	rjmp	.+18     	; 0xcbe <vfprintf+0x212>
     cac:	90 95       	com	r25
     cae:	80 95       	com	r24
     cb0:	70 95       	com	r23
     cb2:	61 95       	neg	r22
     cb4:	7f 4f       	sbci	r23, 0xFF	; 255
     cb6:	8f 4f       	sbci	r24, 0xFF	; 255
     cb8:	9f 4f       	sbci	r25, 0xFF	; 255
     cba:	f0 68       	ori	r31, 0x80	; 128
     cbc:	3f 2e       	mov	r3, r31
     cbe:	2a e0       	ldi	r18, 0x0A	; 10
     cc0:	30 e0       	ldi	r19, 0x00	; 0
     cc2:	a3 01       	movw	r20, r6
     cc4:	0e 94 ac 07 	call	0xf58	; 0xf58 <__ultoa_invert>
     cc8:	88 2e       	mov	r8, r24
     cca:	86 18       	sub	r8, r6
     ccc:	45 c0       	rjmp	.+138    	; 0xd58 <vfprintf+0x2ac>
     cce:	85 37       	cpi	r24, 0x75	; 117
     cd0:	31 f4       	brne	.+12     	; 0xcde <vfprintf+0x232>
     cd2:	23 2d       	mov	r18, r3
     cd4:	2f 7e       	andi	r18, 0xEF	; 239
     cd6:	b2 2e       	mov	r11, r18
     cd8:	2a e0       	ldi	r18, 0x0A	; 10
     cda:	30 e0       	ldi	r19, 0x00	; 0
     cdc:	25 c0       	rjmp	.+74     	; 0xd28 <vfprintf+0x27c>
     cde:	93 2d       	mov	r25, r3
     ce0:	99 7f       	andi	r25, 0xF9	; 249
     ce2:	b9 2e       	mov	r11, r25
     ce4:	8f 36       	cpi	r24, 0x6F	; 111
     ce6:	c1 f0       	breq	.+48     	; 0xd18 <vfprintf+0x26c>
     ce8:	18 f4       	brcc	.+6      	; 0xcf0 <vfprintf+0x244>
     cea:	88 35       	cpi	r24, 0x58	; 88
     cec:	79 f0       	breq	.+30     	; 0xd0c <vfprintf+0x260>
     cee:	b5 c0       	rjmp	.+362    	; 0xe5a <vfprintf+0x3ae>
     cf0:	80 37       	cpi	r24, 0x70	; 112
     cf2:	19 f0       	breq	.+6      	; 0xcfa <vfprintf+0x24e>
     cf4:	88 37       	cpi	r24, 0x78	; 120
     cf6:	21 f0       	breq	.+8      	; 0xd00 <vfprintf+0x254>
     cf8:	b0 c0       	rjmp	.+352    	; 0xe5a <vfprintf+0x3ae>
     cfa:	e9 2f       	mov	r30, r25
     cfc:	e0 61       	ori	r30, 0x10	; 16
     cfe:	be 2e       	mov	r11, r30
     d00:	b4 fe       	sbrs	r11, 4
     d02:	0d c0       	rjmp	.+26     	; 0xd1e <vfprintf+0x272>
     d04:	fb 2d       	mov	r31, r11
     d06:	f4 60       	ori	r31, 0x04	; 4
     d08:	bf 2e       	mov	r11, r31
     d0a:	09 c0       	rjmp	.+18     	; 0xd1e <vfprintf+0x272>
     d0c:	34 fe       	sbrs	r3, 4
     d0e:	0a c0       	rjmp	.+20     	; 0xd24 <vfprintf+0x278>
     d10:	29 2f       	mov	r18, r25
     d12:	26 60       	ori	r18, 0x06	; 6
     d14:	b2 2e       	mov	r11, r18
     d16:	06 c0       	rjmp	.+12     	; 0xd24 <vfprintf+0x278>
     d18:	28 e0       	ldi	r18, 0x08	; 8
     d1a:	30 e0       	ldi	r19, 0x00	; 0
     d1c:	05 c0       	rjmp	.+10     	; 0xd28 <vfprintf+0x27c>
     d1e:	20 e1       	ldi	r18, 0x10	; 16
     d20:	30 e0       	ldi	r19, 0x00	; 0
     d22:	02 c0       	rjmp	.+4      	; 0xd28 <vfprintf+0x27c>
     d24:	20 e1       	ldi	r18, 0x10	; 16
     d26:	32 e0       	ldi	r19, 0x02	; 2
     d28:	f8 01       	movw	r30, r16
     d2a:	b7 fe       	sbrs	r11, 7
     d2c:	07 c0       	rjmp	.+14     	; 0xd3c <vfprintf+0x290>
     d2e:	60 81       	ld	r22, Z
     d30:	71 81       	ldd	r23, Z+1	; 0x01
     d32:	82 81       	ldd	r24, Z+2	; 0x02
     d34:	93 81       	ldd	r25, Z+3	; 0x03
     d36:	0c 5f       	subi	r16, 0xFC	; 252
     d38:	1f 4f       	sbci	r17, 0xFF	; 255
     d3a:	06 c0       	rjmp	.+12     	; 0xd48 <vfprintf+0x29c>
     d3c:	60 81       	ld	r22, Z
     d3e:	71 81       	ldd	r23, Z+1	; 0x01
     d40:	80 e0       	ldi	r24, 0x00	; 0
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	0e 5f       	subi	r16, 0xFE	; 254
     d46:	1f 4f       	sbci	r17, 0xFF	; 255
     d48:	a3 01       	movw	r20, r6
     d4a:	0e 94 ac 07 	call	0xf58	; 0xf58 <__ultoa_invert>
     d4e:	88 2e       	mov	r8, r24
     d50:	86 18       	sub	r8, r6
     d52:	fb 2d       	mov	r31, r11
     d54:	ff 77       	andi	r31, 0x7F	; 127
     d56:	3f 2e       	mov	r3, r31
     d58:	36 fe       	sbrs	r3, 6
     d5a:	0d c0       	rjmp	.+26     	; 0xd76 <vfprintf+0x2ca>
     d5c:	23 2d       	mov	r18, r3
     d5e:	2e 7f       	andi	r18, 0xFE	; 254
     d60:	a2 2e       	mov	r10, r18
     d62:	89 14       	cp	r8, r9
     d64:	58 f4       	brcc	.+22     	; 0xd7c <vfprintf+0x2d0>
     d66:	34 fe       	sbrs	r3, 4
     d68:	0b c0       	rjmp	.+22     	; 0xd80 <vfprintf+0x2d4>
     d6a:	32 fc       	sbrc	r3, 2
     d6c:	09 c0       	rjmp	.+18     	; 0xd80 <vfprintf+0x2d4>
     d6e:	83 2d       	mov	r24, r3
     d70:	8e 7e       	andi	r24, 0xEE	; 238
     d72:	a8 2e       	mov	r10, r24
     d74:	05 c0       	rjmp	.+10     	; 0xd80 <vfprintf+0x2d4>
     d76:	b8 2c       	mov	r11, r8
     d78:	a3 2c       	mov	r10, r3
     d7a:	03 c0       	rjmp	.+6      	; 0xd82 <vfprintf+0x2d6>
     d7c:	b8 2c       	mov	r11, r8
     d7e:	01 c0       	rjmp	.+2      	; 0xd82 <vfprintf+0x2d6>
     d80:	b9 2c       	mov	r11, r9
     d82:	a4 fe       	sbrs	r10, 4
     d84:	0f c0       	rjmp	.+30     	; 0xda4 <vfprintf+0x2f8>
     d86:	fe 01       	movw	r30, r28
     d88:	e8 0d       	add	r30, r8
     d8a:	f1 1d       	adc	r31, r1
     d8c:	80 81       	ld	r24, Z
     d8e:	80 33       	cpi	r24, 0x30	; 48
     d90:	21 f4       	brne	.+8      	; 0xd9a <vfprintf+0x2ee>
     d92:	9a 2d       	mov	r25, r10
     d94:	99 7e       	andi	r25, 0xE9	; 233
     d96:	a9 2e       	mov	r10, r25
     d98:	09 c0       	rjmp	.+18     	; 0xdac <vfprintf+0x300>
     d9a:	a2 fe       	sbrs	r10, 2
     d9c:	06 c0       	rjmp	.+12     	; 0xdaa <vfprintf+0x2fe>
     d9e:	b3 94       	inc	r11
     da0:	b3 94       	inc	r11
     da2:	04 c0       	rjmp	.+8      	; 0xdac <vfprintf+0x300>
     da4:	8a 2d       	mov	r24, r10
     da6:	86 78       	andi	r24, 0x86	; 134
     da8:	09 f0       	breq	.+2      	; 0xdac <vfprintf+0x300>
     daa:	b3 94       	inc	r11
     dac:	a3 fc       	sbrc	r10, 3
     dae:	11 c0       	rjmp	.+34     	; 0xdd2 <vfprintf+0x326>
     db0:	a0 fe       	sbrs	r10, 0
     db2:	06 c0       	rjmp	.+12     	; 0xdc0 <vfprintf+0x314>
     db4:	b2 14       	cp	r11, r2
     db6:	88 f4       	brcc	.+34     	; 0xdda <vfprintf+0x32e>
     db8:	28 0c       	add	r2, r8
     dba:	92 2c       	mov	r9, r2
     dbc:	9b 18       	sub	r9, r11
     dbe:	0e c0       	rjmp	.+28     	; 0xddc <vfprintf+0x330>
     dc0:	b2 14       	cp	r11, r2
     dc2:	60 f4       	brcc	.+24     	; 0xddc <vfprintf+0x330>
     dc4:	b6 01       	movw	r22, r12
     dc6:	80 e2       	ldi	r24, 0x20	; 32
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	0e 94 70 07 	call	0xee0	; 0xee0 <fputc>
     dce:	b3 94       	inc	r11
     dd0:	f7 cf       	rjmp	.-18     	; 0xdc0 <vfprintf+0x314>
     dd2:	b2 14       	cp	r11, r2
     dd4:	18 f4       	brcc	.+6      	; 0xddc <vfprintf+0x330>
     dd6:	2b 18       	sub	r2, r11
     dd8:	02 c0       	rjmp	.+4      	; 0xdde <vfprintf+0x332>
     dda:	98 2c       	mov	r9, r8
     ddc:	21 2c       	mov	r2, r1
     dde:	a4 fe       	sbrs	r10, 4
     de0:	10 c0       	rjmp	.+32     	; 0xe02 <vfprintf+0x356>
     de2:	b6 01       	movw	r22, r12
     de4:	80 e3       	ldi	r24, 0x30	; 48
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	0e 94 70 07 	call	0xee0	; 0xee0 <fputc>
     dec:	a2 fe       	sbrs	r10, 2
     dee:	17 c0       	rjmp	.+46     	; 0xe1e <vfprintf+0x372>
     df0:	a1 fc       	sbrc	r10, 1
     df2:	03 c0       	rjmp	.+6      	; 0xdfa <vfprintf+0x34e>
     df4:	88 e7       	ldi	r24, 0x78	; 120
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	02 c0       	rjmp	.+4      	; 0xdfe <vfprintf+0x352>
     dfa:	88 e5       	ldi	r24, 0x58	; 88
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	b6 01       	movw	r22, r12
     e00:	0c c0       	rjmp	.+24     	; 0xe1a <vfprintf+0x36e>
     e02:	8a 2d       	mov	r24, r10
     e04:	86 78       	andi	r24, 0x86	; 134
     e06:	59 f0       	breq	.+22     	; 0xe1e <vfprintf+0x372>
     e08:	a1 fe       	sbrs	r10, 1
     e0a:	02 c0       	rjmp	.+4      	; 0xe10 <vfprintf+0x364>
     e0c:	8b e2       	ldi	r24, 0x2B	; 43
     e0e:	01 c0       	rjmp	.+2      	; 0xe12 <vfprintf+0x366>
     e10:	80 e2       	ldi	r24, 0x20	; 32
     e12:	a7 fc       	sbrc	r10, 7
     e14:	8d e2       	ldi	r24, 0x2D	; 45
     e16:	b6 01       	movw	r22, r12
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	0e 94 70 07 	call	0xee0	; 0xee0 <fputc>
     e1e:	89 14       	cp	r8, r9
     e20:	38 f4       	brcc	.+14     	; 0xe30 <vfprintf+0x384>
     e22:	b6 01       	movw	r22, r12
     e24:	80 e3       	ldi	r24, 0x30	; 48
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	0e 94 70 07 	call	0xee0	; 0xee0 <fputc>
     e2c:	9a 94       	dec	r9
     e2e:	f7 cf       	rjmp	.-18     	; 0xe1e <vfprintf+0x372>
     e30:	8a 94       	dec	r8
     e32:	f3 01       	movw	r30, r6
     e34:	e8 0d       	add	r30, r8
     e36:	f1 1d       	adc	r31, r1
     e38:	80 81       	ld	r24, Z
     e3a:	b6 01       	movw	r22, r12
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	0e 94 70 07 	call	0xee0	; 0xee0 <fputc>
     e42:	81 10       	cpse	r8, r1
     e44:	f5 cf       	rjmp	.-22     	; 0xe30 <vfprintf+0x384>
     e46:	22 20       	and	r2, r2
     e48:	09 f4       	brne	.+2      	; 0xe4c <vfprintf+0x3a0>
     e4a:	42 ce       	rjmp	.-892    	; 0xad0 <vfprintf+0x24>
     e4c:	b6 01       	movw	r22, r12
     e4e:	80 e2       	ldi	r24, 0x20	; 32
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	0e 94 70 07 	call	0xee0	; 0xee0 <fputc>
     e56:	2a 94       	dec	r2
     e58:	f6 cf       	rjmp	.-20     	; 0xe46 <vfprintf+0x39a>
     e5a:	f6 01       	movw	r30, r12
     e5c:	86 81       	ldd	r24, Z+6	; 0x06
     e5e:	97 81       	ldd	r25, Z+7	; 0x07
     e60:	02 c0       	rjmp	.+4      	; 0xe66 <vfprintf+0x3ba>
     e62:	8f ef       	ldi	r24, 0xFF	; 255
     e64:	9f ef       	ldi	r25, 0xFF	; 255
     e66:	2b 96       	adiw	r28, 0x0b	; 11
     e68:	e2 e1       	ldi	r30, 0x12	; 18
     e6a:	0c 94 58 08 	jmp	0x10b0	; 0x10b0 <__epilogue_restores__>

00000e6e <calloc>:
     e6e:	0f 93       	push	r16
     e70:	1f 93       	push	r17
     e72:	cf 93       	push	r28
     e74:	df 93       	push	r29
     e76:	86 9f       	mul	r24, r22
     e78:	80 01       	movw	r16, r0
     e7a:	87 9f       	mul	r24, r23
     e7c:	10 0d       	add	r17, r0
     e7e:	96 9f       	mul	r25, r22
     e80:	10 0d       	add	r17, r0
     e82:	11 24       	eor	r1, r1
     e84:	c8 01       	movw	r24, r16
     e86:	0e 94 41 03 	call	0x682	; 0x682 <malloc>
     e8a:	ec 01       	movw	r28, r24
     e8c:	00 97       	sbiw	r24, 0x00	; 0
     e8e:	29 f0       	breq	.+10     	; 0xe9a <calloc+0x2c>
     e90:	a8 01       	movw	r20, r16
     e92:	60 e0       	ldi	r22, 0x00	; 0
     e94:	70 e0       	ldi	r23, 0x00	; 0
     e96:	0e 94 5e 07 	call	0xebc	; 0xebc <memset>
     e9a:	ce 01       	movw	r24, r28
     e9c:	df 91       	pop	r29
     e9e:	cf 91       	pop	r28
     ea0:	1f 91       	pop	r17
     ea2:	0f 91       	pop	r16
     ea4:	08 95       	ret

00000ea6 <strnlen_P>:
     ea6:	fc 01       	movw	r30, r24
     ea8:	05 90       	lpm	r0, Z+
     eaa:	61 50       	subi	r22, 0x01	; 1
     eac:	70 40       	sbci	r23, 0x00	; 0
     eae:	01 10       	cpse	r0, r1
     eb0:	d8 f7       	brcc	.-10     	; 0xea8 <strnlen_P+0x2>
     eb2:	80 95       	com	r24
     eb4:	90 95       	com	r25
     eb6:	8e 0f       	add	r24, r30
     eb8:	9f 1f       	adc	r25, r31
     eba:	08 95       	ret

00000ebc <memset>:
     ebc:	dc 01       	movw	r26, r24
     ebe:	01 c0       	rjmp	.+2      	; 0xec2 <memset+0x6>
     ec0:	6d 93       	st	X+, r22
     ec2:	41 50       	subi	r20, 0x01	; 1
     ec4:	50 40       	sbci	r21, 0x00	; 0
     ec6:	e0 f7       	brcc	.-8      	; 0xec0 <memset+0x4>
     ec8:	08 95       	ret

00000eca <strnlen>:
     eca:	fc 01       	movw	r30, r24
     ecc:	61 50       	subi	r22, 0x01	; 1
     ece:	70 40       	sbci	r23, 0x00	; 0
     ed0:	01 90       	ld	r0, Z+
     ed2:	01 10       	cpse	r0, r1
     ed4:	d8 f7       	brcc	.-10     	; 0xecc <strnlen+0x2>
     ed6:	80 95       	com	r24
     ed8:	90 95       	com	r25
     eda:	8e 0f       	add	r24, r30
     edc:	9f 1f       	adc	r25, r31
     ede:	08 95       	ret

00000ee0 <fputc>:
     ee0:	0f 93       	push	r16
     ee2:	1f 93       	push	r17
     ee4:	cf 93       	push	r28
     ee6:	df 93       	push	r29
     ee8:	fb 01       	movw	r30, r22
     eea:	23 81       	ldd	r18, Z+3	; 0x03
     eec:	21 fd       	sbrc	r18, 1
     eee:	03 c0       	rjmp	.+6      	; 0xef6 <fputc+0x16>
     ef0:	8f ef       	ldi	r24, 0xFF	; 255
     ef2:	9f ef       	ldi	r25, 0xFF	; 255
     ef4:	2c c0       	rjmp	.+88     	; 0xf4e <fputc+0x6e>
     ef6:	22 ff       	sbrs	r18, 2
     ef8:	16 c0       	rjmp	.+44     	; 0xf26 <fputc+0x46>
     efa:	46 81       	ldd	r20, Z+6	; 0x06
     efc:	57 81       	ldd	r21, Z+7	; 0x07
     efe:	24 81       	ldd	r18, Z+4	; 0x04
     f00:	35 81       	ldd	r19, Z+5	; 0x05
     f02:	42 17       	cp	r20, r18
     f04:	53 07       	cpc	r21, r19
     f06:	44 f4       	brge	.+16     	; 0xf18 <fputc+0x38>
     f08:	a0 81       	ld	r26, Z
     f0a:	b1 81       	ldd	r27, Z+1	; 0x01
     f0c:	9d 01       	movw	r18, r26
     f0e:	2f 5f       	subi	r18, 0xFF	; 255
     f10:	3f 4f       	sbci	r19, 0xFF	; 255
     f12:	31 83       	std	Z+1, r19	; 0x01
     f14:	20 83       	st	Z, r18
     f16:	8c 93       	st	X, r24
     f18:	26 81       	ldd	r18, Z+6	; 0x06
     f1a:	37 81       	ldd	r19, Z+7	; 0x07
     f1c:	2f 5f       	subi	r18, 0xFF	; 255
     f1e:	3f 4f       	sbci	r19, 0xFF	; 255
     f20:	37 83       	std	Z+7, r19	; 0x07
     f22:	26 83       	std	Z+6, r18	; 0x06
     f24:	14 c0       	rjmp	.+40     	; 0xf4e <fputc+0x6e>
     f26:	8b 01       	movw	r16, r22
     f28:	ec 01       	movw	r28, r24
     f2a:	fb 01       	movw	r30, r22
     f2c:	00 84       	ldd	r0, Z+8	; 0x08
     f2e:	f1 85       	ldd	r31, Z+9	; 0x09
     f30:	e0 2d       	mov	r30, r0
     f32:	09 95       	icall
     f34:	89 2b       	or	r24, r25
     f36:	e1 f6       	brne	.-72     	; 0xef0 <fputc+0x10>
     f38:	d8 01       	movw	r26, r16
     f3a:	16 96       	adiw	r26, 0x06	; 6
     f3c:	8d 91       	ld	r24, X+
     f3e:	9c 91       	ld	r25, X
     f40:	17 97       	sbiw	r26, 0x07	; 7
     f42:	01 96       	adiw	r24, 0x01	; 1
     f44:	17 96       	adiw	r26, 0x07	; 7
     f46:	9c 93       	st	X, r25
     f48:	8e 93       	st	-X, r24
     f4a:	16 97       	sbiw	r26, 0x06	; 6
     f4c:	ce 01       	movw	r24, r28
     f4e:	df 91       	pop	r29
     f50:	cf 91       	pop	r28
     f52:	1f 91       	pop	r17
     f54:	0f 91       	pop	r16
     f56:	08 95       	ret

00000f58 <__ultoa_invert>:
     f58:	fa 01       	movw	r30, r20
     f5a:	aa 27       	eor	r26, r26
     f5c:	28 30       	cpi	r18, 0x08	; 8
     f5e:	51 f1       	breq	.+84     	; 0xfb4 <__ultoa_invert+0x5c>
     f60:	20 31       	cpi	r18, 0x10	; 16
     f62:	81 f1       	breq	.+96     	; 0xfc4 <__ultoa_invert+0x6c>
     f64:	e8 94       	clt
     f66:	6f 93       	push	r22
     f68:	6e 7f       	andi	r22, 0xFE	; 254
     f6a:	6e 5f       	subi	r22, 0xFE	; 254
     f6c:	7f 4f       	sbci	r23, 0xFF	; 255
     f6e:	8f 4f       	sbci	r24, 0xFF	; 255
     f70:	9f 4f       	sbci	r25, 0xFF	; 255
     f72:	af 4f       	sbci	r26, 0xFF	; 255
     f74:	b1 e0       	ldi	r27, 0x01	; 1
     f76:	3e d0       	rcall	.+124    	; 0xff4 <__ultoa_invert+0x9c>
     f78:	b4 e0       	ldi	r27, 0x04	; 4
     f7a:	3c d0       	rcall	.+120    	; 0xff4 <__ultoa_invert+0x9c>
     f7c:	67 0f       	add	r22, r23
     f7e:	78 1f       	adc	r23, r24
     f80:	89 1f       	adc	r24, r25
     f82:	9a 1f       	adc	r25, r26
     f84:	a1 1d       	adc	r26, r1
     f86:	68 0f       	add	r22, r24
     f88:	79 1f       	adc	r23, r25
     f8a:	8a 1f       	adc	r24, r26
     f8c:	91 1d       	adc	r25, r1
     f8e:	a1 1d       	adc	r26, r1
     f90:	6a 0f       	add	r22, r26
     f92:	71 1d       	adc	r23, r1
     f94:	81 1d       	adc	r24, r1
     f96:	91 1d       	adc	r25, r1
     f98:	a1 1d       	adc	r26, r1
     f9a:	20 d0       	rcall	.+64     	; 0xfdc <__ultoa_invert+0x84>
     f9c:	09 f4       	brne	.+2      	; 0xfa0 <__ultoa_invert+0x48>
     f9e:	68 94       	set
     fa0:	3f 91       	pop	r19
     fa2:	2a e0       	ldi	r18, 0x0A	; 10
     fa4:	26 9f       	mul	r18, r22
     fa6:	11 24       	eor	r1, r1
     fa8:	30 19       	sub	r19, r0
     faa:	30 5d       	subi	r19, 0xD0	; 208
     fac:	31 93       	st	Z+, r19
     fae:	de f6       	brtc	.-74     	; 0xf66 <__ultoa_invert+0xe>
     fb0:	cf 01       	movw	r24, r30
     fb2:	08 95       	ret
     fb4:	46 2f       	mov	r20, r22
     fb6:	47 70       	andi	r20, 0x07	; 7
     fb8:	40 5d       	subi	r20, 0xD0	; 208
     fba:	41 93       	st	Z+, r20
     fbc:	b3 e0       	ldi	r27, 0x03	; 3
     fbe:	0f d0       	rcall	.+30     	; 0xfde <__ultoa_invert+0x86>
     fc0:	c9 f7       	brne	.-14     	; 0xfb4 <__ultoa_invert+0x5c>
     fc2:	f6 cf       	rjmp	.-20     	; 0xfb0 <__ultoa_invert+0x58>
     fc4:	46 2f       	mov	r20, r22
     fc6:	4f 70       	andi	r20, 0x0F	; 15
     fc8:	40 5d       	subi	r20, 0xD0	; 208
     fca:	4a 33       	cpi	r20, 0x3A	; 58
     fcc:	18 f0       	brcs	.+6      	; 0xfd4 <__ultoa_invert+0x7c>
     fce:	49 5d       	subi	r20, 0xD9	; 217
     fd0:	31 fd       	sbrc	r19, 1
     fd2:	40 52       	subi	r20, 0x20	; 32
     fd4:	41 93       	st	Z+, r20
     fd6:	02 d0       	rcall	.+4      	; 0xfdc <__ultoa_invert+0x84>
     fd8:	a9 f7       	brne	.-22     	; 0xfc4 <__ultoa_invert+0x6c>
     fda:	ea cf       	rjmp	.-44     	; 0xfb0 <__ultoa_invert+0x58>
     fdc:	b4 e0       	ldi	r27, 0x04	; 4
     fde:	a6 95       	lsr	r26
     fe0:	97 95       	ror	r25
     fe2:	87 95       	ror	r24
     fe4:	77 95       	ror	r23
     fe6:	67 95       	ror	r22
     fe8:	ba 95       	dec	r27
     fea:	c9 f7       	brne	.-14     	; 0xfde <__ultoa_invert+0x86>
     fec:	00 97       	sbiw	r24, 0x00	; 0
     fee:	61 05       	cpc	r22, r1
     ff0:	71 05       	cpc	r23, r1
     ff2:	08 95       	ret
     ff4:	9b 01       	movw	r18, r22
     ff6:	ac 01       	movw	r20, r24
     ff8:	0a 2e       	mov	r0, r26
     ffa:	06 94       	lsr	r0
     ffc:	57 95       	ror	r21
     ffe:	47 95       	ror	r20
    1000:	37 95       	ror	r19
    1002:	27 95       	ror	r18
    1004:	ba 95       	dec	r27
    1006:	c9 f7       	brne	.-14     	; 0xffa <__ultoa_invert+0xa2>
    1008:	62 0f       	add	r22, r18
    100a:	73 1f       	adc	r23, r19
    100c:	84 1f       	adc	r24, r20
    100e:	95 1f       	adc	r25, r21
    1010:	a0 1d       	adc	r26, r0
    1012:	08 95       	ret

00001014 <__divmodsi4>:
    1014:	05 2e       	mov	r0, r21
    1016:	97 fb       	bst	r25, 7
    1018:	1e f4       	brtc	.+6      	; 0x1020 <__divmodsi4+0xc>
    101a:	00 94       	com	r0
    101c:	0e 94 21 08 	call	0x1042	; 0x1042 <__negsi2>
    1020:	57 fd       	sbrc	r21, 7
    1022:	07 d0       	rcall	.+14     	; 0x1032 <__divmodsi4_neg2>
    1024:	0e 94 73 08 	call	0x10e6	; 0x10e6 <__udivmodsi4>
    1028:	07 fc       	sbrc	r0, 7
    102a:	03 d0       	rcall	.+6      	; 0x1032 <__divmodsi4_neg2>
    102c:	4e f4       	brtc	.+18     	; 0x1040 <__divmodsi4_exit>
    102e:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__negsi2>

00001032 <__divmodsi4_neg2>:
    1032:	50 95       	com	r21
    1034:	40 95       	com	r20
    1036:	30 95       	com	r19
    1038:	21 95       	neg	r18
    103a:	3f 4f       	sbci	r19, 0xFF	; 255
    103c:	4f 4f       	sbci	r20, 0xFF	; 255
    103e:	5f 4f       	sbci	r21, 0xFF	; 255

00001040 <__divmodsi4_exit>:
    1040:	08 95       	ret

00001042 <__negsi2>:
    1042:	90 95       	com	r25
    1044:	80 95       	com	r24
    1046:	70 95       	com	r23
    1048:	61 95       	neg	r22
    104a:	7f 4f       	sbci	r23, 0xFF	; 255
    104c:	8f 4f       	sbci	r24, 0xFF	; 255
    104e:	9f 4f       	sbci	r25, 0xFF	; 255
    1050:	08 95       	ret

00001052 <__muluhisi3>:
    1052:	0e 94 95 08 	call	0x112a	; 0x112a <__umulhisi3>
    1056:	a5 9f       	mul	r26, r21
    1058:	90 0d       	add	r25, r0
    105a:	b4 9f       	mul	r27, r20
    105c:	90 0d       	add	r25, r0
    105e:	a4 9f       	mul	r26, r20
    1060:	80 0d       	add	r24, r0
    1062:	91 1d       	adc	r25, r1
    1064:	11 24       	eor	r1, r1
    1066:	08 95       	ret

00001068 <__mulshisi3>:
    1068:	b7 ff       	sbrs	r27, 7
    106a:	0c 94 29 08 	jmp	0x1052	; 0x1052 <__muluhisi3>

0000106e <__mulohisi3>:
    106e:	0e 94 29 08 	call	0x1052	; 0x1052 <__muluhisi3>
    1072:	82 1b       	sub	r24, r18
    1074:	93 0b       	sbc	r25, r19
    1076:	08 95       	ret

00001078 <__prologue_saves__>:
    1078:	2f 92       	push	r2
    107a:	3f 92       	push	r3
    107c:	4f 92       	push	r4
    107e:	5f 92       	push	r5
    1080:	6f 92       	push	r6
    1082:	7f 92       	push	r7
    1084:	8f 92       	push	r8
    1086:	9f 92       	push	r9
    1088:	af 92       	push	r10
    108a:	bf 92       	push	r11
    108c:	cf 92       	push	r12
    108e:	df 92       	push	r13
    1090:	ef 92       	push	r14
    1092:	ff 92       	push	r15
    1094:	0f 93       	push	r16
    1096:	1f 93       	push	r17
    1098:	cf 93       	push	r28
    109a:	df 93       	push	r29
    109c:	cd b7       	in	r28, 0x3d	; 61
    109e:	de b7       	in	r29, 0x3e	; 62
    10a0:	ca 1b       	sub	r28, r26
    10a2:	db 0b       	sbc	r29, r27
    10a4:	0f b6       	in	r0, 0x3f	; 63
    10a6:	f8 94       	cli
    10a8:	de bf       	out	0x3e, r29	; 62
    10aa:	0f be       	out	0x3f, r0	; 63
    10ac:	cd bf       	out	0x3d, r28	; 61
    10ae:	09 94       	ijmp

000010b0 <__epilogue_restores__>:
    10b0:	2a 88       	ldd	r2, Y+18	; 0x12
    10b2:	39 88       	ldd	r3, Y+17	; 0x11
    10b4:	48 88       	ldd	r4, Y+16	; 0x10
    10b6:	5f 84       	ldd	r5, Y+15	; 0x0f
    10b8:	6e 84       	ldd	r6, Y+14	; 0x0e
    10ba:	7d 84       	ldd	r7, Y+13	; 0x0d
    10bc:	8c 84       	ldd	r8, Y+12	; 0x0c
    10be:	9b 84       	ldd	r9, Y+11	; 0x0b
    10c0:	aa 84       	ldd	r10, Y+10	; 0x0a
    10c2:	b9 84       	ldd	r11, Y+9	; 0x09
    10c4:	c8 84       	ldd	r12, Y+8	; 0x08
    10c6:	df 80       	ldd	r13, Y+7	; 0x07
    10c8:	ee 80       	ldd	r14, Y+6	; 0x06
    10ca:	fd 80       	ldd	r15, Y+5	; 0x05
    10cc:	0c 81       	ldd	r16, Y+4	; 0x04
    10ce:	1b 81       	ldd	r17, Y+3	; 0x03
    10d0:	aa 81       	ldd	r26, Y+2	; 0x02
    10d2:	b9 81       	ldd	r27, Y+1	; 0x01
    10d4:	ce 0f       	add	r28, r30
    10d6:	d1 1d       	adc	r29, r1
    10d8:	0f b6       	in	r0, 0x3f	; 63
    10da:	f8 94       	cli
    10dc:	de bf       	out	0x3e, r29	; 62
    10de:	0f be       	out	0x3f, r0	; 63
    10e0:	cd bf       	out	0x3d, r28	; 61
    10e2:	ed 01       	movw	r28, r26
    10e4:	08 95       	ret

000010e6 <__udivmodsi4>:
    10e6:	a1 e2       	ldi	r26, 0x21	; 33
    10e8:	1a 2e       	mov	r1, r26
    10ea:	aa 1b       	sub	r26, r26
    10ec:	bb 1b       	sub	r27, r27
    10ee:	fd 01       	movw	r30, r26
    10f0:	0d c0       	rjmp	.+26     	; 0x110c <__udivmodsi4_ep>

000010f2 <__udivmodsi4_loop>:
    10f2:	aa 1f       	adc	r26, r26
    10f4:	bb 1f       	adc	r27, r27
    10f6:	ee 1f       	adc	r30, r30
    10f8:	ff 1f       	adc	r31, r31
    10fa:	a2 17       	cp	r26, r18
    10fc:	b3 07       	cpc	r27, r19
    10fe:	e4 07       	cpc	r30, r20
    1100:	f5 07       	cpc	r31, r21
    1102:	20 f0       	brcs	.+8      	; 0x110c <__udivmodsi4_ep>
    1104:	a2 1b       	sub	r26, r18
    1106:	b3 0b       	sbc	r27, r19
    1108:	e4 0b       	sbc	r30, r20
    110a:	f5 0b       	sbc	r31, r21

0000110c <__udivmodsi4_ep>:
    110c:	66 1f       	adc	r22, r22
    110e:	77 1f       	adc	r23, r23
    1110:	88 1f       	adc	r24, r24
    1112:	99 1f       	adc	r25, r25
    1114:	1a 94       	dec	r1
    1116:	69 f7       	brne	.-38     	; 0x10f2 <__udivmodsi4_loop>
    1118:	60 95       	com	r22
    111a:	70 95       	com	r23
    111c:	80 95       	com	r24
    111e:	90 95       	com	r25
    1120:	9b 01       	movw	r18, r22
    1122:	ac 01       	movw	r20, r24
    1124:	bd 01       	movw	r22, r26
    1126:	cf 01       	movw	r24, r30
    1128:	08 95       	ret

0000112a <__umulhisi3>:
    112a:	a2 9f       	mul	r26, r18
    112c:	b0 01       	movw	r22, r0
    112e:	b3 9f       	mul	r27, r19
    1130:	c0 01       	movw	r24, r0
    1132:	a3 9f       	mul	r26, r19
    1134:	70 0d       	add	r23, r0
    1136:	81 1d       	adc	r24, r1
    1138:	11 24       	eor	r1, r1
    113a:	91 1d       	adc	r25, r1
    113c:	b2 9f       	mul	r27, r18
    113e:	70 0d       	add	r23, r0
    1140:	81 1d       	adc	r24, r1
    1142:	11 24       	eor	r1, r1
    1144:	91 1d       	adc	r25, r1
    1146:	08 95       	ret

00001148 <_exit>:
    1148:	f8 94       	cli

0000114a <__stop_program>:
    114a:	ff cf       	rjmp	.-2      	; 0x114a <__stop_program>
