
ice_ice.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000010e  00800100  00001a3e  00001ad2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a3e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000016  0080020e  0080020e  00001be0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001be0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001c3c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000210  00000000  00000000  00001c78  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002b02  00000000  00000000  00001e88  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000116f  00000000  00000000  0000498a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011f3  00000000  00000000  00005af9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000054c  00000000  00000000  00006cec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000915  00000000  00000000  00007238  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001af2  00000000  00000000  00007b4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002c8  00000000  00000000  0000963f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 60 03 	jmp	0x6c0	; 0x6c0 <__ctors_end>
       4:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
       8:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
       c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      10:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      14:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      18:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      1c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      20:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      24:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      28:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      2c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      30:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      34:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      38:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      3c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      40:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      44:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      48:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      4c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      50:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      54:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      58:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      5c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      60:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      64:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      68:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      6c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	00 00       	nop
      72:	00 00       	nop
      74:	00 5c       	subi	r16, 0xC0	; 192
      76:	00 00       	nop
      78:	0c 00       	.word	0x000c	; ????
      7a:	0c 00       	.word	0x000c	; ????
      7c:	7c 28       	or	r7, r12
      7e:	7c 28       	or	r7, r12
      80:	58 dc       	rcall	.-1872   	; 0xfffff932 <__eeprom_end+0xff7ef932>
      82:	68 00       	.word	0x0068	; ????
      84:	24 10       	cpse	r2, r4
      86:	48 00       	.word	0x0048	; ????
      88:	28 54       	subi	r18, 0x48	; 72
      8a:	28 40       	sbci	r18, 0x08	; 8
      8c:	00 0c       	add	r0, r0
      8e:	00 00       	nop
      90:	00 78       	andi	r16, 0x80	; 128
      92:	84 00       	.word	0x0084	; ????
      94:	84 78       	andi	r24, 0x84	; 132
      96:	00 00       	nop
      98:	54 38       	cpi	r21, 0x84	; 132
      9a:	54 00       	.word	0x0054	; ????
      9c:	10 7c       	andi	r17, 0xC0	; 192
      9e:	10 00       	.word	0x0010	; ????
      a0:	80 40       	sbci	r24, 0x00	; 0
      a2:	00 00       	nop
      a4:	10 10       	cpse	r1, r0
      a6:	10 00       	.word	0x0010	; ????
      a8:	00 40       	sbci	r16, 0x00	; 0
      aa:	00 00       	nop
      ac:	60 10       	cpse	r6, r0
      ae:	0c 00       	.word	0x000c	; ????
      b0:	38 54       	subi	r19, 0x48	; 72
      b2:	38 00       	.word	0x0038	; ????
      b4:	48 7c       	andi	r20, 0xC8	; 200
      b6:	40 00       	.word	0x0040	; ????
      b8:	48 64       	ori	r20, 0x48	; 72
      ba:	58 00       	.word	0x0058	; ????
      bc:	44 54       	subi	r20, 0x44	; 68
      be:	2c 00       	.word	0x002c	; ????
      c0:	1c 10       	cpse	r1, r12
      c2:	7c 00       	.word	0x007c	; ????
      c4:	5c 54       	subi	r21, 0x4C	; 76
      c6:	24 00       	.word	0x0024	; ????
      c8:	38 54       	subi	r19, 0x48	; 72
      ca:	24 00       	.word	0x0024	; ????
      cc:	64 14       	cp	r6, r4
      ce:	0c 00       	.word	0x000c	; ????
      d0:	68 54       	subi	r22, 0x48	; 72
      d2:	2c 00       	.word	0x002c	; ????
      d4:	48 54       	subi	r20, 0x48	; 72
      d6:	38 00       	.word	0x0038	; ????
      d8:	00 48       	sbci	r16, 0x80	; 128
      da:	00 00       	nop
      dc:	80 48       	sbci	r24, 0x80	; 128
      de:	00 00       	nop
      e0:	10 28       	or	r1, r0
      e2:	44 00       	.word	0x0044	; ????
      e4:	28 28       	or	r2, r8
      e6:	28 00       	.word	0x0028	; ????
      e8:	44 28       	or	r4, r4
      ea:	10 00       	.word	0x0010	; ????
      ec:	04 54       	subi	r16, 0x44	; 68
      ee:	08 00       	.word	0x0008	; ????
      f0:	38 44       	sbci	r19, 0x48	; 72
      f2:	5c 00       	.word	0x005c	; ????
      f4:	78 14       	cp	r7, r8
      f6:	78 00       	.word	0x0078	; ????
      f8:	7c 54       	subi	r23, 0x4C	; 76
      fa:	28 00       	.word	0x0028	; ????
      fc:	38 44       	sbci	r19, 0x48	; 72
      fe:	28 00       	.word	0x0028	; ????
     100:	7c 44       	sbci	r23, 0x4C	; 76
     102:	38 00       	.word	0x0038	; ????
     104:	7c 54       	subi	r23, 0x4C	; 76
     106:	44 00       	.word	0x0044	; ????
     108:	7c 14       	cp	r7, r12
     10a:	04 00       	.word	0x0004	; ????
     10c:	38 44       	sbci	r19, 0x48	; 72
     10e:	74 00       	.word	0x0074	; ????
     110:	7c 10       	cpse	r7, r12
     112:	7c 00       	.word	0x007c	; ????
     114:	44 7c       	andi	r20, 0xC4	; 196
     116:	44 00       	.word	0x0044	; ????
     118:	20 40       	sbci	r18, 0x00	; 0
     11a:	3c 00       	.word	0x003c	; ????
     11c:	7c 10       	cpse	r7, r12
     11e:	6c 00       	.word	0x006c	; ????
     120:	7c 40       	sbci	r23, 0x0C	; 12
     122:	40 00       	.word	0x0040	; ????
     124:	7c 18       	sub	r7, r12
     126:	7c 00       	.word	0x007c	; ????
     128:	78 10       	cpse	r7, r8
     12a:	3c 00       	.word	0x003c	; ????
     12c:	38 44       	sbci	r19, 0x48	; 72
     12e:	38 00       	.word	0x0038	; ????
     130:	7c 14       	cp	r7, r12
     132:	08 00       	.word	0x0008	; ????
     134:	38 44       	sbci	r19, 0x48	; 72
     136:	b8 00       	.word	0x00b8	; ????
     138:	7c 14       	cp	r7, r12
     13a:	68 00       	.word	0x0068	; ????
     13c:	48 54       	subi	r20, 0x48	; 72
     13e:	24 00       	.word	0x0024	; ????
     140:	04 7c       	andi	r16, 0xC4	; 196
     142:	04 00       	.word	0x0004	; ????
     144:	7c 40       	sbci	r23, 0x0C	; 12
     146:	7c 00       	.word	0x007c	; ????
     148:	3c 60       	ori	r19, 0x0C	; 12
     14a:	3c 00       	.word	0x003c	; ????
     14c:	7c 30       	cpi	r23, 0x0C	; 12
     14e:	7c 00       	.word	0x007c	; ????
     150:	6c 10       	cpse	r6, r12
     152:	6c 00       	.word	0x006c	; ????
     154:	0c 70       	andi	r16, 0x0C	; 12
     156:	0c 00       	.word	0x000c	; ????
     158:	64 54       	subi	r22, 0x44	; 68
     15a:	4c 00       	.word	0x004c	; ????
     15c:	00 7c       	andi	r16, 0xC0	; 192
     15e:	44 00       	.word	0x0044	; ????
     160:	0c 10       	cpse	r0, r12
     162:	60 00       	.word	0x0060	; ????
     164:	44 7c       	andi	r20, 0xC4	; 196
     166:	00 00       	nop
     168:	08 04       	cpc	r0, r8
     16a:	08 00       	.word	0x0008	; ????
     16c:	80 80       	ld	r8, Z
     16e:	80 00       	.word	0x0080	; ????
     170:	00 04       	cpc	r0, r0
     172:	08 00       	.word	0x0008	; ????
     174:	30 48       	sbci	r19, 0x80	; 128
     176:	78 00       	.word	0x0078	; ????
     178:	7c 48       	sbci	r23, 0x8C	; 140
     17a:	30 00       	.word	0x0030	; ????
     17c:	30 48       	sbci	r19, 0x80	; 128
     17e:	48 00       	.word	0x0048	; ????
     180:	30 48       	sbci	r19, 0x80	; 128
     182:	7c 00       	.word	0x007c	; ????
     184:	30 68       	ori	r19, 0x80	; 128
     186:	50 00       	.word	0x0050	; ????
     188:	10 78       	andi	r17, 0x80	; 128
     18a:	14 00       	.word	0x0014	; ????
     18c:	90 a8       	ldd	r9, Z+48	; 0x30
     18e:	78 00       	.word	0x0078	; ????
     190:	7c 08       	sbc	r7, r12
     192:	70 00       	.word	0x0070	; ????
     194:	50 74       	andi	r21, 0x40	; 64
     196:	40 00       	.word	0x0040	; ????
     198:	80 80       	ld	r8, Z
     19a:	74 00       	.word	0x0074	; ????
     19c:	7c 10       	cpse	r7, r12
     19e:	68 00       	.word	0x0068	; ????
     1a0:	44 7c       	andi	r20, 0xC4	; 196
     1a2:	40 00       	.word	0x0040	; ????
     1a4:	78 10       	cpse	r7, r8
     1a6:	78 00       	.word	0x0078	; ????
     1a8:	78 08       	sbc	r7, r8
     1aa:	70 00       	.word	0x0070	; ????
     1ac:	30 48       	sbci	r19, 0x80	; 128
     1ae:	30 00       	.word	0x0030	; ????
     1b0:	f8 28       	or	r15, r8
     1b2:	10 00       	.word	0x0010	; ????
     1b4:	30 48       	sbci	r19, 0x80	; 128
     1b6:	f8 00       	.word	0x00f8	; ????
     1b8:	78 10       	cpse	r7, r8
     1ba:	08 00       	.word	0x0008	; ????
     1bc:	50 58       	subi	r21, 0x80	; 128
     1be:	28 00       	.word	0x0028	; ????
     1c0:	08 3c       	cpi	r16, 0xC8	; 200
     1c2:	48 00       	.word	0x0048	; ????
     1c4:	38 40       	sbci	r19, 0x08	; 8
     1c6:	78 00       	.word	0x0078	; ????
     1c8:	38 40       	sbci	r19, 0x08	; 8
     1ca:	38 00       	.word	0x0038	; ????
     1cc:	78 20       	and	r7, r8
     1ce:	78 00       	.word	0x0078	; ????
     1d0:	48 30       	cpi	r20, 0x08	; 8
     1d2:	48 00       	.word	0x0048	; ????
     1d4:	98 a0       	ldd	r9, Y+32	; 0x20
     1d6:	78 00       	.word	0x0078	; ????
     1d8:	48 68       	ori	r20, 0x88	; 136
     1da:	58 00       	.word	0x0058	; ????
     1dc:	10 78       	andi	r17, 0x80	; 128
     1de:	84 00       	.word	0x0084	; ????
     1e0:	00 7c       	andi	r16, 0xC0	; 192
     1e2:	00 00       	nop
     1e4:	84 78       	andi	r24, 0x84	; 132
     1e6:	10 00       	.word	0x0010	; ????
     1e8:	08 04       	cpc	r0, r8
     1ea:	08 04       	cpc	r0, r8

000001ec <font5>:
     1ec:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     1fc:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     20c:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
     21c:	1c 00 08 2a 1c 2a 08 08 08 3e 08 08 00 50 30 00     ...*.*...>...P0.
     22c:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
     23c:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
     24c:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
     25c:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
     26c:	29 1e 00 36 36 00 00 00 56 36 00 00 00 08 14 22     )..66...V6....."
     27c:	41 14 14 14 14 14 41 22 14 08 00 02 01 51 09 06     A.....A".....Q..
     28c:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     29c:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     2ac:	09 01 01 3e 41 41 51 32 7f 08 08 08 7f 00 41 7f     ...>AAQ2......A.
     2bc:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     2cc:	40 7f 02 04 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     2dc:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     2ec:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     2fc:	40 20 1f 7f 20 18 20 7f 63 14 08 14 63 03 04 78     @ .. . .c...c..x
     30c:	04 03 61 51 49 45 43 00 00 7f 41 41 02 04 08 10     ..aQIEC...AA....
     31c:	20 41 41 7f 00 00 04 02 01 02 04 40 40 40 40 40      AA........@@@@@
     32c:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     33c:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     34c:	09 01 02 08 14 54 54 3c 7f 08 04 04 78 00 44 7d     .....TT<....x.D}
     35c:	40 00 20 40 44 3d 00 00 7f 10 28 44 00 41 7f 40     @. @D=....(D.A.@
     36c:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     37c:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     38c:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     39c:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     3ac:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     3bc:	00 00 41 36 08 00 02 01 03 02 01                    ..A6.......

000003c7 <font8>:
	...
     3cf:	00 06 5f 5f 06 00 00 00 00 07 07 00 07 07 00 00     ..__............
     3df:	14 7f 7f 14 7f 7f 14 00 24 2e 6b 6b 3a 12 00 00     ........$.kk:...
     3ef:	46 66 30 18 0c 66 62 00 30 7a 4f 5d 37 7a 48 00     Ff0..fb.0zO]7zH.
     3ff:	04 07 03 00 00 00 00 00 00 1c 3e 63 41 00 00 00     ..........>cA...
     40f:	00 41 63 3e 1c 00 00 00 08 2a 3e 1c 1c 3e 2a 08     .Ac>.....*>..>*.
     41f:	08 08 3e 3e 08 08 00 00 00 a0 e0 60 00 00 00 00     ..>>.......`....
     42f:	08 08 08 08 08 08 00 00 00 00 60 60 00 00 00 00     ..........``....
     43f:	60 30 18 0c 06 03 01 00 3e 7f 59 4d 7f 3e 00 00     `0......>.YM.>..
     44f:	42 42 7f 7f 40 40 00 00 62 73 59 49 6f 66 00 00     BB..@@..bsYIof..
     45f:	22 63 49 49 7f 36 00 00 18 1c 16 13 7f 7f 10 00     "cII.6..........
     46f:	27 67 45 45 7d 39 00 00 3c 7e 4b 49 79 30 00 00     'gEE}9..<~KIy0..
     47f:	03 63 71 19 0f 07 00 00 36 7f 49 49 7f 36 00 00     .cq.....6.II.6..
     48f:	06 4f 49 69 3f 1e 00 00 00 00 6c 6c 00 00 00 00     .OIi?.....ll....
     49f:	00 a0 ec 6c 00 00 00 00 08 1c 36 63 41 00 00 00     ...l......6cA...
     4af:	14 14 14 14 14 14 00 00 00 41 63 36 1c 08 00 00     .........Ac6....
     4bf:	02 03 51 59 0f 06 00 00 3e 7f 41 5d 5d 1f 1e 00     ..QY....>.A]]...
     4cf:	7c 7e 13 13 7e 7c 00 00 41 7f 7f 49 49 7f 36 00     |~..~|..A..II.6.
     4df:	1c 3e 63 41 41 63 22 00 41 7f 7f 41 63 7f 1c 00     .>cAAc".A..Ac...
     4ef:	41 7f 7f 49 5d 41 63 00 41 7f 7f 49 1d 01 03 00     A..I]Ac.A..I....
     4ff:	1c 3e 63 41 51 73 72 00 7f 7f 08 08 7f 7f 00 00     .>cAQsr.........
     50f:	00 41 7f 7f 41 00 00 00 30 70 40 41 7f 3f 01 00     .A..A...0p@A.?..
     51f:	41 7f 7f 08 1c 77 63 00 41 7f 7f 41 40 60 70 00     A....wc.A..A@`p.
     52f:	7f 7f 06 0c 06 7f 7f 00 7f 7f 06 0c 18 7f 7f 00     ................
     53f:	1c 3e 63 41 63 3e 1c 00 41 7f 7f 49 09 0f 06 00     .>cAc>..A..I....
     54f:	1e 3f 21 71 7f 5e 00 00 41 7f 7f 19 39 6f 46 00     .?!q.^..A...9oF.
     55f:	26 67 4d 59 7b 32 00 00 03 41 7f 7f 41 03 00 00     &gMY{2...A..A...
     56f:	7f 7f 40 40 7f 7f 00 00 1f 3f 60 60 3f 1f 00 00     ..@@.....?``?...
     57f:	7f 7f 30 18 30 7f 7f 00 63 77 1c 08 1c 77 63 00     ..0.0...cw...wc.
     58f:	07 4f 78 78 4f 07 00 00 67 73 59 4d 47 63 71 00     .OxxO...gsYMGcq.
     59f:	00 7f 7f 41 41 00 00 00 01 03 06 0c 18 30 60 00     ...AA........0`.
     5af:	00 41 41 7f 7f 00 00 00 08 0c 06 03 06 0c 08 00     .AA.............
     5bf:	80 80 80 80 80 80 80 80 00 00 03 07 04 00 00 00     ................
     5cf:	20 74 54 54 3c 78 40 00 41 3f 7f 44 44 7c 38 00      tTT<x@.A?.DD|8.
     5df:	38 7c 44 44 6c 28 00 00 30 78 48 49 3f 7f 40 00     8|DDl(..0xHI?.@.
     5ef:	38 7c 54 54 5c 18 00 00 48 7e 7f 49 03 02 00 00     8|TT\...H~.I....
     5ff:	98 bc a4 a4 f8 7c 04 00 41 7f 7f 08 04 7c 78 00     .....|..A....|x.
     60f:	00 44 7d 7d 40 00 00 00 40 c4 84 fd 7d 00 00 00     .D}}@...@...}...
     61f:	41 7f 7f 10 38 6c 44 00 00 41 7f 7f 40 00 00 00     A...8lD..A..@...
     62f:	7c 7c 0c 18 0c 7c 78 00 7c 7c 04 04 7c 78 00 00     ||...|x.||..|x..
     63f:	38 7c 44 44 7c 38 00 00 84 fc f8 a4 24 3c 18 00     8|DD|8......$<..
     64f:	18 3c 24 a4 f8 fc 84 00 44 7c 78 44 1c 18 00 00     .<$.....D|xD....
     65f:	48 5c 54 54 74 24 00 00 00 04 3e 7f 44 24 00 00     H\TTt$....>.D$..
     66f:	3c 7c 40 40 3c 7c 40 00 1c 3c 60 60 3c 1c 00 00     <|@@<|@..<``<...
     67f:	3c 7c 60 30 60 7c 3c 00 44 6c 38 10 38 6c 44 00     <|`0`|<.Dl8.8lD.
     68f:	9c bc a0 a0 fc 7c 00 00 4c 64 74 5c 4c 64 00 00     .....|..Ldt\Ld..
     69f:	08 08 3e 77 41 41 00 00 00 00 00 77 77 00 00 00     ..>wAA.....ww...
     6af:	41 41 77 3e 08 08 00 00 02 03 01 03 02 03 01 00     AAw>............
	...

000006c0 <__ctors_end>:
     6c0:	11 24       	eor	r1, r1
     6c2:	1f be       	out	0x3f, r1	; 63
     6c4:	cf ef       	ldi	r28, 0xFF	; 255
     6c6:	d4 e0       	ldi	r29, 0x04	; 4
     6c8:	de bf       	out	0x3e, r29	; 62
     6ca:	cd bf       	out	0x3d, r28	; 61

000006cc <__do_copy_data>:
     6cc:	12 e0       	ldi	r17, 0x02	; 2
     6ce:	a0 e0       	ldi	r26, 0x00	; 0
     6d0:	b1 e0       	ldi	r27, 0x01	; 1
     6d2:	ee e3       	ldi	r30, 0x3E	; 62
     6d4:	fa e1       	ldi	r31, 0x1A	; 26
     6d6:	02 c0       	rjmp	.+4      	; 0x6dc <__do_copy_data+0x10>
     6d8:	05 90       	lpm	r0, Z+
     6da:	0d 92       	st	X+, r0
     6dc:	ae 30       	cpi	r26, 0x0E	; 14
     6de:	b1 07       	cpc	r27, r17
     6e0:	d9 f7       	brne	.-10     	; 0x6d8 <__do_copy_data+0xc>

000006e2 <__do_clear_bss>:
     6e2:	22 e0       	ldi	r18, 0x02	; 2
     6e4:	ae e0       	ldi	r26, 0x0E	; 14
     6e6:	b2 e0       	ldi	r27, 0x02	; 2
     6e8:	01 c0       	rjmp	.+2      	; 0x6ec <.do_clear_bss_start>

000006ea <.do_clear_bss_loop>:
     6ea:	1d 92       	st	X+, r1

000006ec <.do_clear_bss_start>:
     6ec:	a4 32       	cpi	r26, 0x24	; 36
     6ee:	b2 07       	cpc	r27, r18
     6f0:	e1 f7       	brne	.-8      	; 0x6ea <.do_clear_bss_loop>
     6f2:	0e 94 c5 04 	call	0x98a	; 0x98a <main>
     6f6:	0c 94 1d 0d 	jmp	0x1a3a	; 0x1a3a <_exit>

000006fa <__bad_interrupt>:
     6fa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000006fe <can_init>:
uint8_t buffer_number = 0;


uint8_t can_init(){
	
	mcp2515_init();
     6fe:	0e 94 53 04 	call	0x8a6	; 0x8a6 <mcp2515_init>
	
	
	//mcp2515_bit_modify(MCP_CANINTE,0b00001111,0b00001111);
	mcp2515_write(MCP_CANCTRL, MODE_LOOPBACK);	
     702:	60 e4       	ldi	r22, 0x40	; 64
     704:	8f e0       	ldi	r24, 0x0F	; 15
     706:	0e 94 36 04 	call	0x86c	; 0x86c <mcp2515_write>
}
     70a:	08 95       	ret

0000070c <send_can_msg>:

void send_can_msg(can_message *msg){
     70c:	0f 93       	push	r16
     70e:	1f 93       	push	r17
     710:	cf 93       	push	r28
     712:	8c 01       	movw	r16, r24
	
	mcp2515_write(idBufferHighAddress+16*buffer_number, msg->id>>3);
     714:	fc 01       	movw	r30, r24
     716:	60 81       	ld	r22, Z
     718:	71 81       	ldd	r23, Z+1	; 0x01
     71a:	76 95       	lsr	r23
     71c:	67 95       	ror	r22
     71e:	76 95       	lsr	r23
     720:	67 95       	ror	r22
     722:	76 95       	lsr	r23
     724:	67 95       	ror	r22
     726:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <buffer_number>
     72a:	82 95       	swap	r24
     72c:	80 7f       	andi	r24, 0xF0	; 240
     72e:	8f 5c       	subi	r24, 0xCF	; 207
     730:	0e 94 36 04 	call	0x86c	; 0x86c <mcp2515_write>
	uint8_t lowbufferval = mcp2515_read(0x32);
     734:	82 e3       	ldi	r24, 0x32	; 50
     736:	0e 94 28 04 	call	0x850	; 0x850 <mcp2515_read>
	
	mcp2515_write(idBufferLowAddress+16*buffer_number, 0x00ff & ((lowbufferval&0b00011111) | (msg->id<<5)));
     73a:	f8 01       	movw	r30, r16
     73c:	60 81       	ld	r22, Z
     73e:	62 95       	swap	r22
     740:	66 0f       	add	r22, r22
     742:	60 7e       	andi	r22, 0xE0	; 224
     744:	8f 71       	andi	r24, 0x1F	; 31
     746:	68 2b       	or	r22, r24
     748:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <buffer_number>
     74c:	82 95       	swap	r24
     74e:	80 7f       	andi	r24, 0xF0	; 240
     750:	8e 5c       	subi	r24, 0xCE	; 206
     752:	0e 94 36 04 	call	0x86c	; 0x86c <mcp2515_write>
	
	uint8_t regvalue = mcp2515_read(0x35);
     756:	85 e3       	ldi	r24, 0x35	; 53
     758:	0e 94 28 04 	call	0x850	; 0x850 <mcp2515_read>
	mcp2515_write(dataLengthBufferAddress+16*buffer_number, (regvalue&0b11110000) | msg->data_length);
     75c:	80 7f       	andi	r24, 0xF0	; 240
     75e:	f8 01       	movw	r30, r16
     760:	92 81       	ldd	r25, Z+2	; 0x02
     762:	68 2f       	mov	r22, r24
     764:	69 2b       	or	r22, r25
     766:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <buffer_number>
     76a:	82 95       	swap	r24
     76c:	80 7f       	andi	r24, 0xF0	; 240
     76e:	8b 5c       	subi	r24, 0xCB	; 203
     770:	0e 94 36 04 	call	0x86c	; 0x86c <mcp2515_write>
	
	for(uint8_t m = 0; m < msg->data_length; m++){
     774:	f8 01       	movw	r30, r16
     776:	82 81       	ldd	r24, Z+2	; 0x02
     778:	88 23       	and	r24, r24
     77a:	a9 f0       	breq	.+42     	; 0x7a6 <send_can_msg+0x9a>
     77c:	c0 e0       	ldi	r28, 0x00	; 0
		mcp2515_write(dataBufferAddress+m+16*buffer_number, msg->data[m]);
     77e:	f8 01       	movw	r30, r16
     780:	ec 0f       	add	r30, r28
     782:	f1 1d       	adc	r31, r1
     784:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <buffer_number>
     788:	9c 2f       	mov	r25, r28
     78a:	20 e1       	ldi	r18, 0x10	; 16
     78c:	82 9f       	mul	r24, r18
     78e:	90 0d       	add	r25, r0
     790:	11 24       	eor	r1, r1
     792:	89 2f       	mov	r24, r25
     794:	63 81       	ldd	r22, Z+3	; 0x03
     796:	8a 5c       	subi	r24, 0xCA	; 202
     798:	0e 94 36 04 	call	0x86c	; 0x86c <mcp2515_write>
	mcp2515_write(idBufferLowAddress+16*buffer_number, 0x00ff & ((lowbufferval&0b00011111) | (msg->id<<5)));
	
	uint8_t regvalue = mcp2515_read(0x35);
	mcp2515_write(dataLengthBufferAddress+16*buffer_number, (regvalue&0b11110000) | msg->data_length);
	
	for(uint8_t m = 0; m < msg->data_length; m++){
     79c:	cf 5f       	subi	r28, 0xFF	; 255
     79e:	f8 01       	movw	r30, r16
     7a0:	82 81       	ldd	r24, Z+2	; 0x02
     7a2:	c8 17       	cp	r28, r24
     7a4:	60 f3       	brcs	.-40     	; 0x77e <send_can_msg+0x72>
		mcp2515_write(dataBufferAddress+m+16*buffer_number, msg->data[m]);
	}
	
	mcp2515_request_to_send(MCP_RTS_TX0+buffer_number);
     7a6:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <buffer_number>
     7aa:	8f 57       	subi	r24, 0x7F	; 127
     7ac:	0e 94 48 04 	call	0x890	; 0x890 <mcp2515_request_to_send>
}
     7b0:	cf 91       	pop	r28
     7b2:	1f 91       	pop	r17
     7b4:	0f 91       	pop	r16
     7b6:	08 95       	ret

000007b8 <receive_can_msg>:

can_message* receive_can_msg(uint8_t buffer_number){
     7b8:	0f 93       	push	r16
     7ba:	1f 93       	push	r17
     7bc:	cf 93       	push	r28
     7be:	df 93       	push	r29
	static can_message msg;
	msg.id = 0x00;
     7c0:	0e e0       	ldi	r16, 0x0E	; 14
     7c2:	12 e0       	ldi	r17, 0x02	; 2
     7c4:	f8 01       	movw	r30, r16
     7c6:	11 82       	std	Z+1, r1	; 0x01
     7c8:	10 82       	st	Z, r1
	uint16_t idHigh = mcp2515_read(idBufferHighAddress+16*buffer_number);
     7ca:	c8 2f       	mov	r28, r24
     7cc:	c2 95       	swap	r28
     7ce:	c0 7f       	andi	r28, 0xF0	; 240
     7d0:	81 e3       	ldi	r24, 0x31	; 49
     7d2:	8c 0f       	add	r24, r28
     7d4:	0e 94 28 04 	call	0x850	; 0x850 <mcp2515_read>
     7d8:	d8 2f       	mov	r29, r24
	uint16_t idLow = mcp2515_read(idBufferLowAddress+16*buffer_number);
     7da:	82 e3       	ldi	r24, 0x32	; 50
     7dc:	8c 0f       	add	r24, r28
     7de:	0e 94 28 04 	call	0x850	; 0x850 <mcp2515_read>
	
	msg.id |= idLow>>5;
	msg.id |= idHigh<<3;
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	96 95       	lsr	r25
     7e6:	87 95       	ror	r24
     7e8:	92 95       	swap	r25
     7ea:	82 95       	swap	r24
     7ec:	8f 70       	andi	r24, 0x0F	; 15
     7ee:	89 27       	eor	r24, r25
     7f0:	9f 70       	andi	r25, 0x0F	; 15
     7f2:	89 27       	eor	r24, r25
     7f4:	2d 2f       	mov	r18, r29
     7f6:	30 e0       	ldi	r19, 0x00	; 0
     7f8:	22 0f       	add	r18, r18
     7fa:	33 1f       	adc	r19, r19
     7fc:	22 0f       	add	r18, r18
     7fe:	33 1f       	adc	r19, r19
     800:	22 0f       	add	r18, r18
     802:	33 1f       	adc	r19, r19
     804:	82 2b       	or	r24, r18
     806:	93 2b       	or	r25, r19
     808:	f8 01       	movw	r30, r16
     80a:	20 81       	ld	r18, Z
     80c:	31 81       	ldd	r19, Z+1	; 0x01
     80e:	82 2b       	or	r24, r18
     810:	93 2b       	or	r25, r19
     812:	91 83       	std	Z+1, r25	; 0x01
     814:	80 83       	st	Z, r24
	
	uint8_t length;
	length = 0b00001111 & mcp2515_read(dataLengthBufferAddress);
     816:	85 e3       	ldi	r24, 0x35	; 53
     818:	0e 94 28 04 	call	0x850	; 0x850 <mcp2515_read>
     81c:	8f 70       	andi	r24, 0x0F	; 15
	msg.data_length = length;
     81e:	f8 01       	movw	r30, r16
     820:	82 83       	std	Z+2, r24	; 0x02
	
	for(uint8_t m = 0; m < length; m++){
     822:	88 23       	and	r24, r24
     824:	71 f0       	breq	.+28     	; 0x842 <receive_can_msg+0x8a>
     826:	ca 5c       	subi	r28, 0xCA	; 202
     828:	01 e1       	ldi	r16, 0x11	; 17
     82a:	12 e0       	ldi	r17, 0x02	; 2
     82c:	dc 2f       	mov	r29, r28
     82e:	d8 0f       	add	r29, r24
		msg.data[m] = mcp2515_read(dataBufferAddress+m+16*buffer_number);
     830:	8c 2f       	mov	r24, r28
     832:	0e 94 28 04 	call	0x850	; 0x850 <mcp2515_read>
     836:	f8 01       	movw	r30, r16
     838:	81 93       	st	Z+, r24
     83a:	8f 01       	movw	r16, r30
     83c:	cf 5f       	subi	r28, 0xFF	; 255
	
	uint8_t length;
	length = 0b00001111 & mcp2515_read(dataLengthBufferAddress);
	msg.data_length = length;
	
	for(uint8_t m = 0; m < length; m++){
     83e:	cd 13       	cpse	r28, r29
     840:	f7 cf       	rjmp	.-18     	; 0x830 <receive_can_msg+0x78>
	}
	
	//flag recieved
	
	return &msg;
     842:	8e e0       	ldi	r24, 0x0E	; 14
     844:	92 e0       	ldi	r25, 0x02	; 2
     846:	df 91       	pop	r29
     848:	cf 91       	pop	r28
     84a:	1f 91       	pop	r17
     84c:	0f 91       	pop	r16
     84e:	08 95       	ret

00000850 <mcp2515_read>:
	spi_write(address);
	spi_write(mask);
	spi_write(data);
	
	PORTB |= (1<<PB4);
}
     850:	cf 93       	push	r28
     852:	c8 2f       	mov	r28, r24
     854:	c4 98       	cbi	0x18, 4	; 24
     856:	83 e0       	ldi	r24, 0x03	; 3
     858:	0e 94 bc 04 	call	0x978	; 0x978 <spi_write>
     85c:	8c 2f       	mov	r24, r28
     85e:	0e 94 bc 04 	call	0x978	; 0x978 <spi_write>
     862:	0e 94 c0 04 	call	0x980	; 0x980 <spi_read>
     866:	c4 9a       	sbi	0x18, 4	; 24
     868:	cf 91       	pop	r28
     86a:	08 95       	ret

0000086c <mcp2515_write>:
     86c:	cf 93       	push	r28
     86e:	df 93       	push	r29
     870:	d8 2f       	mov	r29, r24
     872:	c6 2f       	mov	r28, r22
     874:	c4 98       	cbi	0x18, 4	; 24
     876:	82 e0       	ldi	r24, 0x02	; 2
     878:	0e 94 bc 04 	call	0x978	; 0x978 <spi_write>
     87c:	8d 2f       	mov	r24, r29
     87e:	0e 94 bc 04 	call	0x978	; 0x978 <spi_write>
     882:	8c 2f       	mov	r24, r28
     884:	0e 94 bc 04 	call	0x978	; 0x978 <spi_write>
     888:	c4 9a       	sbi	0x18, 4	; 24
     88a:	df 91       	pop	r29
     88c:	cf 91       	pop	r28
     88e:	08 95       	ret

00000890 <mcp2515_request_to_send>:
     890:	c4 98       	cbi	0x18, 4	; 24
     892:	0e 94 bc 04 	call	0x978	; 0x978 <spi_write>
     896:	c4 9a       	sbi	0x18, 4	; 24
     898:	08 95       	ret

0000089a <mcp2515_reset>:
void mcp2515_reset(){
	PORTB &= ~(1<<PB4);
     89a:	c4 98       	cbi	0x18, 4	; 24
	
	spi_write(MCP_RESET);
     89c:	80 ec       	ldi	r24, 0xC0	; 192
     89e:	0e 94 bc 04 	call	0x978	; 0x978 <spi_write>
	
	PORTB |= (1<<PB4);
     8a2:	c4 9a       	sbi	0x18, 4	; 24
     8a4:	08 95       	ret

000008a6 <mcp2515_init>:
//MCP_CANINTF to read and clear interupts, need to clear before we can continue transmitting

uint8_t mcp2515_init(){
	uint8_t value;
	
	spi_init();
     8a6:	0e 94 b7 04 	call	0x96e	; 0x96e <spi_init>
	mcp2515_reset();
     8aa:	0e 94 4d 04 	call	0x89a	; 0x89a <mcp2515_reset>
	//sei();
	
	/*value = mcp2515_read(MCP_CANCTRL);
	value = MODE_LOOPBACK; */
	mcp2515_write(MCP_CANCTRL, MODE_LOOPBACK);	
     8ae:	60 e4       	ldi	r22, 0x40	; 64
     8b0:	8f e0       	ldi	r24, 0x0F	; 15
     8b2:	0e 94 36 04 	call	0x86c	; 0x86c <mcp2515_write>
}
     8b6:	08 95       	ret

000008b8 <new_menu>:
	"option5",
	"option6",
	"option7",
	"option8",
};
menu* new_menu(menu* parent){
     8b8:	cf 93       	push	r28
     8ba:	df 93       	push	r29
     8bc:	ec 01       	movw	r28, r24
	menu* mymenu = malloc(sizeof(menu));
     8be:	83 e2       	ldi	r24, 0x23	; 35
     8c0:	90 e0       	ldi	r25, 0x00	; 0
     8c2:	0e 94 ba 07 	call	0xf74	; 0xf74 <malloc>
     8c6:	aa e0       	ldi	r26, 0x0A	; 10
     8c8:	b1 e0       	ldi	r27, 0x01	; 1
     8ca:	fc 01       	movw	r30, r24
     8cc:	4a e1       	ldi	r20, 0x1A	; 26
     8ce:	51 e0       	ldi	r21, 0x01	; 1
	for(unsigned int i = 0; i < 8; i++){
		mymenu->links[i] = NULL;
     8d0:	11 8a       	std	Z+17, r1	; 0x11
     8d2:	10 8a       	std	Z+16, r1	; 0x10
		mymenu->labels[i] = string_list[i];
     8d4:	2d 91       	ld	r18, X+
     8d6:	3d 91       	ld	r19, X+
     8d8:	21 93       	st	Z+, r18
     8da:	31 93       	st	Z+, r19
	"option7",
	"option8",
};
menu* new_menu(menu* parent){
	menu* mymenu = malloc(sizeof(menu));
	for(unsigned int i = 0; i < 8; i++){
     8dc:	a4 17       	cp	r26, r20
     8de:	b5 07       	cpc	r27, r21
     8e0:	b9 f7       	brne	.-18     	; 0x8d0 <new_menu+0x18>
		mymenu->links[i] = NULL;
		mymenu->labels[i] = string_list[i];
	}
	
	(mymenu->selected) = 0;
     8e2:	fc 01       	movw	r30, r24
     8e4:	10 a2       	std	Z+32, r1	; 0x20
	mymenu->links[7] = (parent);
     8e6:	d7 8f       	std	Z+31, r29	; 0x1f
     8e8:	c6 8f       	std	Z+30, r28	; 0x1e
	mymenu->labels[7] = "<- Back";
     8ea:	2c e1       	ldi	r18, 0x1C	; 28
     8ec:	31 e0       	ldi	r19, 0x01	; 1
     8ee:	37 87       	std	Z+15, r19	; 0x0f
     8f0:	26 87       	std	Z+14, r18	; 0x0e
	mymenu->fun_ptr = NULL;
     8f2:	12 a2       	std	Z+34, r1	; 0x22
     8f4:	11 a2       	std	Z+33, r1	; 0x21
	return mymenu;
}
     8f6:	df 91       	pop	r29
     8f8:	cf 91       	pop	r28
     8fa:	08 95       	ret

000008fc <invert_selected>:

	write_menu_to_screen(next_menu);
	*menuHead = next_menu;
}

void invert_selected(menu* menuPointer){
     8fc:	cf 93       	push	r28
     8fe:	df 93       	push	r29
     900:	ec 01       	movw	r28, r24
	go_to_column(0);
     902:	80 e0       	ldi	r24, 0x00	; 0
     904:	0e 94 af 05 	call	0xb5e	; 0xb5e <go_to_column>
	oled_write_string_inverted((menuPointer->selected), menuPointer->labels[(menuPointer->selected)], 8);
     908:	88 a1       	ldd	r24, Y+32	; 0x20
     90a:	e8 2f       	mov	r30, r24
     90c:	f0 e0       	ldi	r31, 0x00	; 0
     90e:	ee 0f       	add	r30, r30
     910:	ff 1f       	adc	r31, r31
     912:	ec 0f       	add	r30, r28
     914:	fd 1f       	adc	r31, r29
     916:	60 81       	ld	r22, Z
     918:	71 81       	ldd	r23, Z+1	; 0x01
     91a:	48 e0       	ldi	r20, 0x08	; 8
     91c:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <oled_write_string_inverted>
}
     920:	df 91       	pop	r29
     922:	cf 91       	pop	r28
     924:	08 95       	ret

00000926 <write_menu_to_screen>:
	mymenu->labels[7] = "<- Back";
	mymenu->fun_ptr = NULL;
	return mymenu;
}

void write_menu_to_screen(menu* menuPointer){
     926:	ff 92       	push	r15
     928:	0f 93       	push	r16
     92a:	1f 93       	push	r17
     92c:	cf 93       	push	r28
     92e:	df 93       	push	r29
     930:	f8 2e       	mov	r15, r24
     932:	d9 2f       	mov	r29, r25
	clear_oled_new();
     934:	0e 94 d1 05 	call	0xba2	; 0xba2 <clear_oled_new>
     938:	0f 2d       	mov	r16, r15
     93a:	1d 2f       	mov	r17, r29
     93c:	c0 e0       	ldi	r28, 0x00	; 0
	for(unsigned int i = 0; i < 8; i++){
		go_to_column(0);
     93e:	80 e0       	ldi	r24, 0x00	; 0
     940:	0e 94 af 05 	call	0xb5e	; 0xb5e <go_to_column>
		oled_write_string(i, menuPointer->labels[i], 8);
     944:	f8 01       	movw	r30, r16
     946:	61 91       	ld	r22, Z+
     948:	71 91       	ld	r23, Z+
     94a:	8f 01       	movw	r16, r30
     94c:	48 e0       	ldi	r20, 0x08	; 8
     94e:	8c 2f       	mov	r24, r28
     950:	0e 94 3f 06 	call	0xc7e	; 0xc7e <oled_write_string>
     954:	cf 5f       	subi	r28, 0xFF	; 255
	return mymenu;
}

void write_menu_to_screen(menu* menuPointer){
	clear_oled_new();
	for(unsigned int i = 0; i < 8; i++){
     956:	c8 30       	cpi	r28, 0x08	; 8
     958:	91 f7       	brne	.-28     	; 0x93e <write_menu_to_screen+0x18>
		go_to_column(0);
		oled_write_string(i, menuPointer->labels[i], 8);
	}
	invert_selected(menuPointer);
     95a:	8f 2d       	mov	r24, r15
     95c:	9d 2f       	mov	r25, r29
     95e:	0e 94 7e 04 	call	0x8fc	; 0x8fc <invert_selected>
}
     962:	df 91       	pop	r29
     964:	cf 91       	pop	r28
     966:	1f 91       	pop	r17
     968:	0f 91       	pop	r16
     96a:	ff 90       	pop	r15
     96c:	08 95       	ret

0000096e <spi_init>:
	spi_write(0xf0);
	return SPDR;
}

void spi_init(){
	DDRB = (1<<DDB4)|(1<<DDB5)|(1<<DDB7); //chip select, mosi, clock
     96e:	80 eb       	ldi	r24, 0xB0	; 176
     970:	87 bb       	out	0x17, r24	; 23
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
     972:	81 e5       	ldi	r24, 0x51	; 81
     974:	8d b9       	out	0x0d, r24	; 13
     976:	08 95       	ret

00000978 <spi_write>:
}

void spi_write(char data){
	SPDR = data;
     978:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF))){
     97a:	77 9b       	sbis	0x0e, 7	; 14
     97c:	fe cf       	rjmp	.-4      	; 0x97a <spi_write+0x2>
		
	}
     97e:	08 95       	ret

00000980 <spi_read>:



uint8_t spi_read(){
	
	spi_write(0xf0);
     980:	80 ef       	ldi	r24, 0xF0	; 240
     982:	0e 94 bc 04 	call	0x978	; 0x978 <spi_write>
	return SPDR;
     986:	8f b1       	in	r24, 0x0f	; 15
}
     988:	08 95       	ret

0000098a <main>:
} menuItem;




int main(void){
     98a:	cf 93       	push	r28
     98c:	df 93       	push	r29
     98e:	cd b7       	in	r28, 0x3d	; 61
     990:	de b7       	in	r29, 0x3e	; 62
     992:	2b 97       	sbiw	r28, 0x0b	; 11
     994:	0f b6       	in	r0, 0x3f	; 63
     996:	f8 94       	cli
     998:	de bf       	out	0x3e, r29	; 62
     99a:	0f be       	out	0x3f, r0	; 63
     99c:	cd bf       	out	0x3d, r28	; 61
	
//  	joyVal joystick; 
//  	sliderVal slider; 
	volatile amap* atmelMap = (amap*) BASE;
     99e:	00 91 1a 01 	lds	r16, 0x011A	; 0x80011a <BASE>
     9a2:	10 91 1b 01 	lds	r17, 0x011B	; 0x80011b <BASE+0x1>
	
	MCUCR |= (1<<SRE);
     9a6:	85 b7       	in	r24, 0x35	; 53
     9a8:	80 68       	ori	r24, 0x80	; 128
     9aa:	85 bf       	out	0x35, r24	; 53
	
	//DDRC = 0xFF;
	//PORTC = 0x00;
	
	SFIOR &= ~(1<<XMM0);
     9ac:	80 b7       	in	r24, 0x30	; 48
     9ae:	87 7f       	andi	r24, 0xF7	; 247
     9b0:	80 bf       	out	0x30, r24	; 48
	SFIOR &= ~(1<<XMM1);
     9b2:	80 b7       	in	r24, 0x30	; 48
     9b4:	8f 7e       	andi	r24, 0xEF	; 239
     9b6:	80 bf       	out	0x30, r24	; 48
	SFIOR |= (1<<XMM2);
     9b8:	80 b7       	in	r24, 0x30	; 48
     9ba:	80 62       	ori	r24, 0x20	; 32
     9bc:	80 bf       	out	0x30, r24	; 48
	
	DDRA |= 0x18;
     9be:	8a b3       	in	r24, 0x1a	; 26
     9c0:	88 61       	ori	r24, 0x18	; 24
     9c2:	8a bb       	out	0x1a, r24	; 26
	TCCR2 |= (1<<WGM20);	
	TCCR2 |= (1<<COM21);
	TCCR2 |= (1<<COM20);
	*/

	USART_Init ( MYUBRR );
     9c4:	8f e1       	ldi	r24, 0x1F	; 31
     9c6:	90 e0       	ldi	r25, 0x00	; 0
     9c8:	0e 94 82 07 	call	0xf04	; 0xf04 <USART_Init>
	SRAM_test(); _delay_ms(5000);
     9cc:	0e 94 2e 07 	call	0xe5c	; 0xe5c <SRAM_test>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9d0:	2f e3       	ldi	r18, 0x3F	; 63
     9d2:	82 e4       	ldi	r24, 0x42	; 66
     9d4:	9f e0       	ldi	r25, 0x0F	; 15
     9d6:	21 50       	subi	r18, 0x01	; 1
     9d8:	80 40       	sbci	r24, 0x00	; 0
     9da:	90 40       	sbci	r25, 0x00	; 0
     9dc:	e1 f7       	brne	.-8      	; 0x9d6 <main+0x4c>
     9de:	00 c0       	rjmp	.+0      	; 0x9e0 <main+0x56>
     9e0:	00 00       	nop
		


	oled_init(atmelMap);
     9e2:	c8 01       	movw	r24, r16
     9e4:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <oled_init>
	clear_oled(atmelMap);
     9e8:	c8 01       	movw	r24, r16
     9ea:	0e 94 b9 05 	call	0xb72	; 0xb72 <clear_oled>
	
		
	go_to_line(7);
     9ee:	87 e0       	ldi	r24, 0x07	; 7
     9f0:	0e 94 aa 05 	call	0xb54	; 0xb54 <go_to_line>
     9f4:	0c e5       	ldi	r16, 0x5C	; 92
     9f6:	10 e0       	ldi	r17, 0x00	; 0
		
		_delay_ms(20);
		
	}*/
	for(int i = 0; i < 92; i++){
		printf("\n");
     9f8:	8a e0       	ldi	r24, 0x0A	; 10
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	0e 94 98 09 	call	0x1330	; 0x1330 <putchar>
     a00:	01 50       	subi	r16, 0x01	; 1
     a02:	11 09       	sbc	r17, r1
		}
		
		_delay_ms(20);
		
	}*/
	for(int i = 0; i < 92; i++){
     a04:	c9 f7       	brne	.-14     	; 0x9f8 <main+0x6e>
	}
	
	menu** headPointer = NULL;
	
	menu* mainMenu;
	mainMenu = new_menu(NULL);
     a06:	80 e0       	ldi	r24, 0x00	; 0
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <new_menu>
     a0e:	8c 01       	movw	r16, r24
	menu* submenu = new_menu(mainMenu);
     a10:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <new_menu>
     a14:	fc 01       	movw	r30, r24
	submenu->labels[0] = "laks1";
     a16:	82 e7       	ldi	r24, 0x72	; 114
     a18:	91 e0       	ldi	r25, 0x01	; 1
     a1a:	91 83       	std	Z+1, r25	; 0x01
     a1c:	80 83       	st	Z, r24
	submenu->labels[1] = "laks2";
     a1e:	88 e7       	ldi	r24, 0x78	; 120
     a20:	91 e0       	ldi	r25, 0x01	; 1
     a22:	93 83       	std	Z+3, r25	; 0x03
     a24:	82 83       	std	Z+2, r24	; 0x02
	submenu->labels[2] = "laks3";
     a26:	8e e7       	ldi	r24, 0x7E	; 126
     a28:	91 e0       	ldi	r25, 0x01	; 1
     a2a:	95 83       	std	Z+5, r25	; 0x05
     a2c:	84 83       	std	Z+4, r24	; 0x04
	submenu->labels[3] = "laks4";
     a2e:	84 e8       	ldi	r24, 0x84	; 132
     a30:	91 e0       	ldi	r25, 0x01	; 1
     a32:	97 83       	std	Z+7, r25	; 0x07
     a34:	86 83       	std	Z+6, r24	; 0x06
	submenu->labels[4] = "";
     a36:	8d e0       	ldi	r24, 0x0D	; 13
     a38:	92 e0       	ldi	r25, 0x02	; 2
     a3a:	91 87       	std	Z+9, r25	; 0x09
     a3c:	80 87       	std	Z+8, r24	; 0x08
	submenu->labels[5] = "";
     a3e:	93 87       	std	Z+11, r25	; 0x0b
     a40:	82 87       	std	Z+10, r24	; 0x0a
	submenu->labels[6] = "";
     a42:	95 87       	std	Z+13, r25	; 0x0d
     a44:	84 87       	std	Z+12, r24	; 0x0c
	mainMenu->links[0] = submenu;
     a46:	d8 01       	movw	r26, r16
     a48:	51 96       	adiw	r26, 0x11	; 17
     a4a:	fc 93       	st	X, r31
     a4c:	ee 93       	st	-X, r30
     a4e:	50 97       	sbiw	r26, 0x10	; 16
	//submenu->fun_ptr = printwojak_prototyp;
	write_menu_to_screen(mainMenu);
     a50:	c8 01       	movw	r24, r16
     a52:	0e 94 93 04 	call	0x926	; 0x926 <write_menu_to_screen>
	
	headPointer = &mainMenu;
	
	
	can_init();
     a56:	0e 94 7f 03 	call	0x6fe	; 0x6fe <can_init>
	
	can_message msgToSend;
	msgToSend.data_length = 8;
     a5a:	88 e0       	ldi	r24, 0x08	; 8
     a5c:	8b 83       	std	Y+3, r24	; 0x03
	for(int i = 0; i < 8; i++){
		msgToSend.data[i] = 97+i;
     a5e:	81 e6       	ldi	r24, 0x61	; 97
     a60:	8c 83       	std	Y+4, r24	; 0x04
     a62:	82 e6       	ldi	r24, 0x62	; 98
     a64:	8d 83       	std	Y+5, r24	; 0x05
     a66:	83 e6       	ldi	r24, 0x63	; 99
     a68:	8e 83       	std	Y+6, r24	; 0x06
     a6a:	84 e6       	ldi	r24, 0x64	; 100
     a6c:	8f 83       	std	Y+7, r24	; 0x07
     a6e:	85 e6       	ldi	r24, 0x65	; 101
     a70:	88 87       	std	Y+8, r24	; 0x08
     a72:	86 e6       	ldi	r24, 0x66	; 102
     a74:	89 87       	std	Y+9, r24	; 0x09
     a76:	87 e6       	ldi	r24, 0x67	; 103
     a78:	8a 87       	std	Y+10, r24	; 0x0a
     a7a:	88 e6       	ldi	r24, 0x68	; 104
     a7c:	8b 87       	std	Y+11, r24	; 0x0b
	}
	msgToSend.id = 0xffff;
     a7e:	8f ef       	ldi	r24, 0xFF	; 255
     a80:	9f ef       	ldi	r25, 0xFF	; 255
     a82:	9a 83       	std	Y+2, r25	; 0x02
     a84:	89 83       	std	Y+1, r24	; 0x01
	
	can_message* msgToReceive;
	
	send_can_msg(&msgToSend);
     a86:	ce 01       	movw	r24, r28
     a88:	01 96       	adiw	r24, 0x01	; 1
     a8a:	0e 94 86 03 	call	0x70c	; 0x70c <send_can_msg>
	msgToReceive = receive_can_msg(0);
     a8e:	80 e0       	ldi	r24, 0x00	; 0
     a90:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <receive_can_msg>
     a94:	8c 01       	movw	r16, r24
     a96:	5c 01       	movw	r10, r24
     a98:	bb e0       	ldi	r27, 0x0B	; 11
     a9a:	ab 0e       	add	r10, r27
     a9c:	b1 1c       	adc	r11, r1
	
	while(1){
		for(int i = 0; i < 8; i++){
			printf("\r   %c | %d | %d   \r",msgToReceive->data[i],msgToReceive->data_length,msgToReceive->id);
     a9e:	0f 2e       	mov	r0, r31
     aa0:	fa e8       	ldi	r31, 0x8A	; 138
     aa2:	cf 2e       	mov	r12, r31
     aa4:	f1 e0       	ldi	r31, 0x01	; 1
     aa6:	df 2e       	mov	r13, r31
     aa8:	f0 2d       	mov	r31, r0
     aaa:	78 01       	movw	r14, r16
     aac:	e3 e0       	ldi	r30, 0x03	; 3
     aae:	ee 0e       	add	r14, r30
     ab0:	f1 1c       	adc	r15, r1
     ab2:	d7 01       	movw	r26, r14
     ab4:	8d 91       	ld	r24, X+
     ab6:	7d 01       	movw	r14, r26
     ab8:	f8 01       	movw	r30, r16
     aba:	91 81       	ldd	r25, Z+1	; 0x01
     abc:	9f 93       	push	r25
     abe:	90 81       	ld	r25, Z
     ac0:	9f 93       	push	r25
     ac2:	92 81       	ldd	r25, Z+2	; 0x02
     ac4:	1f 92       	push	r1
     ac6:	9f 93       	push	r25
     ac8:	1f 92       	push	r1
     aca:	8f 93       	push	r24
     acc:	df 92       	push	r13
     ace:	cf 92       	push	r12
     ad0:	0e 94 82 09 	call	0x1304	; 0x1304 <printf>
     ad4:	ff e3       	ldi	r31, 0x3F	; 63
     ad6:	22 e4       	ldi	r18, 0x42	; 66
     ad8:	8f e0       	ldi	r24, 0x0F	; 15
     ada:	f1 50       	subi	r31, 0x01	; 1
     adc:	20 40       	sbci	r18, 0x00	; 0
     ade:	80 40       	sbci	r24, 0x00	; 0
     ae0:	e1 f7       	brne	.-8      	; 0xada <main+0x150>
     ae2:	00 c0       	rjmp	.+0      	; 0xae4 <main+0x15a>
     ae4:	00 00       	nop
	
	send_can_msg(&msgToSend);
	msgToReceive = receive_can_msg(0);
	
	while(1){
		for(int i = 0; i < 8; i++){
     ae6:	0f b6       	in	r0, 0x3f	; 63
     ae8:	f8 94       	cli
     aea:	de bf       	out	0x3e, r29	; 62
     aec:	0f be       	out	0x3f, r0	; 63
     aee:	cd bf       	out	0x3d, r28	; 61
     af0:	ea 14       	cp	r14, r10
     af2:	fb 04       	cpc	r15, r11
     af4:	f1 f6       	brne	.-68     	; 0xab2 <main+0x128>
     af6:	d9 cf       	rjmp	.-78     	; 0xaaa <main+0x120>

00000af8 <oled_init>:
	atmelMap->OLED_CMD[1] = 0xB1;
	atmelMap->OLED_CMD[1] = 0x00;
	atmelMap->OLED_CMD[1] = 0x10;
}
void oled_write(amap* atmelMap){
	atmelMap->OLED_DATA[1] = 0x0F;
     af8:	e0 e0       	ldi	r30, 0x00	; 0
     afa:	f0 e1       	ldi	r31, 0x10	; 16
     afc:	8e ea       	ldi	r24, 0xAE	; 174
     afe:	80 83       	st	Z, r24
     b00:	81 ea       	ldi	r24, 0xA1	; 161
     b02:	80 83       	st	Z, r24
     b04:	8a ed       	ldi	r24, 0xDA	; 218
     b06:	80 83       	st	Z, r24
     b08:	82 e1       	ldi	r24, 0x12	; 18
     b0a:	80 83       	st	Z, r24
     b0c:	88 ec       	ldi	r24, 0xC8	; 200
     b0e:	80 83       	st	Z, r24
     b10:	88 ea       	ldi	r24, 0xA8	; 168
     b12:	80 83       	st	Z, r24
     b14:	8f e3       	ldi	r24, 0x3F	; 63
     b16:	80 83       	st	Z, r24
     b18:	85 ed       	ldi	r24, 0xD5	; 213
     b1a:	80 83       	st	Z, r24
     b1c:	80 e8       	ldi	r24, 0x80	; 128
     b1e:	80 83       	st	Z, r24
     b20:	81 e8       	ldi	r24, 0x81	; 129
     b22:	80 83       	st	Z, r24
     b24:	80 e5       	ldi	r24, 0x50	; 80
     b26:	80 83       	st	Z, r24
     b28:	89 ed       	ldi	r24, 0xD9	; 217
     b2a:	80 83       	st	Z, r24
     b2c:	81 e2       	ldi	r24, 0x21	; 33
     b2e:	80 83       	st	Z, r24
     b30:	80 e2       	ldi	r24, 0x20	; 32
     b32:	80 83       	st	Z, r24
     b34:	82 e0       	ldi	r24, 0x02	; 2
     b36:	80 83       	st	Z, r24
     b38:	8b ed       	ldi	r24, 0xDB	; 219
     b3a:	80 83       	st	Z, r24
     b3c:	80 e3       	ldi	r24, 0x30	; 48
     b3e:	80 83       	st	Z, r24
     b40:	8d ea       	ldi	r24, 0xAD	; 173
     b42:	80 83       	st	Z, r24
     b44:	10 82       	st	Z, r1
     b46:	84 ea       	ldi	r24, 0xA4	; 164
     b48:	80 83       	st	Z, r24
     b4a:	86 ea       	ldi	r24, 0xA6	; 166
     b4c:	80 83       	st	Z, r24
     b4e:	8f ea       	ldi	r24, 0xAF	; 175
     b50:	80 83       	st	Z, r24
     b52:	08 95       	ret

00000b54 <go_to_line>:
     b54:	87 70       	andi	r24, 0x07	; 7
     b56:	80 55       	subi	r24, 0x50	; 80
     b58:	80 93 00 10 	sts	0x1000, r24	; 0x801000 <__bss_end+0xddc>
     b5c:	08 95       	ret

00000b5e <go_to_column>:
     b5e:	98 2f       	mov	r25, r24
     b60:	9f 70       	andi	r25, 0x0F	; 15
     b62:	e0 e0       	ldi	r30, 0x00	; 0
     b64:	f0 e1       	ldi	r31, 0x10	; 16
     b66:	90 83       	st	Z, r25
     b68:	82 95       	swap	r24
     b6a:	8f 70       	andi	r24, 0x0F	; 15
     b6c:	80 5f       	subi	r24, 0xF0	; 240
     b6e:	80 83       	st	Z, r24
     b70:	08 95       	ret

00000b72 <clear_oled>:
}

void clear_oled(amap* atmelMap){
     b72:	1f 93       	push	r17
     b74:	cf 93       	push	r28
     b76:	df 93       	push	r29
     b78:	10 e0       	ldi	r17, 0x00	; 0
	ext_ram[0] = c;
}
void oled_write_data(char c)
{
	volatile char *ext_ram = (char *) 0x1200;
	ext_ram[0] = c;
     b7a:	c0 e0       	ldi	r28, 0x00	; 0
     b7c:	d2 e1       	ldi	r29, 0x12	; 18
	atmelMap->OLED_DATA[1] = 0x0F;
}

void clear_oled(amap* atmelMap){
	for(int i = 0; i < 8 ; i++){
		go_to_line(i);
     b7e:	81 2f       	mov	r24, r17
     b80:	0e 94 aa 05 	call	0xb54	; 0xb54 <go_to_line>
		
		go_to_column(0);
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	0e 94 af 05 	call	0xb5e	; 0xb5e <go_to_column>
     b8a:	80 e8       	ldi	r24, 0x80	; 128
     b8c:	90 e0       	ldi	r25, 0x00	; 0
	ext_ram[0] = c;
}
void oled_write_data(char c)
{
	volatile char *ext_ram = (char *) 0x1200;
	ext_ram[0] = c;
     b8e:	18 82       	st	Y, r1
     b90:	01 97       	sbiw	r24, 0x01	; 1
void clear_oled(amap* atmelMap){
	for(int i = 0; i < 8 ; i++){
		go_to_line(i);
		
		go_to_column(0);
		for(int j = 0; j < 128; j++){
     b92:	e9 f7       	brne	.-6      	; 0xb8e <clear_oled+0x1c>
     b94:	1f 5f       	subi	r17, 0xFF	; 255
void oled_write(amap* atmelMap){
	atmelMap->OLED_DATA[1] = 0x0F;
}

void clear_oled(amap* atmelMap){
	for(int i = 0; i < 8 ; i++){
     b96:	18 30       	cpi	r17, 0x08	; 8
     b98:	91 f7       	brne	.-28     	; 0xb7e <clear_oled+0xc>
		for(int j = 0; j < 128; j++){
			
			oled_write_data(0x00);
		}
	}
}
     b9a:	df 91       	pop	r29
     b9c:	cf 91       	pop	r28
     b9e:	1f 91       	pop	r17
     ba0:	08 95       	ret

00000ba2 <clear_oled_new>:

void clear_oled_new(){
     ba2:	1f 93       	push	r17
     ba4:	cf 93       	push	r28
     ba6:	df 93       	push	r29
     ba8:	10 e0       	ldi	r17, 0x00	; 0
	ext_ram[0] = c;
}
void oled_write_data(char c)
{
	volatile char *ext_ram = (char *) 0x1200;
	ext_ram[0] = c;
     baa:	c0 e0       	ldi	r28, 0x00	; 0
     bac:	d2 e1       	ldi	r29, 0x12	; 18
	}
}

void clear_oled_new(){
	for(int i = 0; i < 8 ; i++){
		go_to_line(i);
     bae:	81 2f       	mov	r24, r17
     bb0:	0e 94 aa 05 	call	0xb54	; 0xb54 <go_to_line>
		
		go_to_column(0);
     bb4:	80 e0       	ldi	r24, 0x00	; 0
     bb6:	0e 94 af 05 	call	0xb5e	; 0xb5e <go_to_column>
     bba:	80 e8       	ldi	r24, 0x80	; 128
     bbc:	90 e0       	ldi	r25, 0x00	; 0
	ext_ram[0] = c;
}
void oled_write_data(char c)
{
	volatile char *ext_ram = (char *) 0x1200;
	ext_ram[0] = c;
     bbe:	18 82       	st	Y, r1
     bc0:	01 97       	sbiw	r24, 0x01	; 1
void clear_oled_new(){
	for(int i = 0; i < 8 ; i++){
		go_to_line(i);
		
		go_to_column(0);
		for(int j = 0; j < 128; j++){
     bc2:	e9 f7       	brne	.-6      	; 0xbbe <clear_oled_new+0x1c>
     bc4:	1f 5f       	subi	r17, 0xFF	; 255
		}
	}
}

void clear_oled_new(){
	for(int i = 0; i < 8 ; i++){
     bc6:	18 30       	cpi	r17, 0x08	; 8
     bc8:	91 f7       	brne	.-28     	; 0xbae <clear_oled_new+0xc>
		for(int j = 0; j < 128; j++){
			
			oled_write_data(0x00);
		}
	}
}
     bca:	df 91       	pop	r29
     bcc:	cf 91       	pop	r28
     bce:	1f 91       	pop	r17
     bd0:	08 95       	ret

00000bd2 <oled_write_char_using_font>:
	}
	
}

void oled_write_char_using_font(char c, uint8_t n){
	uint8_t character = c-32;
     bd2:	80 52       	subi	r24, 0x20	; 32
	
	if(n==8){
     bd4:	68 30       	cpi	r22, 0x08	; 8
     bd6:	f1 f4       	brne	.+60     	; 0xc14 <oled_write_char_using_font+0x42>
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	9c 01       	movw	r18, r24
     bdc:	22 0f       	add	r18, r18
     bde:	33 1f       	adc	r19, r19
     be0:	22 0f       	add	r18, r18
     be2:	33 1f       	adc	r19, r19
     be4:	22 0f       	add	r18, r18
     be6:	33 1f       	adc	r19, r19
     be8:	29 53       	subi	r18, 0x39	; 57
     bea:	3c 4f       	sbci	r19, 0xFC	; 252
     bec:	88 0f       	add	r24, r24
     bee:	99 1f       	adc	r25, r25
     bf0:	88 0f       	add	r24, r24
     bf2:	99 1f       	adc	r25, r25
     bf4:	88 0f       	add	r24, r24
     bf6:	99 1f       	adc	r25, r25
     bf8:	81 53       	subi	r24, 0x31	; 49
     bfa:	9c 4f       	sbci	r25, 0xFC	; 252
	ext_ram[0] = c;
}
void oled_write_data(char c)
{
	volatile char *ext_ram = (char *) 0x1200;
	ext_ram[0] = c;
     bfc:	a0 e0       	ldi	r26, 0x00	; 0
     bfe:	b2 e1       	ldi	r27, 0x12	; 18
void oled_write_char_using_font(char c, uint8_t n){
	uint8_t character = c-32;
	
	if(n==8){
		for (int i=0; i < n; i++) {
			oled_write_data(pgm_read_word(&font8[character][i]));
     c00:	f9 01       	movw	r30, r18
     c02:	45 91       	lpm	r20, Z+
     c04:	54 91       	lpm	r21, Z
	ext_ram[0] = c;
}
void oled_write_data(char c)
{
	volatile char *ext_ram = (char *) 0x1200;
	ext_ram[0] = c;
     c06:	4c 93       	st	X, r20
     c08:	2f 5f       	subi	r18, 0xFF	; 255
     c0a:	3f 4f       	sbci	r19, 0xFF	; 255

void oled_write_char_using_font(char c, uint8_t n){
	uint8_t character = c-32;
	
	if(n==8){
		for (int i=0; i < n; i++) {
     c0c:	82 17       	cp	r24, r18
     c0e:	93 07       	cpc	r25, r19
     c10:	b9 f7       	brne	.-18     	; 0xc00 <oled_write_char_using_font+0x2e>
     c12:	08 95       	ret
			oled_write_data(pgm_read_word(&font8[character][i]));
		}
	}else if(n == 5){
     c14:	65 30       	cpi	r22, 0x05	; 5
     c16:	d1 f4       	brne	.+52     	; 0xc4c <oled_write_char_using_font+0x7a>
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	9c 01       	movw	r18, r24
     c1c:	22 0f       	add	r18, r18
     c1e:	33 1f       	adc	r19, r19
     c20:	22 0f       	add	r18, r18
     c22:	33 1f       	adc	r19, r19
     c24:	82 0f       	add	r24, r18
     c26:	93 1f       	adc	r25, r19
     c28:	20 e0       	ldi	r18, 0x00	; 0
     c2a:	30 e0       	ldi	r19, 0x00	; 0
	ext_ram[0] = c;
}
void oled_write_data(char c)
{
	volatile char *ext_ram = (char *) 0x1200;
	ext_ram[0] = c;
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b2 e1       	ldi	r27, 0x12	; 18
		for (int i=0; i < n; i++) {
			oled_write_data(pgm_read_word(&font8[character][i]));
		}
	}else if(n == 5){
		for (int i=0; i < n; i++) {
			oled_write_data(pgm_read_word(&font5[character][i]));
     c30:	f9 01       	movw	r30, r18
     c32:	e8 0f       	add	r30, r24
     c34:	f9 1f       	adc	r31, r25
     c36:	e4 51       	subi	r30, 0x14	; 20
     c38:	fe 4f       	sbci	r31, 0xFE	; 254
     c3a:	45 91       	lpm	r20, Z+
     c3c:	54 91       	lpm	r21, Z
	ext_ram[0] = c;
}
void oled_write_data(char c)
{
	volatile char *ext_ram = (char *) 0x1200;
	ext_ram[0] = c;
     c3e:	4c 93       	st	X, r20
	if(n==8){
		for (int i=0; i < n; i++) {
			oled_write_data(pgm_read_word(&font8[character][i]));
		}
	}else if(n == 5){
		for (int i=0; i < n; i++) {
     c40:	2f 5f       	subi	r18, 0xFF	; 255
     c42:	3f 4f       	sbci	r19, 0xFF	; 255
     c44:	25 30       	cpi	r18, 0x05	; 5
     c46:	31 05       	cpc	r19, r1
     c48:	99 f7       	brne	.-26     	; 0xc30 <oled_write_char_using_font+0x5e>
     c4a:	08 95       	ret
			oled_write_data(pgm_read_word(&font5[character][i]));
		}
	}else if(n == 4){
     c4c:	64 30       	cpi	r22, 0x04	; 4
     c4e:	b1 f4       	brne	.+44     	; 0xc7c <oled_write_char_using_font+0xaa>
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	88 0f       	add	r24, r24
     c54:	99 1f       	adc	r25, r25
     c56:	88 0f       	add	r24, r24
     c58:	99 1f       	adc	r25, r25
     c5a:	20 e0       	ldi	r18, 0x00	; 0
     c5c:	30 e0       	ldi	r19, 0x00	; 0
	ext_ram[0] = c;
}
void oled_write_data(char c)
{
	volatile char *ext_ram = (char *) 0x1200;
	ext_ram[0] = c;
     c5e:	a0 e0       	ldi	r26, 0x00	; 0
     c60:	b2 e1       	ldi	r27, 0x12	; 18
		for (int i=0; i < n; i++) {
			oled_write_data(pgm_read_word(&font5[character][i]));
		}
	}else if(n == 4){
		for (int i=0; i < n; i++) {
			oled_write_data(pgm_read_word(&font4[character][i]));
     c62:	f9 01       	movw	r30, r18
     c64:	e8 0f       	add	r30, r24
     c66:	f9 1f       	adc	r31, r25
     c68:	e0 59       	subi	r30, 0x90	; 144
     c6a:	ff 4f       	sbci	r31, 0xFF	; 255
     c6c:	45 91       	lpm	r20, Z+
     c6e:	54 91       	lpm	r21, Z
	ext_ram[0] = c;
}
void oled_write_data(char c)
{
	volatile char *ext_ram = (char *) 0x1200;
	ext_ram[0] = c;
     c70:	4c 93       	st	X, r20
	}else if(n == 5){
		for (int i=0; i < n; i++) {
			oled_write_data(pgm_read_word(&font5[character][i]));
		}
	}else if(n == 4){
		for (int i=0; i < n; i++) {
     c72:	2f 5f       	subi	r18, 0xFF	; 255
     c74:	3f 4f       	sbci	r19, 0xFF	; 255
     c76:	24 30       	cpi	r18, 0x04	; 4
     c78:	31 05       	cpc	r19, r1
     c7a:	99 f7       	brne	.-26     	; 0xc62 <oled_write_char_using_font+0x90>
     c7c:	08 95       	ret

00000c7e <oled_write_string>:
			oled_write_data(0x00);
		}
	}
}

void oled_write_string(uint8_t startline, char* c, uint8_t n){
     c7e:	8f 92       	push	r8
     c80:	9f 92       	push	r9
     c82:	af 92       	push	r10
     c84:	bf 92       	push	r11
     c86:	cf 92       	push	r12
     c88:	df 92       	push	r13
     c8a:	ef 92       	push	r14
     c8c:	ff 92       	push	r15
     c8e:	0f 93       	push	r16
     c90:	1f 93       	push	r17
     c92:	cf 93       	push	r28
     c94:	df 93       	push	r29
     c96:	88 2e       	mov	r8, r24
     c98:	8b 01       	movw	r16, r22
     c9a:	94 2e       	mov	r9, r20
	go_to_line(startline);
     c9c:	0e 94 aa 05 	call	0xb54	; 0xb54 <go_to_line>
     ca0:	78 01       	movw	r14, r16
	
	for (int i=0; i < strlen(c); i++) {
     ca2:	c0 e0       	ldi	r28, 0x00	; 0
     ca4:	d0 e0       	ldi	r29, 0x00	; 0
		if(i%((int)128/n) == 0){
     ca6:	a9 2c       	mov	r10, r9
     ca8:	b1 2c       	mov	r11, r1
     caa:	68 94       	set
     cac:	cc 24       	eor	r12, r12
     cae:	c7 f8       	bld	r12, 7
     cb0:	d1 2c       	mov	r13, r1
}

void oled_write_string(uint8_t startline, char* c, uint8_t n){
	go_to_line(startline);
	
	for (int i=0; i < strlen(c); i++) {
     cb2:	19 c0       	rjmp	.+50     	; 0xce6 <oled_write_string+0x68>
		if(i%((int)128/n) == 0){
     cb4:	c6 01       	movw	r24, r12
     cb6:	b5 01       	movw	r22, r10
     cb8:	0e 94 92 07 	call	0xf24	; 0xf24 <__divmodhi4>
     cbc:	9b 01       	movw	r18, r22
     cbe:	ce 01       	movw	r24, r28
     cc0:	0e 94 92 07 	call	0xf24	; 0xf24 <__divmodhi4>
     cc4:	89 2b       	or	r24, r25
     cc6:	41 f4       	brne	.+16     	; 0xcd8 <oled_write_string+0x5a>
			go_to_line(startline+i/((int)128/n));
     cc8:	ce 01       	movw	r24, r28
     cca:	b9 01       	movw	r22, r18
     ccc:	0e 94 92 07 	call	0xf24	; 0xf24 <__divmodhi4>
     cd0:	88 2d       	mov	r24, r8
     cd2:	86 0f       	add	r24, r22
     cd4:	0e 94 aa 05 	call	0xb54	; 0xb54 <go_to_line>
		}
		oled_write_char_using_font(c[i],n);
     cd8:	69 2d       	mov	r22, r9
     cda:	f7 01       	movw	r30, r14
     cdc:	81 91       	ld	r24, Z+
     cde:	7f 01       	movw	r14, r30
     ce0:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <oled_write_char_using_font>
}

void oled_write_string(uint8_t startline, char* c, uint8_t n){
	go_to_line(startline);
	
	for (int i=0; i < strlen(c); i++) {
     ce4:	21 96       	adiw	r28, 0x01	; 1
     ce6:	f8 01       	movw	r30, r16
     ce8:	01 90       	ld	r0, Z+
     cea:	00 20       	and	r0, r0
     cec:	e9 f7       	brne	.-6      	; 0xce8 <oled_write_string+0x6a>
     cee:	31 97       	sbiw	r30, 0x01	; 1
     cf0:	e0 1b       	sub	r30, r16
     cf2:	f1 0b       	sbc	r31, r17
     cf4:	ce 17       	cp	r28, r30
     cf6:	df 07       	cpc	r29, r31
     cf8:	e8 f2       	brcs	.-70     	; 0xcb4 <oled_write_string+0x36>
		}
		oled_write_char_using_font(c[i],n);
		
	}
	
}
     cfa:	df 91       	pop	r29
     cfc:	cf 91       	pop	r28
     cfe:	1f 91       	pop	r17
     d00:	0f 91       	pop	r16
     d02:	ff 90       	pop	r15
     d04:	ef 90       	pop	r14
     d06:	df 90       	pop	r13
     d08:	cf 90       	pop	r12
     d0a:	bf 90       	pop	r11
     d0c:	af 90       	pop	r10
     d0e:	9f 90       	pop	r9
     d10:	8f 90       	pop	r8
     d12:	08 95       	ret

00000d14 <oled_write_inverted_char_using_font>:
	}
	
}

void oled_write_inverted_char_using_font(char c, uint8_t n){
	uint8_t character = c-32;
     d14:	80 52       	subi	r24, 0x20	; 32
	
	if(n==8){
     d16:	68 30       	cpi	r22, 0x08	; 8
     d18:	f9 f4       	brne	.+62     	; 0xd58 <oled_write_inverted_char_using_font+0x44>
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	9c 01       	movw	r18, r24
     d1e:	22 0f       	add	r18, r18
     d20:	33 1f       	adc	r19, r19
     d22:	22 0f       	add	r18, r18
     d24:	33 1f       	adc	r19, r19
     d26:	22 0f       	add	r18, r18
     d28:	33 1f       	adc	r19, r19
     d2a:	29 53       	subi	r18, 0x39	; 57
     d2c:	3c 4f       	sbci	r19, 0xFC	; 252
     d2e:	88 0f       	add	r24, r24
     d30:	99 1f       	adc	r25, r25
     d32:	88 0f       	add	r24, r24
     d34:	99 1f       	adc	r25, r25
     d36:	88 0f       	add	r24, r24
     d38:	99 1f       	adc	r25, r25
     d3a:	81 53       	subi	r24, 0x31	; 49
     d3c:	9c 4f       	sbci	r25, 0xFC	; 252
	ext_ram[0] = c;
}
void oled_write_data(char c)
{
	volatile char *ext_ram = (char *) 0x1200;
	ext_ram[0] = c;
     d3e:	a0 e0       	ldi	r26, 0x00	; 0
     d40:	b2 e1       	ldi	r27, 0x12	; 18
void oled_write_inverted_char_using_font(char c, uint8_t n){
	uint8_t character = c-32;
	
	if(n==8){
		for (int i=0; i < n; i++) {
			oled_write_data(~pgm_read_word(&font8[character][i]));
     d42:	f9 01       	movw	r30, r18
     d44:	45 91       	lpm	r20, Z+
     d46:	54 91       	lpm	r21, Z
     d48:	40 95       	com	r20
	ext_ram[0] = c;
}
void oled_write_data(char c)
{
	volatile char *ext_ram = (char *) 0x1200;
	ext_ram[0] = c;
     d4a:	4c 93       	st	X, r20
     d4c:	2f 5f       	subi	r18, 0xFF	; 255
     d4e:	3f 4f       	sbci	r19, 0xFF	; 255

void oled_write_inverted_char_using_font(char c, uint8_t n){
	uint8_t character = c-32;
	
	if(n==8){
		for (int i=0; i < n; i++) {
     d50:	82 17       	cp	r24, r18
     d52:	93 07       	cpc	r25, r19
     d54:	b1 f7       	brne	.-20     	; 0xd42 <oled_write_inverted_char_using_font+0x2e>
     d56:	08 95       	ret
			oled_write_data(~pgm_read_word(&font8[character][i]));
		}
		}else if(n == 5){
     d58:	65 30       	cpi	r22, 0x05	; 5
     d5a:	d9 f4       	brne	.+54     	; 0xd92 <oled_write_inverted_char_using_font+0x7e>
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	9c 01       	movw	r18, r24
     d60:	22 0f       	add	r18, r18
     d62:	33 1f       	adc	r19, r19
     d64:	22 0f       	add	r18, r18
     d66:	33 1f       	adc	r19, r19
     d68:	82 0f       	add	r24, r18
     d6a:	93 1f       	adc	r25, r19
     d6c:	20 e0       	ldi	r18, 0x00	; 0
     d6e:	30 e0       	ldi	r19, 0x00	; 0
	ext_ram[0] = c;
}
void oled_write_data(char c)
{
	volatile char *ext_ram = (char *) 0x1200;
	ext_ram[0] = c;
     d70:	a0 e0       	ldi	r26, 0x00	; 0
     d72:	b2 e1       	ldi	r27, 0x12	; 18
		for (int i=0; i < n; i++) {
			oled_write_data(~pgm_read_word(&font8[character][i]));
		}
		}else if(n == 5){
		for (int i=0; i < n; i++) {
			oled_write_data(~pgm_read_word(&font5[character][i]));
     d74:	f9 01       	movw	r30, r18
     d76:	e8 0f       	add	r30, r24
     d78:	f9 1f       	adc	r31, r25
     d7a:	e4 51       	subi	r30, 0x14	; 20
     d7c:	fe 4f       	sbci	r31, 0xFE	; 254
     d7e:	45 91       	lpm	r20, Z+
     d80:	54 91       	lpm	r21, Z
     d82:	40 95       	com	r20
	ext_ram[0] = c;
}
void oled_write_data(char c)
{
	volatile char *ext_ram = (char *) 0x1200;
	ext_ram[0] = c;
     d84:	4c 93       	st	X, r20
	if(n==8){
		for (int i=0; i < n; i++) {
			oled_write_data(~pgm_read_word(&font8[character][i]));
		}
		}else if(n == 5){
		for (int i=0; i < n; i++) {
     d86:	2f 5f       	subi	r18, 0xFF	; 255
     d88:	3f 4f       	sbci	r19, 0xFF	; 255
     d8a:	25 30       	cpi	r18, 0x05	; 5
     d8c:	31 05       	cpc	r19, r1
     d8e:	91 f7       	brne	.-28     	; 0xd74 <oled_write_inverted_char_using_font+0x60>
     d90:	08 95       	ret
			oled_write_data(~pgm_read_word(&font5[character][i]));
		}
		}else if(n == 4){
     d92:	64 30       	cpi	r22, 0x04	; 4
     d94:	b9 f4       	brne	.+46     	; 0xdc4 <oled_write_inverted_char_using_font+0xb0>
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	88 0f       	add	r24, r24
     d9a:	99 1f       	adc	r25, r25
     d9c:	88 0f       	add	r24, r24
     d9e:	99 1f       	adc	r25, r25
     da0:	20 e0       	ldi	r18, 0x00	; 0
     da2:	30 e0       	ldi	r19, 0x00	; 0
	ext_ram[0] = c;
}
void oled_write_data(char c)
{
	volatile char *ext_ram = (char *) 0x1200;
	ext_ram[0] = c;
     da4:	a0 e0       	ldi	r26, 0x00	; 0
     da6:	b2 e1       	ldi	r27, 0x12	; 18
		for (int i=0; i < n; i++) {
			oled_write_data(~pgm_read_word(&font5[character][i]));
		}
		}else if(n == 4){
		for (int i=0; i < n; i++) {
			oled_write_data(~pgm_read_word(&font4[character][i]));
     da8:	f9 01       	movw	r30, r18
     daa:	e8 0f       	add	r30, r24
     dac:	f9 1f       	adc	r31, r25
     dae:	e0 59       	subi	r30, 0x90	; 144
     db0:	ff 4f       	sbci	r31, 0xFF	; 255
     db2:	45 91       	lpm	r20, Z+
     db4:	54 91       	lpm	r21, Z
     db6:	40 95       	com	r20
	ext_ram[0] = c;
}
void oled_write_data(char c)
{
	volatile char *ext_ram = (char *) 0x1200;
	ext_ram[0] = c;
     db8:	4c 93       	st	X, r20
		}else if(n == 5){
		for (int i=0; i < n; i++) {
			oled_write_data(~pgm_read_word(&font5[character][i]));
		}
		}else if(n == 4){
		for (int i=0; i < n; i++) {
     dba:	2f 5f       	subi	r18, 0xFF	; 255
     dbc:	3f 4f       	sbci	r19, 0xFF	; 255
     dbe:	24 30       	cpi	r18, 0x04	; 4
     dc0:	31 05       	cpc	r19, r1
     dc2:	91 f7       	brne	.-28     	; 0xda8 <oled_write_inverted_char_using_font+0x94>
     dc4:	08 95       	ret

00000dc6 <oled_write_string_inverted>:
		
	}
	
}

void oled_write_string_inverted(uint8_t startline, char* c, uint8_t n){
     dc6:	8f 92       	push	r8
     dc8:	9f 92       	push	r9
     dca:	af 92       	push	r10
     dcc:	bf 92       	push	r11
     dce:	cf 92       	push	r12
     dd0:	df 92       	push	r13
     dd2:	ef 92       	push	r14
     dd4:	ff 92       	push	r15
     dd6:	0f 93       	push	r16
     dd8:	1f 93       	push	r17
     dda:	cf 93       	push	r28
     ddc:	df 93       	push	r29
     dde:	88 2e       	mov	r8, r24
     de0:	8b 01       	movw	r16, r22
     de2:	94 2e       	mov	r9, r20
	go_to_line(startline);
     de4:	0e 94 aa 05 	call	0xb54	; 0xb54 <go_to_line>
     de8:	78 01       	movw	r14, r16
	
	for (int i=0; i < strlen(c); i++) {
     dea:	c0 e0       	ldi	r28, 0x00	; 0
     dec:	d0 e0       	ldi	r29, 0x00	; 0
		if(i%((int)128/n) == 0){
     dee:	a9 2c       	mov	r10, r9
     df0:	b1 2c       	mov	r11, r1
     df2:	68 94       	set
     df4:	cc 24       	eor	r12, r12
     df6:	c7 f8       	bld	r12, 7
     df8:	d1 2c       	mov	r13, r1
}

void oled_write_string_inverted(uint8_t startline, char* c, uint8_t n){
	go_to_line(startline);
	
	for (int i=0; i < strlen(c); i++) {
     dfa:	19 c0       	rjmp	.+50     	; 0xe2e <oled_write_string_inverted+0x68>
		if(i%((int)128/n) == 0){
     dfc:	c6 01       	movw	r24, r12
     dfe:	b5 01       	movw	r22, r10
     e00:	0e 94 92 07 	call	0xf24	; 0xf24 <__divmodhi4>
     e04:	9b 01       	movw	r18, r22
     e06:	ce 01       	movw	r24, r28
     e08:	0e 94 92 07 	call	0xf24	; 0xf24 <__divmodhi4>
     e0c:	89 2b       	or	r24, r25
     e0e:	41 f4       	brne	.+16     	; 0xe20 <oled_write_string_inverted+0x5a>
			go_to_line(startline+i/((int)128/n));
     e10:	ce 01       	movw	r24, r28
     e12:	b9 01       	movw	r22, r18
     e14:	0e 94 92 07 	call	0xf24	; 0xf24 <__divmodhi4>
     e18:	88 2d       	mov	r24, r8
     e1a:	86 0f       	add	r24, r22
     e1c:	0e 94 aa 05 	call	0xb54	; 0xb54 <go_to_line>
		}
		oled_write_inverted_char_using_font(c[i],n);
     e20:	69 2d       	mov	r22, r9
     e22:	f7 01       	movw	r30, r14
     e24:	81 91       	ld	r24, Z+
     e26:	7f 01       	movw	r14, r30
     e28:	0e 94 8a 06 	call	0xd14	; 0xd14 <oled_write_inverted_char_using_font>
}

void oled_write_string_inverted(uint8_t startline, char* c, uint8_t n){
	go_to_line(startline);
	
	for (int i=0; i < strlen(c); i++) {
     e2c:	21 96       	adiw	r28, 0x01	; 1
     e2e:	f8 01       	movw	r30, r16
     e30:	01 90       	ld	r0, Z+
     e32:	00 20       	and	r0, r0
     e34:	e9 f7       	brne	.-6      	; 0xe30 <oled_write_string_inverted+0x6a>
     e36:	31 97       	sbiw	r30, 0x01	; 1
     e38:	e0 1b       	sub	r30, r16
     e3a:	f1 0b       	sbc	r31, r17
     e3c:	ce 17       	cp	r28, r30
     e3e:	df 07       	cpc	r29, r31
     e40:	e8 f2       	brcs	.-70     	; 0xdfc <oled_write_string_inverted+0x36>
		}
		oled_write_inverted_char_using_font(c[i],n);
		
	}
	
}
     e42:	df 91       	pop	r29
     e44:	cf 91       	pop	r28
     e46:	1f 91       	pop	r17
     e48:	0f 91       	pop	r16
     e4a:	ff 90       	pop	r15
     e4c:	ef 90       	pop	r14
     e4e:	df 90       	pop	r13
     e50:	cf 90       	pop	r12
     e52:	bf 90       	pop	r11
     e54:	af 90       	pop	r10
     e56:	9f 90       	pop	r9
     e58:	8f 90       	pop	r8
     e5a:	08 95       	ret

00000e5c <SRAM_test>:
#include "sram_test.h"
    void SRAM_test(void)
    {
     e5c:	ef 92       	push	r14
     e5e:	ff 92       	push	r15
     e60:	0f 93       	push	r16
     e62:	1f 93       	push	r17
     e64:	cf 93       	push	r28
     e66:	df 93       	push	r29
		volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
        uint16_t ext_ram_size = 0x800;
        uint16_t write_errors = 0;
        uint16_t retrieval_errors = 0;
        printf("Starting SRAM test...\n");
     e68:	8f e9       	ldi	r24, 0x9F	; 159
     e6a:	91 e0       	ldi	r25, 0x01	; 1
     e6c:	0e 94 9f 09 	call	0x133e	; 0x133e <puts>
        // rand() stores some internal state, so calling this function in a loop will
        // yield different seeds each time (unless srand() is called before this function)
        uint16_t seed = rand();
     e70:	0e 94 27 09 	call	0x124e	; 0x124e <rand>
     e74:	7c 01       	movw	r14, r24
        // Write phase: Immediately check that the correct value was stored
        srand(seed);
     e76:	0e 94 2c 09 	call	0x1258	; 0x1258 <srand>
     e7a:	c0 e0       	ldi	r28, 0x00	; 0
     e7c:	d8 e1       	ldi	r29, 0x18	; 24
#include "sram_test.h"
    void SRAM_test(void)
    {
		volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
        uint16_t ext_ram_size = 0x800;
        uint16_t write_errors = 0;
     e7e:	00 e0       	ldi	r16, 0x00	; 0
     e80:	10 e0       	ldi	r17, 0x00	; 0
        // yield different seeds each time (unless srand() is called before this function)
        uint16_t seed = rand();
        // Write phase: Immediately check that the correct value was stored
        srand(seed);
        for (uint16_t i = 0; i < ext_ram_size; i++) {
            uint8_t some_value = rand();
     e82:	0e 94 27 09 	call	0x124e	; 0x124e <rand>
            ext_ram[i] = some_value;
     e86:	88 83       	st	Y, r24
            uint8_t retreived_value = ext_ram[i];
     e88:	98 81       	ld	r25, Y
            if (retreived_value != some_value) {
     e8a:	89 17       	cp	r24, r25
     e8c:	11 f0       	breq	.+4      	; 0xe92 <SRAM_test+0x36>
                //printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
                write_errors++;
     e8e:	0f 5f       	subi	r16, 0xFF	; 255
     e90:	1f 4f       	sbci	r17, 0xFF	; 255
     e92:	21 96       	adiw	r28, 0x01	; 1
        // rand() stores some internal state, so calling this function in a loop will
        // yield different seeds each time (unless srand() is called before this function)
        uint16_t seed = rand();
        // Write phase: Immediately check that the correct value was stored
        srand(seed);
        for (uint16_t i = 0; i < ext_ram_size; i++) {
     e94:	c1 15       	cp	r28, r1
     e96:	80 e2       	ldi	r24, 0x20	; 32
     e98:	d8 07       	cpc	r29, r24
     e9a:	99 f7       	brne	.-26     	; 0xe82 <SRAM_test+0x26>
                //printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
                write_errors++;
            }
        }
        // Retrieval phase: Check that no values were changed during or after the write phase
        srand(seed);
     e9c:	c7 01       	movw	r24, r14
     e9e:	0e 94 2c 09 	call	0x1258	; 0x1258 <srand>
     ea2:	c0 e0       	ldi	r28, 0x00	; 0
     ea4:	d8 e1       	ldi	r29, 0x18	; 24
    void SRAM_test(void)
    {
		volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
        uint16_t ext_ram_size = 0x800;
        uint16_t write_errors = 0;
        uint16_t retrieval_errors = 0;
     ea6:	e1 2c       	mov	r14, r1
     ea8:	f1 2c       	mov	r15, r1
        }
        // Retrieval phase: Check that no values were changed during or after the write phase
        srand(seed);
        // reset the PRNG to the state it had before the write phase
        for (uint16_t i = 0; i < ext_ram_size; i++) {
            uint8_t some_value = rand();
     eaa:	0e 94 27 09 	call	0x124e	; 0x124e <rand>
            uint8_t retreived_value = ext_ram[i];
     eae:	98 81       	ld	r25, Y
            if (retreived_value != some_value) {
     eb0:	98 17       	cp	r25, r24
     eb2:	19 f0       	breq	.+6      	; 0xeba <SRAM_test+0x5e>
               // printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
                retrieval_errors++;
     eb4:	8f ef       	ldi	r24, 0xFF	; 255
     eb6:	e8 1a       	sub	r14, r24
     eb8:	f8 0a       	sbc	r15, r24
     eba:	21 96       	adiw	r28, 0x01	; 1
            }
        }
        // Retrieval phase: Check that no values were changed during or after the write phase
        srand(seed);
        // reset the PRNG to the state it had before the write phase
        for (uint16_t i = 0; i < ext_ram_size; i++) {
     ebc:	c1 15       	cp	r28, r1
     ebe:	80 e2       	ldi	r24, 0x20	; 32
     ec0:	d8 07       	cpc	r29, r24
     ec2:	99 f7       	brne	.-26     	; 0xeaa <SRAM_test+0x4e>
            if (retreived_value != some_value) {
               // printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
                retrieval_errors++;
            }
        }
        printf("SRAM test completed with \n%4d errors in write phase and \n%4d errors in retrieval phase\n\n", write_errors, retrieval_errors);
     ec4:	ff 92       	push	r15
     ec6:	ef 92       	push	r14
     ec8:	1f 93       	push	r17
     eca:	0f 93       	push	r16
     ecc:	85 eb       	ldi	r24, 0xB5	; 181
     ece:	91 e0       	ldi	r25, 0x01	; 1
     ed0:	9f 93       	push	r25
     ed2:	8f 93       	push	r24
     ed4:	0e 94 82 09 	call	0x1304	; 0x1304 <printf>
     ed8:	0f 90       	pop	r0
     eda:	0f 90       	pop	r0
     edc:	0f 90       	pop	r0
     ede:	0f 90       	pop	r0
     ee0:	0f 90       	pop	r0
     ee2:	0f 90       	pop	r0
     ee4:	df 91       	pop	r29
     ee6:	cf 91       	pop	r28
     ee8:	1f 91       	pop	r17
     eea:	0f 91       	pop	r16
     eec:	ff 90       	pop	r15
     eee:	ef 90       	pop	r14
     ef0:	08 95       	ret

00000ef2 <USART_Transmit>:
	UCSR1C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
	clear_bit(UCSR0C, 0); // Clock polarity
	fdevopen(USART_Transmit, USART_Receive);
}
void USART_Transmit(unsigned char data){
	while (!(UCSR0A & (1<<UDRE0)));
     ef2:	5d 9b       	sbis	0x0b, 5	; 11
     ef4:	fe cf       	rjmp	.-4      	; 0xef2 <USART_Transmit>
	
	UDR0 = data;
     ef6:	8c b9       	out	0x0c, r24	; 12
     ef8:	08 95       	ret

00000efa <USART_Receive>:
}

unsigned int USART_Receive(void)
{
	
	while (!(UCSR0A & (1<<RXC0)));
     efa:	5f 9b       	sbis	0x0b, 7	; 11
     efc:	fe cf       	rjmp	.-4      	; 0xefa <USART_Receive>
	

	return UDR0;
     efe:	8c b1       	in	r24, 0x0c	; 12
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	08 95       	ret

00000f04 <USART_Init>:
#include <stdio.h>
#define clear_bit( reg, bit ) (reg &= ~(1 << bit))

void USART_Init (unsigned int ubrr ){
	
	UBRR0H = (unsigned char)(ubrr>>8);
     f04:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)ubrr;
     f06:	89 b9       	out	0x09, r24	; 9
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     f08:	88 e1       	ldi	r24, 0x18	; 24
     f0a:	8a b9       	out	0x0a, r24	; 10
	
	UCSR1C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
     f0c:	8e e8       	ldi	r24, 0x8E	; 142
     f0e:	8c bf       	out	0x3c, r24	; 60
	clear_bit(UCSR0C, 0); // Clock polarity
     f10:	80 b5       	in	r24, 0x20	; 32
     f12:	8e 7f       	andi	r24, 0xFE	; 254
     f14:	80 bd       	out	0x20, r24	; 32
	fdevopen(USART_Transmit, USART_Receive);
     f16:	6d e7       	ldi	r22, 0x7D	; 125
     f18:	77 e0       	ldi	r23, 0x07	; 7
     f1a:	89 e7       	ldi	r24, 0x79	; 121
     f1c:	97 e0       	ldi	r25, 0x07	; 7
     f1e:	0e 94 37 09 	call	0x126e	; 0x126e <fdevopen>
     f22:	08 95       	ret

00000f24 <__divmodhi4>:
     f24:	97 fb       	bst	r25, 7
     f26:	07 2e       	mov	r0, r23
     f28:	16 f4       	brtc	.+4      	; 0xf2e <__divmodhi4+0xa>
     f2a:	00 94       	com	r0
     f2c:	07 d0       	rcall	.+14     	; 0xf3c <__divmodhi4_neg1>
     f2e:	77 fd       	sbrc	r23, 7
     f30:	09 d0       	rcall	.+18     	; 0xf44 <__divmodhi4_neg2>
     f32:	0e 94 a6 07 	call	0xf4c	; 0xf4c <__udivmodhi4>
     f36:	07 fc       	sbrc	r0, 7
     f38:	05 d0       	rcall	.+10     	; 0xf44 <__divmodhi4_neg2>
     f3a:	3e f4       	brtc	.+14     	; 0xf4a <__divmodhi4_exit>

00000f3c <__divmodhi4_neg1>:
     f3c:	90 95       	com	r25
     f3e:	81 95       	neg	r24
     f40:	9f 4f       	sbci	r25, 0xFF	; 255
     f42:	08 95       	ret

00000f44 <__divmodhi4_neg2>:
     f44:	70 95       	com	r23
     f46:	61 95       	neg	r22
     f48:	7f 4f       	sbci	r23, 0xFF	; 255

00000f4a <__divmodhi4_exit>:
     f4a:	08 95       	ret

00000f4c <__udivmodhi4>:
     f4c:	aa 1b       	sub	r26, r26
     f4e:	bb 1b       	sub	r27, r27
     f50:	51 e1       	ldi	r21, 0x11	; 17
     f52:	07 c0       	rjmp	.+14     	; 0xf62 <__udivmodhi4_ep>

00000f54 <__udivmodhi4_loop>:
     f54:	aa 1f       	adc	r26, r26
     f56:	bb 1f       	adc	r27, r27
     f58:	a6 17       	cp	r26, r22
     f5a:	b7 07       	cpc	r27, r23
     f5c:	10 f0       	brcs	.+4      	; 0xf62 <__udivmodhi4_ep>
     f5e:	a6 1b       	sub	r26, r22
     f60:	b7 0b       	sbc	r27, r23

00000f62 <__udivmodhi4_ep>:
     f62:	88 1f       	adc	r24, r24
     f64:	99 1f       	adc	r25, r25
     f66:	5a 95       	dec	r21
     f68:	a9 f7       	brne	.-22     	; 0xf54 <__udivmodhi4_loop>
     f6a:	80 95       	com	r24
     f6c:	90 95       	com	r25
     f6e:	bc 01       	movw	r22, r24
     f70:	cd 01       	movw	r24, r26
     f72:	08 95       	ret

00000f74 <malloc>:
     f74:	0f 93       	push	r16
     f76:	1f 93       	push	r17
     f78:	cf 93       	push	r28
     f7a:	df 93       	push	r29
     f7c:	82 30       	cpi	r24, 0x02	; 2
     f7e:	91 05       	cpc	r25, r1
     f80:	10 f4       	brcc	.+4      	; 0xf86 <malloc+0x12>
     f82:	82 e0       	ldi	r24, 0x02	; 2
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	e0 91 1c 02 	lds	r30, 0x021C	; 0x80021c <__flp>
     f8a:	f0 91 1d 02 	lds	r31, 0x021D	; 0x80021d <__flp+0x1>
     f8e:	20 e0       	ldi	r18, 0x00	; 0
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	a0 e0       	ldi	r26, 0x00	; 0
     f94:	b0 e0       	ldi	r27, 0x00	; 0
     f96:	30 97       	sbiw	r30, 0x00	; 0
     f98:	19 f1       	breq	.+70     	; 0xfe0 <malloc+0x6c>
     f9a:	40 81       	ld	r20, Z
     f9c:	51 81       	ldd	r21, Z+1	; 0x01
     f9e:	02 81       	ldd	r16, Z+2	; 0x02
     fa0:	13 81       	ldd	r17, Z+3	; 0x03
     fa2:	48 17       	cp	r20, r24
     fa4:	59 07       	cpc	r21, r25
     fa6:	c8 f0       	brcs	.+50     	; 0xfda <malloc+0x66>
     fa8:	84 17       	cp	r24, r20
     faa:	95 07       	cpc	r25, r21
     fac:	69 f4       	brne	.+26     	; 0xfc8 <malloc+0x54>
     fae:	10 97       	sbiw	r26, 0x00	; 0
     fb0:	31 f0       	breq	.+12     	; 0xfbe <malloc+0x4a>
     fb2:	12 96       	adiw	r26, 0x02	; 2
     fb4:	0c 93       	st	X, r16
     fb6:	12 97       	sbiw	r26, 0x02	; 2
     fb8:	13 96       	adiw	r26, 0x03	; 3
     fba:	1c 93       	st	X, r17
     fbc:	27 c0       	rjmp	.+78     	; 0x100c <malloc+0x98>
     fbe:	00 93 1c 02 	sts	0x021C, r16	; 0x80021c <__flp>
     fc2:	10 93 1d 02 	sts	0x021D, r17	; 0x80021d <__flp+0x1>
     fc6:	22 c0       	rjmp	.+68     	; 0x100c <malloc+0x98>
     fc8:	21 15       	cp	r18, r1
     fca:	31 05       	cpc	r19, r1
     fcc:	19 f0       	breq	.+6      	; 0xfd4 <malloc+0x60>
     fce:	42 17       	cp	r20, r18
     fd0:	53 07       	cpc	r21, r19
     fd2:	18 f4       	brcc	.+6      	; 0xfda <malloc+0x66>
     fd4:	9a 01       	movw	r18, r20
     fd6:	bd 01       	movw	r22, r26
     fd8:	ef 01       	movw	r28, r30
     fda:	df 01       	movw	r26, r30
     fdc:	f8 01       	movw	r30, r16
     fde:	db cf       	rjmp	.-74     	; 0xf96 <malloc+0x22>
     fe0:	21 15       	cp	r18, r1
     fe2:	31 05       	cpc	r19, r1
     fe4:	f9 f0       	breq	.+62     	; 0x1024 <malloc+0xb0>
     fe6:	28 1b       	sub	r18, r24
     fe8:	39 0b       	sbc	r19, r25
     fea:	24 30       	cpi	r18, 0x04	; 4
     fec:	31 05       	cpc	r19, r1
     fee:	80 f4       	brcc	.+32     	; 0x1010 <malloc+0x9c>
     ff0:	8a 81       	ldd	r24, Y+2	; 0x02
     ff2:	9b 81       	ldd	r25, Y+3	; 0x03
     ff4:	61 15       	cp	r22, r1
     ff6:	71 05       	cpc	r23, r1
     ff8:	21 f0       	breq	.+8      	; 0x1002 <malloc+0x8e>
     ffa:	fb 01       	movw	r30, r22
     ffc:	93 83       	std	Z+3, r25	; 0x03
     ffe:	82 83       	std	Z+2, r24	; 0x02
    1000:	04 c0       	rjmp	.+8      	; 0x100a <malloc+0x96>
    1002:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <__flp+0x1>
    1006:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <__flp>
    100a:	fe 01       	movw	r30, r28
    100c:	32 96       	adiw	r30, 0x02	; 2
    100e:	44 c0       	rjmp	.+136    	; 0x1098 <malloc+0x124>
    1010:	fe 01       	movw	r30, r28
    1012:	e2 0f       	add	r30, r18
    1014:	f3 1f       	adc	r31, r19
    1016:	81 93       	st	Z+, r24
    1018:	91 93       	st	Z+, r25
    101a:	22 50       	subi	r18, 0x02	; 2
    101c:	31 09       	sbc	r19, r1
    101e:	39 83       	std	Y+1, r19	; 0x01
    1020:	28 83       	st	Y, r18
    1022:	3a c0       	rjmp	.+116    	; 0x1098 <malloc+0x124>
    1024:	20 91 1a 02 	lds	r18, 0x021A	; 0x80021a <__brkval>
    1028:	30 91 1b 02 	lds	r19, 0x021B	; 0x80021b <__brkval+0x1>
    102c:	23 2b       	or	r18, r19
    102e:	41 f4       	brne	.+16     	; 0x1040 <malloc+0xcc>
    1030:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    1034:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    1038:	30 93 1b 02 	sts	0x021B, r19	; 0x80021b <__brkval+0x1>
    103c:	20 93 1a 02 	sts	0x021A, r18	; 0x80021a <__brkval>
    1040:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    1044:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    1048:	21 15       	cp	r18, r1
    104a:	31 05       	cpc	r19, r1
    104c:	41 f4       	brne	.+16     	; 0x105e <malloc+0xea>
    104e:	2d b7       	in	r18, 0x3d	; 61
    1050:	3e b7       	in	r19, 0x3e	; 62
    1052:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1056:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    105a:	24 1b       	sub	r18, r20
    105c:	35 0b       	sbc	r19, r21
    105e:	e0 91 1a 02 	lds	r30, 0x021A	; 0x80021a <__brkval>
    1062:	f0 91 1b 02 	lds	r31, 0x021B	; 0x80021b <__brkval+0x1>
    1066:	e2 17       	cp	r30, r18
    1068:	f3 07       	cpc	r31, r19
    106a:	a0 f4       	brcc	.+40     	; 0x1094 <malloc+0x120>
    106c:	2e 1b       	sub	r18, r30
    106e:	3f 0b       	sbc	r19, r31
    1070:	28 17       	cp	r18, r24
    1072:	39 07       	cpc	r19, r25
    1074:	78 f0       	brcs	.+30     	; 0x1094 <malloc+0x120>
    1076:	ac 01       	movw	r20, r24
    1078:	4e 5f       	subi	r20, 0xFE	; 254
    107a:	5f 4f       	sbci	r21, 0xFF	; 255
    107c:	24 17       	cp	r18, r20
    107e:	35 07       	cpc	r19, r21
    1080:	48 f0       	brcs	.+18     	; 0x1094 <malloc+0x120>
    1082:	4e 0f       	add	r20, r30
    1084:	5f 1f       	adc	r21, r31
    1086:	50 93 1b 02 	sts	0x021B, r21	; 0x80021b <__brkval+0x1>
    108a:	40 93 1a 02 	sts	0x021A, r20	; 0x80021a <__brkval>
    108e:	81 93       	st	Z+, r24
    1090:	91 93       	st	Z+, r25
    1092:	02 c0       	rjmp	.+4      	; 0x1098 <malloc+0x124>
    1094:	e0 e0       	ldi	r30, 0x00	; 0
    1096:	f0 e0       	ldi	r31, 0x00	; 0
    1098:	cf 01       	movw	r24, r30
    109a:	df 91       	pop	r29
    109c:	cf 91       	pop	r28
    109e:	1f 91       	pop	r17
    10a0:	0f 91       	pop	r16
    10a2:	08 95       	ret

000010a4 <free>:
    10a4:	cf 93       	push	r28
    10a6:	df 93       	push	r29
    10a8:	00 97       	sbiw	r24, 0x00	; 0
    10aa:	09 f4       	brne	.+2      	; 0x10ae <free+0xa>
    10ac:	81 c0       	rjmp	.+258    	; 0x11b0 <free+0x10c>
    10ae:	fc 01       	movw	r30, r24
    10b0:	32 97       	sbiw	r30, 0x02	; 2
    10b2:	13 82       	std	Z+3, r1	; 0x03
    10b4:	12 82       	std	Z+2, r1	; 0x02
    10b6:	a0 91 1c 02 	lds	r26, 0x021C	; 0x80021c <__flp>
    10ba:	b0 91 1d 02 	lds	r27, 0x021D	; 0x80021d <__flp+0x1>
    10be:	10 97       	sbiw	r26, 0x00	; 0
    10c0:	81 f4       	brne	.+32     	; 0x10e2 <free+0x3e>
    10c2:	20 81       	ld	r18, Z
    10c4:	31 81       	ldd	r19, Z+1	; 0x01
    10c6:	82 0f       	add	r24, r18
    10c8:	93 1f       	adc	r25, r19
    10ca:	20 91 1a 02 	lds	r18, 0x021A	; 0x80021a <__brkval>
    10ce:	30 91 1b 02 	lds	r19, 0x021B	; 0x80021b <__brkval+0x1>
    10d2:	28 17       	cp	r18, r24
    10d4:	39 07       	cpc	r19, r25
    10d6:	51 f5       	brne	.+84     	; 0x112c <free+0x88>
    10d8:	f0 93 1b 02 	sts	0x021B, r31	; 0x80021b <__brkval+0x1>
    10dc:	e0 93 1a 02 	sts	0x021A, r30	; 0x80021a <__brkval>
    10e0:	67 c0       	rjmp	.+206    	; 0x11b0 <free+0x10c>
    10e2:	ed 01       	movw	r28, r26
    10e4:	20 e0       	ldi	r18, 0x00	; 0
    10e6:	30 e0       	ldi	r19, 0x00	; 0
    10e8:	ce 17       	cp	r28, r30
    10ea:	df 07       	cpc	r29, r31
    10ec:	40 f4       	brcc	.+16     	; 0x10fe <free+0x5a>
    10ee:	4a 81       	ldd	r20, Y+2	; 0x02
    10f0:	5b 81       	ldd	r21, Y+3	; 0x03
    10f2:	9e 01       	movw	r18, r28
    10f4:	41 15       	cp	r20, r1
    10f6:	51 05       	cpc	r21, r1
    10f8:	f1 f0       	breq	.+60     	; 0x1136 <free+0x92>
    10fa:	ea 01       	movw	r28, r20
    10fc:	f5 cf       	rjmp	.-22     	; 0x10e8 <free+0x44>
    10fe:	d3 83       	std	Z+3, r29	; 0x03
    1100:	c2 83       	std	Z+2, r28	; 0x02
    1102:	40 81       	ld	r20, Z
    1104:	51 81       	ldd	r21, Z+1	; 0x01
    1106:	84 0f       	add	r24, r20
    1108:	95 1f       	adc	r25, r21
    110a:	c8 17       	cp	r28, r24
    110c:	d9 07       	cpc	r29, r25
    110e:	59 f4       	brne	.+22     	; 0x1126 <free+0x82>
    1110:	88 81       	ld	r24, Y
    1112:	99 81       	ldd	r25, Y+1	; 0x01
    1114:	84 0f       	add	r24, r20
    1116:	95 1f       	adc	r25, r21
    1118:	02 96       	adiw	r24, 0x02	; 2
    111a:	91 83       	std	Z+1, r25	; 0x01
    111c:	80 83       	st	Z, r24
    111e:	8a 81       	ldd	r24, Y+2	; 0x02
    1120:	9b 81       	ldd	r25, Y+3	; 0x03
    1122:	93 83       	std	Z+3, r25	; 0x03
    1124:	82 83       	std	Z+2, r24	; 0x02
    1126:	21 15       	cp	r18, r1
    1128:	31 05       	cpc	r19, r1
    112a:	29 f4       	brne	.+10     	; 0x1136 <free+0x92>
    112c:	f0 93 1d 02 	sts	0x021D, r31	; 0x80021d <__flp+0x1>
    1130:	e0 93 1c 02 	sts	0x021C, r30	; 0x80021c <__flp>
    1134:	3d c0       	rjmp	.+122    	; 0x11b0 <free+0x10c>
    1136:	e9 01       	movw	r28, r18
    1138:	fb 83       	std	Y+3, r31	; 0x03
    113a:	ea 83       	std	Y+2, r30	; 0x02
    113c:	49 91       	ld	r20, Y+
    113e:	59 91       	ld	r21, Y+
    1140:	c4 0f       	add	r28, r20
    1142:	d5 1f       	adc	r29, r21
    1144:	ec 17       	cp	r30, r28
    1146:	fd 07       	cpc	r31, r29
    1148:	61 f4       	brne	.+24     	; 0x1162 <free+0xbe>
    114a:	80 81       	ld	r24, Z
    114c:	91 81       	ldd	r25, Z+1	; 0x01
    114e:	84 0f       	add	r24, r20
    1150:	95 1f       	adc	r25, r21
    1152:	02 96       	adiw	r24, 0x02	; 2
    1154:	e9 01       	movw	r28, r18
    1156:	99 83       	std	Y+1, r25	; 0x01
    1158:	88 83       	st	Y, r24
    115a:	82 81       	ldd	r24, Z+2	; 0x02
    115c:	93 81       	ldd	r25, Z+3	; 0x03
    115e:	9b 83       	std	Y+3, r25	; 0x03
    1160:	8a 83       	std	Y+2, r24	; 0x02
    1162:	e0 e0       	ldi	r30, 0x00	; 0
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	12 96       	adiw	r26, 0x02	; 2
    1168:	8d 91       	ld	r24, X+
    116a:	9c 91       	ld	r25, X
    116c:	13 97       	sbiw	r26, 0x03	; 3
    116e:	00 97       	sbiw	r24, 0x00	; 0
    1170:	19 f0       	breq	.+6      	; 0x1178 <free+0xd4>
    1172:	fd 01       	movw	r30, r26
    1174:	dc 01       	movw	r26, r24
    1176:	f7 cf       	rjmp	.-18     	; 0x1166 <free+0xc2>
    1178:	8d 91       	ld	r24, X+
    117a:	9c 91       	ld	r25, X
    117c:	11 97       	sbiw	r26, 0x01	; 1
    117e:	9d 01       	movw	r18, r26
    1180:	2e 5f       	subi	r18, 0xFE	; 254
    1182:	3f 4f       	sbci	r19, 0xFF	; 255
    1184:	82 0f       	add	r24, r18
    1186:	93 1f       	adc	r25, r19
    1188:	20 91 1a 02 	lds	r18, 0x021A	; 0x80021a <__brkval>
    118c:	30 91 1b 02 	lds	r19, 0x021B	; 0x80021b <__brkval+0x1>
    1190:	28 17       	cp	r18, r24
    1192:	39 07       	cpc	r19, r25
    1194:	69 f4       	brne	.+26     	; 0x11b0 <free+0x10c>
    1196:	30 97       	sbiw	r30, 0x00	; 0
    1198:	29 f4       	brne	.+10     	; 0x11a4 <free+0x100>
    119a:	10 92 1d 02 	sts	0x021D, r1	; 0x80021d <__flp+0x1>
    119e:	10 92 1c 02 	sts	0x021C, r1	; 0x80021c <__flp>
    11a2:	02 c0       	rjmp	.+4      	; 0x11a8 <free+0x104>
    11a4:	13 82       	std	Z+3, r1	; 0x03
    11a6:	12 82       	std	Z+2, r1	; 0x02
    11a8:	b0 93 1b 02 	sts	0x021B, r27	; 0x80021b <__brkval+0x1>
    11ac:	a0 93 1a 02 	sts	0x021A, r26	; 0x80021a <__brkval>
    11b0:	df 91       	pop	r29
    11b2:	cf 91       	pop	r28
    11b4:	08 95       	ret

000011b6 <do_rand>:
    11b6:	8f 92       	push	r8
    11b8:	9f 92       	push	r9
    11ba:	af 92       	push	r10
    11bc:	bf 92       	push	r11
    11be:	cf 92       	push	r12
    11c0:	df 92       	push	r13
    11c2:	ef 92       	push	r14
    11c4:	ff 92       	push	r15
    11c6:	cf 93       	push	r28
    11c8:	df 93       	push	r29
    11ca:	ec 01       	movw	r28, r24
    11cc:	68 81       	ld	r22, Y
    11ce:	79 81       	ldd	r23, Y+1	; 0x01
    11d0:	8a 81       	ldd	r24, Y+2	; 0x02
    11d2:	9b 81       	ldd	r25, Y+3	; 0x03
    11d4:	61 15       	cp	r22, r1
    11d6:	71 05       	cpc	r23, r1
    11d8:	81 05       	cpc	r24, r1
    11da:	91 05       	cpc	r25, r1
    11dc:	21 f4       	brne	.+8      	; 0x11e6 <do_rand+0x30>
    11de:	64 e2       	ldi	r22, 0x24	; 36
    11e0:	79 ed       	ldi	r23, 0xD9	; 217
    11e2:	8b e5       	ldi	r24, 0x5B	; 91
    11e4:	97 e0       	ldi	r25, 0x07	; 7
    11e6:	2d e1       	ldi	r18, 0x1D	; 29
    11e8:	33 ef       	ldi	r19, 0xF3	; 243
    11ea:	41 e0       	ldi	r20, 0x01	; 1
    11ec:	50 e0       	ldi	r21, 0x00	; 0
    11ee:	0e 94 83 0c 	call	0x1906	; 0x1906 <__divmodsi4>
    11f2:	49 01       	movw	r8, r18
    11f4:	5a 01       	movw	r10, r20
    11f6:	9b 01       	movw	r18, r22
    11f8:	ac 01       	movw	r20, r24
    11fa:	a7 ea       	ldi	r26, 0xA7	; 167
    11fc:	b1 e4       	ldi	r27, 0x41	; 65
    11fe:	0e 94 a2 0c 	call	0x1944	; 0x1944 <__muluhisi3>
    1202:	6b 01       	movw	r12, r22
    1204:	7c 01       	movw	r14, r24
    1206:	ac ee       	ldi	r26, 0xEC	; 236
    1208:	b4 ef       	ldi	r27, 0xF4	; 244
    120a:	a5 01       	movw	r20, r10
    120c:	94 01       	movw	r18, r8
    120e:	0e 94 b0 0c 	call	0x1960	; 0x1960 <__mulohisi3>
    1212:	dc 01       	movw	r26, r24
    1214:	cb 01       	movw	r24, r22
    1216:	8c 0d       	add	r24, r12
    1218:	9d 1d       	adc	r25, r13
    121a:	ae 1d       	adc	r26, r14
    121c:	bf 1d       	adc	r27, r15
    121e:	b7 ff       	sbrs	r27, 7
    1220:	03 c0       	rjmp	.+6      	; 0x1228 <do_rand+0x72>
    1222:	01 97       	sbiw	r24, 0x01	; 1
    1224:	a1 09       	sbc	r26, r1
    1226:	b0 48       	sbci	r27, 0x80	; 128
    1228:	88 83       	st	Y, r24
    122a:	99 83       	std	Y+1, r25	; 0x01
    122c:	aa 83       	std	Y+2, r26	; 0x02
    122e:	bb 83       	std	Y+3, r27	; 0x03
    1230:	9f 77       	andi	r25, 0x7F	; 127
    1232:	df 91       	pop	r29
    1234:	cf 91       	pop	r28
    1236:	ff 90       	pop	r15
    1238:	ef 90       	pop	r14
    123a:	df 90       	pop	r13
    123c:	cf 90       	pop	r12
    123e:	bf 90       	pop	r11
    1240:	af 90       	pop	r10
    1242:	9f 90       	pop	r9
    1244:	8f 90       	pop	r8
    1246:	08 95       	ret

00001248 <rand_r>:
    1248:	0e 94 db 08 	call	0x11b6	; 0x11b6 <do_rand>
    124c:	08 95       	ret

0000124e <rand>:
    124e:	86 e0       	ldi	r24, 0x06	; 6
    1250:	91 e0       	ldi	r25, 0x01	; 1
    1252:	0e 94 db 08 	call	0x11b6	; 0x11b6 <do_rand>
    1256:	08 95       	ret

00001258 <srand>:
    1258:	a0 e0       	ldi	r26, 0x00	; 0
    125a:	b0 e0       	ldi	r27, 0x00	; 0
    125c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <next>
    1260:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <next+0x1>
    1264:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <next+0x2>
    1268:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <next+0x3>
    126c:	08 95       	ret

0000126e <fdevopen>:
    126e:	0f 93       	push	r16
    1270:	1f 93       	push	r17
    1272:	cf 93       	push	r28
    1274:	df 93       	push	r29
    1276:	00 97       	sbiw	r24, 0x00	; 0
    1278:	31 f4       	brne	.+12     	; 0x1286 <fdevopen+0x18>
    127a:	61 15       	cp	r22, r1
    127c:	71 05       	cpc	r23, r1
    127e:	19 f4       	brne	.+6      	; 0x1286 <fdevopen+0x18>
    1280:	80 e0       	ldi	r24, 0x00	; 0
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	3a c0       	rjmp	.+116    	; 0x12fa <fdevopen+0x8c>
    1286:	8b 01       	movw	r16, r22
    1288:	ec 01       	movw	r28, r24
    128a:	6e e0       	ldi	r22, 0x0E	; 14
    128c:	70 e0       	ldi	r23, 0x00	; 0
    128e:	81 e0       	ldi	r24, 0x01	; 1
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	0e 94 b0 0b 	call	0x1760	; 0x1760 <calloc>
    1296:	fc 01       	movw	r30, r24
    1298:	89 2b       	or	r24, r25
    129a:	91 f3       	breq	.-28     	; 0x1280 <fdevopen+0x12>
    129c:	80 e8       	ldi	r24, 0x80	; 128
    129e:	83 83       	std	Z+3, r24	; 0x03
    12a0:	01 15       	cp	r16, r1
    12a2:	11 05       	cpc	r17, r1
    12a4:	71 f0       	breq	.+28     	; 0x12c2 <fdevopen+0x54>
    12a6:	13 87       	std	Z+11, r17	; 0x0b
    12a8:	02 87       	std	Z+10, r16	; 0x0a
    12aa:	81 e8       	ldi	r24, 0x81	; 129
    12ac:	83 83       	std	Z+3, r24	; 0x03
    12ae:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <__iob>
    12b2:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <__iob+0x1>
    12b6:	89 2b       	or	r24, r25
    12b8:	21 f4       	brne	.+8      	; 0x12c2 <fdevopen+0x54>
    12ba:	f0 93 1f 02 	sts	0x021F, r31	; 0x80021f <__iob+0x1>
    12be:	e0 93 1e 02 	sts	0x021E, r30	; 0x80021e <__iob>
    12c2:	20 97       	sbiw	r28, 0x00	; 0
    12c4:	c9 f0       	breq	.+50     	; 0x12f8 <fdevopen+0x8a>
    12c6:	d1 87       	std	Z+9, r29	; 0x09
    12c8:	c0 87       	std	Z+8, r28	; 0x08
    12ca:	83 81       	ldd	r24, Z+3	; 0x03
    12cc:	82 60       	ori	r24, 0x02	; 2
    12ce:	83 83       	std	Z+3, r24	; 0x03
    12d0:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <__iob+0x2>
    12d4:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <__iob+0x3>
    12d8:	89 2b       	or	r24, r25
    12da:	71 f4       	brne	.+28     	; 0x12f8 <fdevopen+0x8a>
    12dc:	f0 93 21 02 	sts	0x0221, r31	; 0x800221 <__iob+0x3>
    12e0:	e0 93 20 02 	sts	0x0220, r30	; 0x800220 <__iob+0x2>
    12e4:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <__iob+0x4>
    12e8:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <__iob+0x5>
    12ec:	89 2b       	or	r24, r25
    12ee:	21 f4       	brne	.+8      	; 0x12f8 <fdevopen+0x8a>
    12f0:	f0 93 23 02 	sts	0x0223, r31	; 0x800223 <__iob+0x5>
    12f4:	e0 93 22 02 	sts	0x0222, r30	; 0x800222 <__iob+0x4>
    12f8:	cf 01       	movw	r24, r30
    12fa:	df 91       	pop	r29
    12fc:	cf 91       	pop	r28
    12fe:	1f 91       	pop	r17
    1300:	0f 91       	pop	r16
    1302:	08 95       	ret

00001304 <printf>:
    1304:	a0 e0       	ldi	r26, 0x00	; 0
    1306:	b0 e0       	ldi	r27, 0x00	; 0
    1308:	e8 e8       	ldi	r30, 0x88	; 136
    130a:	f9 e0       	ldi	r31, 0x09	; 9
    130c:	0c 94 c5 0c 	jmp	0x198a	; 0x198a <__prologue_saves__+0x20>
    1310:	ae 01       	movw	r20, r28
    1312:	4b 5f       	subi	r20, 0xFB	; 251
    1314:	5f 4f       	sbci	r21, 0xFF	; 255
    1316:	fa 01       	movw	r30, r20
    1318:	61 91       	ld	r22, Z+
    131a:	71 91       	ld	r23, Z+
    131c:	af 01       	movw	r20, r30
    131e:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <__iob+0x2>
    1322:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <__iob+0x3>
    1326:	0e 94 cf 09 	call	0x139e	; 0x139e <vfprintf>
    132a:	e2 e0       	ldi	r30, 0x02	; 2
    132c:	0c 94 e1 0c 	jmp	0x19c2	; 0x19c2 <__epilogue_restores__+0x20>

00001330 <putchar>:
    1330:	60 91 20 02 	lds	r22, 0x0220	; 0x800220 <__iob+0x2>
    1334:	70 91 21 02 	lds	r23, 0x0221	; 0x800221 <__iob+0x3>
    1338:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <fputc>
    133c:	08 95       	ret

0000133e <puts>:
    133e:	0f 93       	push	r16
    1340:	1f 93       	push	r17
    1342:	cf 93       	push	r28
    1344:	df 93       	push	r29
    1346:	e0 91 20 02 	lds	r30, 0x0220	; 0x800220 <__iob+0x2>
    134a:	f0 91 21 02 	lds	r31, 0x0221	; 0x800221 <__iob+0x3>
    134e:	23 81       	ldd	r18, Z+3	; 0x03
    1350:	21 ff       	sbrs	r18, 1
    1352:	1b c0       	rjmp	.+54     	; 0x138a <puts+0x4c>
    1354:	8c 01       	movw	r16, r24
    1356:	d0 e0       	ldi	r29, 0x00	; 0
    1358:	c0 e0       	ldi	r28, 0x00	; 0
    135a:	f8 01       	movw	r30, r16
    135c:	81 91       	ld	r24, Z+
    135e:	8f 01       	movw	r16, r30
    1360:	60 91 20 02 	lds	r22, 0x0220	; 0x800220 <__iob+0x2>
    1364:	70 91 21 02 	lds	r23, 0x0221	; 0x800221 <__iob+0x3>
    1368:	db 01       	movw	r26, r22
    136a:	18 96       	adiw	r26, 0x08	; 8
    136c:	ed 91       	ld	r30, X+
    136e:	fc 91       	ld	r31, X
    1370:	19 97       	sbiw	r26, 0x09	; 9
    1372:	88 23       	and	r24, r24
    1374:	31 f0       	breq	.+12     	; 0x1382 <puts+0x44>
    1376:	09 95       	icall
    1378:	89 2b       	or	r24, r25
    137a:	79 f3       	breq	.-34     	; 0x135a <puts+0x1c>
    137c:	df ef       	ldi	r29, 0xFF	; 255
    137e:	cf ef       	ldi	r28, 0xFF	; 255
    1380:	ec cf       	rjmp	.-40     	; 0x135a <puts+0x1c>
    1382:	8a e0       	ldi	r24, 0x0A	; 10
    1384:	09 95       	icall
    1386:	89 2b       	or	r24, r25
    1388:	19 f0       	breq	.+6      	; 0x1390 <puts+0x52>
    138a:	8f ef       	ldi	r24, 0xFF	; 255
    138c:	9f ef       	ldi	r25, 0xFF	; 255
    138e:	02 c0       	rjmp	.+4      	; 0x1394 <puts+0x56>
    1390:	8d 2f       	mov	r24, r29
    1392:	9c 2f       	mov	r25, r28
    1394:	df 91       	pop	r29
    1396:	cf 91       	pop	r28
    1398:	1f 91       	pop	r17
    139a:	0f 91       	pop	r16
    139c:	08 95       	ret

0000139e <vfprintf>:
    139e:	ab e0       	ldi	r26, 0x0B	; 11
    13a0:	b0 e0       	ldi	r27, 0x00	; 0
    13a2:	e5 ed       	ldi	r30, 0xD5	; 213
    13a4:	f9 e0       	ldi	r31, 0x09	; 9
    13a6:	0c 94 b5 0c 	jmp	0x196a	; 0x196a <__prologue_saves__>
    13aa:	6c 01       	movw	r12, r24
    13ac:	7b 01       	movw	r14, r22
    13ae:	8a 01       	movw	r16, r20
    13b0:	fc 01       	movw	r30, r24
    13b2:	17 82       	std	Z+7, r1	; 0x07
    13b4:	16 82       	std	Z+6, r1	; 0x06
    13b6:	83 81       	ldd	r24, Z+3	; 0x03
    13b8:	81 ff       	sbrs	r24, 1
    13ba:	cc c1       	rjmp	.+920    	; 0x1754 <vfprintf+0x3b6>
    13bc:	ce 01       	movw	r24, r28
    13be:	01 96       	adiw	r24, 0x01	; 1
    13c0:	3c 01       	movw	r6, r24
    13c2:	f6 01       	movw	r30, r12
    13c4:	93 81       	ldd	r25, Z+3	; 0x03
    13c6:	f7 01       	movw	r30, r14
    13c8:	93 fd       	sbrc	r25, 3
    13ca:	85 91       	lpm	r24, Z+
    13cc:	93 ff       	sbrs	r25, 3
    13ce:	81 91       	ld	r24, Z+
    13d0:	7f 01       	movw	r14, r30
    13d2:	88 23       	and	r24, r24
    13d4:	09 f4       	brne	.+2      	; 0x13d8 <vfprintf+0x3a>
    13d6:	ba c1       	rjmp	.+884    	; 0x174c <vfprintf+0x3ae>
    13d8:	85 32       	cpi	r24, 0x25	; 37
    13da:	39 f4       	brne	.+14     	; 0x13ea <vfprintf+0x4c>
    13dc:	93 fd       	sbrc	r25, 3
    13de:	85 91       	lpm	r24, Z+
    13e0:	93 ff       	sbrs	r25, 3
    13e2:	81 91       	ld	r24, Z+
    13e4:	7f 01       	movw	r14, r30
    13e6:	85 32       	cpi	r24, 0x25	; 37
    13e8:	29 f4       	brne	.+10     	; 0x13f4 <vfprintf+0x56>
    13ea:	b6 01       	movw	r22, r12
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <fputc>
    13f2:	e7 cf       	rjmp	.-50     	; 0x13c2 <vfprintf+0x24>
    13f4:	91 2c       	mov	r9, r1
    13f6:	21 2c       	mov	r2, r1
    13f8:	31 2c       	mov	r3, r1
    13fa:	ff e1       	ldi	r31, 0x1F	; 31
    13fc:	f3 15       	cp	r31, r3
    13fe:	d8 f0       	brcs	.+54     	; 0x1436 <vfprintf+0x98>
    1400:	8b 32       	cpi	r24, 0x2B	; 43
    1402:	79 f0       	breq	.+30     	; 0x1422 <vfprintf+0x84>
    1404:	38 f4       	brcc	.+14     	; 0x1414 <vfprintf+0x76>
    1406:	80 32       	cpi	r24, 0x20	; 32
    1408:	79 f0       	breq	.+30     	; 0x1428 <vfprintf+0x8a>
    140a:	83 32       	cpi	r24, 0x23	; 35
    140c:	a1 f4       	brne	.+40     	; 0x1436 <vfprintf+0x98>
    140e:	23 2d       	mov	r18, r3
    1410:	20 61       	ori	r18, 0x10	; 16
    1412:	1d c0       	rjmp	.+58     	; 0x144e <vfprintf+0xb0>
    1414:	8d 32       	cpi	r24, 0x2D	; 45
    1416:	61 f0       	breq	.+24     	; 0x1430 <vfprintf+0x92>
    1418:	80 33       	cpi	r24, 0x30	; 48
    141a:	69 f4       	brne	.+26     	; 0x1436 <vfprintf+0x98>
    141c:	23 2d       	mov	r18, r3
    141e:	21 60       	ori	r18, 0x01	; 1
    1420:	16 c0       	rjmp	.+44     	; 0x144e <vfprintf+0xb0>
    1422:	83 2d       	mov	r24, r3
    1424:	82 60       	ori	r24, 0x02	; 2
    1426:	38 2e       	mov	r3, r24
    1428:	e3 2d       	mov	r30, r3
    142a:	e4 60       	ori	r30, 0x04	; 4
    142c:	3e 2e       	mov	r3, r30
    142e:	2a c0       	rjmp	.+84     	; 0x1484 <vfprintf+0xe6>
    1430:	f3 2d       	mov	r31, r3
    1432:	f8 60       	ori	r31, 0x08	; 8
    1434:	1d c0       	rjmp	.+58     	; 0x1470 <vfprintf+0xd2>
    1436:	37 fc       	sbrc	r3, 7
    1438:	2d c0       	rjmp	.+90     	; 0x1494 <vfprintf+0xf6>
    143a:	20 ed       	ldi	r18, 0xD0	; 208
    143c:	28 0f       	add	r18, r24
    143e:	2a 30       	cpi	r18, 0x0A	; 10
    1440:	40 f0       	brcs	.+16     	; 0x1452 <vfprintf+0xb4>
    1442:	8e 32       	cpi	r24, 0x2E	; 46
    1444:	b9 f4       	brne	.+46     	; 0x1474 <vfprintf+0xd6>
    1446:	36 fc       	sbrc	r3, 6
    1448:	81 c1       	rjmp	.+770    	; 0x174c <vfprintf+0x3ae>
    144a:	23 2d       	mov	r18, r3
    144c:	20 64       	ori	r18, 0x40	; 64
    144e:	32 2e       	mov	r3, r18
    1450:	19 c0       	rjmp	.+50     	; 0x1484 <vfprintf+0xe6>
    1452:	36 fe       	sbrs	r3, 6
    1454:	06 c0       	rjmp	.+12     	; 0x1462 <vfprintf+0xc4>
    1456:	8a e0       	ldi	r24, 0x0A	; 10
    1458:	98 9e       	mul	r9, r24
    145a:	20 0d       	add	r18, r0
    145c:	11 24       	eor	r1, r1
    145e:	92 2e       	mov	r9, r18
    1460:	11 c0       	rjmp	.+34     	; 0x1484 <vfprintf+0xe6>
    1462:	ea e0       	ldi	r30, 0x0A	; 10
    1464:	2e 9e       	mul	r2, r30
    1466:	20 0d       	add	r18, r0
    1468:	11 24       	eor	r1, r1
    146a:	22 2e       	mov	r2, r18
    146c:	f3 2d       	mov	r31, r3
    146e:	f0 62       	ori	r31, 0x20	; 32
    1470:	3f 2e       	mov	r3, r31
    1472:	08 c0       	rjmp	.+16     	; 0x1484 <vfprintf+0xe6>
    1474:	8c 36       	cpi	r24, 0x6C	; 108
    1476:	21 f4       	brne	.+8      	; 0x1480 <vfprintf+0xe2>
    1478:	83 2d       	mov	r24, r3
    147a:	80 68       	ori	r24, 0x80	; 128
    147c:	38 2e       	mov	r3, r24
    147e:	02 c0       	rjmp	.+4      	; 0x1484 <vfprintf+0xe6>
    1480:	88 36       	cpi	r24, 0x68	; 104
    1482:	41 f4       	brne	.+16     	; 0x1494 <vfprintf+0xf6>
    1484:	f7 01       	movw	r30, r14
    1486:	93 fd       	sbrc	r25, 3
    1488:	85 91       	lpm	r24, Z+
    148a:	93 ff       	sbrs	r25, 3
    148c:	81 91       	ld	r24, Z+
    148e:	7f 01       	movw	r14, r30
    1490:	81 11       	cpse	r24, r1
    1492:	b3 cf       	rjmp	.-154    	; 0x13fa <vfprintf+0x5c>
    1494:	98 2f       	mov	r25, r24
    1496:	9f 7d       	andi	r25, 0xDF	; 223
    1498:	95 54       	subi	r25, 0x45	; 69
    149a:	93 30       	cpi	r25, 0x03	; 3
    149c:	28 f4       	brcc	.+10     	; 0x14a8 <vfprintf+0x10a>
    149e:	0c 5f       	subi	r16, 0xFC	; 252
    14a0:	1f 4f       	sbci	r17, 0xFF	; 255
    14a2:	9f e3       	ldi	r25, 0x3F	; 63
    14a4:	99 83       	std	Y+1, r25	; 0x01
    14a6:	0d c0       	rjmp	.+26     	; 0x14c2 <vfprintf+0x124>
    14a8:	83 36       	cpi	r24, 0x63	; 99
    14aa:	31 f0       	breq	.+12     	; 0x14b8 <vfprintf+0x11a>
    14ac:	83 37       	cpi	r24, 0x73	; 115
    14ae:	71 f0       	breq	.+28     	; 0x14cc <vfprintf+0x12e>
    14b0:	83 35       	cpi	r24, 0x53	; 83
    14b2:	09 f0       	breq	.+2      	; 0x14b6 <vfprintf+0x118>
    14b4:	59 c0       	rjmp	.+178    	; 0x1568 <vfprintf+0x1ca>
    14b6:	21 c0       	rjmp	.+66     	; 0x14fa <vfprintf+0x15c>
    14b8:	f8 01       	movw	r30, r16
    14ba:	80 81       	ld	r24, Z
    14bc:	89 83       	std	Y+1, r24	; 0x01
    14be:	0e 5f       	subi	r16, 0xFE	; 254
    14c0:	1f 4f       	sbci	r17, 0xFF	; 255
    14c2:	88 24       	eor	r8, r8
    14c4:	83 94       	inc	r8
    14c6:	91 2c       	mov	r9, r1
    14c8:	53 01       	movw	r10, r6
    14ca:	13 c0       	rjmp	.+38     	; 0x14f2 <vfprintf+0x154>
    14cc:	28 01       	movw	r4, r16
    14ce:	f2 e0       	ldi	r31, 0x02	; 2
    14d0:	4f 0e       	add	r4, r31
    14d2:	51 1c       	adc	r5, r1
    14d4:	f8 01       	movw	r30, r16
    14d6:	a0 80       	ld	r10, Z
    14d8:	b1 80       	ldd	r11, Z+1	; 0x01
    14da:	36 fe       	sbrs	r3, 6
    14dc:	03 c0       	rjmp	.+6      	; 0x14e4 <vfprintf+0x146>
    14de:	69 2d       	mov	r22, r9
    14e0:	70 e0       	ldi	r23, 0x00	; 0
    14e2:	02 c0       	rjmp	.+4      	; 0x14e8 <vfprintf+0x14a>
    14e4:	6f ef       	ldi	r22, 0xFF	; 255
    14e6:	7f ef       	ldi	r23, 0xFF	; 255
    14e8:	c5 01       	movw	r24, r10
    14ea:	0e 94 de 0b 	call	0x17bc	; 0x17bc <strnlen>
    14ee:	4c 01       	movw	r8, r24
    14f0:	82 01       	movw	r16, r4
    14f2:	f3 2d       	mov	r31, r3
    14f4:	ff 77       	andi	r31, 0x7F	; 127
    14f6:	3f 2e       	mov	r3, r31
    14f8:	16 c0       	rjmp	.+44     	; 0x1526 <vfprintf+0x188>
    14fa:	28 01       	movw	r4, r16
    14fc:	22 e0       	ldi	r18, 0x02	; 2
    14fe:	42 0e       	add	r4, r18
    1500:	51 1c       	adc	r5, r1
    1502:	f8 01       	movw	r30, r16
    1504:	a0 80       	ld	r10, Z
    1506:	b1 80       	ldd	r11, Z+1	; 0x01
    1508:	36 fe       	sbrs	r3, 6
    150a:	03 c0       	rjmp	.+6      	; 0x1512 <vfprintf+0x174>
    150c:	69 2d       	mov	r22, r9
    150e:	70 e0       	ldi	r23, 0x00	; 0
    1510:	02 c0       	rjmp	.+4      	; 0x1516 <vfprintf+0x178>
    1512:	6f ef       	ldi	r22, 0xFF	; 255
    1514:	7f ef       	ldi	r23, 0xFF	; 255
    1516:	c5 01       	movw	r24, r10
    1518:	0e 94 cc 0b 	call	0x1798	; 0x1798 <strnlen_P>
    151c:	4c 01       	movw	r8, r24
    151e:	f3 2d       	mov	r31, r3
    1520:	f0 68       	ori	r31, 0x80	; 128
    1522:	3f 2e       	mov	r3, r31
    1524:	82 01       	movw	r16, r4
    1526:	33 fc       	sbrc	r3, 3
    1528:	1b c0       	rjmp	.+54     	; 0x1560 <vfprintf+0x1c2>
    152a:	82 2d       	mov	r24, r2
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	88 16       	cp	r8, r24
    1530:	99 06       	cpc	r9, r25
    1532:	b0 f4       	brcc	.+44     	; 0x1560 <vfprintf+0x1c2>
    1534:	b6 01       	movw	r22, r12
    1536:	80 e2       	ldi	r24, 0x20	; 32
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <fputc>
    153e:	2a 94       	dec	r2
    1540:	f4 cf       	rjmp	.-24     	; 0x152a <vfprintf+0x18c>
    1542:	f5 01       	movw	r30, r10
    1544:	37 fc       	sbrc	r3, 7
    1546:	85 91       	lpm	r24, Z+
    1548:	37 fe       	sbrs	r3, 7
    154a:	81 91       	ld	r24, Z+
    154c:	5f 01       	movw	r10, r30
    154e:	b6 01       	movw	r22, r12
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <fputc>
    1556:	21 10       	cpse	r2, r1
    1558:	2a 94       	dec	r2
    155a:	21 e0       	ldi	r18, 0x01	; 1
    155c:	82 1a       	sub	r8, r18
    155e:	91 08       	sbc	r9, r1
    1560:	81 14       	cp	r8, r1
    1562:	91 04       	cpc	r9, r1
    1564:	71 f7       	brne	.-36     	; 0x1542 <vfprintf+0x1a4>
    1566:	e8 c0       	rjmp	.+464    	; 0x1738 <vfprintf+0x39a>
    1568:	84 36       	cpi	r24, 0x64	; 100
    156a:	11 f0       	breq	.+4      	; 0x1570 <vfprintf+0x1d2>
    156c:	89 36       	cpi	r24, 0x69	; 105
    156e:	41 f5       	brne	.+80     	; 0x15c0 <vfprintf+0x222>
    1570:	f8 01       	movw	r30, r16
    1572:	37 fe       	sbrs	r3, 7
    1574:	07 c0       	rjmp	.+14     	; 0x1584 <vfprintf+0x1e6>
    1576:	60 81       	ld	r22, Z
    1578:	71 81       	ldd	r23, Z+1	; 0x01
    157a:	82 81       	ldd	r24, Z+2	; 0x02
    157c:	93 81       	ldd	r25, Z+3	; 0x03
    157e:	0c 5f       	subi	r16, 0xFC	; 252
    1580:	1f 4f       	sbci	r17, 0xFF	; 255
    1582:	08 c0       	rjmp	.+16     	; 0x1594 <vfprintf+0x1f6>
    1584:	60 81       	ld	r22, Z
    1586:	71 81       	ldd	r23, Z+1	; 0x01
    1588:	07 2e       	mov	r0, r23
    158a:	00 0c       	add	r0, r0
    158c:	88 0b       	sbc	r24, r24
    158e:	99 0b       	sbc	r25, r25
    1590:	0e 5f       	subi	r16, 0xFE	; 254
    1592:	1f 4f       	sbci	r17, 0xFF	; 255
    1594:	f3 2d       	mov	r31, r3
    1596:	ff 76       	andi	r31, 0x6F	; 111
    1598:	3f 2e       	mov	r3, r31
    159a:	97 ff       	sbrs	r25, 7
    159c:	09 c0       	rjmp	.+18     	; 0x15b0 <vfprintf+0x212>
    159e:	90 95       	com	r25
    15a0:	80 95       	com	r24
    15a2:	70 95       	com	r23
    15a4:	61 95       	neg	r22
    15a6:	7f 4f       	sbci	r23, 0xFF	; 255
    15a8:	8f 4f       	sbci	r24, 0xFF	; 255
    15aa:	9f 4f       	sbci	r25, 0xFF	; 255
    15ac:	f0 68       	ori	r31, 0x80	; 128
    15ae:	3f 2e       	mov	r3, r31
    15b0:	2a e0       	ldi	r18, 0x0A	; 10
    15b2:	30 e0       	ldi	r19, 0x00	; 0
    15b4:	a3 01       	movw	r20, r6
    15b6:	0e 94 25 0c 	call	0x184a	; 0x184a <__ultoa_invert>
    15ba:	88 2e       	mov	r8, r24
    15bc:	86 18       	sub	r8, r6
    15be:	45 c0       	rjmp	.+138    	; 0x164a <vfprintf+0x2ac>
    15c0:	85 37       	cpi	r24, 0x75	; 117
    15c2:	31 f4       	brne	.+12     	; 0x15d0 <vfprintf+0x232>
    15c4:	23 2d       	mov	r18, r3
    15c6:	2f 7e       	andi	r18, 0xEF	; 239
    15c8:	b2 2e       	mov	r11, r18
    15ca:	2a e0       	ldi	r18, 0x0A	; 10
    15cc:	30 e0       	ldi	r19, 0x00	; 0
    15ce:	25 c0       	rjmp	.+74     	; 0x161a <vfprintf+0x27c>
    15d0:	93 2d       	mov	r25, r3
    15d2:	99 7f       	andi	r25, 0xF9	; 249
    15d4:	b9 2e       	mov	r11, r25
    15d6:	8f 36       	cpi	r24, 0x6F	; 111
    15d8:	c1 f0       	breq	.+48     	; 0x160a <vfprintf+0x26c>
    15da:	18 f4       	brcc	.+6      	; 0x15e2 <vfprintf+0x244>
    15dc:	88 35       	cpi	r24, 0x58	; 88
    15de:	79 f0       	breq	.+30     	; 0x15fe <vfprintf+0x260>
    15e0:	b5 c0       	rjmp	.+362    	; 0x174c <vfprintf+0x3ae>
    15e2:	80 37       	cpi	r24, 0x70	; 112
    15e4:	19 f0       	breq	.+6      	; 0x15ec <vfprintf+0x24e>
    15e6:	88 37       	cpi	r24, 0x78	; 120
    15e8:	21 f0       	breq	.+8      	; 0x15f2 <vfprintf+0x254>
    15ea:	b0 c0       	rjmp	.+352    	; 0x174c <vfprintf+0x3ae>
    15ec:	e9 2f       	mov	r30, r25
    15ee:	e0 61       	ori	r30, 0x10	; 16
    15f0:	be 2e       	mov	r11, r30
    15f2:	b4 fe       	sbrs	r11, 4
    15f4:	0d c0       	rjmp	.+26     	; 0x1610 <vfprintf+0x272>
    15f6:	fb 2d       	mov	r31, r11
    15f8:	f4 60       	ori	r31, 0x04	; 4
    15fa:	bf 2e       	mov	r11, r31
    15fc:	09 c0       	rjmp	.+18     	; 0x1610 <vfprintf+0x272>
    15fe:	34 fe       	sbrs	r3, 4
    1600:	0a c0       	rjmp	.+20     	; 0x1616 <vfprintf+0x278>
    1602:	29 2f       	mov	r18, r25
    1604:	26 60       	ori	r18, 0x06	; 6
    1606:	b2 2e       	mov	r11, r18
    1608:	06 c0       	rjmp	.+12     	; 0x1616 <vfprintf+0x278>
    160a:	28 e0       	ldi	r18, 0x08	; 8
    160c:	30 e0       	ldi	r19, 0x00	; 0
    160e:	05 c0       	rjmp	.+10     	; 0x161a <vfprintf+0x27c>
    1610:	20 e1       	ldi	r18, 0x10	; 16
    1612:	30 e0       	ldi	r19, 0x00	; 0
    1614:	02 c0       	rjmp	.+4      	; 0x161a <vfprintf+0x27c>
    1616:	20 e1       	ldi	r18, 0x10	; 16
    1618:	32 e0       	ldi	r19, 0x02	; 2
    161a:	f8 01       	movw	r30, r16
    161c:	b7 fe       	sbrs	r11, 7
    161e:	07 c0       	rjmp	.+14     	; 0x162e <vfprintf+0x290>
    1620:	60 81       	ld	r22, Z
    1622:	71 81       	ldd	r23, Z+1	; 0x01
    1624:	82 81       	ldd	r24, Z+2	; 0x02
    1626:	93 81       	ldd	r25, Z+3	; 0x03
    1628:	0c 5f       	subi	r16, 0xFC	; 252
    162a:	1f 4f       	sbci	r17, 0xFF	; 255
    162c:	06 c0       	rjmp	.+12     	; 0x163a <vfprintf+0x29c>
    162e:	60 81       	ld	r22, Z
    1630:	71 81       	ldd	r23, Z+1	; 0x01
    1632:	80 e0       	ldi	r24, 0x00	; 0
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	0e 5f       	subi	r16, 0xFE	; 254
    1638:	1f 4f       	sbci	r17, 0xFF	; 255
    163a:	a3 01       	movw	r20, r6
    163c:	0e 94 25 0c 	call	0x184a	; 0x184a <__ultoa_invert>
    1640:	88 2e       	mov	r8, r24
    1642:	86 18       	sub	r8, r6
    1644:	fb 2d       	mov	r31, r11
    1646:	ff 77       	andi	r31, 0x7F	; 127
    1648:	3f 2e       	mov	r3, r31
    164a:	36 fe       	sbrs	r3, 6
    164c:	0d c0       	rjmp	.+26     	; 0x1668 <vfprintf+0x2ca>
    164e:	23 2d       	mov	r18, r3
    1650:	2e 7f       	andi	r18, 0xFE	; 254
    1652:	a2 2e       	mov	r10, r18
    1654:	89 14       	cp	r8, r9
    1656:	58 f4       	brcc	.+22     	; 0x166e <vfprintf+0x2d0>
    1658:	34 fe       	sbrs	r3, 4
    165a:	0b c0       	rjmp	.+22     	; 0x1672 <vfprintf+0x2d4>
    165c:	32 fc       	sbrc	r3, 2
    165e:	09 c0       	rjmp	.+18     	; 0x1672 <vfprintf+0x2d4>
    1660:	83 2d       	mov	r24, r3
    1662:	8e 7e       	andi	r24, 0xEE	; 238
    1664:	a8 2e       	mov	r10, r24
    1666:	05 c0       	rjmp	.+10     	; 0x1672 <vfprintf+0x2d4>
    1668:	b8 2c       	mov	r11, r8
    166a:	a3 2c       	mov	r10, r3
    166c:	03 c0       	rjmp	.+6      	; 0x1674 <vfprintf+0x2d6>
    166e:	b8 2c       	mov	r11, r8
    1670:	01 c0       	rjmp	.+2      	; 0x1674 <vfprintf+0x2d6>
    1672:	b9 2c       	mov	r11, r9
    1674:	a4 fe       	sbrs	r10, 4
    1676:	0f c0       	rjmp	.+30     	; 0x1696 <vfprintf+0x2f8>
    1678:	fe 01       	movw	r30, r28
    167a:	e8 0d       	add	r30, r8
    167c:	f1 1d       	adc	r31, r1
    167e:	80 81       	ld	r24, Z
    1680:	80 33       	cpi	r24, 0x30	; 48
    1682:	21 f4       	brne	.+8      	; 0x168c <vfprintf+0x2ee>
    1684:	9a 2d       	mov	r25, r10
    1686:	99 7e       	andi	r25, 0xE9	; 233
    1688:	a9 2e       	mov	r10, r25
    168a:	09 c0       	rjmp	.+18     	; 0x169e <vfprintf+0x300>
    168c:	a2 fe       	sbrs	r10, 2
    168e:	06 c0       	rjmp	.+12     	; 0x169c <vfprintf+0x2fe>
    1690:	b3 94       	inc	r11
    1692:	b3 94       	inc	r11
    1694:	04 c0       	rjmp	.+8      	; 0x169e <vfprintf+0x300>
    1696:	8a 2d       	mov	r24, r10
    1698:	86 78       	andi	r24, 0x86	; 134
    169a:	09 f0       	breq	.+2      	; 0x169e <vfprintf+0x300>
    169c:	b3 94       	inc	r11
    169e:	a3 fc       	sbrc	r10, 3
    16a0:	11 c0       	rjmp	.+34     	; 0x16c4 <vfprintf+0x326>
    16a2:	a0 fe       	sbrs	r10, 0
    16a4:	06 c0       	rjmp	.+12     	; 0x16b2 <vfprintf+0x314>
    16a6:	b2 14       	cp	r11, r2
    16a8:	88 f4       	brcc	.+34     	; 0x16cc <vfprintf+0x32e>
    16aa:	28 0c       	add	r2, r8
    16ac:	92 2c       	mov	r9, r2
    16ae:	9b 18       	sub	r9, r11
    16b0:	0e c0       	rjmp	.+28     	; 0x16ce <vfprintf+0x330>
    16b2:	b2 14       	cp	r11, r2
    16b4:	60 f4       	brcc	.+24     	; 0x16ce <vfprintf+0x330>
    16b6:	b6 01       	movw	r22, r12
    16b8:	80 e2       	ldi	r24, 0x20	; 32
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <fputc>
    16c0:	b3 94       	inc	r11
    16c2:	f7 cf       	rjmp	.-18     	; 0x16b2 <vfprintf+0x314>
    16c4:	b2 14       	cp	r11, r2
    16c6:	18 f4       	brcc	.+6      	; 0x16ce <vfprintf+0x330>
    16c8:	2b 18       	sub	r2, r11
    16ca:	02 c0       	rjmp	.+4      	; 0x16d0 <vfprintf+0x332>
    16cc:	98 2c       	mov	r9, r8
    16ce:	21 2c       	mov	r2, r1
    16d0:	a4 fe       	sbrs	r10, 4
    16d2:	10 c0       	rjmp	.+32     	; 0x16f4 <vfprintf+0x356>
    16d4:	b6 01       	movw	r22, r12
    16d6:	80 e3       	ldi	r24, 0x30	; 48
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <fputc>
    16de:	a2 fe       	sbrs	r10, 2
    16e0:	17 c0       	rjmp	.+46     	; 0x1710 <vfprintf+0x372>
    16e2:	a1 fc       	sbrc	r10, 1
    16e4:	03 c0       	rjmp	.+6      	; 0x16ec <vfprintf+0x34e>
    16e6:	88 e7       	ldi	r24, 0x78	; 120
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	02 c0       	rjmp	.+4      	; 0x16f0 <vfprintf+0x352>
    16ec:	88 e5       	ldi	r24, 0x58	; 88
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	b6 01       	movw	r22, r12
    16f2:	0c c0       	rjmp	.+24     	; 0x170c <vfprintf+0x36e>
    16f4:	8a 2d       	mov	r24, r10
    16f6:	86 78       	andi	r24, 0x86	; 134
    16f8:	59 f0       	breq	.+22     	; 0x1710 <vfprintf+0x372>
    16fa:	a1 fe       	sbrs	r10, 1
    16fc:	02 c0       	rjmp	.+4      	; 0x1702 <vfprintf+0x364>
    16fe:	8b e2       	ldi	r24, 0x2B	; 43
    1700:	01 c0       	rjmp	.+2      	; 0x1704 <vfprintf+0x366>
    1702:	80 e2       	ldi	r24, 0x20	; 32
    1704:	a7 fc       	sbrc	r10, 7
    1706:	8d e2       	ldi	r24, 0x2D	; 45
    1708:	b6 01       	movw	r22, r12
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <fputc>
    1710:	89 14       	cp	r8, r9
    1712:	38 f4       	brcc	.+14     	; 0x1722 <vfprintf+0x384>
    1714:	b6 01       	movw	r22, r12
    1716:	80 e3       	ldi	r24, 0x30	; 48
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <fputc>
    171e:	9a 94       	dec	r9
    1720:	f7 cf       	rjmp	.-18     	; 0x1710 <vfprintf+0x372>
    1722:	8a 94       	dec	r8
    1724:	f3 01       	movw	r30, r6
    1726:	e8 0d       	add	r30, r8
    1728:	f1 1d       	adc	r31, r1
    172a:	80 81       	ld	r24, Z
    172c:	b6 01       	movw	r22, r12
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <fputc>
    1734:	81 10       	cpse	r8, r1
    1736:	f5 cf       	rjmp	.-22     	; 0x1722 <vfprintf+0x384>
    1738:	22 20       	and	r2, r2
    173a:	09 f4       	brne	.+2      	; 0x173e <vfprintf+0x3a0>
    173c:	42 ce       	rjmp	.-892    	; 0x13c2 <vfprintf+0x24>
    173e:	b6 01       	movw	r22, r12
    1740:	80 e2       	ldi	r24, 0x20	; 32
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <fputc>
    1748:	2a 94       	dec	r2
    174a:	f6 cf       	rjmp	.-20     	; 0x1738 <vfprintf+0x39a>
    174c:	f6 01       	movw	r30, r12
    174e:	86 81       	ldd	r24, Z+6	; 0x06
    1750:	97 81       	ldd	r25, Z+7	; 0x07
    1752:	02 c0       	rjmp	.+4      	; 0x1758 <vfprintf+0x3ba>
    1754:	8f ef       	ldi	r24, 0xFF	; 255
    1756:	9f ef       	ldi	r25, 0xFF	; 255
    1758:	2b 96       	adiw	r28, 0x0b	; 11
    175a:	e2 e1       	ldi	r30, 0x12	; 18
    175c:	0c 94 d1 0c 	jmp	0x19a2	; 0x19a2 <__epilogue_restores__>

00001760 <calloc>:
    1760:	0f 93       	push	r16
    1762:	1f 93       	push	r17
    1764:	cf 93       	push	r28
    1766:	df 93       	push	r29
    1768:	86 9f       	mul	r24, r22
    176a:	80 01       	movw	r16, r0
    176c:	87 9f       	mul	r24, r23
    176e:	10 0d       	add	r17, r0
    1770:	96 9f       	mul	r25, r22
    1772:	10 0d       	add	r17, r0
    1774:	11 24       	eor	r1, r1
    1776:	c8 01       	movw	r24, r16
    1778:	0e 94 ba 07 	call	0xf74	; 0xf74 <malloc>
    177c:	ec 01       	movw	r28, r24
    177e:	00 97       	sbiw	r24, 0x00	; 0
    1780:	29 f0       	breq	.+10     	; 0x178c <calloc+0x2c>
    1782:	a8 01       	movw	r20, r16
    1784:	60 e0       	ldi	r22, 0x00	; 0
    1786:	70 e0       	ldi	r23, 0x00	; 0
    1788:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <memset>
    178c:	ce 01       	movw	r24, r28
    178e:	df 91       	pop	r29
    1790:	cf 91       	pop	r28
    1792:	1f 91       	pop	r17
    1794:	0f 91       	pop	r16
    1796:	08 95       	ret

00001798 <strnlen_P>:
    1798:	fc 01       	movw	r30, r24
    179a:	05 90       	lpm	r0, Z+
    179c:	61 50       	subi	r22, 0x01	; 1
    179e:	70 40       	sbci	r23, 0x00	; 0
    17a0:	01 10       	cpse	r0, r1
    17a2:	d8 f7       	brcc	.-10     	; 0x179a <strnlen_P+0x2>
    17a4:	80 95       	com	r24
    17a6:	90 95       	com	r25
    17a8:	8e 0f       	add	r24, r30
    17aa:	9f 1f       	adc	r25, r31
    17ac:	08 95       	ret

000017ae <memset>:
    17ae:	dc 01       	movw	r26, r24
    17b0:	01 c0       	rjmp	.+2      	; 0x17b4 <memset+0x6>
    17b2:	6d 93       	st	X+, r22
    17b4:	41 50       	subi	r20, 0x01	; 1
    17b6:	50 40       	sbci	r21, 0x00	; 0
    17b8:	e0 f7       	brcc	.-8      	; 0x17b2 <memset+0x4>
    17ba:	08 95       	ret

000017bc <strnlen>:
    17bc:	fc 01       	movw	r30, r24
    17be:	61 50       	subi	r22, 0x01	; 1
    17c0:	70 40       	sbci	r23, 0x00	; 0
    17c2:	01 90       	ld	r0, Z+
    17c4:	01 10       	cpse	r0, r1
    17c6:	d8 f7       	brcc	.-10     	; 0x17be <strnlen+0x2>
    17c8:	80 95       	com	r24
    17ca:	90 95       	com	r25
    17cc:	8e 0f       	add	r24, r30
    17ce:	9f 1f       	adc	r25, r31
    17d0:	08 95       	ret

000017d2 <fputc>:
    17d2:	0f 93       	push	r16
    17d4:	1f 93       	push	r17
    17d6:	cf 93       	push	r28
    17d8:	df 93       	push	r29
    17da:	fb 01       	movw	r30, r22
    17dc:	23 81       	ldd	r18, Z+3	; 0x03
    17de:	21 fd       	sbrc	r18, 1
    17e0:	03 c0       	rjmp	.+6      	; 0x17e8 <fputc+0x16>
    17e2:	8f ef       	ldi	r24, 0xFF	; 255
    17e4:	9f ef       	ldi	r25, 0xFF	; 255
    17e6:	2c c0       	rjmp	.+88     	; 0x1840 <fputc+0x6e>
    17e8:	22 ff       	sbrs	r18, 2
    17ea:	16 c0       	rjmp	.+44     	; 0x1818 <fputc+0x46>
    17ec:	46 81       	ldd	r20, Z+6	; 0x06
    17ee:	57 81       	ldd	r21, Z+7	; 0x07
    17f0:	24 81       	ldd	r18, Z+4	; 0x04
    17f2:	35 81       	ldd	r19, Z+5	; 0x05
    17f4:	42 17       	cp	r20, r18
    17f6:	53 07       	cpc	r21, r19
    17f8:	44 f4       	brge	.+16     	; 0x180a <fputc+0x38>
    17fa:	a0 81       	ld	r26, Z
    17fc:	b1 81       	ldd	r27, Z+1	; 0x01
    17fe:	9d 01       	movw	r18, r26
    1800:	2f 5f       	subi	r18, 0xFF	; 255
    1802:	3f 4f       	sbci	r19, 0xFF	; 255
    1804:	31 83       	std	Z+1, r19	; 0x01
    1806:	20 83       	st	Z, r18
    1808:	8c 93       	st	X, r24
    180a:	26 81       	ldd	r18, Z+6	; 0x06
    180c:	37 81       	ldd	r19, Z+7	; 0x07
    180e:	2f 5f       	subi	r18, 0xFF	; 255
    1810:	3f 4f       	sbci	r19, 0xFF	; 255
    1812:	37 83       	std	Z+7, r19	; 0x07
    1814:	26 83       	std	Z+6, r18	; 0x06
    1816:	14 c0       	rjmp	.+40     	; 0x1840 <fputc+0x6e>
    1818:	8b 01       	movw	r16, r22
    181a:	ec 01       	movw	r28, r24
    181c:	fb 01       	movw	r30, r22
    181e:	00 84       	ldd	r0, Z+8	; 0x08
    1820:	f1 85       	ldd	r31, Z+9	; 0x09
    1822:	e0 2d       	mov	r30, r0
    1824:	09 95       	icall
    1826:	89 2b       	or	r24, r25
    1828:	e1 f6       	brne	.-72     	; 0x17e2 <fputc+0x10>
    182a:	d8 01       	movw	r26, r16
    182c:	16 96       	adiw	r26, 0x06	; 6
    182e:	8d 91       	ld	r24, X+
    1830:	9c 91       	ld	r25, X
    1832:	17 97       	sbiw	r26, 0x07	; 7
    1834:	01 96       	adiw	r24, 0x01	; 1
    1836:	17 96       	adiw	r26, 0x07	; 7
    1838:	9c 93       	st	X, r25
    183a:	8e 93       	st	-X, r24
    183c:	16 97       	sbiw	r26, 0x06	; 6
    183e:	ce 01       	movw	r24, r28
    1840:	df 91       	pop	r29
    1842:	cf 91       	pop	r28
    1844:	1f 91       	pop	r17
    1846:	0f 91       	pop	r16
    1848:	08 95       	ret

0000184a <__ultoa_invert>:
    184a:	fa 01       	movw	r30, r20
    184c:	aa 27       	eor	r26, r26
    184e:	28 30       	cpi	r18, 0x08	; 8
    1850:	51 f1       	breq	.+84     	; 0x18a6 <__ultoa_invert+0x5c>
    1852:	20 31       	cpi	r18, 0x10	; 16
    1854:	81 f1       	breq	.+96     	; 0x18b6 <__ultoa_invert+0x6c>
    1856:	e8 94       	clt
    1858:	6f 93       	push	r22
    185a:	6e 7f       	andi	r22, 0xFE	; 254
    185c:	6e 5f       	subi	r22, 0xFE	; 254
    185e:	7f 4f       	sbci	r23, 0xFF	; 255
    1860:	8f 4f       	sbci	r24, 0xFF	; 255
    1862:	9f 4f       	sbci	r25, 0xFF	; 255
    1864:	af 4f       	sbci	r26, 0xFF	; 255
    1866:	b1 e0       	ldi	r27, 0x01	; 1
    1868:	3e d0       	rcall	.+124    	; 0x18e6 <__ultoa_invert+0x9c>
    186a:	b4 e0       	ldi	r27, 0x04	; 4
    186c:	3c d0       	rcall	.+120    	; 0x18e6 <__ultoa_invert+0x9c>
    186e:	67 0f       	add	r22, r23
    1870:	78 1f       	adc	r23, r24
    1872:	89 1f       	adc	r24, r25
    1874:	9a 1f       	adc	r25, r26
    1876:	a1 1d       	adc	r26, r1
    1878:	68 0f       	add	r22, r24
    187a:	79 1f       	adc	r23, r25
    187c:	8a 1f       	adc	r24, r26
    187e:	91 1d       	adc	r25, r1
    1880:	a1 1d       	adc	r26, r1
    1882:	6a 0f       	add	r22, r26
    1884:	71 1d       	adc	r23, r1
    1886:	81 1d       	adc	r24, r1
    1888:	91 1d       	adc	r25, r1
    188a:	a1 1d       	adc	r26, r1
    188c:	20 d0       	rcall	.+64     	; 0x18ce <__ultoa_invert+0x84>
    188e:	09 f4       	brne	.+2      	; 0x1892 <__ultoa_invert+0x48>
    1890:	68 94       	set
    1892:	3f 91       	pop	r19
    1894:	2a e0       	ldi	r18, 0x0A	; 10
    1896:	26 9f       	mul	r18, r22
    1898:	11 24       	eor	r1, r1
    189a:	30 19       	sub	r19, r0
    189c:	30 5d       	subi	r19, 0xD0	; 208
    189e:	31 93       	st	Z+, r19
    18a0:	de f6       	brtc	.-74     	; 0x1858 <__ultoa_invert+0xe>
    18a2:	cf 01       	movw	r24, r30
    18a4:	08 95       	ret
    18a6:	46 2f       	mov	r20, r22
    18a8:	47 70       	andi	r20, 0x07	; 7
    18aa:	40 5d       	subi	r20, 0xD0	; 208
    18ac:	41 93       	st	Z+, r20
    18ae:	b3 e0       	ldi	r27, 0x03	; 3
    18b0:	0f d0       	rcall	.+30     	; 0x18d0 <__ultoa_invert+0x86>
    18b2:	c9 f7       	brne	.-14     	; 0x18a6 <__ultoa_invert+0x5c>
    18b4:	f6 cf       	rjmp	.-20     	; 0x18a2 <__ultoa_invert+0x58>
    18b6:	46 2f       	mov	r20, r22
    18b8:	4f 70       	andi	r20, 0x0F	; 15
    18ba:	40 5d       	subi	r20, 0xD0	; 208
    18bc:	4a 33       	cpi	r20, 0x3A	; 58
    18be:	18 f0       	brcs	.+6      	; 0x18c6 <__ultoa_invert+0x7c>
    18c0:	49 5d       	subi	r20, 0xD9	; 217
    18c2:	31 fd       	sbrc	r19, 1
    18c4:	40 52       	subi	r20, 0x20	; 32
    18c6:	41 93       	st	Z+, r20
    18c8:	02 d0       	rcall	.+4      	; 0x18ce <__ultoa_invert+0x84>
    18ca:	a9 f7       	brne	.-22     	; 0x18b6 <__ultoa_invert+0x6c>
    18cc:	ea cf       	rjmp	.-44     	; 0x18a2 <__ultoa_invert+0x58>
    18ce:	b4 e0       	ldi	r27, 0x04	; 4
    18d0:	a6 95       	lsr	r26
    18d2:	97 95       	ror	r25
    18d4:	87 95       	ror	r24
    18d6:	77 95       	ror	r23
    18d8:	67 95       	ror	r22
    18da:	ba 95       	dec	r27
    18dc:	c9 f7       	brne	.-14     	; 0x18d0 <__ultoa_invert+0x86>
    18de:	00 97       	sbiw	r24, 0x00	; 0
    18e0:	61 05       	cpc	r22, r1
    18e2:	71 05       	cpc	r23, r1
    18e4:	08 95       	ret
    18e6:	9b 01       	movw	r18, r22
    18e8:	ac 01       	movw	r20, r24
    18ea:	0a 2e       	mov	r0, r26
    18ec:	06 94       	lsr	r0
    18ee:	57 95       	ror	r21
    18f0:	47 95       	ror	r20
    18f2:	37 95       	ror	r19
    18f4:	27 95       	ror	r18
    18f6:	ba 95       	dec	r27
    18f8:	c9 f7       	brne	.-14     	; 0x18ec <__ultoa_invert+0xa2>
    18fa:	62 0f       	add	r22, r18
    18fc:	73 1f       	adc	r23, r19
    18fe:	84 1f       	adc	r24, r20
    1900:	95 1f       	adc	r25, r21
    1902:	a0 1d       	adc	r26, r0
    1904:	08 95       	ret

00001906 <__divmodsi4>:
    1906:	05 2e       	mov	r0, r21
    1908:	97 fb       	bst	r25, 7
    190a:	1e f4       	brtc	.+6      	; 0x1912 <__divmodsi4+0xc>
    190c:	00 94       	com	r0
    190e:	0e 94 9a 0c 	call	0x1934	; 0x1934 <__negsi2>
    1912:	57 fd       	sbrc	r21, 7
    1914:	07 d0       	rcall	.+14     	; 0x1924 <__divmodsi4_neg2>
    1916:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <__udivmodsi4>
    191a:	07 fc       	sbrc	r0, 7
    191c:	03 d0       	rcall	.+6      	; 0x1924 <__divmodsi4_neg2>
    191e:	4e f4       	brtc	.+18     	; 0x1932 <__divmodsi4_exit>
    1920:	0c 94 9a 0c 	jmp	0x1934	; 0x1934 <__negsi2>

00001924 <__divmodsi4_neg2>:
    1924:	50 95       	com	r21
    1926:	40 95       	com	r20
    1928:	30 95       	com	r19
    192a:	21 95       	neg	r18
    192c:	3f 4f       	sbci	r19, 0xFF	; 255
    192e:	4f 4f       	sbci	r20, 0xFF	; 255
    1930:	5f 4f       	sbci	r21, 0xFF	; 255

00001932 <__divmodsi4_exit>:
    1932:	08 95       	ret

00001934 <__negsi2>:
    1934:	90 95       	com	r25
    1936:	80 95       	com	r24
    1938:	70 95       	com	r23
    193a:	61 95       	neg	r22
    193c:	7f 4f       	sbci	r23, 0xFF	; 255
    193e:	8f 4f       	sbci	r24, 0xFF	; 255
    1940:	9f 4f       	sbci	r25, 0xFF	; 255
    1942:	08 95       	ret

00001944 <__muluhisi3>:
    1944:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <__umulhisi3>
    1948:	a5 9f       	mul	r26, r21
    194a:	90 0d       	add	r25, r0
    194c:	b4 9f       	mul	r27, r20
    194e:	90 0d       	add	r25, r0
    1950:	a4 9f       	mul	r26, r20
    1952:	80 0d       	add	r24, r0
    1954:	91 1d       	adc	r25, r1
    1956:	11 24       	eor	r1, r1
    1958:	08 95       	ret

0000195a <__mulshisi3>:
    195a:	b7 ff       	sbrs	r27, 7
    195c:	0c 94 a2 0c 	jmp	0x1944	; 0x1944 <__muluhisi3>

00001960 <__mulohisi3>:
    1960:	0e 94 a2 0c 	call	0x1944	; 0x1944 <__muluhisi3>
    1964:	82 1b       	sub	r24, r18
    1966:	93 0b       	sbc	r25, r19
    1968:	08 95       	ret

0000196a <__prologue_saves__>:
    196a:	2f 92       	push	r2
    196c:	3f 92       	push	r3
    196e:	4f 92       	push	r4
    1970:	5f 92       	push	r5
    1972:	6f 92       	push	r6
    1974:	7f 92       	push	r7
    1976:	8f 92       	push	r8
    1978:	9f 92       	push	r9
    197a:	af 92       	push	r10
    197c:	bf 92       	push	r11
    197e:	cf 92       	push	r12
    1980:	df 92       	push	r13
    1982:	ef 92       	push	r14
    1984:	ff 92       	push	r15
    1986:	0f 93       	push	r16
    1988:	1f 93       	push	r17
    198a:	cf 93       	push	r28
    198c:	df 93       	push	r29
    198e:	cd b7       	in	r28, 0x3d	; 61
    1990:	de b7       	in	r29, 0x3e	; 62
    1992:	ca 1b       	sub	r28, r26
    1994:	db 0b       	sbc	r29, r27
    1996:	0f b6       	in	r0, 0x3f	; 63
    1998:	f8 94       	cli
    199a:	de bf       	out	0x3e, r29	; 62
    199c:	0f be       	out	0x3f, r0	; 63
    199e:	cd bf       	out	0x3d, r28	; 61
    19a0:	09 94       	ijmp

000019a2 <__epilogue_restores__>:
    19a2:	2a 88       	ldd	r2, Y+18	; 0x12
    19a4:	39 88       	ldd	r3, Y+17	; 0x11
    19a6:	48 88       	ldd	r4, Y+16	; 0x10
    19a8:	5f 84       	ldd	r5, Y+15	; 0x0f
    19aa:	6e 84       	ldd	r6, Y+14	; 0x0e
    19ac:	7d 84       	ldd	r7, Y+13	; 0x0d
    19ae:	8c 84       	ldd	r8, Y+12	; 0x0c
    19b0:	9b 84       	ldd	r9, Y+11	; 0x0b
    19b2:	aa 84       	ldd	r10, Y+10	; 0x0a
    19b4:	b9 84       	ldd	r11, Y+9	; 0x09
    19b6:	c8 84       	ldd	r12, Y+8	; 0x08
    19b8:	df 80       	ldd	r13, Y+7	; 0x07
    19ba:	ee 80       	ldd	r14, Y+6	; 0x06
    19bc:	fd 80       	ldd	r15, Y+5	; 0x05
    19be:	0c 81       	ldd	r16, Y+4	; 0x04
    19c0:	1b 81       	ldd	r17, Y+3	; 0x03
    19c2:	aa 81       	ldd	r26, Y+2	; 0x02
    19c4:	b9 81       	ldd	r27, Y+1	; 0x01
    19c6:	ce 0f       	add	r28, r30
    19c8:	d1 1d       	adc	r29, r1
    19ca:	0f b6       	in	r0, 0x3f	; 63
    19cc:	f8 94       	cli
    19ce:	de bf       	out	0x3e, r29	; 62
    19d0:	0f be       	out	0x3f, r0	; 63
    19d2:	cd bf       	out	0x3d, r28	; 61
    19d4:	ed 01       	movw	r28, r26
    19d6:	08 95       	ret

000019d8 <__udivmodsi4>:
    19d8:	a1 e2       	ldi	r26, 0x21	; 33
    19da:	1a 2e       	mov	r1, r26
    19dc:	aa 1b       	sub	r26, r26
    19de:	bb 1b       	sub	r27, r27
    19e0:	fd 01       	movw	r30, r26
    19e2:	0d c0       	rjmp	.+26     	; 0x19fe <__udivmodsi4_ep>

000019e4 <__udivmodsi4_loop>:
    19e4:	aa 1f       	adc	r26, r26
    19e6:	bb 1f       	adc	r27, r27
    19e8:	ee 1f       	adc	r30, r30
    19ea:	ff 1f       	adc	r31, r31
    19ec:	a2 17       	cp	r26, r18
    19ee:	b3 07       	cpc	r27, r19
    19f0:	e4 07       	cpc	r30, r20
    19f2:	f5 07       	cpc	r31, r21
    19f4:	20 f0       	brcs	.+8      	; 0x19fe <__udivmodsi4_ep>
    19f6:	a2 1b       	sub	r26, r18
    19f8:	b3 0b       	sbc	r27, r19
    19fa:	e4 0b       	sbc	r30, r20
    19fc:	f5 0b       	sbc	r31, r21

000019fe <__udivmodsi4_ep>:
    19fe:	66 1f       	adc	r22, r22
    1a00:	77 1f       	adc	r23, r23
    1a02:	88 1f       	adc	r24, r24
    1a04:	99 1f       	adc	r25, r25
    1a06:	1a 94       	dec	r1
    1a08:	69 f7       	brne	.-38     	; 0x19e4 <__udivmodsi4_loop>
    1a0a:	60 95       	com	r22
    1a0c:	70 95       	com	r23
    1a0e:	80 95       	com	r24
    1a10:	90 95       	com	r25
    1a12:	9b 01       	movw	r18, r22
    1a14:	ac 01       	movw	r20, r24
    1a16:	bd 01       	movw	r22, r26
    1a18:	cf 01       	movw	r24, r30
    1a1a:	08 95       	ret

00001a1c <__umulhisi3>:
    1a1c:	a2 9f       	mul	r26, r18
    1a1e:	b0 01       	movw	r22, r0
    1a20:	b3 9f       	mul	r27, r19
    1a22:	c0 01       	movw	r24, r0
    1a24:	a3 9f       	mul	r26, r19
    1a26:	70 0d       	add	r23, r0
    1a28:	81 1d       	adc	r24, r1
    1a2a:	11 24       	eor	r1, r1
    1a2c:	91 1d       	adc	r25, r1
    1a2e:	b2 9f       	mul	r27, r18
    1a30:	70 0d       	add	r23, r0
    1a32:	81 1d       	adc	r24, r1
    1a34:	11 24       	eor	r1, r1
    1a36:	91 1d       	adc	r25, r1
    1a38:	08 95       	ret

00001a3a <_exit>:
    1a3a:	f8 94       	cli

00001a3c <__stop_program>:
    1a3c:	ff cf       	rjmp	.-2      	; 0x1a3c <__stop_program>
