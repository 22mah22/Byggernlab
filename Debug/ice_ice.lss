
ice_ice.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000e0  00800100  000022c2  00002356  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000022c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  008001e0  008001e0  00002436  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002436  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002494  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  000024d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002010  00000000  00000000  00002610  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d9a  00000000  00000000  00004620  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c13  00000000  00000000  000053ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002ec  00000000  00000000  00005fd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000742  00000000  00000000  000062bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000011f6  00000000  00000000  000069fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b0  00000000  00000000  00007bf4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 60 08 	jmp	0x10c0	; 0x10c0 <__ctors_end>
       4:	0c 94 7d 08 	jmp	0x10fa	; 0x10fa <__bad_interrupt>
       8:	0c 94 7d 08 	jmp	0x10fa	; 0x10fa <__bad_interrupt>
       c:	0c 94 7d 08 	jmp	0x10fa	; 0x10fa <__bad_interrupt>
      10:	0c 94 7d 08 	jmp	0x10fa	; 0x10fa <__bad_interrupt>
      14:	0c 94 7d 08 	jmp	0x10fa	; 0x10fa <__bad_interrupt>
      18:	0c 94 7d 08 	jmp	0x10fa	; 0x10fa <__bad_interrupt>
      1c:	0c 94 7d 08 	jmp	0x10fa	; 0x10fa <__bad_interrupt>
      20:	0c 94 7d 08 	jmp	0x10fa	; 0x10fa <__bad_interrupt>
      24:	0c 94 7d 08 	jmp	0x10fa	; 0x10fa <__bad_interrupt>
      28:	0c 94 7d 08 	jmp	0x10fa	; 0x10fa <__bad_interrupt>
      2c:	0c 94 7d 08 	jmp	0x10fa	; 0x10fa <__bad_interrupt>
      30:	0c 94 7d 08 	jmp	0x10fa	; 0x10fa <__bad_interrupt>
      34:	0c 94 7d 08 	jmp	0x10fa	; 0x10fa <__bad_interrupt>
      38:	0c 94 7d 08 	jmp	0x10fa	; 0x10fa <__bad_interrupt>
      3c:	0c 94 7d 08 	jmp	0x10fa	; 0x10fa <__bad_interrupt>
      40:	0c 94 7d 08 	jmp	0x10fa	; 0x10fa <__bad_interrupt>
      44:	0c 94 7d 08 	jmp	0x10fa	; 0x10fa <__bad_interrupt>
      48:	0c 94 7d 08 	jmp	0x10fa	; 0x10fa <__bad_interrupt>
      4c:	0c 94 7d 08 	jmp	0x10fa	; 0x10fa <__bad_interrupt>
      50:	0c 94 7d 08 	jmp	0x10fa	; 0x10fa <__bad_interrupt>
      54:	0c 94 7d 08 	jmp	0x10fa	; 0x10fa <__bad_interrupt>
      58:	0c 94 7d 08 	jmp	0x10fa	; 0x10fa <__bad_interrupt>
      5c:	0c 94 7d 08 	jmp	0x10fa	; 0x10fa <__bad_interrupt>
      60:	0c 94 7d 08 	jmp	0x10fa	; 0x10fa <__bad_interrupt>
      64:	0c 94 7d 08 	jmp	0x10fa	; 0x10fa <__bad_interrupt>
      68:	0c 94 7d 08 	jmp	0x10fa	; 0x10fa <__bad_interrupt>
      6c:	0c 94 7d 08 	jmp	0x10fa	; 0x10fa <__bad_interrupt>

00000070 <__trampolines_end>:
	...
     10c:	00 01       	movw	r0, r0
     10e:	01 01       	movw	r0, r2
     110:	01 01       	movw	r0, r2
	...
     14a:	01 01       	movw	r0, r2
     14c:	01 01       	movw	r0, r2
     14e:	01 00       	.word	0x0001	; ????
     150:	00 01       	movw	r0, r0
     152:	01 01       	movw	r0, r2
     154:	01 00       	.word	0x0001	; ????
	...
     186:	00 00       	nop
     188:	01 01       	movw	r0, r2
     18a:	01 00       	.word	0x0001	; ????
	...
     194:	00 01       	movw	r0, r0
     196:	01 00       	.word	0x0001	; ????
	...
     1c4:	00 00       	nop
     1c6:	00 01       	movw	r0, r0
	...
     1d4:	00 00       	nop
     1d6:	01 01       	movw	r0, r2
	...
     204:	00 00       	nop
     206:	01 00       	.word	0x0001	; ????
	...
     218:	01 00       	.word	0x0001	; ????
	...
     242:	00 00       	nop
     244:	00 01       	movw	r0, r0
	...
     256:	00 00       	nop
     258:	00 01       	movw	r0, r0
	...
     282:	00 00       	nop
     284:	00 01       	movw	r0, r0
	...
     29a:	01 00       	.word	0x0001	; ????
	...
     2c4:	01 01       	movw	r0, r2
	...
     2da:	01 01       	movw	r0, r2
	...
     304:	01 00       	.word	0x0001	; ????
	...
     30e:	01 01       	movw	r0, r2
     310:	01 01       	movw	r0, r2
     312:	01 01       	movw	r0, r2
     314:	01 01       	movw	r0, r2
     316:	01 01       	movw	r0, r2
     318:	01 00       	.word	0x0001	; ????
     31a:	00 01       	movw	r0, r0
	...
     344:	01 00       	.word	0x0001	; ????
	...
     34e:	00 00       	nop
     350:	01 01       	movw	r0, r2
     352:	01 01       	movw	r0, r2
     354:	00 00       	nop
     356:	00 00       	nop
     358:	00 00       	nop
     35a:	00 01       	movw	r0, r0
	...
     384:	01 00       	.word	0x0001	; ????
     386:	00 00       	nop
     388:	00 00       	nop
     38a:	00 00       	nop
     38c:	01 01       	movw	r0, r2
     38e:	01 01       	movw	r0, r2
     390:	00 00       	nop
     392:	00 00       	nop
     394:	01 01       	movw	r0, r2
     396:	01 01       	movw	r0, r2
     398:	01 00       	.word	0x0001	; ????
     39a:	00 01       	movw	r0, r0
	...
     3c4:	01 00       	.word	0x0001	; ????
	...
     3ce:	00 01       	movw	r0, r0
     3d0:	01 01       	movw	r0, r2
     3d2:	00 00       	nop
     3d4:	00 00       	nop
     3d6:	00 00       	nop
     3d8:	01 00       	.word	0x0001	; ????
     3da:	00 00       	nop
     3dc:	01 00       	.word	0x0001	; ????
	...
     402:	00 00       	nop
     404:	01 00       	.word	0x0001	; ????
     406:	00 00       	nop
     408:	00 00       	nop
     40a:	00 00       	nop
     40c:	00 01       	movw	r0, r0
     40e:	01 00       	.word	0x0001	; ????
	...
     418:	00 00       	nop
     41a:	01 00       	.word	0x0001	; ????
     41c:	01 00       	.word	0x0001	; ????
	...
     442:	00 00       	nop
     444:	01 00       	.word	0x0001	; ????
	...
     456:	00 01       	movw	r0, r0
     458:	00 00       	nop
     45a:	00 00       	nop
     45c:	01 00       	.word	0x0001	; ????
	...
     482:	00 00       	nop
     484:	01 00       	.word	0x0001	; ????
	...
     48e:	01 01       	movw	r0, r2
     490:	01 00       	.word	0x0001	; ????
	...
     49a:	00 00       	nop
     49c:	01 00       	.word	0x0001	; ????
	...
     4c2:	00 00       	nop
     4c4:	01 00       	.word	0x0001	; ????
	...
     4ce:	01 01       	movw	r0, r2
     4d0:	01 01       	movw	r0, r2
     4d2:	01 00       	.word	0x0001	; ????
     4d4:	00 00       	nop
     4d6:	00 00       	nop
     4d8:	01 01       	movw	r0, r2
     4da:	01 00       	.word	0x0001	; ????
     4dc:	01 00       	.word	0x0001	; ????
	...
     502:	00 00       	nop
     504:	01 00       	.word	0x0001	; ????
	...
     50e:	01 01       	movw	r0, r2
     510:	01 01       	movw	r0, r2
     512:	01 00       	.word	0x0001	; ????
     514:	00 00       	nop
     516:	00 01       	movw	r0, r0
     518:	01 01       	movw	r0, r2
     51a:	01 00       	.word	0x0001	; ????
     51c:	01 00       	.word	0x0001	; ????
	...
     542:	00 00       	nop
     544:	01 00       	.word	0x0001	; ????
	...
     55a:	01 00       	.word	0x0001	; ????
     55c:	00 01       	movw	r0, r0
	...
     582:	00 00       	nop
     584:	00 01       	movw	r0, r0
	...
     596:	01 00       	.word	0x0001	; ????
     598:	00 00       	nop
     59a:	00 00       	nop
     59c:	00 01       	movw	r0, r0
	...
     5c2:	00 00       	nop
     5c4:	00 01       	movw	r0, r0
     5c6:	00 00       	nop
     5c8:	00 01       	movw	r0, r0
	...
     5d6:	00 01       	movw	r0, r0
     5d8:	00 00       	nop
     5da:	00 00       	nop
     5dc:	00 01       	movw	r0, r0
	...
     606:	01 00       	.word	0x0001	; ????
     608:	00 01       	movw	r0, r0
	...
     616:	00 01       	movw	r0, r0
     618:	01 00       	.word	0x0001	; ????
     61a:	00 00       	nop
     61c:	00 01       	movw	r0, r0
	...
     646:	01 00       	.word	0x0001	; ????
     648:	00 00       	nop
     64a:	01 00       	.word	0x0001	; ????
     64c:	00 00       	nop
     64e:	00 00       	nop
     650:	00 00       	nop
     652:	01 01       	movw	r0, r2
     654:	00 00       	nop
     656:	00 00       	nop
     658:	01 00       	.word	0x0001	; ????
     65a:	00 00       	nop
     65c:	01 00       	.word	0x0001	; ????
	...
     686:	01 01       	movw	r0, r2
     688:	00 00       	nop
     68a:	01 00       	.word	0x0001	; ????
     68c:	00 00       	nop
     68e:	00 00       	nop
     690:	00 00       	nop
     692:	01 01       	movw	r0, r2
     694:	00 01       	movw	r0, r0
     696:	00 01       	movw	r0, r0
     698:	00 00       	nop
     69a:	00 00       	nop
     69c:	01 00       	.word	0x0001	; ????
	...
     6c6:	01 01       	movw	r0, r2
     6c8:	00 00       	nop
     6ca:	01 01       	movw	r0, r2
	...
     6d4:	00 00       	nop
     6d6:	00 01       	movw	r0, r0
     6d8:	00 00       	nop
     6da:	00 01       	movw	r0, r0
     6dc:	01 00       	.word	0x0001	; ????
	...
     706:	01 01       	movw	r0, r2
     708:	00 00       	nop
     70a:	01 01       	movw	r0, r2
	...
     718:	00 00       	nop
     71a:	00 01       	movw	r0, r0
	...
     744:	00 00       	nop
     746:	01 01       	movw	r0, r2
     748:	00 00       	nop
     74a:	01 00       	.word	0x0001	; ????
     74c:	01 00       	.word	0x0001	; ????
     74e:	00 00       	nop
     750:	00 01       	movw	r0, r0
     752:	01 01       	movw	r0, r2
     754:	01 01       	movw	r0, r2
     756:	01 01       	movw	r0, r2
     758:	00 00       	nop
     75a:	01 00       	.word	0x0001	; ????
	...
     784:	00 00       	nop
     786:	01 00       	.word	0x0001	; ????
     788:	00 00       	nop
     78a:	01 00       	.word	0x0001	; ????
     78c:	00 01       	movw	r0, r0
     78e:	01 00       	.word	0x0001	; ????
	...
     798:	00 00       	nop
     79a:	01 00       	.word	0x0001	; ????
	...
     7c4:	00 00       	nop
     7c6:	01 00       	.word	0x0001	; ????
     7c8:	00 00       	nop
     7ca:	00 00       	nop
     7cc:	00 00       	nop
     7ce:	01 01       	movw	r0, r2
	...
     7d8:	00 01       	movw	r0, r0
     7da:	01 00       	.word	0x0001	; ????
	...
     804:	00 00       	nop
     806:	01 00       	.word	0x0001	; ????
     808:	00 00       	nop
     80a:	00 00       	nop
     80c:	00 00       	nop
     80e:	00 01       	movw	r0, r0
     810:	01 00       	.word	0x0001	; ????
     812:	00 00       	nop
     814:	00 00       	nop
     816:	00 00       	nop
     818:	00 01       	movw	r0, r0
	...
     842:	00 00       	nop
     844:	00 01       	movw	r0, r0
	...
     84e:	00 00       	nop
     850:	01 01       	movw	r0, r2
     852:	01 00       	.word	0x0001	; ????
     854:	00 00       	nop
     856:	00 01       	movw	r0, r0
     858:	01 00       	.word	0x0001	; ????
	...
     882:	00 00       	nop
     884:	00 01       	movw	r0, r0
     886:	00 00       	nop
     888:	00 01       	movw	r0, r0
     88a:	01 00       	.word	0x0001	; ????
     88c:	00 00       	nop
     88e:	00 00       	nop
     890:	00 00       	nop
     892:	01 01       	movw	r0, r2
     894:	01 01       	movw	r0, r2
     896:	01 00       	.word	0x0001	; ????
	...
     8c4:	01 00       	.word	0x0001	; ????
     8c6:	00 00       	nop
     8c8:	01 00       	.word	0x0001	; ????
	...
     8d2:	01 00       	.word	0x0001	; ????
     8d4:	00 01       	movw	r0, r0
	...
     8fe:	00 00       	nop
     900:	00 01       	movw	r0, r0
     902:	01 01       	movw	r0, r2
     904:	01 00       	.word	0x0001	; ????
     906:	00 01       	movw	r0, r0
     908:	01 00       	.word	0x0001	; ????
	...
     916:	01 01       	movw	r0, r2
     918:	01 01       	movw	r0, r2
     91a:	01 01       	movw	r0, r2
     91c:	01 01       	movw	r0, r2
	...
     93e:	00 01       	movw	r0, r0
     940:	01 00       	.word	0x0001	; ????
	...
     98e:	01 01       	movw	r0, r2
     990:	00 01       	movw	r0, r0
	...
     9ce:	00 00       	nop
     9d0:	01 00       	.word	0x0001	; ????
	...

00000a70 <font4>:
     a70:	00 00 00 00 00 5c 00 00 0c 00 0c 00 7c 28 7c 28     .....\......|(|(
     a80:	58 dc 68 00 24 10 48 00 28 54 28 40 00 0c 00 00     X.h.$.H.(T(@....
     a90:	00 78 84 00 84 78 00 00 54 38 54 00 10 7c 10 00     .x...x..T8T..|..
     aa0:	80 40 00 00 10 10 10 00 00 40 00 00 60 10 0c 00     .@.......@..`...
     ab0:	38 54 38 00 48 7c 40 00 48 64 58 00 44 54 2c 00     8T8.H|@.HdX.DT,.
     ac0:	1c 10 7c 00 5c 54 24 00 38 54 24 00 64 14 0c 00     ..|.\T$.8T$.d...
     ad0:	68 54 2c 00 48 54 38 00 00 48 00 00 80 48 00 00     hT,.HT8..H...H..
     ae0:	10 28 44 00 28 28 28 00 44 28 10 00 04 54 08 00     .(D.(((.D(...T..
     af0:	38 44 5c 00 78 14 78 00 7c 54 28 00 38 44 28 00     8D\.x.x.|T(.8D(.
     b00:	7c 44 38 00 7c 54 44 00 7c 14 04 00 38 44 74 00     |D8.|TD.|...8Dt.
     b10:	7c 10 7c 00 44 7c 44 00 20 40 3c 00 7c 10 6c 00     |.|.D|D. @<.|.l.
     b20:	7c 40 40 00 7c 18 7c 00 78 10 3c 00 38 44 38 00     |@@.|.|.x.<.8D8.
     b30:	7c 14 08 00 38 44 b8 00 7c 14 68 00 48 54 24 00     |...8D..|.h.HT$.
     b40:	04 7c 04 00 7c 40 7c 00 3c 60 3c 00 7c 30 7c 00     .|..|@|.<`<.|0|.
     b50:	6c 10 6c 00 0c 70 0c 00 64 54 4c 00 00 7c 44 00     l.l..p..dTL..|D.
     b60:	0c 10 60 00 44 7c 00 00 08 04 08 00 80 80 80 00     ..`.D|..........
     b70:	00 04 08 00 30 48 78 00 7c 48 30 00 30 48 48 00     ....0Hx.|H0.0HH.
     b80:	30 48 7c 00 30 68 50 00 10 78 14 00 90 a8 78 00     0H|.0hP..x....x.
     b90:	7c 08 70 00 50 74 40 00 80 80 74 00 7c 10 68 00     |.p.Pt@...t.|.h.
     ba0:	44 7c 40 00 78 10 78 00 78 08 70 00 30 48 30 00     D|@.x.x.x.p.0H0.
     bb0:	f8 28 10 00 30 48 f8 00 78 10 08 00 50 58 28 00     .(..0H..x...PX(.
     bc0:	08 3c 48 00 38 40 78 00 38 40 38 00 78 20 78 00     .<H.8@x.8@8.x x.
     bd0:	48 30 48 00 98 a0 78 00 48 68 58 00 10 78 84 00     H0H...x.HhX..x..
     be0:	00 7c 00 00 84 78 10 00 08 04 08 04                 .|...x......

00000bec <font5>:
     bec:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     bfc:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     c0c:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
     c1c:	1c 00 08 2a 1c 2a 08 08 08 3e 08 08 00 50 30 00     ...*.*...>...P0.
     c2c:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
     c3c:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
     c4c:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
     c5c:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
     c6c:	29 1e 00 36 36 00 00 00 56 36 00 00 00 08 14 22     )..66...V6....."
     c7c:	41 14 14 14 14 14 41 22 14 08 00 02 01 51 09 06     A.....A".....Q..
     c8c:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     c9c:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     cac:	09 01 01 3e 41 41 51 32 7f 08 08 08 7f 00 41 7f     ...>AAQ2......A.
     cbc:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     ccc:	40 7f 02 04 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     cdc:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     cec:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     cfc:	40 20 1f 7f 20 18 20 7f 63 14 08 14 63 03 04 78     @ .. . .c...c..x
     d0c:	04 03 61 51 49 45 43 00 00 7f 41 41 02 04 08 10     ..aQIEC...AA....
     d1c:	20 41 41 7f 00 00 04 02 01 02 04 40 40 40 40 40      AA........@@@@@
     d2c:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     d3c:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     d4c:	09 01 02 08 14 54 54 3c 7f 08 04 04 78 00 44 7d     .....TT<....x.D}
     d5c:	40 00 20 40 44 3d 00 00 7f 10 28 44 00 41 7f 40     @. @D=....(D.A.@
     d6c:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     d7c:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     d8c:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     d9c:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     dac:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     dbc:	00 00 41 36 08 00 02 01 03 02 01                    ..A6.......

00000dc7 <font8>:
	...
     dcf:	00 06 5f 5f 06 00 00 00 00 07 07 00 07 07 00 00     ..__............
     ddf:	14 7f 7f 14 7f 7f 14 00 24 2e 6b 6b 3a 12 00 00     ........$.kk:...
     def:	46 66 30 18 0c 66 62 00 30 7a 4f 5d 37 7a 48 00     Ff0..fb.0zO]7zH.
     dff:	04 07 03 00 00 00 00 00 00 1c 3e 63 41 00 00 00     ..........>cA...
     e0f:	00 41 63 3e 1c 00 00 00 08 2a 3e 1c 1c 3e 2a 08     .Ac>.....*>..>*.
     e1f:	08 08 3e 3e 08 08 00 00 00 a0 e0 60 00 00 00 00     ..>>.......`....
     e2f:	08 08 08 08 08 08 00 00 00 00 60 60 00 00 00 00     ..........``....
     e3f:	60 30 18 0c 06 03 01 00 3e 7f 59 4d 7f 3e 00 00     `0......>.YM.>..
     e4f:	42 42 7f 7f 40 40 00 00 62 73 59 49 6f 66 00 00     BB..@@..bsYIof..
     e5f:	22 63 49 49 7f 36 00 00 18 1c 16 13 7f 7f 10 00     "cII.6..........
     e6f:	27 67 45 45 7d 39 00 00 3c 7e 4b 49 79 30 00 00     'gEE}9..<~KIy0..
     e7f:	03 63 71 19 0f 07 00 00 36 7f 49 49 7f 36 00 00     .cq.....6.II.6..
     e8f:	06 4f 49 69 3f 1e 00 00 00 00 6c 6c 00 00 00 00     .OIi?.....ll....
     e9f:	00 a0 ec 6c 00 00 00 00 08 1c 36 63 41 00 00 00     ...l......6cA...
     eaf:	14 14 14 14 14 14 00 00 00 41 63 36 1c 08 00 00     .........Ac6....
     ebf:	02 03 51 59 0f 06 00 00 3e 7f 41 5d 5d 1f 1e 00     ..QY....>.A]]...
     ecf:	7c 7e 13 13 7e 7c 00 00 41 7f 7f 49 49 7f 36 00     |~..~|..A..II.6.
     edf:	1c 3e 63 41 41 63 22 00 41 7f 7f 41 63 7f 1c 00     .>cAAc".A..Ac...
     eef:	41 7f 7f 49 5d 41 63 00 41 7f 7f 49 1d 01 03 00     A..I]Ac.A..I....
     eff:	1c 3e 63 41 51 73 72 00 7f 7f 08 08 7f 7f 00 00     .>cAQsr.........
     f0f:	00 41 7f 7f 41 00 00 00 30 70 40 41 7f 3f 01 00     .A..A...0p@A.?..
     f1f:	41 7f 7f 08 1c 77 63 00 41 7f 7f 41 40 60 70 00     A....wc.A..A@`p.
     f2f:	7f 7f 06 0c 06 7f 7f 00 7f 7f 06 0c 18 7f 7f 00     ................
     f3f:	1c 3e 63 41 63 3e 1c 00 41 7f 7f 49 09 0f 06 00     .>cAc>..A..I....
     f4f:	1e 3f 21 71 7f 5e 00 00 41 7f 7f 19 39 6f 46 00     .?!q.^..A...9oF.
     f5f:	26 67 4d 59 7b 32 00 00 03 41 7f 7f 41 03 00 00     &gMY{2...A..A...
     f6f:	7f 7f 40 40 7f 7f 00 00 1f 3f 60 60 3f 1f 00 00     ..@@.....?``?...
     f7f:	7f 7f 30 18 30 7f 7f 00 63 77 1c 08 1c 77 63 00     ..0.0...cw...wc.
     f8f:	07 4f 78 78 4f 07 00 00 67 73 59 4d 47 63 71 00     .OxxO...gsYMGcq.
     f9f:	00 7f 7f 41 41 00 00 00 01 03 06 0c 18 30 60 00     ...AA........0`.
     faf:	00 41 41 7f 7f 00 00 00 08 0c 06 03 06 0c 08 00     .AA.............
     fbf:	80 80 80 80 80 80 80 80 00 00 03 07 04 00 00 00     ................
     fcf:	20 74 54 54 3c 78 40 00 41 3f 7f 44 44 7c 38 00      tTT<x@.A?.DD|8.
     fdf:	38 7c 44 44 6c 28 00 00 30 78 48 49 3f 7f 40 00     8|DDl(..0xHI?.@.
     fef:	38 7c 54 54 5c 18 00 00 48 7e 7f 49 03 02 00 00     8|TT\...H~.I....
     fff:	98 bc a4 a4 f8 7c 04 00 41 7f 7f 08 04 7c 78 00     .....|..A....|x.
    100f:	00 44 7d 7d 40 00 00 00 40 c4 84 fd 7d 00 00 00     .D}}@...@...}...
    101f:	41 7f 7f 10 38 6c 44 00 00 41 7f 7f 40 00 00 00     A...8lD..A..@...
    102f:	7c 7c 0c 18 0c 7c 78 00 7c 7c 04 04 7c 78 00 00     ||...|x.||..|x..
    103f:	38 7c 44 44 7c 38 00 00 84 fc f8 a4 24 3c 18 00     8|DD|8......$<..
    104f:	18 3c 24 a4 f8 fc 84 00 44 7c 78 44 1c 18 00 00     .<$.....D|xD....
    105f:	48 5c 54 54 74 24 00 00 00 04 3e 7f 44 24 00 00     H\TTt$....>.D$..
    106f:	3c 7c 40 40 3c 7c 40 00 1c 3c 60 60 3c 1c 00 00     <|@@<|@..<``<...
    107f:	3c 7c 60 30 60 7c 3c 00 44 6c 38 10 38 6c 44 00     <|`0`|<.Dl8.8lD.
    108f:	9c bc a0 a0 fc 7c 00 00 4c 64 74 5c 4c 64 00 00     .....|..Ldt\Ld..
    109f:	08 08 3e 77 41 41 00 00 00 00 00 77 77 00 00 00     ..>wAA.....ww...
    10af:	41 41 77 3e 08 08 00 00 02 03 01 03 02 03 01 00     AAw>............
	...

000010c0 <__ctors_end>:
    10c0:	11 24       	eor	r1, r1
    10c2:	1f be       	out	0x3f, r1	; 63
    10c4:	cf ef       	ldi	r28, 0xFF	; 255
    10c6:	d4 e0       	ldi	r29, 0x04	; 4
    10c8:	de bf       	out	0x3e, r29	; 62
    10ca:	cd bf       	out	0x3d, r28	; 61

000010cc <__do_copy_data>:
    10cc:	11 e0       	ldi	r17, 0x01	; 1
    10ce:	a0 e0       	ldi	r26, 0x00	; 0
    10d0:	b1 e0       	ldi	r27, 0x01	; 1
    10d2:	e2 ec       	ldi	r30, 0xC2	; 194
    10d4:	f2 e2       	ldi	r31, 0x22	; 34
    10d6:	02 c0       	rjmp	.+4      	; 0x10dc <__do_copy_data+0x10>
    10d8:	05 90       	lpm	r0, Z+
    10da:	0d 92       	st	X+, r0
    10dc:	a0 3e       	cpi	r26, 0xE0	; 224
    10de:	b1 07       	cpc	r27, r17
    10e0:	d9 f7       	brne	.-10     	; 0x10d8 <__do_copy_data+0xc>

000010e2 <__do_clear_bss>:
    10e2:	21 e0       	ldi	r18, 0x01	; 1
    10e4:	a0 ee       	ldi	r26, 0xE0	; 224
    10e6:	b1 e0       	ldi	r27, 0x01	; 1
    10e8:	01 c0       	rjmp	.+2      	; 0x10ec <.do_clear_bss_start>

000010ea <.do_clear_bss_loop>:
    10ea:	1d 92       	st	X+, r1

000010ec <.do_clear_bss_start>:
    10ec:	aa 3e       	cpi	r26, 0xEA	; 234
    10ee:	b2 07       	cpc	r27, r18
    10f0:	e1 f7       	brne	.-8      	; 0x10ea <.do_clear_bss_loop>
    10f2:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <main>
    10f6:	0c 94 5f 11 	jmp	0x22be	; 0x22be <_exit>

000010fa <__bad_interrupt>:
    10fa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000010fe <calc_pos>:
	atmelMap->ADC[1] = val;
	x_offset = atmelMap->ADC[1];
	y_offset = atmelMap->ADC[1];
}

void calc_pos(joyVal* values, uint8_t x, uint8_t y){
    10fe:	fc 01       	movw	r30, r24
	if(x>=x_offset){
    1100:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <x_offset>
    1104:	62 17       	cp	r22, r18
    1106:	90 f0       	brcs	.+36     	; 0x112c <calc_pos+0x2e>
		values->x_val = (x-x_offset)*(100)/(255-x_offset);
    1108:	30 e0       	ldi	r19, 0x00	; 0
    110a:	70 e0       	ldi	r23, 0x00	; 0
    110c:	62 1b       	sub	r22, r18
    110e:	73 0b       	sbc	r23, r19
    1110:	54 e6       	ldi	r21, 0x64	; 100
    1112:	56 9f       	mul	r21, r22
    1114:	c0 01       	movw	r24, r0
    1116:	57 9f       	mul	r21, r23
    1118:	90 0d       	add	r25, r0
    111a:	11 24       	eor	r1, r1
    111c:	6f ef       	ldi	r22, 0xFF	; 255
    111e:	70 e0       	ldi	r23, 0x00	; 0
    1120:	62 1b       	sub	r22, r18
    1122:	73 0b       	sbc	r23, r19
    1124:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <__divmodhi4>
    1128:	60 83       	st	Z, r22
    112a:	10 c0       	rjmp	.+32     	; 0x114c <calc_pos+0x4e>
		}else if(x<x_offset){
		values->x_val = -(x_offset-x)*(100)/x_offset;
    112c:	a2 2f       	mov	r26, r18
    112e:	b0 e0       	ldi	r27, 0x00	; 0
    1130:	26 2f       	mov	r18, r22
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	2a 1b       	sub	r18, r26
    1136:	3b 0b       	sbc	r19, r27
    1138:	54 e6       	ldi	r21, 0x64	; 100
    113a:	52 9f       	mul	r21, r18
    113c:	c0 01       	movw	r24, r0
    113e:	53 9f       	mul	r21, r19
    1140:	90 0d       	add	r25, r0
    1142:	11 24       	eor	r1, r1
    1144:	bd 01       	movw	r22, r26
    1146:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <__divmodhi4>
    114a:	60 83       	st	Z, r22
	}
	if(y>=y_offset){
    114c:	60 91 0b 01 	lds	r22, 0x010B	; 0x80010b <y_offset>
    1150:	46 17       	cp	r20, r22
    1152:	98 f0       	brcs	.+38     	; 0x117a <calc_pos+0x7c>
		values->y_val = (y-y_offset)*(100)/(255-y_offset);
    1154:	26 2f       	mov	r18, r22
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	50 e0       	ldi	r21, 0x00	; 0
    115a:	42 1b       	sub	r20, r18
    115c:	53 0b       	sbc	r21, r19
    115e:	64 e6       	ldi	r22, 0x64	; 100
    1160:	64 9f       	mul	r22, r20
    1162:	c0 01       	movw	r24, r0
    1164:	65 9f       	mul	r22, r21
    1166:	90 0d       	add	r25, r0
    1168:	11 24       	eor	r1, r1
    116a:	6f ef       	ldi	r22, 0xFF	; 255
    116c:	70 e0       	ldi	r23, 0x00	; 0
    116e:	62 1b       	sub	r22, r18
    1170:	73 0b       	sbc	r23, r19
    1172:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <__divmodhi4>
    1176:	61 83       	std	Z+1, r22	; 0x01
    1178:	08 95       	ret
		}else if(y<y_offset){
		values->y_val = -(y_offset-y)*(100)/y_offset;
    117a:	70 e0       	ldi	r23, 0x00	; 0
    117c:	50 e0       	ldi	r21, 0x00	; 0
    117e:	46 1b       	sub	r20, r22
    1180:	57 0b       	sbc	r21, r23
    1182:	24 e6       	ldi	r18, 0x64	; 100
    1184:	24 9f       	mul	r18, r20
    1186:	c0 01       	movw	r24, r0
    1188:	25 9f       	mul	r18, r21
    118a:	90 0d       	add	r25, r0
    118c:	11 24       	eor	r1, r1
    118e:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <__divmodhi4>
    1192:	61 83       	std	Z+1, r22	; 0x01
    1194:	08 95       	ret

00001196 <calc_pos_slider>:
	}
}
void calc_pos_slider(sliderVal* values, uint8_t left, uint8_t right){
    1196:	cf 93       	push	r28
    1198:	df 93       	push	r29
    119a:	fc 01       	movw	r30, r24
	values->l_val = left*100/255;
    119c:	24 e6       	ldi	r18, 0x64	; 100
    119e:	26 9f       	mul	r18, r22
    11a0:	c0 01       	movw	r24, r0
    11a2:	11 24       	eor	r1, r1
    11a4:	cf ef       	ldi	r28, 0xFF	; 255
    11a6:	d0 e0       	ldi	r29, 0x00	; 0
    11a8:	be 01       	movw	r22, r28
    11aa:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <__divmodhi4>
    11ae:	60 83       	st	Z, r22
	values->r_val = right*100/255;
    11b0:	24 9f       	mul	r18, r20
    11b2:	c0 01       	movw	r24, r0
    11b4:	11 24       	eor	r1, r1
    11b6:	be 01       	movw	r22, r28
    11b8:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <__divmodhi4>
    11bc:	61 83       	std	Z+1, r22	; 0x01
}
    11be:	df 91       	pop	r29
    11c0:	cf 91       	pop	r28
    11c2:	08 95       	ret

000011c4 <button_check>:

uint8_t button_check(uint8_t current){
	if(current == 0 && previous == 1){
    11c4:	81 11       	cpse	r24, r1
    11c6:	0c c0       	rjmp	.+24     	; 0x11e0 <button_check+0x1c>
    11c8:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <previous>
    11cc:	81 30       	cpi	r24, 0x01	; 1
    11ce:	79 f4       	brne	.+30     	; 0x11ee <button_check+0x2a>
		previous = 0;
    11d0:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <previous>
		printf("%s", "B");
    11d4:	82 e4       	ldi	r24, 0x42	; 66
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <putchar>
		return 1;
    11dc:	81 e0       	ldi	r24, 0x01	; 1
    11de:	08 95       	ret
		}else if(current != 0){
		previous = 1;
    11e0:	81 e0       	ldi	r24, 0x01	; 1
    11e2:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <previous>
		printf("%s", "A");
    11e6:	81 e4       	ldi	r24, 0x41	; 65
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <putchar>
	}
    11ee:	08 95       	ret

000011f0 <main>:
} menuItem;




int main(void){
    11f0:	cf 93       	push	r28
    11f2:	df 93       	push	r29
    11f4:	00 d0       	rcall	.+0      	; 0x11f6 <main+0x6>
    11f6:	00 d0       	rcall	.+0      	; 0x11f8 <main+0x8>
    11f8:	cd b7       	in	r28, 0x3d	; 61
    11fa:	de b7       	in	r29, 0x3e	; 62
	
	joyVal joystick; 
	sliderVal slider; 
	volatile amap* atmelMap = (amap*) BASE;
    11fc:	c0 90 0d 01 	lds	r12, 0x010D	; 0x80010d <BASE>
    1200:	d0 90 0e 01 	lds	r13, 0x010E	; 0x80010e <BASE+0x1>
	
	MCUCR |= (1<<SRE);
    1204:	85 b7       	in	r24, 0x35	; 53
    1206:	80 68       	ori	r24, 0x80	; 128
    1208:	85 bf       	out	0x35, r24	; 53
	
	//DDRC = 0xFF;
	//PORTC = 0x00;
	
	SFIOR &= ~(1<<XMM0);
    120a:	80 b7       	in	r24, 0x30	; 48
    120c:	87 7f       	andi	r24, 0xF7	; 247
    120e:	80 bf       	out	0x30, r24	; 48
	SFIOR &= ~(1<<XMM1);
    1210:	80 b7       	in	r24, 0x30	; 48
    1212:	8f 7e       	andi	r24, 0xEF	; 239
    1214:	80 bf       	out	0x30, r24	; 48
	SFIOR |= (1<<XMM2);
    1216:	80 b7       	in	r24, 0x30	; 48
    1218:	80 62       	ori	r24, 0x20	; 32
    121a:	80 bf       	out	0x30, r24	; 48
	
	DDRA |= 0x18;
    121c:	8a b3       	in	r24, 0x1a	; 26
    121e:	88 61       	ori	r24, 0x18	; 24
    1220:	8a bb       	out	0x1a, r24	; 26
	TCCR2 |= (1<<WGM20);	
	TCCR2 |= (1<<COM21);
	TCCR2 |= (1<<COM20);
	*/

	USART_Init ( MYUBRR );
    1222:	8f e1       	ldi	r24, 0x1F	; 31
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	0e 94 c4 0b 	call	0x1788	; 0x1788 <USART_Init>
	SRAM_test(); _delay_ms(5000);
    122a:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <SRAM_test>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    122e:	2f e3       	ldi	r18, 0x3F	; 63
    1230:	82 e4       	ldi	r24, 0x42	; 66
    1232:	9f e0       	ldi	r25, 0x0F	; 15
    1234:	21 50       	subi	r18, 0x01	; 1
    1236:	80 40       	sbci	r24, 0x00	; 0
    1238:	90 40       	sbci	r25, 0x00	; 0
    123a:	e1 f7       	brne	.-8      	; 0x1234 <main+0x44>
    123c:	00 c0       	rjmp	.+0      	; 0x123e <main+0x4e>
    123e:	00 00       	nop
		
	struct menuItem* head;

	menuItem* ptr;
	ptr = (menuItem*)malloc(sizeof(menuItem));
    1240:	87 e0       	ldi	r24, 0x07	; 7
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <malloc>
    1248:	7c 01       	movw	r14, r24

	ptr->label = "first";
    124a:	8f e0       	ldi	r24, 0x0F	; 15
    124c:	91 e0       	ldi	r25, 0x01	; 1
    124e:	d7 01       	movw	r26, r14
    1250:	15 96       	adiw	r26, 0x05	; 5
    1252:	9c 93       	st	X, r25
    1254:	8e 93       	st	-X, r24
    1256:	14 97       	sbiw	r26, 0x04	; 4
	ptr->line = 0;
    1258:	16 96       	adiw	r26, 0x06	; 6
    125a:	1c 92       	st	X, r1
    125c:	16 97       	sbiw	r26, 0x06	; 6
	ptr->prev = NULL;
    125e:	1d 92       	st	X+, r1
    1260:	1c 92       	st	X, r1
	ptr->next = NULL;
	head = ptr;

	ptr = (menuItem*)malloc(sizeof(menuItem));
    1262:	87 e0       	ldi	r24, 0x07	; 7
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <malloc>
    126a:	fc 01       	movw	r30, r24

	menuItem* temp = head;

	ptr->label = "second";
    126c:	85 e1       	ldi	r24, 0x15	; 21
    126e:	91 e0       	ldi	r25, 0x01	; 1
    1270:	95 83       	std	Z+5, r25	; 0x05
    1272:	84 83       	std	Z+4, r24	; 0x04
	while(temp->next != NULL){
		temp = temp->next;
	}
	temp->next = ptr;
    1274:	d7 01       	movw	r26, r14
    1276:	13 96       	adiw	r26, 0x03	; 3
    1278:	fc 93       	st	X, r31
    127a:	ee 93       	st	-X, r30
    127c:	12 97       	sbiw	r26, 0x02	; 2
	ptr->prev = temp;
    127e:	f1 82       	std	Z+1, r15	; 0x01
    1280:	e0 82       	st	Z, r14
	ptr->next = NULL;
    1282:	13 82       	std	Z+3, r1	; 0x03
    1284:	12 82       	std	Z+2, r1	; 0x02

	ptr = (menuItem*)malloc(sizeof(menuItem));
    1286:	87 e0       	ldi	r24, 0x07	; 7
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <malloc>
    128e:	fc 01       	movw	r30, r24

	temp = head;

	ptr->label = "third";
    1290:	8c e1       	ldi	r24, 0x1C	; 28
    1292:	91 e0       	ldi	r25, 0x01	; 1
    1294:	95 83       	std	Z+5, r25	; 0x05
    1296:	84 83       	std	Z+4, r24	; 0x04
	ptr->prev = temp;
	ptr->next = NULL;

	ptr = (menuItem*)malloc(sizeof(menuItem));

	temp = head;
    1298:	d7 01       	movw	r26, r14

	ptr->label = "third";
	while(temp->next != NULL){
    129a:	01 c0       	rjmp	.+2      	; 0x129e <main+0xae>
		temp = temp->next;
    129c:	dc 01       	movw	r26, r24
	ptr = (menuItem*)malloc(sizeof(menuItem));

	temp = head;

	ptr->label = "third";
	while(temp->next != NULL){
    129e:	12 96       	adiw	r26, 0x02	; 2
    12a0:	8d 91       	ld	r24, X+
    12a2:	9c 91       	ld	r25, X
    12a4:	13 97       	sbiw	r26, 0x03	; 3
    12a6:	00 97       	sbiw	r24, 0x00	; 0
    12a8:	c9 f7       	brne	.-14     	; 0x129c <main+0xac>
		temp = temp->next;
	}
	temp->next = ptr;
    12aa:	13 96       	adiw	r26, 0x03	; 3
    12ac:	fc 93       	st	X, r31
    12ae:	ee 93       	st	-X, r30
    12b0:	12 97       	sbiw	r26, 0x02	; 2
	ptr->prev = temp;
    12b2:	b1 83       	std	Z+1, r27	; 0x01
    12b4:	a0 83       	st	Z, r26
	ptr->next = NULL;
    12b6:	13 82       	std	Z+3, r1	; 0x03
    12b8:	12 82       	std	Z+2, r1	; 0x02

	ptr = head;

	oled_init(atmelMap);
    12ba:	c6 01       	movw	r24, r12
    12bc:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <oled_init>
	clear_oled(atmelMap);
    12c0:	c6 01       	movw	r24, r12
    12c2:	0e 94 2e 0a 	call	0x145c	; 0x145c <clear_oled>
	
	uint8_t counter = 0;
	while(ptr != NULL){
    12c6:	e1 14       	cp	r14, r1
    12c8:	f1 04       	cpc	r15, r1
    12ca:	39 f1       	breq	.+78     	; 0x131a <main+0x12a>
    12cc:	10 e0       	ldi	r17, 0x00	; 0
		printf("%s \n", ptr->label);
    12ce:	0f 2e       	mov	r0, r31
    12d0:	f2 e2       	ldi	r31, 0x22	; 34
    12d2:	af 2e       	mov	r10, r31
    12d4:	f1 e0       	ldi	r31, 0x01	; 1
    12d6:	bf 2e       	mov	r11, r31
    12d8:	f0 2d       	mov	r31, r0
    12da:	f7 01       	movw	r30, r14
    12dc:	85 81       	ldd	r24, Z+5	; 0x05
    12de:	8f 93       	push	r24
    12e0:	84 81       	ldd	r24, Z+4	; 0x04
    12e2:	8f 93       	push	r24
    12e4:	bf 92       	push	r11
    12e6:	af 92       	push	r10
    12e8:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <printf>
		go_to_column(0);
    12ec:	80 e0       	ldi	r24, 0x00	; 0
    12ee:	0e 94 24 0a 	call	0x1448	; 0x1448 <go_to_column>
		oled_write_string(counter,ptr->label, 8);
    12f2:	d7 01       	movw	r26, r14
    12f4:	14 96       	adiw	r26, 0x04	; 4
    12f6:	6d 91       	ld	r22, X+
    12f8:	7c 91       	ld	r23, X
    12fa:	15 97       	sbiw	r26, 0x05	; 5
    12fc:	48 e0       	ldi	r20, 0x08	; 8
    12fe:	81 2f       	mov	r24, r17
    1300:	0e 94 9c 0a 	call	0x1538	; 0x1538 <oled_write_string>
		ptr = ptr->next;
    1304:	f7 01       	movw	r30, r14
    1306:	e2 80       	ldd	r14, Z+2	; 0x02
    1308:	f3 80       	ldd	r15, Z+3	; 0x03
		counter ++;
    130a:	1f 5f       	subi	r17, 0xFF	; 255

	oled_init(atmelMap);
	clear_oled(atmelMap);
	
	uint8_t counter = 0;
	while(ptr != NULL){
    130c:	0f 90       	pop	r0
    130e:	0f 90       	pop	r0
    1310:	0f 90       	pop	r0
    1312:	0f 90       	pop	r0
    1314:	e1 14       	cp	r14, r1
    1316:	f1 04       	cpc	r15, r1
    1318:	01 f7       	brne	.-64     	; 0x12da <main+0xea>
		oled_write_string(counter,ptr->label, 8);
		ptr = ptr->next;
		counter ++;
	}
		
	go_to_line(7);
    131a:	87 e0       	ldi	r24, 0x07	; 7
    131c:	0e 94 1f 0a 	call	0x143e	; 0x143e <go_to_line>
	//oled_write_string(0," Kongeriget Norge er et frit, uafhaengigt og udeleligt Rige. Dets Regjeringsform er indskraenket og arvelig-monarkisk.", 8);
	character_printer(atmelMap, wojak, 64, 40);
    1320:	28 e2       	ldi	r18, 0x28	; 40
    1322:	30 e0       	ldi	r19, 0x00	; 0
    1324:	40 e4       	ldi	r20, 0x40	; 64
    1326:	50 e0       	ldi	r21, 0x00	; 0
    1328:	60 e7       	ldi	r22, 0x70	; 112
    132a:	70 e0       	ldi	r23, 0x00	; 0
    132c:	c6 01       	movw	r24, r12
    132e:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <character_printer>
    1332:	0c e5       	ldi	r16, 0x5C	; 92
    1334:	10 e0       	ldi	r17, 0x00	; 0
		
		_delay_ms(20);
		
	}*/
	for(int i = 0; i < 92; i++){
		printf("\n");
    1336:	8a e0       	ldi	r24, 0x0A	; 10
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <putchar>
    133e:	01 50       	subi	r16, 0x01	; 1
    1340:	11 09       	sbc	r17, r1
		}
		
		_delay_ms(20);
		
	}*/
	for(int i = 0; i < 92; i++){
    1342:	c9 f7       	brne	.-14     	; 0x1336 <main+0x146>
		printf("\n");
	}
	while(1){
		
		uint8_t val = 1;
		atmelMap->ADC[1] = 0x04; 
    1344:	86 01       	movw	r16, r12
    1346:	0f 5f       	subi	r16, 0xFF	; 255
    1348:	1b 4f       	sbci	r17, 0xFB	; 251
    134a:	68 94       	set
    134c:	88 24       	eor	r8, r8
    134e:	82 f8       	bld	r8, 2
		
		//get_adc_data(atmelMap, &joystick, &slider);
		
		calc_pos(&joystick,valx,valy);
		calc_pos_slider(&slider,vall,valr);
		printf("\r J_x: %4d, J_y: %4d, J_b: %3d Slider 1: %3d, Slider 2: %3d |||| %3d,%3d",joystick.x_val,joystick.y_val,joy_button,slider.l_val,slider.r_val,left_button,right_button);
    1350:	0f 2e       	mov	r0, r31
    1352:	f7 e2       	ldi	r31, 0x27	; 39
    1354:	af 2e       	mov	r10, r31
    1356:	f1 e0       	ldi	r31, 0x01	; 1
    1358:	bf 2e       	mov	r11, r31
    135a:	f0 2d       	mov	r31, r0
		printf("\n");
	}
	while(1){
		
		uint8_t val = 1;
		atmelMap->ADC[1] = 0x04; 
    135c:	d8 01       	movw	r26, r16
    135e:	8c 92       	st	X, r8
		uint8_t valx = atmelMap->ADC[1];
    1360:	cc 90       	ld	r12, X
		uint8_t valy = atmelMap->ADC[1];
    1362:	9c 90       	ld	r9, X
		uint8_t vall = atmelMap->ADC[1];
    1364:	7c 90       	ld	r7, X
		uint8_t valr = atmelMap->ADC[1];
    1366:	6c 90       	ld	r6, X
		
		uint8_t left_button = PIND & (1<< PIND4);
    1368:	e0 b2       	in	r14, 0x10	; 16
		uint8_t right_button = PIND & (1<< PIND5);
    136a:	d0 b2       	in	r13, 0x10	; 16
		uint8_t joy_button = PINB & (1<< PINB1);
    136c:	86 b3       	in	r24, 0x16	; 22
    136e:	82 70       	andi	r24, 0x02	; 2
    1370:	f8 2e       	mov	r15, r24
		
		
		if(button_check(joy_button)){
    1372:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <button_check>
		}
			
		
		//get_adc_data(atmelMap, &joystick, &slider);
		
		calc_pos(&joystick,valx,valy);
    1376:	49 2d       	mov	r20, r9
    1378:	50 e0       	ldi	r21, 0x00	; 0
    137a:	6c 2d       	mov	r22, r12
    137c:	70 e0       	ldi	r23, 0x00	; 0
    137e:	ce 01       	movw	r24, r28
    1380:	01 96       	adiw	r24, 0x01	; 1
    1382:	0e 94 7f 08 	call	0x10fe	; 0x10fe <calc_pos>
		calc_pos_slider(&slider,vall,valr);
    1386:	46 2d       	mov	r20, r6
    1388:	67 2d       	mov	r22, r7
    138a:	ce 01       	movw	r24, r28
    138c:	03 96       	adiw	r24, 0x03	; 3
    138e:	0e 94 cb 08 	call	0x1196	; 0x1196 <calc_pos_slider>
		printf("\r J_x: %4d, J_y: %4d, J_b: %3d Slider 1: %3d, Slider 2: %3d |||| %3d,%3d",joystick.x_val,joystick.y_val,joy_button,slider.l_val,slider.r_val,left_button,right_button);
    1392:	8d 2d       	mov	r24, r13
    1394:	80 72       	andi	r24, 0x20	; 32
    1396:	1f 92       	push	r1
    1398:	8f 93       	push	r24
    139a:	8e 2d       	mov	r24, r14
    139c:	80 71       	andi	r24, 0x10	; 16
    139e:	1f 92       	push	r1
    13a0:	8f 93       	push	r24
    13a2:	8c 81       	ldd	r24, Y+4	; 0x04
    13a4:	1f 92       	push	r1
    13a6:	8f 93       	push	r24
    13a8:	8b 81       	ldd	r24, Y+3	; 0x03
    13aa:	1f 92       	push	r1
    13ac:	8f 93       	push	r24
    13ae:	1f 92       	push	r1
    13b0:	ff 92       	push	r15
    13b2:	8a 81       	ldd	r24, Y+2	; 0x02
    13b4:	28 2f       	mov	r18, r24
    13b6:	08 2e       	mov	r0, r24
    13b8:	00 0c       	add	r0, r0
    13ba:	33 0b       	sbc	r19, r19
    13bc:	3f 93       	push	r19
    13be:	8f 93       	push	r24
    13c0:	89 81       	ldd	r24, Y+1	; 0x01
    13c2:	28 2f       	mov	r18, r24
    13c4:	08 2e       	mov	r0, r24
    13c6:	00 0c       	add	r0, r0
    13c8:	33 0b       	sbc	r19, r19
    13ca:	3f 93       	push	r19
    13cc:	8f 93       	push	r24
    13ce:	bf 92       	push	r11
    13d0:	af 92       	push	r10
    13d2:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <printf>
    13d6:	0f b6       	in	r0, 0x3f	; 63
    13d8:	f8 94       	cli
    13da:	de bf       	out	0x3e, r29	; 62
    13dc:	0f be       	out	0x3f, r0	; 63
    13de:	cd bf       	out	0x3d, r28	; 61
    13e0:	bd cf       	rjmp	.-134    	; 0x135c <main+0x16c>

000013e2 <oled_init>:
	
	for (int i=0; i < 8; i++) {
		oled_write_data(pgm_read_byte(&(font8[character][i])));
	}
	
}
    13e2:	e0 e0       	ldi	r30, 0x00	; 0
    13e4:	f0 e1       	ldi	r31, 0x10	; 16
    13e6:	8e ea       	ldi	r24, 0xAE	; 174
    13e8:	80 83       	st	Z, r24
    13ea:	81 ea       	ldi	r24, 0xA1	; 161
    13ec:	80 83       	st	Z, r24
    13ee:	8a ed       	ldi	r24, 0xDA	; 218
    13f0:	80 83       	st	Z, r24
    13f2:	82 e1       	ldi	r24, 0x12	; 18
    13f4:	80 83       	st	Z, r24
    13f6:	88 ec       	ldi	r24, 0xC8	; 200
    13f8:	80 83       	st	Z, r24
    13fa:	88 ea       	ldi	r24, 0xA8	; 168
    13fc:	80 83       	st	Z, r24
    13fe:	8f e3       	ldi	r24, 0x3F	; 63
    1400:	80 83       	st	Z, r24
    1402:	85 ed       	ldi	r24, 0xD5	; 213
    1404:	80 83       	st	Z, r24
    1406:	80 e8       	ldi	r24, 0x80	; 128
    1408:	80 83       	st	Z, r24
    140a:	81 e8       	ldi	r24, 0x81	; 129
    140c:	80 83       	st	Z, r24
    140e:	80 e5       	ldi	r24, 0x50	; 80
    1410:	80 83       	st	Z, r24
    1412:	89 ed       	ldi	r24, 0xD9	; 217
    1414:	80 83       	st	Z, r24
    1416:	81 e2       	ldi	r24, 0x21	; 33
    1418:	80 83       	st	Z, r24
    141a:	80 e2       	ldi	r24, 0x20	; 32
    141c:	80 83       	st	Z, r24
    141e:	82 e0       	ldi	r24, 0x02	; 2
    1420:	80 83       	st	Z, r24
    1422:	8b ed       	ldi	r24, 0xDB	; 219
    1424:	80 83       	st	Z, r24
    1426:	80 e3       	ldi	r24, 0x30	; 48
    1428:	80 83       	st	Z, r24
    142a:	8d ea       	ldi	r24, 0xAD	; 173
    142c:	80 83       	st	Z, r24
    142e:	10 82       	st	Z, r1
    1430:	84 ea       	ldi	r24, 0xA4	; 164
    1432:	80 83       	st	Z, r24
    1434:	86 ea       	ldi	r24, 0xA6	; 166
    1436:	80 83       	st	Z, r24
    1438:	8f ea       	ldi	r24, 0xAF	; 175
    143a:	80 83       	st	Z, r24
    143c:	08 95       	ret

0000143e <go_to_line>:
    143e:	87 70       	andi	r24, 0x07	; 7
    1440:	80 55       	subi	r24, 0x50	; 80
    1442:	80 93 00 10 	sts	0x1000, r24	; 0x801000 <__bss_end+0xe16>
    1446:	08 95       	ret

00001448 <go_to_column>:
    1448:	98 2f       	mov	r25, r24
    144a:	9f 70       	andi	r25, 0x0F	; 15
    144c:	e0 e0       	ldi	r30, 0x00	; 0
    144e:	f0 e1       	ldi	r31, 0x10	; 16
    1450:	90 83       	st	Z, r25
    1452:	82 95       	swap	r24
    1454:	8f 70       	andi	r24, 0x0F	; 15
    1456:	80 5f       	subi	r24, 0xF0	; 240
    1458:	80 83       	st	Z, r24
    145a:	08 95       	ret

0000145c <clear_oled>:
    145c:	1f 93       	push	r17
    145e:	cf 93       	push	r28
    1460:	df 93       	push	r29
    1462:	10 e0       	ldi	r17, 0x00	; 0
    1464:	c0 e0       	ldi	r28, 0x00	; 0
    1466:	d2 e1       	ldi	r29, 0x12	; 18
    1468:	81 2f       	mov	r24, r17
    146a:	0e 94 1f 0a 	call	0x143e	; 0x143e <go_to_line>
    146e:	80 e0       	ldi	r24, 0x00	; 0
    1470:	0e 94 24 0a 	call	0x1448	; 0x1448 <go_to_column>
    1474:	80 e8       	ldi	r24, 0x80	; 128
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	18 82       	st	Y, r1
    147a:	01 97       	sbiw	r24, 0x01	; 1
    147c:	e9 f7       	brne	.-6      	; 0x1478 <clear_oled+0x1c>
    147e:	1f 5f       	subi	r17, 0xFF	; 255
    1480:	18 30       	cpi	r17, 0x08	; 8
    1482:	91 f7       	brne	.-28     	; 0x1468 <clear_oled+0xc>
    1484:	df 91       	pop	r29
    1486:	cf 91       	pop	r28
    1488:	1f 91       	pop	r17
    148a:	08 95       	ret

0000148c <oled_write_char_using_font>:
    148c:	80 52       	subi	r24, 0x20	; 32
    148e:	68 30       	cpi	r22, 0x08	; 8
    1490:	f1 f4       	brne	.+60     	; 0x14ce <oled_write_char_using_font+0x42>
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	9c 01       	movw	r18, r24
    1496:	22 0f       	add	r18, r18
    1498:	33 1f       	adc	r19, r19
    149a:	22 0f       	add	r18, r18
    149c:	33 1f       	adc	r19, r19
    149e:	22 0f       	add	r18, r18
    14a0:	33 1f       	adc	r19, r19
    14a2:	29 53       	subi	r18, 0x39	; 57
    14a4:	32 4f       	sbci	r19, 0xF2	; 242
    14a6:	88 0f       	add	r24, r24
    14a8:	99 1f       	adc	r25, r25
    14aa:	88 0f       	add	r24, r24
    14ac:	99 1f       	adc	r25, r25
    14ae:	88 0f       	add	r24, r24
    14b0:	99 1f       	adc	r25, r25
    14b2:	81 53       	subi	r24, 0x31	; 49
    14b4:	92 4f       	sbci	r25, 0xF2	; 242
    14b6:	a0 e0       	ldi	r26, 0x00	; 0
    14b8:	b2 e1       	ldi	r27, 0x12	; 18
    14ba:	f9 01       	movw	r30, r18
    14bc:	45 91       	lpm	r20, Z+
    14be:	54 91       	lpm	r21, Z
    14c0:	4c 93       	st	X, r20
    14c2:	2f 5f       	subi	r18, 0xFF	; 255
    14c4:	3f 4f       	sbci	r19, 0xFF	; 255
    14c6:	82 17       	cp	r24, r18
    14c8:	93 07       	cpc	r25, r19
    14ca:	b9 f7       	brne	.-18     	; 0x14ba <oled_write_char_using_font+0x2e>
    14cc:	08 95       	ret
    14ce:	65 30       	cpi	r22, 0x05	; 5
    14d0:	d1 f4       	brne	.+52     	; 0x1506 <oled_write_char_using_font+0x7a>
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	9c 01       	movw	r18, r24
    14d6:	22 0f       	add	r18, r18
    14d8:	33 1f       	adc	r19, r19
    14da:	22 0f       	add	r18, r18
    14dc:	33 1f       	adc	r19, r19
    14de:	82 0f       	add	r24, r18
    14e0:	93 1f       	adc	r25, r19
    14e2:	20 e0       	ldi	r18, 0x00	; 0
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	a0 e0       	ldi	r26, 0x00	; 0
    14e8:	b2 e1       	ldi	r27, 0x12	; 18
    14ea:	f9 01       	movw	r30, r18
    14ec:	e8 0f       	add	r30, r24
    14ee:	f9 1f       	adc	r31, r25
    14f0:	e4 51       	subi	r30, 0x14	; 20
    14f2:	f4 4f       	sbci	r31, 0xF4	; 244
    14f4:	45 91       	lpm	r20, Z+
    14f6:	54 91       	lpm	r21, Z
    14f8:	4c 93       	st	X, r20
    14fa:	2f 5f       	subi	r18, 0xFF	; 255
    14fc:	3f 4f       	sbci	r19, 0xFF	; 255
    14fe:	25 30       	cpi	r18, 0x05	; 5
    1500:	31 05       	cpc	r19, r1
    1502:	99 f7       	brne	.-26     	; 0x14ea <oled_write_char_using_font+0x5e>
    1504:	08 95       	ret
    1506:	64 30       	cpi	r22, 0x04	; 4
    1508:	b1 f4       	brne	.+44     	; 0x1536 <oled_write_char_using_font+0xaa>
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	88 0f       	add	r24, r24
    150e:	99 1f       	adc	r25, r25
    1510:	88 0f       	add	r24, r24
    1512:	99 1f       	adc	r25, r25
    1514:	20 e0       	ldi	r18, 0x00	; 0
    1516:	30 e0       	ldi	r19, 0x00	; 0
    1518:	a0 e0       	ldi	r26, 0x00	; 0
    151a:	b2 e1       	ldi	r27, 0x12	; 18
    151c:	f9 01       	movw	r30, r18
    151e:	e8 0f       	add	r30, r24
    1520:	f9 1f       	adc	r31, r25
    1522:	e0 59       	subi	r30, 0x90	; 144
    1524:	f5 4f       	sbci	r31, 0xF5	; 245
    1526:	45 91       	lpm	r20, Z+
    1528:	54 91       	lpm	r21, Z
    152a:	4c 93       	st	X, r20
    152c:	2f 5f       	subi	r18, 0xFF	; 255
    152e:	3f 4f       	sbci	r19, 0xFF	; 255
    1530:	24 30       	cpi	r18, 0x04	; 4
    1532:	31 05       	cpc	r19, r1
    1534:	99 f7       	brne	.-26     	; 0x151c <oled_write_char_using_font+0x90>
    1536:	08 95       	ret

00001538 <oled_write_string>:
    1538:	8f 92       	push	r8
    153a:	9f 92       	push	r9
    153c:	af 92       	push	r10
    153e:	bf 92       	push	r11
    1540:	cf 92       	push	r12
    1542:	df 92       	push	r13
    1544:	ef 92       	push	r14
    1546:	ff 92       	push	r15
    1548:	0f 93       	push	r16
    154a:	1f 93       	push	r17
    154c:	cf 93       	push	r28
    154e:	df 93       	push	r29
    1550:	88 2e       	mov	r8, r24
    1552:	8b 01       	movw	r16, r22
    1554:	94 2e       	mov	r9, r20
    1556:	0e 94 1f 0a 	call	0x143e	; 0x143e <go_to_line>
    155a:	78 01       	movw	r14, r16
    155c:	c0 e0       	ldi	r28, 0x00	; 0
    155e:	d0 e0       	ldi	r29, 0x00	; 0
    1560:	a9 2c       	mov	r10, r9
    1562:	b1 2c       	mov	r11, r1
    1564:	68 94       	set
    1566:	cc 24       	eor	r12, r12
    1568:	c7 f8       	bld	r12, 7
    156a:	d1 2c       	mov	r13, r1
    156c:	19 c0       	rjmp	.+50     	; 0x15a0 <oled_write_string+0x68>
    156e:	c6 01       	movw	r24, r12
    1570:	b5 01       	movw	r22, r10
    1572:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <__divmodhi4>
    1576:	9b 01       	movw	r18, r22
    1578:	ce 01       	movw	r24, r28
    157a:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <__divmodhi4>
    157e:	89 2b       	or	r24, r25
    1580:	41 f4       	brne	.+16     	; 0x1592 <oled_write_string+0x5a>
    1582:	ce 01       	movw	r24, r28
    1584:	b9 01       	movw	r22, r18
    1586:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <__divmodhi4>
    158a:	88 2d       	mov	r24, r8
    158c:	86 0f       	add	r24, r22
    158e:	0e 94 1f 0a 	call	0x143e	; 0x143e <go_to_line>
    1592:	69 2d       	mov	r22, r9
    1594:	f7 01       	movw	r30, r14
    1596:	81 91       	ld	r24, Z+
    1598:	7f 01       	movw	r14, r30
    159a:	0e 94 46 0a 	call	0x148c	; 0x148c <oled_write_char_using_font>
    159e:	21 96       	adiw	r28, 0x01	; 1
    15a0:	f8 01       	movw	r30, r16
    15a2:	01 90       	ld	r0, Z+
    15a4:	00 20       	and	r0, r0
    15a6:	e9 f7       	brne	.-6      	; 0x15a2 <oled_write_string+0x6a>
    15a8:	31 97       	sbiw	r30, 0x01	; 1
    15aa:	e0 1b       	sub	r30, r16
    15ac:	f1 0b       	sbc	r31, r17
    15ae:	ce 17       	cp	r28, r30
    15b0:	df 07       	cpc	r29, r31
    15b2:	e8 f2       	brcs	.-70     	; 0x156e <oled_write_string+0x36>
    15b4:	df 91       	pop	r29
    15b6:	cf 91       	pop	r28
    15b8:	1f 91       	pop	r17
    15ba:	0f 91       	pop	r16
    15bc:	ff 90       	pop	r15
    15be:	ef 90       	pop	r14
    15c0:	df 90       	pop	r13
    15c2:	cf 90       	pop	r12
    15c4:	bf 90       	pop	r11
    15c6:	af 90       	pop	r10
    15c8:	9f 90       	pop	r9
    15ca:	8f 90       	pop	r8
    15cc:	08 95       	ret

000015ce <character_printer>:

//warning: array must have percieved height and width divisible by 8
void character_printer(amap* atmelMap, uint8_t arr[], int width, int height){
    15ce:	3f 92       	push	r3
    15d0:	4f 92       	push	r4
    15d2:	5f 92       	push	r5
    15d4:	6f 92       	push	r6
    15d6:	7f 92       	push	r7
    15d8:	8f 92       	push	r8
    15da:	9f 92       	push	r9
    15dc:	af 92       	push	r10
    15de:	bf 92       	push	r11
    15e0:	cf 92       	push	r12
    15e2:	df 92       	push	r13
    15e4:	ef 92       	push	r14
    15e6:	ff 92       	push	r15
    15e8:	0f 93       	push	r16
    15ea:	1f 93       	push	r17
    15ec:	cf 93       	push	r28
    15ee:	df 93       	push	r29
    15f0:	00 d0       	rcall	.+0      	; 0x15f2 <character_printer+0x24>
    15f2:	00 d0       	rcall	.+0      	; 0x15f4 <character_printer+0x26>
    15f4:	cd b7       	in	r28, 0x3d	; 61
    15f6:	de b7       	in	r29, 0x3e	; 62
    15f8:	4b 01       	movw	r8, r22
    15fa:	6a 01       	movw	r12, r20
	//for(int p = 0; p < 88; p++){
		for (int line = 0; line < height/8; line++){
    15fc:	33 23       	and	r19, r19
    15fe:	14 f4       	brge	.+4      	; 0x1604 <character_printer+0x36>
    1600:	29 5f       	subi	r18, 0xF9	; 249
    1602:	3f 4f       	sbci	r19, 0xFF	; 255
    1604:	29 01       	movw	r4, r18
    1606:	55 94       	asr	r5
    1608:	47 94       	ror	r4
    160a:	55 94       	asr	r5
    160c:	47 94       	ror	r4
    160e:	55 94       	asr	r5
    1610:	47 94       	ror	r4
    1612:	14 14       	cp	r1, r4
    1614:	15 04       	cpc	r1, r5
    1616:	0c f0       	brlt	.+2      	; 0x161a <character_printer+0x4c>
    1618:	4d c0       	rjmp	.+154    	; 0x16b4 <character_printer+0xe6>
    161a:	c6 01       	movw	r24, r12
    161c:	88 0f       	add	r24, r24
    161e:	99 1f       	adc	r25, r25
    1620:	88 0f       	add	r24, r24
    1622:	99 1f       	adc	r25, r25
    1624:	88 0f       	add	r24, r24
    1626:	99 1f       	adc	r25, r25
    1628:	9a 83       	std	Y+2, r25	; 0x02
    162a:	89 83       	std	Y+1, r24	; 0x01
    162c:	e1 2c       	mov	r14, r1
    162e:	f1 2c       	mov	r15, r1
    1630:	61 2c       	mov	r6, r1
    1632:	71 2c       	mov	r7, r1
    1634:	dc 82       	std	Y+4, r13	; 0x04
    1636:	cb 82       	std	Y+3, r12	; 0x03
	ext_ram[0] = c;
}
void oled_write_data(char c)
{
	volatile char *ext_ram = (char *) 0x1200;
	ext_ram[0] = c;
    1638:	0f 2e       	mov	r0, r31
    163a:	a1 2c       	mov	r10, r1
    163c:	f2 e1       	ldi	r31, 0x12	; 18
    163e:	bf 2e       	mov	r11, r31
    1640:	f0 2d       	mov	r31, r0
//warning: array must have percieved height and width divisible by 8
void character_printer(amap* atmelMap, uint8_t arr[], int width, int height){
	//for(int p = 0; p < 88; p++){
		for (int line = 0; line < height/8; line++){
			int offset = line*width*8;
			for (int col = 0; col < width; col++){
    1642:	1c 14       	cp	r1, r12
    1644:	1d 04       	cpc	r1, r13
    1646:	0c f1       	brlt	.+66     	; 0x168a <character_printer+0xbc>
    1648:	2b c0       	rjmp	.+86     	; 0x16a0 <character_printer+0xd2>
				unsigned char c = 0b00000000;
				for (int i = 0; i < 8; i++){
					c |= (pgm_read_byte(&(arr[i*width + col + offset])) << i);
    164a:	84 91       	lpm	r24, Z
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	02 2e       	mov	r0, r18
    1650:	02 c0       	rjmp	.+4      	; 0x1656 <character_printer+0x88>
    1652:	88 0f       	add	r24, r24
    1654:	99 1f       	adc	r25, r25
    1656:	0a 94       	dec	r0
    1658:	e2 f7       	brpl	.-8      	; 0x1652 <character_printer+0x84>
    165a:	38 2a       	or	r3, r24
	//for(int p = 0; p < 88; p++){
		for (int line = 0; line < height/8; line++){
			int offset = line*width*8;
			for (int col = 0; col < width; col++){
				unsigned char c = 0b00000000;
				for (int i = 0; i < 8; i++){
    165c:	2f 5f       	subi	r18, 0xFF	; 255
    165e:	3f 4f       	sbci	r19, 0xFF	; 255
    1660:	8b 81       	ldd	r24, Y+3	; 0x03
    1662:	9c 81       	ldd	r25, Y+4	; 0x04
    1664:	e8 0f       	add	r30, r24
    1666:	f9 1f       	adc	r31, r25
    1668:	28 30       	cpi	r18, 0x08	; 8
    166a:	31 05       	cpc	r19, r1
    166c:	71 f7       	brne	.-36     	; 0x164a <character_printer+0x7c>
					c |= (pgm_read_byte(&(arr[i*width + col + offset])) << i);
				}
				go_to_line(line);
    166e:	86 2d       	mov	r24, r6
    1670:	0e 94 1f 0a 	call	0x143e	; 0x143e <go_to_line>
				go_to_column(col/*+p*/);
    1674:	80 2f       	mov	r24, r16
    1676:	0e 94 24 0a 	call	0x1448	; 0x1448 <go_to_column>
	ext_ram[0] = c;
}
void oled_write_data(char c)
{
	volatile char *ext_ram = (char *) 0x1200;
	ext_ram[0] = c;
    167a:	f5 01       	movw	r30, r10
    167c:	30 82       	st	Z, r3
//warning: array must have percieved height and width divisible by 8
void character_printer(amap* atmelMap, uint8_t arr[], int width, int height){
	//for(int p = 0; p < 88; p++){
		for (int line = 0; line < height/8; line++){
			int offset = line*width*8;
			for (int col = 0; col < width; col++){
    167e:	0f 5f       	subi	r16, 0xFF	; 255
    1680:	1f 4f       	sbci	r17, 0xFF	; 255
    1682:	c0 16       	cp	r12, r16
    1684:	d1 06       	cpc	r13, r17
    1686:	19 f4       	brne	.+6      	; 0x168e <character_printer+0xc0>
    1688:	0b c0       	rjmp	.+22     	; 0x16a0 <character_printer+0xd2>
    168a:	00 e0       	ldi	r16, 0x00	; 0
    168c:	10 e0       	ldi	r17, 0x00	; 0
    168e:	f8 01       	movw	r30, r16
    1690:	ee 0d       	add	r30, r14
    1692:	ff 1d       	adc	r31, r15
    1694:	e8 0d       	add	r30, r8
    1696:	f9 1d       	adc	r31, r9
}

//warning: array must have percieved height and width divisible by 8
void character_printer(amap* atmelMap, uint8_t arr[], int width, int height){
	//for(int p = 0; p < 88; p++){
		for (int line = 0; line < height/8; line++){
    1698:	20 e0       	ldi	r18, 0x00	; 0
    169a:	30 e0       	ldi	r19, 0x00	; 0
    169c:	31 2c       	mov	r3, r1
    169e:	d5 cf       	rjmp	.-86     	; 0x164a <character_printer+0x7c>
    16a0:	ff ef       	ldi	r31, 0xFF	; 255
    16a2:	6f 1a       	sub	r6, r31
    16a4:	7f 0a       	sbc	r7, r31
    16a6:	89 81       	ldd	r24, Y+1	; 0x01
    16a8:	9a 81       	ldd	r25, Y+2	; 0x02
    16aa:	e8 0e       	add	r14, r24
    16ac:	f9 1e       	adc	r15, r25
    16ae:	64 14       	cp	r6, r4
    16b0:	75 04       	cpc	r7, r5
    16b2:	39 f6       	brne	.-114    	; 0x1642 <character_printer+0x74>
				oled_write_data(c);
			}
		}
		//clear_oled(atmelMap);
	//}
    16b4:	0f 90       	pop	r0
    16b6:	0f 90       	pop	r0
    16b8:	0f 90       	pop	r0
    16ba:	0f 90       	pop	r0
    16bc:	df 91       	pop	r29
    16be:	cf 91       	pop	r28
    16c0:	1f 91       	pop	r17
    16c2:	0f 91       	pop	r16
    16c4:	ff 90       	pop	r15
    16c6:	ef 90       	pop	r14
    16c8:	df 90       	pop	r13
    16ca:	cf 90       	pop	r12
    16cc:	bf 90       	pop	r11
    16ce:	af 90       	pop	r10
    16d0:	9f 90       	pop	r9
    16d2:	8f 90       	pop	r8
    16d4:	7f 90       	pop	r7
    16d6:	6f 90       	pop	r6
    16d8:	5f 90       	pop	r5
    16da:	4f 90       	pop	r4
    16dc:	3f 90       	pop	r3
    16de:	08 95       	ret

000016e0 <SRAM_test>:
#include "sram_test.h"
    void SRAM_test(void)
    {
    16e0:	ef 92       	push	r14
    16e2:	ff 92       	push	r15
    16e4:	0f 93       	push	r16
    16e6:	1f 93       	push	r17
    16e8:	cf 93       	push	r28
    16ea:	df 93       	push	r29
		volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
        uint16_t ext_ram_size = 0x800;
        uint16_t write_errors = 0;
        uint16_t retrieval_errors = 0;
        printf("Starting SRAM test...\n");
    16ec:	80 e7       	ldi	r24, 0x70	; 112
    16ee:	91 e0       	ldi	r25, 0x01	; 1
    16f0:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <puts>
        // rand() stores some internal state, so calling this function in a loop will
        // yield different seeds each time (unless srand() is called before this function)
        uint16_t seed = rand();
    16f4:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <rand>
    16f8:	7c 01       	movw	r14, r24
        // Write phase: Immediately check that the correct value was stored
        srand(seed);
    16fa:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <srand>
    16fe:	c0 e0       	ldi	r28, 0x00	; 0
    1700:	d8 e1       	ldi	r29, 0x18	; 24
#include "sram_test.h"
    void SRAM_test(void)
    {
		volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
        uint16_t ext_ram_size = 0x800;
        uint16_t write_errors = 0;
    1702:	00 e0       	ldi	r16, 0x00	; 0
    1704:	10 e0       	ldi	r17, 0x00	; 0
        // yield different seeds each time (unless srand() is called before this function)
        uint16_t seed = rand();
        // Write phase: Immediately check that the correct value was stored
        srand(seed);
        for (uint16_t i = 0; i < ext_ram_size; i++) {
            uint8_t some_value = rand();
    1706:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <rand>
            ext_ram[i] = some_value;
    170a:	88 83       	st	Y, r24
            uint8_t retreived_value = ext_ram[i];
    170c:	98 81       	ld	r25, Y
            if (retreived_value != some_value) {
    170e:	89 17       	cp	r24, r25
    1710:	11 f0       	breq	.+4      	; 0x1716 <SRAM_test+0x36>
                //printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
                write_errors++;
    1712:	0f 5f       	subi	r16, 0xFF	; 255
    1714:	1f 4f       	sbci	r17, 0xFF	; 255
    1716:	21 96       	adiw	r28, 0x01	; 1
        // rand() stores some internal state, so calling this function in a loop will
        // yield different seeds each time (unless srand() is called before this function)
        uint16_t seed = rand();
        // Write phase: Immediately check that the correct value was stored
        srand(seed);
        for (uint16_t i = 0; i < ext_ram_size; i++) {
    1718:	c1 15       	cp	r28, r1
    171a:	80 e2       	ldi	r24, 0x20	; 32
    171c:	d8 07       	cpc	r29, r24
    171e:	99 f7       	brne	.-26     	; 0x1706 <SRAM_test+0x26>
                //printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
                write_errors++;
            }
        }
        // Retrieval phase: Check that no values were changed during or after the write phase
        srand(seed);
    1720:	c7 01       	movw	r24, r14
    1722:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <srand>
    1726:	c0 e0       	ldi	r28, 0x00	; 0
    1728:	d8 e1       	ldi	r29, 0x18	; 24
    void SRAM_test(void)
    {
		volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
        uint16_t ext_ram_size = 0x800;
        uint16_t write_errors = 0;
        uint16_t retrieval_errors = 0;
    172a:	e1 2c       	mov	r14, r1
    172c:	f1 2c       	mov	r15, r1
        }
        // Retrieval phase: Check that no values were changed during or after the write phase
        srand(seed);
        // reset the PRNG to the state it had before the write phase
        for (uint16_t i = 0; i < ext_ram_size; i++) {
            uint8_t some_value = rand();
    172e:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <rand>
            uint8_t retreived_value = ext_ram[i];
    1732:	98 81       	ld	r25, Y
            if (retreived_value != some_value) {
    1734:	98 17       	cp	r25, r24
    1736:	19 f0       	breq	.+6      	; 0x173e <SRAM_test+0x5e>
               // printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
                retrieval_errors++;
    1738:	8f ef       	ldi	r24, 0xFF	; 255
    173a:	e8 1a       	sub	r14, r24
    173c:	f8 0a       	sbc	r15, r24
    173e:	21 96       	adiw	r28, 0x01	; 1
            }
        }
        // Retrieval phase: Check that no values were changed during or after the write phase
        srand(seed);
        // reset the PRNG to the state it had before the write phase
        for (uint16_t i = 0; i < ext_ram_size; i++) {
    1740:	c1 15       	cp	r28, r1
    1742:	80 e2       	ldi	r24, 0x20	; 32
    1744:	d8 07       	cpc	r29, r24
    1746:	99 f7       	brne	.-26     	; 0x172e <SRAM_test+0x4e>
            if (retreived_value != some_value) {
               // printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
                retrieval_errors++;
            }
        }
        printf("SRAM test completed with \n%4d errors in write phase and \n%4d errors in retrieval phase\n\n", write_errors, retrieval_errors);
    1748:	ff 92       	push	r15
    174a:	ef 92       	push	r14
    174c:	1f 93       	push	r17
    174e:	0f 93       	push	r16
    1750:	86 e8       	ldi	r24, 0x86	; 134
    1752:	91 e0       	ldi	r25, 0x01	; 1
    1754:	9f 93       	push	r25
    1756:	8f 93       	push	r24
    1758:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <printf>
    175c:	0f 90       	pop	r0
    175e:	0f 90       	pop	r0
    1760:	0f 90       	pop	r0
    1762:	0f 90       	pop	r0
    1764:	0f 90       	pop	r0
    1766:	0f 90       	pop	r0
    1768:	df 91       	pop	r29
    176a:	cf 91       	pop	r28
    176c:	1f 91       	pop	r17
    176e:	0f 91       	pop	r16
    1770:	ff 90       	pop	r15
    1772:	ef 90       	pop	r14
    1774:	08 95       	ret

00001776 <USART_Transmit>:
	UCSR1C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
	clear_bit(UCSR0C, 0); // Clock polarity
	fdevopen(USART_Transmit, USART_Receive);
}
void USART_Transmit(unsigned char data){
	while (!(UCSR0A & (1<<UDRE0)));
    1776:	5d 9b       	sbis	0x0b, 5	; 11
    1778:	fe cf       	rjmp	.-4      	; 0x1776 <USART_Transmit>
	
	UDR0 = data;
    177a:	8c b9       	out	0x0c, r24	; 12
    177c:	08 95       	ret

0000177e <USART_Receive>:
}

unsigned int USART_Receive(void)
{
	
	while (!(UCSR0A & (1<<RXC0)));
    177e:	5f 9b       	sbis	0x0b, 7	; 11
    1780:	fe cf       	rjmp	.-4      	; 0x177e <USART_Receive>
	

	return UDR0;
    1782:	8c b1       	in	r24, 0x0c	; 12
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	08 95       	ret

00001788 <USART_Init>:
#include <stdio.h>
#define clear_bit( reg, bit ) (reg &= ~(1 << bit))

void USART_Init (unsigned int ubrr ){
	
	UBRR0H = (unsigned char)(ubrr>>8);
    1788:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)ubrr;
    178a:	89 b9       	out	0x09, r24	; 9
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    178c:	88 e1       	ldi	r24, 0x18	; 24
    178e:	8a b9       	out	0x0a, r24	; 10
	
	UCSR1C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
    1790:	8e e8       	ldi	r24, 0x8E	; 142
    1792:	8c bf       	out	0x3c, r24	; 60
	clear_bit(UCSR0C, 0); // Clock polarity
    1794:	80 b5       	in	r24, 0x20	; 32
    1796:	8e 7f       	andi	r24, 0xFE	; 254
    1798:	80 bd       	out	0x20, r24	; 32
	fdevopen(USART_Transmit, USART_Receive);
    179a:	6f eb       	ldi	r22, 0xBF	; 191
    179c:	7b e0       	ldi	r23, 0x0B	; 11
    179e:	8b eb       	ldi	r24, 0xBB	; 187
    17a0:	9b e0       	ldi	r25, 0x0B	; 11
    17a2:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <fdevopen>
    17a6:	08 95       	ret

000017a8 <__divmodhi4>:
    17a8:	97 fb       	bst	r25, 7
    17aa:	07 2e       	mov	r0, r23
    17ac:	16 f4       	brtc	.+4      	; 0x17b2 <__divmodhi4+0xa>
    17ae:	00 94       	com	r0
    17b0:	07 d0       	rcall	.+14     	; 0x17c0 <__divmodhi4_neg1>
    17b2:	77 fd       	sbrc	r23, 7
    17b4:	09 d0       	rcall	.+18     	; 0x17c8 <__divmodhi4_neg2>
    17b6:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <__udivmodhi4>
    17ba:	07 fc       	sbrc	r0, 7
    17bc:	05 d0       	rcall	.+10     	; 0x17c8 <__divmodhi4_neg2>
    17be:	3e f4       	brtc	.+14     	; 0x17ce <__divmodhi4_exit>

000017c0 <__divmodhi4_neg1>:
    17c0:	90 95       	com	r25
    17c2:	81 95       	neg	r24
    17c4:	9f 4f       	sbci	r25, 0xFF	; 255
    17c6:	08 95       	ret

000017c8 <__divmodhi4_neg2>:
    17c8:	70 95       	com	r23
    17ca:	61 95       	neg	r22
    17cc:	7f 4f       	sbci	r23, 0xFF	; 255

000017ce <__divmodhi4_exit>:
    17ce:	08 95       	ret

000017d0 <__udivmodhi4>:
    17d0:	aa 1b       	sub	r26, r26
    17d2:	bb 1b       	sub	r27, r27
    17d4:	51 e1       	ldi	r21, 0x11	; 17
    17d6:	07 c0       	rjmp	.+14     	; 0x17e6 <__udivmodhi4_ep>

000017d8 <__udivmodhi4_loop>:
    17d8:	aa 1f       	adc	r26, r26
    17da:	bb 1f       	adc	r27, r27
    17dc:	a6 17       	cp	r26, r22
    17de:	b7 07       	cpc	r27, r23
    17e0:	10 f0       	brcs	.+4      	; 0x17e6 <__udivmodhi4_ep>
    17e2:	a6 1b       	sub	r26, r22
    17e4:	b7 0b       	sbc	r27, r23

000017e6 <__udivmodhi4_ep>:
    17e6:	88 1f       	adc	r24, r24
    17e8:	99 1f       	adc	r25, r25
    17ea:	5a 95       	dec	r21
    17ec:	a9 f7       	brne	.-22     	; 0x17d8 <__udivmodhi4_loop>
    17ee:	80 95       	com	r24
    17f0:	90 95       	com	r25
    17f2:	bc 01       	movw	r22, r24
    17f4:	cd 01       	movw	r24, r26
    17f6:	08 95       	ret

000017f8 <malloc>:
    17f8:	0f 93       	push	r16
    17fa:	1f 93       	push	r17
    17fc:	cf 93       	push	r28
    17fe:	df 93       	push	r29
    1800:	82 30       	cpi	r24, 0x02	; 2
    1802:	91 05       	cpc	r25, r1
    1804:	10 f4       	brcc	.+4      	; 0x180a <malloc+0x12>
    1806:	82 e0       	ldi	r24, 0x02	; 2
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	e0 91 e2 01 	lds	r30, 0x01E2	; 0x8001e2 <__flp>
    180e:	f0 91 e3 01 	lds	r31, 0x01E3	; 0x8001e3 <__flp+0x1>
    1812:	20 e0       	ldi	r18, 0x00	; 0
    1814:	30 e0       	ldi	r19, 0x00	; 0
    1816:	a0 e0       	ldi	r26, 0x00	; 0
    1818:	b0 e0       	ldi	r27, 0x00	; 0
    181a:	30 97       	sbiw	r30, 0x00	; 0
    181c:	19 f1       	breq	.+70     	; 0x1864 <malloc+0x6c>
    181e:	40 81       	ld	r20, Z
    1820:	51 81       	ldd	r21, Z+1	; 0x01
    1822:	02 81       	ldd	r16, Z+2	; 0x02
    1824:	13 81       	ldd	r17, Z+3	; 0x03
    1826:	48 17       	cp	r20, r24
    1828:	59 07       	cpc	r21, r25
    182a:	c8 f0       	brcs	.+50     	; 0x185e <malloc+0x66>
    182c:	84 17       	cp	r24, r20
    182e:	95 07       	cpc	r25, r21
    1830:	69 f4       	brne	.+26     	; 0x184c <malloc+0x54>
    1832:	10 97       	sbiw	r26, 0x00	; 0
    1834:	31 f0       	breq	.+12     	; 0x1842 <malloc+0x4a>
    1836:	12 96       	adiw	r26, 0x02	; 2
    1838:	0c 93       	st	X, r16
    183a:	12 97       	sbiw	r26, 0x02	; 2
    183c:	13 96       	adiw	r26, 0x03	; 3
    183e:	1c 93       	st	X, r17
    1840:	27 c0       	rjmp	.+78     	; 0x1890 <malloc+0x98>
    1842:	00 93 e2 01 	sts	0x01E2, r16	; 0x8001e2 <__flp>
    1846:	10 93 e3 01 	sts	0x01E3, r17	; 0x8001e3 <__flp+0x1>
    184a:	22 c0       	rjmp	.+68     	; 0x1890 <malloc+0x98>
    184c:	21 15       	cp	r18, r1
    184e:	31 05       	cpc	r19, r1
    1850:	19 f0       	breq	.+6      	; 0x1858 <malloc+0x60>
    1852:	42 17       	cp	r20, r18
    1854:	53 07       	cpc	r21, r19
    1856:	18 f4       	brcc	.+6      	; 0x185e <malloc+0x66>
    1858:	9a 01       	movw	r18, r20
    185a:	bd 01       	movw	r22, r26
    185c:	ef 01       	movw	r28, r30
    185e:	df 01       	movw	r26, r30
    1860:	f8 01       	movw	r30, r16
    1862:	db cf       	rjmp	.-74     	; 0x181a <malloc+0x22>
    1864:	21 15       	cp	r18, r1
    1866:	31 05       	cpc	r19, r1
    1868:	f9 f0       	breq	.+62     	; 0x18a8 <malloc+0xb0>
    186a:	28 1b       	sub	r18, r24
    186c:	39 0b       	sbc	r19, r25
    186e:	24 30       	cpi	r18, 0x04	; 4
    1870:	31 05       	cpc	r19, r1
    1872:	80 f4       	brcc	.+32     	; 0x1894 <malloc+0x9c>
    1874:	8a 81       	ldd	r24, Y+2	; 0x02
    1876:	9b 81       	ldd	r25, Y+3	; 0x03
    1878:	61 15       	cp	r22, r1
    187a:	71 05       	cpc	r23, r1
    187c:	21 f0       	breq	.+8      	; 0x1886 <malloc+0x8e>
    187e:	fb 01       	movw	r30, r22
    1880:	93 83       	std	Z+3, r25	; 0x03
    1882:	82 83       	std	Z+2, r24	; 0x02
    1884:	04 c0       	rjmp	.+8      	; 0x188e <malloc+0x96>
    1886:	90 93 e3 01 	sts	0x01E3, r25	; 0x8001e3 <__flp+0x1>
    188a:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <__flp>
    188e:	fe 01       	movw	r30, r28
    1890:	32 96       	adiw	r30, 0x02	; 2
    1892:	44 c0       	rjmp	.+136    	; 0x191c <malloc+0x124>
    1894:	fe 01       	movw	r30, r28
    1896:	e2 0f       	add	r30, r18
    1898:	f3 1f       	adc	r31, r19
    189a:	81 93       	st	Z+, r24
    189c:	91 93       	st	Z+, r25
    189e:	22 50       	subi	r18, 0x02	; 2
    18a0:	31 09       	sbc	r19, r1
    18a2:	39 83       	std	Y+1, r19	; 0x01
    18a4:	28 83       	st	Y, r18
    18a6:	3a c0       	rjmp	.+116    	; 0x191c <malloc+0x124>
    18a8:	20 91 e0 01 	lds	r18, 0x01E0	; 0x8001e0 <__data_end>
    18ac:	30 91 e1 01 	lds	r19, 0x01E1	; 0x8001e1 <__data_end+0x1>
    18b0:	23 2b       	or	r18, r19
    18b2:	41 f4       	brne	.+16     	; 0x18c4 <malloc+0xcc>
    18b4:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    18b8:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    18bc:	30 93 e1 01 	sts	0x01E1, r19	; 0x8001e1 <__data_end+0x1>
    18c0:	20 93 e0 01 	sts	0x01E0, r18	; 0x8001e0 <__data_end>
    18c4:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    18c8:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    18cc:	21 15       	cp	r18, r1
    18ce:	31 05       	cpc	r19, r1
    18d0:	41 f4       	brne	.+16     	; 0x18e2 <malloc+0xea>
    18d2:	2d b7       	in	r18, 0x3d	; 61
    18d4:	3e b7       	in	r19, 0x3e	; 62
    18d6:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    18da:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    18de:	24 1b       	sub	r18, r20
    18e0:	35 0b       	sbc	r19, r21
    18e2:	e0 91 e0 01 	lds	r30, 0x01E0	; 0x8001e0 <__data_end>
    18e6:	f0 91 e1 01 	lds	r31, 0x01E1	; 0x8001e1 <__data_end+0x1>
    18ea:	e2 17       	cp	r30, r18
    18ec:	f3 07       	cpc	r31, r19
    18ee:	a0 f4       	brcc	.+40     	; 0x1918 <malloc+0x120>
    18f0:	2e 1b       	sub	r18, r30
    18f2:	3f 0b       	sbc	r19, r31
    18f4:	28 17       	cp	r18, r24
    18f6:	39 07       	cpc	r19, r25
    18f8:	78 f0       	brcs	.+30     	; 0x1918 <malloc+0x120>
    18fa:	ac 01       	movw	r20, r24
    18fc:	4e 5f       	subi	r20, 0xFE	; 254
    18fe:	5f 4f       	sbci	r21, 0xFF	; 255
    1900:	24 17       	cp	r18, r20
    1902:	35 07       	cpc	r19, r21
    1904:	48 f0       	brcs	.+18     	; 0x1918 <malloc+0x120>
    1906:	4e 0f       	add	r20, r30
    1908:	5f 1f       	adc	r21, r31
    190a:	50 93 e1 01 	sts	0x01E1, r21	; 0x8001e1 <__data_end+0x1>
    190e:	40 93 e0 01 	sts	0x01E0, r20	; 0x8001e0 <__data_end>
    1912:	81 93       	st	Z+, r24
    1914:	91 93       	st	Z+, r25
    1916:	02 c0       	rjmp	.+4      	; 0x191c <malloc+0x124>
    1918:	e0 e0       	ldi	r30, 0x00	; 0
    191a:	f0 e0       	ldi	r31, 0x00	; 0
    191c:	cf 01       	movw	r24, r30
    191e:	df 91       	pop	r29
    1920:	cf 91       	pop	r28
    1922:	1f 91       	pop	r17
    1924:	0f 91       	pop	r16
    1926:	08 95       	ret

00001928 <free>:
    1928:	cf 93       	push	r28
    192a:	df 93       	push	r29
    192c:	00 97       	sbiw	r24, 0x00	; 0
    192e:	09 f4       	brne	.+2      	; 0x1932 <free+0xa>
    1930:	81 c0       	rjmp	.+258    	; 0x1a34 <free+0x10c>
    1932:	fc 01       	movw	r30, r24
    1934:	32 97       	sbiw	r30, 0x02	; 2
    1936:	13 82       	std	Z+3, r1	; 0x03
    1938:	12 82       	std	Z+2, r1	; 0x02
    193a:	a0 91 e2 01 	lds	r26, 0x01E2	; 0x8001e2 <__flp>
    193e:	b0 91 e3 01 	lds	r27, 0x01E3	; 0x8001e3 <__flp+0x1>
    1942:	10 97       	sbiw	r26, 0x00	; 0
    1944:	81 f4       	brne	.+32     	; 0x1966 <free+0x3e>
    1946:	20 81       	ld	r18, Z
    1948:	31 81       	ldd	r19, Z+1	; 0x01
    194a:	82 0f       	add	r24, r18
    194c:	93 1f       	adc	r25, r19
    194e:	20 91 e0 01 	lds	r18, 0x01E0	; 0x8001e0 <__data_end>
    1952:	30 91 e1 01 	lds	r19, 0x01E1	; 0x8001e1 <__data_end+0x1>
    1956:	28 17       	cp	r18, r24
    1958:	39 07       	cpc	r19, r25
    195a:	51 f5       	brne	.+84     	; 0x19b0 <free+0x88>
    195c:	f0 93 e1 01 	sts	0x01E1, r31	; 0x8001e1 <__data_end+0x1>
    1960:	e0 93 e0 01 	sts	0x01E0, r30	; 0x8001e0 <__data_end>
    1964:	67 c0       	rjmp	.+206    	; 0x1a34 <free+0x10c>
    1966:	ed 01       	movw	r28, r26
    1968:	20 e0       	ldi	r18, 0x00	; 0
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	ce 17       	cp	r28, r30
    196e:	df 07       	cpc	r29, r31
    1970:	40 f4       	brcc	.+16     	; 0x1982 <free+0x5a>
    1972:	4a 81       	ldd	r20, Y+2	; 0x02
    1974:	5b 81       	ldd	r21, Y+3	; 0x03
    1976:	9e 01       	movw	r18, r28
    1978:	41 15       	cp	r20, r1
    197a:	51 05       	cpc	r21, r1
    197c:	f1 f0       	breq	.+60     	; 0x19ba <free+0x92>
    197e:	ea 01       	movw	r28, r20
    1980:	f5 cf       	rjmp	.-22     	; 0x196c <free+0x44>
    1982:	d3 83       	std	Z+3, r29	; 0x03
    1984:	c2 83       	std	Z+2, r28	; 0x02
    1986:	40 81       	ld	r20, Z
    1988:	51 81       	ldd	r21, Z+1	; 0x01
    198a:	84 0f       	add	r24, r20
    198c:	95 1f       	adc	r25, r21
    198e:	c8 17       	cp	r28, r24
    1990:	d9 07       	cpc	r29, r25
    1992:	59 f4       	brne	.+22     	; 0x19aa <free+0x82>
    1994:	88 81       	ld	r24, Y
    1996:	99 81       	ldd	r25, Y+1	; 0x01
    1998:	84 0f       	add	r24, r20
    199a:	95 1f       	adc	r25, r21
    199c:	02 96       	adiw	r24, 0x02	; 2
    199e:	91 83       	std	Z+1, r25	; 0x01
    19a0:	80 83       	st	Z, r24
    19a2:	8a 81       	ldd	r24, Y+2	; 0x02
    19a4:	9b 81       	ldd	r25, Y+3	; 0x03
    19a6:	93 83       	std	Z+3, r25	; 0x03
    19a8:	82 83       	std	Z+2, r24	; 0x02
    19aa:	21 15       	cp	r18, r1
    19ac:	31 05       	cpc	r19, r1
    19ae:	29 f4       	brne	.+10     	; 0x19ba <free+0x92>
    19b0:	f0 93 e3 01 	sts	0x01E3, r31	; 0x8001e3 <__flp+0x1>
    19b4:	e0 93 e2 01 	sts	0x01E2, r30	; 0x8001e2 <__flp>
    19b8:	3d c0       	rjmp	.+122    	; 0x1a34 <free+0x10c>
    19ba:	e9 01       	movw	r28, r18
    19bc:	fb 83       	std	Y+3, r31	; 0x03
    19be:	ea 83       	std	Y+2, r30	; 0x02
    19c0:	49 91       	ld	r20, Y+
    19c2:	59 91       	ld	r21, Y+
    19c4:	c4 0f       	add	r28, r20
    19c6:	d5 1f       	adc	r29, r21
    19c8:	ec 17       	cp	r30, r28
    19ca:	fd 07       	cpc	r31, r29
    19cc:	61 f4       	brne	.+24     	; 0x19e6 <free+0xbe>
    19ce:	80 81       	ld	r24, Z
    19d0:	91 81       	ldd	r25, Z+1	; 0x01
    19d2:	84 0f       	add	r24, r20
    19d4:	95 1f       	adc	r25, r21
    19d6:	02 96       	adiw	r24, 0x02	; 2
    19d8:	e9 01       	movw	r28, r18
    19da:	99 83       	std	Y+1, r25	; 0x01
    19dc:	88 83       	st	Y, r24
    19de:	82 81       	ldd	r24, Z+2	; 0x02
    19e0:	93 81       	ldd	r25, Z+3	; 0x03
    19e2:	9b 83       	std	Y+3, r25	; 0x03
    19e4:	8a 83       	std	Y+2, r24	; 0x02
    19e6:	e0 e0       	ldi	r30, 0x00	; 0
    19e8:	f0 e0       	ldi	r31, 0x00	; 0
    19ea:	12 96       	adiw	r26, 0x02	; 2
    19ec:	8d 91       	ld	r24, X+
    19ee:	9c 91       	ld	r25, X
    19f0:	13 97       	sbiw	r26, 0x03	; 3
    19f2:	00 97       	sbiw	r24, 0x00	; 0
    19f4:	19 f0       	breq	.+6      	; 0x19fc <free+0xd4>
    19f6:	fd 01       	movw	r30, r26
    19f8:	dc 01       	movw	r26, r24
    19fa:	f7 cf       	rjmp	.-18     	; 0x19ea <free+0xc2>
    19fc:	8d 91       	ld	r24, X+
    19fe:	9c 91       	ld	r25, X
    1a00:	11 97       	sbiw	r26, 0x01	; 1
    1a02:	9d 01       	movw	r18, r26
    1a04:	2e 5f       	subi	r18, 0xFE	; 254
    1a06:	3f 4f       	sbci	r19, 0xFF	; 255
    1a08:	82 0f       	add	r24, r18
    1a0a:	93 1f       	adc	r25, r19
    1a0c:	20 91 e0 01 	lds	r18, 0x01E0	; 0x8001e0 <__data_end>
    1a10:	30 91 e1 01 	lds	r19, 0x01E1	; 0x8001e1 <__data_end+0x1>
    1a14:	28 17       	cp	r18, r24
    1a16:	39 07       	cpc	r19, r25
    1a18:	69 f4       	brne	.+26     	; 0x1a34 <free+0x10c>
    1a1a:	30 97       	sbiw	r30, 0x00	; 0
    1a1c:	29 f4       	brne	.+10     	; 0x1a28 <free+0x100>
    1a1e:	10 92 e3 01 	sts	0x01E3, r1	; 0x8001e3 <__flp+0x1>
    1a22:	10 92 e2 01 	sts	0x01E2, r1	; 0x8001e2 <__flp>
    1a26:	02 c0       	rjmp	.+4      	; 0x1a2c <free+0x104>
    1a28:	13 82       	std	Z+3, r1	; 0x03
    1a2a:	12 82       	std	Z+2, r1	; 0x02
    1a2c:	b0 93 e1 01 	sts	0x01E1, r27	; 0x8001e1 <__data_end+0x1>
    1a30:	a0 93 e0 01 	sts	0x01E0, r26	; 0x8001e0 <__data_end>
    1a34:	df 91       	pop	r29
    1a36:	cf 91       	pop	r28
    1a38:	08 95       	ret

00001a3a <do_rand>:
    1a3a:	8f 92       	push	r8
    1a3c:	9f 92       	push	r9
    1a3e:	af 92       	push	r10
    1a40:	bf 92       	push	r11
    1a42:	cf 92       	push	r12
    1a44:	df 92       	push	r13
    1a46:	ef 92       	push	r14
    1a48:	ff 92       	push	r15
    1a4a:	cf 93       	push	r28
    1a4c:	df 93       	push	r29
    1a4e:	ec 01       	movw	r28, r24
    1a50:	68 81       	ld	r22, Y
    1a52:	79 81       	ldd	r23, Y+1	; 0x01
    1a54:	8a 81       	ldd	r24, Y+2	; 0x02
    1a56:	9b 81       	ldd	r25, Y+3	; 0x03
    1a58:	61 15       	cp	r22, r1
    1a5a:	71 05       	cpc	r23, r1
    1a5c:	81 05       	cpc	r24, r1
    1a5e:	91 05       	cpc	r25, r1
    1a60:	21 f4       	brne	.+8      	; 0x1a6a <do_rand+0x30>
    1a62:	64 e2       	ldi	r22, 0x24	; 36
    1a64:	79 ed       	ldi	r23, 0xD9	; 217
    1a66:	8b e5       	ldi	r24, 0x5B	; 91
    1a68:	97 e0       	ldi	r25, 0x07	; 7
    1a6a:	2d e1       	ldi	r18, 0x1D	; 29
    1a6c:	33 ef       	ldi	r19, 0xF3	; 243
    1a6e:	41 e0       	ldi	r20, 0x01	; 1
    1a70:	50 e0       	ldi	r21, 0x00	; 0
    1a72:	0e 94 c5 10 	call	0x218a	; 0x218a <__divmodsi4>
    1a76:	49 01       	movw	r8, r18
    1a78:	5a 01       	movw	r10, r20
    1a7a:	9b 01       	movw	r18, r22
    1a7c:	ac 01       	movw	r20, r24
    1a7e:	a7 ea       	ldi	r26, 0xA7	; 167
    1a80:	b1 e4       	ldi	r27, 0x41	; 65
    1a82:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <__muluhisi3>
    1a86:	6b 01       	movw	r12, r22
    1a88:	7c 01       	movw	r14, r24
    1a8a:	ac ee       	ldi	r26, 0xEC	; 236
    1a8c:	b4 ef       	ldi	r27, 0xF4	; 244
    1a8e:	a5 01       	movw	r20, r10
    1a90:	94 01       	movw	r18, r8
    1a92:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <__mulohisi3>
    1a96:	dc 01       	movw	r26, r24
    1a98:	cb 01       	movw	r24, r22
    1a9a:	8c 0d       	add	r24, r12
    1a9c:	9d 1d       	adc	r25, r13
    1a9e:	ae 1d       	adc	r26, r14
    1aa0:	bf 1d       	adc	r27, r15
    1aa2:	b7 ff       	sbrs	r27, 7
    1aa4:	03 c0       	rjmp	.+6      	; 0x1aac <do_rand+0x72>
    1aa6:	01 97       	sbiw	r24, 0x01	; 1
    1aa8:	a1 09       	sbc	r26, r1
    1aaa:	b0 48       	sbci	r27, 0x80	; 128
    1aac:	88 83       	st	Y, r24
    1aae:	99 83       	std	Y+1, r25	; 0x01
    1ab0:	aa 83       	std	Y+2, r26	; 0x02
    1ab2:	bb 83       	std	Y+3, r27	; 0x03
    1ab4:	9f 77       	andi	r25, 0x7F	; 127
    1ab6:	df 91       	pop	r29
    1ab8:	cf 91       	pop	r28
    1aba:	ff 90       	pop	r15
    1abc:	ef 90       	pop	r14
    1abe:	df 90       	pop	r13
    1ac0:	cf 90       	pop	r12
    1ac2:	bf 90       	pop	r11
    1ac4:	af 90       	pop	r10
    1ac6:	9f 90       	pop	r9
    1ac8:	8f 90       	pop	r8
    1aca:	08 95       	ret

00001acc <rand_r>:
    1acc:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <do_rand>
    1ad0:	08 95       	ret

00001ad2 <rand>:
    1ad2:	86 e0       	ldi	r24, 0x06	; 6
    1ad4:	91 e0       	ldi	r25, 0x01	; 1
    1ad6:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <do_rand>
    1ada:	08 95       	ret

00001adc <srand>:
    1adc:	a0 e0       	ldi	r26, 0x00	; 0
    1ade:	b0 e0       	ldi	r27, 0x00	; 0
    1ae0:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <next>
    1ae4:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <next+0x1>
    1ae8:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <next+0x2>
    1aec:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <next+0x3>
    1af0:	08 95       	ret

00001af2 <fdevopen>:
    1af2:	0f 93       	push	r16
    1af4:	1f 93       	push	r17
    1af6:	cf 93       	push	r28
    1af8:	df 93       	push	r29
    1afa:	00 97       	sbiw	r24, 0x00	; 0
    1afc:	31 f4       	brne	.+12     	; 0x1b0a <fdevopen+0x18>
    1afe:	61 15       	cp	r22, r1
    1b00:	71 05       	cpc	r23, r1
    1b02:	19 f4       	brne	.+6      	; 0x1b0a <fdevopen+0x18>
    1b04:	80 e0       	ldi	r24, 0x00	; 0
    1b06:	90 e0       	ldi	r25, 0x00	; 0
    1b08:	3a c0       	rjmp	.+116    	; 0x1b7e <fdevopen+0x8c>
    1b0a:	8b 01       	movw	r16, r22
    1b0c:	ec 01       	movw	r28, r24
    1b0e:	6e e0       	ldi	r22, 0x0E	; 14
    1b10:	70 e0       	ldi	r23, 0x00	; 0
    1b12:	81 e0       	ldi	r24, 0x01	; 1
    1b14:	90 e0       	ldi	r25, 0x00	; 0
    1b16:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <calloc>
    1b1a:	fc 01       	movw	r30, r24
    1b1c:	89 2b       	or	r24, r25
    1b1e:	91 f3       	breq	.-28     	; 0x1b04 <fdevopen+0x12>
    1b20:	80 e8       	ldi	r24, 0x80	; 128
    1b22:	83 83       	std	Z+3, r24	; 0x03
    1b24:	01 15       	cp	r16, r1
    1b26:	11 05       	cpc	r17, r1
    1b28:	71 f0       	breq	.+28     	; 0x1b46 <fdevopen+0x54>
    1b2a:	13 87       	std	Z+11, r17	; 0x0b
    1b2c:	02 87       	std	Z+10, r16	; 0x0a
    1b2e:	81 e8       	ldi	r24, 0x81	; 129
    1b30:	83 83       	std	Z+3, r24	; 0x03
    1b32:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <__iob>
    1b36:	90 91 e5 01 	lds	r25, 0x01E5	; 0x8001e5 <__iob+0x1>
    1b3a:	89 2b       	or	r24, r25
    1b3c:	21 f4       	brne	.+8      	; 0x1b46 <fdevopen+0x54>
    1b3e:	f0 93 e5 01 	sts	0x01E5, r31	; 0x8001e5 <__iob+0x1>
    1b42:	e0 93 e4 01 	sts	0x01E4, r30	; 0x8001e4 <__iob>
    1b46:	20 97       	sbiw	r28, 0x00	; 0
    1b48:	c9 f0       	breq	.+50     	; 0x1b7c <fdevopen+0x8a>
    1b4a:	d1 87       	std	Z+9, r29	; 0x09
    1b4c:	c0 87       	std	Z+8, r28	; 0x08
    1b4e:	83 81       	ldd	r24, Z+3	; 0x03
    1b50:	82 60       	ori	r24, 0x02	; 2
    1b52:	83 83       	std	Z+3, r24	; 0x03
    1b54:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <__iob+0x2>
    1b58:	90 91 e7 01 	lds	r25, 0x01E7	; 0x8001e7 <__iob+0x3>
    1b5c:	89 2b       	or	r24, r25
    1b5e:	71 f4       	brne	.+28     	; 0x1b7c <fdevopen+0x8a>
    1b60:	f0 93 e7 01 	sts	0x01E7, r31	; 0x8001e7 <__iob+0x3>
    1b64:	e0 93 e6 01 	sts	0x01E6, r30	; 0x8001e6 <__iob+0x2>
    1b68:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <__iob+0x4>
    1b6c:	90 91 e9 01 	lds	r25, 0x01E9	; 0x8001e9 <__iob+0x5>
    1b70:	89 2b       	or	r24, r25
    1b72:	21 f4       	brne	.+8      	; 0x1b7c <fdevopen+0x8a>
    1b74:	f0 93 e9 01 	sts	0x01E9, r31	; 0x8001e9 <__iob+0x5>
    1b78:	e0 93 e8 01 	sts	0x01E8, r30	; 0x8001e8 <__iob+0x4>
    1b7c:	cf 01       	movw	r24, r30
    1b7e:	df 91       	pop	r29
    1b80:	cf 91       	pop	r28
    1b82:	1f 91       	pop	r17
    1b84:	0f 91       	pop	r16
    1b86:	08 95       	ret

00001b88 <printf>:
    1b88:	a0 e0       	ldi	r26, 0x00	; 0
    1b8a:	b0 e0       	ldi	r27, 0x00	; 0
    1b8c:	ea ec       	ldi	r30, 0xCA	; 202
    1b8e:	fd e0       	ldi	r31, 0x0D	; 13
    1b90:	0c 94 07 11 	jmp	0x220e	; 0x220e <__prologue_saves__+0x20>
    1b94:	ae 01       	movw	r20, r28
    1b96:	4b 5f       	subi	r20, 0xFB	; 251
    1b98:	5f 4f       	sbci	r21, 0xFF	; 255
    1b9a:	fa 01       	movw	r30, r20
    1b9c:	61 91       	ld	r22, Z+
    1b9e:	71 91       	ld	r23, Z+
    1ba0:	af 01       	movw	r20, r30
    1ba2:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <__iob+0x2>
    1ba6:	90 91 e7 01 	lds	r25, 0x01E7	; 0x8001e7 <__iob+0x3>
    1baa:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <vfprintf>
    1bae:	e2 e0       	ldi	r30, 0x02	; 2
    1bb0:	0c 94 23 11 	jmp	0x2246	; 0x2246 <__epilogue_restores__+0x20>

00001bb4 <putchar>:
    1bb4:	60 91 e6 01 	lds	r22, 0x01E6	; 0x8001e6 <__iob+0x2>
    1bb8:	70 91 e7 01 	lds	r23, 0x01E7	; 0x8001e7 <__iob+0x3>
    1bbc:	0e 94 2b 10 	call	0x2056	; 0x2056 <fputc>
    1bc0:	08 95       	ret

00001bc2 <puts>:
    1bc2:	0f 93       	push	r16
    1bc4:	1f 93       	push	r17
    1bc6:	cf 93       	push	r28
    1bc8:	df 93       	push	r29
    1bca:	e0 91 e6 01 	lds	r30, 0x01E6	; 0x8001e6 <__iob+0x2>
    1bce:	f0 91 e7 01 	lds	r31, 0x01E7	; 0x8001e7 <__iob+0x3>
    1bd2:	23 81       	ldd	r18, Z+3	; 0x03
    1bd4:	21 ff       	sbrs	r18, 1
    1bd6:	1b c0       	rjmp	.+54     	; 0x1c0e <puts+0x4c>
    1bd8:	8c 01       	movw	r16, r24
    1bda:	d0 e0       	ldi	r29, 0x00	; 0
    1bdc:	c0 e0       	ldi	r28, 0x00	; 0
    1bde:	f8 01       	movw	r30, r16
    1be0:	81 91       	ld	r24, Z+
    1be2:	8f 01       	movw	r16, r30
    1be4:	60 91 e6 01 	lds	r22, 0x01E6	; 0x8001e6 <__iob+0x2>
    1be8:	70 91 e7 01 	lds	r23, 0x01E7	; 0x8001e7 <__iob+0x3>
    1bec:	db 01       	movw	r26, r22
    1bee:	18 96       	adiw	r26, 0x08	; 8
    1bf0:	ed 91       	ld	r30, X+
    1bf2:	fc 91       	ld	r31, X
    1bf4:	19 97       	sbiw	r26, 0x09	; 9
    1bf6:	88 23       	and	r24, r24
    1bf8:	31 f0       	breq	.+12     	; 0x1c06 <puts+0x44>
    1bfa:	09 95       	icall
    1bfc:	89 2b       	or	r24, r25
    1bfe:	79 f3       	breq	.-34     	; 0x1bde <puts+0x1c>
    1c00:	df ef       	ldi	r29, 0xFF	; 255
    1c02:	cf ef       	ldi	r28, 0xFF	; 255
    1c04:	ec cf       	rjmp	.-40     	; 0x1bde <puts+0x1c>
    1c06:	8a e0       	ldi	r24, 0x0A	; 10
    1c08:	09 95       	icall
    1c0a:	89 2b       	or	r24, r25
    1c0c:	19 f0       	breq	.+6      	; 0x1c14 <puts+0x52>
    1c0e:	8f ef       	ldi	r24, 0xFF	; 255
    1c10:	9f ef       	ldi	r25, 0xFF	; 255
    1c12:	02 c0       	rjmp	.+4      	; 0x1c18 <puts+0x56>
    1c14:	8d 2f       	mov	r24, r29
    1c16:	9c 2f       	mov	r25, r28
    1c18:	df 91       	pop	r29
    1c1a:	cf 91       	pop	r28
    1c1c:	1f 91       	pop	r17
    1c1e:	0f 91       	pop	r16
    1c20:	08 95       	ret

00001c22 <vfprintf>:
    1c22:	ab e0       	ldi	r26, 0x0B	; 11
    1c24:	b0 e0       	ldi	r27, 0x00	; 0
    1c26:	e7 e1       	ldi	r30, 0x17	; 23
    1c28:	fe e0       	ldi	r31, 0x0E	; 14
    1c2a:	0c 94 f7 10 	jmp	0x21ee	; 0x21ee <__prologue_saves__>
    1c2e:	6c 01       	movw	r12, r24
    1c30:	7b 01       	movw	r14, r22
    1c32:	8a 01       	movw	r16, r20
    1c34:	fc 01       	movw	r30, r24
    1c36:	17 82       	std	Z+7, r1	; 0x07
    1c38:	16 82       	std	Z+6, r1	; 0x06
    1c3a:	83 81       	ldd	r24, Z+3	; 0x03
    1c3c:	81 ff       	sbrs	r24, 1
    1c3e:	cc c1       	rjmp	.+920    	; 0x1fd8 <vfprintf+0x3b6>
    1c40:	ce 01       	movw	r24, r28
    1c42:	01 96       	adiw	r24, 0x01	; 1
    1c44:	3c 01       	movw	r6, r24
    1c46:	f6 01       	movw	r30, r12
    1c48:	93 81       	ldd	r25, Z+3	; 0x03
    1c4a:	f7 01       	movw	r30, r14
    1c4c:	93 fd       	sbrc	r25, 3
    1c4e:	85 91       	lpm	r24, Z+
    1c50:	93 ff       	sbrs	r25, 3
    1c52:	81 91       	ld	r24, Z+
    1c54:	7f 01       	movw	r14, r30
    1c56:	88 23       	and	r24, r24
    1c58:	09 f4       	brne	.+2      	; 0x1c5c <vfprintf+0x3a>
    1c5a:	ba c1       	rjmp	.+884    	; 0x1fd0 <vfprintf+0x3ae>
    1c5c:	85 32       	cpi	r24, 0x25	; 37
    1c5e:	39 f4       	brne	.+14     	; 0x1c6e <vfprintf+0x4c>
    1c60:	93 fd       	sbrc	r25, 3
    1c62:	85 91       	lpm	r24, Z+
    1c64:	93 ff       	sbrs	r25, 3
    1c66:	81 91       	ld	r24, Z+
    1c68:	7f 01       	movw	r14, r30
    1c6a:	85 32       	cpi	r24, 0x25	; 37
    1c6c:	29 f4       	brne	.+10     	; 0x1c78 <vfprintf+0x56>
    1c6e:	b6 01       	movw	r22, r12
    1c70:	90 e0       	ldi	r25, 0x00	; 0
    1c72:	0e 94 2b 10 	call	0x2056	; 0x2056 <fputc>
    1c76:	e7 cf       	rjmp	.-50     	; 0x1c46 <vfprintf+0x24>
    1c78:	91 2c       	mov	r9, r1
    1c7a:	21 2c       	mov	r2, r1
    1c7c:	31 2c       	mov	r3, r1
    1c7e:	ff e1       	ldi	r31, 0x1F	; 31
    1c80:	f3 15       	cp	r31, r3
    1c82:	d8 f0       	brcs	.+54     	; 0x1cba <vfprintf+0x98>
    1c84:	8b 32       	cpi	r24, 0x2B	; 43
    1c86:	79 f0       	breq	.+30     	; 0x1ca6 <vfprintf+0x84>
    1c88:	38 f4       	brcc	.+14     	; 0x1c98 <vfprintf+0x76>
    1c8a:	80 32       	cpi	r24, 0x20	; 32
    1c8c:	79 f0       	breq	.+30     	; 0x1cac <vfprintf+0x8a>
    1c8e:	83 32       	cpi	r24, 0x23	; 35
    1c90:	a1 f4       	brne	.+40     	; 0x1cba <vfprintf+0x98>
    1c92:	23 2d       	mov	r18, r3
    1c94:	20 61       	ori	r18, 0x10	; 16
    1c96:	1d c0       	rjmp	.+58     	; 0x1cd2 <vfprintf+0xb0>
    1c98:	8d 32       	cpi	r24, 0x2D	; 45
    1c9a:	61 f0       	breq	.+24     	; 0x1cb4 <vfprintf+0x92>
    1c9c:	80 33       	cpi	r24, 0x30	; 48
    1c9e:	69 f4       	brne	.+26     	; 0x1cba <vfprintf+0x98>
    1ca0:	23 2d       	mov	r18, r3
    1ca2:	21 60       	ori	r18, 0x01	; 1
    1ca4:	16 c0       	rjmp	.+44     	; 0x1cd2 <vfprintf+0xb0>
    1ca6:	83 2d       	mov	r24, r3
    1ca8:	82 60       	ori	r24, 0x02	; 2
    1caa:	38 2e       	mov	r3, r24
    1cac:	e3 2d       	mov	r30, r3
    1cae:	e4 60       	ori	r30, 0x04	; 4
    1cb0:	3e 2e       	mov	r3, r30
    1cb2:	2a c0       	rjmp	.+84     	; 0x1d08 <vfprintf+0xe6>
    1cb4:	f3 2d       	mov	r31, r3
    1cb6:	f8 60       	ori	r31, 0x08	; 8
    1cb8:	1d c0       	rjmp	.+58     	; 0x1cf4 <vfprintf+0xd2>
    1cba:	37 fc       	sbrc	r3, 7
    1cbc:	2d c0       	rjmp	.+90     	; 0x1d18 <vfprintf+0xf6>
    1cbe:	20 ed       	ldi	r18, 0xD0	; 208
    1cc0:	28 0f       	add	r18, r24
    1cc2:	2a 30       	cpi	r18, 0x0A	; 10
    1cc4:	40 f0       	brcs	.+16     	; 0x1cd6 <vfprintf+0xb4>
    1cc6:	8e 32       	cpi	r24, 0x2E	; 46
    1cc8:	b9 f4       	brne	.+46     	; 0x1cf8 <vfprintf+0xd6>
    1cca:	36 fc       	sbrc	r3, 6
    1ccc:	81 c1       	rjmp	.+770    	; 0x1fd0 <vfprintf+0x3ae>
    1cce:	23 2d       	mov	r18, r3
    1cd0:	20 64       	ori	r18, 0x40	; 64
    1cd2:	32 2e       	mov	r3, r18
    1cd4:	19 c0       	rjmp	.+50     	; 0x1d08 <vfprintf+0xe6>
    1cd6:	36 fe       	sbrs	r3, 6
    1cd8:	06 c0       	rjmp	.+12     	; 0x1ce6 <vfprintf+0xc4>
    1cda:	8a e0       	ldi	r24, 0x0A	; 10
    1cdc:	98 9e       	mul	r9, r24
    1cde:	20 0d       	add	r18, r0
    1ce0:	11 24       	eor	r1, r1
    1ce2:	92 2e       	mov	r9, r18
    1ce4:	11 c0       	rjmp	.+34     	; 0x1d08 <vfprintf+0xe6>
    1ce6:	ea e0       	ldi	r30, 0x0A	; 10
    1ce8:	2e 9e       	mul	r2, r30
    1cea:	20 0d       	add	r18, r0
    1cec:	11 24       	eor	r1, r1
    1cee:	22 2e       	mov	r2, r18
    1cf0:	f3 2d       	mov	r31, r3
    1cf2:	f0 62       	ori	r31, 0x20	; 32
    1cf4:	3f 2e       	mov	r3, r31
    1cf6:	08 c0       	rjmp	.+16     	; 0x1d08 <vfprintf+0xe6>
    1cf8:	8c 36       	cpi	r24, 0x6C	; 108
    1cfa:	21 f4       	brne	.+8      	; 0x1d04 <vfprintf+0xe2>
    1cfc:	83 2d       	mov	r24, r3
    1cfe:	80 68       	ori	r24, 0x80	; 128
    1d00:	38 2e       	mov	r3, r24
    1d02:	02 c0       	rjmp	.+4      	; 0x1d08 <vfprintf+0xe6>
    1d04:	88 36       	cpi	r24, 0x68	; 104
    1d06:	41 f4       	brne	.+16     	; 0x1d18 <vfprintf+0xf6>
    1d08:	f7 01       	movw	r30, r14
    1d0a:	93 fd       	sbrc	r25, 3
    1d0c:	85 91       	lpm	r24, Z+
    1d0e:	93 ff       	sbrs	r25, 3
    1d10:	81 91       	ld	r24, Z+
    1d12:	7f 01       	movw	r14, r30
    1d14:	81 11       	cpse	r24, r1
    1d16:	b3 cf       	rjmp	.-154    	; 0x1c7e <vfprintf+0x5c>
    1d18:	98 2f       	mov	r25, r24
    1d1a:	9f 7d       	andi	r25, 0xDF	; 223
    1d1c:	95 54       	subi	r25, 0x45	; 69
    1d1e:	93 30       	cpi	r25, 0x03	; 3
    1d20:	28 f4       	brcc	.+10     	; 0x1d2c <vfprintf+0x10a>
    1d22:	0c 5f       	subi	r16, 0xFC	; 252
    1d24:	1f 4f       	sbci	r17, 0xFF	; 255
    1d26:	9f e3       	ldi	r25, 0x3F	; 63
    1d28:	99 83       	std	Y+1, r25	; 0x01
    1d2a:	0d c0       	rjmp	.+26     	; 0x1d46 <vfprintf+0x124>
    1d2c:	83 36       	cpi	r24, 0x63	; 99
    1d2e:	31 f0       	breq	.+12     	; 0x1d3c <vfprintf+0x11a>
    1d30:	83 37       	cpi	r24, 0x73	; 115
    1d32:	71 f0       	breq	.+28     	; 0x1d50 <vfprintf+0x12e>
    1d34:	83 35       	cpi	r24, 0x53	; 83
    1d36:	09 f0       	breq	.+2      	; 0x1d3a <vfprintf+0x118>
    1d38:	59 c0       	rjmp	.+178    	; 0x1dec <vfprintf+0x1ca>
    1d3a:	21 c0       	rjmp	.+66     	; 0x1d7e <vfprintf+0x15c>
    1d3c:	f8 01       	movw	r30, r16
    1d3e:	80 81       	ld	r24, Z
    1d40:	89 83       	std	Y+1, r24	; 0x01
    1d42:	0e 5f       	subi	r16, 0xFE	; 254
    1d44:	1f 4f       	sbci	r17, 0xFF	; 255
    1d46:	88 24       	eor	r8, r8
    1d48:	83 94       	inc	r8
    1d4a:	91 2c       	mov	r9, r1
    1d4c:	53 01       	movw	r10, r6
    1d4e:	13 c0       	rjmp	.+38     	; 0x1d76 <vfprintf+0x154>
    1d50:	28 01       	movw	r4, r16
    1d52:	f2 e0       	ldi	r31, 0x02	; 2
    1d54:	4f 0e       	add	r4, r31
    1d56:	51 1c       	adc	r5, r1
    1d58:	f8 01       	movw	r30, r16
    1d5a:	a0 80       	ld	r10, Z
    1d5c:	b1 80       	ldd	r11, Z+1	; 0x01
    1d5e:	36 fe       	sbrs	r3, 6
    1d60:	03 c0       	rjmp	.+6      	; 0x1d68 <vfprintf+0x146>
    1d62:	69 2d       	mov	r22, r9
    1d64:	70 e0       	ldi	r23, 0x00	; 0
    1d66:	02 c0       	rjmp	.+4      	; 0x1d6c <vfprintf+0x14a>
    1d68:	6f ef       	ldi	r22, 0xFF	; 255
    1d6a:	7f ef       	ldi	r23, 0xFF	; 255
    1d6c:	c5 01       	movw	r24, r10
    1d6e:	0e 94 20 10 	call	0x2040	; 0x2040 <strnlen>
    1d72:	4c 01       	movw	r8, r24
    1d74:	82 01       	movw	r16, r4
    1d76:	f3 2d       	mov	r31, r3
    1d78:	ff 77       	andi	r31, 0x7F	; 127
    1d7a:	3f 2e       	mov	r3, r31
    1d7c:	16 c0       	rjmp	.+44     	; 0x1daa <vfprintf+0x188>
    1d7e:	28 01       	movw	r4, r16
    1d80:	22 e0       	ldi	r18, 0x02	; 2
    1d82:	42 0e       	add	r4, r18
    1d84:	51 1c       	adc	r5, r1
    1d86:	f8 01       	movw	r30, r16
    1d88:	a0 80       	ld	r10, Z
    1d8a:	b1 80       	ldd	r11, Z+1	; 0x01
    1d8c:	36 fe       	sbrs	r3, 6
    1d8e:	03 c0       	rjmp	.+6      	; 0x1d96 <vfprintf+0x174>
    1d90:	69 2d       	mov	r22, r9
    1d92:	70 e0       	ldi	r23, 0x00	; 0
    1d94:	02 c0       	rjmp	.+4      	; 0x1d9a <vfprintf+0x178>
    1d96:	6f ef       	ldi	r22, 0xFF	; 255
    1d98:	7f ef       	ldi	r23, 0xFF	; 255
    1d9a:	c5 01       	movw	r24, r10
    1d9c:	0e 94 0e 10 	call	0x201c	; 0x201c <strnlen_P>
    1da0:	4c 01       	movw	r8, r24
    1da2:	f3 2d       	mov	r31, r3
    1da4:	f0 68       	ori	r31, 0x80	; 128
    1da6:	3f 2e       	mov	r3, r31
    1da8:	82 01       	movw	r16, r4
    1daa:	33 fc       	sbrc	r3, 3
    1dac:	1b c0       	rjmp	.+54     	; 0x1de4 <vfprintf+0x1c2>
    1dae:	82 2d       	mov	r24, r2
    1db0:	90 e0       	ldi	r25, 0x00	; 0
    1db2:	88 16       	cp	r8, r24
    1db4:	99 06       	cpc	r9, r25
    1db6:	b0 f4       	brcc	.+44     	; 0x1de4 <vfprintf+0x1c2>
    1db8:	b6 01       	movw	r22, r12
    1dba:	80 e2       	ldi	r24, 0x20	; 32
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	0e 94 2b 10 	call	0x2056	; 0x2056 <fputc>
    1dc2:	2a 94       	dec	r2
    1dc4:	f4 cf       	rjmp	.-24     	; 0x1dae <vfprintf+0x18c>
    1dc6:	f5 01       	movw	r30, r10
    1dc8:	37 fc       	sbrc	r3, 7
    1dca:	85 91       	lpm	r24, Z+
    1dcc:	37 fe       	sbrs	r3, 7
    1dce:	81 91       	ld	r24, Z+
    1dd0:	5f 01       	movw	r10, r30
    1dd2:	b6 01       	movw	r22, r12
    1dd4:	90 e0       	ldi	r25, 0x00	; 0
    1dd6:	0e 94 2b 10 	call	0x2056	; 0x2056 <fputc>
    1dda:	21 10       	cpse	r2, r1
    1ddc:	2a 94       	dec	r2
    1dde:	21 e0       	ldi	r18, 0x01	; 1
    1de0:	82 1a       	sub	r8, r18
    1de2:	91 08       	sbc	r9, r1
    1de4:	81 14       	cp	r8, r1
    1de6:	91 04       	cpc	r9, r1
    1de8:	71 f7       	brne	.-36     	; 0x1dc6 <vfprintf+0x1a4>
    1dea:	e8 c0       	rjmp	.+464    	; 0x1fbc <vfprintf+0x39a>
    1dec:	84 36       	cpi	r24, 0x64	; 100
    1dee:	11 f0       	breq	.+4      	; 0x1df4 <vfprintf+0x1d2>
    1df0:	89 36       	cpi	r24, 0x69	; 105
    1df2:	41 f5       	brne	.+80     	; 0x1e44 <vfprintf+0x222>
    1df4:	f8 01       	movw	r30, r16
    1df6:	37 fe       	sbrs	r3, 7
    1df8:	07 c0       	rjmp	.+14     	; 0x1e08 <vfprintf+0x1e6>
    1dfa:	60 81       	ld	r22, Z
    1dfc:	71 81       	ldd	r23, Z+1	; 0x01
    1dfe:	82 81       	ldd	r24, Z+2	; 0x02
    1e00:	93 81       	ldd	r25, Z+3	; 0x03
    1e02:	0c 5f       	subi	r16, 0xFC	; 252
    1e04:	1f 4f       	sbci	r17, 0xFF	; 255
    1e06:	08 c0       	rjmp	.+16     	; 0x1e18 <vfprintf+0x1f6>
    1e08:	60 81       	ld	r22, Z
    1e0a:	71 81       	ldd	r23, Z+1	; 0x01
    1e0c:	07 2e       	mov	r0, r23
    1e0e:	00 0c       	add	r0, r0
    1e10:	88 0b       	sbc	r24, r24
    1e12:	99 0b       	sbc	r25, r25
    1e14:	0e 5f       	subi	r16, 0xFE	; 254
    1e16:	1f 4f       	sbci	r17, 0xFF	; 255
    1e18:	f3 2d       	mov	r31, r3
    1e1a:	ff 76       	andi	r31, 0x6F	; 111
    1e1c:	3f 2e       	mov	r3, r31
    1e1e:	97 ff       	sbrs	r25, 7
    1e20:	09 c0       	rjmp	.+18     	; 0x1e34 <vfprintf+0x212>
    1e22:	90 95       	com	r25
    1e24:	80 95       	com	r24
    1e26:	70 95       	com	r23
    1e28:	61 95       	neg	r22
    1e2a:	7f 4f       	sbci	r23, 0xFF	; 255
    1e2c:	8f 4f       	sbci	r24, 0xFF	; 255
    1e2e:	9f 4f       	sbci	r25, 0xFF	; 255
    1e30:	f0 68       	ori	r31, 0x80	; 128
    1e32:	3f 2e       	mov	r3, r31
    1e34:	2a e0       	ldi	r18, 0x0A	; 10
    1e36:	30 e0       	ldi	r19, 0x00	; 0
    1e38:	a3 01       	movw	r20, r6
    1e3a:	0e 94 67 10 	call	0x20ce	; 0x20ce <__ultoa_invert>
    1e3e:	88 2e       	mov	r8, r24
    1e40:	86 18       	sub	r8, r6
    1e42:	45 c0       	rjmp	.+138    	; 0x1ece <vfprintf+0x2ac>
    1e44:	85 37       	cpi	r24, 0x75	; 117
    1e46:	31 f4       	brne	.+12     	; 0x1e54 <vfprintf+0x232>
    1e48:	23 2d       	mov	r18, r3
    1e4a:	2f 7e       	andi	r18, 0xEF	; 239
    1e4c:	b2 2e       	mov	r11, r18
    1e4e:	2a e0       	ldi	r18, 0x0A	; 10
    1e50:	30 e0       	ldi	r19, 0x00	; 0
    1e52:	25 c0       	rjmp	.+74     	; 0x1e9e <vfprintf+0x27c>
    1e54:	93 2d       	mov	r25, r3
    1e56:	99 7f       	andi	r25, 0xF9	; 249
    1e58:	b9 2e       	mov	r11, r25
    1e5a:	8f 36       	cpi	r24, 0x6F	; 111
    1e5c:	c1 f0       	breq	.+48     	; 0x1e8e <vfprintf+0x26c>
    1e5e:	18 f4       	brcc	.+6      	; 0x1e66 <vfprintf+0x244>
    1e60:	88 35       	cpi	r24, 0x58	; 88
    1e62:	79 f0       	breq	.+30     	; 0x1e82 <vfprintf+0x260>
    1e64:	b5 c0       	rjmp	.+362    	; 0x1fd0 <vfprintf+0x3ae>
    1e66:	80 37       	cpi	r24, 0x70	; 112
    1e68:	19 f0       	breq	.+6      	; 0x1e70 <vfprintf+0x24e>
    1e6a:	88 37       	cpi	r24, 0x78	; 120
    1e6c:	21 f0       	breq	.+8      	; 0x1e76 <vfprintf+0x254>
    1e6e:	b0 c0       	rjmp	.+352    	; 0x1fd0 <vfprintf+0x3ae>
    1e70:	e9 2f       	mov	r30, r25
    1e72:	e0 61       	ori	r30, 0x10	; 16
    1e74:	be 2e       	mov	r11, r30
    1e76:	b4 fe       	sbrs	r11, 4
    1e78:	0d c0       	rjmp	.+26     	; 0x1e94 <vfprintf+0x272>
    1e7a:	fb 2d       	mov	r31, r11
    1e7c:	f4 60       	ori	r31, 0x04	; 4
    1e7e:	bf 2e       	mov	r11, r31
    1e80:	09 c0       	rjmp	.+18     	; 0x1e94 <vfprintf+0x272>
    1e82:	34 fe       	sbrs	r3, 4
    1e84:	0a c0       	rjmp	.+20     	; 0x1e9a <vfprintf+0x278>
    1e86:	29 2f       	mov	r18, r25
    1e88:	26 60       	ori	r18, 0x06	; 6
    1e8a:	b2 2e       	mov	r11, r18
    1e8c:	06 c0       	rjmp	.+12     	; 0x1e9a <vfprintf+0x278>
    1e8e:	28 e0       	ldi	r18, 0x08	; 8
    1e90:	30 e0       	ldi	r19, 0x00	; 0
    1e92:	05 c0       	rjmp	.+10     	; 0x1e9e <vfprintf+0x27c>
    1e94:	20 e1       	ldi	r18, 0x10	; 16
    1e96:	30 e0       	ldi	r19, 0x00	; 0
    1e98:	02 c0       	rjmp	.+4      	; 0x1e9e <vfprintf+0x27c>
    1e9a:	20 e1       	ldi	r18, 0x10	; 16
    1e9c:	32 e0       	ldi	r19, 0x02	; 2
    1e9e:	f8 01       	movw	r30, r16
    1ea0:	b7 fe       	sbrs	r11, 7
    1ea2:	07 c0       	rjmp	.+14     	; 0x1eb2 <vfprintf+0x290>
    1ea4:	60 81       	ld	r22, Z
    1ea6:	71 81       	ldd	r23, Z+1	; 0x01
    1ea8:	82 81       	ldd	r24, Z+2	; 0x02
    1eaa:	93 81       	ldd	r25, Z+3	; 0x03
    1eac:	0c 5f       	subi	r16, 0xFC	; 252
    1eae:	1f 4f       	sbci	r17, 0xFF	; 255
    1eb0:	06 c0       	rjmp	.+12     	; 0x1ebe <vfprintf+0x29c>
    1eb2:	60 81       	ld	r22, Z
    1eb4:	71 81       	ldd	r23, Z+1	; 0x01
    1eb6:	80 e0       	ldi	r24, 0x00	; 0
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	0e 5f       	subi	r16, 0xFE	; 254
    1ebc:	1f 4f       	sbci	r17, 0xFF	; 255
    1ebe:	a3 01       	movw	r20, r6
    1ec0:	0e 94 67 10 	call	0x20ce	; 0x20ce <__ultoa_invert>
    1ec4:	88 2e       	mov	r8, r24
    1ec6:	86 18       	sub	r8, r6
    1ec8:	fb 2d       	mov	r31, r11
    1eca:	ff 77       	andi	r31, 0x7F	; 127
    1ecc:	3f 2e       	mov	r3, r31
    1ece:	36 fe       	sbrs	r3, 6
    1ed0:	0d c0       	rjmp	.+26     	; 0x1eec <vfprintf+0x2ca>
    1ed2:	23 2d       	mov	r18, r3
    1ed4:	2e 7f       	andi	r18, 0xFE	; 254
    1ed6:	a2 2e       	mov	r10, r18
    1ed8:	89 14       	cp	r8, r9
    1eda:	58 f4       	brcc	.+22     	; 0x1ef2 <vfprintf+0x2d0>
    1edc:	34 fe       	sbrs	r3, 4
    1ede:	0b c0       	rjmp	.+22     	; 0x1ef6 <vfprintf+0x2d4>
    1ee0:	32 fc       	sbrc	r3, 2
    1ee2:	09 c0       	rjmp	.+18     	; 0x1ef6 <vfprintf+0x2d4>
    1ee4:	83 2d       	mov	r24, r3
    1ee6:	8e 7e       	andi	r24, 0xEE	; 238
    1ee8:	a8 2e       	mov	r10, r24
    1eea:	05 c0       	rjmp	.+10     	; 0x1ef6 <vfprintf+0x2d4>
    1eec:	b8 2c       	mov	r11, r8
    1eee:	a3 2c       	mov	r10, r3
    1ef0:	03 c0       	rjmp	.+6      	; 0x1ef8 <vfprintf+0x2d6>
    1ef2:	b8 2c       	mov	r11, r8
    1ef4:	01 c0       	rjmp	.+2      	; 0x1ef8 <vfprintf+0x2d6>
    1ef6:	b9 2c       	mov	r11, r9
    1ef8:	a4 fe       	sbrs	r10, 4
    1efa:	0f c0       	rjmp	.+30     	; 0x1f1a <vfprintf+0x2f8>
    1efc:	fe 01       	movw	r30, r28
    1efe:	e8 0d       	add	r30, r8
    1f00:	f1 1d       	adc	r31, r1
    1f02:	80 81       	ld	r24, Z
    1f04:	80 33       	cpi	r24, 0x30	; 48
    1f06:	21 f4       	brne	.+8      	; 0x1f10 <vfprintf+0x2ee>
    1f08:	9a 2d       	mov	r25, r10
    1f0a:	99 7e       	andi	r25, 0xE9	; 233
    1f0c:	a9 2e       	mov	r10, r25
    1f0e:	09 c0       	rjmp	.+18     	; 0x1f22 <vfprintf+0x300>
    1f10:	a2 fe       	sbrs	r10, 2
    1f12:	06 c0       	rjmp	.+12     	; 0x1f20 <vfprintf+0x2fe>
    1f14:	b3 94       	inc	r11
    1f16:	b3 94       	inc	r11
    1f18:	04 c0       	rjmp	.+8      	; 0x1f22 <vfprintf+0x300>
    1f1a:	8a 2d       	mov	r24, r10
    1f1c:	86 78       	andi	r24, 0x86	; 134
    1f1e:	09 f0       	breq	.+2      	; 0x1f22 <vfprintf+0x300>
    1f20:	b3 94       	inc	r11
    1f22:	a3 fc       	sbrc	r10, 3
    1f24:	11 c0       	rjmp	.+34     	; 0x1f48 <vfprintf+0x326>
    1f26:	a0 fe       	sbrs	r10, 0
    1f28:	06 c0       	rjmp	.+12     	; 0x1f36 <vfprintf+0x314>
    1f2a:	b2 14       	cp	r11, r2
    1f2c:	88 f4       	brcc	.+34     	; 0x1f50 <vfprintf+0x32e>
    1f2e:	28 0c       	add	r2, r8
    1f30:	92 2c       	mov	r9, r2
    1f32:	9b 18       	sub	r9, r11
    1f34:	0e c0       	rjmp	.+28     	; 0x1f52 <vfprintf+0x330>
    1f36:	b2 14       	cp	r11, r2
    1f38:	60 f4       	brcc	.+24     	; 0x1f52 <vfprintf+0x330>
    1f3a:	b6 01       	movw	r22, r12
    1f3c:	80 e2       	ldi	r24, 0x20	; 32
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	0e 94 2b 10 	call	0x2056	; 0x2056 <fputc>
    1f44:	b3 94       	inc	r11
    1f46:	f7 cf       	rjmp	.-18     	; 0x1f36 <vfprintf+0x314>
    1f48:	b2 14       	cp	r11, r2
    1f4a:	18 f4       	brcc	.+6      	; 0x1f52 <vfprintf+0x330>
    1f4c:	2b 18       	sub	r2, r11
    1f4e:	02 c0       	rjmp	.+4      	; 0x1f54 <vfprintf+0x332>
    1f50:	98 2c       	mov	r9, r8
    1f52:	21 2c       	mov	r2, r1
    1f54:	a4 fe       	sbrs	r10, 4
    1f56:	10 c0       	rjmp	.+32     	; 0x1f78 <vfprintf+0x356>
    1f58:	b6 01       	movw	r22, r12
    1f5a:	80 e3       	ldi	r24, 0x30	; 48
    1f5c:	90 e0       	ldi	r25, 0x00	; 0
    1f5e:	0e 94 2b 10 	call	0x2056	; 0x2056 <fputc>
    1f62:	a2 fe       	sbrs	r10, 2
    1f64:	17 c0       	rjmp	.+46     	; 0x1f94 <vfprintf+0x372>
    1f66:	a1 fc       	sbrc	r10, 1
    1f68:	03 c0       	rjmp	.+6      	; 0x1f70 <vfprintf+0x34e>
    1f6a:	88 e7       	ldi	r24, 0x78	; 120
    1f6c:	90 e0       	ldi	r25, 0x00	; 0
    1f6e:	02 c0       	rjmp	.+4      	; 0x1f74 <vfprintf+0x352>
    1f70:	88 e5       	ldi	r24, 0x58	; 88
    1f72:	90 e0       	ldi	r25, 0x00	; 0
    1f74:	b6 01       	movw	r22, r12
    1f76:	0c c0       	rjmp	.+24     	; 0x1f90 <vfprintf+0x36e>
    1f78:	8a 2d       	mov	r24, r10
    1f7a:	86 78       	andi	r24, 0x86	; 134
    1f7c:	59 f0       	breq	.+22     	; 0x1f94 <vfprintf+0x372>
    1f7e:	a1 fe       	sbrs	r10, 1
    1f80:	02 c0       	rjmp	.+4      	; 0x1f86 <vfprintf+0x364>
    1f82:	8b e2       	ldi	r24, 0x2B	; 43
    1f84:	01 c0       	rjmp	.+2      	; 0x1f88 <vfprintf+0x366>
    1f86:	80 e2       	ldi	r24, 0x20	; 32
    1f88:	a7 fc       	sbrc	r10, 7
    1f8a:	8d e2       	ldi	r24, 0x2D	; 45
    1f8c:	b6 01       	movw	r22, r12
    1f8e:	90 e0       	ldi	r25, 0x00	; 0
    1f90:	0e 94 2b 10 	call	0x2056	; 0x2056 <fputc>
    1f94:	89 14       	cp	r8, r9
    1f96:	38 f4       	brcc	.+14     	; 0x1fa6 <vfprintf+0x384>
    1f98:	b6 01       	movw	r22, r12
    1f9a:	80 e3       	ldi	r24, 0x30	; 48
    1f9c:	90 e0       	ldi	r25, 0x00	; 0
    1f9e:	0e 94 2b 10 	call	0x2056	; 0x2056 <fputc>
    1fa2:	9a 94       	dec	r9
    1fa4:	f7 cf       	rjmp	.-18     	; 0x1f94 <vfprintf+0x372>
    1fa6:	8a 94       	dec	r8
    1fa8:	f3 01       	movw	r30, r6
    1faa:	e8 0d       	add	r30, r8
    1fac:	f1 1d       	adc	r31, r1
    1fae:	80 81       	ld	r24, Z
    1fb0:	b6 01       	movw	r22, r12
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	0e 94 2b 10 	call	0x2056	; 0x2056 <fputc>
    1fb8:	81 10       	cpse	r8, r1
    1fba:	f5 cf       	rjmp	.-22     	; 0x1fa6 <vfprintf+0x384>
    1fbc:	22 20       	and	r2, r2
    1fbe:	09 f4       	brne	.+2      	; 0x1fc2 <vfprintf+0x3a0>
    1fc0:	42 ce       	rjmp	.-892    	; 0x1c46 <vfprintf+0x24>
    1fc2:	b6 01       	movw	r22, r12
    1fc4:	80 e2       	ldi	r24, 0x20	; 32
    1fc6:	90 e0       	ldi	r25, 0x00	; 0
    1fc8:	0e 94 2b 10 	call	0x2056	; 0x2056 <fputc>
    1fcc:	2a 94       	dec	r2
    1fce:	f6 cf       	rjmp	.-20     	; 0x1fbc <vfprintf+0x39a>
    1fd0:	f6 01       	movw	r30, r12
    1fd2:	86 81       	ldd	r24, Z+6	; 0x06
    1fd4:	97 81       	ldd	r25, Z+7	; 0x07
    1fd6:	02 c0       	rjmp	.+4      	; 0x1fdc <vfprintf+0x3ba>
    1fd8:	8f ef       	ldi	r24, 0xFF	; 255
    1fda:	9f ef       	ldi	r25, 0xFF	; 255
    1fdc:	2b 96       	adiw	r28, 0x0b	; 11
    1fde:	e2 e1       	ldi	r30, 0x12	; 18
    1fe0:	0c 94 13 11 	jmp	0x2226	; 0x2226 <__epilogue_restores__>

00001fe4 <calloc>:
    1fe4:	0f 93       	push	r16
    1fe6:	1f 93       	push	r17
    1fe8:	cf 93       	push	r28
    1fea:	df 93       	push	r29
    1fec:	86 9f       	mul	r24, r22
    1fee:	80 01       	movw	r16, r0
    1ff0:	87 9f       	mul	r24, r23
    1ff2:	10 0d       	add	r17, r0
    1ff4:	96 9f       	mul	r25, r22
    1ff6:	10 0d       	add	r17, r0
    1ff8:	11 24       	eor	r1, r1
    1ffa:	c8 01       	movw	r24, r16
    1ffc:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <malloc>
    2000:	ec 01       	movw	r28, r24
    2002:	00 97       	sbiw	r24, 0x00	; 0
    2004:	29 f0       	breq	.+10     	; 0x2010 <calloc+0x2c>
    2006:	a8 01       	movw	r20, r16
    2008:	60 e0       	ldi	r22, 0x00	; 0
    200a:	70 e0       	ldi	r23, 0x00	; 0
    200c:	0e 94 19 10 	call	0x2032	; 0x2032 <memset>
    2010:	ce 01       	movw	r24, r28
    2012:	df 91       	pop	r29
    2014:	cf 91       	pop	r28
    2016:	1f 91       	pop	r17
    2018:	0f 91       	pop	r16
    201a:	08 95       	ret

0000201c <strnlen_P>:
    201c:	fc 01       	movw	r30, r24
    201e:	05 90       	lpm	r0, Z+
    2020:	61 50       	subi	r22, 0x01	; 1
    2022:	70 40       	sbci	r23, 0x00	; 0
    2024:	01 10       	cpse	r0, r1
    2026:	d8 f7       	brcc	.-10     	; 0x201e <strnlen_P+0x2>
    2028:	80 95       	com	r24
    202a:	90 95       	com	r25
    202c:	8e 0f       	add	r24, r30
    202e:	9f 1f       	adc	r25, r31
    2030:	08 95       	ret

00002032 <memset>:
    2032:	dc 01       	movw	r26, r24
    2034:	01 c0       	rjmp	.+2      	; 0x2038 <memset+0x6>
    2036:	6d 93       	st	X+, r22
    2038:	41 50       	subi	r20, 0x01	; 1
    203a:	50 40       	sbci	r21, 0x00	; 0
    203c:	e0 f7       	brcc	.-8      	; 0x2036 <memset+0x4>
    203e:	08 95       	ret

00002040 <strnlen>:
    2040:	fc 01       	movw	r30, r24
    2042:	61 50       	subi	r22, 0x01	; 1
    2044:	70 40       	sbci	r23, 0x00	; 0
    2046:	01 90       	ld	r0, Z+
    2048:	01 10       	cpse	r0, r1
    204a:	d8 f7       	brcc	.-10     	; 0x2042 <strnlen+0x2>
    204c:	80 95       	com	r24
    204e:	90 95       	com	r25
    2050:	8e 0f       	add	r24, r30
    2052:	9f 1f       	adc	r25, r31
    2054:	08 95       	ret

00002056 <fputc>:
    2056:	0f 93       	push	r16
    2058:	1f 93       	push	r17
    205a:	cf 93       	push	r28
    205c:	df 93       	push	r29
    205e:	fb 01       	movw	r30, r22
    2060:	23 81       	ldd	r18, Z+3	; 0x03
    2062:	21 fd       	sbrc	r18, 1
    2064:	03 c0       	rjmp	.+6      	; 0x206c <fputc+0x16>
    2066:	8f ef       	ldi	r24, 0xFF	; 255
    2068:	9f ef       	ldi	r25, 0xFF	; 255
    206a:	2c c0       	rjmp	.+88     	; 0x20c4 <fputc+0x6e>
    206c:	22 ff       	sbrs	r18, 2
    206e:	16 c0       	rjmp	.+44     	; 0x209c <fputc+0x46>
    2070:	46 81       	ldd	r20, Z+6	; 0x06
    2072:	57 81       	ldd	r21, Z+7	; 0x07
    2074:	24 81       	ldd	r18, Z+4	; 0x04
    2076:	35 81       	ldd	r19, Z+5	; 0x05
    2078:	42 17       	cp	r20, r18
    207a:	53 07       	cpc	r21, r19
    207c:	44 f4       	brge	.+16     	; 0x208e <fputc+0x38>
    207e:	a0 81       	ld	r26, Z
    2080:	b1 81       	ldd	r27, Z+1	; 0x01
    2082:	9d 01       	movw	r18, r26
    2084:	2f 5f       	subi	r18, 0xFF	; 255
    2086:	3f 4f       	sbci	r19, 0xFF	; 255
    2088:	31 83       	std	Z+1, r19	; 0x01
    208a:	20 83       	st	Z, r18
    208c:	8c 93       	st	X, r24
    208e:	26 81       	ldd	r18, Z+6	; 0x06
    2090:	37 81       	ldd	r19, Z+7	; 0x07
    2092:	2f 5f       	subi	r18, 0xFF	; 255
    2094:	3f 4f       	sbci	r19, 0xFF	; 255
    2096:	37 83       	std	Z+7, r19	; 0x07
    2098:	26 83       	std	Z+6, r18	; 0x06
    209a:	14 c0       	rjmp	.+40     	; 0x20c4 <fputc+0x6e>
    209c:	8b 01       	movw	r16, r22
    209e:	ec 01       	movw	r28, r24
    20a0:	fb 01       	movw	r30, r22
    20a2:	00 84       	ldd	r0, Z+8	; 0x08
    20a4:	f1 85       	ldd	r31, Z+9	; 0x09
    20a6:	e0 2d       	mov	r30, r0
    20a8:	09 95       	icall
    20aa:	89 2b       	or	r24, r25
    20ac:	e1 f6       	brne	.-72     	; 0x2066 <fputc+0x10>
    20ae:	d8 01       	movw	r26, r16
    20b0:	16 96       	adiw	r26, 0x06	; 6
    20b2:	8d 91       	ld	r24, X+
    20b4:	9c 91       	ld	r25, X
    20b6:	17 97       	sbiw	r26, 0x07	; 7
    20b8:	01 96       	adiw	r24, 0x01	; 1
    20ba:	17 96       	adiw	r26, 0x07	; 7
    20bc:	9c 93       	st	X, r25
    20be:	8e 93       	st	-X, r24
    20c0:	16 97       	sbiw	r26, 0x06	; 6
    20c2:	ce 01       	movw	r24, r28
    20c4:	df 91       	pop	r29
    20c6:	cf 91       	pop	r28
    20c8:	1f 91       	pop	r17
    20ca:	0f 91       	pop	r16
    20cc:	08 95       	ret

000020ce <__ultoa_invert>:
    20ce:	fa 01       	movw	r30, r20
    20d0:	aa 27       	eor	r26, r26
    20d2:	28 30       	cpi	r18, 0x08	; 8
    20d4:	51 f1       	breq	.+84     	; 0x212a <__ultoa_invert+0x5c>
    20d6:	20 31       	cpi	r18, 0x10	; 16
    20d8:	81 f1       	breq	.+96     	; 0x213a <__ultoa_invert+0x6c>
    20da:	e8 94       	clt
    20dc:	6f 93       	push	r22
    20de:	6e 7f       	andi	r22, 0xFE	; 254
    20e0:	6e 5f       	subi	r22, 0xFE	; 254
    20e2:	7f 4f       	sbci	r23, 0xFF	; 255
    20e4:	8f 4f       	sbci	r24, 0xFF	; 255
    20e6:	9f 4f       	sbci	r25, 0xFF	; 255
    20e8:	af 4f       	sbci	r26, 0xFF	; 255
    20ea:	b1 e0       	ldi	r27, 0x01	; 1
    20ec:	3e d0       	rcall	.+124    	; 0x216a <__ultoa_invert+0x9c>
    20ee:	b4 e0       	ldi	r27, 0x04	; 4
    20f0:	3c d0       	rcall	.+120    	; 0x216a <__ultoa_invert+0x9c>
    20f2:	67 0f       	add	r22, r23
    20f4:	78 1f       	adc	r23, r24
    20f6:	89 1f       	adc	r24, r25
    20f8:	9a 1f       	adc	r25, r26
    20fa:	a1 1d       	adc	r26, r1
    20fc:	68 0f       	add	r22, r24
    20fe:	79 1f       	adc	r23, r25
    2100:	8a 1f       	adc	r24, r26
    2102:	91 1d       	adc	r25, r1
    2104:	a1 1d       	adc	r26, r1
    2106:	6a 0f       	add	r22, r26
    2108:	71 1d       	adc	r23, r1
    210a:	81 1d       	adc	r24, r1
    210c:	91 1d       	adc	r25, r1
    210e:	a1 1d       	adc	r26, r1
    2110:	20 d0       	rcall	.+64     	; 0x2152 <__ultoa_invert+0x84>
    2112:	09 f4       	brne	.+2      	; 0x2116 <__ultoa_invert+0x48>
    2114:	68 94       	set
    2116:	3f 91       	pop	r19
    2118:	2a e0       	ldi	r18, 0x0A	; 10
    211a:	26 9f       	mul	r18, r22
    211c:	11 24       	eor	r1, r1
    211e:	30 19       	sub	r19, r0
    2120:	30 5d       	subi	r19, 0xD0	; 208
    2122:	31 93       	st	Z+, r19
    2124:	de f6       	brtc	.-74     	; 0x20dc <__ultoa_invert+0xe>
    2126:	cf 01       	movw	r24, r30
    2128:	08 95       	ret
    212a:	46 2f       	mov	r20, r22
    212c:	47 70       	andi	r20, 0x07	; 7
    212e:	40 5d       	subi	r20, 0xD0	; 208
    2130:	41 93       	st	Z+, r20
    2132:	b3 e0       	ldi	r27, 0x03	; 3
    2134:	0f d0       	rcall	.+30     	; 0x2154 <__ultoa_invert+0x86>
    2136:	c9 f7       	brne	.-14     	; 0x212a <__ultoa_invert+0x5c>
    2138:	f6 cf       	rjmp	.-20     	; 0x2126 <__ultoa_invert+0x58>
    213a:	46 2f       	mov	r20, r22
    213c:	4f 70       	andi	r20, 0x0F	; 15
    213e:	40 5d       	subi	r20, 0xD0	; 208
    2140:	4a 33       	cpi	r20, 0x3A	; 58
    2142:	18 f0       	brcs	.+6      	; 0x214a <__ultoa_invert+0x7c>
    2144:	49 5d       	subi	r20, 0xD9	; 217
    2146:	31 fd       	sbrc	r19, 1
    2148:	40 52       	subi	r20, 0x20	; 32
    214a:	41 93       	st	Z+, r20
    214c:	02 d0       	rcall	.+4      	; 0x2152 <__ultoa_invert+0x84>
    214e:	a9 f7       	brne	.-22     	; 0x213a <__ultoa_invert+0x6c>
    2150:	ea cf       	rjmp	.-44     	; 0x2126 <__ultoa_invert+0x58>
    2152:	b4 e0       	ldi	r27, 0x04	; 4
    2154:	a6 95       	lsr	r26
    2156:	97 95       	ror	r25
    2158:	87 95       	ror	r24
    215a:	77 95       	ror	r23
    215c:	67 95       	ror	r22
    215e:	ba 95       	dec	r27
    2160:	c9 f7       	brne	.-14     	; 0x2154 <__ultoa_invert+0x86>
    2162:	00 97       	sbiw	r24, 0x00	; 0
    2164:	61 05       	cpc	r22, r1
    2166:	71 05       	cpc	r23, r1
    2168:	08 95       	ret
    216a:	9b 01       	movw	r18, r22
    216c:	ac 01       	movw	r20, r24
    216e:	0a 2e       	mov	r0, r26
    2170:	06 94       	lsr	r0
    2172:	57 95       	ror	r21
    2174:	47 95       	ror	r20
    2176:	37 95       	ror	r19
    2178:	27 95       	ror	r18
    217a:	ba 95       	dec	r27
    217c:	c9 f7       	brne	.-14     	; 0x2170 <__ultoa_invert+0xa2>
    217e:	62 0f       	add	r22, r18
    2180:	73 1f       	adc	r23, r19
    2182:	84 1f       	adc	r24, r20
    2184:	95 1f       	adc	r25, r21
    2186:	a0 1d       	adc	r26, r0
    2188:	08 95       	ret

0000218a <__divmodsi4>:
    218a:	05 2e       	mov	r0, r21
    218c:	97 fb       	bst	r25, 7
    218e:	1e f4       	brtc	.+6      	; 0x2196 <__divmodsi4+0xc>
    2190:	00 94       	com	r0
    2192:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <__negsi2>
    2196:	57 fd       	sbrc	r21, 7
    2198:	07 d0       	rcall	.+14     	; 0x21a8 <__divmodsi4_neg2>
    219a:	0e 94 2e 11 	call	0x225c	; 0x225c <__udivmodsi4>
    219e:	07 fc       	sbrc	r0, 7
    21a0:	03 d0       	rcall	.+6      	; 0x21a8 <__divmodsi4_neg2>
    21a2:	4e f4       	brtc	.+18     	; 0x21b6 <__divmodsi4_exit>
    21a4:	0c 94 dc 10 	jmp	0x21b8	; 0x21b8 <__negsi2>

000021a8 <__divmodsi4_neg2>:
    21a8:	50 95       	com	r21
    21aa:	40 95       	com	r20
    21ac:	30 95       	com	r19
    21ae:	21 95       	neg	r18
    21b0:	3f 4f       	sbci	r19, 0xFF	; 255
    21b2:	4f 4f       	sbci	r20, 0xFF	; 255
    21b4:	5f 4f       	sbci	r21, 0xFF	; 255

000021b6 <__divmodsi4_exit>:
    21b6:	08 95       	ret

000021b8 <__negsi2>:
    21b8:	90 95       	com	r25
    21ba:	80 95       	com	r24
    21bc:	70 95       	com	r23
    21be:	61 95       	neg	r22
    21c0:	7f 4f       	sbci	r23, 0xFF	; 255
    21c2:	8f 4f       	sbci	r24, 0xFF	; 255
    21c4:	9f 4f       	sbci	r25, 0xFF	; 255
    21c6:	08 95       	ret

000021c8 <__muluhisi3>:
    21c8:	0e 94 50 11 	call	0x22a0	; 0x22a0 <__umulhisi3>
    21cc:	a5 9f       	mul	r26, r21
    21ce:	90 0d       	add	r25, r0
    21d0:	b4 9f       	mul	r27, r20
    21d2:	90 0d       	add	r25, r0
    21d4:	a4 9f       	mul	r26, r20
    21d6:	80 0d       	add	r24, r0
    21d8:	91 1d       	adc	r25, r1
    21da:	11 24       	eor	r1, r1
    21dc:	08 95       	ret

000021de <__mulshisi3>:
    21de:	b7 ff       	sbrs	r27, 7
    21e0:	0c 94 e4 10 	jmp	0x21c8	; 0x21c8 <__muluhisi3>

000021e4 <__mulohisi3>:
    21e4:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <__muluhisi3>
    21e8:	82 1b       	sub	r24, r18
    21ea:	93 0b       	sbc	r25, r19
    21ec:	08 95       	ret

000021ee <__prologue_saves__>:
    21ee:	2f 92       	push	r2
    21f0:	3f 92       	push	r3
    21f2:	4f 92       	push	r4
    21f4:	5f 92       	push	r5
    21f6:	6f 92       	push	r6
    21f8:	7f 92       	push	r7
    21fa:	8f 92       	push	r8
    21fc:	9f 92       	push	r9
    21fe:	af 92       	push	r10
    2200:	bf 92       	push	r11
    2202:	cf 92       	push	r12
    2204:	df 92       	push	r13
    2206:	ef 92       	push	r14
    2208:	ff 92       	push	r15
    220a:	0f 93       	push	r16
    220c:	1f 93       	push	r17
    220e:	cf 93       	push	r28
    2210:	df 93       	push	r29
    2212:	cd b7       	in	r28, 0x3d	; 61
    2214:	de b7       	in	r29, 0x3e	; 62
    2216:	ca 1b       	sub	r28, r26
    2218:	db 0b       	sbc	r29, r27
    221a:	0f b6       	in	r0, 0x3f	; 63
    221c:	f8 94       	cli
    221e:	de bf       	out	0x3e, r29	; 62
    2220:	0f be       	out	0x3f, r0	; 63
    2222:	cd bf       	out	0x3d, r28	; 61
    2224:	09 94       	ijmp

00002226 <__epilogue_restores__>:
    2226:	2a 88       	ldd	r2, Y+18	; 0x12
    2228:	39 88       	ldd	r3, Y+17	; 0x11
    222a:	48 88       	ldd	r4, Y+16	; 0x10
    222c:	5f 84       	ldd	r5, Y+15	; 0x0f
    222e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2230:	7d 84       	ldd	r7, Y+13	; 0x0d
    2232:	8c 84       	ldd	r8, Y+12	; 0x0c
    2234:	9b 84       	ldd	r9, Y+11	; 0x0b
    2236:	aa 84       	ldd	r10, Y+10	; 0x0a
    2238:	b9 84       	ldd	r11, Y+9	; 0x09
    223a:	c8 84       	ldd	r12, Y+8	; 0x08
    223c:	df 80       	ldd	r13, Y+7	; 0x07
    223e:	ee 80       	ldd	r14, Y+6	; 0x06
    2240:	fd 80       	ldd	r15, Y+5	; 0x05
    2242:	0c 81       	ldd	r16, Y+4	; 0x04
    2244:	1b 81       	ldd	r17, Y+3	; 0x03
    2246:	aa 81       	ldd	r26, Y+2	; 0x02
    2248:	b9 81       	ldd	r27, Y+1	; 0x01
    224a:	ce 0f       	add	r28, r30
    224c:	d1 1d       	adc	r29, r1
    224e:	0f b6       	in	r0, 0x3f	; 63
    2250:	f8 94       	cli
    2252:	de bf       	out	0x3e, r29	; 62
    2254:	0f be       	out	0x3f, r0	; 63
    2256:	cd bf       	out	0x3d, r28	; 61
    2258:	ed 01       	movw	r28, r26
    225a:	08 95       	ret

0000225c <__udivmodsi4>:
    225c:	a1 e2       	ldi	r26, 0x21	; 33
    225e:	1a 2e       	mov	r1, r26
    2260:	aa 1b       	sub	r26, r26
    2262:	bb 1b       	sub	r27, r27
    2264:	fd 01       	movw	r30, r26
    2266:	0d c0       	rjmp	.+26     	; 0x2282 <__udivmodsi4_ep>

00002268 <__udivmodsi4_loop>:
    2268:	aa 1f       	adc	r26, r26
    226a:	bb 1f       	adc	r27, r27
    226c:	ee 1f       	adc	r30, r30
    226e:	ff 1f       	adc	r31, r31
    2270:	a2 17       	cp	r26, r18
    2272:	b3 07       	cpc	r27, r19
    2274:	e4 07       	cpc	r30, r20
    2276:	f5 07       	cpc	r31, r21
    2278:	20 f0       	brcs	.+8      	; 0x2282 <__udivmodsi4_ep>
    227a:	a2 1b       	sub	r26, r18
    227c:	b3 0b       	sbc	r27, r19
    227e:	e4 0b       	sbc	r30, r20
    2280:	f5 0b       	sbc	r31, r21

00002282 <__udivmodsi4_ep>:
    2282:	66 1f       	adc	r22, r22
    2284:	77 1f       	adc	r23, r23
    2286:	88 1f       	adc	r24, r24
    2288:	99 1f       	adc	r25, r25
    228a:	1a 94       	dec	r1
    228c:	69 f7       	brne	.-38     	; 0x2268 <__udivmodsi4_loop>
    228e:	60 95       	com	r22
    2290:	70 95       	com	r23
    2292:	80 95       	com	r24
    2294:	90 95       	com	r25
    2296:	9b 01       	movw	r18, r22
    2298:	ac 01       	movw	r20, r24
    229a:	bd 01       	movw	r22, r26
    229c:	cf 01       	movw	r24, r30
    229e:	08 95       	ret

000022a0 <__umulhisi3>:
    22a0:	a2 9f       	mul	r26, r18
    22a2:	b0 01       	movw	r22, r0
    22a4:	b3 9f       	mul	r27, r19
    22a6:	c0 01       	movw	r24, r0
    22a8:	a3 9f       	mul	r26, r19
    22aa:	70 0d       	add	r23, r0
    22ac:	81 1d       	adc	r24, r1
    22ae:	11 24       	eor	r1, r1
    22b0:	91 1d       	adc	r25, r1
    22b2:	b2 9f       	mul	r27, r18
    22b4:	70 0d       	add	r23, r0
    22b6:	81 1d       	adc	r24, r1
    22b8:	11 24       	eor	r1, r1
    22ba:	91 1d       	adc	r25, r1
    22bc:	08 95       	ret

000022be <_exit>:
    22be:	f8 94       	cli

000022c0 <__stop_program>:
    22c0:	ff cf       	rjmp	.-2      	; 0x22c0 <__stop_program>
