
ice_ice.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a2  00800100  00001a5a  00001aee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a5a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  008001a2  008001a2  00001b90  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001b90  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001bec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a8  00000000  00000000  00001c28  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000027c7  00000000  00000000  00001dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fa3  00000000  00000000  00004597  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fc7  00000000  00000000  0000553a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000430  00000000  00000000  00006504  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000088d  00000000  00000000  00006934  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000017bb  00000000  00000000  000071c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000280  00000000  00000000  0000897c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 60 03 	jmp	0x6c0	; 0x6c0 <__ctors_end>
       4:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
       8:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
       c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      10:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      14:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      18:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      1c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      20:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      24:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      28:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      2c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      30:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      34:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      38:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      3c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      40:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      44:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      48:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      4c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      50:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      54:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      58:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      5c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      60:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      64:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      68:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      6c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	00 00       	nop
      72:	00 00       	nop
      74:	00 5c       	subi	r16, 0xC0	; 192
      76:	00 00       	nop
      78:	0c 00       	.word	0x000c	; ????
      7a:	0c 00       	.word	0x000c	; ????
      7c:	7c 28       	or	r7, r12
      7e:	7c 28       	or	r7, r12
      80:	58 dc       	rcall	.-1872   	; 0xfffff932 <__eeprom_end+0xff7ef932>
      82:	68 00       	.word	0x0068	; ????
      84:	24 10       	cpse	r2, r4
      86:	48 00       	.word	0x0048	; ????
      88:	28 54       	subi	r18, 0x48	; 72
      8a:	28 40       	sbci	r18, 0x08	; 8
      8c:	00 0c       	add	r0, r0
      8e:	00 00       	nop
      90:	00 78       	andi	r16, 0x80	; 128
      92:	84 00       	.word	0x0084	; ????
      94:	84 78       	andi	r24, 0x84	; 132
      96:	00 00       	nop
      98:	54 38       	cpi	r21, 0x84	; 132
      9a:	54 00       	.word	0x0054	; ????
      9c:	10 7c       	andi	r17, 0xC0	; 192
      9e:	10 00       	.word	0x0010	; ????
      a0:	80 40       	sbci	r24, 0x00	; 0
      a2:	00 00       	nop
      a4:	10 10       	cpse	r1, r0
      a6:	10 00       	.word	0x0010	; ????
      a8:	00 40       	sbci	r16, 0x00	; 0
      aa:	00 00       	nop
      ac:	60 10       	cpse	r6, r0
      ae:	0c 00       	.word	0x000c	; ????
      b0:	38 54       	subi	r19, 0x48	; 72
      b2:	38 00       	.word	0x0038	; ????
      b4:	48 7c       	andi	r20, 0xC8	; 200
      b6:	40 00       	.word	0x0040	; ????
      b8:	48 64       	ori	r20, 0x48	; 72
      ba:	58 00       	.word	0x0058	; ????
      bc:	44 54       	subi	r20, 0x44	; 68
      be:	2c 00       	.word	0x002c	; ????
      c0:	1c 10       	cpse	r1, r12
      c2:	7c 00       	.word	0x007c	; ????
      c4:	5c 54       	subi	r21, 0x4C	; 76
      c6:	24 00       	.word	0x0024	; ????
      c8:	38 54       	subi	r19, 0x48	; 72
      ca:	24 00       	.word	0x0024	; ????
      cc:	64 14       	cp	r6, r4
      ce:	0c 00       	.word	0x000c	; ????
      d0:	68 54       	subi	r22, 0x48	; 72
      d2:	2c 00       	.word	0x002c	; ????
      d4:	48 54       	subi	r20, 0x48	; 72
      d6:	38 00       	.word	0x0038	; ????
      d8:	00 48       	sbci	r16, 0x80	; 128
      da:	00 00       	nop
      dc:	80 48       	sbci	r24, 0x80	; 128
      de:	00 00       	nop
      e0:	10 28       	or	r1, r0
      e2:	44 00       	.word	0x0044	; ????
      e4:	28 28       	or	r2, r8
      e6:	28 00       	.word	0x0028	; ????
      e8:	44 28       	or	r4, r4
      ea:	10 00       	.word	0x0010	; ????
      ec:	04 54       	subi	r16, 0x44	; 68
      ee:	08 00       	.word	0x0008	; ????
      f0:	38 44       	sbci	r19, 0x48	; 72
      f2:	5c 00       	.word	0x005c	; ????
      f4:	78 14       	cp	r7, r8
      f6:	78 00       	.word	0x0078	; ????
      f8:	7c 54       	subi	r23, 0x4C	; 76
      fa:	28 00       	.word	0x0028	; ????
      fc:	38 44       	sbci	r19, 0x48	; 72
      fe:	28 00       	.word	0x0028	; ????
     100:	7c 44       	sbci	r23, 0x4C	; 76
     102:	38 00       	.word	0x0038	; ????
     104:	7c 54       	subi	r23, 0x4C	; 76
     106:	44 00       	.word	0x0044	; ????
     108:	7c 14       	cp	r7, r12
     10a:	04 00       	.word	0x0004	; ????
     10c:	38 44       	sbci	r19, 0x48	; 72
     10e:	74 00       	.word	0x0074	; ????
     110:	7c 10       	cpse	r7, r12
     112:	7c 00       	.word	0x007c	; ????
     114:	44 7c       	andi	r20, 0xC4	; 196
     116:	44 00       	.word	0x0044	; ????
     118:	20 40       	sbci	r18, 0x00	; 0
     11a:	3c 00       	.word	0x003c	; ????
     11c:	7c 10       	cpse	r7, r12
     11e:	6c 00       	.word	0x006c	; ????
     120:	7c 40       	sbci	r23, 0x0C	; 12
     122:	40 00       	.word	0x0040	; ????
     124:	7c 18       	sub	r7, r12
     126:	7c 00       	.word	0x007c	; ????
     128:	78 10       	cpse	r7, r8
     12a:	3c 00       	.word	0x003c	; ????
     12c:	38 44       	sbci	r19, 0x48	; 72
     12e:	38 00       	.word	0x0038	; ????
     130:	7c 14       	cp	r7, r12
     132:	08 00       	.word	0x0008	; ????
     134:	38 44       	sbci	r19, 0x48	; 72
     136:	b8 00       	.word	0x00b8	; ????
     138:	7c 14       	cp	r7, r12
     13a:	68 00       	.word	0x0068	; ????
     13c:	48 54       	subi	r20, 0x48	; 72
     13e:	24 00       	.word	0x0024	; ????
     140:	04 7c       	andi	r16, 0xC4	; 196
     142:	04 00       	.word	0x0004	; ????
     144:	7c 40       	sbci	r23, 0x0C	; 12
     146:	7c 00       	.word	0x007c	; ????
     148:	3c 60       	ori	r19, 0x0C	; 12
     14a:	3c 00       	.word	0x003c	; ????
     14c:	7c 30       	cpi	r23, 0x0C	; 12
     14e:	7c 00       	.word	0x007c	; ????
     150:	6c 10       	cpse	r6, r12
     152:	6c 00       	.word	0x006c	; ????
     154:	0c 70       	andi	r16, 0x0C	; 12
     156:	0c 00       	.word	0x000c	; ????
     158:	64 54       	subi	r22, 0x44	; 68
     15a:	4c 00       	.word	0x004c	; ????
     15c:	00 7c       	andi	r16, 0xC0	; 192
     15e:	44 00       	.word	0x0044	; ????
     160:	0c 10       	cpse	r0, r12
     162:	60 00       	.word	0x0060	; ????
     164:	44 7c       	andi	r20, 0xC4	; 196
     166:	00 00       	nop
     168:	08 04       	cpc	r0, r8
     16a:	08 00       	.word	0x0008	; ????
     16c:	80 80       	ld	r8, Z
     16e:	80 00       	.word	0x0080	; ????
     170:	00 04       	cpc	r0, r0
     172:	08 00       	.word	0x0008	; ????
     174:	30 48       	sbci	r19, 0x80	; 128
     176:	78 00       	.word	0x0078	; ????
     178:	7c 48       	sbci	r23, 0x8C	; 140
     17a:	30 00       	.word	0x0030	; ????
     17c:	30 48       	sbci	r19, 0x80	; 128
     17e:	48 00       	.word	0x0048	; ????
     180:	30 48       	sbci	r19, 0x80	; 128
     182:	7c 00       	.word	0x007c	; ????
     184:	30 68       	ori	r19, 0x80	; 128
     186:	50 00       	.word	0x0050	; ????
     188:	10 78       	andi	r17, 0x80	; 128
     18a:	14 00       	.word	0x0014	; ????
     18c:	90 a8       	ldd	r9, Z+48	; 0x30
     18e:	78 00       	.word	0x0078	; ????
     190:	7c 08       	sbc	r7, r12
     192:	70 00       	.word	0x0070	; ????
     194:	50 74       	andi	r21, 0x40	; 64
     196:	40 00       	.word	0x0040	; ????
     198:	80 80       	ld	r8, Z
     19a:	74 00       	.word	0x0074	; ????
     19c:	7c 10       	cpse	r7, r12
     19e:	68 00       	.word	0x0068	; ????
     1a0:	44 7c       	andi	r20, 0xC4	; 196
     1a2:	40 00       	.word	0x0040	; ????
     1a4:	78 10       	cpse	r7, r8
     1a6:	78 00       	.word	0x0078	; ????
     1a8:	78 08       	sbc	r7, r8
     1aa:	70 00       	.word	0x0070	; ????
     1ac:	30 48       	sbci	r19, 0x80	; 128
     1ae:	30 00       	.word	0x0030	; ????
     1b0:	f8 28       	or	r15, r8
     1b2:	10 00       	.word	0x0010	; ????
     1b4:	30 48       	sbci	r19, 0x80	; 128
     1b6:	f8 00       	.word	0x00f8	; ????
     1b8:	78 10       	cpse	r7, r8
     1ba:	08 00       	.word	0x0008	; ????
     1bc:	50 58       	subi	r21, 0x80	; 128
     1be:	28 00       	.word	0x0028	; ????
     1c0:	08 3c       	cpi	r16, 0xC8	; 200
     1c2:	48 00       	.word	0x0048	; ????
     1c4:	38 40       	sbci	r19, 0x08	; 8
     1c6:	78 00       	.word	0x0078	; ????
     1c8:	38 40       	sbci	r19, 0x08	; 8
     1ca:	38 00       	.word	0x0038	; ????
     1cc:	78 20       	and	r7, r8
     1ce:	78 00       	.word	0x0078	; ????
     1d0:	48 30       	cpi	r20, 0x08	; 8
     1d2:	48 00       	.word	0x0048	; ????
     1d4:	98 a0       	ldd	r9, Y+32	; 0x20
     1d6:	78 00       	.word	0x0078	; ????
     1d8:	48 68       	ori	r20, 0x88	; 136
     1da:	58 00       	.word	0x0058	; ????
     1dc:	10 78       	andi	r17, 0x80	; 128
     1de:	84 00       	.word	0x0084	; ????
     1e0:	00 7c       	andi	r16, 0xC0	; 192
     1e2:	00 00       	nop
     1e4:	84 78       	andi	r24, 0x84	; 132
     1e6:	10 00       	.word	0x0010	; ????
     1e8:	08 04       	cpc	r0, r8
     1ea:	08 04       	cpc	r0, r8

000001ec <font5>:
     1ec:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     1fc:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     20c:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
     21c:	1c 00 08 2a 1c 2a 08 08 08 3e 08 08 00 50 30 00     ...*.*...>...P0.
     22c:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
     23c:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
     24c:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
     25c:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
     26c:	29 1e 00 36 36 00 00 00 56 36 00 00 00 08 14 22     )..66...V6....."
     27c:	41 14 14 14 14 14 41 22 14 08 00 02 01 51 09 06     A.....A".....Q..
     28c:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     29c:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     2ac:	09 01 01 3e 41 41 51 32 7f 08 08 08 7f 00 41 7f     ...>AAQ2......A.
     2bc:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     2cc:	40 7f 02 04 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     2dc:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     2ec:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     2fc:	40 20 1f 7f 20 18 20 7f 63 14 08 14 63 03 04 78     @ .. . .c...c..x
     30c:	04 03 61 51 49 45 43 00 00 7f 41 41 02 04 08 10     ..aQIEC...AA....
     31c:	20 41 41 7f 00 00 04 02 01 02 04 40 40 40 40 40      AA........@@@@@
     32c:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     33c:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     34c:	09 01 02 08 14 54 54 3c 7f 08 04 04 78 00 44 7d     .....TT<....x.D}
     35c:	40 00 20 40 44 3d 00 00 7f 10 28 44 00 41 7f 40     @. @D=....(D.A.@
     36c:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     37c:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     38c:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     39c:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     3ac:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     3bc:	00 00 41 36 08 00 02 01 03 02 01                    ..A6.......

000003c7 <font8>:
	...
     3cf:	00 06 5f 5f 06 00 00 00 00 07 07 00 07 07 00 00     ..__............
     3df:	14 7f 7f 14 7f 7f 14 00 24 2e 6b 6b 3a 12 00 00     ........$.kk:...
     3ef:	46 66 30 18 0c 66 62 00 30 7a 4f 5d 37 7a 48 00     Ff0..fb.0zO]7zH.
     3ff:	04 07 03 00 00 00 00 00 00 1c 3e 63 41 00 00 00     ..........>cA...
     40f:	00 41 63 3e 1c 00 00 00 08 2a 3e 1c 1c 3e 2a 08     .Ac>.....*>..>*.
     41f:	08 08 3e 3e 08 08 00 00 00 a0 e0 60 00 00 00 00     ..>>.......`....
     42f:	08 08 08 08 08 08 00 00 00 00 60 60 00 00 00 00     ..........``....
     43f:	60 30 18 0c 06 03 01 00 3e 7f 59 4d 7f 3e 00 00     `0......>.YM.>..
     44f:	42 42 7f 7f 40 40 00 00 62 73 59 49 6f 66 00 00     BB..@@..bsYIof..
     45f:	22 63 49 49 7f 36 00 00 18 1c 16 13 7f 7f 10 00     "cII.6..........
     46f:	27 67 45 45 7d 39 00 00 3c 7e 4b 49 79 30 00 00     'gEE}9..<~KIy0..
     47f:	03 63 71 19 0f 07 00 00 36 7f 49 49 7f 36 00 00     .cq.....6.II.6..
     48f:	06 4f 49 69 3f 1e 00 00 00 00 6c 6c 00 00 00 00     .OIi?.....ll....
     49f:	00 a0 ec 6c 00 00 00 00 08 1c 36 63 41 00 00 00     ...l......6cA...
     4af:	14 14 14 14 14 14 00 00 00 41 63 36 1c 08 00 00     .........Ac6....
     4bf:	02 03 51 59 0f 06 00 00 3e 7f 41 5d 5d 1f 1e 00     ..QY....>.A]]...
     4cf:	7c 7e 13 13 7e 7c 00 00 41 7f 7f 49 49 7f 36 00     |~..~|..A..II.6.
     4df:	1c 3e 63 41 41 63 22 00 41 7f 7f 41 63 7f 1c 00     .>cAAc".A..Ac...
     4ef:	41 7f 7f 49 5d 41 63 00 41 7f 7f 49 1d 01 03 00     A..I]Ac.A..I....
     4ff:	1c 3e 63 41 51 73 72 00 7f 7f 08 08 7f 7f 00 00     .>cAQsr.........
     50f:	00 41 7f 7f 41 00 00 00 30 70 40 41 7f 3f 01 00     .A..A...0p@A.?..
     51f:	41 7f 7f 08 1c 77 63 00 41 7f 7f 41 40 60 70 00     A....wc.A..A@`p.
     52f:	7f 7f 06 0c 06 7f 7f 00 7f 7f 06 0c 18 7f 7f 00     ................
     53f:	1c 3e 63 41 63 3e 1c 00 41 7f 7f 49 09 0f 06 00     .>cAc>..A..I....
     54f:	1e 3f 21 71 7f 5e 00 00 41 7f 7f 19 39 6f 46 00     .?!q.^..A...9oF.
     55f:	26 67 4d 59 7b 32 00 00 03 41 7f 7f 41 03 00 00     &gMY{2...A..A...
     56f:	7f 7f 40 40 7f 7f 00 00 1f 3f 60 60 3f 1f 00 00     ..@@.....?``?...
     57f:	7f 7f 30 18 30 7f 7f 00 63 77 1c 08 1c 77 63 00     ..0.0...cw...wc.
     58f:	07 4f 78 78 4f 07 00 00 67 73 59 4d 47 63 71 00     .OxxO...gsYMGcq.
     59f:	00 7f 7f 41 41 00 00 00 01 03 06 0c 18 30 60 00     ...AA........0`.
     5af:	00 41 41 7f 7f 00 00 00 08 0c 06 03 06 0c 08 00     .AA.............
     5bf:	80 80 80 80 80 80 80 80 00 00 03 07 04 00 00 00     ................
     5cf:	20 74 54 54 3c 78 40 00 41 3f 7f 44 44 7c 38 00      tTT<x@.A?.DD|8.
     5df:	38 7c 44 44 6c 28 00 00 30 78 48 49 3f 7f 40 00     8|DDl(..0xHI?.@.
     5ef:	38 7c 54 54 5c 18 00 00 48 7e 7f 49 03 02 00 00     8|TT\...H~.I....
     5ff:	98 bc a4 a4 f8 7c 04 00 41 7f 7f 08 04 7c 78 00     .....|..A....|x.
     60f:	00 44 7d 7d 40 00 00 00 40 c4 84 fd 7d 00 00 00     .D}}@...@...}...
     61f:	41 7f 7f 10 38 6c 44 00 00 41 7f 7f 40 00 00 00     A...8lD..A..@...
     62f:	7c 7c 0c 18 0c 7c 78 00 7c 7c 04 04 7c 78 00 00     ||...|x.||..|x..
     63f:	38 7c 44 44 7c 38 00 00 84 fc f8 a4 24 3c 18 00     8|DD|8......$<..
     64f:	18 3c 24 a4 f8 fc 84 00 44 7c 78 44 1c 18 00 00     .<$.....D|xD....
     65f:	48 5c 54 54 74 24 00 00 00 04 3e 7f 44 24 00 00     H\TTt$....>.D$..
     66f:	3c 7c 40 40 3c 7c 40 00 1c 3c 60 60 3c 1c 00 00     <|@@<|@..<``<...
     67f:	3c 7c 60 30 60 7c 3c 00 44 6c 38 10 38 6c 44 00     <|`0`|<.Dl8.8lD.
     68f:	9c bc a0 a0 fc 7c 00 00 4c 64 74 5c 4c 64 00 00     .....|..Ldt\Ld..
     69f:	08 08 3e 77 41 41 00 00 00 00 00 77 77 00 00 00     ..>wAA.....ww...
     6af:	41 41 77 3e 08 08 00 00 02 03 01 03 02 03 01 00     AAw>............
	...

000006c0 <__ctors_end>:
     6c0:	11 24       	eor	r1, r1
     6c2:	1f be       	out	0x3f, r1	; 63
     6c4:	cf ef       	ldi	r28, 0xFF	; 255
     6c6:	d4 e0       	ldi	r29, 0x04	; 4
     6c8:	de bf       	out	0x3e, r29	; 62
     6ca:	cd bf       	out	0x3d, r28	; 61

000006cc <__do_copy_data>:
     6cc:	11 e0       	ldi	r17, 0x01	; 1
     6ce:	a0 e0       	ldi	r26, 0x00	; 0
     6d0:	b1 e0       	ldi	r27, 0x01	; 1
     6d2:	ea e5       	ldi	r30, 0x5A	; 90
     6d4:	fa e1       	ldi	r31, 0x1A	; 26
     6d6:	02 c0       	rjmp	.+4      	; 0x6dc <__do_copy_data+0x10>
     6d8:	05 90       	lpm	r0, Z+
     6da:	0d 92       	st	X+, r0
     6dc:	a2 3a       	cpi	r26, 0xA2	; 162
     6de:	b1 07       	cpc	r27, r17
     6e0:	d9 f7       	brne	.-10     	; 0x6d8 <__do_copy_data+0xc>

000006e2 <__do_clear_bss>:
     6e2:	21 e0       	ldi	r18, 0x01	; 1
     6e4:	a2 ea       	ldi	r26, 0xA2	; 162
     6e6:	b1 e0       	ldi	r27, 0x01	; 1
     6e8:	01 c0       	rjmp	.+2      	; 0x6ec <.do_clear_bss_start>

000006ea <.do_clear_bss_loop>:
     6ea:	1d 92       	st	X+, r1

000006ec <.do_clear_bss_start>:
     6ec:	ac 3a       	cpi	r26, 0xAC	; 172
     6ee:	b2 07       	cpc	r27, r18
     6f0:	e1 f7       	brne	.-8      	; 0x6ea <.do_clear_bss_loop>
     6f2:	0e 94 b3 04 	call	0x966	; 0x966 <main>
     6f6:	0c 94 2b 0d 	jmp	0x1a56	; 0x1a56 <_exit>

000006fa <__bad_interrupt>:
     6fa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000006fe <new_menu>:
#include "menu.h"
#include "OLED_driver.h"
#include <string.h>


menu* new_menu(menu* parent){
     6fe:	cf 93       	push	r28
     700:	df 93       	push	r29
     702:	ec 01       	movw	r28, r24
	menu* mymenu = malloc(sizeof(menu));
     704:	84 e1       	ldi	r24, 0x14	; 20
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	0e 94 c8 07 	call	0xf90	; 0xf90 <malloc>
     70c:	fc 01       	movw	r30, r24
     70e:	32 96       	adiw	r30, 0x02	; 2
     710:	9c 01       	movw	r18, r24
     712:	2e 5e       	subi	r18, 0xEE	; 238
     714:	3f 4f       	sbci	r19, 0xFF	; 255
	for(unsigned int i = 0; i < 8; i++){
		mymenu->links[i] = NULL;
     716:	11 92       	st	Z+, r1
     718:	11 92       	st	Z+, r1
#include <string.h>


menu* new_menu(menu* parent){
	menu* mymenu = malloc(sizeof(menu));
	for(unsigned int i = 0; i < 8; i++){
     71a:	e2 17       	cp	r30, r18
     71c:	f3 07       	cpc	r31, r19
     71e:	d9 f7       	brne	.-10     	; 0x716 <new_menu+0x18>
		mymenu->links[i] = NULL;
	}
	mymenu->labels = "salat";
     720:	20 e1       	ldi	r18, 0x10	; 16
     722:	31 e0       	ldi	r19, 0x01	; 1
     724:	dc 01       	movw	r26, r24
     726:	11 96       	adiw	r26, 0x01	; 1
     728:	3c 93       	st	X, r19
     72a:	2e 93       	st	-X, r18
	*(mymenu->selected) = 0;
     72c:	52 96       	adiw	r26, 0x12	; 18
     72e:	ed 91       	ld	r30, X+
     730:	fc 91       	ld	r31, X
     732:	53 97       	sbiw	r26, 0x13	; 19
     734:	10 82       	st	Z, r1
	mymenu->links[7] = &(*parent);
     736:	51 96       	adiw	r26, 0x11	; 17
     738:	dc 93       	st	X, r29
     73a:	ce 93       	st	-X, r28
     73c:	50 97       	sbiw	r26, 0x10	; 16
	//menu->labels[7] = "<- Back";
	return mymenu;
}
     73e:	df 91       	pop	r29
     740:	cf 91       	pop	r28
     742:	08 95       	ret

00000744 <invert_selected>:
void change_menu(menu* next_menu, menu* prev_menu){
	write_menu_to_screen(next_menu);
	*prev_menu = *next_menu;
}

void invert_selected(menu* menuPointer){
     744:	cf 93       	push	r28
     746:	df 93       	push	r29
     748:	ec 01       	movw	r28, r24
	go_to_column(0);
     74a:	80 e0       	ldi	r24, 0x00	; 0
     74c:	0e 94 bd 05 	call	0xb7a	; 0xb7a <go_to_column>
	oled_write_string_inverted(*(menuPointer->selected), menuPointer->labels, 8);
     750:	68 81       	ld	r22, Y
     752:	79 81       	ldd	r23, Y+1	; 0x01
     754:	ea 89       	ldd	r30, Y+18	; 0x12
     756:	fb 89       	ldd	r31, Y+19	; 0x13
     758:	48 e0       	ldi	r20, 0x08	; 8
     75a:	80 81       	ld	r24, Z
     75c:	0e 94 f1 06 	call	0xde2	; 0xde2 <oled_write_string_inverted>
}
     760:	df 91       	pop	r29
     762:	cf 91       	pop	r28
     764:	08 95       	ret

00000766 <write_menu_to_screen>:
	mymenu->links[7] = &(*parent);
	//menu->labels[7] = "<- Back";
	return mymenu;
}

void write_menu_to_screen(menu* menuPointer){
     766:	0f 93       	push	r16
     768:	1f 93       	push	r17
     76a:	cf 93       	push	r28
     76c:	8c 01       	movw	r16, r24
	clear_oled_new();
     76e:	0e 94 df 05 	call	0xbbe	; 0xbbe <clear_oled_new>
     772:	c0 e0       	ldi	r28, 0x00	; 0
	for(unsigned int i = 0; i < 8; i++){
		go_to_column(0);
     774:	80 e0       	ldi	r24, 0x00	; 0
     776:	0e 94 bd 05 	call	0xb7a	; 0xb7a <go_to_column>
		oled_write_string(i, menuPointer->labels, 8);
     77a:	f8 01       	movw	r30, r16
     77c:	60 81       	ld	r22, Z
     77e:	71 81       	ldd	r23, Z+1	; 0x01
     780:	48 e0       	ldi	r20, 0x08	; 8
     782:	8c 2f       	mov	r24, r28
     784:	0e 94 4d 06 	call	0xc9a	; 0xc9a <oled_write_string>
     788:	cf 5f       	subi	r28, 0xFF	; 255
	return mymenu;
}

void write_menu_to_screen(menu* menuPointer){
	clear_oled_new();
	for(unsigned int i = 0; i < 8; i++){
     78a:	c8 30       	cpi	r28, 0x08	; 8
     78c:	99 f7       	brne	.-26     	; 0x774 <write_menu_to_screen+0xe>
		go_to_column(0);
		oled_write_string(i, menuPointer->labels, 8);
	}
	invert_selected(menuPointer);
     78e:	c8 01       	movw	r24, r16
     790:	0e 94 a2 03 	call	0x744	; 0x744 <invert_selected>
}
     794:	cf 91       	pop	r28
     796:	1f 91       	pop	r17
     798:	0f 91       	pop	r16
     79a:	08 95       	ret

0000079c <change_menu>:

void change_menu(menu* next_menu, menu* prev_menu){
     79c:	0f 93       	push	r16
     79e:	1f 93       	push	r17
     7a0:	cf 93       	push	r28
     7a2:	df 93       	push	r29
     7a4:	ec 01       	movw	r28, r24
     7a6:	8b 01       	movw	r16, r22
	write_menu_to_screen(next_menu);
     7a8:	0e 94 b3 03 	call	0x766	; 0x766 <write_menu_to_screen>
	*prev_menu = *next_menu;
     7ac:	84 e1       	ldi	r24, 0x14	; 20
     7ae:	fe 01       	movw	r30, r28
     7b0:	d8 01       	movw	r26, r16
     7b2:	01 90       	ld	r0, Z+
     7b4:	0d 92       	st	X+, r0
     7b6:	8a 95       	dec	r24
     7b8:	e1 f7       	brne	.-8      	; 0x7b2 <change_menu+0x16>
}
     7ba:	df 91       	pop	r29
     7bc:	cf 91       	pop	r28
     7be:	1f 91       	pop	r17
     7c0:	0f 91       	pop	r16
     7c2:	08 95       	ret

000007c4 <change_selected>:
	go_to_column(0);
	oled_write_string_inverted(*(menuPointer->selected), menuPointer->labels, 8);
}

void change_selected(menu* menuPointer, DIRECTION d){
	if(d == UP){
     7c4:	62 30       	cpi	r22, 0x02	; 2
     7c6:	61 f4       	brne	.+24     	; 0x7e0 <change_selected+0x1c>
		*(menuPointer->selected)++;
     7c8:	dc 01       	movw	r26, r24
     7ca:	52 96       	adiw	r26, 0x12	; 18
     7cc:	2d 91       	ld	r18, X+
     7ce:	3c 91       	ld	r19, X
     7d0:	53 97       	sbiw	r26, 0x13	; 19
     7d2:	2f 5f       	subi	r18, 0xFF	; 255
     7d4:	3f 4f       	sbci	r19, 0xFF	; 255
     7d6:	53 96       	adiw	r26, 0x13	; 19
     7d8:	3c 93       	st	X, r19
     7da:	2e 93       	st	-X, r18
     7dc:	52 97       	sbiw	r26, 0x12	; 18
     7de:	09 c0       	rjmp	.+18     	; 0x7f2 <change_selected+0x2e>
	}
	if(d == DOWN){
     7e0:	63 30       	cpi	r22, 0x03	; 3
     7e2:	39 f4       	brne	.+14     	; 0x7f2 <change_selected+0x2e>
		*(menuPointer->selected)--;
     7e4:	fc 01       	movw	r30, r24
     7e6:	22 89       	ldd	r18, Z+18	; 0x12
     7e8:	33 89       	ldd	r19, Z+19	; 0x13
     7ea:	21 50       	subi	r18, 0x01	; 1
     7ec:	31 09       	sbc	r19, r1
     7ee:	33 8b       	std	Z+19, r19	; 0x13
     7f0:	22 8b       	std	Z+18, r18	; 0x12
	}
	if(*(menuPointer->selected) == 8){
     7f2:	dc 01       	movw	r26, r24
     7f4:	52 96       	adiw	r26, 0x12	; 18
     7f6:	ed 91       	ld	r30, X+
     7f8:	fc 91       	ld	r31, X
     7fa:	53 97       	sbiw	r26, 0x13	; 19
     7fc:	20 81       	ld	r18, Z
     7fe:	28 30       	cpi	r18, 0x08	; 8
     800:	09 f4       	brne	.+2      	; 0x804 <change_selected+0x40>
		*(menuPointer->selected) = 0;
     802:	10 82       	st	Z, r1
	}
	if(*(menuPointer->selected) == -1){
		*(menuPointer->selected) = 7;
	}
	write_menu_to_screen(menuPointer);
     804:	0e 94 b3 03 	call	0x766	; 0x766 <write_menu_to_screen>
     808:	08 95       	ret

0000080a <button_pressed>:
}

void button_pressed(menu* menuPointer){
     80a:	dc 01       	movw	r26, r24
	if(menuPointer->links[*(menuPointer->selected)] != NULL){
     80c:	52 96       	adiw	r26, 0x12	; 18
     80e:	ed 91       	ld	r30, X+
     810:	fc 91       	ld	r31, X
     812:	53 97       	sbiw	r26, 0x13	; 19
     814:	e0 81       	ld	r30, Z
     816:	f0 e0       	ldi	r31, 0x00	; 0
     818:	31 96       	adiw	r30, 0x01	; 1
     81a:	ee 0f       	add	r30, r30
     81c:	ff 1f       	adc	r31, r31
     81e:	e8 0f       	add	r30, r24
     820:	f9 1f       	adc	r31, r25
     822:	80 81       	ld	r24, Z
     824:	91 81       	ldd	r25, Z+1	; 0x01
     826:	00 97       	sbiw	r24, 0x00	; 0
     828:	19 f0       	breq	.+6      	; 0x830 <button_pressed+0x26>
     82a:	bd 01       	movw	r22, r26
		change_menu(menuPointer->links[*(menuPointer->selected)], menuPointer);
     82c:	0e 94 ce 03 	call	0x79c	; 0x79c <change_menu>
     830:	08 95       	ret

00000832 <calc_pos>:
	atmelMap->ADC[1] = val;
	x_offset = atmelMap->ADC[1];
	y_offset = atmelMap->ADC[1];
}

void calc_pos(joyVal* values, uint8_t x, uint8_t y){
     832:	fc 01       	movw	r30, r24
	if(x>=x_offset){
     834:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <x_offset>
     838:	62 17       	cp	r22, r18
     83a:	90 f0       	brcs	.+36     	; 0x860 <calc_pos+0x2e>
		values->x_val = (x-x_offset)*(100)/(255-x_offset);
     83c:	30 e0       	ldi	r19, 0x00	; 0
     83e:	70 e0       	ldi	r23, 0x00	; 0
     840:	62 1b       	sub	r22, r18
     842:	73 0b       	sbc	r23, r19
     844:	54 e6       	ldi	r21, 0x64	; 100
     846:	56 9f       	mul	r21, r22
     848:	c0 01       	movw	r24, r0
     84a:	57 9f       	mul	r21, r23
     84c:	90 0d       	add	r25, r0
     84e:	11 24       	eor	r1, r1
     850:	6f ef       	ldi	r22, 0xFF	; 255
     852:	70 e0       	ldi	r23, 0x00	; 0
     854:	62 1b       	sub	r22, r18
     856:	73 0b       	sbc	r23, r19
     858:	0e 94 a0 07 	call	0xf40	; 0xf40 <__divmodhi4>
     85c:	60 83       	st	Z, r22
     85e:	10 c0       	rjmp	.+32     	; 0x880 <calc_pos+0x4e>
		}else if(x<x_offset){
		values->x_val = -(x_offset-x)*(100)/x_offset;
     860:	a2 2f       	mov	r26, r18
     862:	b0 e0       	ldi	r27, 0x00	; 0
     864:	26 2f       	mov	r18, r22
     866:	30 e0       	ldi	r19, 0x00	; 0
     868:	2a 1b       	sub	r18, r26
     86a:	3b 0b       	sbc	r19, r27
     86c:	54 e6       	ldi	r21, 0x64	; 100
     86e:	52 9f       	mul	r21, r18
     870:	c0 01       	movw	r24, r0
     872:	53 9f       	mul	r21, r19
     874:	90 0d       	add	r25, r0
     876:	11 24       	eor	r1, r1
     878:	bd 01       	movw	r22, r26
     87a:	0e 94 a0 07 	call	0xf40	; 0xf40 <__divmodhi4>
     87e:	60 83       	st	Z, r22
	}
	if(y>=y_offset){
     880:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <y_offset>
     884:	46 17       	cp	r20, r22
     886:	98 f0       	brcs	.+38     	; 0x8ae <calc_pos+0x7c>
		values->y_val = (y-y_offset)*(100)/(255-y_offset);
     888:	26 2f       	mov	r18, r22
     88a:	30 e0       	ldi	r19, 0x00	; 0
     88c:	50 e0       	ldi	r21, 0x00	; 0
     88e:	42 1b       	sub	r20, r18
     890:	53 0b       	sbc	r21, r19
     892:	64 e6       	ldi	r22, 0x64	; 100
     894:	64 9f       	mul	r22, r20
     896:	c0 01       	movw	r24, r0
     898:	65 9f       	mul	r22, r21
     89a:	90 0d       	add	r25, r0
     89c:	11 24       	eor	r1, r1
     89e:	6f ef       	ldi	r22, 0xFF	; 255
     8a0:	70 e0       	ldi	r23, 0x00	; 0
     8a2:	62 1b       	sub	r22, r18
     8a4:	73 0b       	sbc	r23, r19
     8a6:	0e 94 a0 07 	call	0xf40	; 0xf40 <__divmodhi4>
     8aa:	61 83       	std	Z+1, r22	; 0x01
     8ac:	08 95       	ret
		}else if(y<y_offset){
		values->y_val = -(y_offset-y)*(100)/y_offset;
     8ae:	70 e0       	ldi	r23, 0x00	; 0
     8b0:	50 e0       	ldi	r21, 0x00	; 0
     8b2:	46 1b       	sub	r20, r22
     8b4:	57 0b       	sbc	r21, r23
     8b6:	24 e6       	ldi	r18, 0x64	; 100
     8b8:	24 9f       	mul	r18, r20
     8ba:	c0 01       	movw	r24, r0
     8bc:	25 9f       	mul	r18, r21
     8be:	90 0d       	add	r25, r0
     8c0:	11 24       	eor	r1, r1
     8c2:	0e 94 a0 07 	call	0xf40	; 0xf40 <__divmodhi4>
     8c6:	61 83       	std	Z+1, r22	; 0x01
     8c8:	08 95       	ret

000008ca <calc_pos_slider>:
	}
}
void calc_pos_slider(sliderVal* values, uint8_t left, uint8_t right){
     8ca:	cf 93       	push	r28
     8cc:	df 93       	push	r29
     8ce:	fc 01       	movw	r30, r24
	values->l_val = left*100/255;
     8d0:	24 e6       	ldi	r18, 0x64	; 100
     8d2:	26 9f       	mul	r18, r22
     8d4:	c0 01       	movw	r24, r0
     8d6:	11 24       	eor	r1, r1
     8d8:	cf ef       	ldi	r28, 0xFF	; 255
     8da:	d0 e0       	ldi	r29, 0x00	; 0
     8dc:	be 01       	movw	r22, r28
     8de:	0e 94 a0 07 	call	0xf40	; 0xf40 <__divmodhi4>
     8e2:	60 83       	st	Z, r22
	values->r_val = right*100/255;
     8e4:	24 9f       	mul	r18, r20
     8e6:	c0 01       	movw	r24, r0
     8e8:	11 24       	eor	r1, r1
     8ea:	be 01       	movw	r22, r28
     8ec:	0e 94 a0 07 	call	0xf40	; 0xf40 <__divmodhi4>
     8f0:	61 83       	std	Z+1, r22	; 0x01
}
     8f2:	df 91       	pop	r29
     8f4:	cf 91       	pop	r28
     8f6:	08 95       	ret

000008f8 <button_check>:

uint8_t button_check(uint8_t current){
     8f8:	cf 93       	push	r28
	if(current == 0 && previous == 1){
     8fa:	81 11       	cpse	r24, r1
     8fc:	0b c0       	rjmp	.+22     	; 0x914 <button_check+0x1c>
     8fe:	c0 91 0b 01 	lds	r28, 0x010B	; 0x80010b <previous>
     902:	c1 30       	cpi	r28, 0x01	; 1
     904:	61 f4       	brne	.+24     	; 0x91e <button_check+0x26>
		previous = 0;
     906:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <previous>
		printf("%s", "B");
     90a:	82 e4       	ldi	r24, 0x42	; 66
     90c:	90 e0       	ldi	r25, 0x00	; 0
     90e:	0e 94 a6 09 	call	0x134c	; 0x134c <putchar>
		return 1;
     912:	06 c0       	rjmp	.+12     	; 0x920 <button_check+0x28>
	}else if(current != 0){
		previous = 1;
     914:	81 e0       	ldi	r24, 0x01	; 1
     916:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <previous>
		//printf("%s", "C");
	}
	return 0;
     91a:	c0 e0       	ldi	r28, 0x00	; 0
     91c:	01 c0       	rjmp	.+2      	; 0x920 <button_check+0x28>
     91e:	c0 e0       	ldi	r28, 0x00	; 0
}
     920:	8c 2f       	mov	r24, r28
     922:	cf 91       	pop	r28
     924:	08 95       	ret

00000926 <joystick_direction>:


DIRECTION joystick_direction(joyVal stick){
	if(joydir == NEUTRAL){
     926:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <joydir>
     92a:	24 30       	cpi	r18, 0x04	; 4
     92c:	c1 f4       	brne	.+48     	; 0x95e <joystick_direction+0x38>
		if(stick.x_val > 80){
     92e:	81 35       	cpi	r24, 0x51	; 81
     930:	24 f0       	brlt	.+8      	; 0x93a <joystick_direction+0x14>
			joydir = RIGHT;
     932:	81 e0       	ldi	r24, 0x01	; 1
     934:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <joydir>
			return joydir;
     938:	08 95       	ret
		}
		if(stick.x_val < -80){
     93a:	80 3b       	cpi	r24, 0xB0	; 176
     93c:	24 f4       	brge	.+8      	; 0x946 <joystick_direction+0x20>
			joydir = LEFT;
     93e:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <joydir>
			return joydir;
     942:	80 e0       	ldi	r24, 0x00	; 0
     944:	08 95       	ret
		}
		if(stick.y_val > 80){
     946:	91 35       	cpi	r25, 0x51	; 81
     948:	24 f0       	brlt	.+8      	; 0x952 <joystick_direction+0x2c>
			joydir = UP;
     94a:	82 e0       	ldi	r24, 0x02	; 2
     94c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <joydir>
			return joydir;
     950:	08 95       	ret
		}
		if(stick.y_val < -80){
     952:	90 3b       	cpi	r25, 0xB0	; 176
     954:	24 f4       	brge	.+8      	; 0x95e <joystick_direction+0x38>
			joydir = DOWN;
     956:	83 e0       	ldi	r24, 0x03	; 3
     958:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <joydir>
			return joydir;
     95c:	08 95       	ret
		}
	}
	joydir = NEUTRAL;
     95e:	84 e0       	ldi	r24, 0x04	; 4
     960:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <joydir>
	return joydir;
	
     964:	08 95       	ret

00000966 <main>:
} menuItem;




int main(void){
     966:	cf 93       	push	r28
     968:	df 93       	push	r29
     96a:	00 d0       	rcall	.+0      	; 0x96c <main+0x6>
     96c:	00 d0       	rcall	.+0      	; 0x96e <main+0x8>
     96e:	cd b7       	in	r28, 0x3d	; 61
     970:	de b7       	in	r29, 0x3e	; 62
	
	joyVal joystick; 
	sliderVal slider; 
	volatile amap* atmelMap = (amap*) BASE;
     972:	00 91 0e 01 	lds	r16, 0x010E	; 0x80010e <BASE>
     976:	10 91 0f 01 	lds	r17, 0x010F	; 0x80010f <BASE+0x1>
	
	MCUCR |= (1<<SRE);
     97a:	85 b7       	in	r24, 0x35	; 53
     97c:	80 68       	ori	r24, 0x80	; 128
     97e:	85 bf       	out	0x35, r24	; 53
	
	//DDRC = 0xFF;
	//PORTC = 0x00;
	
	SFIOR &= ~(1<<XMM0);
     980:	80 b7       	in	r24, 0x30	; 48
     982:	87 7f       	andi	r24, 0xF7	; 247
     984:	80 bf       	out	0x30, r24	; 48
	SFIOR &= ~(1<<XMM1);
     986:	80 b7       	in	r24, 0x30	; 48
     988:	8f 7e       	andi	r24, 0xEF	; 239
     98a:	80 bf       	out	0x30, r24	; 48
	SFIOR |= (1<<XMM2);
     98c:	80 b7       	in	r24, 0x30	; 48
     98e:	80 62       	ori	r24, 0x20	; 32
     990:	80 bf       	out	0x30, r24	; 48
	
	DDRA |= 0x18;
     992:	8a b3       	in	r24, 0x1a	; 26
     994:	88 61       	ori	r24, 0x18	; 24
     996:	8a bb       	out	0x1a, r24	; 26
	TCCR2 |= (1<<WGM20);	
	TCCR2 |= (1<<COM21);
	TCCR2 |= (1<<COM20);
	*/

	USART_Init ( MYUBRR );
     998:	8f e1       	ldi	r24, 0x1F	; 31
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	0e 94 90 07 	call	0xf20	; 0xf20 <USART_Init>
	SRAM_test(); _delay_ms(5000);
     9a0:	0e 94 3c 07 	call	0xe78	; 0xe78 <SRAM_test>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9a4:	2f e3       	ldi	r18, 0x3F	; 63
     9a6:	82 e4       	ldi	r24, 0x42	; 66
     9a8:	9f e0       	ldi	r25, 0x0F	; 15
     9aa:	21 50       	subi	r18, 0x01	; 1
     9ac:	80 40       	sbci	r24, 0x00	; 0
     9ae:	90 40       	sbci	r25, 0x00	; 0
     9b0:	e1 f7       	brne	.-8      	; 0x9aa <main+0x44>
     9b2:	00 c0       	rjmp	.+0      	; 0x9b4 <main+0x4e>
     9b4:	00 00       	nop
		
	struct menuItem* head;

	menuItem* ptr;
	ptr = (menuItem*)malloc(sizeof(menuItem));
     9b6:	8b e0       	ldi	r24, 0x0B	; 11
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	0e 94 c8 07 	call	0xf90	; 0xf90 <malloc>
     9be:	7c 01       	movw	r14, r24
	
	menuItem* child;
	child = (menuItem*)malloc(sizeof(menuItem));
     9c0:	8b e0       	ldi	r24, 0x0B	; 11
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	0e 94 c8 07 	call	0xf90	; 0xf90 <malloc>
     9c8:	fc 01       	movw	r30, r24
	child->label = "kid";
     9ca:	86 e1       	ldi	r24, 0x16	; 22
     9cc:	91 e0       	ldi	r25, 0x01	; 1
     9ce:	92 87       	std	Z+10, r25	; 0x0a
     9d0:	81 87       	std	Z+9, r24	; 0x09
	child->line = 0;
     9d2:	10 86       	std	Z+8, r1	; 0x08
	child->next = NULL;
     9d4:	13 82       	std	Z+3, r1	; 0x03
     9d6:	12 82       	std	Z+2, r1	; 0x02
	child->prev = NULL;
     9d8:	11 82       	std	Z+1, r1	; 0x01
     9da:	10 82       	st	Z, r1

	ptr->label = "first";
     9dc:	8a e1       	ldi	r24, 0x1A	; 26
     9de:	91 e0       	ldi	r25, 0x01	; 1
     9e0:	d7 01       	movw	r26, r14
     9e2:	1a 96       	adiw	r26, 0x0a	; 10
     9e4:	9c 93       	st	X, r25
     9e6:	8e 93       	st	-X, r24
     9e8:	19 97       	sbiw	r26, 0x09	; 9
	ptr->line = 0;
     9ea:	18 96       	adiw	r26, 0x08	; 8
     9ec:	1c 92       	st	X, r1
     9ee:	18 97       	sbiw	r26, 0x08	; 8
	ptr->prev = NULL;
     9f0:	11 96       	adiw	r26, 0x01	; 1
     9f2:	1c 92       	st	X, r1
     9f4:	1e 92       	st	-X, r1
	ptr->next = NULL;
	ptr->child = child;
     9f6:	17 96       	adiw	r26, 0x07	; 7
     9f8:	fc 93       	st	X, r31
     9fa:	ee 93       	st	-X, r30
     9fc:	16 97       	sbiw	r26, 0x06	; 6
	head = ptr;
	
	child->parent = head;
     9fe:	f5 82       	std	Z+5, r15	; 0x05
     a00:	e4 82       	std	Z+4, r14	; 0x04

	ptr = (menuItem*)malloc(sizeof(menuItem));
     a02:	8b e0       	ldi	r24, 0x0B	; 11
     a04:	90 e0       	ldi	r25, 0x00	; 0
     a06:	0e 94 c8 07 	call	0xf90	; 0xf90 <malloc>
     a0a:	fc 01       	movw	r30, r24

	menuItem* temp = head;

	ptr->label = "second";
     a0c:	80 e2       	ldi	r24, 0x20	; 32
     a0e:	91 e0       	ldi	r25, 0x01	; 1
     a10:	92 87       	std	Z+10, r25	; 0x0a
     a12:	81 87       	std	Z+9, r24	; 0x09
	ptr->line = 1;
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	80 87       	std	Z+8, r24	; 0x08
	while(temp->next != NULL){
		temp = temp->next;
	}
	temp->next = ptr;
     a18:	d7 01       	movw	r26, r14
     a1a:	13 96       	adiw	r26, 0x03	; 3
     a1c:	fc 93       	st	X, r31
     a1e:	ee 93       	st	-X, r30
     a20:	12 97       	sbiw	r26, 0x02	; 2
	ptr->prev = temp;
     a22:	f1 82       	std	Z+1, r15	; 0x01
     a24:	e0 82       	st	Z, r14
	ptr->next = NULL;
     a26:	13 82       	std	Z+3, r1	; 0x03
     a28:	12 82       	std	Z+2, r1	; 0x02

	ptr = (menuItem*)malloc(sizeof(menuItem));
     a2a:	8b e0       	ldi	r24, 0x0B	; 11
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	0e 94 c8 07 	call	0xf90	; 0xf90 <malloc>
     a32:	fc 01       	movw	r30, r24

	temp = head;

	ptr->label = "third";
     a34:	87 e2       	ldi	r24, 0x27	; 39
     a36:	91 e0       	ldi	r25, 0x01	; 1
     a38:	92 87       	std	Z+10, r25	; 0x0a
     a3a:	81 87       	std	Z+9, r24	; 0x09
	ptr->line = 2;
     a3c:	82 e0       	ldi	r24, 0x02	; 2
     a3e:	80 87       	std	Z+8, r24	; 0x08
	while(temp->next != NULL){
     a40:	01 c0       	rjmp	.+2      	; 0xa44 <main+0xde>
		temp = temp->next;
     a42:	7c 01       	movw	r14, r24

	temp = head;

	ptr->label = "third";
	ptr->line = 2;
	while(temp->next != NULL){
     a44:	d7 01       	movw	r26, r14
     a46:	12 96       	adiw	r26, 0x02	; 2
     a48:	8d 91       	ld	r24, X+
     a4a:	9c 91       	ld	r25, X
     a4c:	13 97       	sbiw	r26, 0x03	; 3
     a4e:	00 97       	sbiw	r24, 0x00	; 0
     a50:	c1 f7       	brne	.-16     	; 0xa42 <main+0xdc>
		temp = temp->next;
	}
	temp->next = ptr;
     a52:	13 96       	adiw	r26, 0x03	; 3
     a54:	fc 93       	st	X, r31
     a56:	ee 93       	st	-X, r30
     a58:	12 97       	sbiw	r26, 0x02	; 2
	ptr->prev = temp;
     a5a:	f1 82       	std	Z+1, r15	; 0x01
     a5c:	e0 82       	st	Z, r14
	ptr->next = NULL;
     a5e:	13 82       	std	Z+3, r1	; 0x03
     a60:	12 82       	std	Z+2, r1	; 0x02

	oled_init(atmelMap);
     a62:	c8 01       	movw	r24, r16
     a64:	0e 94 8a 05 	call	0xb14	; 0xb14 <oled_init>
	clear_oled(atmelMap);
     a68:	c8 01       	movw	r24, r16
     a6a:	0e 94 c7 05 	call	0xb8e	; 0xb8e <clear_oled>
	
		
	go_to_line(7);
     a6e:	87 e0       	ldi	r24, 0x07	; 7
     a70:	0e 94 b8 05 	call	0xb70	; 0xb70 <go_to_line>
     a74:	0f 2e       	mov	r0, r31
     a76:	fc e5       	ldi	r31, 0x5C	; 92
     a78:	ef 2e       	mov	r14, r31
     a7a:	f1 2c       	mov	r15, r1
     a7c:	f0 2d       	mov	r31, r0
		
		_delay_ms(20);
		
	}*/
	for(int i = 0; i < 92; i++){
		printf("\n");
     a7e:	8a e0       	ldi	r24, 0x0A	; 10
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	0e 94 a6 09 	call	0x134c	; 0x134c <putchar>
     a86:	b1 e0       	ldi	r27, 0x01	; 1
     a88:	eb 1a       	sub	r14, r27
     a8a:	f1 08       	sbc	r15, r1
		}
		
		_delay_ms(20);
		
	}*/
	for(int i = 0; i < 92; i++){
     a8c:	c1 f7       	brne	.-16     	; 0xa7e <main+0x118>
		printf("\n");
		
		
	}
	
	menu* currentMenu = new_menu(NULL);
     a8e:	80 e0       	ldi	r24, 0x00	; 0
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	0e 94 7f 03 	call	0x6fe	; 0x6fe <new_menu>
     a96:	6c 01       	movw	r12, r24
	menu* submenu = new_menu(currentMenu);
     a98:	0e 94 7f 03 	call	0x6fe	; 0x6fe <new_menu>
	submenu->labels = "laks";
     a9c:	2d e2       	ldi	r18, 0x2D	; 45
     a9e:	31 e0       	ldi	r19, 0x01	; 1
     aa0:	fc 01       	movw	r30, r24
     aa2:	31 83       	std	Z+1, r19	; 0x01
     aa4:	20 83       	st	Z, r18
	currentMenu->links[0] = submenu;
     aa6:	d6 01       	movw	r26, r12
     aa8:	13 96       	adiw	r26, 0x03	; 3
     aaa:	9c 93       	st	X, r25
     aac:	8e 93       	st	-X, r24
     aae:	12 97       	sbiw	r26, 0x02	; 2
	write_menu_to_screen(currentMenu);
     ab0:	c6 01       	movw	r24, r12
     ab2:	0e 94 b3 03 	call	0x766	; 0x766 <write_menu_to_screen>
	
	while(1){
		
		uint8_t val = 1;
		atmelMap->ADC[1] = 0x04; 
     ab6:	0f 5f       	subi	r16, 0xFF	; 255
     ab8:	1b 4f       	sbci	r17, 0xFB	; 251
     aba:	68 94       	set
     abc:	aa 24       	eor	r10, r10
     abe:	a2 f8       	bld	r10, 2
     ac0:	f8 01       	movw	r30, r16
     ac2:	a0 82       	st	Z, r10
		uint8_t valx = atmelMap->ADC[1];
     ac4:	60 81       	ld	r22, Z
		uint8_t valy = atmelMap->ADC[1];
     ac6:	40 81       	ld	r20, Z
		uint8_t vall = atmelMap->ADC[1];
     ac8:	e0 80       	ld	r14, Z
		uint8_t valr = atmelMap->ADC[1];
     aca:	b0 80       	ld	r11, Z
		
		uint8_t left_button = PIND & (1<< PIND4);
     acc:	80 b3       	in	r24, 0x10	; 16
		uint8_t right_button = PIND & (1<< PIND5);
     ace:	80 b3       	in	r24, 0x10	; 16
		uint8_t joy_button = PINB & (1<< PINB1);
     ad0:	86 b3       	in	r24, 0x16	; 22
     ad2:	82 70       	andi	r24, 0x02	; 2
     ad4:	f8 2e       	mov	r15, r24
		}*/
			
		
		//get_adc_data(atmelMap, &joystick, &slider);
		
		calc_pos(&joystick,valx,valy);
     ad6:	50 e0       	ldi	r21, 0x00	; 0
     ad8:	70 e0       	ldi	r23, 0x00	; 0
     ada:	ce 01       	movw	r24, r28
     adc:	01 96       	adiw	r24, 0x01	; 1
     ade:	0e 94 19 04 	call	0x832	; 0x832 <calc_pos>
		calc_pos_slider(&slider,vall,valr);
     ae2:	4b 2d       	mov	r20, r11
     ae4:	6e 2d       	mov	r22, r14
     ae6:	ce 01       	movw	r24, r28
     ae8:	03 96       	adiw	r24, 0x03	; 3
     aea:	0e 94 65 04 	call	0x8ca	; 0x8ca <calc_pos_slider>
		//printf("\r J_x: %4d, J_y: %4d, J_b: %3d Slider 1: %3d, Slider 2: %3d |||| %3d,%3d",joystick.x_val,joystick.y_val,joy_button,slider.l_val,slider.r_val,left_button,right_button);
		


		DIRECTION current = joystick_direction(joystick);
     aee:	89 81       	ldd	r24, Y+1	; 0x01
     af0:	9a 81       	ldd	r25, Y+2	; 0x02
     af2:	0e 94 93 04 	call	0x926	; 0x926 <joystick_direction>
		if(current != NEUTRAL){
     af6:	84 30       	cpi	r24, 0x04	; 4
     af8:	21 f0       	breq	.+8      	; 0xb02 <main+0x19c>
			change_selected(currentMenu, current);
     afa:	68 2f       	mov	r22, r24
     afc:	c6 01       	movw	r24, r12
     afe:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <change_selected>
		}
		if(button_check(joy_button)){
     b02:	8f 2d       	mov	r24, r15
     b04:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <button_check>
     b08:	88 23       	and	r24, r24
     b0a:	d1 f2       	breq	.-76     	; 0xac0 <main+0x15a>
			button_pressed(currentMenu);
     b0c:	c6 01       	movw	r24, r12
     b0e:	0e 94 05 04 	call	0x80a	; 0x80a <button_pressed>
     b12:	d6 cf       	rjmp	.-84     	; 0xac0 <main+0x15a>

00000b14 <oled_init>:
	atmelMap->OLED_CMD[1] = 0xB1;
	atmelMap->OLED_CMD[1] = 0x00;
	atmelMap->OLED_CMD[1] = 0x10;
}
void oled_write(amap* atmelMap){
	atmelMap->OLED_DATA[1] = 0x0F;
     b14:	e0 e0       	ldi	r30, 0x00	; 0
     b16:	f0 e1       	ldi	r31, 0x10	; 16
     b18:	8e ea       	ldi	r24, 0xAE	; 174
     b1a:	80 83       	st	Z, r24
     b1c:	81 ea       	ldi	r24, 0xA1	; 161
     b1e:	80 83       	st	Z, r24
     b20:	8a ed       	ldi	r24, 0xDA	; 218
     b22:	80 83       	st	Z, r24
     b24:	82 e1       	ldi	r24, 0x12	; 18
     b26:	80 83       	st	Z, r24
     b28:	88 ec       	ldi	r24, 0xC8	; 200
     b2a:	80 83       	st	Z, r24
     b2c:	88 ea       	ldi	r24, 0xA8	; 168
     b2e:	80 83       	st	Z, r24
     b30:	8f e3       	ldi	r24, 0x3F	; 63
     b32:	80 83       	st	Z, r24
     b34:	85 ed       	ldi	r24, 0xD5	; 213
     b36:	80 83       	st	Z, r24
     b38:	80 e8       	ldi	r24, 0x80	; 128
     b3a:	80 83       	st	Z, r24
     b3c:	81 e8       	ldi	r24, 0x81	; 129
     b3e:	80 83       	st	Z, r24
     b40:	80 e5       	ldi	r24, 0x50	; 80
     b42:	80 83       	st	Z, r24
     b44:	89 ed       	ldi	r24, 0xD9	; 217
     b46:	80 83       	st	Z, r24
     b48:	81 e2       	ldi	r24, 0x21	; 33
     b4a:	80 83       	st	Z, r24
     b4c:	80 e2       	ldi	r24, 0x20	; 32
     b4e:	80 83       	st	Z, r24
     b50:	82 e0       	ldi	r24, 0x02	; 2
     b52:	80 83       	st	Z, r24
     b54:	8b ed       	ldi	r24, 0xDB	; 219
     b56:	80 83       	st	Z, r24
     b58:	80 e3       	ldi	r24, 0x30	; 48
     b5a:	80 83       	st	Z, r24
     b5c:	8d ea       	ldi	r24, 0xAD	; 173
     b5e:	80 83       	st	Z, r24
     b60:	10 82       	st	Z, r1
     b62:	84 ea       	ldi	r24, 0xA4	; 164
     b64:	80 83       	st	Z, r24
     b66:	86 ea       	ldi	r24, 0xA6	; 166
     b68:	80 83       	st	Z, r24
     b6a:	8f ea       	ldi	r24, 0xAF	; 175
     b6c:	80 83       	st	Z, r24
     b6e:	08 95       	ret

00000b70 <go_to_line>:
     b70:	87 70       	andi	r24, 0x07	; 7
     b72:	80 55       	subi	r24, 0x50	; 80
     b74:	80 93 00 10 	sts	0x1000, r24	; 0x801000 <__bss_end+0xe54>
     b78:	08 95       	ret

00000b7a <go_to_column>:
     b7a:	98 2f       	mov	r25, r24
     b7c:	9f 70       	andi	r25, 0x0F	; 15
     b7e:	e0 e0       	ldi	r30, 0x00	; 0
     b80:	f0 e1       	ldi	r31, 0x10	; 16
     b82:	90 83       	st	Z, r25
     b84:	82 95       	swap	r24
     b86:	8f 70       	andi	r24, 0x0F	; 15
     b88:	80 5f       	subi	r24, 0xF0	; 240
     b8a:	80 83       	st	Z, r24
     b8c:	08 95       	ret

00000b8e <clear_oled>:
}

void clear_oled(amap* atmelMap){
     b8e:	1f 93       	push	r17
     b90:	cf 93       	push	r28
     b92:	df 93       	push	r29
     b94:	10 e0       	ldi	r17, 0x00	; 0
	ext_ram[0] = c;
}
void oled_write_data(char c)
{
	volatile char *ext_ram = (char *) 0x1200;
	ext_ram[0] = c;
     b96:	c0 e0       	ldi	r28, 0x00	; 0
     b98:	d2 e1       	ldi	r29, 0x12	; 18
	atmelMap->OLED_DATA[1] = 0x0F;
}

void clear_oled(amap* atmelMap){
	for(int i = 0; i < 8 ; i++){
		go_to_line(i);
     b9a:	81 2f       	mov	r24, r17
     b9c:	0e 94 b8 05 	call	0xb70	; 0xb70 <go_to_line>
		
		go_to_column(0);
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	0e 94 bd 05 	call	0xb7a	; 0xb7a <go_to_column>
     ba6:	80 e8       	ldi	r24, 0x80	; 128
     ba8:	90 e0       	ldi	r25, 0x00	; 0
	ext_ram[0] = c;
}
void oled_write_data(char c)
{
	volatile char *ext_ram = (char *) 0x1200;
	ext_ram[0] = c;
     baa:	18 82       	st	Y, r1
     bac:	01 97       	sbiw	r24, 0x01	; 1
void clear_oled(amap* atmelMap){
	for(int i = 0; i < 8 ; i++){
		go_to_line(i);
		
		go_to_column(0);
		for(int j = 0; j < 128; j++){
     bae:	e9 f7       	brne	.-6      	; 0xbaa <clear_oled+0x1c>
     bb0:	1f 5f       	subi	r17, 0xFF	; 255
void oled_write(amap* atmelMap){
	atmelMap->OLED_DATA[1] = 0x0F;
}

void clear_oled(amap* atmelMap){
	for(int i = 0; i < 8 ; i++){
     bb2:	18 30       	cpi	r17, 0x08	; 8
     bb4:	91 f7       	brne	.-28     	; 0xb9a <clear_oled+0xc>
		for(int j = 0; j < 128; j++){
			
			oled_write_data(0x00);
		}
	}
}
     bb6:	df 91       	pop	r29
     bb8:	cf 91       	pop	r28
     bba:	1f 91       	pop	r17
     bbc:	08 95       	ret

00000bbe <clear_oled_new>:

void clear_oled_new(){
     bbe:	1f 93       	push	r17
     bc0:	cf 93       	push	r28
     bc2:	df 93       	push	r29
     bc4:	10 e0       	ldi	r17, 0x00	; 0
	ext_ram[0] = c;
}
void oled_write_data(char c)
{
	volatile char *ext_ram = (char *) 0x1200;
	ext_ram[0] = c;
     bc6:	c0 e0       	ldi	r28, 0x00	; 0
     bc8:	d2 e1       	ldi	r29, 0x12	; 18
	}
}

void clear_oled_new(){
	for(int i = 0; i < 8 ; i++){
		go_to_line(i);
     bca:	81 2f       	mov	r24, r17
     bcc:	0e 94 b8 05 	call	0xb70	; 0xb70 <go_to_line>
		
		go_to_column(0);
     bd0:	80 e0       	ldi	r24, 0x00	; 0
     bd2:	0e 94 bd 05 	call	0xb7a	; 0xb7a <go_to_column>
     bd6:	80 e8       	ldi	r24, 0x80	; 128
     bd8:	90 e0       	ldi	r25, 0x00	; 0
	ext_ram[0] = c;
}
void oled_write_data(char c)
{
	volatile char *ext_ram = (char *) 0x1200;
	ext_ram[0] = c;
     bda:	18 82       	st	Y, r1
     bdc:	01 97       	sbiw	r24, 0x01	; 1
void clear_oled_new(){
	for(int i = 0; i < 8 ; i++){
		go_to_line(i);
		
		go_to_column(0);
		for(int j = 0; j < 128; j++){
     bde:	e9 f7       	brne	.-6      	; 0xbda <clear_oled_new+0x1c>
     be0:	1f 5f       	subi	r17, 0xFF	; 255
		}
	}
}

void clear_oled_new(){
	for(int i = 0; i < 8 ; i++){
     be2:	18 30       	cpi	r17, 0x08	; 8
     be4:	91 f7       	brne	.-28     	; 0xbca <clear_oled_new+0xc>
		for(int j = 0; j < 128; j++){
			
			oled_write_data(0x00);
		}
	}
}
     be6:	df 91       	pop	r29
     be8:	cf 91       	pop	r28
     bea:	1f 91       	pop	r17
     bec:	08 95       	ret

00000bee <oled_write_char_using_font>:
	}
	
}

void oled_write_char_using_font(char c, uint8_t n){
	uint8_t character = c-32;
     bee:	80 52       	subi	r24, 0x20	; 32
	
	if(n==8){
     bf0:	68 30       	cpi	r22, 0x08	; 8
     bf2:	f1 f4       	brne	.+60     	; 0xc30 <oled_write_char_using_font+0x42>
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	9c 01       	movw	r18, r24
     bf8:	22 0f       	add	r18, r18
     bfa:	33 1f       	adc	r19, r19
     bfc:	22 0f       	add	r18, r18
     bfe:	33 1f       	adc	r19, r19
     c00:	22 0f       	add	r18, r18
     c02:	33 1f       	adc	r19, r19
     c04:	29 53       	subi	r18, 0x39	; 57
     c06:	3c 4f       	sbci	r19, 0xFC	; 252
     c08:	88 0f       	add	r24, r24
     c0a:	99 1f       	adc	r25, r25
     c0c:	88 0f       	add	r24, r24
     c0e:	99 1f       	adc	r25, r25
     c10:	88 0f       	add	r24, r24
     c12:	99 1f       	adc	r25, r25
     c14:	81 53       	subi	r24, 0x31	; 49
     c16:	9c 4f       	sbci	r25, 0xFC	; 252
	ext_ram[0] = c;
}
void oled_write_data(char c)
{
	volatile char *ext_ram = (char *) 0x1200;
	ext_ram[0] = c;
     c18:	a0 e0       	ldi	r26, 0x00	; 0
     c1a:	b2 e1       	ldi	r27, 0x12	; 18
void oled_write_char_using_font(char c, uint8_t n){
	uint8_t character = c-32;
	
	if(n==8){
		for (int i=0; i < n; i++) {
			oled_write_data(pgm_read_word(&font8[character][i]));
     c1c:	f9 01       	movw	r30, r18
     c1e:	45 91       	lpm	r20, Z+
     c20:	54 91       	lpm	r21, Z
	ext_ram[0] = c;
}
void oled_write_data(char c)
{
	volatile char *ext_ram = (char *) 0x1200;
	ext_ram[0] = c;
     c22:	4c 93       	st	X, r20
     c24:	2f 5f       	subi	r18, 0xFF	; 255
     c26:	3f 4f       	sbci	r19, 0xFF	; 255

void oled_write_char_using_font(char c, uint8_t n){
	uint8_t character = c-32;
	
	if(n==8){
		for (int i=0; i < n; i++) {
     c28:	82 17       	cp	r24, r18
     c2a:	93 07       	cpc	r25, r19
     c2c:	b9 f7       	brne	.-18     	; 0xc1c <oled_write_char_using_font+0x2e>
     c2e:	08 95       	ret
			oled_write_data(pgm_read_word(&font8[character][i]));
		}
	}else if(n == 5){
     c30:	65 30       	cpi	r22, 0x05	; 5
     c32:	d1 f4       	brne	.+52     	; 0xc68 <oled_write_char_using_font+0x7a>
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	9c 01       	movw	r18, r24
     c38:	22 0f       	add	r18, r18
     c3a:	33 1f       	adc	r19, r19
     c3c:	22 0f       	add	r18, r18
     c3e:	33 1f       	adc	r19, r19
     c40:	82 0f       	add	r24, r18
     c42:	93 1f       	adc	r25, r19
     c44:	20 e0       	ldi	r18, 0x00	; 0
     c46:	30 e0       	ldi	r19, 0x00	; 0
	ext_ram[0] = c;
}
void oled_write_data(char c)
{
	volatile char *ext_ram = (char *) 0x1200;
	ext_ram[0] = c;
     c48:	a0 e0       	ldi	r26, 0x00	; 0
     c4a:	b2 e1       	ldi	r27, 0x12	; 18
		for (int i=0; i < n; i++) {
			oled_write_data(pgm_read_word(&font8[character][i]));
		}
	}else if(n == 5){
		for (int i=0; i < n; i++) {
			oled_write_data(pgm_read_word(&font5[character][i]));
     c4c:	f9 01       	movw	r30, r18
     c4e:	e8 0f       	add	r30, r24
     c50:	f9 1f       	adc	r31, r25
     c52:	e4 51       	subi	r30, 0x14	; 20
     c54:	fe 4f       	sbci	r31, 0xFE	; 254
     c56:	45 91       	lpm	r20, Z+
     c58:	54 91       	lpm	r21, Z
	ext_ram[0] = c;
}
void oled_write_data(char c)
{
	volatile char *ext_ram = (char *) 0x1200;
	ext_ram[0] = c;
     c5a:	4c 93       	st	X, r20
	if(n==8){
		for (int i=0; i < n; i++) {
			oled_write_data(pgm_read_word(&font8[character][i]));
		}
	}else if(n == 5){
		for (int i=0; i < n; i++) {
     c5c:	2f 5f       	subi	r18, 0xFF	; 255
     c5e:	3f 4f       	sbci	r19, 0xFF	; 255
     c60:	25 30       	cpi	r18, 0x05	; 5
     c62:	31 05       	cpc	r19, r1
     c64:	99 f7       	brne	.-26     	; 0xc4c <oled_write_char_using_font+0x5e>
     c66:	08 95       	ret
			oled_write_data(pgm_read_word(&font5[character][i]));
		}
	}else if(n == 4){
     c68:	64 30       	cpi	r22, 0x04	; 4
     c6a:	b1 f4       	brne	.+44     	; 0xc98 <oled_write_char_using_font+0xaa>
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	88 0f       	add	r24, r24
     c70:	99 1f       	adc	r25, r25
     c72:	88 0f       	add	r24, r24
     c74:	99 1f       	adc	r25, r25
     c76:	20 e0       	ldi	r18, 0x00	; 0
     c78:	30 e0       	ldi	r19, 0x00	; 0
	ext_ram[0] = c;
}
void oled_write_data(char c)
{
	volatile char *ext_ram = (char *) 0x1200;
	ext_ram[0] = c;
     c7a:	a0 e0       	ldi	r26, 0x00	; 0
     c7c:	b2 e1       	ldi	r27, 0x12	; 18
		for (int i=0; i < n; i++) {
			oled_write_data(pgm_read_word(&font5[character][i]));
		}
	}else if(n == 4){
		for (int i=0; i < n; i++) {
			oled_write_data(pgm_read_word(&font4[character][i]));
     c7e:	f9 01       	movw	r30, r18
     c80:	e8 0f       	add	r30, r24
     c82:	f9 1f       	adc	r31, r25
     c84:	e0 59       	subi	r30, 0x90	; 144
     c86:	ff 4f       	sbci	r31, 0xFF	; 255
     c88:	45 91       	lpm	r20, Z+
     c8a:	54 91       	lpm	r21, Z
	ext_ram[0] = c;
}
void oled_write_data(char c)
{
	volatile char *ext_ram = (char *) 0x1200;
	ext_ram[0] = c;
     c8c:	4c 93       	st	X, r20
	}else if(n == 5){
		for (int i=0; i < n; i++) {
			oled_write_data(pgm_read_word(&font5[character][i]));
		}
	}else if(n == 4){
		for (int i=0; i < n; i++) {
     c8e:	2f 5f       	subi	r18, 0xFF	; 255
     c90:	3f 4f       	sbci	r19, 0xFF	; 255
     c92:	24 30       	cpi	r18, 0x04	; 4
     c94:	31 05       	cpc	r19, r1
     c96:	99 f7       	brne	.-26     	; 0xc7e <oled_write_char_using_font+0x90>
     c98:	08 95       	ret

00000c9a <oled_write_string>:
			oled_write_data(0x00);
		}
	}
}

void oled_write_string(uint8_t startline, char* c, uint8_t n){
     c9a:	8f 92       	push	r8
     c9c:	9f 92       	push	r9
     c9e:	af 92       	push	r10
     ca0:	bf 92       	push	r11
     ca2:	cf 92       	push	r12
     ca4:	df 92       	push	r13
     ca6:	ef 92       	push	r14
     ca8:	ff 92       	push	r15
     caa:	0f 93       	push	r16
     cac:	1f 93       	push	r17
     cae:	cf 93       	push	r28
     cb0:	df 93       	push	r29
     cb2:	88 2e       	mov	r8, r24
     cb4:	8b 01       	movw	r16, r22
     cb6:	94 2e       	mov	r9, r20
	go_to_line(startline);
     cb8:	0e 94 b8 05 	call	0xb70	; 0xb70 <go_to_line>
     cbc:	78 01       	movw	r14, r16
	
	for (int i=0; i < strlen(c); i++) {
     cbe:	c0 e0       	ldi	r28, 0x00	; 0
     cc0:	d0 e0       	ldi	r29, 0x00	; 0
		if(i%((int)128/n) == 0){
     cc2:	a9 2c       	mov	r10, r9
     cc4:	b1 2c       	mov	r11, r1
     cc6:	68 94       	set
     cc8:	cc 24       	eor	r12, r12
     cca:	c7 f8       	bld	r12, 7
     ccc:	d1 2c       	mov	r13, r1
}

void oled_write_string(uint8_t startline, char* c, uint8_t n){
	go_to_line(startline);
	
	for (int i=0; i < strlen(c); i++) {
     cce:	19 c0       	rjmp	.+50     	; 0xd02 <oled_write_string+0x68>
		if(i%((int)128/n) == 0){
     cd0:	c6 01       	movw	r24, r12
     cd2:	b5 01       	movw	r22, r10
     cd4:	0e 94 a0 07 	call	0xf40	; 0xf40 <__divmodhi4>
     cd8:	9b 01       	movw	r18, r22
     cda:	ce 01       	movw	r24, r28
     cdc:	0e 94 a0 07 	call	0xf40	; 0xf40 <__divmodhi4>
     ce0:	89 2b       	or	r24, r25
     ce2:	41 f4       	brne	.+16     	; 0xcf4 <oled_write_string+0x5a>
			go_to_line(startline+i/((int)128/n));
     ce4:	ce 01       	movw	r24, r28
     ce6:	b9 01       	movw	r22, r18
     ce8:	0e 94 a0 07 	call	0xf40	; 0xf40 <__divmodhi4>
     cec:	88 2d       	mov	r24, r8
     cee:	86 0f       	add	r24, r22
     cf0:	0e 94 b8 05 	call	0xb70	; 0xb70 <go_to_line>
		}
		oled_write_char_using_font(c[i],n);
     cf4:	69 2d       	mov	r22, r9
     cf6:	f7 01       	movw	r30, r14
     cf8:	81 91       	ld	r24, Z+
     cfa:	7f 01       	movw	r14, r30
     cfc:	0e 94 f7 05 	call	0xbee	; 0xbee <oled_write_char_using_font>
}

void oled_write_string(uint8_t startline, char* c, uint8_t n){
	go_to_line(startline);
	
	for (int i=0; i < strlen(c); i++) {
     d00:	21 96       	adiw	r28, 0x01	; 1
     d02:	f8 01       	movw	r30, r16
     d04:	01 90       	ld	r0, Z+
     d06:	00 20       	and	r0, r0
     d08:	e9 f7       	brne	.-6      	; 0xd04 <oled_write_string+0x6a>
     d0a:	31 97       	sbiw	r30, 0x01	; 1
     d0c:	e0 1b       	sub	r30, r16
     d0e:	f1 0b       	sbc	r31, r17
     d10:	ce 17       	cp	r28, r30
     d12:	df 07       	cpc	r29, r31
     d14:	e8 f2       	brcs	.-70     	; 0xcd0 <oled_write_string+0x36>
		}
		oled_write_char_using_font(c[i],n);
		
	}
	
}
     d16:	df 91       	pop	r29
     d18:	cf 91       	pop	r28
     d1a:	1f 91       	pop	r17
     d1c:	0f 91       	pop	r16
     d1e:	ff 90       	pop	r15
     d20:	ef 90       	pop	r14
     d22:	df 90       	pop	r13
     d24:	cf 90       	pop	r12
     d26:	bf 90       	pop	r11
     d28:	af 90       	pop	r10
     d2a:	9f 90       	pop	r9
     d2c:	8f 90       	pop	r8
     d2e:	08 95       	ret

00000d30 <oled_write_inverted_char_using_font>:
	}
	
}

void oled_write_inverted_char_using_font(char c, uint8_t n){
	uint8_t character = c-32;
     d30:	80 52       	subi	r24, 0x20	; 32
	
	if(n==8){
     d32:	68 30       	cpi	r22, 0x08	; 8
     d34:	f9 f4       	brne	.+62     	; 0xd74 <oled_write_inverted_char_using_font+0x44>
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	9c 01       	movw	r18, r24
     d3a:	22 0f       	add	r18, r18
     d3c:	33 1f       	adc	r19, r19
     d3e:	22 0f       	add	r18, r18
     d40:	33 1f       	adc	r19, r19
     d42:	22 0f       	add	r18, r18
     d44:	33 1f       	adc	r19, r19
     d46:	29 53       	subi	r18, 0x39	; 57
     d48:	3c 4f       	sbci	r19, 0xFC	; 252
     d4a:	88 0f       	add	r24, r24
     d4c:	99 1f       	adc	r25, r25
     d4e:	88 0f       	add	r24, r24
     d50:	99 1f       	adc	r25, r25
     d52:	88 0f       	add	r24, r24
     d54:	99 1f       	adc	r25, r25
     d56:	81 53       	subi	r24, 0x31	; 49
     d58:	9c 4f       	sbci	r25, 0xFC	; 252
	ext_ram[0] = c;
}
void oled_write_data(char c)
{
	volatile char *ext_ram = (char *) 0x1200;
	ext_ram[0] = c;
     d5a:	a0 e0       	ldi	r26, 0x00	; 0
     d5c:	b2 e1       	ldi	r27, 0x12	; 18
void oled_write_inverted_char_using_font(char c, uint8_t n){
	uint8_t character = c-32;
	
	if(n==8){
		for (int i=0; i < n; i++) {
			oled_write_data(~pgm_read_word(&font8[character][i]));
     d5e:	f9 01       	movw	r30, r18
     d60:	45 91       	lpm	r20, Z+
     d62:	54 91       	lpm	r21, Z
     d64:	40 95       	com	r20
	ext_ram[0] = c;
}
void oled_write_data(char c)
{
	volatile char *ext_ram = (char *) 0x1200;
	ext_ram[0] = c;
     d66:	4c 93       	st	X, r20
     d68:	2f 5f       	subi	r18, 0xFF	; 255
     d6a:	3f 4f       	sbci	r19, 0xFF	; 255

void oled_write_inverted_char_using_font(char c, uint8_t n){
	uint8_t character = c-32;
	
	if(n==8){
		for (int i=0; i < n; i++) {
     d6c:	82 17       	cp	r24, r18
     d6e:	93 07       	cpc	r25, r19
     d70:	b1 f7       	brne	.-20     	; 0xd5e <oled_write_inverted_char_using_font+0x2e>
     d72:	08 95       	ret
			oled_write_data(~pgm_read_word(&font8[character][i]));
		}
		}else if(n == 5){
     d74:	65 30       	cpi	r22, 0x05	; 5
     d76:	d9 f4       	brne	.+54     	; 0xdae <oled_write_inverted_char_using_font+0x7e>
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	9c 01       	movw	r18, r24
     d7c:	22 0f       	add	r18, r18
     d7e:	33 1f       	adc	r19, r19
     d80:	22 0f       	add	r18, r18
     d82:	33 1f       	adc	r19, r19
     d84:	82 0f       	add	r24, r18
     d86:	93 1f       	adc	r25, r19
     d88:	20 e0       	ldi	r18, 0x00	; 0
     d8a:	30 e0       	ldi	r19, 0x00	; 0
	ext_ram[0] = c;
}
void oled_write_data(char c)
{
	volatile char *ext_ram = (char *) 0x1200;
	ext_ram[0] = c;
     d8c:	a0 e0       	ldi	r26, 0x00	; 0
     d8e:	b2 e1       	ldi	r27, 0x12	; 18
		for (int i=0; i < n; i++) {
			oled_write_data(~pgm_read_word(&font8[character][i]));
		}
		}else if(n == 5){
		for (int i=0; i < n; i++) {
			oled_write_data(~pgm_read_word(&font5[character][i]));
     d90:	f9 01       	movw	r30, r18
     d92:	e8 0f       	add	r30, r24
     d94:	f9 1f       	adc	r31, r25
     d96:	e4 51       	subi	r30, 0x14	; 20
     d98:	fe 4f       	sbci	r31, 0xFE	; 254
     d9a:	45 91       	lpm	r20, Z+
     d9c:	54 91       	lpm	r21, Z
     d9e:	40 95       	com	r20
	ext_ram[0] = c;
}
void oled_write_data(char c)
{
	volatile char *ext_ram = (char *) 0x1200;
	ext_ram[0] = c;
     da0:	4c 93       	st	X, r20
	if(n==8){
		for (int i=0; i < n; i++) {
			oled_write_data(~pgm_read_word(&font8[character][i]));
		}
		}else if(n == 5){
		for (int i=0; i < n; i++) {
     da2:	2f 5f       	subi	r18, 0xFF	; 255
     da4:	3f 4f       	sbci	r19, 0xFF	; 255
     da6:	25 30       	cpi	r18, 0x05	; 5
     da8:	31 05       	cpc	r19, r1
     daa:	91 f7       	brne	.-28     	; 0xd90 <oled_write_inverted_char_using_font+0x60>
     dac:	08 95       	ret
			oled_write_data(~pgm_read_word(&font5[character][i]));
		}
		}else if(n == 4){
     dae:	64 30       	cpi	r22, 0x04	; 4
     db0:	b9 f4       	brne	.+46     	; 0xde0 <oled_write_inverted_char_using_font+0xb0>
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	88 0f       	add	r24, r24
     db6:	99 1f       	adc	r25, r25
     db8:	88 0f       	add	r24, r24
     dba:	99 1f       	adc	r25, r25
     dbc:	20 e0       	ldi	r18, 0x00	; 0
     dbe:	30 e0       	ldi	r19, 0x00	; 0
	ext_ram[0] = c;
}
void oled_write_data(char c)
{
	volatile char *ext_ram = (char *) 0x1200;
	ext_ram[0] = c;
     dc0:	a0 e0       	ldi	r26, 0x00	; 0
     dc2:	b2 e1       	ldi	r27, 0x12	; 18
		for (int i=0; i < n; i++) {
			oled_write_data(~pgm_read_word(&font5[character][i]));
		}
		}else if(n == 4){
		for (int i=0; i < n; i++) {
			oled_write_data(~pgm_read_word(&font4[character][i]));
     dc4:	f9 01       	movw	r30, r18
     dc6:	e8 0f       	add	r30, r24
     dc8:	f9 1f       	adc	r31, r25
     dca:	e0 59       	subi	r30, 0x90	; 144
     dcc:	ff 4f       	sbci	r31, 0xFF	; 255
     dce:	45 91       	lpm	r20, Z+
     dd0:	54 91       	lpm	r21, Z
     dd2:	40 95       	com	r20
	ext_ram[0] = c;
}
void oled_write_data(char c)
{
	volatile char *ext_ram = (char *) 0x1200;
	ext_ram[0] = c;
     dd4:	4c 93       	st	X, r20
		}else if(n == 5){
		for (int i=0; i < n; i++) {
			oled_write_data(~pgm_read_word(&font5[character][i]));
		}
		}else if(n == 4){
		for (int i=0; i < n; i++) {
     dd6:	2f 5f       	subi	r18, 0xFF	; 255
     dd8:	3f 4f       	sbci	r19, 0xFF	; 255
     dda:	24 30       	cpi	r18, 0x04	; 4
     ddc:	31 05       	cpc	r19, r1
     dde:	91 f7       	brne	.-28     	; 0xdc4 <oled_write_inverted_char_using_font+0x94>
     de0:	08 95       	ret

00000de2 <oled_write_string_inverted>:
		
	}
	
}

void oled_write_string_inverted(uint8_t startline, char* c, uint8_t n){
     de2:	8f 92       	push	r8
     de4:	9f 92       	push	r9
     de6:	af 92       	push	r10
     de8:	bf 92       	push	r11
     dea:	cf 92       	push	r12
     dec:	df 92       	push	r13
     dee:	ef 92       	push	r14
     df0:	ff 92       	push	r15
     df2:	0f 93       	push	r16
     df4:	1f 93       	push	r17
     df6:	cf 93       	push	r28
     df8:	df 93       	push	r29
     dfa:	88 2e       	mov	r8, r24
     dfc:	8b 01       	movw	r16, r22
     dfe:	94 2e       	mov	r9, r20
	go_to_line(startline);
     e00:	0e 94 b8 05 	call	0xb70	; 0xb70 <go_to_line>
     e04:	78 01       	movw	r14, r16
	
	for (int i=0; i < strlen(c); i++) {
     e06:	c0 e0       	ldi	r28, 0x00	; 0
     e08:	d0 e0       	ldi	r29, 0x00	; 0
		if(i%((int)128/n) == 0){
     e0a:	a9 2c       	mov	r10, r9
     e0c:	b1 2c       	mov	r11, r1
     e0e:	68 94       	set
     e10:	cc 24       	eor	r12, r12
     e12:	c7 f8       	bld	r12, 7
     e14:	d1 2c       	mov	r13, r1
}

void oled_write_string_inverted(uint8_t startline, char* c, uint8_t n){
	go_to_line(startline);
	
	for (int i=0; i < strlen(c); i++) {
     e16:	19 c0       	rjmp	.+50     	; 0xe4a <oled_write_string_inverted+0x68>
		if(i%((int)128/n) == 0){
     e18:	c6 01       	movw	r24, r12
     e1a:	b5 01       	movw	r22, r10
     e1c:	0e 94 a0 07 	call	0xf40	; 0xf40 <__divmodhi4>
     e20:	9b 01       	movw	r18, r22
     e22:	ce 01       	movw	r24, r28
     e24:	0e 94 a0 07 	call	0xf40	; 0xf40 <__divmodhi4>
     e28:	89 2b       	or	r24, r25
     e2a:	41 f4       	brne	.+16     	; 0xe3c <oled_write_string_inverted+0x5a>
			go_to_line(startline+i/((int)128/n));
     e2c:	ce 01       	movw	r24, r28
     e2e:	b9 01       	movw	r22, r18
     e30:	0e 94 a0 07 	call	0xf40	; 0xf40 <__divmodhi4>
     e34:	88 2d       	mov	r24, r8
     e36:	86 0f       	add	r24, r22
     e38:	0e 94 b8 05 	call	0xb70	; 0xb70 <go_to_line>
		}
		oled_write_inverted_char_using_font(c[i],n);
     e3c:	69 2d       	mov	r22, r9
     e3e:	f7 01       	movw	r30, r14
     e40:	81 91       	ld	r24, Z+
     e42:	7f 01       	movw	r14, r30
     e44:	0e 94 98 06 	call	0xd30	; 0xd30 <oled_write_inverted_char_using_font>
}

void oled_write_string_inverted(uint8_t startline, char* c, uint8_t n){
	go_to_line(startline);
	
	for (int i=0; i < strlen(c); i++) {
     e48:	21 96       	adiw	r28, 0x01	; 1
     e4a:	f8 01       	movw	r30, r16
     e4c:	01 90       	ld	r0, Z+
     e4e:	00 20       	and	r0, r0
     e50:	e9 f7       	brne	.-6      	; 0xe4c <oled_write_string_inverted+0x6a>
     e52:	31 97       	sbiw	r30, 0x01	; 1
     e54:	e0 1b       	sub	r30, r16
     e56:	f1 0b       	sbc	r31, r17
     e58:	ce 17       	cp	r28, r30
     e5a:	df 07       	cpc	r29, r31
     e5c:	e8 f2       	brcs	.-70     	; 0xe18 <oled_write_string_inverted+0x36>
		}
		oled_write_inverted_char_using_font(c[i],n);
		
	}
	
}
     e5e:	df 91       	pop	r29
     e60:	cf 91       	pop	r28
     e62:	1f 91       	pop	r17
     e64:	0f 91       	pop	r16
     e66:	ff 90       	pop	r15
     e68:	ef 90       	pop	r14
     e6a:	df 90       	pop	r13
     e6c:	cf 90       	pop	r12
     e6e:	bf 90       	pop	r11
     e70:	af 90       	pop	r10
     e72:	9f 90       	pop	r9
     e74:	8f 90       	pop	r8
     e76:	08 95       	ret

00000e78 <SRAM_test>:
#include "sram_test.h"
    void SRAM_test(void)
    {
     e78:	ef 92       	push	r14
     e7a:	ff 92       	push	r15
     e7c:	0f 93       	push	r16
     e7e:	1f 93       	push	r17
     e80:	cf 93       	push	r28
     e82:	df 93       	push	r29
		volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
        uint16_t ext_ram_size = 0x800;
        uint16_t write_errors = 0;
        uint16_t retrieval_errors = 0;
        printf("Starting SRAM test...\n");
     e84:	82 e3       	ldi	r24, 0x32	; 50
     e86:	91 e0       	ldi	r25, 0x01	; 1
     e88:	0e 94 ad 09 	call	0x135a	; 0x135a <puts>
        // rand() stores some internal state, so calling this function in a loop will
        // yield different seeds each time (unless srand() is called before this function)
        uint16_t seed = rand();
     e8c:	0e 94 35 09 	call	0x126a	; 0x126a <rand>
     e90:	7c 01       	movw	r14, r24
        // Write phase: Immediately check that the correct value was stored
        srand(seed);
     e92:	0e 94 3a 09 	call	0x1274	; 0x1274 <srand>
     e96:	c0 e0       	ldi	r28, 0x00	; 0
     e98:	d8 e1       	ldi	r29, 0x18	; 24
#include "sram_test.h"
    void SRAM_test(void)
    {
		volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
        uint16_t ext_ram_size = 0x800;
        uint16_t write_errors = 0;
     e9a:	00 e0       	ldi	r16, 0x00	; 0
     e9c:	10 e0       	ldi	r17, 0x00	; 0
        // yield different seeds each time (unless srand() is called before this function)
        uint16_t seed = rand();
        // Write phase: Immediately check that the correct value was stored
        srand(seed);
        for (uint16_t i = 0; i < ext_ram_size; i++) {
            uint8_t some_value = rand();
     e9e:	0e 94 35 09 	call	0x126a	; 0x126a <rand>
            ext_ram[i] = some_value;
     ea2:	88 83       	st	Y, r24
            uint8_t retreived_value = ext_ram[i];
     ea4:	98 81       	ld	r25, Y
            if (retreived_value != some_value) {
     ea6:	89 17       	cp	r24, r25
     ea8:	11 f0       	breq	.+4      	; 0xeae <SRAM_test+0x36>
                //printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
                write_errors++;
     eaa:	0f 5f       	subi	r16, 0xFF	; 255
     eac:	1f 4f       	sbci	r17, 0xFF	; 255
     eae:	21 96       	adiw	r28, 0x01	; 1
        // rand() stores some internal state, so calling this function in a loop will
        // yield different seeds each time (unless srand() is called before this function)
        uint16_t seed = rand();
        // Write phase: Immediately check that the correct value was stored
        srand(seed);
        for (uint16_t i = 0; i < ext_ram_size; i++) {
     eb0:	c1 15       	cp	r28, r1
     eb2:	80 e2       	ldi	r24, 0x20	; 32
     eb4:	d8 07       	cpc	r29, r24
     eb6:	99 f7       	brne	.-26     	; 0xe9e <SRAM_test+0x26>
                //printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
                write_errors++;
            }
        }
        // Retrieval phase: Check that no values were changed during or after the write phase
        srand(seed);
     eb8:	c7 01       	movw	r24, r14
     eba:	0e 94 3a 09 	call	0x1274	; 0x1274 <srand>
     ebe:	c0 e0       	ldi	r28, 0x00	; 0
     ec0:	d8 e1       	ldi	r29, 0x18	; 24
    void SRAM_test(void)
    {
		volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
        uint16_t ext_ram_size = 0x800;
        uint16_t write_errors = 0;
        uint16_t retrieval_errors = 0;
     ec2:	e1 2c       	mov	r14, r1
     ec4:	f1 2c       	mov	r15, r1
        }
        // Retrieval phase: Check that no values were changed during or after the write phase
        srand(seed);
        // reset the PRNG to the state it had before the write phase
        for (uint16_t i = 0; i < ext_ram_size; i++) {
            uint8_t some_value = rand();
     ec6:	0e 94 35 09 	call	0x126a	; 0x126a <rand>
            uint8_t retreived_value = ext_ram[i];
     eca:	98 81       	ld	r25, Y
            if (retreived_value != some_value) {
     ecc:	98 17       	cp	r25, r24
     ece:	19 f0       	breq	.+6      	; 0xed6 <SRAM_test+0x5e>
               // printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
                retrieval_errors++;
     ed0:	8f ef       	ldi	r24, 0xFF	; 255
     ed2:	e8 1a       	sub	r14, r24
     ed4:	f8 0a       	sbc	r15, r24
     ed6:	21 96       	adiw	r28, 0x01	; 1
            }
        }
        // Retrieval phase: Check that no values were changed during or after the write phase
        srand(seed);
        // reset the PRNG to the state it had before the write phase
        for (uint16_t i = 0; i < ext_ram_size; i++) {
     ed8:	c1 15       	cp	r28, r1
     eda:	80 e2       	ldi	r24, 0x20	; 32
     edc:	d8 07       	cpc	r29, r24
     ede:	99 f7       	brne	.-26     	; 0xec6 <SRAM_test+0x4e>
            if (retreived_value != some_value) {
               // printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
                retrieval_errors++;
            }
        }
        printf("SRAM test completed with \n%4d errors in write phase and \n%4d errors in retrieval phase\n\n", write_errors, retrieval_errors);
     ee0:	ff 92       	push	r15
     ee2:	ef 92       	push	r14
     ee4:	1f 93       	push	r17
     ee6:	0f 93       	push	r16
     ee8:	88 e4       	ldi	r24, 0x48	; 72
     eea:	91 e0       	ldi	r25, 0x01	; 1
     eec:	9f 93       	push	r25
     eee:	8f 93       	push	r24
     ef0:	0e 94 90 09 	call	0x1320	; 0x1320 <printf>
     ef4:	0f 90       	pop	r0
     ef6:	0f 90       	pop	r0
     ef8:	0f 90       	pop	r0
     efa:	0f 90       	pop	r0
     efc:	0f 90       	pop	r0
     efe:	0f 90       	pop	r0
     f00:	df 91       	pop	r29
     f02:	cf 91       	pop	r28
     f04:	1f 91       	pop	r17
     f06:	0f 91       	pop	r16
     f08:	ff 90       	pop	r15
     f0a:	ef 90       	pop	r14
     f0c:	08 95       	ret

00000f0e <USART_Transmit>:
	UCSR1C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
	clear_bit(UCSR0C, 0); // Clock polarity
	fdevopen(USART_Transmit, USART_Receive);
}
void USART_Transmit(unsigned char data){
	while (!(UCSR0A & (1<<UDRE0)));
     f0e:	5d 9b       	sbis	0x0b, 5	; 11
     f10:	fe cf       	rjmp	.-4      	; 0xf0e <USART_Transmit>
	
	UDR0 = data;
     f12:	8c b9       	out	0x0c, r24	; 12
     f14:	08 95       	ret

00000f16 <USART_Receive>:
}

unsigned int USART_Receive(void)
{
	
	while (!(UCSR0A & (1<<RXC0)));
     f16:	5f 9b       	sbis	0x0b, 7	; 11
     f18:	fe cf       	rjmp	.-4      	; 0xf16 <USART_Receive>
	

	return UDR0;
     f1a:	8c b1       	in	r24, 0x0c	; 12
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	08 95       	ret

00000f20 <USART_Init>:
#include <stdio.h>
#define clear_bit( reg, bit ) (reg &= ~(1 << bit))

void USART_Init (unsigned int ubrr ){
	
	UBRR0H = (unsigned char)(ubrr>>8);
     f20:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)ubrr;
     f22:	89 b9       	out	0x09, r24	; 9
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     f24:	88 e1       	ldi	r24, 0x18	; 24
     f26:	8a b9       	out	0x0a, r24	; 10
	
	UCSR1C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
     f28:	8e e8       	ldi	r24, 0x8E	; 142
     f2a:	8c bf       	out	0x3c, r24	; 60
	clear_bit(UCSR0C, 0); // Clock polarity
     f2c:	80 b5       	in	r24, 0x20	; 32
     f2e:	8e 7f       	andi	r24, 0xFE	; 254
     f30:	80 bd       	out	0x20, r24	; 32
	fdevopen(USART_Transmit, USART_Receive);
     f32:	6b e8       	ldi	r22, 0x8B	; 139
     f34:	77 e0       	ldi	r23, 0x07	; 7
     f36:	87 e8       	ldi	r24, 0x87	; 135
     f38:	97 e0       	ldi	r25, 0x07	; 7
     f3a:	0e 94 45 09 	call	0x128a	; 0x128a <fdevopen>
     f3e:	08 95       	ret

00000f40 <__divmodhi4>:
     f40:	97 fb       	bst	r25, 7
     f42:	07 2e       	mov	r0, r23
     f44:	16 f4       	brtc	.+4      	; 0xf4a <__divmodhi4+0xa>
     f46:	00 94       	com	r0
     f48:	07 d0       	rcall	.+14     	; 0xf58 <__divmodhi4_neg1>
     f4a:	77 fd       	sbrc	r23, 7
     f4c:	09 d0       	rcall	.+18     	; 0xf60 <__divmodhi4_neg2>
     f4e:	0e 94 b4 07 	call	0xf68	; 0xf68 <__udivmodhi4>
     f52:	07 fc       	sbrc	r0, 7
     f54:	05 d0       	rcall	.+10     	; 0xf60 <__divmodhi4_neg2>
     f56:	3e f4       	brtc	.+14     	; 0xf66 <__divmodhi4_exit>

00000f58 <__divmodhi4_neg1>:
     f58:	90 95       	com	r25
     f5a:	81 95       	neg	r24
     f5c:	9f 4f       	sbci	r25, 0xFF	; 255
     f5e:	08 95       	ret

00000f60 <__divmodhi4_neg2>:
     f60:	70 95       	com	r23
     f62:	61 95       	neg	r22
     f64:	7f 4f       	sbci	r23, 0xFF	; 255

00000f66 <__divmodhi4_exit>:
     f66:	08 95       	ret

00000f68 <__udivmodhi4>:
     f68:	aa 1b       	sub	r26, r26
     f6a:	bb 1b       	sub	r27, r27
     f6c:	51 e1       	ldi	r21, 0x11	; 17
     f6e:	07 c0       	rjmp	.+14     	; 0xf7e <__udivmodhi4_ep>

00000f70 <__udivmodhi4_loop>:
     f70:	aa 1f       	adc	r26, r26
     f72:	bb 1f       	adc	r27, r27
     f74:	a6 17       	cp	r26, r22
     f76:	b7 07       	cpc	r27, r23
     f78:	10 f0       	brcs	.+4      	; 0xf7e <__udivmodhi4_ep>
     f7a:	a6 1b       	sub	r26, r22
     f7c:	b7 0b       	sbc	r27, r23

00000f7e <__udivmodhi4_ep>:
     f7e:	88 1f       	adc	r24, r24
     f80:	99 1f       	adc	r25, r25
     f82:	5a 95       	dec	r21
     f84:	a9 f7       	brne	.-22     	; 0xf70 <__udivmodhi4_loop>
     f86:	80 95       	com	r24
     f88:	90 95       	com	r25
     f8a:	bc 01       	movw	r22, r24
     f8c:	cd 01       	movw	r24, r26
     f8e:	08 95       	ret

00000f90 <malloc>:
     f90:	0f 93       	push	r16
     f92:	1f 93       	push	r17
     f94:	cf 93       	push	r28
     f96:	df 93       	push	r29
     f98:	82 30       	cpi	r24, 0x02	; 2
     f9a:	91 05       	cpc	r25, r1
     f9c:	10 f4       	brcc	.+4      	; 0xfa2 <malloc+0x12>
     f9e:	82 e0       	ldi	r24, 0x02	; 2
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	e0 91 a4 01 	lds	r30, 0x01A4	; 0x8001a4 <__flp>
     fa6:	f0 91 a5 01 	lds	r31, 0x01A5	; 0x8001a5 <__flp+0x1>
     faa:	20 e0       	ldi	r18, 0x00	; 0
     fac:	30 e0       	ldi	r19, 0x00	; 0
     fae:	a0 e0       	ldi	r26, 0x00	; 0
     fb0:	b0 e0       	ldi	r27, 0x00	; 0
     fb2:	30 97       	sbiw	r30, 0x00	; 0
     fb4:	19 f1       	breq	.+70     	; 0xffc <malloc+0x6c>
     fb6:	40 81       	ld	r20, Z
     fb8:	51 81       	ldd	r21, Z+1	; 0x01
     fba:	02 81       	ldd	r16, Z+2	; 0x02
     fbc:	13 81       	ldd	r17, Z+3	; 0x03
     fbe:	48 17       	cp	r20, r24
     fc0:	59 07       	cpc	r21, r25
     fc2:	c8 f0       	brcs	.+50     	; 0xff6 <malloc+0x66>
     fc4:	84 17       	cp	r24, r20
     fc6:	95 07       	cpc	r25, r21
     fc8:	69 f4       	brne	.+26     	; 0xfe4 <malloc+0x54>
     fca:	10 97       	sbiw	r26, 0x00	; 0
     fcc:	31 f0       	breq	.+12     	; 0xfda <malloc+0x4a>
     fce:	12 96       	adiw	r26, 0x02	; 2
     fd0:	0c 93       	st	X, r16
     fd2:	12 97       	sbiw	r26, 0x02	; 2
     fd4:	13 96       	adiw	r26, 0x03	; 3
     fd6:	1c 93       	st	X, r17
     fd8:	27 c0       	rjmp	.+78     	; 0x1028 <malloc+0x98>
     fda:	00 93 a4 01 	sts	0x01A4, r16	; 0x8001a4 <__flp>
     fde:	10 93 a5 01 	sts	0x01A5, r17	; 0x8001a5 <__flp+0x1>
     fe2:	22 c0       	rjmp	.+68     	; 0x1028 <malloc+0x98>
     fe4:	21 15       	cp	r18, r1
     fe6:	31 05       	cpc	r19, r1
     fe8:	19 f0       	breq	.+6      	; 0xff0 <malloc+0x60>
     fea:	42 17       	cp	r20, r18
     fec:	53 07       	cpc	r21, r19
     fee:	18 f4       	brcc	.+6      	; 0xff6 <malloc+0x66>
     ff0:	9a 01       	movw	r18, r20
     ff2:	bd 01       	movw	r22, r26
     ff4:	ef 01       	movw	r28, r30
     ff6:	df 01       	movw	r26, r30
     ff8:	f8 01       	movw	r30, r16
     ffa:	db cf       	rjmp	.-74     	; 0xfb2 <malloc+0x22>
     ffc:	21 15       	cp	r18, r1
     ffe:	31 05       	cpc	r19, r1
    1000:	f9 f0       	breq	.+62     	; 0x1040 <malloc+0xb0>
    1002:	28 1b       	sub	r18, r24
    1004:	39 0b       	sbc	r19, r25
    1006:	24 30       	cpi	r18, 0x04	; 4
    1008:	31 05       	cpc	r19, r1
    100a:	80 f4       	brcc	.+32     	; 0x102c <malloc+0x9c>
    100c:	8a 81       	ldd	r24, Y+2	; 0x02
    100e:	9b 81       	ldd	r25, Y+3	; 0x03
    1010:	61 15       	cp	r22, r1
    1012:	71 05       	cpc	r23, r1
    1014:	21 f0       	breq	.+8      	; 0x101e <malloc+0x8e>
    1016:	fb 01       	movw	r30, r22
    1018:	93 83       	std	Z+3, r25	; 0x03
    101a:	82 83       	std	Z+2, r24	; 0x02
    101c:	04 c0       	rjmp	.+8      	; 0x1026 <malloc+0x96>
    101e:	90 93 a5 01 	sts	0x01A5, r25	; 0x8001a5 <__flp+0x1>
    1022:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <__flp>
    1026:	fe 01       	movw	r30, r28
    1028:	32 96       	adiw	r30, 0x02	; 2
    102a:	44 c0       	rjmp	.+136    	; 0x10b4 <malloc+0x124>
    102c:	fe 01       	movw	r30, r28
    102e:	e2 0f       	add	r30, r18
    1030:	f3 1f       	adc	r31, r19
    1032:	81 93       	st	Z+, r24
    1034:	91 93       	st	Z+, r25
    1036:	22 50       	subi	r18, 0x02	; 2
    1038:	31 09       	sbc	r19, r1
    103a:	39 83       	std	Y+1, r19	; 0x01
    103c:	28 83       	st	Y, r18
    103e:	3a c0       	rjmp	.+116    	; 0x10b4 <malloc+0x124>
    1040:	20 91 a2 01 	lds	r18, 0x01A2	; 0x8001a2 <__data_end>
    1044:	30 91 a3 01 	lds	r19, 0x01A3	; 0x8001a3 <__data_end+0x1>
    1048:	23 2b       	or	r18, r19
    104a:	41 f4       	brne	.+16     	; 0x105c <malloc+0xcc>
    104c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    1050:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    1054:	30 93 a3 01 	sts	0x01A3, r19	; 0x8001a3 <__data_end+0x1>
    1058:	20 93 a2 01 	sts	0x01A2, r18	; 0x8001a2 <__data_end>
    105c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    1060:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    1064:	21 15       	cp	r18, r1
    1066:	31 05       	cpc	r19, r1
    1068:	41 f4       	brne	.+16     	; 0x107a <malloc+0xea>
    106a:	2d b7       	in	r18, 0x3d	; 61
    106c:	3e b7       	in	r19, 0x3e	; 62
    106e:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1072:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1076:	24 1b       	sub	r18, r20
    1078:	35 0b       	sbc	r19, r21
    107a:	e0 91 a2 01 	lds	r30, 0x01A2	; 0x8001a2 <__data_end>
    107e:	f0 91 a3 01 	lds	r31, 0x01A3	; 0x8001a3 <__data_end+0x1>
    1082:	e2 17       	cp	r30, r18
    1084:	f3 07       	cpc	r31, r19
    1086:	a0 f4       	brcc	.+40     	; 0x10b0 <malloc+0x120>
    1088:	2e 1b       	sub	r18, r30
    108a:	3f 0b       	sbc	r19, r31
    108c:	28 17       	cp	r18, r24
    108e:	39 07       	cpc	r19, r25
    1090:	78 f0       	brcs	.+30     	; 0x10b0 <malloc+0x120>
    1092:	ac 01       	movw	r20, r24
    1094:	4e 5f       	subi	r20, 0xFE	; 254
    1096:	5f 4f       	sbci	r21, 0xFF	; 255
    1098:	24 17       	cp	r18, r20
    109a:	35 07       	cpc	r19, r21
    109c:	48 f0       	brcs	.+18     	; 0x10b0 <malloc+0x120>
    109e:	4e 0f       	add	r20, r30
    10a0:	5f 1f       	adc	r21, r31
    10a2:	50 93 a3 01 	sts	0x01A3, r21	; 0x8001a3 <__data_end+0x1>
    10a6:	40 93 a2 01 	sts	0x01A2, r20	; 0x8001a2 <__data_end>
    10aa:	81 93       	st	Z+, r24
    10ac:	91 93       	st	Z+, r25
    10ae:	02 c0       	rjmp	.+4      	; 0x10b4 <malloc+0x124>
    10b0:	e0 e0       	ldi	r30, 0x00	; 0
    10b2:	f0 e0       	ldi	r31, 0x00	; 0
    10b4:	cf 01       	movw	r24, r30
    10b6:	df 91       	pop	r29
    10b8:	cf 91       	pop	r28
    10ba:	1f 91       	pop	r17
    10bc:	0f 91       	pop	r16
    10be:	08 95       	ret

000010c0 <free>:
    10c0:	cf 93       	push	r28
    10c2:	df 93       	push	r29
    10c4:	00 97       	sbiw	r24, 0x00	; 0
    10c6:	09 f4       	brne	.+2      	; 0x10ca <free+0xa>
    10c8:	81 c0       	rjmp	.+258    	; 0x11cc <free+0x10c>
    10ca:	fc 01       	movw	r30, r24
    10cc:	32 97       	sbiw	r30, 0x02	; 2
    10ce:	13 82       	std	Z+3, r1	; 0x03
    10d0:	12 82       	std	Z+2, r1	; 0x02
    10d2:	a0 91 a4 01 	lds	r26, 0x01A4	; 0x8001a4 <__flp>
    10d6:	b0 91 a5 01 	lds	r27, 0x01A5	; 0x8001a5 <__flp+0x1>
    10da:	10 97       	sbiw	r26, 0x00	; 0
    10dc:	81 f4       	brne	.+32     	; 0x10fe <free+0x3e>
    10de:	20 81       	ld	r18, Z
    10e0:	31 81       	ldd	r19, Z+1	; 0x01
    10e2:	82 0f       	add	r24, r18
    10e4:	93 1f       	adc	r25, r19
    10e6:	20 91 a2 01 	lds	r18, 0x01A2	; 0x8001a2 <__data_end>
    10ea:	30 91 a3 01 	lds	r19, 0x01A3	; 0x8001a3 <__data_end+0x1>
    10ee:	28 17       	cp	r18, r24
    10f0:	39 07       	cpc	r19, r25
    10f2:	51 f5       	brne	.+84     	; 0x1148 <free+0x88>
    10f4:	f0 93 a3 01 	sts	0x01A3, r31	; 0x8001a3 <__data_end+0x1>
    10f8:	e0 93 a2 01 	sts	0x01A2, r30	; 0x8001a2 <__data_end>
    10fc:	67 c0       	rjmp	.+206    	; 0x11cc <free+0x10c>
    10fe:	ed 01       	movw	r28, r26
    1100:	20 e0       	ldi	r18, 0x00	; 0
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	ce 17       	cp	r28, r30
    1106:	df 07       	cpc	r29, r31
    1108:	40 f4       	brcc	.+16     	; 0x111a <free+0x5a>
    110a:	4a 81       	ldd	r20, Y+2	; 0x02
    110c:	5b 81       	ldd	r21, Y+3	; 0x03
    110e:	9e 01       	movw	r18, r28
    1110:	41 15       	cp	r20, r1
    1112:	51 05       	cpc	r21, r1
    1114:	f1 f0       	breq	.+60     	; 0x1152 <free+0x92>
    1116:	ea 01       	movw	r28, r20
    1118:	f5 cf       	rjmp	.-22     	; 0x1104 <free+0x44>
    111a:	d3 83       	std	Z+3, r29	; 0x03
    111c:	c2 83       	std	Z+2, r28	; 0x02
    111e:	40 81       	ld	r20, Z
    1120:	51 81       	ldd	r21, Z+1	; 0x01
    1122:	84 0f       	add	r24, r20
    1124:	95 1f       	adc	r25, r21
    1126:	c8 17       	cp	r28, r24
    1128:	d9 07       	cpc	r29, r25
    112a:	59 f4       	brne	.+22     	; 0x1142 <free+0x82>
    112c:	88 81       	ld	r24, Y
    112e:	99 81       	ldd	r25, Y+1	; 0x01
    1130:	84 0f       	add	r24, r20
    1132:	95 1f       	adc	r25, r21
    1134:	02 96       	adiw	r24, 0x02	; 2
    1136:	91 83       	std	Z+1, r25	; 0x01
    1138:	80 83       	st	Z, r24
    113a:	8a 81       	ldd	r24, Y+2	; 0x02
    113c:	9b 81       	ldd	r25, Y+3	; 0x03
    113e:	93 83       	std	Z+3, r25	; 0x03
    1140:	82 83       	std	Z+2, r24	; 0x02
    1142:	21 15       	cp	r18, r1
    1144:	31 05       	cpc	r19, r1
    1146:	29 f4       	brne	.+10     	; 0x1152 <free+0x92>
    1148:	f0 93 a5 01 	sts	0x01A5, r31	; 0x8001a5 <__flp+0x1>
    114c:	e0 93 a4 01 	sts	0x01A4, r30	; 0x8001a4 <__flp>
    1150:	3d c0       	rjmp	.+122    	; 0x11cc <free+0x10c>
    1152:	e9 01       	movw	r28, r18
    1154:	fb 83       	std	Y+3, r31	; 0x03
    1156:	ea 83       	std	Y+2, r30	; 0x02
    1158:	49 91       	ld	r20, Y+
    115a:	59 91       	ld	r21, Y+
    115c:	c4 0f       	add	r28, r20
    115e:	d5 1f       	adc	r29, r21
    1160:	ec 17       	cp	r30, r28
    1162:	fd 07       	cpc	r31, r29
    1164:	61 f4       	brne	.+24     	; 0x117e <free+0xbe>
    1166:	80 81       	ld	r24, Z
    1168:	91 81       	ldd	r25, Z+1	; 0x01
    116a:	84 0f       	add	r24, r20
    116c:	95 1f       	adc	r25, r21
    116e:	02 96       	adiw	r24, 0x02	; 2
    1170:	e9 01       	movw	r28, r18
    1172:	99 83       	std	Y+1, r25	; 0x01
    1174:	88 83       	st	Y, r24
    1176:	82 81       	ldd	r24, Z+2	; 0x02
    1178:	93 81       	ldd	r25, Z+3	; 0x03
    117a:	9b 83       	std	Y+3, r25	; 0x03
    117c:	8a 83       	std	Y+2, r24	; 0x02
    117e:	e0 e0       	ldi	r30, 0x00	; 0
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	12 96       	adiw	r26, 0x02	; 2
    1184:	8d 91       	ld	r24, X+
    1186:	9c 91       	ld	r25, X
    1188:	13 97       	sbiw	r26, 0x03	; 3
    118a:	00 97       	sbiw	r24, 0x00	; 0
    118c:	19 f0       	breq	.+6      	; 0x1194 <free+0xd4>
    118e:	fd 01       	movw	r30, r26
    1190:	dc 01       	movw	r26, r24
    1192:	f7 cf       	rjmp	.-18     	; 0x1182 <free+0xc2>
    1194:	8d 91       	ld	r24, X+
    1196:	9c 91       	ld	r25, X
    1198:	11 97       	sbiw	r26, 0x01	; 1
    119a:	9d 01       	movw	r18, r26
    119c:	2e 5f       	subi	r18, 0xFE	; 254
    119e:	3f 4f       	sbci	r19, 0xFF	; 255
    11a0:	82 0f       	add	r24, r18
    11a2:	93 1f       	adc	r25, r19
    11a4:	20 91 a2 01 	lds	r18, 0x01A2	; 0x8001a2 <__data_end>
    11a8:	30 91 a3 01 	lds	r19, 0x01A3	; 0x8001a3 <__data_end+0x1>
    11ac:	28 17       	cp	r18, r24
    11ae:	39 07       	cpc	r19, r25
    11b0:	69 f4       	brne	.+26     	; 0x11cc <free+0x10c>
    11b2:	30 97       	sbiw	r30, 0x00	; 0
    11b4:	29 f4       	brne	.+10     	; 0x11c0 <free+0x100>
    11b6:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <__flp+0x1>
    11ba:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <__flp>
    11be:	02 c0       	rjmp	.+4      	; 0x11c4 <free+0x104>
    11c0:	13 82       	std	Z+3, r1	; 0x03
    11c2:	12 82       	std	Z+2, r1	; 0x02
    11c4:	b0 93 a3 01 	sts	0x01A3, r27	; 0x8001a3 <__data_end+0x1>
    11c8:	a0 93 a2 01 	sts	0x01A2, r26	; 0x8001a2 <__data_end>
    11cc:	df 91       	pop	r29
    11ce:	cf 91       	pop	r28
    11d0:	08 95       	ret

000011d2 <do_rand>:
    11d2:	8f 92       	push	r8
    11d4:	9f 92       	push	r9
    11d6:	af 92       	push	r10
    11d8:	bf 92       	push	r11
    11da:	cf 92       	push	r12
    11dc:	df 92       	push	r13
    11de:	ef 92       	push	r14
    11e0:	ff 92       	push	r15
    11e2:	cf 93       	push	r28
    11e4:	df 93       	push	r29
    11e6:	ec 01       	movw	r28, r24
    11e8:	68 81       	ld	r22, Y
    11ea:	79 81       	ldd	r23, Y+1	; 0x01
    11ec:	8a 81       	ldd	r24, Y+2	; 0x02
    11ee:	9b 81       	ldd	r25, Y+3	; 0x03
    11f0:	61 15       	cp	r22, r1
    11f2:	71 05       	cpc	r23, r1
    11f4:	81 05       	cpc	r24, r1
    11f6:	91 05       	cpc	r25, r1
    11f8:	21 f4       	brne	.+8      	; 0x1202 <do_rand+0x30>
    11fa:	64 e2       	ldi	r22, 0x24	; 36
    11fc:	79 ed       	ldi	r23, 0xD9	; 217
    11fe:	8b e5       	ldi	r24, 0x5B	; 91
    1200:	97 e0       	ldi	r25, 0x07	; 7
    1202:	2d e1       	ldi	r18, 0x1D	; 29
    1204:	33 ef       	ldi	r19, 0xF3	; 243
    1206:	41 e0       	ldi	r20, 0x01	; 1
    1208:	50 e0       	ldi	r21, 0x00	; 0
    120a:	0e 94 91 0c 	call	0x1922	; 0x1922 <__divmodsi4>
    120e:	49 01       	movw	r8, r18
    1210:	5a 01       	movw	r10, r20
    1212:	9b 01       	movw	r18, r22
    1214:	ac 01       	movw	r20, r24
    1216:	a7 ea       	ldi	r26, 0xA7	; 167
    1218:	b1 e4       	ldi	r27, 0x41	; 65
    121a:	0e 94 b0 0c 	call	0x1960	; 0x1960 <__muluhisi3>
    121e:	6b 01       	movw	r12, r22
    1220:	7c 01       	movw	r14, r24
    1222:	ac ee       	ldi	r26, 0xEC	; 236
    1224:	b4 ef       	ldi	r27, 0xF4	; 244
    1226:	a5 01       	movw	r20, r10
    1228:	94 01       	movw	r18, r8
    122a:	0e 94 be 0c 	call	0x197c	; 0x197c <__mulohisi3>
    122e:	dc 01       	movw	r26, r24
    1230:	cb 01       	movw	r24, r22
    1232:	8c 0d       	add	r24, r12
    1234:	9d 1d       	adc	r25, r13
    1236:	ae 1d       	adc	r26, r14
    1238:	bf 1d       	adc	r27, r15
    123a:	b7 ff       	sbrs	r27, 7
    123c:	03 c0       	rjmp	.+6      	; 0x1244 <do_rand+0x72>
    123e:	01 97       	sbiw	r24, 0x01	; 1
    1240:	a1 09       	sbc	r26, r1
    1242:	b0 48       	sbci	r27, 0x80	; 128
    1244:	88 83       	st	Y, r24
    1246:	99 83       	std	Y+1, r25	; 0x01
    1248:	aa 83       	std	Y+2, r26	; 0x02
    124a:	bb 83       	std	Y+3, r27	; 0x03
    124c:	9f 77       	andi	r25, 0x7F	; 127
    124e:	df 91       	pop	r29
    1250:	cf 91       	pop	r28
    1252:	ff 90       	pop	r15
    1254:	ef 90       	pop	r14
    1256:	df 90       	pop	r13
    1258:	cf 90       	pop	r12
    125a:	bf 90       	pop	r11
    125c:	af 90       	pop	r10
    125e:	9f 90       	pop	r9
    1260:	8f 90       	pop	r8
    1262:	08 95       	ret

00001264 <rand_r>:
    1264:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <do_rand>
    1268:	08 95       	ret

0000126a <rand>:
    126a:	86 e0       	ldi	r24, 0x06	; 6
    126c:	91 e0       	ldi	r25, 0x01	; 1
    126e:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <do_rand>
    1272:	08 95       	ret

00001274 <srand>:
    1274:	a0 e0       	ldi	r26, 0x00	; 0
    1276:	b0 e0       	ldi	r27, 0x00	; 0
    1278:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <next>
    127c:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <next+0x1>
    1280:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <next+0x2>
    1284:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <next+0x3>
    1288:	08 95       	ret

0000128a <fdevopen>:
    128a:	0f 93       	push	r16
    128c:	1f 93       	push	r17
    128e:	cf 93       	push	r28
    1290:	df 93       	push	r29
    1292:	00 97       	sbiw	r24, 0x00	; 0
    1294:	31 f4       	brne	.+12     	; 0x12a2 <fdevopen+0x18>
    1296:	61 15       	cp	r22, r1
    1298:	71 05       	cpc	r23, r1
    129a:	19 f4       	brne	.+6      	; 0x12a2 <fdevopen+0x18>
    129c:	80 e0       	ldi	r24, 0x00	; 0
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	3a c0       	rjmp	.+116    	; 0x1316 <fdevopen+0x8c>
    12a2:	8b 01       	movw	r16, r22
    12a4:	ec 01       	movw	r28, r24
    12a6:	6e e0       	ldi	r22, 0x0E	; 14
    12a8:	70 e0       	ldi	r23, 0x00	; 0
    12aa:	81 e0       	ldi	r24, 0x01	; 1
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	0e 94 be 0b 	call	0x177c	; 0x177c <calloc>
    12b2:	fc 01       	movw	r30, r24
    12b4:	89 2b       	or	r24, r25
    12b6:	91 f3       	breq	.-28     	; 0x129c <fdevopen+0x12>
    12b8:	80 e8       	ldi	r24, 0x80	; 128
    12ba:	83 83       	std	Z+3, r24	; 0x03
    12bc:	01 15       	cp	r16, r1
    12be:	11 05       	cpc	r17, r1
    12c0:	71 f0       	breq	.+28     	; 0x12de <fdevopen+0x54>
    12c2:	13 87       	std	Z+11, r17	; 0x0b
    12c4:	02 87       	std	Z+10, r16	; 0x0a
    12c6:	81 e8       	ldi	r24, 0x81	; 129
    12c8:	83 83       	std	Z+3, r24	; 0x03
    12ca:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <__iob>
    12ce:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <__iob+0x1>
    12d2:	89 2b       	or	r24, r25
    12d4:	21 f4       	brne	.+8      	; 0x12de <fdevopen+0x54>
    12d6:	f0 93 a7 01 	sts	0x01A7, r31	; 0x8001a7 <__iob+0x1>
    12da:	e0 93 a6 01 	sts	0x01A6, r30	; 0x8001a6 <__iob>
    12de:	20 97       	sbiw	r28, 0x00	; 0
    12e0:	c9 f0       	breq	.+50     	; 0x1314 <fdevopen+0x8a>
    12e2:	d1 87       	std	Z+9, r29	; 0x09
    12e4:	c0 87       	std	Z+8, r28	; 0x08
    12e6:	83 81       	ldd	r24, Z+3	; 0x03
    12e8:	82 60       	ori	r24, 0x02	; 2
    12ea:	83 83       	std	Z+3, r24	; 0x03
    12ec:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <__iob+0x2>
    12f0:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <__iob+0x3>
    12f4:	89 2b       	or	r24, r25
    12f6:	71 f4       	brne	.+28     	; 0x1314 <fdevopen+0x8a>
    12f8:	f0 93 a9 01 	sts	0x01A9, r31	; 0x8001a9 <__iob+0x3>
    12fc:	e0 93 a8 01 	sts	0x01A8, r30	; 0x8001a8 <__iob+0x2>
    1300:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <__iob+0x4>
    1304:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <__iob+0x5>
    1308:	89 2b       	or	r24, r25
    130a:	21 f4       	brne	.+8      	; 0x1314 <fdevopen+0x8a>
    130c:	f0 93 ab 01 	sts	0x01AB, r31	; 0x8001ab <__iob+0x5>
    1310:	e0 93 aa 01 	sts	0x01AA, r30	; 0x8001aa <__iob+0x4>
    1314:	cf 01       	movw	r24, r30
    1316:	df 91       	pop	r29
    1318:	cf 91       	pop	r28
    131a:	1f 91       	pop	r17
    131c:	0f 91       	pop	r16
    131e:	08 95       	ret

00001320 <printf>:
    1320:	a0 e0       	ldi	r26, 0x00	; 0
    1322:	b0 e0       	ldi	r27, 0x00	; 0
    1324:	e6 e9       	ldi	r30, 0x96	; 150
    1326:	f9 e0       	ldi	r31, 0x09	; 9
    1328:	0c 94 d3 0c 	jmp	0x19a6	; 0x19a6 <__prologue_saves__+0x20>
    132c:	ae 01       	movw	r20, r28
    132e:	4b 5f       	subi	r20, 0xFB	; 251
    1330:	5f 4f       	sbci	r21, 0xFF	; 255
    1332:	fa 01       	movw	r30, r20
    1334:	61 91       	ld	r22, Z+
    1336:	71 91       	ld	r23, Z+
    1338:	af 01       	movw	r20, r30
    133a:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <__iob+0x2>
    133e:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <__iob+0x3>
    1342:	0e 94 dd 09 	call	0x13ba	; 0x13ba <vfprintf>
    1346:	e2 e0       	ldi	r30, 0x02	; 2
    1348:	0c 94 ef 0c 	jmp	0x19de	; 0x19de <__epilogue_restores__+0x20>

0000134c <putchar>:
    134c:	60 91 a8 01 	lds	r22, 0x01A8	; 0x8001a8 <__iob+0x2>
    1350:	70 91 a9 01 	lds	r23, 0x01A9	; 0x8001a9 <__iob+0x3>
    1354:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <fputc>
    1358:	08 95       	ret

0000135a <puts>:
    135a:	0f 93       	push	r16
    135c:	1f 93       	push	r17
    135e:	cf 93       	push	r28
    1360:	df 93       	push	r29
    1362:	e0 91 a8 01 	lds	r30, 0x01A8	; 0x8001a8 <__iob+0x2>
    1366:	f0 91 a9 01 	lds	r31, 0x01A9	; 0x8001a9 <__iob+0x3>
    136a:	23 81       	ldd	r18, Z+3	; 0x03
    136c:	21 ff       	sbrs	r18, 1
    136e:	1b c0       	rjmp	.+54     	; 0x13a6 <puts+0x4c>
    1370:	8c 01       	movw	r16, r24
    1372:	d0 e0       	ldi	r29, 0x00	; 0
    1374:	c0 e0       	ldi	r28, 0x00	; 0
    1376:	f8 01       	movw	r30, r16
    1378:	81 91       	ld	r24, Z+
    137a:	8f 01       	movw	r16, r30
    137c:	60 91 a8 01 	lds	r22, 0x01A8	; 0x8001a8 <__iob+0x2>
    1380:	70 91 a9 01 	lds	r23, 0x01A9	; 0x8001a9 <__iob+0x3>
    1384:	db 01       	movw	r26, r22
    1386:	18 96       	adiw	r26, 0x08	; 8
    1388:	ed 91       	ld	r30, X+
    138a:	fc 91       	ld	r31, X
    138c:	19 97       	sbiw	r26, 0x09	; 9
    138e:	88 23       	and	r24, r24
    1390:	31 f0       	breq	.+12     	; 0x139e <puts+0x44>
    1392:	09 95       	icall
    1394:	89 2b       	or	r24, r25
    1396:	79 f3       	breq	.-34     	; 0x1376 <puts+0x1c>
    1398:	df ef       	ldi	r29, 0xFF	; 255
    139a:	cf ef       	ldi	r28, 0xFF	; 255
    139c:	ec cf       	rjmp	.-40     	; 0x1376 <puts+0x1c>
    139e:	8a e0       	ldi	r24, 0x0A	; 10
    13a0:	09 95       	icall
    13a2:	89 2b       	or	r24, r25
    13a4:	19 f0       	breq	.+6      	; 0x13ac <puts+0x52>
    13a6:	8f ef       	ldi	r24, 0xFF	; 255
    13a8:	9f ef       	ldi	r25, 0xFF	; 255
    13aa:	02 c0       	rjmp	.+4      	; 0x13b0 <puts+0x56>
    13ac:	8d 2f       	mov	r24, r29
    13ae:	9c 2f       	mov	r25, r28
    13b0:	df 91       	pop	r29
    13b2:	cf 91       	pop	r28
    13b4:	1f 91       	pop	r17
    13b6:	0f 91       	pop	r16
    13b8:	08 95       	ret

000013ba <vfprintf>:
    13ba:	ab e0       	ldi	r26, 0x0B	; 11
    13bc:	b0 e0       	ldi	r27, 0x00	; 0
    13be:	e3 ee       	ldi	r30, 0xE3	; 227
    13c0:	f9 e0       	ldi	r31, 0x09	; 9
    13c2:	0c 94 c3 0c 	jmp	0x1986	; 0x1986 <__prologue_saves__>
    13c6:	6c 01       	movw	r12, r24
    13c8:	7b 01       	movw	r14, r22
    13ca:	8a 01       	movw	r16, r20
    13cc:	fc 01       	movw	r30, r24
    13ce:	17 82       	std	Z+7, r1	; 0x07
    13d0:	16 82       	std	Z+6, r1	; 0x06
    13d2:	83 81       	ldd	r24, Z+3	; 0x03
    13d4:	81 ff       	sbrs	r24, 1
    13d6:	cc c1       	rjmp	.+920    	; 0x1770 <vfprintf+0x3b6>
    13d8:	ce 01       	movw	r24, r28
    13da:	01 96       	adiw	r24, 0x01	; 1
    13dc:	3c 01       	movw	r6, r24
    13de:	f6 01       	movw	r30, r12
    13e0:	93 81       	ldd	r25, Z+3	; 0x03
    13e2:	f7 01       	movw	r30, r14
    13e4:	93 fd       	sbrc	r25, 3
    13e6:	85 91       	lpm	r24, Z+
    13e8:	93 ff       	sbrs	r25, 3
    13ea:	81 91       	ld	r24, Z+
    13ec:	7f 01       	movw	r14, r30
    13ee:	88 23       	and	r24, r24
    13f0:	09 f4       	brne	.+2      	; 0x13f4 <vfprintf+0x3a>
    13f2:	ba c1       	rjmp	.+884    	; 0x1768 <vfprintf+0x3ae>
    13f4:	85 32       	cpi	r24, 0x25	; 37
    13f6:	39 f4       	brne	.+14     	; 0x1406 <vfprintf+0x4c>
    13f8:	93 fd       	sbrc	r25, 3
    13fa:	85 91       	lpm	r24, Z+
    13fc:	93 ff       	sbrs	r25, 3
    13fe:	81 91       	ld	r24, Z+
    1400:	7f 01       	movw	r14, r30
    1402:	85 32       	cpi	r24, 0x25	; 37
    1404:	29 f4       	brne	.+10     	; 0x1410 <vfprintf+0x56>
    1406:	b6 01       	movw	r22, r12
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <fputc>
    140e:	e7 cf       	rjmp	.-50     	; 0x13de <vfprintf+0x24>
    1410:	91 2c       	mov	r9, r1
    1412:	21 2c       	mov	r2, r1
    1414:	31 2c       	mov	r3, r1
    1416:	ff e1       	ldi	r31, 0x1F	; 31
    1418:	f3 15       	cp	r31, r3
    141a:	d8 f0       	brcs	.+54     	; 0x1452 <vfprintf+0x98>
    141c:	8b 32       	cpi	r24, 0x2B	; 43
    141e:	79 f0       	breq	.+30     	; 0x143e <vfprintf+0x84>
    1420:	38 f4       	brcc	.+14     	; 0x1430 <vfprintf+0x76>
    1422:	80 32       	cpi	r24, 0x20	; 32
    1424:	79 f0       	breq	.+30     	; 0x1444 <vfprintf+0x8a>
    1426:	83 32       	cpi	r24, 0x23	; 35
    1428:	a1 f4       	brne	.+40     	; 0x1452 <vfprintf+0x98>
    142a:	23 2d       	mov	r18, r3
    142c:	20 61       	ori	r18, 0x10	; 16
    142e:	1d c0       	rjmp	.+58     	; 0x146a <vfprintf+0xb0>
    1430:	8d 32       	cpi	r24, 0x2D	; 45
    1432:	61 f0       	breq	.+24     	; 0x144c <vfprintf+0x92>
    1434:	80 33       	cpi	r24, 0x30	; 48
    1436:	69 f4       	brne	.+26     	; 0x1452 <vfprintf+0x98>
    1438:	23 2d       	mov	r18, r3
    143a:	21 60       	ori	r18, 0x01	; 1
    143c:	16 c0       	rjmp	.+44     	; 0x146a <vfprintf+0xb0>
    143e:	83 2d       	mov	r24, r3
    1440:	82 60       	ori	r24, 0x02	; 2
    1442:	38 2e       	mov	r3, r24
    1444:	e3 2d       	mov	r30, r3
    1446:	e4 60       	ori	r30, 0x04	; 4
    1448:	3e 2e       	mov	r3, r30
    144a:	2a c0       	rjmp	.+84     	; 0x14a0 <vfprintf+0xe6>
    144c:	f3 2d       	mov	r31, r3
    144e:	f8 60       	ori	r31, 0x08	; 8
    1450:	1d c0       	rjmp	.+58     	; 0x148c <vfprintf+0xd2>
    1452:	37 fc       	sbrc	r3, 7
    1454:	2d c0       	rjmp	.+90     	; 0x14b0 <vfprintf+0xf6>
    1456:	20 ed       	ldi	r18, 0xD0	; 208
    1458:	28 0f       	add	r18, r24
    145a:	2a 30       	cpi	r18, 0x0A	; 10
    145c:	40 f0       	brcs	.+16     	; 0x146e <vfprintf+0xb4>
    145e:	8e 32       	cpi	r24, 0x2E	; 46
    1460:	b9 f4       	brne	.+46     	; 0x1490 <vfprintf+0xd6>
    1462:	36 fc       	sbrc	r3, 6
    1464:	81 c1       	rjmp	.+770    	; 0x1768 <vfprintf+0x3ae>
    1466:	23 2d       	mov	r18, r3
    1468:	20 64       	ori	r18, 0x40	; 64
    146a:	32 2e       	mov	r3, r18
    146c:	19 c0       	rjmp	.+50     	; 0x14a0 <vfprintf+0xe6>
    146e:	36 fe       	sbrs	r3, 6
    1470:	06 c0       	rjmp	.+12     	; 0x147e <vfprintf+0xc4>
    1472:	8a e0       	ldi	r24, 0x0A	; 10
    1474:	98 9e       	mul	r9, r24
    1476:	20 0d       	add	r18, r0
    1478:	11 24       	eor	r1, r1
    147a:	92 2e       	mov	r9, r18
    147c:	11 c0       	rjmp	.+34     	; 0x14a0 <vfprintf+0xe6>
    147e:	ea e0       	ldi	r30, 0x0A	; 10
    1480:	2e 9e       	mul	r2, r30
    1482:	20 0d       	add	r18, r0
    1484:	11 24       	eor	r1, r1
    1486:	22 2e       	mov	r2, r18
    1488:	f3 2d       	mov	r31, r3
    148a:	f0 62       	ori	r31, 0x20	; 32
    148c:	3f 2e       	mov	r3, r31
    148e:	08 c0       	rjmp	.+16     	; 0x14a0 <vfprintf+0xe6>
    1490:	8c 36       	cpi	r24, 0x6C	; 108
    1492:	21 f4       	brne	.+8      	; 0x149c <vfprintf+0xe2>
    1494:	83 2d       	mov	r24, r3
    1496:	80 68       	ori	r24, 0x80	; 128
    1498:	38 2e       	mov	r3, r24
    149a:	02 c0       	rjmp	.+4      	; 0x14a0 <vfprintf+0xe6>
    149c:	88 36       	cpi	r24, 0x68	; 104
    149e:	41 f4       	brne	.+16     	; 0x14b0 <vfprintf+0xf6>
    14a0:	f7 01       	movw	r30, r14
    14a2:	93 fd       	sbrc	r25, 3
    14a4:	85 91       	lpm	r24, Z+
    14a6:	93 ff       	sbrs	r25, 3
    14a8:	81 91       	ld	r24, Z+
    14aa:	7f 01       	movw	r14, r30
    14ac:	81 11       	cpse	r24, r1
    14ae:	b3 cf       	rjmp	.-154    	; 0x1416 <vfprintf+0x5c>
    14b0:	98 2f       	mov	r25, r24
    14b2:	9f 7d       	andi	r25, 0xDF	; 223
    14b4:	95 54       	subi	r25, 0x45	; 69
    14b6:	93 30       	cpi	r25, 0x03	; 3
    14b8:	28 f4       	brcc	.+10     	; 0x14c4 <vfprintf+0x10a>
    14ba:	0c 5f       	subi	r16, 0xFC	; 252
    14bc:	1f 4f       	sbci	r17, 0xFF	; 255
    14be:	9f e3       	ldi	r25, 0x3F	; 63
    14c0:	99 83       	std	Y+1, r25	; 0x01
    14c2:	0d c0       	rjmp	.+26     	; 0x14de <vfprintf+0x124>
    14c4:	83 36       	cpi	r24, 0x63	; 99
    14c6:	31 f0       	breq	.+12     	; 0x14d4 <vfprintf+0x11a>
    14c8:	83 37       	cpi	r24, 0x73	; 115
    14ca:	71 f0       	breq	.+28     	; 0x14e8 <vfprintf+0x12e>
    14cc:	83 35       	cpi	r24, 0x53	; 83
    14ce:	09 f0       	breq	.+2      	; 0x14d2 <vfprintf+0x118>
    14d0:	59 c0       	rjmp	.+178    	; 0x1584 <vfprintf+0x1ca>
    14d2:	21 c0       	rjmp	.+66     	; 0x1516 <vfprintf+0x15c>
    14d4:	f8 01       	movw	r30, r16
    14d6:	80 81       	ld	r24, Z
    14d8:	89 83       	std	Y+1, r24	; 0x01
    14da:	0e 5f       	subi	r16, 0xFE	; 254
    14dc:	1f 4f       	sbci	r17, 0xFF	; 255
    14de:	88 24       	eor	r8, r8
    14e0:	83 94       	inc	r8
    14e2:	91 2c       	mov	r9, r1
    14e4:	53 01       	movw	r10, r6
    14e6:	13 c0       	rjmp	.+38     	; 0x150e <vfprintf+0x154>
    14e8:	28 01       	movw	r4, r16
    14ea:	f2 e0       	ldi	r31, 0x02	; 2
    14ec:	4f 0e       	add	r4, r31
    14ee:	51 1c       	adc	r5, r1
    14f0:	f8 01       	movw	r30, r16
    14f2:	a0 80       	ld	r10, Z
    14f4:	b1 80       	ldd	r11, Z+1	; 0x01
    14f6:	36 fe       	sbrs	r3, 6
    14f8:	03 c0       	rjmp	.+6      	; 0x1500 <vfprintf+0x146>
    14fa:	69 2d       	mov	r22, r9
    14fc:	70 e0       	ldi	r23, 0x00	; 0
    14fe:	02 c0       	rjmp	.+4      	; 0x1504 <vfprintf+0x14a>
    1500:	6f ef       	ldi	r22, 0xFF	; 255
    1502:	7f ef       	ldi	r23, 0xFF	; 255
    1504:	c5 01       	movw	r24, r10
    1506:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <strnlen>
    150a:	4c 01       	movw	r8, r24
    150c:	82 01       	movw	r16, r4
    150e:	f3 2d       	mov	r31, r3
    1510:	ff 77       	andi	r31, 0x7F	; 127
    1512:	3f 2e       	mov	r3, r31
    1514:	16 c0       	rjmp	.+44     	; 0x1542 <vfprintf+0x188>
    1516:	28 01       	movw	r4, r16
    1518:	22 e0       	ldi	r18, 0x02	; 2
    151a:	42 0e       	add	r4, r18
    151c:	51 1c       	adc	r5, r1
    151e:	f8 01       	movw	r30, r16
    1520:	a0 80       	ld	r10, Z
    1522:	b1 80       	ldd	r11, Z+1	; 0x01
    1524:	36 fe       	sbrs	r3, 6
    1526:	03 c0       	rjmp	.+6      	; 0x152e <vfprintf+0x174>
    1528:	69 2d       	mov	r22, r9
    152a:	70 e0       	ldi	r23, 0x00	; 0
    152c:	02 c0       	rjmp	.+4      	; 0x1532 <vfprintf+0x178>
    152e:	6f ef       	ldi	r22, 0xFF	; 255
    1530:	7f ef       	ldi	r23, 0xFF	; 255
    1532:	c5 01       	movw	r24, r10
    1534:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <strnlen_P>
    1538:	4c 01       	movw	r8, r24
    153a:	f3 2d       	mov	r31, r3
    153c:	f0 68       	ori	r31, 0x80	; 128
    153e:	3f 2e       	mov	r3, r31
    1540:	82 01       	movw	r16, r4
    1542:	33 fc       	sbrc	r3, 3
    1544:	1b c0       	rjmp	.+54     	; 0x157c <vfprintf+0x1c2>
    1546:	82 2d       	mov	r24, r2
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	88 16       	cp	r8, r24
    154c:	99 06       	cpc	r9, r25
    154e:	b0 f4       	brcc	.+44     	; 0x157c <vfprintf+0x1c2>
    1550:	b6 01       	movw	r22, r12
    1552:	80 e2       	ldi	r24, 0x20	; 32
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <fputc>
    155a:	2a 94       	dec	r2
    155c:	f4 cf       	rjmp	.-24     	; 0x1546 <vfprintf+0x18c>
    155e:	f5 01       	movw	r30, r10
    1560:	37 fc       	sbrc	r3, 7
    1562:	85 91       	lpm	r24, Z+
    1564:	37 fe       	sbrs	r3, 7
    1566:	81 91       	ld	r24, Z+
    1568:	5f 01       	movw	r10, r30
    156a:	b6 01       	movw	r22, r12
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <fputc>
    1572:	21 10       	cpse	r2, r1
    1574:	2a 94       	dec	r2
    1576:	21 e0       	ldi	r18, 0x01	; 1
    1578:	82 1a       	sub	r8, r18
    157a:	91 08       	sbc	r9, r1
    157c:	81 14       	cp	r8, r1
    157e:	91 04       	cpc	r9, r1
    1580:	71 f7       	brne	.-36     	; 0x155e <vfprintf+0x1a4>
    1582:	e8 c0       	rjmp	.+464    	; 0x1754 <vfprintf+0x39a>
    1584:	84 36       	cpi	r24, 0x64	; 100
    1586:	11 f0       	breq	.+4      	; 0x158c <vfprintf+0x1d2>
    1588:	89 36       	cpi	r24, 0x69	; 105
    158a:	41 f5       	brne	.+80     	; 0x15dc <vfprintf+0x222>
    158c:	f8 01       	movw	r30, r16
    158e:	37 fe       	sbrs	r3, 7
    1590:	07 c0       	rjmp	.+14     	; 0x15a0 <vfprintf+0x1e6>
    1592:	60 81       	ld	r22, Z
    1594:	71 81       	ldd	r23, Z+1	; 0x01
    1596:	82 81       	ldd	r24, Z+2	; 0x02
    1598:	93 81       	ldd	r25, Z+3	; 0x03
    159a:	0c 5f       	subi	r16, 0xFC	; 252
    159c:	1f 4f       	sbci	r17, 0xFF	; 255
    159e:	08 c0       	rjmp	.+16     	; 0x15b0 <vfprintf+0x1f6>
    15a0:	60 81       	ld	r22, Z
    15a2:	71 81       	ldd	r23, Z+1	; 0x01
    15a4:	07 2e       	mov	r0, r23
    15a6:	00 0c       	add	r0, r0
    15a8:	88 0b       	sbc	r24, r24
    15aa:	99 0b       	sbc	r25, r25
    15ac:	0e 5f       	subi	r16, 0xFE	; 254
    15ae:	1f 4f       	sbci	r17, 0xFF	; 255
    15b0:	f3 2d       	mov	r31, r3
    15b2:	ff 76       	andi	r31, 0x6F	; 111
    15b4:	3f 2e       	mov	r3, r31
    15b6:	97 ff       	sbrs	r25, 7
    15b8:	09 c0       	rjmp	.+18     	; 0x15cc <vfprintf+0x212>
    15ba:	90 95       	com	r25
    15bc:	80 95       	com	r24
    15be:	70 95       	com	r23
    15c0:	61 95       	neg	r22
    15c2:	7f 4f       	sbci	r23, 0xFF	; 255
    15c4:	8f 4f       	sbci	r24, 0xFF	; 255
    15c6:	9f 4f       	sbci	r25, 0xFF	; 255
    15c8:	f0 68       	ori	r31, 0x80	; 128
    15ca:	3f 2e       	mov	r3, r31
    15cc:	2a e0       	ldi	r18, 0x0A	; 10
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	a3 01       	movw	r20, r6
    15d2:	0e 94 33 0c 	call	0x1866	; 0x1866 <__ultoa_invert>
    15d6:	88 2e       	mov	r8, r24
    15d8:	86 18       	sub	r8, r6
    15da:	45 c0       	rjmp	.+138    	; 0x1666 <vfprintf+0x2ac>
    15dc:	85 37       	cpi	r24, 0x75	; 117
    15de:	31 f4       	brne	.+12     	; 0x15ec <vfprintf+0x232>
    15e0:	23 2d       	mov	r18, r3
    15e2:	2f 7e       	andi	r18, 0xEF	; 239
    15e4:	b2 2e       	mov	r11, r18
    15e6:	2a e0       	ldi	r18, 0x0A	; 10
    15e8:	30 e0       	ldi	r19, 0x00	; 0
    15ea:	25 c0       	rjmp	.+74     	; 0x1636 <vfprintf+0x27c>
    15ec:	93 2d       	mov	r25, r3
    15ee:	99 7f       	andi	r25, 0xF9	; 249
    15f0:	b9 2e       	mov	r11, r25
    15f2:	8f 36       	cpi	r24, 0x6F	; 111
    15f4:	c1 f0       	breq	.+48     	; 0x1626 <vfprintf+0x26c>
    15f6:	18 f4       	brcc	.+6      	; 0x15fe <vfprintf+0x244>
    15f8:	88 35       	cpi	r24, 0x58	; 88
    15fa:	79 f0       	breq	.+30     	; 0x161a <vfprintf+0x260>
    15fc:	b5 c0       	rjmp	.+362    	; 0x1768 <vfprintf+0x3ae>
    15fe:	80 37       	cpi	r24, 0x70	; 112
    1600:	19 f0       	breq	.+6      	; 0x1608 <vfprintf+0x24e>
    1602:	88 37       	cpi	r24, 0x78	; 120
    1604:	21 f0       	breq	.+8      	; 0x160e <vfprintf+0x254>
    1606:	b0 c0       	rjmp	.+352    	; 0x1768 <vfprintf+0x3ae>
    1608:	e9 2f       	mov	r30, r25
    160a:	e0 61       	ori	r30, 0x10	; 16
    160c:	be 2e       	mov	r11, r30
    160e:	b4 fe       	sbrs	r11, 4
    1610:	0d c0       	rjmp	.+26     	; 0x162c <vfprintf+0x272>
    1612:	fb 2d       	mov	r31, r11
    1614:	f4 60       	ori	r31, 0x04	; 4
    1616:	bf 2e       	mov	r11, r31
    1618:	09 c0       	rjmp	.+18     	; 0x162c <vfprintf+0x272>
    161a:	34 fe       	sbrs	r3, 4
    161c:	0a c0       	rjmp	.+20     	; 0x1632 <vfprintf+0x278>
    161e:	29 2f       	mov	r18, r25
    1620:	26 60       	ori	r18, 0x06	; 6
    1622:	b2 2e       	mov	r11, r18
    1624:	06 c0       	rjmp	.+12     	; 0x1632 <vfprintf+0x278>
    1626:	28 e0       	ldi	r18, 0x08	; 8
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	05 c0       	rjmp	.+10     	; 0x1636 <vfprintf+0x27c>
    162c:	20 e1       	ldi	r18, 0x10	; 16
    162e:	30 e0       	ldi	r19, 0x00	; 0
    1630:	02 c0       	rjmp	.+4      	; 0x1636 <vfprintf+0x27c>
    1632:	20 e1       	ldi	r18, 0x10	; 16
    1634:	32 e0       	ldi	r19, 0x02	; 2
    1636:	f8 01       	movw	r30, r16
    1638:	b7 fe       	sbrs	r11, 7
    163a:	07 c0       	rjmp	.+14     	; 0x164a <vfprintf+0x290>
    163c:	60 81       	ld	r22, Z
    163e:	71 81       	ldd	r23, Z+1	; 0x01
    1640:	82 81       	ldd	r24, Z+2	; 0x02
    1642:	93 81       	ldd	r25, Z+3	; 0x03
    1644:	0c 5f       	subi	r16, 0xFC	; 252
    1646:	1f 4f       	sbci	r17, 0xFF	; 255
    1648:	06 c0       	rjmp	.+12     	; 0x1656 <vfprintf+0x29c>
    164a:	60 81       	ld	r22, Z
    164c:	71 81       	ldd	r23, Z+1	; 0x01
    164e:	80 e0       	ldi	r24, 0x00	; 0
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	0e 5f       	subi	r16, 0xFE	; 254
    1654:	1f 4f       	sbci	r17, 0xFF	; 255
    1656:	a3 01       	movw	r20, r6
    1658:	0e 94 33 0c 	call	0x1866	; 0x1866 <__ultoa_invert>
    165c:	88 2e       	mov	r8, r24
    165e:	86 18       	sub	r8, r6
    1660:	fb 2d       	mov	r31, r11
    1662:	ff 77       	andi	r31, 0x7F	; 127
    1664:	3f 2e       	mov	r3, r31
    1666:	36 fe       	sbrs	r3, 6
    1668:	0d c0       	rjmp	.+26     	; 0x1684 <vfprintf+0x2ca>
    166a:	23 2d       	mov	r18, r3
    166c:	2e 7f       	andi	r18, 0xFE	; 254
    166e:	a2 2e       	mov	r10, r18
    1670:	89 14       	cp	r8, r9
    1672:	58 f4       	brcc	.+22     	; 0x168a <vfprintf+0x2d0>
    1674:	34 fe       	sbrs	r3, 4
    1676:	0b c0       	rjmp	.+22     	; 0x168e <vfprintf+0x2d4>
    1678:	32 fc       	sbrc	r3, 2
    167a:	09 c0       	rjmp	.+18     	; 0x168e <vfprintf+0x2d4>
    167c:	83 2d       	mov	r24, r3
    167e:	8e 7e       	andi	r24, 0xEE	; 238
    1680:	a8 2e       	mov	r10, r24
    1682:	05 c0       	rjmp	.+10     	; 0x168e <vfprintf+0x2d4>
    1684:	b8 2c       	mov	r11, r8
    1686:	a3 2c       	mov	r10, r3
    1688:	03 c0       	rjmp	.+6      	; 0x1690 <vfprintf+0x2d6>
    168a:	b8 2c       	mov	r11, r8
    168c:	01 c0       	rjmp	.+2      	; 0x1690 <vfprintf+0x2d6>
    168e:	b9 2c       	mov	r11, r9
    1690:	a4 fe       	sbrs	r10, 4
    1692:	0f c0       	rjmp	.+30     	; 0x16b2 <vfprintf+0x2f8>
    1694:	fe 01       	movw	r30, r28
    1696:	e8 0d       	add	r30, r8
    1698:	f1 1d       	adc	r31, r1
    169a:	80 81       	ld	r24, Z
    169c:	80 33       	cpi	r24, 0x30	; 48
    169e:	21 f4       	brne	.+8      	; 0x16a8 <vfprintf+0x2ee>
    16a0:	9a 2d       	mov	r25, r10
    16a2:	99 7e       	andi	r25, 0xE9	; 233
    16a4:	a9 2e       	mov	r10, r25
    16a6:	09 c0       	rjmp	.+18     	; 0x16ba <vfprintf+0x300>
    16a8:	a2 fe       	sbrs	r10, 2
    16aa:	06 c0       	rjmp	.+12     	; 0x16b8 <vfprintf+0x2fe>
    16ac:	b3 94       	inc	r11
    16ae:	b3 94       	inc	r11
    16b0:	04 c0       	rjmp	.+8      	; 0x16ba <vfprintf+0x300>
    16b2:	8a 2d       	mov	r24, r10
    16b4:	86 78       	andi	r24, 0x86	; 134
    16b6:	09 f0       	breq	.+2      	; 0x16ba <vfprintf+0x300>
    16b8:	b3 94       	inc	r11
    16ba:	a3 fc       	sbrc	r10, 3
    16bc:	11 c0       	rjmp	.+34     	; 0x16e0 <vfprintf+0x326>
    16be:	a0 fe       	sbrs	r10, 0
    16c0:	06 c0       	rjmp	.+12     	; 0x16ce <vfprintf+0x314>
    16c2:	b2 14       	cp	r11, r2
    16c4:	88 f4       	brcc	.+34     	; 0x16e8 <vfprintf+0x32e>
    16c6:	28 0c       	add	r2, r8
    16c8:	92 2c       	mov	r9, r2
    16ca:	9b 18       	sub	r9, r11
    16cc:	0e c0       	rjmp	.+28     	; 0x16ea <vfprintf+0x330>
    16ce:	b2 14       	cp	r11, r2
    16d0:	60 f4       	brcc	.+24     	; 0x16ea <vfprintf+0x330>
    16d2:	b6 01       	movw	r22, r12
    16d4:	80 e2       	ldi	r24, 0x20	; 32
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <fputc>
    16dc:	b3 94       	inc	r11
    16de:	f7 cf       	rjmp	.-18     	; 0x16ce <vfprintf+0x314>
    16e0:	b2 14       	cp	r11, r2
    16e2:	18 f4       	brcc	.+6      	; 0x16ea <vfprintf+0x330>
    16e4:	2b 18       	sub	r2, r11
    16e6:	02 c0       	rjmp	.+4      	; 0x16ec <vfprintf+0x332>
    16e8:	98 2c       	mov	r9, r8
    16ea:	21 2c       	mov	r2, r1
    16ec:	a4 fe       	sbrs	r10, 4
    16ee:	10 c0       	rjmp	.+32     	; 0x1710 <vfprintf+0x356>
    16f0:	b6 01       	movw	r22, r12
    16f2:	80 e3       	ldi	r24, 0x30	; 48
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <fputc>
    16fa:	a2 fe       	sbrs	r10, 2
    16fc:	17 c0       	rjmp	.+46     	; 0x172c <vfprintf+0x372>
    16fe:	a1 fc       	sbrc	r10, 1
    1700:	03 c0       	rjmp	.+6      	; 0x1708 <vfprintf+0x34e>
    1702:	88 e7       	ldi	r24, 0x78	; 120
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	02 c0       	rjmp	.+4      	; 0x170c <vfprintf+0x352>
    1708:	88 e5       	ldi	r24, 0x58	; 88
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	b6 01       	movw	r22, r12
    170e:	0c c0       	rjmp	.+24     	; 0x1728 <vfprintf+0x36e>
    1710:	8a 2d       	mov	r24, r10
    1712:	86 78       	andi	r24, 0x86	; 134
    1714:	59 f0       	breq	.+22     	; 0x172c <vfprintf+0x372>
    1716:	a1 fe       	sbrs	r10, 1
    1718:	02 c0       	rjmp	.+4      	; 0x171e <vfprintf+0x364>
    171a:	8b e2       	ldi	r24, 0x2B	; 43
    171c:	01 c0       	rjmp	.+2      	; 0x1720 <vfprintf+0x366>
    171e:	80 e2       	ldi	r24, 0x20	; 32
    1720:	a7 fc       	sbrc	r10, 7
    1722:	8d e2       	ldi	r24, 0x2D	; 45
    1724:	b6 01       	movw	r22, r12
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <fputc>
    172c:	89 14       	cp	r8, r9
    172e:	38 f4       	brcc	.+14     	; 0x173e <vfprintf+0x384>
    1730:	b6 01       	movw	r22, r12
    1732:	80 e3       	ldi	r24, 0x30	; 48
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <fputc>
    173a:	9a 94       	dec	r9
    173c:	f7 cf       	rjmp	.-18     	; 0x172c <vfprintf+0x372>
    173e:	8a 94       	dec	r8
    1740:	f3 01       	movw	r30, r6
    1742:	e8 0d       	add	r30, r8
    1744:	f1 1d       	adc	r31, r1
    1746:	80 81       	ld	r24, Z
    1748:	b6 01       	movw	r22, r12
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <fputc>
    1750:	81 10       	cpse	r8, r1
    1752:	f5 cf       	rjmp	.-22     	; 0x173e <vfprintf+0x384>
    1754:	22 20       	and	r2, r2
    1756:	09 f4       	brne	.+2      	; 0x175a <vfprintf+0x3a0>
    1758:	42 ce       	rjmp	.-892    	; 0x13de <vfprintf+0x24>
    175a:	b6 01       	movw	r22, r12
    175c:	80 e2       	ldi	r24, 0x20	; 32
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <fputc>
    1764:	2a 94       	dec	r2
    1766:	f6 cf       	rjmp	.-20     	; 0x1754 <vfprintf+0x39a>
    1768:	f6 01       	movw	r30, r12
    176a:	86 81       	ldd	r24, Z+6	; 0x06
    176c:	97 81       	ldd	r25, Z+7	; 0x07
    176e:	02 c0       	rjmp	.+4      	; 0x1774 <vfprintf+0x3ba>
    1770:	8f ef       	ldi	r24, 0xFF	; 255
    1772:	9f ef       	ldi	r25, 0xFF	; 255
    1774:	2b 96       	adiw	r28, 0x0b	; 11
    1776:	e2 e1       	ldi	r30, 0x12	; 18
    1778:	0c 94 df 0c 	jmp	0x19be	; 0x19be <__epilogue_restores__>

0000177c <calloc>:
    177c:	0f 93       	push	r16
    177e:	1f 93       	push	r17
    1780:	cf 93       	push	r28
    1782:	df 93       	push	r29
    1784:	86 9f       	mul	r24, r22
    1786:	80 01       	movw	r16, r0
    1788:	87 9f       	mul	r24, r23
    178a:	10 0d       	add	r17, r0
    178c:	96 9f       	mul	r25, r22
    178e:	10 0d       	add	r17, r0
    1790:	11 24       	eor	r1, r1
    1792:	c8 01       	movw	r24, r16
    1794:	0e 94 c8 07 	call	0xf90	; 0xf90 <malloc>
    1798:	ec 01       	movw	r28, r24
    179a:	00 97       	sbiw	r24, 0x00	; 0
    179c:	29 f0       	breq	.+10     	; 0x17a8 <calloc+0x2c>
    179e:	a8 01       	movw	r20, r16
    17a0:	60 e0       	ldi	r22, 0x00	; 0
    17a2:	70 e0       	ldi	r23, 0x00	; 0
    17a4:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <memset>
    17a8:	ce 01       	movw	r24, r28
    17aa:	df 91       	pop	r29
    17ac:	cf 91       	pop	r28
    17ae:	1f 91       	pop	r17
    17b0:	0f 91       	pop	r16
    17b2:	08 95       	ret

000017b4 <strnlen_P>:
    17b4:	fc 01       	movw	r30, r24
    17b6:	05 90       	lpm	r0, Z+
    17b8:	61 50       	subi	r22, 0x01	; 1
    17ba:	70 40       	sbci	r23, 0x00	; 0
    17bc:	01 10       	cpse	r0, r1
    17be:	d8 f7       	brcc	.-10     	; 0x17b6 <strnlen_P+0x2>
    17c0:	80 95       	com	r24
    17c2:	90 95       	com	r25
    17c4:	8e 0f       	add	r24, r30
    17c6:	9f 1f       	adc	r25, r31
    17c8:	08 95       	ret

000017ca <memset>:
    17ca:	dc 01       	movw	r26, r24
    17cc:	01 c0       	rjmp	.+2      	; 0x17d0 <memset+0x6>
    17ce:	6d 93       	st	X+, r22
    17d0:	41 50       	subi	r20, 0x01	; 1
    17d2:	50 40       	sbci	r21, 0x00	; 0
    17d4:	e0 f7       	brcc	.-8      	; 0x17ce <memset+0x4>
    17d6:	08 95       	ret

000017d8 <strnlen>:
    17d8:	fc 01       	movw	r30, r24
    17da:	61 50       	subi	r22, 0x01	; 1
    17dc:	70 40       	sbci	r23, 0x00	; 0
    17de:	01 90       	ld	r0, Z+
    17e0:	01 10       	cpse	r0, r1
    17e2:	d8 f7       	brcc	.-10     	; 0x17da <strnlen+0x2>
    17e4:	80 95       	com	r24
    17e6:	90 95       	com	r25
    17e8:	8e 0f       	add	r24, r30
    17ea:	9f 1f       	adc	r25, r31
    17ec:	08 95       	ret

000017ee <fputc>:
    17ee:	0f 93       	push	r16
    17f0:	1f 93       	push	r17
    17f2:	cf 93       	push	r28
    17f4:	df 93       	push	r29
    17f6:	fb 01       	movw	r30, r22
    17f8:	23 81       	ldd	r18, Z+3	; 0x03
    17fa:	21 fd       	sbrc	r18, 1
    17fc:	03 c0       	rjmp	.+6      	; 0x1804 <fputc+0x16>
    17fe:	8f ef       	ldi	r24, 0xFF	; 255
    1800:	9f ef       	ldi	r25, 0xFF	; 255
    1802:	2c c0       	rjmp	.+88     	; 0x185c <fputc+0x6e>
    1804:	22 ff       	sbrs	r18, 2
    1806:	16 c0       	rjmp	.+44     	; 0x1834 <fputc+0x46>
    1808:	46 81       	ldd	r20, Z+6	; 0x06
    180a:	57 81       	ldd	r21, Z+7	; 0x07
    180c:	24 81       	ldd	r18, Z+4	; 0x04
    180e:	35 81       	ldd	r19, Z+5	; 0x05
    1810:	42 17       	cp	r20, r18
    1812:	53 07       	cpc	r21, r19
    1814:	44 f4       	brge	.+16     	; 0x1826 <fputc+0x38>
    1816:	a0 81       	ld	r26, Z
    1818:	b1 81       	ldd	r27, Z+1	; 0x01
    181a:	9d 01       	movw	r18, r26
    181c:	2f 5f       	subi	r18, 0xFF	; 255
    181e:	3f 4f       	sbci	r19, 0xFF	; 255
    1820:	31 83       	std	Z+1, r19	; 0x01
    1822:	20 83       	st	Z, r18
    1824:	8c 93       	st	X, r24
    1826:	26 81       	ldd	r18, Z+6	; 0x06
    1828:	37 81       	ldd	r19, Z+7	; 0x07
    182a:	2f 5f       	subi	r18, 0xFF	; 255
    182c:	3f 4f       	sbci	r19, 0xFF	; 255
    182e:	37 83       	std	Z+7, r19	; 0x07
    1830:	26 83       	std	Z+6, r18	; 0x06
    1832:	14 c0       	rjmp	.+40     	; 0x185c <fputc+0x6e>
    1834:	8b 01       	movw	r16, r22
    1836:	ec 01       	movw	r28, r24
    1838:	fb 01       	movw	r30, r22
    183a:	00 84       	ldd	r0, Z+8	; 0x08
    183c:	f1 85       	ldd	r31, Z+9	; 0x09
    183e:	e0 2d       	mov	r30, r0
    1840:	09 95       	icall
    1842:	89 2b       	or	r24, r25
    1844:	e1 f6       	brne	.-72     	; 0x17fe <fputc+0x10>
    1846:	d8 01       	movw	r26, r16
    1848:	16 96       	adiw	r26, 0x06	; 6
    184a:	8d 91       	ld	r24, X+
    184c:	9c 91       	ld	r25, X
    184e:	17 97       	sbiw	r26, 0x07	; 7
    1850:	01 96       	adiw	r24, 0x01	; 1
    1852:	17 96       	adiw	r26, 0x07	; 7
    1854:	9c 93       	st	X, r25
    1856:	8e 93       	st	-X, r24
    1858:	16 97       	sbiw	r26, 0x06	; 6
    185a:	ce 01       	movw	r24, r28
    185c:	df 91       	pop	r29
    185e:	cf 91       	pop	r28
    1860:	1f 91       	pop	r17
    1862:	0f 91       	pop	r16
    1864:	08 95       	ret

00001866 <__ultoa_invert>:
    1866:	fa 01       	movw	r30, r20
    1868:	aa 27       	eor	r26, r26
    186a:	28 30       	cpi	r18, 0x08	; 8
    186c:	51 f1       	breq	.+84     	; 0x18c2 <__ultoa_invert+0x5c>
    186e:	20 31       	cpi	r18, 0x10	; 16
    1870:	81 f1       	breq	.+96     	; 0x18d2 <__ultoa_invert+0x6c>
    1872:	e8 94       	clt
    1874:	6f 93       	push	r22
    1876:	6e 7f       	andi	r22, 0xFE	; 254
    1878:	6e 5f       	subi	r22, 0xFE	; 254
    187a:	7f 4f       	sbci	r23, 0xFF	; 255
    187c:	8f 4f       	sbci	r24, 0xFF	; 255
    187e:	9f 4f       	sbci	r25, 0xFF	; 255
    1880:	af 4f       	sbci	r26, 0xFF	; 255
    1882:	b1 e0       	ldi	r27, 0x01	; 1
    1884:	3e d0       	rcall	.+124    	; 0x1902 <__ultoa_invert+0x9c>
    1886:	b4 e0       	ldi	r27, 0x04	; 4
    1888:	3c d0       	rcall	.+120    	; 0x1902 <__ultoa_invert+0x9c>
    188a:	67 0f       	add	r22, r23
    188c:	78 1f       	adc	r23, r24
    188e:	89 1f       	adc	r24, r25
    1890:	9a 1f       	adc	r25, r26
    1892:	a1 1d       	adc	r26, r1
    1894:	68 0f       	add	r22, r24
    1896:	79 1f       	adc	r23, r25
    1898:	8a 1f       	adc	r24, r26
    189a:	91 1d       	adc	r25, r1
    189c:	a1 1d       	adc	r26, r1
    189e:	6a 0f       	add	r22, r26
    18a0:	71 1d       	adc	r23, r1
    18a2:	81 1d       	adc	r24, r1
    18a4:	91 1d       	adc	r25, r1
    18a6:	a1 1d       	adc	r26, r1
    18a8:	20 d0       	rcall	.+64     	; 0x18ea <__ultoa_invert+0x84>
    18aa:	09 f4       	brne	.+2      	; 0x18ae <__ultoa_invert+0x48>
    18ac:	68 94       	set
    18ae:	3f 91       	pop	r19
    18b0:	2a e0       	ldi	r18, 0x0A	; 10
    18b2:	26 9f       	mul	r18, r22
    18b4:	11 24       	eor	r1, r1
    18b6:	30 19       	sub	r19, r0
    18b8:	30 5d       	subi	r19, 0xD0	; 208
    18ba:	31 93       	st	Z+, r19
    18bc:	de f6       	brtc	.-74     	; 0x1874 <__ultoa_invert+0xe>
    18be:	cf 01       	movw	r24, r30
    18c0:	08 95       	ret
    18c2:	46 2f       	mov	r20, r22
    18c4:	47 70       	andi	r20, 0x07	; 7
    18c6:	40 5d       	subi	r20, 0xD0	; 208
    18c8:	41 93       	st	Z+, r20
    18ca:	b3 e0       	ldi	r27, 0x03	; 3
    18cc:	0f d0       	rcall	.+30     	; 0x18ec <__ultoa_invert+0x86>
    18ce:	c9 f7       	brne	.-14     	; 0x18c2 <__ultoa_invert+0x5c>
    18d0:	f6 cf       	rjmp	.-20     	; 0x18be <__ultoa_invert+0x58>
    18d2:	46 2f       	mov	r20, r22
    18d4:	4f 70       	andi	r20, 0x0F	; 15
    18d6:	40 5d       	subi	r20, 0xD0	; 208
    18d8:	4a 33       	cpi	r20, 0x3A	; 58
    18da:	18 f0       	brcs	.+6      	; 0x18e2 <__ultoa_invert+0x7c>
    18dc:	49 5d       	subi	r20, 0xD9	; 217
    18de:	31 fd       	sbrc	r19, 1
    18e0:	40 52       	subi	r20, 0x20	; 32
    18e2:	41 93       	st	Z+, r20
    18e4:	02 d0       	rcall	.+4      	; 0x18ea <__ultoa_invert+0x84>
    18e6:	a9 f7       	brne	.-22     	; 0x18d2 <__ultoa_invert+0x6c>
    18e8:	ea cf       	rjmp	.-44     	; 0x18be <__ultoa_invert+0x58>
    18ea:	b4 e0       	ldi	r27, 0x04	; 4
    18ec:	a6 95       	lsr	r26
    18ee:	97 95       	ror	r25
    18f0:	87 95       	ror	r24
    18f2:	77 95       	ror	r23
    18f4:	67 95       	ror	r22
    18f6:	ba 95       	dec	r27
    18f8:	c9 f7       	brne	.-14     	; 0x18ec <__ultoa_invert+0x86>
    18fa:	00 97       	sbiw	r24, 0x00	; 0
    18fc:	61 05       	cpc	r22, r1
    18fe:	71 05       	cpc	r23, r1
    1900:	08 95       	ret
    1902:	9b 01       	movw	r18, r22
    1904:	ac 01       	movw	r20, r24
    1906:	0a 2e       	mov	r0, r26
    1908:	06 94       	lsr	r0
    190a:	57 95       	ror	r21
    190c:	47 95       	ror	r20
    190e:	37 95       	ror	r19
    1910:	27 95       	ror	r18
    1912:	ba 95       	dec	r27
    1914:	c9 f7       	brne	.-14     	; 0x1908 <__ultoa_invert+0xa2>
    1916:	62 0f       	add	r22, r18
    1918:	73 1f       	adc	r23, r19
    191a:	84 1f       	adc	r24, r20
    191c:	95 1f       	adc	r25, r21
    191e:	a0 1d       	adc	r26, r0
    1920:	08 95       	ret

00001922 <__divmodsi4>:
    1922:	05 2e       	mov	r0, r21
    1924:	97 fb       	bst	r25, 7
    1926:	1e f4       	brtc	.+6      	; 0x192e <__divmodsi4+0xc>
    1928:	00 94       	com	r0
    192a:	0e 94 a8 0c 	call	0x1950	; 0x1950 <__negsi2>
    192e:	57 fd       	sbrc	r21, 7
    1930:	07 d0       	rcall	.+14     	; 0x1940 <__divmodsi4_neg2>
    1932:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <__udivmodsi4>
    1936:	07 fc       	sbrc	r0, 7
    1938:	03 d0       	rcall	.+6      	; 0x1940 <__divmodsi4_neg2>
    193a:	4e f4       	brtc	.+18     	; 0x194e <__divmodsi4_exit>
    193c:	0c 94 a8 0c 	jmp	0x1950	; 0x1950 <__negsi2>

00001940 <__divmodsi4_neg2>:
    1940:	50 95       	com	r21
    1942:	40 95       	com	r20
    1944:	30 95       	com	r19
    1946:	21 95       	neg	r18
    1948:	3f 4f       	sbci	r19, 0xFF	; 255
    194a:	4f 4f       	sbci	r20, 0xFF	; 255
    194c:	5f 4f       	sbci	r21, 0xFF	; 255

0000194e <__divmodsi4_exit>:
    194e:	08 95       	ret

00001950 <__negsi2>:
    1950:	90 95       	com	r25
    1952:	80 95       	com	r24
    1954:	70 95       	com	r23
    1956:	61 95       	neg	r22
    1958:	7f 4f       	sbci	r23, 0xFF	; 255
    195a:	8f 4f       	sbci	r24, 0xFF	; 255
    195c:	9f 4f       	sbci	r25, 0xFF	; 255
    195e:	08 95       	ret

00001960 <__muluhisi3>:
    1960:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <__umulhisi3>
    1964:	a5 9f       	mul	r26, r21
    1966:	90 0d       	add	r25, r0
    1968:	b4 9f       	mul	r27, r20
    196a:	90 0d       	add	r25, r0
    196c:	a4 9f       	mul	r26, r20
    196e:	80 0d       	add	r24, r0
    1970:	91 1d       	adc	r25, r1
    1972:	11 24       	eor	r1, r1
    1974:	08 95       	ret

00001976 <__mulshisi3>:
    1976:	b7 ff       	sbrs	r27, 7
    1978:	0c 94 b0 0c 	jmp	0x1960	; 0x1960 <__muluhisi3>

0000197c <__mulohisi3>:
    197c:	0e 94 b0 0c 	call	0x1960	; 0x1960 <__muluhisi3>
    1980:	82 1b       	sub	r24, r18
    1982:	93 0b       	sbc	r25, r19
    1984:	08 95       	ret

00001986 <__prologue_saves__>:
    1986:	2f 92       	push	r2
    1988:	3f 92       	push	r3
    198a:	4f 92       	push	r4
    198c:	5f 92       	push	r5
    198e:	6f 92       	push	r6
    1990:	7f 92       	push	r7
    1992:	8f 92       	push	r8
    1994:	9f 92       	push	r9
    1996:	af 92       	push	r10
    1998:	bf 92       	push	r11
    199a:	cf 92       	push	r12
    199c:	df 92       	push	r13
    199e:	ef 92       	push	r14
    19a0:	ff 92       	push	r15
    19a2:	0f 93       	push	r16
    19a4:	1f 93       	push	r17
    19a6:	cf 93       	push	r28
    19a8:	df 93       	push	r29
    19aa:	cd b7       	in	r28, 0x3d	; 61
    19ac:	de b7       	in	r29, 0x3e	; 62
    19ae:	ca 1b       	sub	r28, r26
    19b0:	db 0b       	sbc	r29, r27
    19b2:	0f b6       	in	r0, 0x3f	; 63
    19b4:	f8 94       	cli
    19b6:	de bf       	out	0x3e, r29	; 62
    19b8:	0f be       	out	0x3f, r0	; 63
    19ba:	cd bf       	out	0x3d, r28	; 61
    19bc:	09 94       	ijmp

000019be <__epilogue_restores__>:
    19be:	2a 88       	ldd	r2, Y+18	; 0x12
    19c0:	39 88       	ldd	r3, Y+17	; 0x11
    19c2:	48 88       	ldd	r4, Y+16	; 0x10
    19c4:	5f 84       	ldd	r5, Y+15	; 0x0f
    19c6:	6e 84       	ldd	r6, Y+14	; 0x0e
    19c8:	7d 84       	ldd	r7, Y+13	; 0x0d
    19ca:	8c 84       	ldd	r8, Y+12	; 0x0c
    19cc:	9b 84       	ldd	r9, Y+11	; 0x0b
    19ce:	aa 84       	ldd	r10, Y+10	; 0x0a
    19d0:	b9 84       	ldd	r11, Y+9	; 0x09
    19d2:	c8 84       	ldd	r12, Y+8	; 0x08
    19d4:	df 80       	ldd	r13, Y+7	; 0x07
    19d6:	ee 80       	ldd	r14, Y+6	; 0x06
    19d8:	fd 80       	ldd	r15, Y+5	; 0x05
    19da:	0c 81       	ldd	r16, Y+4	; 0x04
    19dc:	1b 81       	ldd	r17, Y+3	; 0x03
    19de:	aa 81       	ldd	r26, Y+2	; 0x02
    19e0:	b9 81       	ldd	r27, Y+1	; 0x01
    19e2:	ce 0f       	add	r28, r30
    19e4:	d1 1d       	adc	r29, r1
    19e6:	0f b6       	in	r0, 0x3f	; 63
    19e8:	f8 94       	cli
    19ea:	de bf       	out	0x3e, r29	; 62
    19ec:	0f be       	out	0x3f, r0	; 63
    19ee:	cd bf       	out	0x3d, r28	; 61
    19f0:	ed 01       	movw	r28, r26
    19f2:	08 95       	ret

000019f4 <__udivmodsi4>:
    19f4:	a1 e2       	ldi	r26, 0x21	; 33
    19f6:	1a 2e       	mov	r1, r26
    19f8:	aa 1b       	sub	r26, r26
    19fa:	bb 1b       	sub	r27, r27
    19fc:	fd 01       	movw	r30, r26
    19fe:	0d c0       	rjmp	.+26     	; 0x1a1a <__udivmodsi4_ep>

00001a00 <__udivmodsi4_loop>:
    1a00:	aa 1f       	adc	r26, r26
    1a02:	bb 1f       	adc	r27, r27
    1a04:	ee 1f       	adc	r30, r30
    1a06:	ff 1f       	adc	r31, r31
    1a08:	a2 17       	cp	r26, r18
    1a0a:	b3 07       	cpc	r27, r19
    1a0c:	e4 07       	cpc	r30, r20
    1a0e:	f5 07       	cpc	r31, r21
    1a10:	20 f0       	brcs	.+8      	; 0x1a1a <__udivmodsi4_ep>
    1a12:	a2 1b       	sub	r26, r18
    1a14:	b3 0b       	sbc	r27, r19
    1a16:	e4 0b       	sbc	r30, r20
    1a18:	f5 0b       	sbc	r31, r21

00001a1a <__udivmodsi4_ep>:
    1a1a:	66 1f       	adc	r22, r22
    1a1c:	77 1f       	adc	r23, r23
    1a1e:	88 1f       	adc	r24, r24
    1a20:	99 1f       	adc	r25, r25
    1a22:	1a 94       	dec	r1
    1a24:	69 f7       	brne	.-38     	; 0x1a00 <__udivmodsi4_loop>
    1a26:	60 95       	com	r22
    1a28:	70 95       	com	r23
    1a2a:	80 95       	com	r24
    1a2c:	90 95       	com	r25
    1a2e:	9b 01       	movw	r18, r22
    1a30:	ac 01       	movw	r20, r24
    1a32:	bd 01       	movw	r22, r26
    1a34:	cf 01       	movw	r24, r30
    1a36:	08 95       	ret

00001a38 <__umulhisi3>:
    1a38:	a2 9f       	mul	r26, r18
    1a3a:	b0 01       	movw	r22, r0
    1a3c:	b3 9f       	mul	r27, r19
    1a3e:	c0 01       	movw	r24, r0
    1a40:	a3 9f       	mul	r26, r19
    1a42:	70 0d       	add	r23, r0
    1a44:	81 1d       	adc	r24, r1
    1a46:	11 24       	eor	r1, r1
    1a48:	91 1d       	adc	r25, r1
    1a4a:	b2 9f       	mul	r27, r18
    1a4c:	70 0d       	add	r23, r0
    1a4e:	81 1d       	adc	r24, r1
    1a50:	11 24       	eor	r1, r1
    1a52:	91 1d       	adc	r25, r1
    1a54:	08 95       	ret

00001a56 <_exit>:
    1a56:	f8 94       	cli

00001a58 <__stop_program>:
    1a58:	ff cf       	rjmp	.-2      	; 0x1a58 <__stop_program>
