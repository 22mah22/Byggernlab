
ice_ice.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000010c  00800100  00001a94  00001b28  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a94  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  0080020c  0080020c  00001c34  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001c34  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001c90  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a8  00000000  00000000  00001ccc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000028fa  00000000  00000000  00001e74  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000100a  00000000  00000000  0000476e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001003  00000000  00000000  00005778  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000458  00000000  00000000  0000677c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000089a  00000000  00000000  00006bd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000018d0  00000000  00000000  0000746e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000280  00000000  00000000  00008d3e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 60 03 	jmp	0x6c0	; 0x6c0 <__ctors_end>
       4:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
       8:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
       c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      10:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      14:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      18:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      1c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      20:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      24:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      28:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      2c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      30:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      34:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      38:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      3c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      40:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      44:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      48:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      4c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      50:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      54:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      58:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      5c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      60:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      64:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      68:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      6c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	00 00       	nop
      72:	00 00       	nop
      74:	00 5c       	subi	r16, 0xC0	; 192
      76:	00 00       	nop
      78:	0c 00       	.word	0x000c	; ????
      7a:	0c 00       	.word	0x000c	; ????
      7c:	7c 28       	or	r7, r12
      7e:	7c 28       	or	r7, r12
      80:	58 dc       	rcall	.-1872   	; 0xfffff932 <__eeprom_end+0xff7ef932>
      82:	68 00       	.word	0x0068	; ????
      84:	24 10       	cpse	r2, r4
      86:	48 00       	.word	0x0048	; ????
      88:	28 54       	subi	r18, 0x48	; 72
      8a:	28 40       	sbci	r18, 0x08	; 8
      8c:	00 0c       	add	r0, r0
      8e:	00 00       	nop
      90:	00 78       	andi	r16, 0x80	; 128
      92:	84 00       	.word	0x0084	; ????
      94:	84 78       	andi	r24, 0x84	; 132
      96:	00 00       	nop
      98:	54 38       	cpi	r21, 0x84	; 132
      9a:	54 00       	.word	0x0054	; ????
      9c:	10 7c       	andi	r17, 0xC0	; 192
      9e:	10 00       	.word	0x0010	; ????
      a0:	80 40       	sbci	r24, 0x00	; 0
      a2:	00 00       	nop
      a4:	10 10       	cpse	r1, r0
      a6:	10 00       	.word	0x0010	; ????
      a8:	00 40       	sbci	r16, 0x00	; 0
      aa:	00 00       	nop
      ac:	60 10       	cpse	r6, r0
      ae:	0c 00       	.word	0x000c	; ????
      b0:	38 54       	subi	r19, 0x48	; 72
      b2:	38 00       	.word	0x0038	; ????
      b4:	48 7c       	andi	r20, 0xC8	; 200
      b6:	40 00       	.word	0x0040	; ????
      b8:	48 64       	ori	r20, 0x48	; 72
      ba:	58 00       	.word	0x0058	; ????
      bc:	44 54       	subi	r20, 0x44	; 68
      be:	2c 00       	.word	0x002c	; ????
      c0:	1c 10       	cpse	r1, r12
      c2:	7c 00       	.word	0x007c	; ????
      c4:	5c 54       	subi	r21, 0x4C	; 76
      c6:	24 00       	.word	0x0024	; ????
      c8:	38 54       	subi	r19, 0x48	; 72
      ca:	24 00       	.word	0x0024	; ????
      cc:	64 14       	cp	r6, r4
      ce:	0c 00       	.word	0x000c	; ????
      d0:	68 54       	subi	r22, 0x48	; 72
      d2:	2c 00       	.word	0x002c	; ????
      d4:	48 54       	subi	r20, 0x48	; 72
      d6:	38 00       	.word	0x0038	; ????
      d8:	00 48       	sbci	r16, 0x80	; 128
      da:	00 00       	nop
      dc:	80 48       	sbci	r24, 0x80	; 128
      de:	00 00       	nop
      e0:	10 28       	or	r1, r0
      e2:	44 00       	.word	0x0044	; ????
      e4:	28 28       	or	r2, r8
      e6:	28 00       	.word	0x0028	; ????
      e8:	44 28       	or	r4, r4
      ea:	10 00       	.word	0x0010	; ????
      ec:	04 54       	subi	r16, 0x44	; 68
      ee:	08 00       	.word	0x0008	; ????
      f0:	38 44       	sbci	r19, 0x48	; 72
      f2:	5c 00       	.word	0x005c	; ????
      f4:	78 14       	cp	r7, r8
      f6:	78 00       	.word	0x0078	; ????
      f8:	7c 54       	subi	r23, 0x4C	; 76
      fa:	28 00       	.word	0x0028	; ????
      fc:	38 44       	sbci	r19, 0x48	; 72
      fe:	28 00       	.word	0x0028	; ????
     100:	7c 44       	sbci	r23, 0x4C	; 76
     102:	38 00       	.word	0x0038	; ????
     104:	7c 54       	subi	r23, 0x4C	; 76
     106:	44 00       	.word	0x0044	; ????
     108:	7c 14       	cp	r7, r12
     10a:	04 00       	.word	0x0004	; ????
     10c:	38 44       	sbci	r19, 0x48	; 72
     10e:	74 00       	.word	0x0074	; ????
     110:	7c 10       	cpse	r7, r12
     112:	7c 00       	.word	0x007c	; ????
     114:	44 7c       	andi	r20, 0xC4	; 196
     116:	44 00       	.word	0x0044	; ????
     118:	20 40       	sbci	r18, 0x00	; 0
     11a:	3c 00       	.word	0x003c	; ????
     11c:	7c 10       	cpse	r7, r12
     11e:	6c 00       	.word	0x006c	; ????
     120:	7c 40       	sbci	r23, 0x0C	; 12
     122:	40 00       	.word	0x0040	; ????
     124:	7c 18       	sub	r7, r12
     126:	7c 00       	.word	0x007c	; ????
     128:	78 10       	cpse	r7, r8
     12a:	3c 00       	.word	0x003c	; ????
     12c:	38 44       	sbci	r19, 0x48	; 72
     12e:	38 00       	.word	0x0038	; ????
     130:	7c 14       	cp	r7, r12
     132:	08 00       	.word	0x0008	; ????
     134:	38 44       	sbci	r19, 0x48	; 72
     136:	b8 00       	.word	0x00b8	; ????
     138:	7c 14       	cp	r7, r12
     13a:	68 00       	.word	0x0068	; ????
     13c:	48 54       	subi	r20, 0x48	; 72
     13e:	24 00       	.word	0x0024	; ????
     140:	04 7c       	andi	r16, 0xC4	; 196
     142:	04 00       	.word	0x0004	; ????
     144:	7c 40       	sbci	r23, 0x0C	; 12
     146:	7c 00       	.word	0x007c	; ????
     148:	3c 60       	ori	r19, 0x0C	; 12
     14a:	3c 00       	.word	0x003c	; ????
     14c:	7c 30       	cpi	r23, 0x0C	; 12
     14e:	7c 00       	.word	0x007c	; ????
     150:	6c 10       	cpse	r6, r12
     152:	6c 00       	.word	0x006c	; ????
     154:	0c 70       	andi	r16, 0x0C	; 12
     156:	0c 00       	.word	0x000c	; ????
     158:	64 54       	subi	r22, 0x44	; 68
     15a:	4c 00       	.word	0x004c	; ????
     15c:	00 7c       	andi	r16, 0xC0	; 192
     15e:	44 00       	.word	0x0044	; ????
     160:	0c 10       	cpse	r0, r12
     162:	60 00       	.word	0x0060	; ????
     164:	44 7c       	andi	r20, 0xC4	; 196
     166:	00 00       	nop
     168:	08 04       	cpc	r0, r8
     16a:	08 00       	.word	0x0008	; ????
     16c:	80 80       	ld	r8, Z
     16e:	80 00       	.word	0x0080	; ????
     170:	00 04       	cpc	r0, r0
     172:	08 00       	.word	0x0008	; ????
     174:	30 48       	sbci	r19, 0x80	; 128
     176:	78 00       	.word	0x0078	; ????
     178:	7c 48       	sbci	r23, 0x8C	; 140
     17a:	30 00       	.word	0x0030	; ????
     17c:	30 48       	sbci	r19, 0x80	; 128
     17e:	48 00       	.word	0x0048	; ????
     180:	30 48       	sbci	r19, 0x80	; 128
     182:	7c 00       	.word	0x007c	; ????
     184:	30 68       	ori	r19, 0x80	; 128
     186:	50 00       	.word	0x0050	; ????
     188:	10 78       	andi	r17, 0x80	; 128
     18a:	14 00       	.word	0x0014	; ????
     18c:	90 a8       	ldd	r9, Z+48	; 0x30
     18e:	78 00       	.word	0x0078	; ????
     190:	7c 08       	sbc	r7, r12
     192:	70 00       	.word	0x0070	; ????
     194:	50 74       	andi	r21, 0x40	; 64
     196:	40 00       	.word	0x0040	; ????
     198:	80 80       	ld	r8, Z
     19a:	74 00       	.word	0x0074	; ????
     19c:	7c 10       	cpse	r7, r12
     19e:	68 00       	.word	0x0068	; ????
     1a0:	44 7c       	andi	r20, 0xC4	; 196
     1a2:	40 00       	.word	0x0040	; ????
     1a4:	78 10       	cpse	r7, r8
     1a6:	78 00       	.word	0x0078	; ????
     1a8:	78 08       	sbc	r7, r8
     1aa:	70 00       	.word	0x0070	; ????
     1ac:	30 48       	sbci	r19, 0x80	; 128
     1ae:	30 00       	.word	0x0030	; ????
     1b0:	f8 28       	or	r15, r8
     1b2:	10 00       	.word	0x0010	; ????
     1b4:	30 48       	sbci	r19, 0x80	; 128
     1b6:	f8 00       	.word	0x00f8	; ????
     1b8:	78 10       	cpse	r7, r8
     1ba:	08 00       	.word	0x0008	; ????
     1bc:	50 58       	subi	r21, 0x80	; 128
     1be:	28 00       	.word	0x0028	; ????
     1c0:	08 3c       	cpi	r16, 0xC8	; 200
     1c2:	48 00       	.word	0x0048	; ????
     1c4:	38 40       	sbci	r19, 0x08	; 8
     1c6:	78 00       	.word	0x0078	; ????
     1c8:	38 40       	sbci	r19, 0x08	; 8
     1ca:	38 00       	.word	0x0038	; ????
     1cc:	78 20       	and	r7, r8
     1ce:	78 00       	.word	0x0078	; ????
     1d0:	48 30       	cpi	r20, 0x08	; 8
     1d2:	48 00       	.word	0x0048	; ????
     1d4:	98 a0       	ldd	r9, Y+32	; 0x20
     1d6:	78 00       	.word	0x0078	; ????
     1d8:	48 68       	ori	r20, 0x88	; 136
     1da:	58 00       	.word	0x0058	; ????
     1dc:	10 78       	andi	r17, 0x80	; 128
     1de:	84 00       	.word	0x0084	; ????
     1e0:	00 7c       	andi	r16, 0xC0	; 192
     1e2:	00 00       	nop
     1e4:	84 78       	andi	r24, 0x84	; 132
     1e6:	10 00       	.word	0x0010	; ????
     1e8:	08 04       	cpc	r0, r8
     1ea:	08 04       	cpc	r0, r8

000001ec <font5>:
     1ec:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     1fc:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     20c:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
     21c:	1c 00 08 2a 1c 2a 08 08 08 3e 08 08 00 50 30 00     ...*.*...>...P0.
     22c:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
     23c:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
     24c:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
     25c:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
     26c:	29 1e 00 36 36 00 00 00 56 36 00 00 00 08 14 22     )..66...V6....."
     27c:	41 14 14 14 14 14 41 22 14 08 00 02 01 51 09 06     A.....A".....Q..
     28c:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     29c:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     2ac:	09 01 01 3e 41 41 51 32 7f 08 08 08 7f 00 41 7f     ...>AAQ2......A.
     2bc:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     2cc:	40 7f 02 04 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     2dc:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     2ec:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     2fc:	40 20 1f 7f 20 18 20 7f 63 14 08 14 63 03 04 78     @ .. . .c...c..x
     30c:	04 03 61 51 49 45 43 00 00 7f 41 41 02 04 08 10     ..aQIEC...AA....
     31c:	20 41 41 7f 00 00 04 02 01 02 04 40 40 40 40 40      AA........@@@@@
     32c:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     33c:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     34c:	09 01 02 08 14 54 54 3c 7f 08 04 04 78 00 44 7d     .....TT<....x.D}
     35c:	40 00 20 40 44 3d 00 00 7f 10 28 44 00 41 7f 40     @. @D=....(D.A.@
     36c:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     37c:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     38c:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     39c:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     3ac:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     3bc:	00 00 41 36 08 00 02 01 03 02 01                    ..A6.......

000003c7 <font8>:
	...
     3cf:	00 06 5f 5f 06 00 00 00 00 07 07 00 07 07 00 00     ..__............
     3df:	14 7f 7f 14 7f 7f 14 00 24 2e 6b 6b 3a 12 00 00     ........$.kk:...
     3ef:	46 66 30 18 0c 66 62 00 30 7a 4f 5d 37 7a 48 00     Ff0..fb.0zO]7zH.
     3ff:	04 07 03 00 00 00 00 00 00 1c 3e 63 41 00 00 00     ..........>cA...
     40f:	00 41 63 3e 1c 00 00 00 08 2a 3e 1c 1c 3e 2a 08     .Ac>.....*>..>*.
     41f:	08 08 3e 3e 08 08 00 00 00 a0 e0 60 00 00 00 00     ..>>.......`....
     42f:	08 08 08 08 08 08 00 00 00 00 60 60 00 00 00 00     ..........``....
     43f:	60 30 18 0c 06 03 01 00 3e 7f 59 4d 7f 3e 00 00     `0......>.YM.>..
     44f:	42 42 7f 7f 40 40 00 00 62 73 59 49 6f 66 00 00     BB..@@..bsYIof..
     45f:	22 63 49 49 7f 36 00 00 18 1c 16 13 7f 7f 10 00     "cII.6..........
     46f:	27 67 45 45 7d 39 00 00 3c 7e 4b 49 79 30 00 00     'gEE}9..<~KIy0..
     47f:	03 63 71 19 0f 07 00 00 36 7f 49 49 7f 36 00 00     .cq.....6.II.6..
     48f:	06 4f 49 69 3f 1e 00 00 00 00 6c 6c 00 00 00 00     .OIi?.....ll....
     49f:	00 a0 ec 6c 00 00 00 00 08 1c 36 63 41 00 00 00     ...l......6cA...
     4af:	14 14 14 14 14 14 00 00 00 41 63 36 1c 08 00 00     .........Ac6....
     4bf:	02 03 51 59 0f 06 00 00 3e 7f 41 5d 5d 1f 1e 00     ..QY....>.A]]...
     4cf:	7c 7e 13 13 7e 7c 00 00 41 7f 7f 49 49 7f 36 00     |~..~|..A..II.6.
     4df:	1c 3e 63 41 41 63 22 00 41 7f 7f 41 63 7f 1c 00     .>cAAc".A..Ac...
     4ef:	41 7f 7f 49 5d 41 63 00 41 7f 7f 49 1d 01 03 00     A..I]Ac.A..I....
     4ff:	1c 3e 63 41 51 73 72 00 7f 7f 08 08 7f 7f 00 00     .>cAQsr.........
     50f:	00 41 7f 7f 41 00 00 00 30 70 40 41 7f 3f 01 00     .A..A...0p@A.?..
     51f:	41 7f 7f 08 1c 77 63 00 41 7f 7f 41 40 60 70 00     A....wc.A..A@`p.
     52f:	7f 7f 06 0c 06 7f 7f 00 7f 7f 06 0c 18 7f 7f 00     ................
     53f:	1c 3e 63 41 63 3e 1c 00 41 7f 7f 49 09 0f 06 00     .>cAc>..A..I....
     54f:	1e 3f 21 71 7f 5e 00 00 41 7f 7f 19 39 6f 46 00     .?!q.^..A...9oF.
     55f:	26 67 4d 59 7b 32 00 00 03 41 7f 7f 41 03 00 00     &gMY{2...A..A...
     56f:	7f 7f 40 40 7f 7f 00 00 1f 3f 60 60 3f 1f 00 00     ..@@.....?``?...
     57f:	7f 7f 30 18 30 7f 7f 00 63 77 1c 08 1c 77 63 00     ..0.0...cw...wc.
     58f:	07 4f 78 78 4f 07 00 00 67 73 59 4d 47 63 71 00     .OxxO...gsYMGcq.
     59f:	00 7f 7f 41 41 00 00 00 01 03 06 0c 18 30 60 00     ...AA........0`.
     5af:	00 41 41 7f 7f 00 00 00 08 0c 06 03 06 0c 08 00     .AA.............
     5bf:	80 80 80 80 80 80 80 80 00 00 03 07 04 00 00 00     ................
     5cf:	20 74 54 54 3c 78 40 00 41 3f 7f 44 44 7c 38 00      tTT<x@.A?.DD|8.
     5df:	38 7c 44 44 6c 28 00 00 30 78 48 49 3f 7f 40 00     8|DDl(..0xHI?.@.
     5ef:	38 7c 54 54 5c 18 00 00 48 7e 7f 49 03 02 00 00     8|TT\...H~.I....
     5ff:	98 bc a4 a4 f8 7c 04 00 41 7f 7f 08 04 7c 78 00     .....|..A....|x.
     60f:	00 44 7d 7d 40 00 00 00 40 c4 84 fd 7d 00 00 00     .D}}@...@...}...
     61f:	41 7f 7f 10 38 6c 44 00 00 41 7f 7f 40 00 00 00     A...8lD..A..@...
     62f:	7c 7c 0c 18 0c 7c 78 00 7c 7c 04 04 7c 78 00 00     ||...|x.||..|x..
     63f:	38 7c 44 44 7c 38 00 00 84 fc f8 a4 24 3c 18 00     8|DD|8......$<..
     64f:	18 3c 24 a4 f8 fc 84 00 44 7c 78 44 1c 18 00 00     .<$.....D|xD....
     65f:	48 5c 54 54 74 24 00 00 00 04 3e 7f 44 24 00 00     H\TTt$....>.D$..
     66f:	3c 7c 40 40 3c 7c 40 00 1c 3c 60 60 3c 1c 00 00     <|@@<|@..<``<...
     67f:	3c 7c 60 30 60 7c 3c 00 44 6c 38 10 38 6c 44 00     <|`0`|<.Dl8.8lD.
     68f:	9c bc a0 a0 fc 7c 00 00 4c 64 74 5c 4c 64 00 00     .....|..Ldt\Ld..
     69f:	08 08 3e 77 41 41 00 00 00 00 00 77 77 00 00 00     ..>wAA.....ww...
     6af:	41 41 77 3e 08 08 00 00 02 03 01 03 02 03 01 00     AAw>............
	...

000006c0 <__ctors_end>:
     6c0:	11 24       	eor	r1, r1
     6c2:	1f be       	out	0x3f, r1	; 63
     6c4:	cf ef       	ldi	r28, 0xFF	; 255
     6c6:	d4 e0       	ldi	r29, 0x04	; 4
     6c8:	de bf       	out	0x3e, r29	; 62
     6ca:	cd bf       	out	0x3d, r28	; 61

000006cc <__do_copy_data>:
     6cc:	12 e0       	ldi	r17, 0x02	; 2
     6ce:	a0 e0       	ldi	r26, 0x00	; 0
     6d0:	b1 e0       	ldi	r27, 0x01	; 1
     6d2:	e4 e9       	ldi	r30, 0x94	; 148
     6d4:	fa e1       	ldi	r31, 0x1A	; 26
     6d6:	02 c0       	rjmp	.+4      	; 0x6dc <__do_copy_data+0x10>
     6d8:	05 90       	lpm	r0, Z+
     6da:	0d 92       	st	X+, r0
     6dc:	ac 30       	cpi	r26, 0x0C	; 12
     6de:	b1 07       	cpc	r27, r17
     6e0:	d9 f7       	brne	.-10     	; 0x6d8 <__do_copy_data+0xc>

000006e2 <__do_clear_bss>:
     6e2:	22 e0       	ldi	r18, 0x02	; 2
     6e4:	ac e0       	ldi	r26, 0x0C	; 12
     6e6:	b2 e0       	ldi	r27, 0x02	; 2
     6e8:	01 c0       	rjmp	.+2      	; 0x6ec <.do_clear_bss_start>

000006ea <.do_clear_bss_loop>:
     6ea:	1d 92       	st	X+, r1

000006ec <.do_clear_bss_start>:
     6ec:	a6 31       	cpi	r26, 0x16	; 22
     6ee:	b2 07       	cpc	r27, r18
     6f0:	e1 f7       	brne	.-8      	; 0x6ea <.do_clear_bss_loop>
     6f2:	0e 94 bd 04 	call	0x97a	; 0x97a <main>
     6f6:	0c 94 48 0d 	jmp	0x1a90	; 0x1a90 <_exit>

000006fa <__bad_interrupt>:
     6fa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000006fe <new_menu>:
	}
	invert_selected(menuPointer);
}

void change_menu(menu* next_menu, menu* prev_menu){
	write_menu_to_screen(next_menu);
     6fe:	cf 93       	push	r28
     700:	df 93       	push	r29
     702:	ec 01       	movw	r28, r24
     704:	81 e2       	ldi	r24, 0x21	; 33
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	0e 94 e5 07 	call	0xfca	; 0xfca <malloc>
     70c:	aa e0       	ldi	r26, 0x0A	; 10
     70e:	b1 e0       	ldi	r27, 0x01	; 1
     710:	fc 01       	movw	r30, r24
     712:	4a e1       	ldi	r20, 0x1A	; 26
     714:	51 e0       	ldi	r21, 0x01	; 1
     716:	11 8a       	std	Z+17, r1	; 0x11
     718:	10 8a       	std	Z+16, r1	; 0x10
     71a:	2d 91       	ld	r18, X+
     71c:	3d 91       	ld	r19, X+
     71e:	21 93       	st	Z+, r18
     720:	31 93       	st	Z+, r19
     722:	a4 17       	cp	r26, r20
     724:	b5 07       	cpc	r27, r21
     726:	b9 f7       	brne	.-18     	; 0x716 <new_menu+0x18>
     728:	fc 01       	movw	r30, r24
     72a:	10 a2       	std	Z+32, r1	; 0x20
     72c:	d7 8f       	std	Z+31, r29	; 0x1f
     72e:	c6 8f       	std	Z+30, r28	; 0x1e
     730:	df 91       	pop	r29
     732:	cf 91       	pop	r28
     734:	08 95       	ret

00000736 <invert_selected>:
     736:	cf 93       	push	r28
     738:	df 93       	push	r29
     73a:	ec 01       	movw	r28, r24
     73c:	80 e0       	ldi	r24, 0x00	; 0
     73e:	0e 94 da 05 	call	0xbb4	; 0xbb4 <go_to_column>
     742:	88 a1       	ldd	r24, Y+32	; 0x20
     744:	e8 2f       	mov	r30, r24
     746:	f0 e0       	ldi	r31, 0x00	; 0
     748:	ee 0f       	add	r30, r30
     74a:	ff 1f       	adc	r31, r31
     74c:	ec 0f       	add	r30, r28
     74e:	fd 1f       	adc	r31, r29
     750:	60 81       	ld	r22, Z
     752:	71 81       	ldd	r23, Z+1	; 0x01
     754:	48 e0       	ldi	r20, 0x08	; 8
     756:	0e 94 0e 07 	call	0xe1c	; 0xe1c <oled_write_string_inverted>
     75a:	df 91       	pop	r29
     75c:	cf 91       	pop	r28
     75e:	08 95       	ret

00000760 <write_menu_to_screen>:
     760:	ff 92       	push	r15
     762:	0f 93       	push	r16
     764:	1f 93       	push	r17
     766:	cf 93       	push	r28
     768:	df 93       	push	r29
     76a:	f8 2e       	mov	r15, r24
     76c:	d9 2f       	mov	r29, r25
     76e:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <clear_oled_new>
     772:	0f 2d       	mov	r16, r15
     774:	1d 2f       	mov	r17, r29
     776:	c0 e0       	ldi	r28, 0x00	; 0
     778:	80 e0       	ldi	r24, 0x00	; 0
     77a:	0e 94 da 05 	call	0xbb4	; 0xbb4 <go_to_column>
     77e:	f8 01       	movw	r30, r16
     780:	61 91       	ld	r22, Z+
     782:	71 91       	ld	r23, Z+
     784:	8f 01       	movw	r16, r30
     786:	48 e0       	ldi	r20, 0x08	; 8
     788:	8c 2f       	mov	r24, r28
     78a:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <oled_write_string>
     78e:	cf 5f       	subi	r28, 0xFF	; 255
     790:	c8 30       	cpi	r28, 0x08	; 8
     792:	91 f7       	brne	.-28     	; 0x778 <write_menu_to_screen+0x18>
     794:	8f 2d       	mov	r24, r15
     796:	9d 2f       	mov	r25, r29
     798:	0e 94 9b 03 	call	0x736	; 0x736 <invert_selected>
     79c:	df 91       	pop	r29
     79e:	cf 91       	pop	r28
     7a0:	1f 91       	pop	r17
     7a2:	0f 91       	pop	r16
     7a4:	ff 90       	pop	r15
     7a6:	08 95       	ret

000007a8 <change_selected>:
void invert_selected(menu* menuPointer){
	go_to_column(0);
	oled_write_string_inverted((menuPointer->selected), menuPointer->labels[(menuPointer->selected)], 8);
}

void change_selected(menu* menuPointer, DIRECTION d){
     7a8:	0f 93       	push	r16
     7aa:	1f 93       	push	r17
     7ac:	cf 93       	push	r28
     7ae:	8c 01       	movw	r16, r24
     7b0:	c6 2f       	mov	r28, r22
	if(d == UP){
     7b2:	62 30       	cpi	r22, 0x02	; 2
     7b4:	89 f4       	brne	.+34     	; 0x7d8 <change_selected+0x30>
		(menuPointer->selected)--;
     7b6:	fc 01       	movw	r30, r24
     7b8:	80 a1       	ldd	r24, Z+32	; 0x20
     7ba:	81 50       	subi	r24, 0x01	; 1
     7bc:	80 a3       	std	Z+32, r24	; 0x20
		printf("%d up",(menuPointer->selected));
     7be:	1f 92       	push	r1
     7c0:	8f 93       	push	r24
     7c2:	8f e1       	ldi	r24, 0x1F	; 31
     7c4:	91 e0       	ldi	r25, 0x01	; 1
     7c6:	9f 93       	push	r25
     7c8:	8f 93       	push	r24
     7ca:	0e 94 ad 09 	call	0x135a	; 0x135a <printf>
     7ce:	0f 90       	pop	r0
     7d0:	0f 90       	pop	r0
     7d2:	0f 90       	pop	r0
     7d4:	0f 90       	pop	r0
     7d6:	12 c0       	rjmp	.+36     	; 0x7fc <change_selected+0x54>
	}
	if(d == DOWN){
     7d8:	63 30       	cpi	r22, 0x03	; 3
     7da:	81 f4       	brne	.+32     	; 0x7fc <change_selected+0x54>
		(menuPointer->selected)++;
     7dc:	fc 01       	movw	r30, r24
     7de:	80 a1       	ldd	r24, Z+32	; 0x20
     7e0:	8f 5f       	subi	r24, 0xFF	; 255
     7e2:	80 a3       	std	Z+32, r24	; 0x20
		printf("%d down",(menuPointer->selected));
     7e4:	1f 92       	push	r1
     7e6:	8f 93       	push	r24
     7e8:	85 e2       	ldi	r24, 0x25	; 37
     7ea:	91 e0       	ldi	r25, 0x01	; 1
     7ec:	9f 93       	push	r25
     7ee:	8f 93       	push	r24
     7f0:	0e 94 ad 09 	call	0x135a	; 0x135a <printf>
     7f4:	0f 90       	pop	r0
     7f6:	0f 90       	pop	r0
     7f8:	0f 90       	pop	r0
     7fa:	0f 90       	pop	r0
	}
	if((menuPointer->selected) == 8){
     7fc:	f8 01       	movw	r30, r16
     7fe:	80 a1       	ldd	r24, Z+32	; 0x20
     800:	88 30       	cpi	r24, 0x08	; 8
     802:	11 f4       	brne	.+4      	; 0x808 <change_selected+0x60>
		(menuPointer->selected) = 0;
     804:	10 a2       	std	Z+32, r1	; 0x20
     806:	05 c0       	rjmp	.+10     	; 0x812 <change_selected+0x6a>
	}
	if((menuPointer->selected) == 255){
     808:	8f 3f       	cpi	r24, 0xFF	; 255
     80a:	19 f4       	brne	.+6      	; 0x812 <change_selected+0x6a>
		(menuPointer->selected) = 7;
     80c:	87 e0       	ldi	r24, 0x07	; 7
     80e:	f8 01       	movw	r30, r16
     810:	80 a3       	std	Z+32, r24	; 0x20
	}
	if(d != WAITING && d != NEUTRAL){
     812:	c4 50       	subi	r28, 0x04	; 4
     814:	c2 30       	cpi	r28, 0x02	; 2
     816:	18 f0       	brcs	.+6      	; 0x81e <change_selected+0x76>
		write_menu_to_screen(menuPointer);
     818:	c8 01       	movw	r24, r16
     81a:	0e 94 b0 03 	call	0x760	; 0x760 <write_menu_to_screen>
	}
	
}
     81e:	cf 91       	pop	r28
     820:	1f 91       	pop	r17
     822:	0f 91       	pop	r16
     824:	08 95       	ret

00000826 <button_pressed>:

void button_pressed(menu* menuPointer){
     826:	dc 01       	movw	r26, r24
	if(menuPointer->links[(menuPointer->selected)] != NULL){
     828:	90 96       	adiw	r26, 0x20	; 32
     82a:	9c 91       	ld	r25, X
     82c:	90 97       	sbiw	r26, 0x20	; 32
     82e:	e9 2f       	mov	r30, r25
     830:	f0 e0       	ldi	r31, 0x00	; 0
     832:	38 96       	adiw	r30, 0x08	; 8
     834:	ee 0f       	add	r30, r30
     836:	ff 1f       	adc	r31, r31
     838:	ea 0f       	add	r30, r26
     83a:	fb 1f       	adc	r31, r27
     83c:	80 81       	ld	r24, Z
     83e:	91 81       	ldd	r25, Z+1	; 0x01
     840:	00 97       	sbiw	r24, 0x00	; 0
     842:	11 f0       	breq	.+4      	; 0x848 <button_pressed+0x22>
	}
	invert_selected(menuPointer);
}

void change_menu(menu* next_menu, menu* prev_menu){
	write_menu_to_screen(next_menu);
     844:	0e 94 b0 03 	call	0x760	; 0x760 <write_menu_to_screen>
     848:	08 95       	ret

0000084a <calc_pos>:
	atmelMap->ADC[1] = val;
	x_offset = atmelMap->ADC[1];
	y_offset = atmelMap->ADC[1];
}

void calc_pos(joyVal* values, uint8_t x, uint8_t y){
     84a:	fc 01       	movw	r30, r24
	if(x>=x_offset){
     84c:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <x_offset>
     850:	62 17       	cp	r22, r18
     852:	90 f0       	brcs	.+36     	; 0x878 <calc_pos+0x2e>
		values->x_val = (x-x_offset)*(100)/(255-x_offset);
     854:	30 e0       	ldi	r19, 0x00	; 0
     856:	70 e0       	ldi	r23, 0x00	; 0
     858:	62 1b       	sub	r22, r18
     85a:	73 0b       	sbc	r23, r19
     85c:	54 e6       	ldi	r21, 0x64	; 100
     85e:	56 9f       	mul	r21, r22
     860:	c0 01       	movw	r24, r0
     862:	57 9f       	mul	r21, r23
     864:	90 0d       	add	r25, r0
     866:	11 24       	eor	r1, r1
     868:	6f ef       	ldi	r22, 0xFF	; 255
     86a:	70 e0       	ldi	r23, 0x00	; 0
     86c:	62 1b       	sub	r22, r18
     86e:	73 0b       	sbc	r23, r19
     870:	0e 94 bd 07 	call	0xf7a	; 0xf7a <__divmodhi4>
     874:	60 83       	st	Z, r22
     876:	10 c0       	rjmp	.+32     	; 0x898 <calc_pos+0x4e>
		}else if(x<x_offset){
		values->x_val = -(x_offset-x)*(100)/x_offset;
     878:	a2 2f       	mov	r26, r18
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	26 2f       	mov	r18, r22
     87e:	30 e0       	ldi	r19, 0x00	; 0
     880:	2a 1b       	sub	r18, r26
     882:	3b 0b       	sbc	r19, r27
     884:	54 e6       	ldi	r21, 0x64	; 100
     886:	52 9f       	mul	r21, r18
     888:	c0 01       	movw	r24, r0
     88a:	53 9f       	mul	r21, r19
     88c:	90 0d       	add	r25, r0
     88e:	11 24       	eor	r1, r1
     890:	bd 01       	movw	r22, r26
     892:	0e 94 bd 07 	call	0xf7a	; 0xf7a <__divmodhi4>
     896:	60 83       	st	Z, r22
	}
	if(y>=y_offset){
     898:	60 91 1b 01 	lds	r22, 0x011B	; 0x80011b <y_offset>
     89c:	46 17       	cp	r20, r22
     89e:	98 f0       	brcs	.+38     	; 0x8c6 <calc_pos+0x7c>
		values->y_val = (y-y_offset)*(100)/(255-y_offset);
     8a0:	26 2f       	mov	r18, r22
     8a2:	30 e0       	ldi	r19, 0x00	; 0
     8a4:	50 e0       	ldi	r21, 0x00	; 0
     8a6:	42 1b       	sub	r20, r18
     8a8:	53 0b       	sbc	r21, r19
     8aa:	64 e6       	ldi	r22, 0x64	; 100
     8ac:	64 9f       	mul	r22, r20
     8ae:	c0 01       	movw	r24, r0
     8b0:	65 9f       	mul	r22, r21
     8b2:	90 0d       	add	r25, r0
     8b4:	11 24       	eor	r1, r1
     8b6:	6f ef       	ldi	r22, 0xFF	; 255
     8b8:	70 e0       	ldi	r23, 0x00	; 0
     8ba:	62 1b       	sub	r22, r18
     8bc:	73 0b       	sbc	r23, r19
     8be:	0e 94 bd 07 	call	0xf7a	; 0xf7a <__divmodhi4>
     8c2:	61 83       	std	Z+1, r22	; 0x01
     8c4:	08 95       	ret
		}else if(y<y_offset){
		values->y_val = -(y_offset-y)*(100)/y_offset;
     8c6:	70 e0       	ldi	r23, 0x00	; 0
     8c8:	50 e0       	ldi	r21, 0x00	; 0
     8ca:	46 1b       	sub	r20, r22
     8cc:	57 0b       	sbc	r21, r23
     8ce:	24 e6       	ldi	r18, 0x64	; 100
     8d0:	24 9f       	mul	r18, r20
     8d2:	c0 01       	movw	r24, r0
     8d4:	25 9f       	mul	r18, r21
     8d6:	90 0d       	add	r25, r0
     8d8:	11 24       	eor	r1, r1
     8da:	0e 94 bd 07 	call	0xf7a	; 0xf7a <__divmodhi4>
     8de:	61 83       	std	Z+1, r22	; 0x01
     8e0:	08 95       	ret

000008e2 <calc_pos_slider>:
	}
}
void calc_pos_slider(sliderVal* values, uint8_t left, uint8_t right){
     8e2:	cf 93       	push	r28
     8e4:	df 93       	push	r29
     8e6:	fc 01       	movw	r30, r24
	values->l_val = left*100/255;
     8e8:	24 e6       	ldi	r18, 0x64	; 100
     8ea:	26 9f       	mul	r18, r22
     8ec:	c0 01       	movw	r24, r0
     8ee:	11 24       	eor	r1, r1
     8f0:	cf ef       	ldi	r28, 0xFF	; 255
     8f2:	d0 e0       	ldi	r29, 0x00	; 0
     8f4:	be 01       	movw	r22, r28
     8f6:	0e 94 bd 07 	call	0xf7a	; 0xf7a <__divmodhi4>
     8fa:	60 83       	st	Z, r22
	values->r_val = right*100/255;
     8fc:	24 9f       	mul	r18, r20
     8fe:	c0 01       	movw	r24, r0
     900:	11 24       	eor	r1, r1
     902:	be 01       	movw	r22, r28
     904:	0e 94 bd 07 	call	0xf7a	; 0xf7a <__divmodhi4>
     908:	61 83       	std	Z+1, r22	; 0x01
}
     90a:	df 91       	pop	r29
     90c:	cf 91       	pop	r28
     90e:	08 95       	ret

00000910 <button_check>:

uint8_t button_check(uint8_t current){
     910:	cf 93       	push	r28
	if(current == 0 && previous == 1){
     912:	81 11       	cpse	r24, r1
     914:	0b c0       	rjmp	.+22     	; 0x92c <button_check+0x1c>
     916:	c0 91 1a 01 	lds	r28, 0x011A	; 0x80011a <previous>
     91a:	c1 30       	cpi	r28, 0x01	; 1
     91c:	61 f4       	brne	.+24     	; 0x936 <button_check+0x26>
		previous = 0;
     91e:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <previous>
		printf("%s", "B");
     922:	82 e4       	ldi	r24, 0x42	; 66
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	0e 94 c3 09 	call	0x1386	; 0x1386 <putchar>
		return 1;
     92a:	06 c0       	rjmp	.+12     	; 0x938 <button_check+0x28>
	}else if(current != 0){
		previous = 1;
     92c:	81 e0       	ldi	r24, 0x01	; 1
     92e:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <previous>
		//printf("%s", "C");
	}
	return 0;
     932:	c0 e0       	ldi	r28, 0x00	; 0
     934:	01 c0       	rjmp	.+2      	; 0x938 <button_check+0x28>
     936:	c0 e0       	ldi	r28, 0x00	; 0
}
     938:	8c 2f       	mov	r24, r28
     93a:	cf 91       	pop	r28
     93c:	08 95       	ret

0000093e <joystick_direction>:
	joydir = NEUTRAL;
	return joydir;
	
}*/

DIRECTION joystick_direction(DIRECTION dir, joyVal stick){
     93e:	96 2f       	mov	r25, r22
     940:	27 2f       	mov	r18, r23
	if(stick.x_val < 50 && stick.x_val > -50 && stick.y_val < 50 && stick.y_val > -50 ){
     942:	6f 5c       	subi	r22, 0xCF	; 207
     944:	63 36       	cpi	r22, 0x63	; 99
     946:	18 f4       	brcc	.+6      	; 0x94e <joystick_direction+0x10>
     948:	7f 5c       	subi	r23, 0xCF	; 207
     94a:	73 36       	cpi	r23, 0x63	; 99
     94c:	10 f0       	brcs	.+4      	; 0x952 <joystick_direction+0x14>
		dir = NEUTRAL;
	}
	if(dir == NEUTRAL){
     94e:	84 30       	cpi	r24, 0x04	; 4
     950:	51 f4       	brne	.+20     	; 0x966 <joystick_direction+0x28>
		if(stick.x_val > 95){
     952:	90 36       	cpi	r25, 0x60	; 96
     954:	54 f4       	brge	.+20     	; 0x96a <joystick_direction+0x2c>
			return RIGHT;
		}
		if(stick.x_val < -95){
     956:	91 3a       	cpi	r25, 0xA1	; 161
     958:	54 f0       	brlt	.+20     	; 0x96e <joystick_direction+0x30>
			return LEFT;
		}
		if(stick.y_val < -95){
     95a:	21 3a       	cpi	r18, 0xA1	; 161
     95c:	54 f0       	brlt	.+20     	; 0x972 <joystick_direction+0x34>
			return DOWN;
		}
		if(stick.y_val > 95){
     95e:	20 36       	cpi	r18, 0x60	; 96
     960:	54 f4       	brge	.+20     	; 0x976 <joystick_direction+0x38>
			return UP;
		}
		return NEUTRAL;
     962:	84 e0       	ldi	r24, 0x04	; 4
     964:	08 95       	ret
	}
	return WAITING;
     966:	85 e0       	ldi	r24, 0x05	; 5
     968:	08 95       	ret
	if(stick.x_val < 50 && stick.x_val > -50 && stick.y_val < 50 && stick.y_val > -50 ){
		dir = NEUTRAL;
	}
	if(dir == NEUTRAL){
		if(stick.x_val > 95){
			return RIGHT;
     96a:	81 e0       	ldi	r24, 0x01	; 1
     96c:	08 95       	ret
		}
		if(stick.x_val < -95){
			return LEFT;
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	08 95       	ret
		}
		if(stick.y_val < -95){
			return DOWN;
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	08 95       	ret
		}
		if(stick.y_val > 95){
			return UP;
     976:	82 e0       	ldi	r24, 0x02	; 2
		}
		return NEUTRAL;
	}
	return WAITING;
     978:	08 95       	ret

0000097a <main>:
} menuItem;




int main(void){
     97a:	cf 93       	push	r28
     97c:	df 93       	push	r29
     97e:	00 d0       	rcall	.+0      	; 0x980 <main+0x6>
     980:	00 d0       	rcall	.+0      	; 0x982 <main+0x8>
     982:	cd b7       	in	r28, 0x3d	; 61
     984:	de b7       	in	r29, 0x3e	; 62
	
	joyVal joystick; 
	sliderVal slider; 
	volatile amap* atmelMap = (amap*) BASE;
     986:	a0 90 1d 01 	lds	r10, 0x011D	; 0x80011d <BASE>
     98a:	b0 90 1e 01 	lds	r11, 0x011E	; 0x80011e <BASE+0x1>
	
	MCUCR |= (1<<SRE);
     98e:	85 b7       	in	r24, 0x35	; 53
     990:	80 68       	ori	r24, 0x80	; 128
     992:	85 bf       	out	0x35, r24	; 53
	
	//DDRC = 0xFF;
	//PORTC = 0x00;
	
	SFIOR &= ~(1<<XMM0);
     994:	80 b7       	in	r24, 0x30	; 48
     996:	87 7f       	andi	r24, 0xF7	; 247
     998:	80 bf       	out	0x30, r24	; 48
	SFIOR &= ~(1<<XMM1);
     99a:	80 b7       	in	r24, 0x30	; 48
     99c:	8f 7e       	andi	r24, 0xEF	; 239
     99e:	80 bf       	out	0x30, r24	; 48
	SFIOR |= (1<<XMM2);
     9a0:	80 b7       	in	r24, 0x30	; 48
     9a2:	80 62       	ori	r24, 0x20	; 32
     9a4:	80 bf       	out	0x30, r24	; 48
	
	DDRA |= 0x18;
     9a6:	8a b3       	in	r24, 0x1a	; 26
     9a8:	88 61       	ori	r24, 0x18	; 24
     9aa:	8a bb       	out	0x1a, r24	; 26
	TCCR2 |= (1<<WGM20);	
	TCCR2 |= (1<<COM21);
	TCCR2 |= (1<<COM20);
	*/

	USART_Init ( MYUBRR );
     9ac:	8f e1       	ldi	r24, 0x1F	; 31
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	0e 94 ad 07 	call	0xf5a	; 0xf5a <USART_Init>
	SRAM_test(); _delay_ms(5000);
     9b4:	0e 94 59 07 	call	0xeb2	; 0xeb2 <SRAM_test>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9b8:	2f e3       	ldi	r18, 0x3F	; 63
     9ba:	82 e4       	ldi	r24, 0x42	; 66
     9bc:	9f e0       	ldi	r25, 0x0F	; 15
     9be:	21 50       	subi	r18, 0x01	; 1
     9c0:	80 40       	sbci	r24, 0x00	; 0
     9c2:	90 40       	sbci	r25, 0x00	; 0
     9c4:	e1 f7       	brne	.-8      	; 0x9be <main+0x44>
     9c6:	00 c0       	rjmp	.+0      	; 0x9c8 <main+0x4e>
     9c8:	00 00       	nop
		
	struct menuItem* head;

	menuItem* ptr;
	ptr = (menuItem*)malloc(sizeof(menuItem));
     9ca:	8b e0       	ldi	r24, 0x0B	; 11
     9cc:	90 e0       	ldi	r25, 0x00	; 0
     9ce:	0e 94 e5 07 	call	0xfca	; 0xfca <malloc>
     9d2:	6c 01       	movw	r12, r24
	
	menuItem* child;
	child = (menuItem*)malloc(sizeof(menuItem));
     9d4:	8b e0       	ldi	r24, 0x0B	; 11
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	0e 94 e5 07 	call	0xfca	; 0xfca <malloc>
     9dc:	fc 01       	movw	r30, r24
	child->label = "kid";
     9de:	8d e6       	ldi	r24, 0x6D	; 109
     9e0:	91 e0       	ldi	r25, 0x01	; 1
     9e2:	92 87       	std	Z+10, r25	; 0x0a
     9e4:	81 87       	std	Z+9, r24	; 0x09
	child->line = 0;
     9e6:	10 86       	std	Z+8, r1	; 0x08
	child->next = NULL;
     9e8:	13 82       	std	Z+3, r1	; 0x03
     9ea:	12 82       	std	Z+2, r1	; 0x02
	child->prev = NULL;
     9ec:	11 82       	std	Z+1, r1	; 0x01
     9ee:	10 82       	st	Z, r1

	ptr->label = "first";
     9f0:	81 e7       	ldi	r24, 0x71	; 113
     9f2:	91 e0       	ldi	r25, 0x01	; 1
     9f4:	d6 01       	movw	r26, r12
     9f6:	1a 96       	adiw	r26, 0x0a	; 10
     9f8:	9c 93       	st	X, r25
     9fa:	8e 93       	st	-X, r24
     9fc:	19 97       	sbiw	r26, 0x09	; 9
	ptr->line = 0;
     9fe:	18 96       	adiw	r26, 0x08	; 8
     a00:	1c 92       	st	X, r1
     a02:	18 97       	sbiw	r26, 0x08	; 8
	ptr->prev = NULL;
     a04:	11 96       	adiw	r26, 0x01	; 1
     a06:	1c 92       	st	X, r1
     a08:	1e 92       	st	-X, r1
	ptr->next = NULL;
	ptr->child = child;
     a0a:	17 96       	adiw	r26, 0x07	; 7
     a0c:	fc 93       	st	X, r31
     a0e:	ee 93       	st	-X, r30
     a10:	16 97       	sbiw	r26, 0x06	; 6
	head = ptr;
	
	child->parent = head;
     a12:	d5 82       	std	Z+5, r13	; 0x05
     a14:	c4 82       	std	Z+4, r12	; 0x04

	ptr = (menuItem*)malloc(sizeof(menuItem));
     a16:	8b e0       	ldi	r24, 0x0B	; 11
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	0e 94 e5 07 	call	0xfca	; 0xfca <malloc>
     a1e:	fc 01       	movw	r30, r24

	menuItem* temp = head;

	ptr->label = "second";
     a20:	87 e7       	ldi	r24, 0x77	; 119
     a22:	91 e0       	ldi	r25, 0x01	; 1
     a24:	92 87       	std	Z+10, r25	; 0x0a
     a26:	81 87       	std	Z+9, r24	; 0x09
	ptr->line = 1;
     a28:	81 e0       	ldi	r24, 0x01	; 1
     a2a:	80 87       	std	Z+8, r24	; 0x08
	while(temp->next != NULL){
		temp = temp->next;
	}
	temp->next = ptr;
     a2c:	d6 01       	movw	r26, r12
     a2e:	13 96       	adiw	r26, 0x03	; 3
     a30:	fc 93       	st	X, r31
     a32:	ee 93       	st	-X, r30
     a34:	12 97       	sbiw	r26, 0x02	; 2
	ptr->prev = temp;
     a36:	d1 82       	std	Z+1, r13	; 0x01
     a38:	c0 82       	st	Z, r12
	ptr->next = NULL;
     a3a:	13 82       	std	Z+3, r1	; 0x03
     a3c:	12 82       	std	Z+2, r1	; 0x02

	ptr = (menuItem*)malloc(sizeof(menuItem));
     a3e:	8b e0       	ldi	r24, 0x0B	; 11
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	0e 94 e5 07 	call	0xfca	; 0xfca <malloc>
     a46:	fc 01       	movw	r30, r24

	temp = head;

	ptr->label = "third";
     a48:	8e e7       	ldi	r24, 0x7E	; 126
     a4a:	91 e0       	ldi	r25, 0x01	; 1
     a4c:	92 87       	std	Z+10, r25	; 0x0a
     a4e:	81 87       	std	Z+9, r24	; 0x09
	ptr->line = 2;
     a50:	82 e0       	ldi	r24, 0x02	; 2
     a52:	80 87       	std	Z+8, r24	; 0x08
	while(temp->next != NULL){
     a54:	01 c0       	rjmp	.+2      	; 0xa58 <main+0xde>
		temp = temp->next;
     a56:	6c 01       	movw	r12, r24

	temp = head;

	ptr->label = "third";
	ptr->line = 2;
	while(temp->next != NULL){
     a58:	d6 01       	movw	r26, r12
     a5a:	12 96       	adiw	r26, 0x02	; 2
     a5c:	8d 91       	ld	r24, X+
     a5e:	9c 91       	ld	r25, X
     a60:	13 97       	sbiw	r26, 0x03	; 3
     a62:	00 97       	sbiw	r24, 0x00	; 0
     a64:	c1 f7       	brne	.-16     	; 0xa56 <main+0xdc>
		temp = temp->next;
	}
	temp->next = ptr;
     a66:	13 96       	adiw	r26, 0x03	; 3
     a68:	fc 93       	st	X, r31
     a6a:	ee 93       	st	-X, r30
     a6c:	12 97       	sbiw	r26, 0x02	; 2
	ptr->prev = temp;
     a6e:	d1 82       	std	Z+1, r13	; 0x01
     a70:	c0 82       	st	Z, r12
	ptr->next = NULL;
     a72:	13 82       	std	Z+3, r1	; 0x03
     a74:	12 82       	std	Z+2, r1	; 0x02

	oled_init(atmelMap);
     a76:	c5 01       	movw	r24, r10
     a78:	0e 94 a7 05 	call	0xb4e	; 0xb4e <oled_init>
	clear_oled(atmelMap);
     a7c:	c5 01       	movw	r24, r10
     a7e:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <clear_oled>
	
		
	go_to_line(7);
     a82:	87 e0       	ldi	r24, 0x07	; 7
     a84:	0e 94 d5 05 	call	0xbaa	; 0xbaa <go_to_line>
     a88:	0c e5       	ldi	r16, 0x5C	; 92
     a8a:	10 e0       	ldi	r17, 0x00	; 0
		
		_delay_ms(20);
		
	}*/
	for(int i = 0; i < 92; i++){
		printf("\n");
     a8c:	8a e0       	ldi	r24, 0x0A	; 10
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	0e 94 c3 09 	call	0x1386	; 0x1386 <putchar>
     a94:	01 50       	subi	r16, 0x01	; 1
     a96:	11 09       	sbc	r17, r1
		}
		
		_delay_ms(20);
		
	}*/
	for(int i = 0; i < 92; i++){
     a98:	c9 f7       	brne	.-14     	; 0xa8c <main+0x112>
		
		
	}
	
	menu* currentMenu;
	currentMenu = new_menu(NULL);
     a9a:	80 e0       	ldi	r24, 0x00	; 0
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	0e 94 7f 03 	call	0x6fe	; 0x6fe <new_menu>
     aa2:	6c 01       	movw	r12, r24
	menu* submenu = new_menu(currentMenu);
     aa4:	0e 94 7f 03 	call	0x6fe	; 0x6fe <new_menu>
     aa8:	fc 01       	movw	r30, r24
	submenu->labels[0] = "laks1";
     aaa:	84 e8       	ldi	r24, 0x84	; 132
     aac:	91 e0       	ldi	r25, 0x01	; 1
     aae:	91 83       	std	Z+1, r25	; 0x01
     ab0:	80 83       	st	Z, r24
	submenu->labels[1] = "laks2";
     ab2:	8a e8       	ldi	r24, 0x8A	; 138
     ab4:	91 e0       	ldi	r25, 0x01	; 1
     ab6:	93 83       	std	Z+3, r25	; 0x03
     ab8:	82 83       	std	Z+2, r24	; 0x02
	submenu->labels[2] = "laks3";
     aba:	80 e9       	ldi	r24, 0x90	; 144
     abc:	91 e0       	ldi	r25, 0x01	; 1
     abe:	95 83       	std	Z+5, r25	; 0x05
     ac0:	84 83       	std	Z+4, r24	; 0x04
	submenu->labels[3] = "laks4";
     ac2:	86 e9       	ldi	r24, 0x96	; 150
     ac4:	91 e0       	ldi	r25, 0x01	; 1
     ac6:	97 83       	std	Z+7, r25	; 0x07
     ac8:	86 83       	std	Z+6, r24	; 0x06
	currentMenu->links[0] = submenu;
     aca:	d6 01       	movw	r26, r12
     acc:	51 96       	adiw	r26, 0x11	; 17
     ace:	fc 93       	st	X, r31
     ad0:	ee 93       	st	-X, r30
     ad2:	50 97       	sbiw	r26, 0x10	; 16
	write_menu_to_screen(currentMenu);
     ad4:	c6 01       	movw	r24, r12
     ad6:	0e 94 b0 03 	call	0x760	; 0x760 <write_menu_to_screen>
	
	while(1){
		
		uint8_t val = 1;
		atmelMap->ADC[1] = 0x04; 
     ada:	85 01       	movw	r16, r10
     adc:	0f 5f       	subi	r16, 0xFF	; 255
     ade:	1b 4f       	sbci	r17, 0xFB	; 251
     ae0:	68 94       	set
     ae2:	bb 24       	eor	r11, r11
     ae4:	b2 f8       	bld	r11, 2
     ae6:	f8 01       	movw	r30, r16
     ae8:	b0 82       	st	Z, r11
		uint8_t valx = atmelMap->ADC[1];
     aea:	60 81       	ld	r22, Z
		uint8_t valy = atmelMap->ADC[1];
     aec:	40 81       	ld	r20, Z
		uint8_t vall = atmelMap->ADC[1];
     aee:	a0 80       	ld	r10, Z
		uint8_t valr = atmelMap->ADC[1];
     af0:	90 80       	ld	r9, Z
		
		uint8_t left_button = PIND & (1<< PIND4);
     af2:	80 b3       	in	r24, 0x10	; 16
		uint8_t right_button = PIND & (1<< PIND5);
     af4:	80 b3       	in	r24, 0x10	; 16
		uint8_t joy_button = PINB & (1<< PINB1);
     af6:	86 b3       	in	r24, 0x16	; 22
     af8:	82 70       	andi	r24, 0x02	; 2
     afa:	f8 2e       	mov	r15, r24
		}*/
			
		
		//get_adc_data(atmelMap, &joystick, &slider);
		
		calc_pos(&joystick,valx,valy);
     afc:	50 e0       	ldi	r21, 0x00	; 0
     afe:	70 e0       	ldi	r23, 0x00	; 0
     b00:	ce 01       	movw	r24, r28
     b02:	01 96       	adiw	r24, 0x01	; 1
     b04:	0e 94 25 04 	call	0x84a	; 0x84a <calc_pos>
		calc_pos_slider(&slider,vall,valr);
     b08:	49 2d       	mov	r20, r9
     b0a:	6a 2d       	mov	r22, r10
     b0c:	ce 01       	movw	r24, r28
     b0e:	03 96       	adiw	r24, 0x03	; 3
     b10:	0e 94 71 04 	call	0x8e2	; 0x8e2 <calc_pos_slider>
     b14:	89 ef       	ldi	r24, 0xF9	; 249
     b16:	90 e0       	ldi	r25, 0x00	; 0
     b18:	01 97       	sbiw	r24, 0x01	; 1
     b1a:	f1 f7       	brne	.-4      	; 0xb18 <main+0x19e>
     b1c:	00 c0       	rjmp	.+0      	; 0xb1e <main+0x1a4>
     b1e:	00 00       	nop
		//printf("\r J_x: %4d, J_y: %4d, J_b: %3d Slider 1: %3d, Slider 2: %3d |||| %3d,%3d",joystick.x_val,joystick.y_val,joy_button,slider.l_val,slider.r_val,left_button,right_button);
		

		_delay_ms(1);
		DIRECTION current = joystick_direction(current, joystick);
     b20:	69 81       	ldd	r22, Y+1	; 0x01
     b22:	7a 81       	ldd	r23, Y+2	; 0x02
     b24:	8e 2d       	mov	r24, r14
     b26:	0e 94 9f 04 	call	0x93e	; 0x93e <joystick_direction>
     b2a:	e8 2e       	mov	r14, r24
		if(current != NEUTRAL && current != WAITING){
     b2c:	8c ef       	ldi	r24, 0xFC	; 252
     b2e:	8e 0d       	add	r24, r14
     b30:	82 30       	cpi	r24, 0x02	; 2
     b32:	20 f0       	brcs	.+8      	; 0xb3c <main+0x1c2>
			change_selected(currentMenu, current);
     b34:	6e 2d       	mov	r22, r14
     b36:	c6 01       	movw	r24, r12
     b38:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <change_selected>
		}
		if(button_check(joy_button)){
     b3c:	8f 2d       	mov	r24, r15
     b3e:	0e 94 88 04 	call	0x910	; 0x910 <button_check>
     b42:	88 23       	and	r24, r24
     b44:	81 f2       	breq	.-96     	; 0xae6 <main+0x16c>
			button_pressed(currentMenu);
     b46:	c6 01       	movw	r24, r12
     b48:	0e 94 13 04 	call	0x826	; 0x826 <button_pressed>
     b4c:	cc cf       	rjmp	.-104    	; 0xae6 <main+0x16c>

00000b4e <oled_init>:
	atmelMap->OLED_CMD[1] = 0xB1;
	atmelMap->OLED_CMD[1] = 0x00;
	atmelMap->OLED_CMD[1] = 0x10;
}
void oled_write(amap* atmelMap){
	atmelMap->OLED_DATA[1] = 0x0F;
     b4e:	e0 e0       	ldi	r30, 0x00	; 0
     b50:	f0 e1       	ldi	r31, 0x10	; 16
     b52:	8e ea       	ldi	r24, 0xAE	; 174
     b54:	80 83       	st	Z, r24
     b56:	81 ea       	ldi	r24, 0xA1	; 161
     b58:	80 83       	st	Z, r24
     b5a:	8a ed       	ldi	r24, 0xDA	; 218
     b5c:	80 83       	st	Z, r24
     b5e:	82 e1       	ldi	r24, 0x12	; 18
     b60:	80 83       	st	Z, r24
     b62:	88 ec       	ldi	r24, 0xC8	; 200
     b64:	80 83       	st	Z, r24
     b66:	88 ea       	ldi	r24, 0xA8	; 168
     b68:	80 83       	st	Z, r24
     b6a:	8f e3       	ldi	r24, 0x3F	; 63
     b6c:	80 83       	st	Z, r24
     b6e:	85 ed       	ldi	r24, 0xD5	; 213
     b70:	80 83       	st	Z, r24
     b72:	80 e8       	ldi	r24, 0x80	; 128
     b74:	80 83       	st	Z, r24
     b76:	81 e8       	ldi	r24, 0x81	; 129
     b78:	80 83       	st	Z, r24
     b7a:	80 e5       	ldi	r24, 0x50	; 80
     b7c:	80 83       	st	Z, r24
     b7e:	89 ed       	ldi	r24, 0xD9	; 217
     b80:	80 83       	st	Z, r24
     b82:	81 e2       	ldi	r24, 0x21	; 33
     b84:	80 83       	st	Z, r24
     b86:	80 e2       	ldi	r24, 0x20	; 32
     b88:	80 83       	st	Z, r24
     b8a:	82 e0       	ldi	r24, 0x02	; 2
     b8c:	80 83       	st	Z, r24
     b8e:	8b ed       	ldi	r24, 0xDB	; 219
     b90:	80 83       	st	Z, r24
     b92:	80 e3       	ldi	r24, 0x30	; 48
     b94:	80 83       	st	Z, r24
     b96:	8d ea       	ldi	r24, 0xAD	; 173
     b98:	80 83       	st	Z, r24
     b9a:	10 82       	st	Z, r1
     b9c:	84 ea       	ldi	r24, 0xA4	; 164
     b9e:	80 83       	st	Z, r24
     ba0:	86 ea       	ldi	r24, 0xA6	; 166
     ba2:	80 83       	st	Z, r24
     ba4:	8f ea       	ldi	r24, 0xAF	; 175
     ba6:	80 83       	st	Z, r24
     ba8:	08 95       	ret

00000baa <go_to_line>:
     baa:	87 70       	andi	r24, 0x07	; 7
     bac:	80 55       	subi	r24, 0x50	; 80
     bae:	80 93 00 10 	sts	0x1000, r24	; 0x801000 <__bss_end+0xdea>
     bb2:	08 95       	ret

00000bb4 <go_to_column>:
     bb4:	98 2f       	mov	r25, r24
     bb6:	9f 70       	andi	r25, 0x0F	; 15
     bb8:	e0 e0       	ldi	r30, 0x00	; 0
     bba:	f0 e1       	ldi	r31, 0x10	; 16
     bbc:	90 83       	st	Z, r25
     bbe:	82 95       	swap	r24
     bc0:	8f 70       	andi	r24, 0x0F	; 15
     bc2:	80 5f       	subi	r24, 0xF0	; 240
     bc4:	80 83       	st	Z, r24
     bc6:	08 95       	ret

00000bc8 <clear_oled>:
}

void clear_oled(amap* atmelMap){
     bc8:	1f 93       	push	r17
     bca:	cf 93       	push	r28
     bcc:	df 93       	push	r29
     bce:	10 e0       	ldi	r17, 0x00	; 0
	ext_ram[0] = c;
}
void oled_write_data(char c)
{
	volatile char *ext_ram = (char *) 0x1200;
	ext_ram[0] = c;
     bd0:	c0 e0       	ldi	r28, 0x00	; 0
     bd2:	d2 e1       	ldi	r29, 0x12	; 18
	atmelMap->OLED_DATA[1] = 0x0F;
}

void clear_oled(amap* atmelMap){
	for(int i = 0; i < 8 ; i++){
		go_to_line(i);
     bd4:	81 2f       	mov	r24, r17
     bd6:	0e 94 d5 05 	call	0xbaa	; 0xbaa <go_to_line>
		
		go_to_column(0);
     bda:	80 e0       	ldi	r24, 0x00	; 0
     bdc:	0e 94 da 05 	call	0xbb4	; 0xbb4 <go_to_column>
     be0:	80 e8       	ldi	r24, 0x80	; 128
     be2:	90 e0       	ldi	r25, 0x00	; 0
	ext_ram[0] = c;
}
void oled_write_data(char c)
{
	volatile char *ext_ram = (char *) 0x1200;
	ext_ram[0] = c;
     be4:	18 82       	st	Y, r1
     be6:	01 97       	sbiw	r24, 0x01	; 1
void clear_oled(amap* atmelMap){
	for(int i = 0; i < 8 ; i++){
		go_to_line(i);
		
		go_to_column(0);
		for(int j = 0; j < 128; j++){
     be8:	e9 f7       	brne	.-6      	; 0xbe4 <clear_oled+0x1c>
     bea:	1f 5f       	subi	r17, 0xFF	; 255
void oled_write(amap* atmelMap){
	atmelMap->OLED_DATA[1] = 0x0F;
}

void clear_oled(amap* atmelMap){
	for(int i = 0; i < 8 ; i++){
     bec:	18 30       	cpi	r17, 0x08	; 8
     bee:	91 f7       	brne	.-28     	; 0xbd4 <clear_oled+0xc>
		for(int j = 0; j < 128; j++){
			
			oled_write_data(0x00);
		}
	}
}
     bf0:	df 91       	pop	r29
     bf2:	cf 91       	pop	r28
     bf4:	1f 91       	pop	r17
     bf6:	08 95       	ret

00000bf8 <clear_oled_new>:

void clear_oled_new(){
     bf8:	1f 93       	push	r17
     bfa:	cf 93       	push	r28
     bfc:	df 93       	push	r29
     bfe:	10 e0       	ldi	r17, 0x00	; 0
	ext_ram[0] = c;
}
void oled_write_data(char c)
{
	volatile char *ext_ram = (char *) 0x1200;
	ext_ram[0] = c;
     c00:	c0 e0       	ldi	r28, 0x00	; 0
     c02:	d2 e1       	ldi	r29, 0x12	; 18
	}
}

void clear_oled_new(){
	for(int i = 0; i < 8 ; i++){
		go_to_line(i);
     c04:	81 2f       	mov	r24, r17
     c06:	0e 94 d5 05 	call	0xbaa	; 0xbaa <go_to_line>
		
		go_to_column(0);
     c0a:	80 e0       	ldi	r24, 0x00	; 0
     c0c:	0e 94 da 05 	call	0xbb4	; 0xbb4 <go_to_column>
     c10:	80 e8       	ldi	r24, 0x80	; 128
     c12:	90 e0       	ldi	r25, 0x00	; 0
	ext_ram[0] = c;
}
void oled_write_data(char c)
{
	volatile char *ext_ram = (char *) 0x1200;
	ext_ram[0] = c;
     c14:	18 82       	st	Y, r1
     c16:	01 97       	sbiw	r24, 0x01	; 1
void clear_oled_new(){
	for(int i = 0; i < 8 ; i++){
		go_to_line(i);
		
		go_to_column(0);
		for(int j = 0; j < 128; j++){
     c18:	e9 f7       	brne	.-6      	; 0xc14 <clear_oled_new+0x1c>
     c1a:	1f 5f       	subi	r17, 0xFF	; 255
		}
	}
}

void clear_oled_new(){
	for(int i = 0; i < 8 ; i++){
     c1c:	18 30       	cpi	r17, 0x08	; 8
     c1e:	91 f7       	brne	.-28     	; 0xc04 <clear_oled_new+0xc>
		for(int j = 0; j < 128; j++){
			
			oled_write_data(0x00);
		}
	}
}
     c20:	df 91       	pop	r29
     c22:	cf 91       	pop	r28
     c24:	1f 91       	pop	r17
     c26:	08 95       	ret

00000c28 <oled_write_char_using_font>:
	}
	
}

void oled_write_char_using_font(char c, uint8_t n){
	uint8_t character = c-32;
     c28:	80 52       	subi	r24, 0x20	; 32
	
	if(n==8){
     c2a:	68 30       	cpi	r22, 0x08	; 8
     c2c:	f1 f4       	brne	.+60     	; 0xc6a <oled_write_char_using_font+0x42>
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	9c 01       	movw	r18, r24
     c32:	22 0f       	add	r18, r18
     c34:	33 1f       	adc	r19, r19
     c36:	22 0f       	add	r18, r18
     c38:	33 1f       	adc	r19, r19
     c3a:	22 0f       	add	r18, r18
     c3c:	33 1f       	adc	r19, r19
     c3e:	29 53       	subi	r18, 0x39	; 57
     c40:	3c 4f       	sbci	r19, 0xFC	; 252
     c42:	88 0f       	add	r24, r24
     c44:	99 1f       	adc	r25, r25
     c46:	88 0f       	add	r24, r24
     c48:	99 1f       	adc	r25, r25
     c4a:	88 0f       	add	r24, r24
     c4c:	99 1f       	adc	r25, r25
     c4e:	81 53       	subi	r24, 0x31	; 49
     c50:	9c 4f       	sbci	r25, 0xFC	; 252
	ext_ram[0] = c;
}
void oled_write_data(char c)
{
	volatile char *ext_ram = (char *) 0x1200;
	ext_ram[0] = c;
     c52:	a0 e0       	ldi	r26, 0x00	; 0
     c54:	b2 e1       	ldi	r27, 0x12	; 18
void oled_write_char_using_font(char c, uint8_t n){
	uint8_t character = c-32;
	
	if(n==8){
		for (int i=0; i < n; i++) {
			oled_write_data(pgm_read_word(&font8[character][i]));
     c56:	f9 01       	movw	r30, r18
     c58:	45 91       	lpm	r20, Z+
     c5a:	54 91       	lpm	r21, Z
	ext_ram[0] = c;
}
void oled_write_data(char c)
{
	volatile char *ext_ram = (char *) 0x1200;
	ext_ram[0] = c;
     c5c:	4c 93       	st	X, r20
     c5e:	2f 5f       	subi	r18, 0xFF	; 255
     c60:	3f 4f       	sbci	r19, 0xFF	; 255

void oled_write_char_using_font(char c, uint8_t n){
	uint8_t character = c-32;
	
	if(n==8){
		for (int i=0; i < n; i++) {
     c62:	82 17       	cp	r24, r18
     c64:	93 07       	cpc	r25, r19
     c66:	b9 f7       	brne	.-18     	; 0xc56 <oled_write_char_using_font+0x2e>
     c68:	08 95       	ret
			oled_write_data(pgm_read_word(&font8[character][i]));
		}
	}else if(n == 5){
     c6a:	65 30       	cpi	r22, 0x05	; 5
     c6c:	d1 f4       	brne	.+52     	; 0xca2 <oled_write_char_using_font+0x7a>
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	9c 01       	movw	r18, r24
     c72:	22 0f       	add	r18, r18
     c74:	33 1f       	adc	r19, r19
     c76:	22 0f       	add	r18, r18
     c78:	33 1f       	adc	r19, r19
     c7a:	82 0f       	add	r24, r18
     c7c:	93 1f       	adc	r25, r19
     c7e:	20 e0       	ldi	r18, 0x00	; 0
     c80:	30 e0       	ldi	r19, 0x00	; 0
	ext_ram[0] = c;
}
void oled_write_data(char c)
{
	volatile char *ext_ram = (char *) 0x1200;
	ext_ram[0] = c;
     c82:	a0 e0       	ldi	r26, 0x00	; 0
     c84:	b2 e1       	ldi	r27, 0x12	; 18
		for (int i=0; i < n; i++) {
			oled_write_data(pgm_read_word(&font8[character][i]));
		}
	}else if(n == 5){
		for (int i=0; i < n; i++) {
			oled_write_data(pgm_read_word(&font5[character][i]));
     c86:	f9 01       	movw	r30, r18
     c88:	e8 0f       	add	r30, r24
     c8a:	f9 1f       	adc	r31, r25
     c8c:	e4 51       	subi	r30, 0x14	; 20
     c8e:	fe 4f       	sbci	r31, 0xFE	; 254
     c90:	45 91       	lpm	r20, Z+
     c92:	54 91       	lpm	r21, Z
	ext_ram[0] = c;
}
void oled_write_data(char c)
{
	volatile char *ext_ram = (char *) 0x1200;
	ext_ram[0] = c;
     c94:	4c 93       	st	X, r20
	if(n==8){
		for (int i=0; i < n; i++) {
			oled_write_data(pgm_read_word(&font8[character][i]));
		}
	}else if(n == 5){
		for (int i=0; i < n; i++) {
     c96:	2f 5f       	subi	r18, 0xFF	; 255
     c98:	3f 4f       	sbci	r19, 0xFF	; 255
     c9a:	25 30       	cpi	r18, 0x05	; 5
     c9c:	31 05       	cpc	r19, r1
     c9e:	99 f7       	brne	.-26     	; 0xc86 <oled_write_char_using_font+0x5e>
     ca0:	08 95       	ret
			oled_write_data(pgm_read_word(&font5[character][i]));
		}
	}else if(n == 4){
     ca2:	64 30       	cpi	r22, 0x04	; 4
     ca4:	b1 f4       	brne	.+44     	; 0xcd2 <oled_write_char_using_font+0xaa>
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	88 0f       	add	r24, r24
     caa:	99 1f       	adc	r25, r25
     cac:	88 0f       	add	r24, r24
     cae:	99 1f       	adc	r25, r25
     cb0:	20 e0       	ldi	r18, 0x00	; 0
     cb2:	30 e0       	ldi	r19, 0x00	; 0
	ext_ram[0] = c;
}
void oled_write_data(char c)
{
	volatile char *ext_ram = (char *) 0x1200;
	ext_ram[0] = c;
     cb4:	a0 e0       	ldi	r26, 0x00	; 0
     cb6:	b2 e1       	ldi	r27, 0x12	; 18
		for (int i=0; i < n; i++) {
			oled_write_data(pgm_read_word(&font5[character][i]));
		}
	}else if(n == 4){
		for (int i=0; i < n; i++) {
			oled_write_data(pgm_read_word(&font4[character][i]));
     cb8:	f9 01       	movw	r30, r18
     cba:	e8 0f       	add	r30, r24
     cbc:	f9 1f       	adc	r31, r25
     cbe:	e0 59       	subi	r30, 0x90	; 144
     cc0:	ff 4f       	sbci	r31, 0xFF	; 255
     cc2:	45 91       	lpm	r20, Z+
     cc4:	54 91       	lpm	r21, Z
	ext_ram[0] = c;
}
void oled_write_data(char c)
{
	volatile char *ext_ram = (char *) 0x1200;
	ext_ram[0] = c;
     cc6:	4c 93       	st	X, r20
	}else if(n == 5){
		for (int i=0; i < n; i++) {
			oled_write_data(pgm_read_word(&font5[character][i]));
		}
	}else if(n == 4){
		for (int i=0; i < n; i++) {
     cc8:	2f 5f       	subi	r18, 0xFF	; 255
     cca:	3f 4f       	sbci	r19, 0xFF	; 255
     ccc:	24 30       	cpi	r18, 0x04	; 4
     cce:	31 05       	cpc	r19, r1
     cd0:	99 f7       	brne	.-26     	; 0xcb8 <oled_write_char_using_font+0x90>
     cd2:	08 95       	ret

00000cd4 <oled_write_string>:
			oled_write_data(0x00);
		}
	}
}

void oled_write_string(uint8_t startline, char* c, uint8_t n){
     cd4:	8f 92       	push	r8
     cd6:	9f 92       	push	r9
     cd8:	af 92       	push	r10
     cda:	bf 92       	push	r11
     cdc:	cf 92       	push	r12
     cde:	df 92       	push	r13
     ce0:	ef 92       	push	r14
     ce2:	ff 92       	push	r15
     ce4:	0f 93       	push	r16
     ce6:	1f 93       	push	r17
     ce8:	cf 93       	push	r28
     cea:	df 93       	push	r29
     cec:	88 2e       	mov	r8, r24
     cee:	8b 01       	movw	r16, r22
     cf0:	94 2e       	mov	r9, r20
	go_to_line(startline);
     cf2:	0e 94 d5 05 	call	0xbaa	; 0xbaa <go_to_line>
     cf6:	78 01       	movw	r14, r16
	
	for (int i=0; i < strlen(c); i++) {
     cf8:	c0 e0       	ldi	r28, 0x00	; 0
     cfa:	d0 e0       	ldi	r29, 0x00	; 0
		if(i%((int)128/n) == 0){
     cfc:	a9 2c       	mov	r10, r9
     cfe:	b1 2c       	mov	r11, r1
     d00:	68 94       	set
     d02:	cc 24       	eor	r12, r12
     d04:	c7 f8       	bld	r12, 7
     d06:	d1 2c       	mov	r13, r1
}

void oled_write_string(uint8_t startline, char* c, uint8_t n){
	go_to_line(startline);
	
	for (int i=0; i < strlen(c); i++) {
     d08:	19 c0       	rjmp	.+50     	; 0xd3c <oled_write_string+0x68>
		if(i%((int)128/n) == 0){
     d0a:	c6 01       	movw	r24, r12
     d0c:	b5 01       	movw	r22, r10
     d0e:	0e 94 bd 07 	call	0xf7a	; 0xf7a <__divmodhi4>
     d12:	9b 01       	movw	r18, r22
     d14:	ce 01       	movw	r24, r28
     d16:	0e 94 bd 07 	call	0xf7a	; 0xf7a <__divmodhi4>
     d1a:	89 2b       	or	r24, r25
     d1c:	41 f4       	brne	.+16     	; 0xd2e <oled_write_string+0x5a>
			go_to_line(startline+i/((int)128/n));
     d1e:	ce 01       	movw	r24, r28
     d20:	b9 01       	movw	r22, r18
     d22:	0e 94 bd 07 	call	0xf7a	; 0xf7a <__divmodhi4>
     d26:	88 2d       	mov	r24, r8
     d28:	86 0f       	add	r24, r22
     d2a:	0e 94 d5 05 	call	0xbaa	; 0xbaa <go_to_line>
		}
		oled_write_char_using_font(c[i],n);
     d2e:	69 2d       	mov	r22, r9
     d30:	f7 01       	movw	r30, r14
     d32:	81 91       	ld	r24, Z+
     d34:	7f 01       	movw	r14, r30
     d36:	0e 94 14 06 	call	0xc28	; 0xc28 <oled_write_char_using_font>
}

void oled_write_string(uint8_t startline, char* c, uint8_t n){
	go_to_line(startline);
	
	for (int i=0; i < strlen(c); i++) {
     d3a:	21 96       	adiw	r28, 0x01	; 1
     d3c:	f8 01       	movw	r30, r16
     d3e:	01 90       	ld	r0, Z+
     d40:	00 20       	and	r0, r0
     d42:	e9 f7       	brne	.-6      	; 0xd3e <oled_write_string+0x6a>
     d44:	31 97       	sbiw	r30, 0x01	; 1
     d46:	e0 1b       	sub	r30, r16
     d48:	f1 0b       	sbc	r31, r17
     d4a:	ce 17       	cp	r28, r30
     d4c:	df 07       	cpc	r29, r31
     d4e:	e8 f2       	brcs	.-70     	; 0xd0a <oled_write_string+0x36>
		}
		oled_write_char_using_font(c[i],n);
		
	}
	
}
     d50:	df 91       	pop	r29
     d52:	cf 91       	pop	r28
     d54:	1f 91       	pop	r17
     d56:	0f 91       	pop	r16
     d58:	ff 90       	pop	r15
     d5a:	ef 90       	pop	r14
     d5c:	df 90       	pop	r13
     d5e:	cf 90       	pop	r12
     d60:	bf 90       	pop	r11
     d62:	af 90       	pop	r10
     d64:	9f 90       	pop	r9
     d66:	8f 90       	pop	r8
     d68:	08 95       	ret

00000d6a <oled_write_inverted_char_using_font>:
	}
	
}

void oled_write_inverted_char_using_font(char c, uint8_t n){
	uint8_t character = c-32;
     d6a:	80 52       	subi	r24, 0x20	; 32
	
	if(n==8){
     d6c:	68 30       	cpi	r22, 0x08	; 8
     d6e:	f9 f4       	brne	.+62     	; 0xdae <oled_write_inverted_char_using_font+0x44>
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	9c 01       	movw	r18, r24
     d74:	22 0f       	add	r18, r18
     d76:	33 1f       	adc	r19, r19
     d78:	22 0f       	add	r18, r18
     d7a:	33 1f       	adc	r19, r19
     d7c:	22 0f       	add	r18, r18
     d7e:	33 1f       	adc	r19, r19
     d80:	29 53       	subi	r18, 0x39	; 57
     d82:	3c 4f       	sbci	r19, 0xFC	; 252
     d84:	88 0f       	add	r24, r24
     d86:	99 1f       	adc	r25, r25
     d88:	88 0f       	add	r24, r24
     d8a:	99 1f       	adc	r25, r25
     d8c:	88 0f       	add	r24, r24
     d8e:	99 1f       	adc	r25, r25
     d90:	81 53       	subi	r24, 0x31	; 49
     d92:	9c 4f       	sbci	r25, 0xFC	; 252
	ext_ram[0] = c;
}
void oled_write_data(char c)
{
	volatile char *ext_ram = (char *) 0x1200;
	ext_ram[0] = c;
     d94:	a0 e0       	ldi	r26, 0x00	; 0
     d96:	b2 e1       	ldi	r27, 0x12	; 18
void oled_write_inverted_char_using_font(char c, uint8_t n){
	uint8_t character = c-32;
	
	if(n==8){
		for (int i=0; i < n; i++) {
			oled_write_data(~pgm_read_word(&font8[character][i]));
     d98:	f9 01       	movw	r30, r18
     d9a:	45 91       	lpm	r20, Z+
     d9c:	54 91       	lpm	r21, Z
     d9e:	40 95       	com	r20
	ext_ram[0] = c;
}
void oled_write_data(char c)
{
	volatile char *ext_ram = (char *) 0x1200;
	ext_ram[0] = c;
     da0:	4c 93       	st	X, r20
     da2:	2f 5f       	subi	r18, 0xFF	; 255
     da4:	3f 4f       	sbci	r19, 0xFF	; 255

void oled_write_inverted_char_using_font(char c, uint8_t n){
	uint8_t character = c-32;
	
	if(n==8){
		for (int i=0; i < n; i++) {
     da6:	82 17       	cp	r24, r18
     da8:	93 07       	cpc	r25, r19
     daa:	b1 f7       	brne	.-20     	; 0xd98 <oled_write_inverted_char_using_font+0x2e>
     dac:	08 95       	ret
			oled_write_data(~pgm_read_word(&font8[character][i]));
		}
		}else if(n == 5){
     dae:	65 30       	cpi	r22, 0x05	; 5
     db0:	d9 f4       	brne	.+54     	; 0xde8 <oled_write_inverted_char_using_font+0x7e>
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	9c 01       	movw	r18, r24
     db6:	22 0f       	add	r18, r18
     db8:	33 1f       	adc	r19, r19
     dba:	22 0f       	add	r18, r18
     dbc:	33 1f       	adc	r19, r19
     dbe:	82 0f       	add	r24, r18
     dc0:	93 1f       	adc	r25, r19
     dc2:	20 e0       	ldi	r18, 0x00	; 0
     dc4:	30 e0       	ldi	r19, 0x00	; 0
	ext_ram[0] = c;
}
void oled_write_data(char c)
{
	volatile char *ext_ram = (char *) 0x1200;
	ext_ram[0] = c;
     dc6:	a0 e0       	ldi	r26, 0x00	; 0
     dc8:	b2 e1       	ldi	r27, 0x12	; 18
		for (int i=0; i < n; i++) {
			oled_write_data(~pgm_read_word(&font8[character][i]));
		}
		}else if(n == 5){
		for (int i=0; i < n; i++) {
			oled_write_data(~pgm_read_word(&font5[character][i]));
     dca:	f9 01       	movw	r30, r18
     dcc:	e8 0f       	add	r30, r24
     dce:	f9 1f       	adc	r31, r25
     dd0:	e4 51       	subi	r30, 0x14	; 20
     dd2:	fe 4f       	sbci	r31, 0xFE	; 254
     dd4:	45 91       	lpm	r20, Z+
     dd6:	54 91       	lpm	r21, Z
     dd8:	40 95       	com	r20
	ext_ram[0] = c;
}
void oled_write_data(char c)
{
	volatile char *ext_ram = (char *) 0x1200;
	ext_ram[0] = c;
     dda:	4c 93       	st	X, r20
	if(n==8){
		for (int i=0; i < n; i++) {
			oled_write_data(~pgm_read_word(&font8[character][i]));
		}
		}else if(n == 5){
		for (int i=0; i < n; i++) {
     ddc:	2f 5f       	subi	r18, 0xFF	; 255
     dde:	3f 4f       	sbci	r19, 0xFF	; 255
     de0:	25 30       	cpi	r18, 0x05	; 5
     de2:	31 05       	cpc	r19, r1
     de4:	91 f7       	brne	.-28     	; 0xdca <oled_write_inverted_char_using_font+0x60>
     de6:	08 95       	ret
			oled_write_data(~pgm_read_word(&font5[character][i]));
		}
		}else if(n == 4){
     de8:	64 30       	cpi	r22, 0x04	; 4
     dea:	b9 f4       	brne	.+46     	; 0xe1a <oled_write_inverted_char_using_font+0xb0>
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	88 0f       	add	r24, r24
     df0:	99 1f       	adc	r25, r25
     df2:	88 0f       	add	r24, r24
     df4:	99 1f       	adc	r25, r25
     df6:	20 e0       	ldi	r18, 0x00	; 0
     df8:	30 e0       	ldi	r19, 0x00	; 0
	ext_ram[0] = c;
}
void oled_write_data(char c)
{
	volatile char *ext_ram = (char *) 0x1200;
	ext_ram[0] = c;
     dfa:	a0 e0       	ldi	r26, 0x00	; 0
     dfc:	b2 e1       	ldi	r27, 0x12	; 18
		for (int i=0; i < n; i++) {
			oled_write_data(~pgm_read_word(&font5[character][i]));
		}
		}else if(n == 4){
		for (int i=0; i < n; i++) {
			oled_write_data(~pgm_read_word(&font4[character][i]));
     dfe:	f9 01       	movw	r30, r18
     e00:	e8 0f       	add	r30, r24
     e02:	f9 1f       	adc	r31, r25
     e04:	e0 59       	subi	r30, 0x90	; 144
     e06:	ff 4f       	sbci	r31, 0xFF	; 255
     e08:	45 91       	lpm	r20, Z+
     e0a:	54 91       	lpm	r21, Z
     e0c:	40 95       	com	r20
	ext_ram[0] = c;
}
void oled_write_data(char c)
{
	volatile char *ext_ram = (char *) 0x1200;
	ext_ram[0] = c;
     e0e:	4c 93       	st	X, r20
		}else if(n == 5){
		for (int i=0; i < n; i++) {
			oled_write_data(~pgm_read_word(&font5[character][i]));
		}
		}else if(n == 4){
		for (int i=0; i < n; i++) {
     e10:	2f 5f       	subi	r18, 0xFF	; 255
     e12:	3f 4f       	sbci	r19, 0xFF	; 255
     e14:	24 30       	cpi	r18, 0x04	; 4
     e16:	31 05       	cpc	r19, r1
     e18:	91 f7       	brne	.-28     	; 0xdfe <oled_write_inverted_char_using_font+0x94>
     e1a:	08 95       	ret

00000e1c <oled_write_string_inverted>:
		
	}
	
}

void oled_write_string_inverted(uint8_t startline, char* c, uint8_t n){
     e1c:	8f 92       	push	r8
     e1e:	9f 92       	push	r9
     e20:	af 92       	push	r10
     e22:	bf 92       	push	r11
     e24:	cf 92       	push	r12
     e26:	df 92       	push	r13
     e28:	ef 92       	push	r14
     e2a:	ff 92       	push	r15
     e2c:	0f 93       	push	r16
     e2e:	1f 93       	push	r17
     e30:	cf 93       	push	r28
     e32:	df 93       	push	r29
     e34:	88 2e       	mov	r8, r24
     e36:	8b 01       	movw	r16, r22
     e38:	94 2e       	mov	r9, r20
	go_to_line(startline);
     e3a:	0e 94 d5 05 	call	0xbaa	; 0xbaa <go_to_line>
     e3e:	78 01       	movw	r14, r16
	
	for (int i=0; i < strlen(c); i++) {
     e40:	c0 e0       	ldi	r28, 0x00	; 0
     e42:	d0 e0       	ldi	r29, 0x00	; 0
		if(i%((int)128/n) == 0){
     e44:	a9 2c       	mov	r10, r9
     e46:	b1 2c       	mov	r11, r1
     e48:	68 94       	set
     e4a:	cc 24       	eor	r12, r12
     e4c:	c7 f8       	bld	r12, 7
     e4e:	d1 2c       	mov	r13, r1
}

void oled_write_string_inverted(uint8_t startline, char* c, uint8_t n){
	go_to_line(startline);
	
	for (int i=0; i < strlen(c); i++) {
     e50:	19 c0       	rjmp	.+50     	; 0xe84 <oled_write_string_inverted+0x68>
		if(i%((int)128/n) == 0){
     e52:	c6 01       	movw	r24, r12
     e54:	b5 01       	movw	r22, r10
     e56:	0e 94 bd 07 	call	0xf7a	; 0xf7a <__divmodhi4>
     e5a:	9b 01       	movw	r18, r22
     e5c:	ce 01       	movw	r24, r28
     e5e:	0e 94 bd 07 	call	0xf7a	; 0xf7a <__divmodhi4>
     e62:	89 2b       	or	r24, r25
     e64:	41 f4       	brne	.+16     	; 0xe76 <oled_write_string_inverted+0x5a>
			go_to_line(startline+i/((int)128/n));
     e66:	ce 01       	movw	r24, r28
     e68:	b9 01       	movw	r22, r18
     e6a:	0e 94 bd 07 	call	0xf7a	; 0xf7a <__divmodhi4>
     e6e:	88 2d       	mov	r24, r8
     e70:	86 0f       	add	r24, r22
     e72:	0e 94 d5 05 	call	0xbaa	; 0xbaa <go_to_line>
		}
		oled_write_inverted_char_using_font(c[i],n);
     e76:	69 2d       	mov	r22, r9
     e78:	f7 01       	movw	r30, r14
     e7a:	81 91       	ld	r24, Z+
     e7c:	7f 01       	movw	r14, r30
     e7e:	0e 94 b5 06 	call	0xd6a	; 0xd6a <oled_write_inverted_char_using_font>
}

void oled_write_string_inverted(uint8_t startline, char* c, uint8_t n){
	go_to_line(startline);
	
	for (int i=0; i < strlen(c); i++) {
     e82:	21 96       	adiw	r28, 0x01	; 1
     e84:	f8 01       	movw	r30, r16
     e86:	01 90       	ld	r0, Z+
     e88:	00 20       	and	r0, r0
     e8a:	e9 f7       	brne	.-6      	; 0xe86 <oled_write_string_inverted+0x6a>
     e8c:	31 97       	sbiw	r30, 0x01	; 1
     e8e:	e0 1b       	sub	r30, r16
     e90:	f1 0b       	sbc	r31, r17
     e92:	ce 17       	cp	r28, r30
     e94:	df 07       	cpc	r29, r31
     e96:	e8 f2       	brcs	.-70     	; 0xe52 <oled_write_string_inverted+0x36>
		}
		oled_write_inverted_char_using_font(c[i],n);
		
	}
	
}
     e98:	df 91       	pop	r29
     e9a:	cf 91       	pop	r28
     e9c:	1f 91       	pop	r17
     e9e:	0f 91       	pop	r16
     ea0:	ff 90       	pop	r15
     ea2:	ef 90       	pop	r14
     ea4:	df 90       	pop	r13
     ea6:	cf 90       	pop	r12
     ea8:	bf 90       	pop	r11
     eaa:	af 90       	pop	r10
     eac:	9f 90       	pop	r9
     eae:	8f 90       	pop	r8
     eb0:	08 95       	ret

00000eb2 <SRAM_test>:
#include "sram_test.h"
    void SRAM_test(void)
    {
     eb2:	ef 92       	push	r14
     eb4:	ff 92       	push	r15
     eb6:	0f 93       	push	r16
     eb8:	1f 93       	push	r17
     eba:	cf 93       	push	r28
     ebc:	df 93       	push	r29
		volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
        uint16_t ext_ram_size = 0x800;
        uint16_t write_errors = 0;
        uint16_t retrieval_errors = 0;
        printf("Starting SRAM test...\n");
     ebe:	8c e9       	ldi	r24, 0x9C	; 156
     ec0:	91 e0       	ldi	r25, 0x01	; 1
     ec2:	0e 94 ca 09 	call	0x1394	; 0x1394 <puts>
        // rand() stores some internal state, so calling this function in a loop will
        // yield different seeds each time (unless srand() is called before this function)
        uint16_t seed = rand();
     ec6:	0e 94 52 09 	call	0x12a4	; 0x12a4 <rand>
     eca:	7c 01       	movw	r14, r24
        // Write phase: Immediately check that the correct value was stored
        srand(seed);
     ecc:	0e 94 57 09 	call	0x12ae	; 0x12ae <srand>
     ed0:	c0 e0       	ldi	r28, 0x00	; 0
     ed2:	d8 e1       	ldi	r29, 0x18	; 24
#include "sram_test.h"
    void SRAM_test(void)
    {
		volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
        uint16_t ext_ram_size = 0x800;
        uint16_t write_errors = 0;
     ed4:	00 e0       	ldi	r16, 0x00	; 0
     ed6:	10 e0       	ldi	r17, 0x00	; 0
        // yield different seeds each time (unless srand() is called before this function)
        uint16_t seed = rand();
        // Write phase: Immediately check that the correct value was stored
        srand(seed);
        for (uint16_t i = 0; i < ext_ram_size; i++) {
            uint8_t some_value = rand();
     ed8:	0e 94 52 09 	call	0x12a4	; 0x12a4 <rand>
            ext_ram[i] = some_value;
     edc:	88 83       	st	Y, r24
            uint8_t retreived_value = ext_ram[i];
     ede:	98 81       	ld	r25, Y
            if (retreived_value != some_value) {
     ee0:	89 17       	cp	r24, r25
     ee2:	11 f0       	breq	.+4      	; 0xee8 <SRAM_test+0x36>
                //printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
                write_errors++;
     ee4:	0f 5f       	subi	r16, 0xFF	; 255
     ee6:	1f 4f       	sbci	r17, 0xFF	; 255
     ee8:	21 96       	adiw	r28, 0x01	; 1
        // rand() stores some internal state, so calling this function in a loop will
        // yield different seeds each time (unless srand() is called before this function)
        uint16_t seed = rand();
        // Write phase: Immediately check that the correct value was stored
        srand(seed);
        for (uint16_t i = 0; i < ext_ram_size; i++) {
     eea:	c1 15       	cp	r28, r1
     eec:	80 e2       	ldi	r24, 0x20	; 32
     eee:	d8 07       	cpc	r29, r24
     ef0:	99 f7       	brne	.-26     	; 0xed8 <SRAM_test+0x26>
                //printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
                write_errors++;
            }
        }
        // Retrieval phase: Check that no values were changed during or after the write phase
        srand(seed);
     ef2:	c7 01       	movw	r24, r14
     ef4:	0e 94 57 09 	call	0x12ae	; 0x12ae <srand>
     ef8:	c0 e0       	ldi	r28, 0x00	; 0
     efa:	d8 e1       	ldi	r29, 0x18	; 24
    void SRAM_test(void)
    {
		volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
        uint16_t ext_ram_size = 0x800;
        uint16_t write_errors = 0;
        uint16_t retrieval_errors = 0;
     efc:	e1 2c       	mov	r14, r1
     efe:	f1 2c       	mov	r15, r1
        }
        // Retrieval phase: Check that no values were changed during or after the write phase
        srand(seed);
        // reset the PRNG to the state it had before the write phase
        for (uint16_t i = 0; i < ext_ram_size; i++) {
            uint8_t some_value = rand();
     f00:	0e 94 52 09 	call	0x12a4	; 0x12a4 <rand>
            uint8_t retreived_value = ext_ram[i];
     f04:	98 81       	ld	r25, Y
            if (retreived_value != some_value) {
     f06:	98 17       	cp	r25, r24
     f08:	19 f0       	breq	.+6      	; 0xf10 <SRAM_test+0x5e>
               // printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
                retrieval_errors++;
     f0a:	8f ef       	ldi	r24, 0xFF	; 255
     f0c:	e8 1a       	sub	r14, r24
     f0e:	f8 0a       	sbc	r15, r24
     f10:	21 96       	adiw	r28, 0x01	; 1
            }
        }
        // Retrieval phase: Check that no values were changed during or after the write phase
        srand(seed);
        // reset the PRNG to the state it had before the write phase
        for (uint16_t i = 0; i < ext_ram_size; i++) {
     f12:	c1 15       	cp	r28, r1
     f14:	80 e2       	ldi	r24, 0x20	; 32
     f16:	d8 07       	cpc	r29, r24
     f18:	99 f7       	brne	.-26     	; 0xf00 <SRAM_test+0x4e>
            if (retreived_value != some_value) {
               // printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
                retrieval_errors++;
            }
        }
        printf("SRAM test completed with \n%4d errors in write phase and \n%4d errors in retrieval phase\n\n", write_errors, retrieval_errors);
     f1a:	ff 92       	push	r15
     f1c:	ef 92       	push	r14
     f1e:	1f 93       	push	r17
     f20:	0f 93       	push	r16
     f22:	82 eb       	ldi	r24, 0xB2	; 178
     f24:	91 e0       	ldi	r25, 0x01	; 1
     f26:	9f 93       	push	r25
     f28:	8f 93       	push	r24
     f2a:	0e 94 ad 09 	call	0x135a	; 0x135a <printf>
     f2e:	0f 90       	pop	r0
     f30:	0f 90       	pop	r0
     f32:	0f 90       	pop	r0
     f34:	0f 90       	pop	r0
     f36:	0f 90       	pop	r0
     f38:	0f 90       	pop	r0
     f3a:	df 91       	pop	r29
     f3c:	cf 91       	pop	r28
     f3e:	1f 91       	pop	r17
     f40:	0f 91       	pop	r16
     f42:	ff 90       	pop	r15
     f44:	ef 90       	pop	r14
     f46:	08 95       	ret

00000f48 <USART_Transmit>:
	UCSR1C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
	clear_bit(UCSR0C, 0); // Clock polarity
	fdevopen(USART_Transmit, USART_Receive);
}
void USART_Transmit(unsigned char data){
	while (!(UCSR0A & (1<<UDRE0)));
     f48:	5d 9b       	sbis	0x0b, 5	; 11
     f4a:	fe cf       	rjmp	.-4      	; 0xf48 <USART_Transmit>
	
	UDR0 = data;
     f4c:	8c b9       	out	0x0c, r24	; 12
     f4e:	08 95       	ret

00000f50 <USART_Receive>:
}

unsigned int USART_Receive(void)
{
	
	while (!(UCSR0A & (1<<RXC0)));
     f50:	5f 9b       	sbis	0x0b, 7	; 11
     f52:	fe cf       	rjmp	.-4      	; 0xf50 <USART_Receive>
	

	return UDR0;
     f54:	8c b1       	in	r24, 0x0c	; 12
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	08 95       	ret

00000f5a <USART_Init>:
#include <stdio.h>
#define clear_bit( reg, bit ) (reg &= ~(1 << bit))

void USART_Init (unsigned int ubrr ){
	
	UBRR0H = (unsigned char)(ubrr>>8);
     f5a:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)ubrr;
     f5c:	89 b9       	out	0x09, r24	; 9
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     f5e:	88 e1       	ldi	r24, 0x18	; 24
     f60:	8a b9       	out	0x0a, r24	; 10
	
	UCSR1C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
     f62:	8e e8       	ldi	r24, 0x8E	; 142
     f64:	8c bf       	out	0x3c, r24	; 60
	clear_bit(UCSR0C, 0); // Clock polarity
     f66:	80 b5       	in	r24, 0x20	; 32
     f68:	8e 7f       	andi	r24, 0xFE	; 254
     f6a:	80 bd       	out	0x20, r24	; 32
	fdevopen(USART_Transmit, USART_Receive);
     f6c:	68 ea       	ldi	r22, 0xA8	; 168
     f6e:	77 e0       	ldi	r23, 0x07	; 7
     f70:	84 ea       	ldi	r24, 0xA4	; 164
     f72:	97 e0       	ldi	r25, 0x07	; 7
     f74:	0e 94 62 09 	call	0x12c4	; 0x12c4 <fdevopen>
     f78:	08 95       	ret

00000f7a <__divmodhi4>:
     f7a:	97 fb       	bst	r25, 7
     f7c:	07 2e       	mov	r0, r23
     f7e:	16 f4       	brtc	.+4      	; 0xf84 <__divmodhi4+0xa>
     f80:	00 94       	com	r0
     f82:	07 d0       	rcall	.+14     	; 0xf92 <__divmodhi4_neg1>
     f84:	77 fd       	sbrc	r23, 7
     f86:	09 d0       	rcall	.+18     	; 0xf9a <__divmodhi4_neg2>
     f88:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <__udivmodhi4>
     f8c:	07 fc       	sbrc	r0, 7
     f8e:	05 d0       	rcall	.+10     	; 0xf9a <__divmodhi4_neg2>
     f90:	3e f4       	brtc	.+14     	; 0xfa0 <__divmodhi4_exit>

00000f92 <__divmodhi4_neg1>:
     f92:	90 95       	com	r25
     f94:	81 95       	neg	r24
     f96:	9f 4f       	sbci	r25, 0xFF	; 255
     f98:	08 95       	ret

00000f9a <__divmodhi4_neg2>:
     f9a:	70 95       	com	r23
     f9c:	61 95       	neg	r22
     f9e:	7f 4f       	sbci	r23, 0xFF	; 255

00000fa0 <__divmodhi4_exit>:
     fa0:	08 95       	ret

00000fa2 <__udivmodhi4>:
     fa2:	aa 1b       	sub	r26, r26
     fa4:	bb 1b       	sub	r27, r27
     fa6:	51 e1       	ldi	r21, 0x11	; 17
     fa8:	07 c0       	rjmp	.+14     	; 0xfb8 <__udivmodhi4_ep>

00000faa <__udivmodhi4_loop>:
     faa:	aa 1f       	adc	r26, r26
     fac:	bb 1f       	adc	r27, r27
     fae:	a6 17       	cp	r26, r22
     fb0:	b7 07       	cpc	r27, r23
     fb2:	10 f0       	brcs	.+4      	; 0xfb8 <__udivmodhi4_ep>
     fb4:	a6 1b       	sub	r26, r22
     fb6:	b7 0b       	sbc	r27, r23

00000fb8 <__udivmodhi4_ep>:
     fb8:	88 1f       	adc	r24, r24
     fba:	99 1f       	adc	r25, r25
     fbc:	5a 95       	dec	r21
     fbe:	a9 f7       	brne	.-22     	; 0xfaa <__udivmodhi4_loop>
     fc0:	80 95       	com	r24
     fc2:	90 95       	com	r25
     fc4:	bc 01       	movw	r22, r24
     fc6:	cd 01       	movw	r24, r26
     fc8:	08 95       	ret

00000fca <malloc>:
     fca:	0f 93       	push	r16
     fcc:	1f 93       	push	r17
     fce:	cf 93       	push	r28
     fd0:	df 93       	push	r29
     fd2:	82 30       	cpi	r24, 0x02	; 2
     fd4:	91 05       	cpc	r25, r1
     fd6:	10 f4       	brcc	.+4      	; 0xfdc <malloc+0x12>
     fd8:	82 e0       	ldi	r24, 0x02	; 2
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <__flp>
     fe0:	f0 91 0f 02 	lds	r31, 0x020F	; 0x80020f <__flp+0x1>
     fe4:	20 e0       	ldi	r18, 0x00	; 0
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	a0 e0       	ldi	r26, 0x00	; 0
     fea:	b0 e0       	ldi	r27, 0x00	; 0
     fec:	30 97       	sbiw	r30, 0x00	; 0
     fee:	19 f1       	breq	.+70     	; 0x1036 <malloc+0x6c>
     ff0:	40 81       	ld	r20, Z
     ff2:	51 81       	ldd	r21, Z+1	; 0x01
     ff4:	02 81       	ldd	r16, Z+2	; 0x02
     ff6:	13 81       	ldd	r17, Z+3	; 0x03
     ff8:	48 17       	cp	r20, r24
     ffa:	59 07       	cpc	r21, r25
     ffc:	c8 f0       	brcs	.+50     	; 0x1030 <malloc+0x66>
     ffe:	84 17       	cp	r24, r20
    1000:	95 07       	cpc	r25, r21
    1002:	69 f4       	brne	.+26     	; 0x101e <malloc+0x54>
    1004:	10 97       	sbiw	r26, 0x00	; 0
    1006:	31 f0       	breq	.+12     	; 0x1014 <malloc+0x4a>
    1008:	12 96       	adiw	r26, 0x02	; 2
    100a:	0c 93       	st	X, r16
    100c:	12 97       	sbiw	r26, 0x02	; 2
    100e:	13 96       	adiw	r26, 0x03	; 3
    1010:	1c 93       	st	X, r17
    1012:	27 c0       	rjmp	.+78     	; 0x1062 <malloc+0x98>
    1014:	00 93 0e 02 	sts	0x020E, r16	; 0x80020e <__flp>
    1018:	10 93 0f 02 	sts	0x020F, r17	; 0x80020f <__flp+0x1>
    101c:	22 c0       	rjmp	.+68     	; 0x1062 <malloc+0x98>
    101e:	21 15       	cp	r18, r1
    1020:	31 05       	cpc	r19, r1
    1022:	19 f0       	breq	.+6      	; 0x102a <malloc+0x60>
    1024:	42 17       	cp	r20, r18
    1026:	53 07       	cpc	r21, r19
    1028:	18 f4       	brcc	.+6      	; 0x1030 <malloc+0x66>
    102a:	9a 01       	movw	r18, r20
    102c:	bd 01       	movw	r22, r26
    102e:	ef 01       	movw	r28, r30
    1030:	df 01       	movw	r26, r30
    1032:	f8 01       	movw	r30, r16
    1034:	db cf       	rjmp	.-74     	; 0xfec <malloc+0x22>
    1036:	21 15       	cp	r18, r1
    1038:	31 05       	cpc	r19, r1
    103a:	f9 f0       	breq	.+62     	; 0x107a <malloc+0xb0>
    103c:	28 1b       	sub	r18, r24
    103e:	39 0b       	sbc	r19, r25
    1040:	24 30       	cpi	r18, 0x04	; 4
    1042:	31 05       	cpc	r19, r1
    1044:	80 f4       	brcc	.+32     	; 0x1066 <malloc+0x9c>
    1046:	8a 81       	ldd	r24, Y+2	; 0x02
    1048:	9b 81       	ldd	r25, Y+3	; 0x03
    104a:	61 15       	cp	r22, r1
    104c:	71 05       	cpc	r23, r1
    104e:	21 f0       	breq	.+8      	; 0x1058 <malloc+0x8e>
    1050:	fb 01       	movw	r30, r22
    1052:	93 83       	std	Z+3, r25	; 0x03
    1054:	82 83       	std	Z+2, r24	; 0x02
    1056:	04 c0       	rjmp	.+8      	; 0x1060 <malloc+0x96>
    1058:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <__flp+0x1>
    105c:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <__flp>
    1060:	fe 01       	movw	r30, r28
    1062:	32 96       	adiw	r30, 0x02	; 2
    1064:	44 c0       	rjmp	.+136    	; 0x10ee <malloc+0x124>
    1066:	fe 01       	movw	r30, r28
    1068:	e2 0f       	add	r30, r18
    106a:	f3 1f       	adc	r31, r19
    106c:	81 93       	st	Z+, r24
    106e:	91 93       	st	Z+, r25
    1070:	22 50       	subi	r18, 0x02	; 2
    1072:	31 09       	sbc	r19, r1
    1074:	39 83       	std	Y+1, r19	; 0x01
    1076:	28 83       	st	Y, r18
    1078:	3a c0       	rjmp	.+116    	; 0x10ee <malloc+0x124>
    107a:	20 91 0c 02 	lds	r18, 0x020C	; 0x80020c <__data_end>
    107e:	30 91 0d 02 	lds	r19, 0x020D	; 0x80020d <__data_end+0x1>
    1082:	23 2b       	or	r18, r19
    1084:	41 f4       	brne	.+16     	; 0x1096 <malloc+0xcc>
    1086:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    108a:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    108e:	30 93 0d 02 	sts	0x020D, r19	; 0x80020d <__data_end+0x1>
    1092:	20 93 0c 02 	sts	0x020C, r18	; 0x80020c <__data_end>
    1096:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    109a:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    109e:	21 15       	cp	r18, r1
    10a0:	31 05       	cpc	r19, r1
    10a2:	41 f4       	brne	.+16     	; 0x10b4 <malloc+0xea>
    10a4:	2d b7       	in	r18, 0x3d	; 61
    10a6:	3e b7       	in	r19, 0x3e	; 62
    10a8:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    10ac:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    10b0:	24 1b       	sub	r18, r20
    10b2:	35 0b       	sbc	r19, r21
    10b4:	e0 91 0c 02 	lds	r30, 0x020C	; 0x80020c <__data_end>
    10b8:	f0 91 0d 02 	lds	r31, 0x020D	; 0x80020d <__data_end+0x1>
    10bc:	e2 17       	cp	r30, r18
    10be:	f3 07       	cpc	r31, r19
    10c0:	a0 f4       	brcc	.+40     	; 0x10ea <malloc+0x120>
    10c2:	2e 1b       	sub	r18, r30
    10c4:	3f 0b       	sbc	r19, r31
    10c6:	28 17       	cp	r18, r24
    10c8:	39 07       	cpc	r19, r25
    10ca:	78 f0       	brcs	.+30     	; 0x10ea <malloc+0x120>
    10cc:	ac 01       	movw	r20, r24
    10ce:	4e 5f       	subi	r20, 0xFE	; 254
    10d0:	5f 4f       	sbci	r21, 0xFF	; 255
    10d2:	24 17       	cp	r18, r20
    10d4:	35 07       	cpc	r19, r21
    10d6:	48 f0       	brcs	.+18     	; 0x10ea <malloc+0x120>
    10d8:	4e 0f       	add	r20, r30
    10da:	5f 1f       	adc	r21, r31
    10dc:	50 93 0d 02 	sts	0x020D, r21	; 0x80020d <__data_end+0x1>
    10e0:	40 93 0c 02 	sts	0x020C, r20	; 0x80020c <__data_end>
    10e4:	81 93       	st	Z+, r24
    10e6:	91 93       	st	Z+, r25
    10e8:	02 c0       	rjmp	.+4      	; 0x10ee <malloc+0x124>
    10ea:	e0 e0       	ldi	r30, 0x00	; 0
    10ec:	f0 e0       	ldi	r31, 0x00	; 0
    10ee:	cf 01       	movw	r24, r30
    10f0:	df 91       	pop	r29
    10f2:	cf 91       	pop	r28
    10f4:	1f 91       	pop	r17
    10f6:	0f 91       	pop	r16
    10f8:	08 95       	ret

000010fa <free>:
    10fa:	cf 93       	push	r28
    10fc:	df 93       	push	r29
    10fe:	00 97       	sbiw	r24, 0x00	; 0
    1100:	09 f4       	brne	.+2      	; 0x1104 <free+0xa>
    1102:	81 c0       	rjmp	.+258    	; 0x1206 <free+0x10c>
    1104:	fc 01       	movw	r30, r24
    1106:	32 97       	sbiw	r30, 0x02	; 2
    1108:	13 82       	std	Z+3, r1	; 0x03
    110a:	12 82       	std	Z+2, r1	; 0x02
    110c:	a0 91 0e 02 	lds	r26, 0x020E	; 0x80020e <__flp>
    1110:	b0 91 0f 02 	lds	r27, 0x020F	; 0x80020f <__flp+0x1>
    1114:	10 97       	sbiw	r26, 0x00	; 0
    1116:	81 f4       	brne	.+32     	; 0x1138 <free+0x3e>
    1118:	20 81       	ld	r18, Z
    111a:	31 81       	ldd	r19, Z+1	; 0x01
    111c:	82 0f       	add	r24, r18
    111e:	93 1f       	adc	r25, r19
    1120:	20 91 0c 02 	lds	r18, 0x020C	; 0x80020c <__data_end>
    1124:	30 91 0d 02 	lds	r19, 0x020D	; 0x80020d <__data_end+0x1>
    1128:	28 17       	cp	r18, r24
    112a:	39 07       	cpc	r19, r25
    112c:	51 f5       	brne	.+84     	; 0x1182 <free+0x88>
    112e:	f0 93 0d 02 	sts	0x020D, r31	; 0x80020d <__data_end+0x1>
    1132:	e0 93 0c 02 	sts	0x020C, r30	; 0x80020c <__data_end>
    1136:	67 c0       	rjmp	.+206    	; 0x1206 <free+0x10c>
    1138:	ed 01       	movw	r28, r26
    113a:	20 e0       	ldi	r18, 0x00	; 0
    113c:	30 e0       	ldi	r19, 0x00	; 0
    113e:	ce 17       	cp	r28, r30
    1140:	df 07       	cpc	r29, r31
    1142:	40 f4       	brcc	.+16     	; 0x1154 <free+0x5a>
    1144:	4a 81       	ldd	r20, Y+2	; 0x02
    1146:	5b 81       	ldd	r21, Y+3	; 0x03
    1148:	9e 01       	movw	r18, r28
    114a:	41 15       	cp	r20, r1
    114c:	51 05       	cpc	r21, r1
    114e:	f1 f0       	breq	.+60     	; 0x118c <free+0x92>
    1150:	ea 01       	movw	r28, r20
    1152:	f5 cf       	rjmp	.-22     	; 0x113e <free+0x44>
    1154:	d3 83       	std	Z+3, r29	; 0x03
    1156:	c2 83       	std	Z+2, r28	; 0x02
    1158:	40 81       	ld	r20, Z
    115a:	51 81       	ldd	r21, Z+1	; 0x01
    115c:	84 0f       	add	r24, r20
    115e:	95 1f       	adc	r25, r21
    1160:	c8 17       	cp	r28, r24
    1162:	d9 07       	cpc	r29, r25
    1164:	59 f4       	brne	.+22     	; 0x117c <free+0x82>
    1166:	88 81       	ld	r24, Y
    1168:	99 81       	ldd	r25, Y+1	; 0x01
    116a:	84 0f       	add	r24, r20
    116c:	95 1f       	adc	r25, r21
    116e:	02 96       	adiw	r24, 0x02	; 2
    1170:	91 83       	std	Z+1, r25	; 0x01
    1172:	80 83       	st	Z, r24
    1174:	8a 81       	ldd	r24, Y+2	; 0x02
    1176:	9b 81       	ldd	r25, Y+3	; 0x03
    1178:	93 83       	std	Z+3, r25	; 0x03
    117a:	82 83       	std	Z+2, r24	; 0x02
    117c:	21 15       	cp	r18, r1
    117e:	31 05       	cpc	r19, r1
    1180:	29 f4       	brne	.+10     	; 0x118c <free+0x92>
    1182:	f0 93 0f 02 	sts	0x020F, r31	; 0x80020f <__flp+0x1>
    1186:	e0 93 0e 02 	sts	0x020E, r30	; 0x80020e <__flp>
    118a:	3d c0       	rjmp	.+122    	; 0x1206 <free+0x10c>
    118c:	e9 01       	movw	r28, r18
    118e:	fb 83       	std	Y+3, r31	; 0x03
    1190:	ea 83       	std	Y+2, r30	; 0x02
    1192:	49 91       	ld	r20, Y+
    1194:	59 91       	ld	r21, Y+
    1196:	c4 0f       	add	r28, r20
    1198:	d5 1f       	adc	r29, r21
    119a:	ec 17       	cp	r30, r28
    119c:	fd 07       	cpc	r31, r29
    119e:	61 f4       	brne	.+24     	; 0x11b8 <free+0xbe>
    11a0:	80 81       	ld	r24, Z
    11a2:	91 81       	ldd	r25, Z+1	; 0x01
    11a4:	84 0f       	add	r24, r20
    11a6:	95 1f       	adc	r25, r21
    11a8:	02 96       	adiw	r24, 0x02	; 2
    11aa:	e9 01       	movw	r28, r18
    11ac:	99 83       	std	Y+1, r25	; 0x01
    11ae:	88 83       	st	Y, r24
    11b0:	82 81       	ldd	r24, Z+2	; 0x02
    11b2:	93 81       	ldd	r25, Z+3	; 0x03
    11b4:	9b 83       	std	Y+3, r25	; 0x03
    11b6:	8a 83       	std	Y+2, r24	; 0x02
    11b8:	e0 e0       	ldi	r30, 0x00	; 0
    11ba:	f0 e0       	ldi	r31, 0x00	; 0
    11bc:	12 96       	adiw	r26, 0x02	; 2
    11be:	8d 91       	ld	r24, X+
    11c0:	9c 91       	ld	r25, X
    11c2:	13 97       	sbiw	r26, 0x03	; 3
    11c4:	00 97       	sbiw	r24, 0x00	; 0
    11c6:	19 f0       	breq	.+6      	; 0x11ce <free+0xd4>
    11c8:	fd 01       	movw	r30, r26
    11ca:	dc 01       	movw	r26, r24
    11cc:	f7 cf       	rjmp	.-18     	; 0x11bc <free+0xc2>
    11ce:	8d 91       	ld	r24, X+
    11d0:	9c 91       	ld	r25, X
    11d2:	11 97       	sbiw	r26, 0x01	; 1
    11d4:	9d 01       	movw	r18, r26
    11d6:	2e 5f       	subi	r18, 0xFE	; 254
    11d8:	3f 4f       	sbci	r19, 0xFF	; 255
    11da:	82 0f       	add	r24, r18
    11dc:	93 1f       	adc	r25, r19
    11de:	20 91 0c 02 	lds	r18, 0x020C	; 0x80020c <__data_end>
    11e2:	30 91 0d 02 	lds	r19, 0x020D	; 0x80020d <__data_end+0x1>
    11e6:	28 17       	cp	r18, r24
    11e8:	39 07       	cpc	r19, r25
    11ea:	69 f4       	brne	.+26     	; 0x1206 <free+0x10c>
    11ec:	30 97       	sbiw	r30, 0x00	; 0
    11ee:	29 f4       	brne	.+10     	; 0x11fa <free+0x100>
    11f0:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <__flp+0x1>
    11f4:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <__flp>
    11f8:	02 c0       	rjmp	.+4      	; 0x11fe <free+0x104>
    11fa:	13 82       	std	Z+3, r1	; 0x03
    11fc:	12 82       	std	Z+2, r1	; 0x02
    11fe:	b0 93 0d 02 	sts	0x020D, r27	; 0x80020d <__data_end+0x1>
    1202:	a0 93 0c 02 	sts	0x020C, r26	; 0x80020c <__data_end>
    1206:	df 91       	pop	r29
    1208:	cf 91       	pop	r28
    120a:	08 95       	ret

0000120c <do_rand>:
    120c:	8f 92       	push	r8
    120e:	9f 92       	push	r9
    1210:	af 92       	push	r10
    1212:	bf 92       	push	r11
    1214:	cf 92       	push	r12
    1216:	df 92       	push	r13
    1218:	ef 92       	push	r14
    121a:	ff 92       	push	r15
    121c:	cf 93       	push	r28
    121e:	df 93       	push	r29
    1220:	ec 01       	movw	r28, r24
    1222:	68 81       	ld	r22, Y
    1224:	79 81       	ldd	r23, Y+1	; 0x01
    1226:	8a 81       	ldd	r24, Y+2	; 0x02
    1228:	9b 81       	ldd	r25, Y+3	; 0x03
    122a:	61 15       	cp	r22, r1
    122c:	71 05       	cpc	r23, r1
    122e:	81 05       	cpc	r24, r1
    1230:	91 05       	cpc	r25, r1
    1232:	21 f4       	brne	.+8      	; 0x123c <do_rand+0x30>
    1234:	64 e2       	ldi	r22, 0x24	; 36
    1236:	79 ed       	ldi	r23, 0xD9	; 217
    1238:	8b e5       	ldi	r24, 0x5B	; 91
    123a:	97 e0       	ldi	r25, 0x07	; 7
    123c:	2d e1       	ldi	r18, 0x1D	; 29
    123e:	33 ef       	ldi	r19, 0xF3	; 243
    1240:	41 e0       	ldi	r20, 0x01	; 1
    1242:	50 e0       	ldi	r21, 0x00	; 0
    1244:	0e 94 ae 0c 	call	0x195c	; 0x195c <__divmodsi4>
    1248:	49 01       	movw	r8, r18
    124a:	5a 01       	movw	r10, r20
    124c:	9b 01       	movw	r18, r22
    124e:	ac 01       	movw	r20, r24
    1250:	a7 ea       	ldi	r26, 0xA7	; 167
    1252:	b1 e4       	ldi	r27, 0x41	; 65
    1254:	0e 94 cd 0c 	call	0x199a	; 0x199a <__muluhisi3>
    1258:	6b 01       	movw	r12, r22
    125a:	7c 01       	movw	r14, r24
    125c:	ac ee       	ldi	r26, 0xEC	; 236
    125e:	b4 ef       	ldi	r27, 0xF4	; 244
    1260:	a5 01       	movw	r20, r10
    1262:	94 01       	movw	r18, r8
    1264:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <__mulohisi3>
    1268:	dc 01       	movw	r26, r24
    126a:	cb 01       	movw	r24, r22
    126c:	8c 0d       	add	r24, r12
    126e:	9d 1d       	adc	r25, r13
    1270:	ae 1d       	adc	r26, r14
    1272:	bf 1d       	adc	r27, r15
    1274:	b7 ff       	sbrs	r27, 7
    1276:	03 c0       	rjmp	.+6      	; 0x127e <do_rand+0x72>
    1278:	01 97       	sbiw	r24, 0x01	; 1
    127a:	a1 09       	sbc	r26, r1
    127c:	b0 48       	sbci	r27, 0x80	; 128
    127e:	88 83       	st	Y, r24
    1280:	99 83       	std	Y+1, r25	; 0x01
    1282:	aa 83       	std	Y+2, r26	; 0x02
    1284:	bb 83       	std	Y+3, r27	; 0x03
    1286:	9f 77       	andi	r25, 0x7F	; 127
    1288:	df 91       	pop	r29
    128a:	cf 91       	pop	r28
    128c:	ff 90       	pop	r15
    128e:	ef 90       	pop	r14
    1290:	df 90       	pop	r13
    1292:	cf 90       	pop	r12
    1294:	bf 90       	pop	r11
    1296:	af 90       	pop	r10
    1298:	9f 90       	pop	r9
    129a:	8f 90       	pop	r8
    129c:	08 95       	ret

0000129e <rand_r>:
    129e:	0e 94 06 09 	call	0x120c	; 0x120c <do_rand>
    12a2:	08 95       	ret

000012a4 <rand>:
    12a4:	86 e0       	ldi	r24, 0x06	; 6
    12a6:	91 e0       	ldi	r25, 0x01	; 1
    12a8:	0e 94 06 09 	call	0x120c	; 0x120c <do_rand>
    12ac:	08 95       	ret

000012ae <srand>:
    12ae:	a0 e0       	ldi	r26, 0x00	; 0
    12b0:	b0 e0       	ldi	r27, 0x00	; 0
    12b2:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <next>
    12b6:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <next+0x1>
    12ba:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <next+0x2>
    12be:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <next+0x3>
    12c2:	08 95       	ret

000012c4 <fdevopen>:
    12c4:	0f 93       	push	r16
    12c6:	1f 93       	push	r17
    12c8:	cf 93       	push	r28
    12ca:	df 93       	push	r29
    12cc:	00 97       	sbiw	r24, 0x00	; 0
    12ce:	31 f4       	brne	.+12     	; 0x12dc <fdevopen+0x18>
    12d0:	61 15       	cp	r22, r1
    12d2:	71 05       	cpc	r23, r1
    12d4:	19 f4       	brne	.+6      	; 0x12dc <fdevopen+0x18>
    12d6:	80 e0       	ldi	r24, 0x00	; 0
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	3a c0       	rjmp	.+116    	; 0x1350 <fdevopen+0x8c>
    12dc:	8b 01       	movw	r16, r22
    12de:	ec 01       	movw	r28, r24
    12e0:	6e e0       	ldi	r22, 0x0E	; 14
    12e2:	70 e0       	ldi	r23, 0x00	; 0
    12e4:	81 e0       	ldi	r24, 0x01	; 1
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <calloc>
    12ec:	fc 01       	movw	r30, r24
    12ee:	89 2b       	or	r24, r25
    12f0:	91 f3       	breq	.-28     	; 0x12d6 <fdevopen+0x12>
    12f2:	80 e8       	ldi	r24, 0x80	; 128
    12f4:	83 83       	std	Z+3, r24	; 0x03
    12f6:	01 15       	cp	r16, r1
    12f8:	11 05       	cpc	r17, r1
    12fa:	71 f0       	breq	.+28     	; 0x1318 <fdevopen+0x54>
    12fc:	13 87       	std	Z+11, r17	; 0x0b
    12fe:	02 87       	std	Z+10, r16	; 0x0a
    1300:	81 e8       	ldi	r24, 0x81	; 129
    1302:	83 83       	std	Z+3, r24	; 0x03
    1304:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <__iob>
    1308:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <__iob+0x1>
    130c:	89 2b       	or	r24, r25
    130e:	21 f4       	brne	.+8      	; 0x1318 <fdevopen+0x54>
    1310:	f0 93 11 02 	sts	0x0211, r31	; 0x800211 <__iob+0x1>
    1314:	e0 93 10 02 	sts	0x0210, r30	; 0x800210 <__iob>
    1318:	20 97       	sbiw	r28, 0x00	; 0
    131a:	c9 f0       	breq	.+50     	; 0x134e <fdevopen+0x8a>
    131c:	d1 87       	std	Z+9, r29	; 0x09
    131e:	c0 87       	std	Z+8, r28	; 0x08
    1320:	83 81       	ldd	r24, Z+3	; 0x03
    1322:	82 60       	ori	r24, 0x02	; 2
    1324:	83 83       	std	Z+3, r24	; 0x03
    1326:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <__iob+0x2>
    132a:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <__iob+0x3>
    132e:	89 2b       	or	r24, r25
    1330:	71 f4       	brne	.+28     	; 0x134e <fdevopen+0x8a>
    1332:	f0 93 13 02 	sts	0x0213, r31	; 0x800213 <__iob+0x3>
    1336:	e0 93 12 02 	sts	0x0212, r30	; 0x800212 <__iob+0x2>
    133a:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <__iob+0x4>
    133e:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <__iob+0x5>
    1342:	89 2b       	or	r24, r25
    1344:	21 f4       	brne	.+8      	; 0x134e <fdevopen+0x8a>
    1346:	f0 93 15 02 	sts	0x0215, r31	; 0x800215 <__iob+0x5>
    134a:	e0 93 14 02 	sts	0x0214, r30	; 0x800214 <__iob+0x4>
    134e:	cf 01       	movw	r24, r30
    1350:	df 91       	pop	r29
    1352:	cf 91       	pop	r28
    1354:	1f 91       	pop	r17
    1356:	0f 91       	pop	r16
    1358:	08 95       	ret

0000135a <printf>:
    135a:	a0 e0       	ldi	r26, 0x00	; 0
    135c:	b0 e0       	ldi	r27, 0x00	; 0
    135e:	e3 eb       	ldi	r30, 0xB3	; 179
    1360:	f9 e0       	ldi	r31, 0x09	; 9
    1362:	0c 94 f0 0c 	jmp	0x19e0	; 0x19e0 <__prologue_saves__+0x20>
    1366:	ae 01       	movw	r20, r28
    1368:	4b 5f       	subi	r20, 0xFB	; 251
    136a:	5f 4f       	sbci	r21, 0xFF	; 255
    136c:	fa 01       	movw	r30, r20
    136e:	61 91       	ld	r22, Z+
    1370:	71 91       	ld	r23, Z+
    1372:	af 01       	movw	r20, r30
    1374:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <__iob+0x2>
    1378:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <__iob+0x3>
    137c:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <vfprintf>
    1380:	e2 e0       	ldi	r30, 0x02	; 2
    1382:	0c 94 0c 0d 	jmp	0x1a18	; 0x1a18 <__epilogue_restores__+0x20>

00001386 <putchar>:
    1386:	60 91 12 02 	lds	r22, 0x0212	; 0x800212 <__iob+0x2>
    138a:	70 91 13 02 	lds	r23, 0x0213	; 0x800213 <__iob+0x3>
    138e:	0e 94 14 0c 	call	0x1828	; 0x1828 <fputc>
    1392:	08 95       	ret

00001394 <puts>:
    1394:	0f 93       	push	r16
    1396:	1f 93       	push	r17
    1398:	cf 93       	push	r28
    139a:	df 93       	push	r29
    139c:	e0 91 12 02 	lds	r30, 0x0212	; 0x800212 <__iob+0x2>
    13a0:	f0 91 13 02 	lds	r31, 0x0213	; 0x800213 <__iob+0x3>
    13a4:	23 81       	ldd	r18, Z+3	; 0x03
    13a6:	21 ff       	sbrs	r18, 1
    13a8:	1b c0       	rjmp	.+54     	; 0x13e0 <puts+0x4c>
    13aa:	8c 01       	movw	r16, r24
    13ac:	d0 e0       	ldi	r29, 0x00	; 0
    13ae:	c0 e0       	ldi	r28, 0x00	; 0
    13b0:	f8 01       	movw	r30, r16
    13b2:	81 91       	ld	r24, Z+
    13b4:	8f 01       	movw	r16, r30
    13b6:	60 91 12 02 	lds	r22, 0x0212	; 0x800212 <__iob+0x2>
    13ba:	70 91 13 02 	lds	r23, 0x0213	; 0x800213 <__iob+0x3>
    13be:	db 01       	movw	r26, r22
    13c0:	18 96       	adiw	r26, 0x08	; 8
    13c2:	ed 91       	ld	r30, X+
    13c4:	fc 91       	ld	r31, X
    13c6:	19 97       	sbiw	r26, 0x09	; 9
    13c8:	88 23       	and	r24, r24
    13ca:	31 f0       	breq	.+12     	; 0x13d8 <puts+0x44>
    13cc:	09 95       	icall
    13ce:	89 2b       	or	r24, r25
    13d0:	79 f3       	breq	.-34     	; 0x13b0 <puts+0x1c>
    13d2:	df ef       	ldi	r29, 0xFF	; 255
    13d4:	cf ef       	ldi	r28, 0xFF	; 255
    13d6:	ec cf       	rjmp	.-40     	; 0x13b0 <puts+0x1c>
    13d8:	8a e0       	ldi	r24, 0x0A	; 10
    13da:	09 95       	icall
    13dc:	89 2b       	or	r24, r25
    13de:	19 f0       	breq	.+6      	; 0x13e6 <puts+0x52>
    13e0:	8f ef       	ldi	r24, 0xFF	; 255
    13e2:	9f ef       	ldi	r25, 0xFF	; 255
    13e4:	02 c0       	rjmp	.+4      	; 0x13ea <puts+0x56>
    13e6:	8d 2f       	mov	r24, r29
    13e8:	9c 2f       	mov	r25, r28
    13ea:	df 91       	pop	r29
    13ec:	cf 91       	pop	r28
    13ee:	1f 91       	pop	r17
    13f0:	0f 91       	pop	r16
    13f2:	08 95       	ret

000013f4 <vfprintf>:
    13f4:	ab e0       	ldi	r26, 0x0B	; 11
    13f6:	b0 e0       	ldi	r27, 0x00	; 0
    13f8:	e0 e0       	ldi	r30, 0x00	; 0
    13fa:	fa e0       	ldi	r31, 0x0A	; 10
    13fc:	0c 94 e0 0c 	jmp	0x19c0	; 0x19c0 <__prologue_saves__>
    1400:	6c 01       	movw	r12, r24
    1402:	7b 01       	movw	r14, r22
    1404:	8a 01       	movw	r16, r20
    1406:	fc 01       	movw	r30, r24
    1408:	17 82       	std	Z+7, r1	; 0x07
    140a:	16 82       	std	Z+6, r1	; 0x06
    140c:	83 81       	ldd	r24, Z+3	; 0x03
    140e:	81 ff       	sbrs	r24, 1
    1410:	cc c1       	rjmp	.+920    	; 0x17aa <vfprintf+0x3b6>
    1412:	ce 01       	movw	r24, r28
    1414:	01 96       	adiw	r24, 0x01	; 1
    1416:	3c 01       	movw	r6, r24
    1418:	f6 01       	movw	r30, r12
    141a:	93 81       	ldd	r25, Z+3	; 0x03
    141c:	f7 01       	movw	r30, r14
    141e:	93 fd       	sbrc	r25, 3
    1420:	85 91       	lpm	r24, Z+
    1422:	93 ff       	sbrs	r25, 3
    1424:	81 91       	ld	r24, Z+
    1426:	7f 01       	movw	r14, r30
    1428:	88 23       	and	r24, r24
    142a:	09 f4       	brne	.+2      	; 0x142e <vfprintf+0x3a>
    142c:	ba c1       	rjmp	.+884    	; 0x17a2 <vfprintf+0x3ae>
    142e:	85 32       	cpi	r24, 0x25	; 37
    1430:	39 f4       	brne	.+14     	; 0x1440 <vfprintf+0x4c>
    1432:	93 fd       	sbrc	r25, 3
    1434:	85 91       	lpm	r24, Z+
    1436:	93 ff       	sbrs	r25, 3
    1438:	81 91       	ld	r24, Z+
    143a:	7f 01       	movw	r14, r30
    143c:	85 32       	cpi	r24, 0x25	; 37
    143e:	29 f4       	brne	.+10     	; 0x144a <vfprintf+0x56>
    1440:	b6 01       	movw	r22, r12
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	0e 94 14 0c 	call	0x1828	; 0x1828 <fputc>
    1448:	e7 cf       	rjmp	.-50     	; 0x1418 <vfprintf+0x24>
    144a:	91 2c       	mov	r9, r1
    144c:	21 2c       	mov	r2, r1
    144e:	31 2c       	mov	r3, r1
    1450:	ff e1       	ldi	r31, 0x1F	; 31
    1452:	f3 15       	cp	r31, r3
    1454:	d8 f0       	brcs	.+54     	; 0x148c <vfprintf+0x98>
    1456:	8b 32       	cpi	r24, 0x2B	; 43
    1458:	79 f0       	breq	.+30     	; 0x1478 <vfprintf+0x84>
    145a:	38 f4       	brcc	.+14     	; 0x146a <vfprintf+0x76>
    145c:	80 32       	cpi	r24, 0x20	; 32
    145e:	79 f0       	breq	.+30     	; 0x147e <vfprintf+0x8a>
    1460:	83 32       	cpi	r24, 0x23	; 35
    1462:	a1 f4       	brne	.+40     	; 0x148c <vfprintf+0x98>
    1464:	23 2d       	mov	r18, r3
    1466:	20 61       	ori	r18, 0x10	; 16
    1468:	1d c0       	rjmp	.+58     	; 0x14a4 <vfprintf+0xb0>
    146a:	8d 32       	cpi	r24, 0x2D	; 45
    146c:	61 f0       	breq	.+24     	; 0x1486 <vfprintf+0x92>
    146e:	80 33       	cpi	r24, 0x30	; 48
    1470:	69 f4       	brne	.+26     	; 0x148c <vfprintf+0x98>
    1472:	23 2d       	mov	r18, r3
    1474:	21 60       	ori	r18, 0x01	; 1
    1476:	16 c0       	rjmp	.+44     	; 0x14a4 <vfprintf+0xb0>
    1478:	83 2d       	mov	r24, r3
    147a:	82 60       	ori	r24, 0x02	; 2
    147c:	38 2e       	mov	r3, r24
    147e:	e3 2d       	mov	r30, r3
    1480:	e4 60       	ori	r30, 0x04	; 4
    1482:	3e 2e       	mov	r3, r30
    1484:	2a c0       	rjmp	.+84     	; 0x14da <vfprintf+0xe6>
    1486:	f3 2d       	mov	r31, r3
    1488:	f8 60       	ori	r31, 0x08	; 8
    148a:	1d c0       	rjmp	.+58     	; 0x14c6 <vfprintf+0xd2>
    148c:	37 fc       	sbrc	r3, 7
    148e:	2d c0       	rjmp	.+90     	; 0x14ea <vfprintf+0xf6>
    1490:	20 ed       	ldi	r18, 0xD0	; 208
    1492:	28 0f       	add	r18, r24
    1494:	2a 30       	cpi	r18, 0x0A	; 10
    1496:	40 f0       	brcs	.+16     	; 0x14a8 <vfprintf+0xb4>
    1498:	8e 32       	cpi	r24, 0x2E	; 46
    149a:	b9 f4       	brne	.+46     	; 0x14ca <vfprintf+0xd6>
    149c:	36 fc       	sbrc	r3, 6
    149e:	81 c1       	rjmp	.+770    	; 0x17a2 <vfprintf+0x3ae>
    14a0:	23 2d       	mov	r18, r3
    14a2:	20 64       	ori	r18, 0x40	; 64
    14a4:	32 2e       	mov	r3, r18
    14a6:	19 c0       	rjmp	.+50     	; 0x14da <vfprintf+0xe6>
    14a8:	36 fe       	sbrs	r3, 6
    14aa:	06 c0       	rjmp	.+12     	; 0x14b8 <vfprintf+0xc4>
    14ac:	8a e0       	ldi	r24, 0x0A	; 10
    14ae:	98 9e       	mul	r9, r24
    14b0:	20 0d       	add	r18, r0
    14b2:	11 24       	eor	r1, r1
    14b4:	92 2e       	mov	r9, r18
    14b6:	11 c0       	rjmp	.+34     	; 0x14da <vfprintf+0xe6>
    14b8:	ea e0       	ldi	r30, 0x0A	; 10
    14ba:	2e 9e       	mul	r2, r30
    14bc:	20 0d       	add	r18, r0
    14be:	11 24       	eor	r1, r1
    14c0:	22 2e       	mov	r2, r18
    14c2:	f3 2d       	mov	r31, r3
    14c4:	f0 62       	ori	r31, 0x20	; 32
    14c6:	3f 2e       	mov	r3, r31
    14c8:	08 c0       	rjmp	.+16     	; 0x14da <vfprintf+0xe6>
    14ca:	8c 36       	cpi	r24, 0x6C	; 108
    14cc:	21 f4       	brne	.+8      	; 0x14d6 <vfprintf+0xe2>
    14ce:	83 2d       	mov	r24, r3
    14d0:	80 68       	ori	r24, 0x80	; 128
    14d2:	38 2e       	mov	r3, r24
    14d4:	02 c0       	rjmp	.+4      	; 0x14da <vfprintf+0xe6>
    14d6:	88 36       	cpi	r24, 0x68	; 104
    14d8:	41 f4       	brne	.+16     	; 0x14ea <vfprintf+0xf6>
    14da:	f7 01       	movw	r30, r14
    14dc:	93 fd       	sbrc	r25, 3
    14de:	85 91       	lpm	r24, Z+
    14e0:	93 ff       	sbrs	r25, 3
    14e2:	81 91       	ld	r24, Z+
    14e4:	7f 01       	movw	r14, r30
    14e6:	81 11       	cpse	r24, r1
    14e8:	b3 cf       	rjmp	.-154    	; 0x1450 <vfprintf+0x5c>
    14ea:	98 2f       	mov	r25, r24
    14ec:	9f 7d       	andi	r25, 0xDF	; 223
    14ee:	95 54       	subi	r25, 0x45	; 69
    14f0:	93 30       	cpi	r25, 0x03	; 3
    14f2:	28 f4       	brcc	.+10     	; 0x14fe <vfprintf+0x10a>
    14f4:	0c 5f       	subi	r16, 0xFC	; 252
    14f6:	1f 4f       	sbci	r17, 0xFF	; 255
    14f8:	9f e3       	ldi	r25, 0x3F	; 63
    14fa:	99 83       	std	Y+1, r25	; 0x01
    14fc:	0d c0       	rjmp	.+26     	; 0x1518 <vfprintf+0x124>
    14fe:	83 36       	cpi	r24, 0x63	; 99
    1500:	31 f0       	breq	.+12     	; 0x150e <vfprintf+0x11a>
    1502:	83 37       	cpi	r24, 0x73	; 115
    1504:	71 f0       	breq	.+28     	; 0x1522 <vfprintf+0x12e>
    1506:	83 35       	cpi	r24, 0x53	; 83
    1508:	09 f0       	breq	.+2      	; 0x150c <vfprintf+0x118>
    150a:	59 c0       	rjmp	.+178    	; 0x15be <vfprintf+0x1ca>
    150c:	21 c0       	rjmp	.+66     	; 0x1550 <vfprintf+0x15c>
    150e:	f8 01       	movw	r30, r16
    1510:	80 81       	ld	r24, Z
    1512:	89 83       	std	Y+1, r24	; 0x01
    1514:	0e 5f       	subi	r16, 0xFE	; 254
    1516:	1f 4f       	sbci	r17, 0xFF	; 255
    1518:	88 24       	eor	r8, r8
    151a:	83 94       	inc	r8
    151c:	91 2c       	mov	r9, r1
    151e:	53 01       	movw	r10, r6
    1520:	13 c0       	rjmp	.+38     	; 0x1548 <vfprintf+0x154>
    1522:	28 01       	movw	r4, r16
    1524:	f2 e0       	ldi	r31, 0x02	; 2
    1526:	4f 0e       	add	r4, r31
    1528:	51 1c       	adc	r5, r1
    152a:	f8 01       	movw	r30, r16
    152c:	a0 80       	ld	r10, Z
    152e:	b1 80       	ldd	r11, Z+1	; 0x01
    1530:	36 fe       	sbrs	r3, 6
    1532:	03 c0       	rjmp	.+6      	; 0x153a <vfprintf+0x146>
    1534:	69 2d       	mov	r22, r9
    1536:	70 e0       	ldi	r23, 0x00	; 0
    1538:	02 c0       	rjmp	.+4      	; 0x153e <vfprintf+0x14a>
    153a:	6f ef       	ldi	r22, 0xFF	; 255
    153c:	7f ef       	ldi	r23, 0xFF	; 255
    153e:	c5 01       	movw	r24, r10
    1540:	0e 94 09 0c 	call	0x1812	; 0x1812 <strnlen>
    1544:	4c 01       	movw	r8, r24
    1546:	82 01       	movw	r16, r4
    1548:	f3 2d       	mov	r31, r3
    154a:	ff 77       	andi	r31, 0x7F	; 127
    154c:	3f 2e       	mov	r3, r31
    154e:	16 c0       	rjmp	.+44     	; 0x157c <vfprintf+0x188>
    1550:	28 01       	movw	r4, r16
    1552:	22 e0       	ldi	r18, 0x02	; 2
    1554:	42 0e       	add	r4, r18
    1556:	51 1c       	adc	r5, r1
    1558:	f8 01       	movw	r30, r16
    155a:	a0 80       	ld	r10, Z
    155c:	b1 80       	ldd	r11, Z+1	; 0x01
    155e:	36 fe       	sbrs	r3, 6
    1560:	03 c0       	rjmp	.+6      	; 0x1568 <vfprintf+0x174>
    1562:	69 2d       	mov	r22, r9
    1564:	70 e0       	ldi	r23, 0x00	; 0
    1566:	02 c0       	rjmp	.+4      	; 0x156c <vfprintf+0x178>
    1568:	6f ef       	ldi	r22, 0xFF	; 255
    156a:	7f ef       	ldi	r23, 0xFF	; 255
    156c:	c5 01       	movw	r24, r10
    156e:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <strnlen_P>
    1572:	4c 01       	movw	r8, r24
    1574:	f3 2d       	mov	r31, r3
    1576:	f0 68       	ori	r31, 0x80	; 128
    1578:	3f 2e       	mov	r3, r31
    157a:	82 01       	movw	r16, r4
    157c:	33 fc       	sbrc	r3, 3
    157e:	1b c0       	rjmp	.+54     	; 0x15b6 <vfprintf+0x1c2>
    1580:	82 2d       	mov	r24, r2
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	88 16       	cp	r8, r24
    1586:	99 06       	cpc	r9, r25
    1588:	b0 f4       	brcc	.+44     	; 0x15b6 <vfprintf+0x1c2>
    158a:	b6 01       	movw	r22, r12
    158c:	80 e2       	ldi	r24, 0x20	; 32
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	0e 94 14 0c 	call	0x1828	; 0x1828 <fputc>
    1594:	2a 94       	dec	r2
    1596:	f4 cf       	rjmp	.-24     	; 0x1580 <vfprintf+0x18c>
    1598:	f5 01       	movw	r30, r10
    159a:	37 fc       	sbrc	r3, 7
    159c:	85 91       	lpm	r24, Z+
    159e:	37 fe       	sbrs	r3, 7
    15a0:	81 91       	ld	r24, Z+
    15a2:	5f 01       	movw	r10, r30
    15a4:	b6 01       	movw	r22, r12
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	0e 94 14 0c 	call	0x1828	; 0x1828 <fputc>
    15ac:	21 10       	cpse	r2, r1
    15ae:	2a 94       	dec	r2
    15b0:	21 e0       	ldi	r18, 0x01	; 1
    15b2:	82 1a       	sub	r8, r18
    15b4:	91 08       	sbc	r9, r1
    15b6:	81 14       	cp	r8, r1
    15b8:	91 04       	cpc	r9, r1
    15ba:	71 f7       	brne	.-36     	; 0x1598 <vfprintf+0x1a4>
    15bc:	e8 c0       	rjmp	.+464    	; 0x178e <vfprintf+0x39a>
    15be:	84 36       	cpi	r24, 0x64	; 100
    15c0:	11 f0       	breq	.+4      	; 0x15c6 <vfprintf+0x1d2>
    15c2:	89 36       	cpi	r24, 0x69	; 105
    15c4:	41 f5       	brne	.+80     	; 0x1616 <vfprintf+0x222>
    15c6:	f8 01       	movw	r30, r16
    15c8:	37 fe       	sbrs	r3, 7
    15ca:	07 c0       	rjmp	.+14     	; 0x15da <vfprintf+0x1e6>
    15cc:	60 81       	ld	r22, Z
    15ce:	71 81       	ldd	r23, Z+1	; 0x01
    15d0:	82 81       	ldd	r24, Z+2	; 0x02
    15d2:	93 81       	ldd	r25, Z+3	; 0x03
    15d4:	0c 5f       	subi	r16, 0xFC	; 252
    15d6:	1f 4f       	sbci	r17, 0xFF	; 255
    15d8:	08 c0       	rjmp	.+16     	; 0x15ea <vfprintf+0x1f6>
    15da:	60 81       	ld	r22, Z
    15dc:	71 81       	ldd	r23, Z+1	; 0x01
    15de:	07 2e       	mov	r0, r23
    15e0:	00 0c       	add	r0, r0
    15e2:	88 0b       	sbc	r24, r24
    15e4:	99 0b       	sbc	r25, r25
    15e6:	0e 5f       	subi	r16, 0xFE	; 254
    15e8:	1f 4f       	sbci	r17, 0xFF	; 255
    15ea:	f3 2d       	mov	r31, r3
    15ec:	ff 76       	andi	r31, 0x6F	; 111
    15ee:	3f 2e       	mov	r3, r31
    15f0:	97 ff       	sbrs	r25, 7
    15f2:	09 c0       	rjmp	.+18     	; 0x1606 <vfprintf+0x212>
    15f4:	90 95       	com	r25
    15f6:	80 95       	com	r24
    15f8:	70 95       	com	r23
    15fa:	61 95       	neg	r22
    15fc:	7f 4f       	sbci	r23, 0xFF	; 255
    15fe:	8f 4f       	sbci	r24, 0xFF	; 255
    1600:	9f 4f       	sbci	r25, 0xFF	; 255
    1602:	f0 68       	ori	r31, 0x80	; 128
    1604:	3f 2e       	mov	r3, r31
    1606:	2a e0       	ldi	r18, 0x0A	; 10
    1608:	30 e0       	ldi	r19, 0x00	; 0
    160a:	a3 01       	movw	r20, r6
    160c:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <__ultoa_invert>
    1610:	88 2e       	mov	r8, r24
    1612:	86 18       	sub	r8, r6
    1614:	45 c0       	rjmp	.+138    	; 0x16a0 <vfprintf+0x2ac>
    1616:	85 37       	cpi	r24, 0x75	; 117
    1618:	31 f4       	brne	.+12     	; 0x1626 <vfprintf+0x232>
    161a:	23 2d       	mov	r18, r3
    161c:	2f 7e       	andi	r18, 0xEF	; 239
    161e:	b2 2e       	mov	r11, r18
    1620:	2a e0       	ldi	r18, 0x0A	; 10
    1622:	30 e0       	ldi	r19, 0x00	; 0
    1624:	25 c0       	rjmp	.+74     	; 0x1670 <vfprintf+0x27c>
    1626:	93 2d       	mov	r25, r3
    1628:	99 7f       	andi	r25, 0xF9	; 249
    162a:	b9 2e       	mov	r11, r25
    162c:	8f 36       	cpi	r24, 0x6F	; 111
    162e:	c1 f0       	breq	.+48     	; 0x1660 <vfprintf+0x26c>
    1630:	18 f4       	brcc	.+6      	; 0x1638 <vfprintf+0x244>
    1632:	88 35       	cpi	r24, 0x58	; 88
    1634:	79 f0       	breq	.+30     	; 0x1654 <vfprintf+0x260>
    1636:	b5 c0       	rjmp	.+362    	; 0x17a2 <vfprintf+0x3ae>
    1638:	80 37       	cpi	r24, 0x70	; 112
    163a:	19 f0       	breq	.+6      	; 0x1642 <vfprintf+0x24e>
    163c:	88 37       	cpi	r24, 0x78	; 120
    163e:	21 f0       	breq	.+8      	; 0x1648 <vfprintf+0x254>
    1640:	b0 c0       	rjmp	.+352    	; 0x17a2 <vfprintf+0x3ae>
    1642:	e9 2f       	mov	r30, r25
    1644:	e0 61       	ori	r30, 0x10	; 16
    1646:	be 2e       	mov	r11, r30
    1648:	b4 fe       	sbrs	r11, 4
    164a:	0d c0       	rjmp	.+26     	; 0x1666 <vfprintf+0x272>
    164c:	fb 2d       	mov	r31, r11
    164e:	f4 60       	ori	r31, 0x04	; 4
    1650:	bf 2e       	mov	r11, r31
    1652:	09 c0       	rjmp	.+18     	; 0x1666 <vfprintf+0x272>
    1654:	34 fe       	sbrs	r3, 4
    1656:	0a c0       	rjmp	.+20     	; 0x166c <vfprintf+0x278>
    1658:	29 2f       	mov	r18, r25
    165a:	26 60       	ori	r18, 0x06	; 6
    165c:	b2 2e       	mov	r11, r18
    165e:	06 c0       	rjmp	.+12     	; 0x166c <vfprintf+0x278>
    1660:	28 e0       	ldi	r18, 0x08	; 8
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	05 c0       	rjmp	.+10     	; 0x1670 <vfprintf+0x27c>
    1666:	20 e1       	ldi	r18, 0x10	; 16
    1668:	30 e0       	ldi	r19, 0x00	; 0
    166a:	02 c0       	rjmp	.+4      	; 0x1670 <vfprintf+0x27c>
    166c:	20 e1       	ldi	r18, 0x10	; 16
    166e:	32 e0       	ldi	r19, 0x02	; 2
    1670:	f8 01       	movw	r30, r16
    1672:	b7 fe       	sbrs	r11, 7
    1674:	07 c0       	rjmp	.+14     	; 0x1684 <vfprintf+0x290>
    1676:	60 81       	ld	r22, Z
    1678:	71 81       	ldd	r23, Z+1	; 0x01
    167a:	82 81       	ldd	r24, Z+2	; 0x02
    167c:	93 81       	ldd	r25, Z+3	; 0x03
    167e:	0c 5f       	subi	r16, 0xFC	; 252
    1680:	1f 4f       	sbci	r17, 0xFF	; 255
    1682:	06 c0       	rjmp	.+12     	; 0x1690 <vfprintf+0x29c>
    1684:	60 81       	ld	r22, Z
    1686:	71 81       	ldd	r23, Z+1	; 0x01
    1688:	80 e0       	ldi	r24, 0x00	; 0
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	0e 5f       	subi	r16, 0xFE	; 254
    168e:	1f 4f       	sbci	r17, 0xFF	; 255
    1690:	a3 01       	movw	r20, r6
    1692:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <__ultoa_invert>
    1696:	88 2e       	mov	r8, r24
    1698:	86 18       	sub	r8, r6
    169a:	fb 2d       	mov	r31, r11
    169c:	ff 77       	andi	r31, 0x7F	; 127
    169e:	3f 2e       	mov	r3, r31
    16a0:	36 fe       	sbrs	r3, 6
    16a2:	0d c0       	rjmp	.+26     	; 0x16be <vfprintf+0x2ca>
    16a4:	23 2d       	mov	r18, r3
    16a6:	2e 7f       	andi	r18, 0xFE	; 254
    16a8:	a2 2e       	mov	r10, r18
    16aa:	89 14       	cp	r8, r9
    16ac:	58 f4       	brcc	.+22     	; 0x16c4 <vfprintf+0x2d0>
    16ae:	34 fe       	sbrs	r3, 4
    16b0:	0b c0       	rjmp	.+22     	; 0x16c8 <vfprintf+0x2d4>
    16b2:	32 fc       	sbrc	r3, 2
    16b4:	09 c0       	rjmp	.+18     	; 0x16c8 <vfprintf+0x2d4>
    16b6:	83 2d       	mov	r24, r3
    16b8:	8e 7e       	andi	r24, 0xEE	; 238
    16ba:	a8 2e       	mov	r10, r24
    16bc:	05 c0       	rjmp	.+10     	; 0x16c8 <vfprintf+0x2d4>
    16be:	b8 2c       	mov	r11, r8
    16c0:	a3 2c       	mov	r10, r3
    16c2:	03 c0       	rjmp	.+6      	; 0x16ca <vfprintf+0x2d6>
    16c4:	b8 2c       	mov	r11, r8
    16c6:	01 c0       	rjmp	.+2      	; 0x16ca <vfprintf+0x2d6>
    16c8:	b9 2c       	mov	r11, r9
    16ca:	a4 fe       	sbrs	r10, 4
    16cc:	0f c0       	rjmp	.+30     	; 0x16ec <vfprintf+0x2f8>
    16ce:	fe 01       	movw	r30, r28
    16d0:	e8 0d       	add	r30, r8
    16d2:	f1 1d       	adc	r31, r1
    16d4:	80 81       	ld	r24, Z
    16d6:	80 33       	cpi	r24, 0x30	; 48
    16d8:	21 f4       	brne	.+8      	; 0x16e2 <vfprintf+0x2ee>
    16da:	9a 2d       	mov	r25, r10
    16dc:	99 7e       	andi	r25, 0xE9	; 233
    16de:	a9 2e       	mov	r10, r25
    16e0:	09 c0       	rjmp	.+18     	; 0x16f4 <vfprintf+0x300>
    16e2:	a2 fe       	sbrs	r10, 2
    16e4:	06 c0       	rjmp	.+12     	; 0x16f2 <vfprintf+0x2fe>
    16e6:	b3 94       	inc	r11
    16e8:	b3 94       	inc	r11
    16ea:	04 c0       	rjmp	.+8      	; 0x16f4 <vfprintf+0x300>
    16ec:	8a 2d       	mov	r24, r10
    16ee:	86 78       	andi	r24, 0x86	; 134
    16f0:	09 f0       	breq	.+2      	; 0x16f4 <vfprintf+0x300>
    16f2:	b3 94       	inc	r11
    16f4:	a3 fc       	sbrc	r10, 3
    16f6:	11 c0       	rjmp	.+34     	; 0x171a <vfprintf+0x326>
    16f8:	a0 fe       	sbrs	r10, 0
    16fa:	06 c0       	rjmp	.+12     	; 0x1708 <vfprintf+0x314>
    16fc:	b2 14       	cp	r11, r2
    16fe:	88 f4       	brcc	.+34     	; 0x1722 <vfprintf+0x32e>
    1700:	28 0c       	add	r2, r8
    1702:	92 2c       	mov	r9, r2
    1704:	9b 18       	sub	r9, r11
    1706:	0e c0       	rjmp	.+28     	; 0x1724 <vfprintf+0x330>
    1708:	b2 14       	cp	r11, r2
    170a:	60 f4       	brcc	.+24     	; 0x1724 <vfprintf+0x330>
    170c:	b6 01       	movw	r22, r12
    170e:	80 e2       	ldi	r24, 0x20	; 32
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	0e 94 14 0c 	call	0x1828	; 0x1828 <fputc>
    1716:	b3 94       	inc	r11
    1718:	f7 cf       	rjmp	.-18     	; 0x1708 <vfprintf+0x314>
    171a:	b2 14       	cp	r11, r2
    171c:	18 f4       	brcc	.+6      	; 0x1724 <vfprintf+0x330>
    171e:	2b 18       	sub	r2, r11
    1720:	02 c0       	rjmp	.+4      	; 0x1726 <vfprintf+0x332>
    1722:	98 2c       	mov	r9, r8
    1724:	21 2c       	mov	r2, r1
    1726:	a4 fe       	sbrs	r10, 4
    1728:	10 c0       	rjmp	.+32     	; 0x174a <vfprintf+0x356>
    172a:	b6 01       	movw	r22, r12
    172c:	80 e3       	ldi	r24, 0x30	; 48
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	0e 94 14 0c 	call	0x1828	; 0x1828 <fputc>
    1734:	a2 fe       	sbrs	r10, 2
    1736:	17 c0       	rjmp	.+46     	; 0x1766 <vfprintf+0x372>
    1738:	a1 fc       	sbrc	r10, 1
    173a:	03 c0       	rjmp	.+6      	; 0x1742 <vfprintf+0x34e>
    173c:	88 e7       	ldi	r24, 0x78	; 120
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	02 c0       	rjmp	.+4      	; 0x1746 <vfprintf+0x352>
    1742:	88 e5       	ldi	r24, 0x58	; 88
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	b6 01       	movw	r22, r12
    1748:	0c c0       	rjmp	.+24     	; 0x1762 <vfprintf+0x36e>
    174a:	8a 2d       	mov	r24, r10
    174c:	86 78       	andi	r24, 0x86	; 134
    174e:	59 f0       	breq	.+22     	; 0x1766 <vfprintf+0x372>
    1750:	a1 fe       	sbrs	r10, 1
    1752:	02 c0       	rjmp	.+4      	; 0x1758 <vfprintf+0x364>
    1754:	8b e2       	ldi	r24, 0x2B	; 43
    1756:	01 c0       	rjmp	.+2      	; 0x175a <vfprintf+0x366>
    1758:	80 e2       	ldi	r24, 0x20	; 32
    175a:	a7 fc       	sbrc	r10, 7
    175c:	8d e2       	ldi	r24, 0x2D	; 45
    175e:	b6 01       	movw	r22, r12
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	0e 94 14 0c 	call	0x1828	; 0x1828 <fputc>
    1766:	89 14       	cp	r8, r9
    1768:	38 f4       	brcc	.+14     	; 0x1778 <vfprintf+0x384>
    176a:	b6 01       	movw	r22, r12
    176c:	80 e3       	ldi	r24, 0x30	; 48
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	0e 94 14 0c 	call	0x1828	; 0x1828 <fputc>
    1774:	9a 94       	dec	r9
    1776:	f7 cf       	rjmp	.-18     	; 0x1766 <vfprintf+0x372>
    1778:	8a 94       	dec	r8
    177a:	f3 01       	movw	r30, r6
    177c:	e8 0d       	add	r30, r8
    177e:	f1 1d       	adc	r31, r1
    1780:	80 81       	ld	r24, Z
    1782:	b6 01       	movw	r22, r12
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	0e 94 14 0c 	call	0x1828	; 0x1828 <fputc>
    178a:	81 10       	cpse	r8, r1
    178c:	f5 cf       	rjmp	.-22     	; 0x1778 <vfprintf+0x384>
    178e:	22 20       	and	r2, r2
    1790:	09 f4       	brne	.+2      	; 0x1794 <vfprintf+0x3a0>
    1792:	42 ce       	rjmp	.-892    	; 0x1418 <vfprintf+0x24>
    1794:	b6 01       	movw	r22, r12
    1796:	80 e2       	ldi	r24, 0x20	; 32
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	0e 94 14 0c 	call	0x1828	; 0x1828 <fputc>
    179e:	2a 94       	dec	r2
    17a0:	f6 cf       	rjmp	.-20     	; 0x178e <vfprintf+0x39a>
    17a2:	f6 01       	movw	r30, r12
    17a4:	86 81       	ldd	r24, Z+6	; 0x06
    17a6:	97 81       	ldd	r25, Z+7	; 0x07
    17a8:	02 c0       	rjmp	.+4      	; 0x17ae <vfprintf+0x3ba>
    17aa:	8f ef       	ldi	r24, 0xFF	; 255
    17ac:	9f ef       	ldi	r25, 0xFF	; 255
    17ae:	2b 96       	adiw	r28, 0x0b	; 11
    17b0:	e2 e1       	ldi	r30, 0x12	; 18
    17b2:	0c 94 fc 0c 	jmp	0x19f8	; 0x19f8 <__epilogue_restores__>

000017b6 <calloc>:
    17b6:	0f 93       	push	r16
    17b8:	1f 93       	push	r17
    17ba:	cf 93       	push	r28
    17bc:	df 93       	push	r29
    17be:	86 9f       	mul	r24, r22
    17c0:	80 01       	movw	r16, r0
    17c2:	87 9f       	mul	r24, r23
    17c4:	10 0d       	add	r17, r0
    17c6:	96 9f       	mul	r25, r22
    17c8:	10 0d       	add	r17, r0
    17ca:	11 24       	eor	r1, r1
    17cc:	c8 01       	movw	r24, r16
    17ce:	0e 94 e5 07 	call	0xfca	; 0xfca <malloc>
    17d2:	ec 01       	movw	r28, r24
    17d4:	00 97       	sbiw	r24, 0x00	; 0
    17d6:	29 f0       	breq	.+10     	; 0x17e2 <calloc+0x2c>
    17d8:	a8 01       	movw	r20, r16
    17da:	60 e0       	ldi	r22, 0x00	; 0
    17dc:	70 e0       	ldi	r23, 0x00	; 0
    17de:	0e 94 02 0c 	call	0x1804	; 0x1804 <memset>
    17e2:	ce 01       	movw	r24, r28
    17e4:	df 91       	pop	r29
    17e6:	cf 91       	pop	r28
    17e8:	1f 91       	pop	r17
    17ea:	0f 91       	pop	r16
    17ec:	08 95       	ret

000017ee <strnlen_P>:
    17ee:	fc 01       	movw	r30, r24
    17f0:	05 90       	lpm	r0, Z+
    17f2:	61 50       	subi	r22, 0x01	; 1
    17f4:	70 40       	sbci	r23, 0x00	; 0
    17f6:	01 10       	cpse	r0, r1
    17f8:	d8 f7       	brcc	.-10     	; 0x17f0 <strnlen_P+0x2>
    17fa:	80 95       	com	r24
    17fc:	90 95       	com	r25
    17fe:	8e 0f       	add	r24, r30
    1800:	9f 1f       	adc	r25, r31
    1802:	08 95       	ret

00001804 <memset>:
    1804:	dc 01       	movw	r26, r24
    1806:	01 c0       	rjmp	.+2      	; 0x180a <memset+0x6>
    1808:	6d 93       	st	X+, r22
    180a:	41 50       	subi	r20, 0x01	; 1
    180c:	50 40       	sbci	r21, 0x00	; 0
    180e:	e0 f7       	brcc	.-8      	; 0x1808 <memset+0x4>
    1810:	08 95       	ret

00001812 <strnlen>:
    1812:	fc 01       	movw	r30, r24
    1814:	61 50       	subi	r22, 0x01	; 1
    1816:	70 40       	sbci	r23, 0x00	; 0
    1818:	01 90       	ld	r0, Z+
    181a:	01 10       	cpse	r0, r1
    181c:	d8 f7       	brcc	.-10     	; 0x1814 <strnlen+0x2>
    181e:	80 95       	com	r24
    1820:	90 95       	com	r25
    1822:	8e 0f       	add	r24, r30
    1824:	9f 1f       	adc	r25, r31
    1826:	08 95       	ret

00001828 <fputc>:
    1828:	0f 93       	push	r16
    182a:	1f 93       	push	r17
    182c:	cf 93       	push	r28
    182e:	df 93       	push	r29
    1830:	fb 01       	movw	r30, r22
    1832:	23 81       	ldd	r18, Z+3	; 0x03
    1834:	21 fd       	sbrc	r18, 1
    1836:	03 c0       	rjmp	.+6      	; 0x183e <fputc+0x16>
    1838:	8f ef       	ldi	r24, 0xFF	; 255
    183a:	9f ef       	ldi	r25, 0xFF	; 255
    183c:	2c c0       	rjmp	.+88     	; 0x1896 <fputc+0x6e>
    183e:	22 ff       	sbrs	r18, 2
    1840:	16 c0       	rjmp	.+44     	; 0x186e <fputc+0x46>
    1842:	46 81       	ldd	r20, Z+6	; 0x06
    1844:	57 81       	ldd	r21, Z+7	; 0x07
    1846:	24 81       	ldd	r18, Z+4	; 0x04
    1848:	35 81       	ldd	r19, Z+5	; 0x05
    184a:	42 17       	cp	r20, r18
    184c:	53 07       	cpc	r21, r19
    184e:	44 f4       	brge	.+16     	; 0x1860 <fputc+0x38>
    1850:	a0 81       	ld	r26, Z
    1852:	b1 81       	ldd	r27, Z+1	; 0x01
    1854:	9d 01       	movw	r18, r26
    1856:	2f 5f       	subi	r18, 0xFF	; 255
    1858:	3f 4f       	sbci	r19, 0xFF	; 255
    185a:	31 83       	std	Z+1, r19	; 0x01
    185c:	20 83       	st	Z, r18
    185e:	8c 93       	st	X, r24
    1860:	26 81       	ldd	r18, Z+6	; 0x06
    1862:	37 81       	ldd	r19, Z+7	; 0x07
    1864:	2f 5f       	subi	r18, 0xFF	; 255
    1866:	3f 4f       	sbci	r19, 0xFF	; 255
    1868:	37 83       	std	Z+7, r19	; 0x07
    186a:	26 83       	std	Z+6, r18	; 0x06
    186c:	14 c0       	rjmp	.+40     	; 0x1896 <fputc+0x6e>
    186e:	8b 01       	movw	r16, r22
    1870:	ec 01       	movw	r28, r24
    1872:	fb 01       	movw	r30, r22
    1874:	00 84       	ldd	r0, Z+8	; 0x08
    1876:	f1 85       	ldd	r31, Z+9	; 0x09
    1878:	e0 2d       	mov	r30, r0
    187a:	09 95       	icall
    187c:	89 2b       	or	r24, r25
    187e:	e1 f6       	brne	.-72     	; 0x1838 <fputc+0x10>
    1880:	d8 01       	movw	r26, r16
    1882:	16 96       	adiw	r26, 0x06	; 6
    1884:	8d 91       	ld	r24, X+
    1886:	9c 91       	ld	r25, X
    1888:	17 97       	sbiw	r26, 0x07	; 7
    188a:	01 96       	adiw	r24, 0x01	; 1
    188c:	17 96       	adiw	r26, 0x07	; 7
    188e:	9c 93       	st	X, r25
    1890:	8e 93       	st	-X, r24
    1892:	16 97       	sbiw	r26, 0x06	; 6
    1894:	ce 01       	movw	r24, r28
    1896:	df 91       	pop	r29
    1898:	cf 91       	pop	r28
    189a:	1f 91       	pop	r17
    189c:	0f 91       	pop	r16
    189e:	08 95       	ret

000018a0 <__ultoa_invert>:
    18a0:	fa 01       	movw	r30, r20
    18a2:	aa 27       	eor	r26, r26
    18a4:	28 30       	cpi	r18, 0x08	; 8
    18a6:	51 f1       	breq	.+84     	; 0x18fc <__ultoa_invert+0x5c>
    18a8:	20 31       	cpi	r18, 0x10	; 16
    18aa:	81 f1       	breq	.+96     	; 0x190c <__ultoa_invert+0x6c>
    18ac:	e8 94       	clt
    18ae:	6f 93       	push	r22
    18b0:	6e 7f       	andi	r22, 0xFE	; 254
    18b2:	6e 5f       	subi	r22, 0xFE	; 254
    18b4:	7f 4f       	sbci	r23, 0xFF	; 255
    18b6:	8f 4f       	sbci	r24, 0xFF	; 255
    18b8:	9f 4f       	sbci	r25, 0xFF	; 255
    18ba:	af 4f       	sbci	r26, 0xFF	; 255
    18bc:	b1 e0       	ldi	r27, 0x01	; 1
    18be:	3e d0       	rcall	.+124    	; 0x193c <__ultoa_invert+0x9c>
    18c0:	b4 e0       	ldi	r27, 0x04	; 4
    18c2:	3c d0       	rcall	.+120    	; 0x193c <__ultoa_invert+0x9c>
    18c4:	67 0f       	add	r22, r23
    18c6:	78 1f       	adc	r23, r24
    18c8:	89 1f       	adc	r24, r25
    18ca:	9a 1f       	adc	r25, r26
    18cc:	a1 1d       	adc	r26, r1
    18ce:	68 0f       	add	r22, r24
    18d0:	79 1f       	adc	r23, r25
    18d2:	8a 1f       	adc	r24, r26
    18d4:	91 1d       	adc	r25, r1
    18d6:	a1 1d       	adc	r26, r1
    18d8:	6a 0f       	add	r22, r26
    18da:	71 1d       	adc	r23, r1
    18dc:	81 1d       	adc	r24, r1
    18de:	91 1d       	adc	r25, r1
    18e0:	a1 1d       	adc	r26, r1
    18e2:	20 d0       	rcall	.+64     	; 0x1924 <__ultoa_invert+0x84>
    18e4:	09 f4       	brne	.+2      	; 0x18e8 <__ultoa_invert+0x48>
    18e6:	68 94       	set
    18e8:	3f 91       	pop	r19
    18ea:	2a e0       	ldi	r18, 0x0A	; 10
    18ec:	26 9f       	mul	r18, r22
    18ee:	11 24       	eor	r1, r1
    18f0:	30 19       	sub	r19, r0
    18f2:	30 5d       	subi	r19, 0xD0	; 208
    18f4:	31 93       	st	Z+, r19
    18f6:	de f6       	brtc	.-74     	; 0x18ae <__ultoa_invert+0xe>
    18f8:	cf 01       	movw	r24, r30
    18fa:	08 95       	ret
    18fc:	46 2f       	mov	r20, r22
    18fe:	47 70       	andi	r20, 0x07	; 7
    1900:	40 5d       	subi	r20, 0xD0	; 208
    1902:	41 93       	st	Z+, r20
    1904:	b3 e0       	ldi	r27, 0x03	; 3
    1906:	0f d0       	rcall	.+30     	; 0x1926 <__ultoa_invert+0x86>
    1908:	c9 f7       	brne	.-14     	; 0x18fc <__ultoa_invert+0x5c>
    190a:	f6 cf       	rjmp	.-20     	; 0x18f8 <__ultoa_invert+0x58>
    190c:	46 2f       	mov	r20, r22
    190e:	4f 70       	andi	r20, 0x0F	; 15
    1910:	40 5d       	subi	r20, 0xD0	; 208
    1912:	4a 33       	cpi	r20, 0x3A	; 58
    1914:	18 f0       	brcs	.+6      	; 0x191c <__ultoa_invert+0x7c>
    1916:	49 5d       	subi	r20, 0xD9	; 217
    1918:	31 fd       	sbrc	r19, 1
    191a:	40 52       	subi	r20, 0x20	; 32
    191c:	41 93       	st	Z+, r20
    191e:	02 d0       	rcall	.+4      	; 0x1924 <__ultoa_invert+0x84>
    1920:	a9 f7       	brne	.-22     	; 0x190c <__ultoa_invert+0x6c>
    1922:	ea cf       	rjmp	.-44     	; 0x18f8 <__ultoa_invert+0x58>
    1924:	b4 e0       	ldi	r27, 0x04	; 4
    1926:	a6 95       	lsr	r26
    1928:	97 95       	ror	r25
    192a:	87 95       	ror	r24
    192c:	77 95       	ror	r23
    192e:	67 95       	ror	r22
    1930:	ba 95       	dec	r27
    1932:	c9 f7       	brne	.-14     	; 0x1926 <__ultoa_invert+0x86>
    1934:	00 97       	sbiw	r24, 0x00	; 0
    1936:	61 05       	cpc	r22, r1
    1938:	71 05       	cpc	r23, r1
    193a:	08 95       	ret
    193c:	9b 01       	movw	r18, r22
    193e:	ac 01       	movw	r20, r24
    1940:	0a 2e       	mov	r0, r26
    1942:	06 94       	lsr	r0
    1944:	57 95       	ror	r21
    1946:	47 95       	ror	r20
    1948:	37 95       	ror	r19
    194a:	27 95       	ror	r18
    194c:	ba 95       	dec	r27
    194e:	c9 f7       	brne	.-14     	; 0x1942 <__ultoa_invert+0xa2>
    1950:	62 0f       	add	r22, r18
    1952:	73 1f       	adc	r23, r19
    1954:	84 1f       	adc	r24, r20
    1956:	95 1f       	adc	r25, r21
    1958:	a0 1d       	adc	r26, r0
    195a:	08 95       	ret

0000195c <__divmodsi4>:
    195c:	05 2e       	mov	r0, r21
    195e:	97 fb       	bst	r25, 7
    1960:	1e f4       	brtc	.+6      	; 0x1968 <__divmodsi4+0xc>
    1962:	00 94       	com	r0
    1964:	0e 94 c5 0c 	call	0x198a	; 0x198a <__negsi2>
    1968:	57 fd       	sbrc	r21, 7
    196a:	07 d0       	rcall	.+14     	; 0x197a <__divmodsi4_neg2>
    196c:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <__udivmodsi4>
    1970:	07 fc       	sbrc	r0, 7
    1972:	03 d0       	rcall	.+6      	; 0x197a <__divmodsi4_neg2>
    1974:	4e f4       	brtc	.+18     	; 0x1988 <__divmodsi4_exit>
    1976:	0c 94 c5 0c 	jmp	0x198a	; 0x198a <__negsi2>

0000197a <__divmodsi4_neg2>:
    197a:	50 95       	com	r21
    197c:	40 95       	com	r20
    197e:	30 95       	com	r19
    1980:	21 95       	neg	r18
    1982:	3f 4f       	sbci	r19, 0xFF	; 255
    1984:	4f 4f       	sbci	r20, 0xFF	; 255
    1986:	5f 4f       	sbci	r21, 0xFF	; 255

00001988 <__divmodsi4_exit>:
    1988:	08 95       	ret

0000198a <__negsi2>:
    198a:	90 95       	com	r25
    198c:	80 95       	com	r24
    198e:	70 95       	com	r23
    1990:	61 95       	neg	r22
    1992:	7f 4f       	sbci	r23, 0xFF	; 255
    1994:	8f 4f       	sbci	r24, 0xFF	; 255
    1996:	9f 4f       	sbci	r25, 0xFF	; 255
    1998:	08 95       	ret

0000199a <__muluhisi3>:
    199a:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <__umulhisi3>
    199e:	a5 9f       	mul	r26, r21
    19a0:	90 0d       	add	r25, r0
    19a2:	b4 9f       	mul	r27, r20
    19a4:	90 0d       	add	r25, r0
    19a6:	a4 9f       	mul	r26, r20
    19a8:	80 0d       	add	r24, r0
    19aa:	91 1d       	adc	r25, r1
    19ac:	11 24       	eor	r1, r1
    19ae:	08 95       	ret

000019b0 <__mulshisi3>:
    19b0:	b7 ff       	sbrs	r27, 7
    19b2:	0c 94 cd 0c 	jmp	0x199a	; 0x199a <__muluhisi3>

000019b6 <__mulohisi3>:
    19b6:	0e 94 cd 0c 	call	0x199a	; 0x199a <__muluhisi3>
    19ba:	82 1b       	sub	r24, r18
    19bc:	93 0b       	sbc	r25, r19
    19be:	08 95       	ret

000019c0 <__prologue_saves__>:
    19c0:	2f 92       	push	r2
    19c2:	3f 92       	push	r3
    19c4:	4f 92       	push	r4
    19c6:	5f 92       	push	r5
    19c8:	6f 92       	push	r6
    19ca:	7f 92       	push	r7
    19cc:	8f 92       	push	r8
    19ce:	9f 92       	push	r9
    19d0:	af 92       	push	r10
    19d2:	bf 92       	push	r11
    19d4:	cf 92       	push	r12
    19d6:	df 92       	push	r13
    19d8:	ef 92       	push	r14
    19da:	ff 92       	push	r15
    19dc:	0f 93       	push	r16
    19de:	1f 93       	push	r17
    19e0:	cf 93       	push	r28
    19e2:	df 93       	push	r29
    19e4:	cd b7       	in	r28, 0x3d	; 61
    19e6:	de b7       	in	r29, 0x3e	; 62
    19e8:	ca 1b       	sub	r28, r26
    19ea:	db 0b       	sbc	r29, r27
    19ec:	0f b6       	in	r0, 0x3f	; 63
    19ee:	f8 94       	cli
    19f0:	de bf       	out	0x3e, r29	; 62
    19f2:	0f be       	out	0x3f, r0	; 63
    19f4:	cd bf       	out	0x3d, r28	; 61
    19f6:	09 94       	ijmp

000019f8 <__epilogue_restores__>:
    19f8:	2a 88       	ldd	r2, Y+18	; 0x12
    19fa:	39 88       	ldd	r3, Y+17	; 0x11
    19fc:	48 88       	ldd	r4, Y+16	; 0x10
    19fe:	5f 84       	ldd	r5, Y+15	; 0x0f
    1a00:	6e 84       	ldd	r6, Y+14	; 0x0e
    1a02:	7d 84       	ldd	r7, Y+13	; 0x0d
    1a04:	8c 84       	ldd	r8, Y+12	; 0x0c
    1a06:	9b 84       	ldd	r9, Y+11	; 0x0b
    1a08:	aa 84       	ldd	r10, Y+10	; 0x0a
    1a0a:	b9 84       	ldd	r11, Y+9	; 0x09
    1a0c:	c8 84       	ldd	r12, Y+8	; 0x08
    1a0e:	df 80       	ldd	r13, Y+7	; 0x07
    1a10:	ee 80       	ldd	r14, Y+6	; 0x06
    1a12:	fd 80       	ldd	r15, Y+5	; 0x05
    1a14:	0c 81       	ldd	r16, Y+4	; 0x04
    1a16:	1b 81       	ldd	r17, Y+3	; 0x03
    1a18:	aa 81       	ldd	r26, Y+2	; 0x02
    1a1a:	b9 81       	ldd	r27, Y+1	; 0x01
    1a1c:	ce 0f       	add	r28, r30
    1a1e:	d1 1d       	adc	r29, r1
    1a20:	0f b6       	in	r0, 0x3f	; 63
    1a22:	f8 94       	cli
    1a24:	de bf       	out	0x3e, r29	; 62
    1a26:	0f be       	out	0x3f, r0	; 63
    1a28:	cd bf       	out	0x3d, r28	; 61
    1a2a:	ed 01       	movw	r28, r26
    1a2c:	08 95       	ret

00001a2e <__udivmodsi4>:
    1a2e:	a1 e2       	ldi	r26, 0x21	; 33
    1a30:	1a 2e       	mov	r1, r26
    1a32:	aa 1b       	sub	r26, r26
    1a34:	bb 1b       	sub	r27, r27
    1a36:	fd 01       	movw	r30, r26
    1a38:	0d c0       	rjmp	.+26     	; 0x1a54 <__udivmodsi4_ep>

00001a3a <__udivmodsi4_loop>:
    1a3a:	aa 1f       	adc	r26, r26
    1a3c:	bb 1f       	adc	r27, r27
    1a3e:	ee 1f       	adc	r30, r30
    1a40:	ff 1f       	adc	r31, r31
    1a42:	a2 17       	cp	r26, r18
    1a44:	b3 07       	cpc	r27, r19
    1a46:	e4 07       	cpc	r30, r20
    1a48:	f5 07       	cpc	r31, r21
    1a4a:	20 f0       	brcs	.+8      	; 0x1a54 <__udivmodsi4_ep>
    1a4c:	a2 1b       	sub	r26, r18
    1a4e:	b3 0b       	sbc	r27, r19
    1a50:	e4 0b       	sbc	r30, r20
    1a52:	f5 0b       	sbc	r31, r21

00001a54 <__udivmodsi4_ep>:
    1a54:	66 1f       	adc	r22, r22
    1a56:	77 1f       	adc	r23, r23
    1a58:	88 1f       	adc	r24, r24
    1a5a:	99 1f       	adc	r25, r25
    1a5c:	1a 94       	dec	r1
    1a5e:	69 f7       	brne	.-38     	; 0x1a3a <__udivmodsi4_loop>
    1a60:	60 95       	com	r22
    1a62:	70 95       	com	r23
    1a64:	80 95       	com	r24
    1a66:	90 95       	com	r25
    1a68:	9b 01       	movw	r18, r22
    1a6a:	ac 01       	movw	r20, r24
    1a6c:	bd 01       	movw	r22, r26
    1a6e:	cf 01       	movw	r24, r30
    1a70:	08 95       	ret

00001a72 <__umulhisi3>:
    1a72:	a2 9f       	mul	r26, r18
    1a74:	b0 01       	movw	r22, r0
    1a76:	b3 9f       	mul	r27, r19
    1a78:	c0 01       	movw	r24, r0
    1a7a:	a3 9f       	mul	r26, r19
    1a7c:	70 0d       	add	r23, r0
    1a7e:	81 1d       	adc	r24, r1
    1a80:	11 24       	eor	r1, r1
    1a82:	91 1d       	adc	r25, r1
    1a84:	b2 9f       	mul	r27, r18
    1a86:	70 0d       	add	r23, r0
    1a88:	81 1d       	adc	r24, r1
    1a8a:	11 24       	eor	r1, r1
    1a8c:	91 1d       	adc	r25, r1
    1a8e:	08 95       	ret

00001a90 <_exit>:
    1a90:	f8 94       	cli

00001a92 <__stop_program>:
    1a92:	ff cf       	rjmp	.-2      	; 0x1a92 <__stop_program>
