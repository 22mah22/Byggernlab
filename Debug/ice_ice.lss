
ice_ice.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000be  00800100  00003772  00003806  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003772  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  008001be  008001be  000038c4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000038c4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003920  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  0000395c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001e69  00000000  00000000  00003a94  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d02  00000000  00000000  000058fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b3d  00000000  00000000  000065ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002dc  00000000  00000000  0000713c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006ce  00000000  00000000  00007418  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001190  00000000  00000000  00007ae6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d8  00000000  00000000  00008c76  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b8 13 	jmp	0x2770	; 0x2770 <__ctors_end>
       4:	0c 94 d5 13 	jmp	0x27aa	; 0x27aa <__bad_interrupt>
       8:	0c 94 d5 13 	jmp	0x27aa	; 0x27aa <__bad_interrupt>
       c:	0c 94 d5 13 	jmp	0x27aa	; 0x27aa <__bad_interrupt>
      10:	0c 94 d5 13 	jmp	0x27aa	; 0x27aa <__bad_interrupt>
      14:	0c 94 d5 13 	jmp	0x27aa	; 0x27aa <__bad_interrupt>
      18:	0c 94 d5 13 	jmp	0x27aa	; 0x27aa <__bad_interrupt>
      1c:	0c 94 d5 13 	jmp	0x27aa	; 0x27aa <__bad_interrupt>
      20:	0c 94 d5 13 	jmp	0x27aa	; 0x27aa <__bad_interrupt>
      24:	0c 94 d5 13 	jmp	0x27aa	; 0x27aa <__bad_interrupt>
      28:	0c 94 d5 13 	jmp	0x27aa	; 0x27aa <__bad_interrupt>
      2c:	0c 94 d5 13 	jmp	0x27aa	; 0x27aa <__bad_interrupt>
      30:	0c 94 d5 13 	jmp	0x27aa	; 0x27aa <__bad_interrupt>
      34:	0c 94 d5 13 	jmp	0x27aa	; 0x27aa <__bad_interrupt>
      38:	0c 94 d5 13 	jmp	0x27aa	; 0x27aa <__bad_interrupt>
      3c:	0c 94 d5 13 	jmp	0x27aa	; 0x27aa <__bad_interrupt>
      40:	0c 94 d5 13 	jmp	0x27aa	; 0x27aa <__bad_interrupt>
      44:	0c 94 d5 13 	jmp	0x27aa	; 0x27aa <__bad_interrupt>
      48:	0c 94 d5 13 	jmp	0x27aa	; 0x27aa <__bad_interrupt>
      4c:	0c 94 d5 13 	jmp	0x27aa	; 0x27aa <__bad_interrupt>
      50:	0c 94 d5 13 	jmp	0x27aa	; 0x27aa <__bad_interrupt>
      54:	0c 94 d5 13 	jmp	0x27aa	; 0x27aa <__bad_interrupt>
      58:	0c 94 d5 13 	jmp	0x27aa	; 0x27aa <__bad_interrupt>
      5c:	0c 94 d5 13 	jmp	0x27aa	; 0x27aa <__bad_interrupt>
      60:	0c 94 d5 13 	jmp	0x27aa	; 0x27aa <__bad_interrupt>
      64:	0c 94 d5 13 	jmp	0x27aa	; 0x27aa <__bad_interrupt>
      68:	0c 94 d5 13 	jmp	0x27aa	; 0x27aa <__bad_interrupt>
      6c:	0c 94 d5 13 	jmp	0x27aa	; 0x27aa <__bad_interrupt>

00000070 <__trampolines_end>:
	...
     36c:	00 00       	nop
     36e:	00 01       	movw	r0, r0
     370:	01 01       	movw	r0, r2
     372:	01 01       	movw	r0, r2
     374:	01 01       	movw	r0, r2
     376:	01 00       	.word	0x0001	; ????
	...
     3d0:	00 00       	nop
     3d2:	00 01       	movw	r0, r0
     3d4:	01 01       	movw	r0, r2
     3d6:	01 01       	movw	r0, r2
     3d8:	01 00       	.word	0x0001	; ????
     3da:	00 01       	movw	r0, r0
     3dc:	01 01       	movw	r0, r2
     3de:	01 01       	movw	r0, r2
     3e0:	01 01       	movw	r0, r2
	...
     3f2:	01 01       	movw	r0, r2
     3f4:	01 01       	movw	r0, r2
     3f6:	01 01       	movw	r0, r2
     3f8:	01 01       	movw	r0, r2
	...
     436:	00 00       	nop
     438:	00 01       	movw	r0, r0
     43a:	01 01       	movw	r0, r2
	...
     448:	00 01       	movw	r0, r0
     44a:	01 01       	movw	r0, r2
     44c:	01 00       	.word	0x0001	; ????
	...
     456:	00 01       	movw	r0, r0
     458:	01 01       	movw	r0, r2
     45a:	01 01       	movw	r0, r2
     45c:	01 00       	.word	0x0001	; ????
     45e:	00 01       	movw	r0, r0
     460:	01 01       	movw	r0, r2
     462:	01 01       	movw	r0, r2
     464:	01 00       	.word	0x0001	; ????
	...
     49e:	00 01       	movw	r0, r0
     4a0:	01 01       	movw	r0, r2
	...
     4b2:	00 00       	nop
     4b4:	01 01       	movw	r0, r2
     4b6:	01 00       	.word	0x0001	; ????
     4b8:	00 00       	nop
     4ba:	00 00       	nop
     4bc:	00 01       	movw	r0, r0
     4be:	01 01       	movw	r0, r2
     4c0:	01 00       	.word	0x0001	; ????
	...
     4ca:	00 00       	nop
     4cc:	01 01       	movw	r0, r2
     4ce:	01 00       	.word	0x0001	; ????
	...
     504:	00 00       	nop
     506:	01 01       	movw	r0, r2
	...
     51c:	00 00       	nop
     51e:	01 01       	movw	r0, r2
     520:	00 00       	nop
     522:	00 01       	movw	r0, r0
     524:	01 01       	movw	r0, r2
	...
     536:	01 01       	movw	r0, r2
	...
     56c:	01 01       	movw	r0, r2
     56e:	01 00       	.word	0x0001	; ????
	...
     584:	00 00       	nop
     586:	00 01       	movw	r0, r0
     588:	01 01       	movw	r0, r2
     58a:	01 01       	movw	r0, r2
	...
     5a0:	01 01       	movw	r0, r2
	...
     5d2:	00 01       	movw	r0, r0
     5d4:	01 01       	movw	r0, r2
	...
     5ee:	00 00       	nop
     5f0:	00 01       	movw	r0, r0
     5f2:	01 00       	.word	0x0001	; ????
	...
     608:	00 01       	movw	r0, r0
     60a:	01 00       	.word	0x0001	; ????
	...
     638:	00 00       	nop
     63a:	01 01       	movw	r0, r2
	...
     658:	00 01       	movw	r0, r0
     65a:	01 00       	.word	0x0001	; ????
	...
     670:	00 00       	nop
     672:	01 00       	.word	0x0001	; ????
	...
     6a0:	00 00       	nop
     6a2:	01 00       	.word	0x0001	; ????
	...
     6c0:	00 00       	nop
     6c2:	01 01       	movw	r0, r2
	...
     6d8:	00 00       	nop
     6da:	01 01       	movw	r0, r2
	...
     708:	00 01       	movw	r0, r0
	...
     72a:	00 01       	movw	r0, r0
	...
     740:	00 00       	nop
     742:	00 01       	movw	r0, r0
     744:	01 00       	.word	0x0001	; ????
	...
     76e:	00 00       	nop
     770:	01 01       	movw	r0, r2
	...
     77e:	00 00       	nop
     780:	00 01       	movw	r0, r0
     782:	01 01       	movw	r0, r2
     784:	01 01       	movw	r0, r2
     786:	01 01       	movw	r0, r2
     788:	01 01       	movw	r0, r2
     78a:	01 01       	movw	r0, r2
     78c:	00 00       	nop
     78e:	00 00       	nop
     790:	00 00       	nop
     792:	00 01       	movw	r0, r0
     794:	01 00       	.word	0x0001	; ????
	...
     7aa:	00 00       	nop
     7ac:	01 00       	.word	0x0001	; ????
	...
     7d6:	00 01       	movw	r0, r0
     7d8:	01 00       	.word	0x0001	; ????
	...
     7e6:	01 01       	movw	r0, r2
     7e8:	01 01       	movw	r0, r2
     7ea:	01 01       	movw	r0, r2
     7ec:	00 00       	nop
     7ee:	00 00       	nop
     7f0:	00 00       	nop
     7f2:	01 01       	movw	r0, r2
     7f4:	01 01       	movw	r0, r2
     7f6:	01 00       	.word	0x0001	; ????
     7f8:	00 00       	nop
     7fa:	00 00       	nop
     7fc:	01 00       	.word	0x0001	; ????
	...
     812:	00 00       	nop
     814:	01 00       	.word	0x0001	; ????
	...
     83e:	00 01       	movw	r0, r0
	...
     848:	00 00       	nop
     84a:	00 01       	movw	r0, r0
     84c:	01 01       	movw	r0, r2
     84e:	01 01       	movw	r0, r2
	...
     85c:	00 00       	nop
     85e:	01 01       	movw	r0, r2
     860:	01 01       	movw	r0, r2
     862:	00 00       	nop
     864:	01 00       	.word	0x0001	; ????
	...
     87a:	00 00       	nop
     87c:	01 01       	movw	r0, r2
	...
     8a6:	01 01       	movw	r0, r2
	...
     8b0:	00 00       	nop
     8b2:	01 01       	movw	r0, r2
     8b4:	01 00       	.word	0x0001	; ????
	...
     8c6:	00 00       	nop
     8c8:	01 01       	movw	r0, r2
     8ca:	01 00       	.word	0x0001	; ????
     8cc:	01 01       	movw	r0, r2
     8ce:	00 01       	movw	r0, r0
     8d0:	01 01       	movw	r0, r2
     8d2:	01 01       	movw	r0, r2
     8d4:	01 01       	movw	r0, r2
     8d6:	01 01       	movw	r0, r2
     8d8:	01 01       	movw	r0, r2
     8da:	01 01       	movw	r0, r2
     8dc:	01 01       	movw	r0, r2
     8de:	01 01       	movw	r0, r2
     8e0:	01 01       	movw	r0, r2
     8e2:	01 01       	movw	r0, r2
     8e4:	01 01       	movw	r0, r2
	...
     90a:	00 00       	nop
     90c:	00 01       	movw	r0, r0
     90e:	01 00       	.word	0x0001	; ????
	...
     918:	01 01       	movw	r0, r2
     91a:	01 00       	.word	0x0001	; ????
	...
     930:	00 00       	nop
     932:	01 01       	movw	r0, r2
     934:	01 01       	movw	r0, r2
     936:	01 01       	movw	r0, r2
     938:	01 01       	movw	r0, r2
     93a:	01 00       	.word	0x0001	; ????
	...
     948:	00 00       	nop
     94a:	01 01       	movw	r0, r2
     94c:	01 01       	movw	r0, r2
     94e:	01 01       	movw	r0, r2
     950:	01 00       	.word	0x0001	; ????
	...
     972:	00 00       	nop
     974:	00 01       	movw	r0, r0
	...
     97e:	00 00       	nop
     980:	01 00       	.word	0x0001	; ????
	...
     99a:	00 00       	nop
     99c:	01 01       	movw	r0, r2
	...
     9b6:	00 00       	nop
     9b8:	01 01       	movw	r0, r2
     9ba:	01 00       	.word	0x0001	; ????
	...
     9dc:	01 01       	movw	r0, r2
	...
     a02:	00 00       	nop
     a04:	00 01       	movw	r0, r0
     a06:	01 00       	.word	0x0001	; ????
	...
     a20:	00 00       	nop
     a22:	01 01       	movw	r0, r2
	...
     a44:	01 01       	movw	r0, r2
	...
     a6e:	01 01       	movw	r0, r2
	...
     a88:	00 00       	nop
     a8a:	00 01       	movw	r0, r0
     a8c:	01 00       	.word	0x0001	; ????
	...
     aaa:	00 00       	nop
     aac:	01 00       	.word	0x0001	; ????
	...
     aca:	01 01       	movw	r0, r2
     acc:	01 01       	movw	r0, r2
     ace:	01 01       	movw	r0, r2
     ad0:	01 01       	movw	r0, r2
     ad2:	01 01       	movw	r0, r2
     ad4:	01 01       	movw	r0, r2
     ad6:	01 01       	movw	r0, r2
     ad8:	01 01       	movw	r0, r2
	...
     ae2:	00 00       	nop
     ae4:	00 01       	movw	r0, r0
     ae6:	01 01       	movw	r0, r2
     ae8:	01 01       	movw	r0, r2
     aea:	01 01       	movw	r0, r2
     aec:	01 01       	movw	r0, r2
     aee:	01 01       	movw	r0, r2
     af0:	01 01       	movw	r0, r2
     af2:	01 00       	.word	0x0001	; ????
     af4:	01 01       	movw	r0, r2
	...
     b12:	00 01       	movw	r0, r0
     b14:	01 00       	.word	0x0001	; ????
	...
     b2e:	01 01       	movw	r0, r2
     b30:	01 01       	movw	r0, r2
     b32:	01 01       	movw	r0, r2
     b34:	01 01       	movw	r0, r2
	...
     b3e:	00 01       	movw	r0, r0
     b40:	01 01       	movw	r0, r2
     b42:	01 00       	.word	0x0001	; ????
     b44:	00 00       	nop
     b46:	00 00       	nop
     b48:	00 01       	movw	r0, r0
     b4a:	01 01       	movw	r0, r2
     b4c:	01 01       	movw	r0, r2
     b4e:	01 01       	movw	r0, r2
     b50:	01 00       	.word	0x0001	; ????
     b52:	00 00       	nop
     b54:	00 00       	nop
     b56:	00 01       	movw	r0, r0
     b58:	01 01       	movw	r0, r2
     b5a:	01 01       	movw	r0, r2
     b5c:	01 01       	movw	r0, r2
     b5e:	01 00       	.word	0x0001	; ????
	...
     b78:	00 00       	nop
     b7a:	00 01       	movw	r0, r0
     b7c:	01 00       	.word	0x0001	; ????
	...
     b92:	00 01       	movw	r0, r0
     b94:	01 01       	movw	r0, r2
     b96:	01 01       	movw	r0, r2
     b98:	01 00       	.word	0x0001	; ????
	...
     baa:	01 01       	movw	r0, r2
     bac:	00 00       	nop
     bae:	01 01       	movw	r0, r2
     bb0:	01 01       	movw	r0, r2
     bb2:	00 00       	nop
     bb4:	00 00       	nop
     bb6:	00 01       	movw	r0, r0
     bb8:	01 01       	movw	r0, r2
     bba:	01 01       	movw	r0, r2
     bbc:	01 01       	movw	r0, r2
     bbe:	01 01       	movw	r0, r2
     bc0:	01 01       	movw	r0, r2
     bc2:	01 00       	.word	0x0001	; ????
     bc4:	00 01       	movw	r0, r0
     bc6:	01 01       	movw	r0, r2
     bc8:	01 00       	.word	0x0001	; ????
	...
     be2:	00 01       	movw	r0, r0
	...
     bf8:	00 01       	movw	r0, r0
     bfa:	01 01       	movw	r0, r2
     bfc:	01 00       	.word	0x0001	; ????
     bfe:	00 00       	nop
     c00:	00 00       	nop
     c02:	00 00       	nop
     c04:	00 01       	movw	r0, r0
     c06:	01 01       	movw	r0, r2
     c08:	01 01       	movw	r0, r2
     c0a:	01 01       	movw	r0, r2
     c0c:	01 01       	movw	r0, r2
     c0e:	01 01       	movw	r0, r2
     c10:	00 00       	nop
     c12:	00 01       	movw	r0, r0
     c14:	01 01       	movw	r0, r2
     c16:	01 01       	movw	r0, r2
     c18:	00 00       	nop
     c1a:	01 01       	movw	r0, r2
     c1c:	01 01       	movw	r0, r2
     c1e:	01 01       	movw	r0, r2
     c20:	01 01       	movw	r0, r2
     c22:	01 00       	.word	0x0001	; ????
     c24:	01 01       	movw	r0, r2
     c26:	00 00       	nop
     c28:	01 01       	movw	r0, r2
     c2a:	01 01       	movw	r0, r2
     c2c:	01 01       	movw	r0, r2
     c2e:	00 00       	nop
     c30:	01 01       	movw	r0, r2
	...
     c4a:	01 01       	movw	r0, r2
	...
     c5c:	00 00       	nop
     c5e:	00 01       	movw	r0, r0
     c60:	01 01       	movw	r0, r2
     c62:	01 00       	.word	0x0001	; ????
     c64:	00 00       	nop
     c66:	00 00       	nop
     c68:	00 01       	movw	r0, r0
     c6a:	01 01       	movw	r0, r2
     c6c:	01 01       	movw	r0, r2
     c6e:	01 01       	movw	r0, r2
     c70:	01 00       	.word	0x0001	; ????
     c72:	00 00       	nop
     c74:	01 01       	movw	r0, r2
     c76:	01 01       	movw	r0, r2
     c78:	01 01       	movw	r0, r2
     c7a:	01 01       	movw	r0, r2
     c7c:	01 01       	movw	r0, r2
     c7e:	01 01       	movw	r0, r2
     c80:	01 01       	movw	r0, r2
     c82:	01 01       	movw	r0, r2
	...
     c94:	01 01       	movw	r0, r2
     c96:	01 01       	movw	r0, r2
     c98:	01 01       	movw	r0, r2
	...
     cae:	00 00       	nop
     cb0:	01 01       	movw	r0, r2
     cb2:	01 01       	movw	r0, r2
	...
     cc4:	00 01       	movw	r0, r0
     cc6:	01 01       	movw	r0, r2
     cc8:	00 00       	nop
     cca:	00 00       	nop
     ccc:	00 01       	movw	r0, r0
     cce:	01 01       	movw	r0, r2
     cd0:	01 01       	movw	r0, r2
     cd2:	01 00       	.word	0x0001	; ????
	...
     ce0:	00 00       	nop
     ce2:	01 01       	movw	r0, r2
     ce4:	01 01       	movw	r0, r2
     ce6:	01 01       	movw	r0, r2
	...
     cfc:	00 00       	nop
     cfe:	00 01       	movw	r0, r0
     d00:	01 01       	movw	r0, r2
	...
     d16:	01 01       	movw	r0, r2
     d18:	01 00       	.word	0x0001	; ????
     d1a:	01 01       	movw	r0, r2
	...
     d28:	00 00       	nop
     d2a:	01 01       	movw	r0, r2
     d2c:	01 01       	movw	r0, r2
     d2e:	00 00       	nop
     d30:	00 01       	movw	r0, r0
     d32:	01 01       	movw	r0, r2
     d34:	01 01       	movw	r0, r2
	...
     d5a:	01 01       	movw	r0, r2
     d5c:	01 01       	movw	r0, r2
     d5e:	01 01       	movw	r0, r2
     d60:	01 01       	movw	r0, r2
     d62:	01 01       	movw	r0, r2
     d64:	01 01       	movw	r0, r2
     d66:	00 00       	nop
     d68:	00 01       	movw	r0, r0
     d6a:	01 00       	.word	0x0001	; ????
	...
     d7c:	00 01       	movw	r0, r0
     d7e:	01 00       	.word	0x0001	; ????
     d80:	00 00       	nop
     d82:	01 00       	.word	0x0001	; ????
	...
     d90:	00 01       	movw	r0, r0
     d92:	01 01       	movw	r0, r2
     d94:	01 01       	movw	r0, r2
     d96:	01 01       	movw	r0, r2
     d98:	01 01       	movw	r0, r2
	...
     daa:	00 00       	nop
     dac:	00 01       	movw	r0, r0
     dae:	01 01       	movw	r0, r2
     db0:	01 01       	movw	r0, r2
     db2:	01 01       	movw	r0, r2
     db4:	01 00       	.word	0x0001	; ????
     db6:	00 00       	nop
     db8:	00 00       	nop
     dba:	00 00       	nop
     dbc:	00 01       	movw	r0, r0
     dbe:	01 01       	movw	r0, r2
     dc0:	01 01       	movw	r0, r2
     dc2:	01 01       	movw	r0, r2
	...
     dcc:	00 01       	movw	r0, r0
     dce:	01 01       	movw	r0, r2
     dd0:	01 00       	.word	0x0001	; ????
     dd2:	01 01       	movw	r0, r2
	...
     de4:	01 01       	movw	r0, r2
     de6:	00 00       	nop
     de8:	00 00       	nop
     dea:	01 00       	.word	0x0001	; ????
	...
     df8:	01 01       	movw	r0, r2
     dfa:	01 01       	movw	r0, r2
     dfc:	01 01       	movw	r0, r2
     dfe:	01 00       	.word	0x0001	; ????
	...
     e10:	01 01       	movw	r0, r2
     e12:	01 01       	movw	r0, r2
     e14:	01 01       	movw	r0, r2
     e16:	01 00       	.word	0x0001	; ????
     e18:	00 00       	nop
     e1a:	00 00       	nop
     e1c:	01 01       	movw	r0, r2
     e1e:	00 00       	nop
     e20:	00 00       	nop
     e22:	01 01       	movw	r0, r2
     e24:	01 01       	movw	r0, r2
     e26:	00 00       	nop
     e28:	00 00       	nop
     e2a:	00 00       	nop
     e2c:	00 01       	movw	r0, r0
     e2e:	01 01       	movw	r0, r2
     e30:	01 01       	movw	r0, r2
     e32:	00 00       	nop
     e34:	00 00       	nop
     e36:	00 00       	nop
     e38:	01 01       	movw	r0, r2
     e3a:	01 01       	movw	r0, r2
	...
     e48:	00 00       	nop
     e4a:	00 01       	movw	r0, r0
     e4c:	01 00       	.word	0x0001	; ????
     e4e:	00 00       	nop
     e50:	00 01       	movw	r0, r0
     e52:	01 00       	.word	0x0001	; ????
	...
     e5c:	00 00       	nop
     e5e:	00 01       	movw	r0, r0
     e60:	01 01       	movw	r0, r2
	...
     e72:	00 01       	movw	r0, r0
     e74:	01 01       	movw	r0, r2
     e76:	01 01       	movw	r0, r2
     e78:	01 00       	.word	0x0001	; ????
	...
     e82:	00 00       	nop
     e84:	00 01       	movw	r0, r0
     e86:	00 01       	movw	r0, r0
     e88:	01 01       	movw	r0, r2
     e8a:	01 00       	.word	0x0001	; ????
     e8c:	00 00       	nop
     e8e:	00 00       	nop
     e90:	00 00       	nop
     e92:	01 01       	movw	r0, r2
     e94:	01 01       	movw	r0, r2
     e96:	01 01       	movw	r0, r2
     e98:	01 01       	movw	r0, r2
     e9a:	01 01       	movw	r0, r2
     e9c:	00 00       	nop
     e9e:	00 00       	nop
     ea0:	00 00       	nop
     ea2:	00 01       	movw	r0, r0
	...
     eb0:	00 00       	nop
     eb2:	00 01       	movw	r0, r0
     eb4:	00 00       	nop
     eb6:	00 00       	nop
     eb8:	00 01       	movw	r0, r0
     eba:	01 00       	.word	0x0001	; ????
	...
     ec4:	00 00       	nop
     ec6:	00 01       	movw	r0, r0
	...
     ed8:	01 01       	movw	r0, r2
     eda:	01 01       	movw	r0, r2
     edc:	01 01       	movw	r0, r2
     ede:	01 01       	movw	r0, r2
     ee0:	01 01       	movw	r0, r2
     ee2:	01 01       	movw	r0, r2
     ee4:	01 01       	movw	r0, r2
     ee6:	00 00       	nop
     ee8:	00 00       	nop
     eea:	00 00       	nop
     eec:	00 01       	movw	r0, r0
     eee:	01 00       	.word	0x0001	; ????
	...
     ef8:	00 01       	movw	r0, r0
     efa:	01 01       	movw	r0, r2
     efc:	00 01       	movw	r0, r0
     efe:	01 01       	movw	r0, r2
     f00:	01 01       	movw	r0, r2
     f02:	01 01       	movw	r0, r2
     f04:	01 00       	.word	0x0001	; ????
     f06:	00 00       	nop
     f08:	00 00       	nop
     f0a:	00 01       	movw	r0, r0
	...
     f18:	00 00       	nop
     f1a:	01 01       	movw	r0, r2
     f1c:	00 00       	nop
     f1e:	00 00       	nop
     f20:	00 01       	movw	r0, r0
     f22:	01 00       	.word	0x0001	; ????
	...
     f2c:	00 00       	nop
     f2e:	00 01       	movw	r0, r0
     f30:	01 00       	.word	0x0001	; ????
	...
     f3a:	00 01       	movw	r0, r0
     f3c:	01 01       	movw	r0, r2
     f3e:	01 01       	movw	r0, r2
     f40:	01 00       	.word	0x0001	; ????
     f42:	00 01       	movw	r0, r0
     f44:	01 01       	movw	r0, r2
     f46:	01 01       	movw	r0, r2
     f48:	01 01       	movw	r0, r2
     f4a:	01 01       	movw	r0, r2
     f4c:	01 01       	movw	r0, r2
     f4e:	01 00       	.word	0x0001	; ????
     f50:	00 00       	nop
     f52:	00 00       	nop
     f54:	00 01       	movw	r0, r0
	...
     f5e:	00 00       	nop
     f60:	01 01       	movw	r0, r2
     f62:	01 00       	.word	0x0001	; ????
     f64:	00 01       	movw	r0, r0
     f66:	01 01       	movw	r0, r2
     f68:	01 01       	movw	r0, r2
     f6a:	01 01       	movw	r0, r2
     f6c:	01 00       	.word	0x0001	; ????
     f6e:	00 00       	nop
     f70:	00 00       	nop
     f72:	00 01       	movw	r0, r0
	...
     f80:	00 00       	nop
     f82:	01 01       	movw	r0, r2
     f84:	00 00       	nop
     f86:	00 00       	nop
     f88:	00 01       	movw	r0, r0
     f8a:	01 00       	.word	0x0001	; ????
	...
     f98:	01 01       	movw	r0, r2
     f9a:	01 01       	movw	r0, r2
     f9c:	01 01       	movw	r0, r2
     f9e:	01 01       	movw	r0, r2
     fa0:	01 01       	movw	r0, r2
     fa2:	01 01       	movw	r0, r2
     fa4:	00 00       	nop
     fa6:	00 00       	nop
     fa8:	00 00       	nop
     faa:	01 01       	movw	r0, r2
     fac:	01 00       	.word	0x0001	; ????
     fae:	00 01       	movw	r0, r0
     fb0:	01 01       	movw	r0, r2
     fb2:	01 01       	movw	r0, r2
     fb4:	01 01       	movw	r0, r2
     fb6:	01 01       	movw	r0, r2
     fb8:	00 00       	nop
     fba:	00 00       	nop
     fbc:	00 01       	movw	r0, r0
	...
     fc6:	00 01       	movw	r0, r0
     fc8:	01 01       	movw	r0, r2
     fca:	01 01       	movw	r0, r2
     fcc:	01 01       	movw	r0, r2
     fce:	01 01       	movw	r0, r2
     fd0:	00 01       	movw	r0, r0
     fd2:	01 01       	movw	r0, r2
     fd4:	01 01       	movw	r0, r2
     fd6:	00 00       	nop
     fd8:	00 00       	nop
     fda:	00 01       	movw	r0, r0
	...
     fe8:	00 01       	movw	r0, r0
     fea:	01 00       	.word	0x0001	; ????
	...
    1000:	00 00       	nop
    1002:	01 01       	movw	r0, r2
    1004:	01 01       	movw	r0, r2
    1006:	01 00       	.word	0x0001	; ????
	...
    1010:	00 00       	nop
    1012:	01 01       	movw	r0, r2
    1014:	01 01       	movw	r0, r2
    1016:	00 01       	movw	r0, r0
    1018:	01 01       	movw	r0, r2
    101a:	01 01       	movw	r0, r2
    101c:	01 01       	movw	r0, r2
    101e:	01 01       	movw	r0, r2
    1020:	00 00       	nop
    1022:	00 00       	nop
    1024:	00 01       	movw	r0, r0
	...
    102e:	00 01       	movw	r0, r0
    1030:	01 01       	movw	r0, r2
    1032:	01 01       	movw	r0, r2
    1034:	01 01       	movw	r0, r2
    1036:	01 00       	.word	0x0001	; ????
    1038:	00 00       	nop
    103a:	01 01       	movw	r0, r2
    103c:	01 01       	movw	r0, r2
    103e:	00 00       	nop
    1040:	00 00       	nop
    1042:	01 01       	movw	r0, r2
	...
    1050:	00 01       	movw	r0, r0
	...
    106e:	01 01       	movw	r0, r2
	...
    1078:	00 01       	movw	r0, r0
    107a:	01 01       	movw	r0, r2
    107c:	01 01       	movw	r0, r2
    107e:	01 01       	movw	r0, r2
    1080:	01 01       	movw	r0, r2
    1082:	00 00       	nop
    1084:	01 01       	movw	r0, r2
    1086:	01 01       	movw	r0, r2
    1088:	01 00       	.word	0x0001	; ????
    108a:	00 00       	nop
    108c:	01 00       	.word	0x0001	; ????
	...
    1096:	00 01       	movw	r0, r0
    1098:	01 01       	movw	r0, r2
    109a:	01 01       	movw	r0, r2
    109c:	01 01       	movw	r0, r2
    109e:	01 00       	.word	0x0001	; ????
    10a0:	00 00       	nop
    10a2:	01 01       	movw	r0, r2
    10a4:	01 01       	movw	r0, r2
    10a6:	00 00       	nop
    10a8:	01 01       	movw	r0, r2
    10aa:	01 00       	.word	0x0001	; ????
	...
    10b8:	00 01       	movw	r0, r0
	...
    10d6:	00 00       	nop
    10d8:	01 01       	movw	r0, r2
    10da:	00 00       	nop
    10dc:	00 00       	nop
    10de:	00 00       	nop
    10e0:	00 01       	movw	r0, r0
    10e2:	01 01       	movw	r0, r2
    10e4:	01 01       	movw	r0, r2
    10e6:	01 01       	movw	r0, r2
    10e8:	01 01       	movw	r0, r2
    10ea:	00 00       	nop
    10ec:	01 01       	movw	r0, r2
    10ee:	01 01       	movw	r0, r2
    10f0:	01 00       	.word	0x0001	; ????
    10f2:	01 01       	movw	r0, r2
    10f4:	01 01       	movw	r0, r2
	...
    10fe:	01 01       	movw	r0, r2
    1100:	01 01       	movw	r0, r2
    1102:	01 00       	.word	0x0001	; ????
    1104:	01 01       	movw	r0, r2
    1106:	01 01       	movw	r0, r2
    1108:	01 01       	movw	r0, r2
    110a:	01 01       	movw	r0, r2
    110c:	01 01       	movw	r0, r2
    110e:	01 01       	movw	r0, r2
    1110:	01 01       	movw	r0, r2
	...
    111e:	00 00       	nop
    1120:	01 00       	.word	0x0001	; ????
	...
    1142:	01 01       	movw	r0, r2
    1144:	00 00       	nop
    1146:	00 00       	nop
    1148:	00 01       	movw	r0, r0
    114a:	01 01       	movw	r0, r2
    114c:	01 01       	movw	r0, r2
    114e:	00 01       	movw	r0, r0
    1150:	01 01       	movw	r0, r2
    1152:	01 01       	movw	r0, r2
    1154:	01 01       	movw	r0, r2
    1156:	01 01       	movw	r0, r2
    1158:	01 01       	movw	r0, r2
    115a:	01 00       	.word	0x0001	; ????
    115c:	01 01       	movw	r0, r2
    115e:	01 01       	movw	r0, r2
    1160:	01 00       	.word	0x0001	; ????
    1162:	00 00       	nop
    1164:	00 00       	nop
    1166:	01 01       	movw	r0, r2
    1168:	01 01       	movw	r0, r2
    116a:	01 01       	movw	r0, r2
    116c:	01 01       	movw	r0, r2
    116e:	01 01       	movw	r0, r2
    1170:	01 01       	movw	r0, r2
    1172:	01 01       	movw	r0, r2
    1174:	01 01       	movw	r0, r2
    1176:	01 00       	.word	0x0001	; ????
    1178:	00 01       	movw	r0, r0
	...
    1186:	00 00       	nop
    1188:	01 00       	.word	0x0001	; ????
	...
    11a2:	00 00       	nop
    11a4:	00 01       	movw	r0, r0
    11a6:	01 01       	movw	r0, r2
    11a8:	01 00       	.word	0x0001	; ????
    11aa:	00 00       	nop
    11ac:	01 01       	movw	r0, r2
    11ae:	01 00       	.word	0x0001	; ????
    11b0:	00 01       	movw	r0, r0
    11b2:	01 01       	movw	r0, r2
    11b4:	01 01       	movw	r0, r2
    11b6:	01 01       	movw	r0, r2
    11b8:	01 01       	movw	r0, r2
    11ba:	01 01       	movw	r0, r2
    11bc:	01 01       	movw	r0, r2
    11be:	01 01       	movw	r0, r2
    11c0:	01 00       	.word	0x0001	; ????
    11c2:	00 00       	nop
    11c4:	01 00       	.word	0x0001	; ????
    11c6:	00 01       	movw	r0, r0
    11c8:	01 01       	movw	r0, r2
    11ca:	01 01       	movw	r0, r2
    11cc:	01 01       	movw	r0, r2
    11ce:	01 01       	movw	r0, r2
    11d0:	01 01       	movw	r0, r2
    11d2:	01 01       	movw	r0, r2
    11d4:	01 01       	movw	r0, r2
    11d6:	01 01       	movw	r0, r2
    11d8:	01 00       	.word	0x0001	; ????
    11da:	00 00       	nop
    11dc:	00 00       	nop
    11de:	01 01       	movw	r0, r2
    11e0:	01 00       	.word	0x0001	; ????
	...
    11ee:	00 01       	movw	r0, r0
    11f0:	01 00       	.word	0x0001	; ????
	...
    120e:	00 01       	movw	r0, r0
    1210:	01 01       	movw	r0, r2
    1212:	01 00       	.word	0x0001	; ????
    1214:	00 00       	nop
    1216:	01 01       	movw	r0, r2
    1218:	01 01       	movw	r0, r2
    121a:	01 01       	movw	r0, r2
    121c:	01 01       	movw	r0, r2
    121e:	01 01       	movw	r0, r2
    1220:	01 01       	movw	r0, r2
    1222:	01 01       	movw	r0, r2
    1224:	01 00       	.word	0x0001	; ????
    1226:	00 00       	nop
    1228:	00 00       	nop
    122a:	00 01       	movw	r0, r0
    122c:	01 00       	.word	0x0001	; ????
	...
    1242:	00 00       	nop
    1244:	00 01       	movw	r0, r0
    1246:	01 00       	.word	0x0001	; ????
	...
    1254:	00 00       	nop
    1256:	00 01       	movw	r0, r0
	...
    1278:	00 00       	nop
    127a:	01 01       	movw	r0, r2
    127c:	01 01       	movw	r0, r2
    127e:	01 01       	movw	r0, r2
	...
    1290:	01 01       	movw	r0, r2
    1292:	01 01       	movw	r0, r2
	...
    12ac:	00 01       	movw	r0, r0
	...
    12be:	01 01       	movw	r0, r2
	...
    12e4:	00 00       	nop
    12e6:	01 01       	movw	r0, r2
    12e8:	01 01       	movw	r0, r2
    12ea:	01 01       	movw	r0, r2
    12ec:	01 01       	movw	r0, r2
    12ee:	01 01       	movw	r0, r2
    12f0:	01 01       	movw	r0, r2
    12f2:	01 01       	movw	r0, r2
    12f4:	01 01       	movw	r0, r2
    12f6:	01 01       	movw	r0, r2
    12f8:	01 01       	movw	r0, r2
	...
    1312:	00 00       	nop
    1314:	01 01       	movw	r0, r2
	...
    1326:	01 00       	.word	0x0001	; ????
	...
    1354:	01 01       	movw	r0, r2
    1356:	01 01       	movw	r0, r2
    1358:	01 01       	movw	r0, r2
    135a:	01 01       	movw	r0, r2
	...
    1378:	00 00       	nop
    137a:	00 01       	movw	r0, r0
    137c:	01 00       	.word	0x0001	; ????
	...
    138a:	00 00       	nop
    138c:	00 01       	movw	r0, r0
    138e:	01 00       	.word	0x0001	; ????
	...
    13c4:	00 01       	movw	r0, r0
    13c6:	01 00       	.word	0x0001	; ????
	...
    13e0:	00 01       	movw	r0, r0
    13e2:	01 01       	movw	r0, r2
	...
    13f4:	00 01       	movw	r0, r0
	...
    142a:	00 01       	movw	r0, r0
    142c:	01 01       	movw	r0, r2
	...
    1436:	01 01       	movw	r0, r2
	...
    1444:	00 00       	nop
    1446:	00 01       	movw	r0, r0
    1448:	01 01       	movw	r0, r2
	...
    145a:	00 00       	nop
    145c:	01 01       	movw	r0, r2
	...
    148e:	00 00       	nop
    1490:	00 01       	movw	r0, r0
    1492:	01 01       	movw	r0, r2
	...
    149c:	00 00       	nop
    149e:	00 01       	movw	r0, r0
    14a0:	01 01       	movw	r0, r2
    14a2:	01 00       	.word	0x0001	; ????
    14a4:	00 00       	nop
    14a6:	00 00       	nop
    14a8:	00 00       	nop
    14aa:	00 01       	movw	r0, r0
    14ac:	01 01       	movw	r0, r2
    14ae:	01 01       	movw	r0, r2
    14b0:	01 00       	.word	0x0001	; ????
	...
    14c2:	00 00       	nop
    14c4:	01 00       	.word	0x0001	; ????
	...
    14f6:	00 01       	movw	r0, r0
    14f8:	01 01       	movw	r0, r2
	...
    150a:	01 01       	movw	r0, r2
    150c:	01 01       	movw	r0, r2
    150e:	01 01       	movw	r0, r2
    1510:	01 01       	movw	r0, r2
    1512:	01 01       	movw	r0, r2
    1514:	01 01       	movw	r0, r2
    1516:	00 01       	movw	r0, r0
    1518:	01 00       	.word	0x0001	; ????
	...
    152a:	00 01       	movw	r0, r0
    152c:	01 00       	.word	0x0001	; ????
	...
    155a:	00 00       	nop
    155c:	01 01       	movw	r0, r2
    155e:	01 01       	movw	r0, r2
	...
    1574:	01 01       	movw	r0, r2
    1576:	01 00       	.word	0x0001	; ????
	...
    1580:	01 01       	movw	r0, r2
	...
    1592:	00 01       	movw	r0, r0
	...
    15c0:	00 00       	nop
    15c2:	01 01       	movw	r0, r2
    15c4:	01 00       	.word	0x0001	; ????
	...
    15da:	00 00       	nop
    15dc:	00 01       	movw	r0, r0
    15de:	01 00       	.word	0x0001	; ????
	...
    15e8:	00 01       	movw	r0, r0
    15ea:	01 00       	.word	0x0001	; ????
	...
    15f8:	00 00       	nop
    15fa:	01 01       	movw	r0, r2
	...
    1628:	00 01       	movw	r0, r0
    162a:	01 00       	.word	0x0001	; ????
	...
    1650:	00 00       	nop
    1652:	01 01       	movw	r0, r2
	...
    1660:	00 00       	nop
    1662:	01 00       	.word	0x0001	; ????
	...
    16b8:	00 00       	nop
    16ba:	00 01       	movw	r0, r0
	...
    16c8:	00 01       	movw	r0, r0
    16ca:	01 00       	.word	0x0001	; ????
	...
    1720:	00 00       	nop
    1722:	00 01       	movw	r0, r0
    1724:	01 00       	.word	0x0001	; ????
	...
    172e:	00 00       	nop
    1730:	00 01       	movw	r0, r0
	...
    178a:	00 00       	nop
    178c:	01 00       	.word	0x0001	; ????
	...
    1796:	00 00       	nop
    1798:	00 01       	movw	r0, r0
	...
    17f2:	00 00       	nop
    17f4:	01 01       	movw	r0, r2
	...
    17fe:	00 00       	nop
    1800:	01 01       	movw	r0, r2
	...
    185a:	00 00       	nop
    185c:	00 01       	movw	r0, r0
	...
    1866:	00 00       	nop
    1868:	01 01       	movw	r0, r2
	...
    18c2:	00 00       	nop
    18c4:	00 01       	movw	r0, r0
    18c6:	01 00       	.word	0x0001	; ????
	...
    18d0:	01 00       	.word	0x0001	; ????
	...
    192a:	00 00       	nop
    192c:	00 01       	movw	r0, r0
    192e:	01 00       	.word	0x0001	; ????
	...
    1938:	01 00       	.word	0x0001	; ????
	...
    1996:	01 00       	.word	0x0001	; ????
	...
    19a0:	01 00       	.word	0x0001	; ????
	...
    19c2:	00 00       	nop
    19c4:	01 01       	movw	r0, r2
    19c6:	01 01       	movw	r0, r2
    19c8:	01 01       	movw	r0, r2
    19ca:	01 01       	movw	r0, r2
    19cc:	01 01       	movw	r0, r2
    19ce:	01 00       	.word	0x0001	; ????
	...
    19fc:	00 01       	movw	r0, r0
    19fe:	01 00       	.word	0x0001	; ????
	...
    1a08:	01 00       	.word	0x0001	; ????
	...
    1a26:	00 00       	nop
    1a28:	00 01       	movw	r0, r0
    1a2a:	01 01       	movw	r0, r2
    1a2c:	01 01       	movw	r0, r2
    1a2e:	01 01       	movw	r0, r2
    1a30:	01 01       	movw	r0, r2
    1a32:	01 01       	movw	r0, r2
    1a34:	01 01       	movw	r0, r2
    1a36:	01 01       	movw	r0, r2
    1a38:	01 01       	movw	r0, r2
    1a3a:	01 01       	movw	r0, r2
	...
    1a60:	00 00       	nop
    1a62:	00 01       	movw	r0, r0
    1a64:	01 01       	movw	r0, r2
    1a66:	01 01       	movw	r0, r2
	...
    1a70:	01 01       	movw	r0, r2
	...
    1a8e:	00 00       	nop
    1a90:	01 01       	movw	r0, r2
    1a92:	01 00       	.word	0x0001	; ????
	...
    1aa0:	00 01       	movw	r0, r0
    1aa2:	01 01       	movw	r0, r2
    1aa4:	01 01       	movw	r0, r2
    1aa6:	01 01       	movw	r0, r2
    1aa8:	01 00       	.word	0x0001	; ????
	...
    1ac6:	00 00       	nop
    1ac8:	01 01       	movw	r0, r2
    1aca:	01 01       	movw	r0, r2
    1acc:	00 00       	nop
    1ace:	00 01       	movw	r0, r0
	...
    1ad8:	01 01       	movw	r0, r2
	...
    1af6:	00 00       	nop
    1af8:	01 00       	.word	0x0001	; ????
	...
    1b0e:	01 01       	movw	r0, r2
    1b10:	01 01       	movw	r0, r2
    1b12:	01 01       	movw	r0, r2
    1b14:	01 01       	movw	r0, r2
    1b16:	01 00       	.word	0x0001	; ????
	...
    1b2c:	01 01       	movw	r0, r2
    1b2e:	01 01       	movw	r0, r2
    1b30:	01 01       	movw	r0, r2
    1b32:	00 00       	nop
    1b34:	00 00       	nop
    1b36:	00 01       	movw	r0, r0
    1b38:	01 00       	.word	0x0001	; ????
    1b3a:	00 00       	nop
    1b3c:	00 00       	nop
    1b3e:	00 00       	nop
    1b40:	01 01       	movw	r0, r2
	...
    1b5e:	00 01       	movw	r0, r0
    1b60:	01 00       	.word	0x0001	; ????
	...
    1b7a:	00 01       	movw	r0, r0
    1b7c:	01 01       	movw	r0, r2
    1b7e:	01 01       	movw	r0, r2
    1b80:	01 01       	movw	r0, r2
    1b82:	01 01       	movw	r0, r2
    1b84:	01 01       	movw	r0, r2
    1b86:	01 00       	.word	0x0001	; ????
    1b88:	00 01       	movw	r0, r0
    1b8a:	01 00       	.word	0x0001	; ????
    1b8c:	00 01       	movw	r0, r0
    1b8e:	01 01       	movw	r0, r2
    1b90:	01 01       	movw	r0, r2
    1b92:	01 01       	movw	r0, r2
    1b94:	01 01       	movw	r0, r2
	...
    1b9e:	00 01       	movw	r0, r0
    1ba0:	01 00       	.word	0x0001	; ????
    1ba2:	00 00       	nop
    1ba4:	00 00       	nop
    1ba6:	00 00       	nop
    1ba8:	00 01       	movw	r0, r0
	...
    1bc6:	00 01       	movw	r0, r0
    1bc8:	01 00       	.word	0x0001	; ????
    1bca:	00 00       	nop
    1bcc:	01 01       	movw	r0, r2
    1bce:	01 01       	movw	r0, r2
    1bd0:	01 01       	movw	r0, r2
    1bd2:	01 01       	movw	r0, r2
    1bd4:	01 01       	movw	r0, r2
    1bd6:	01 01       	movw	r0, r2
    1bd8:	01 01       	movw	r0, r2
    1bda:	01 00       	.word	0x0001	; ????
	...
    1be8:	01 01       	movw	r0, r2
    1bea:	01 01       	movw	r0, r2
    1bec:	01 01       	movw	r0, r2
    1bee:	01 01       	movw	r0, r2
    1bf0:	01 01       	movw	r0, r2
    1bf2:	01 01       	movw	r0, r2
    1bf4:	01 01       	movw	r0, r2
    1bf6:	01 01       	movw	r0, r2
    1bf8:	01 00       	.word	0x0001	; ????
	...
    1c06:	01 01       	movw	r0, r2
	...
    1c10:	00 01       	movw	r0, r0
	...
    1c2e:	00 01       	movw	r0, r0
    1c30:	01 00       	.word	0x0001	; ????
    1c32:	00 00       	nop
    1c34:	01 01       	movw	r0, r2
    1c36:	01 01       	movw	r0, r2
    1c38:	00 00       	nop
    1c3a:	00 00       	nop
    1c3c:	00 00       	nop
    1c3e:	00 01       	movw	r0, r0
    1c40:	01 01       	movw	r0, r2
    1c42:	01 01       	movw	r0, r2
    1c44:	01 01       	movw	r0, r2
    1c46:	01 00       	.word	0x0001	; ????
	...
    1c6c:	00 01       	movw	r0, r0
    1c6e:	01 00       	.word	0x0001	; ????
	...
    1c78:	00 01       	movw	r0, r0
    1c7a:	01 00       	.word	0x0001	; ????
	...
    1c94:	00 00       	nop
    1c96:	00 01       	movw	r0, r0
    1c98:	01 00       	.word	0x0001	; ????
	...
    1caa:	00 00       	nop
    1cac:	01 01       	movw	r0, r2
    1cae:	01 01       	movw	r0, r2
    1cb0:	01 01       	movw	r0, r2
    1cb2:	01 01       	movw	r0, r2
	...
    1cd0:	00 01       	movw	r0, r0
    1cd2:	01 01       	movw	r0, r2
    1cd4:	01 01       	movw	r0, r2
	...
    1ce2:	01 00       	.word	0x0001	; ????
	...
    1cfc:	00 00       	nop
    1cfe:	00 01       	movw	r0, r0
    1d00:	01 00       	.word	0x0001	; ????
	...
    1d16:	00 00       	nop
    1d18:	00 01       	movw	r0, r0
    1d1a:	01 01       	movw	r0, r2
    1d1c:	01 01       	movw	r0, r2
    1d1e:	01 01       	movw	r0, r2
    1d20:	01 01       	movw	r0, r2
    1d22:	01 01       	movw	r0, r2
    1d24:	01 00       	.word	0x0001	; ????
    1d26:	01 00       	.word	0x0001	; ????
    1d28:	00 00       	nop
    1d2a:	00 00       	nop
    1d2c:	00 00       	nop
    1d2e:	01 01       	movw	r0, r2
    1d30:	01 01       	movw	r0, r2
    1d32:	01 01       	movw	r0, r2
    1d34:	01 01       	movw	r0, r2
    1d36:	01 01       	movw	r0, r2
    1d38:	01 01       	movw	r0, r2
    1d3a:	01 01       	movw	r0, r2
    1d3c:	01 00       	.word	0x0001	; ????
	...
    1d4a:	01 01       	movw	r0, r2
	...
    1d64:	00 00       	nop
    1d66:	00 01       	movw	r0, r0
    1d68:	01 00       	.word	0x0001	; ????
	...
    1d86:	00 01       	movw	r0, r0
    1d88:	01 01       	movw	r0, r2
    1d8a:	01 01       	movw	r0, r2
    1d8c:	01 01       	movw	r0, r2
    1d8e:	01 01       	movw	r0, r2
    1d90:	01 01       	movw	r0, r2
    1d92:	01 01       	movw	r0, r2
    1d94:	01 01       	movw	r0, r2
    1d96:	01 01       	movw	r0, r2
    1d98:	01 01       	movw	r0, r2
    1d9a:	01 01       	movw	r0, r2
    1d9c:	00 00       	nop
    1d9e:	00 00       	nop
    1da0:	00 00       	nop
    1da2:	00 01       	movw	r0, r0
    1da4:	01 00       	.word	0x0001	; ????
	...
    1db2:	00 01       	movw	r0, r0
	...
    1dc8:	00 00       	nop
    1dca:	01 01       	movw	r0, r2
    1dcc:	00 00       	nop
    1dce:	00 00       	nop
    1dd0:	01 01       	movw	r0, r2
    1dd2:	01 01       	movw	r0, r2
    1dd4:	01 01       	movw	r0, r2
    1dd6:	01 01       	movw	r0, r2
    1dd8:	01 01       	movw	r0, r2
    1dda:	01 00       	.word	0x0001	; ????
	...
    1e08:	00 00       	nop
    1e0a:	00 01       	movw	r0, r0
    1e0c:	01 00       	.word	0x0001	; ????
	...
    1e1a:	00 01       	movw	r0, r0
    1e1c:	01 00       	.word	0x0001	; ????
	...
    1e32:	01 01       	movw	r0, r2
	...
    1e3c:	00 00       	nop
    1e3e:	01 01       	movw	r0, r2
    1e40:	01 01       	movw	r0, r2
    1e42:	01 01       	movw	r0, r2
    1e44:	01 01       	movw	r0, r2
    1e46:	01 01       	movw	r0, r2
    1e48:	01 01       	movw	r0, r2
	...
    1e72:	00 01       	movw	r0, r0
    1e74:	01 00       	.word	0x0001	; ????
	...
    1e82:	00 00       	nop
    1e84:	01 01       	movw	r0, r2
	...
    1e9a:	00 01       	movw	r0, r0
	...
    1eac:	00 00       	nop
    1eae:	00 01       	movw	r0, r0
    1eb0:	01 01       	movw	r0, r2
    1eb2:	01 01       	movw	r0, r2
    1eb4:	01 01       	movw	r0, r2
    1eb6:	01 01       	movw	r0, r2
    1eb8:	01 01       	movw	r0, r2
	...
    1eda:	01 01       	movw	r0, r2
	...
    1eec:	00 01       	movw	r0, r0
    1eee:	01 00       	.word	0x0001	; ????
	...
    1f00:	00 00       	nop
    1f02:	00 01       	movw	r0, r0
    1f04:	01 00       	.word	0x0001	; ????
	...
    1f1a:	00 00       	nop
    1f1c:	00 01       	movw	r0, r0
    1f1e:	01 01       	movw	r0, r2
    1f20:	01 01       	movw	r0, r2
    1f22:	01 01       	movw	r0, r2
    1f24:	01 01       	movw	r0, r2
    1f26:	01 01       	movw	r0, r2
    1f28:	01 01       	movw	r0, r2
	...
    1f3e:	00 00       	nop
    1f40:	00 01       	movw	r0, r0
    1f42:	01 01       	movw	r0, r2
	...
    1f54:	00 00       	nop
    1f56:	01 00       	.word	0x0001	; ????
	...
    1f6c:	01 01       	movw	r0, r2
    1f6e:	01 00       	.word	0x0001	; ????
	...
    1f8c:	01 01       	movw	r0, r2
    1f8e:	01 01       	movw	r0, r2
    1f90:	01 01       	movw	r0, r2
    1f92:	01 01       	movw	r0, r2
    1f94:	01 01       	movw	r0, r2
    1f96:	01 01       	movw	r0, r2
    1f98:	01 01       	movw	r0, r2
    1f9a:	01 01       	movw	r0, r2
    1f9c:	01 01       	movw	r0, r2
    1f9e:	01 01       	movw	r0, r2
    1fa0:	01 01       	movw	r0, r2
    1fa2:	01 01       	movw	r0, r2
    1fa4:	01 01       	movw	r0, r2
    1fa6:	01 01       	movw	r0, r2
    1fa8:	01 01       	movw	r0, r2
	...
    1fbe:	00 01       	movw	r0, r0
    1fc0:	01 00       	.word	0x0001	; ????
	...
    1fd6:	01 01       	movw	r0, r2
    1fd8:	01 01       	movw	r0, r2
	...
    2002:	00 01       	movw	r0, r0
    2004:	01 00       	.word	0x0001	; ????
    2006:	00 00       	nop
    2008:	00 01       	movw	r0, r0
    200a:	00 01       	movw	r0, r0
    200c:	01 01       	movw	r0, r2
    200e:	01 00       	.word	0x0001	; ????
	...
    2028:	01 01       	movw	r0, r2
	...
    2072:	01 01       	movw	r0, r2
	...
    2090:	00 01       	movw	r0, r0
    2092:	01 01       	movw	r0, r2
	...
    20d8:	00 01       	movw	r0, r0
    20da:	01 00       	.word	0x0001	; ????
	...
    20f8:	00 00       	nop
    20fa:	00 01       	movw	r0, r0
    20fc:	01 01       	movw	r0, r2
	...
    213e:	00 01       	movw	r0, r0
    2140:	01 00       	.word	0x0001	; ????
	...
    2162:	00 00       	nop
    2164:	00 01       	movw	r0, r0
    2166:	01 01       	movw	r0, r2
	...
    21a4:	00 01       	movw	r0, r0
    21a6:	01 01       	movw	r0, r2
	...
    21cc:	00 00       	nop
    21ce:	00 01       	movw	r0, r0
    21d0:	01 01       	movw	r0, r2
    21d2:	01 00       	.word	0x0001	; ????
	...
    2208:	00 00       	nop
    220a:	00 01       	movw	r0, r0
    220c:	01 01       	movw	r0, r2
	...
    223a:	01 01       	movw	r0, r2
    223c:	01 01       	movw	r0, r2
	...
    226e:	00 00       	nop
    2270:	00 01       	movw	r0, r0
    2272:	01 01       	movw	r0, r2
    2274:	01 00       	.word	0x0001	; ????
	...
    22a2:	00 00       	nop
    22a4:	00 01       	movw	r0, r0
    22a6:	01 01       	movw	r0, r2
    22a8:	01 01       	movw	r0, r2
    22aa:	01 01       	movw	r0, r2
	...
    22d4:	00 00       	nop
    22d6:	01 01       	movw	r0, r2
    22d8:	01 01       	movw	r0, r2
    22da:	01 00       	.word	0x0001	; ????
	...
    2310:	00 00       	nop
    2312:	01 01       	movw	r0, r2
    2314:	01 01       	movw	r0, r2
    2316:	01 01       	movw	r0, r2
    2318:	01 01       	movw	r0, r2
	...
    233a:	01 01       	movw	r0, r2
    233c:	01 01       	movw	r0, r2
    233e:	01 00       	.word	0x0001	; ????
	...
    237c:	00 00       	nop
    237e:	00 01       	movw	r0, r0
    2380:	01 01       	movw	r0, r2
    2382:	01 01       	movw	r0, r2
    2384:	01 01       	movw	r0, r2
    2386:	01 01       	movw	r0, r2
    2388:	01 01       	movw	r0, r2
    238a:	01 00       	.word	0x0001	; ????
	...
    2398:	00 00       	nop
    239a:	00 01       	movw	r0, r0
    239c:	01 01       	movw	r0, r2
    239e:	01 01       	movw	r0, r2
    23a0:	01 01       	movw	r0, r2
    23a2:	01 01       	movw	r0, r2
	...
    23ec:	00 00       	nop
    23ee:	00 01       	movw	r0, r0
    23f0:	01 01       	movw	r0, r2
    23f2:	01 01       	movw	r0, r2
    23f4:	01 01       	movw	r0, r2
    23f6:	01 01       	movw	r0, r2
    23f8:	01 01       	movw	r0, r2
    23fa:	01 01       	movw	r0, r2
    23fc:	01 01       	movw	r0, r2
    23fe:	01 01       	movw	r0, r2
    2400:	01 01       	movw	r0, r2
    2402:	01 01       	movw	r0, r2
    2404:	01 01       	movw	r0, r2
    2406:	01 00       	.word	0x0001	; ????
	...

00002770 <__ctors_end>:
    2770:	11 24       	eor	r1, r1
    2772:	1f be       	out	0x3f, r1	; 63
    2774:	cf ef       	ldi	r28, 0xFF	; 255
    2776:	d4 e0       	ldi	r29, 0x04	; 4
    2778:	de bf       	out	0x3e, r29	; 62
    277a:	cd bf       	out	0x3d, r28	; 61

0000277c <__do_copy_data>:
    277c:	11 e0       	ldi	r17, 0x01	; 1
    277e:	a0 e0       	ldi	r26, 0x00	; 0
    2780:	b1 e0       	ldi	r27, 0x01	; 1
    2782:	e2 e7       	ldi	r30, 0x72	; 114
    2784:	f7 e3       	ldi	r31, 0x37	; 55
    2786:	02 c0       	rjmp	.+4      	; 0x278c <__do_copy_data+0x10>
    2788:	05 90       	lpm	r0, Z+
    278a:	0d 92       	st	X+, r0
    278c:	ae 3b       	cpi	r26, 0xBE	; 190
    278e:	b1 07       	cpc	r27, r17
    2790:	d9 f7       	brne	.-10     	; 0x2788 <__do_copy_data+0xc>

00002792 <__do_clear_bss>:
    2792:	21 e0       	ldi	r18, 0x01	; 1
    2794:	ae eb       	ldi	r26, 0xBE	; 190
    2796:	b1 e0       	ldi	r27, 0x01	; 1
    2798:	01 c0       	rjmp	.+2      	; 0x279c <.do_clear_bss_start>

0000279a <.do_clear_bss_loop>:
    279a:	1d 92       	st	X+, r1

0000279c <.do_clear_bss_start>:
    279c:	a8 3c       	cpi	r26, 0xC8	; 200
    279e:	b2 07       	cpc	r27, r18
    27a0:	e1 f7       	brne	.-8      	; 0x279a <.do_clear_bss_loop>
    27a2:	0e 94 3e 14 	call	0x287c	; 0x287c <main>
    27a6:	0c 94 b7 1b 	jmp	0x376e	; 0x376e <_exit>

000027aa <__bad_interrupt>:
    27aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000027ae <calc_pos>:
	atmelMap->ADC[1] = val;
	x_offset = atmelMap->ADC[1];
	y_offset = atmelMap->ADC[1];
}

void calc_pos(joyVal* values, uint8_t x, uint8_t y){
    27ae:	fc 01       	movw	r30, r24
	if(x>x_offset){
    27b0:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <x_offset>
    27b4:	26 17       	cp	r18, r22
    27b6:	90 f4       	brcc	.+36     	; 0x27dc <calc_pos+0x2e>
		values->x_val = (x-x_offset)*(100)/(255-x_offset);
    27b8:	30 e0       	ldi	r19, 0x00	; 0
    27ba:	70 e0       	ldi	r23, 0x00	; 0
    27bc:	62 1b       	sub	r22, r18
    27be:	73 0b       	sbc	r23, r19
    27c0:	54 e6       	ldi	r21, 0x64	; 100
    27c2:	56 9f       	mul	r21, r22
    27c4:	c0 01       	movw	r24, r0
    27c6:	57 9f       	mul	r21, r23
    27c8:	90 0d       	add	r25, r0
    27ca:	11 24       	eor	r1, r1
    27cc:	6f ef       	ldi	r22, 0xFF	; 255
    27ce:	70 e0       	ldi	r23, 0x00	; 0
    27d0:	62 1b       	sub	r22, r18
    27d2:	73 0b       	sbc	r23, r19
    27d4:	0e 94 2c 16 	call	0x2c58	; 0x2c58 <__divmodhi4>
    27d8:	60 83       	st	Z, r22
    27da:	12 c0       	rjmp	.+36     	; 0x2800 <calc_pos+0x52>
		}else if(x<x_offset){
    27dc:	62 17       	cp	r22, r18
    27de:	80 f4       	brcc	.+32     	; 0x2800 <calc_pos+0x52>
		values->x_val = -(x_offset-x)*(100)/x_offset;
    27e0:	a2 2f       	mov	r26, r18
    27e2:	b0 e0       	ldi	r27, 0x00	; 0
    27e4:	26 2f       	mov	r18, r22
    27e6:	30 e0       	ldi	r19, 0x00	; 0
    27e8:	2a 1b       	sub	r18, r26
    27ea:	3b 0b       	sbc	r19, r27
    27ec:	54 e6       	ldi	r21, 0x64	; 100
    27ee:	52 9f       	mul	r21, r18
    27f0:	c0 01       	movw	r24, r0
    27f2:	53 9f       	mul	r21, r19
    27f4:	90 0d       	add	r25, r0
    27f6:	11 24       	eor	r1, r1
    27f8:	bd 01       	movw	r22, r26
    27fa:	0e 94 2c 16 	call	0x2c58	; 0x2c58 <__divmodhi4>
    27fe:	60 83       	st	Z, r22
	}
	if(y>y_offset){
    2800:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <y_offset>
    2804:	64 17       	cp	r22, r20
    2806:	98 f4       	brcc	.+38     	; 0x282e <calc_pos+0x80>
		values->y_val = (y-y_offset)*(100)/(255-y_offset);
    2808:	26 2f       	mov	r18, r22
    280a:	30 e0       	ldi	r19, 0x00	; 0
    280c:	50 e0       	ldi	r21, 0x00	; 0
    280e:	42 1b       	sub	r20, r18
    2810:	53 0b       	sbc	r21, r19
    2812:	64 e6       	ldi	r22, 0x64	; 100
    2814:	64 9f       	mul	r22, r20
    2816:	c0 01       	movw	r24, r0
    2818:	65 9f       	mul	r22, r21
    281a:	90 0d       	add	r25, r0
    281c:	11 24       	eor	r1, r1
    281e:	6f ef       	ldi	r22, 0xFF	; 255
    2820:	70 e0       	ldi	r23, 0x00	; 0
    2822:	62 1b       	sub	r22, r18
    2824:	73 0b       	sbc	r23, r19
    2826:	0e 94 2c 16 	call	0x2c58	; 0x2c58 <__divmodhi4>
    282a:	61 83       	std	Z+1, r22	; 0x01
    282c:	08 95       	ret
		}else if(y<y_offset){
    282e:	46 17       	cp	r20, r22
    2830:	68 f4       	brcc	.+26     	; 0x284c <calc_pos+0x9e>
		values->y_val = -(y_offset-y)*(100)/y_offset;
    2832:	70 e0       	ldi	r23, 0x00	; 0
    2834:	50 e0       	ldi	r21, 0x00	; 0
    2836:	46 1b       	sub	r20, r22
    2838:	57 0b       	sbc	r21, r23
    283a:	24 e6       	ldi	r18, 0x64	; 100
    283c:	24 9f       	mul	r18, r20
    283e:	c0 01       	movw	r24, r0
    2840:	25 9f       	mul	r18, r21
    2842:	90 0d       	add	r25, r0
    2844:	11 24       	eor	r1, r1
    2846:	0e 94 2c 16 	call	0x2c58	; 0x2c58 <__divmodhi4>
    284a:	61 83       	std	Z+1, r22	; 0x01
    284c:	08 95       	ret

0000284e <calc_pos_slider>:
	}
}
void calc_pos_slider(sliderVal* values, uint8_t left, uint8_t right){
    284e:	cf 93       	push	r28
    2850:	df 93       	push	r29
    2852:	fc 01       	movw	r30, r24
	values->l_val = left*100/255;
    2854:	24 e6       	ldi	r18, 0x64	; 100
    2856:	26 9f       	mul	r18, r22
    2858:	c0 01       	movw	r24, r0
    285a:	11 24       	eor	r1, r1
    285c:	cf ef       	ldi	r28, 0xFF	; 255
    285e:	d0 e0       	ldi	r29, 0x00	; 0
    2860:	be 01       	movw	r22, r28
    2862:	0e 94 2c 16 	call	0x2c58	; 0x2c58 <__divmodhi4>
    2866:	60 83       	st	Z, r22
	values->r_val = right*100/255;
    2868:	24 9f       	mul	r18, r20
    286a:	c0 01       	movw	r24, r0
    286c:	11 24       	eor	r1, r1
    286e:	be 01       	movw	r22, r28
    2870:	0e 94 2c 16 	call	0x2c58	; 0x2c58 <__divmodhi4>
    2874:	61 83       	std	Z+1, r22	; 0x01
    2876:	df 91       	pop	r29
    2878:	cf 91       	pop	r28
    287a:	08 95       	ret

0000287c <main>:
	PORTE &= ~(1<<PE1); // set ALE low (valid addr)
}



int main(void){
    287c:	cf 93       	push	r28
    287e:	df 93       	push	r29
    2880:	00 d0       	rcall	.+0      	; 0x2882 <main+0x6>
    2882:	00 d0       	rcall	.+0      	; 0x2884 <main+0x8>
    2884:	cd b7       	in	r28, 0x3d	; 61
    2886:	de b7       	in	r29, 0x3e	; 62
	
	
	joyVal joystick;
	sliderVal slider;
	
	volatile amap* atmelMap = (amap*) BASE;
    2888:	e0 90 0c 01 	lds	r14, 0x010C	; 0x80010c <BASE>
    288c:	f0 90 0d 01 	lds	r15, 0x010D	; 0x80010d <BASE+0x1>
	
	MCUCR |= (1<<SRE);
    2890:	85 b7       	in	r24, 0x35	; 53
    2892:	80 68       	ori	r24, 0x80	; 128
    2894:	85 bf       	out	0x35, r24	; 53
	
	
	//DDRC = 0xFF;
	//PORTC = 0x00;
	
	SFIOR &= ~(1<<XMM0);
    2896:	80 b7       	in	r24, 0x30	; 48
    2898:	87 7f       	andi	r24, 0xF7	; 247
    289a:	80 bf       	out	0x30, r24	; 48
	SFIOR &= ~(1<<XMM1);
    289c:	80 b7       	in	r24, 0x30	; 48
    289e:	8f 7e       	andi	r24, 0xEF	; 239
    28a0:	80 bf       	out	0x30, r24	; 48
	SFIOR |= (1<<XMM2);
    28a2:	80 b7       	in	r24, 0x30	; 48
    28a4:	80 62       	ori	r24, 0x20	; 32
    28a6:	80 bf       	out	0x30, r24	; 48
	
	DDRA |= 0x18;
    28a8:	8a b3       	in	r24, 0x1a	; 26
    28aa:	88 61       	ori	r24, 0x18	; 24
    28ac:	8a bb       	out	0x1a, r24	; 26
	TCCR2 |= (1<<WGM20);	
	TCCR2 |= (1<<COM21);
	TCCR2 |= (1<<COM20);
	*/

	USART_Init ( MYUBRR );
    28ae:	8f e1       	ldi	r24, 0x1F	; 31
    28b0:	90 e0       	ldi	r25, 0x00	; 0
    28b2:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <USART_Init>
	SRAM_test();
    28b6:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <SRAM_test>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    28ba:	87 ea       	ldi	r24, 0xA7	; 167
    28bc:	91 e6       	ldi	r25, 0x61	; 97
    28be:	01 97       	sbiw	r24, 0x01	; 1
    28c0:	f1 f7       	brne	.-4      	; 0x28be <main+0x42>
    28c2:	00 c0       	rjmp	.+0      	; 0x28c4 <main+0x48>
    28c4:	00 00       	nop
	
	_delay_ms(100);
	
	oled_init(atmelMap);
    28c6:	c7 01       	movw	r24, r14
    28c8:	0e 94 c5 14 	call	0x298a	; 0x298a <oled_init>
	clear_oled(atmelMap);
    28cc:	c7 01       	movw	r24, r14
    28ce:	0e 94 01 15 	call	0x2a02	; 0x2a02 <clear_oled>
	go_to_line(atmelMap,7);
    28d2:	67 e0       	ldi	r22, 0x07	; 7
    28d4:	c7 01       	movw	r24, r14
    28d6:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <go_to_line>
	//oled_write_string("Gorbatsjov", 4);
	character_printer(atmelMap, pepe3, 104, 48);
    28da:	20 e3       	ldi	r18, 0x30	; 48
    28dc:	30 e0       	ldi	r19, 0x00	; 0
    28de:	48 e6       	ldi	r20, 0x68	; 104
    28e0:	50 e0       	ldi	r21, 0x00	; 0
    28e2:	60 e7       	ldi	r22, 0x70	; 112
    28e4:	70 e0       	ldi	r23, 0x00	; 0
    28e6:	c7 01       	movw	r24, r14
    28e8:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <character_printer>
    28ec:	0c e5       	ldi	r16, 0x5C	; 92
    28ee:	10 e0       	ldi	r17, 0x00	; 0
		
		_delay_ms(20);
		
	}*/
	for(int i = 0; i < 92; i++){
		printf("\n");
    28f0:	8a e0       	ldi	r24, 0x0A	; 10
    28f2:	90 e0       	ldi	r25, 0x00	; 0
    28f4:	0e 94 11 17 	call	0x2e22	; 0x2e22 <putchar>
    28f8:	01 50       	subi	r16, 0x01	; 1
    28fa:	11 09       	sbc	r17, r1
		}
		
		_delay_ms(20);
		
	}*/
	for(int i = 0; i < 92; i++){
    28fc:	c9 f7       	brne	.-14     	; 0x28f0 <main+0x74>
		printf("\n");
	}
	while(1){
		
		uint8_t val = 1;
		atmelMap->ADC[1] = 0x04; 
    28fe:	87 01       	movw	r16, r14
    2900:	0f 5f       	subi	r16, 0xFF	; 255
    2902:	1b 4f       	sbci	r17, 0xFB	; 251
    2904:	68 94       	set
    2906:	bb 24       	eor	r11, r11
    2908:	b2 f8       	bld	r11, 2
		
		
		//get_adc_data(atmelMap, &joystick, &slider);
		calc_pos(&joystick,valx,valy);
		calc_pos_slider(&slider,vall,valr);
		printf("\r J_x: %4d, J_y: %4d, Slider 1: %3d, Slider 2: %3d |||| %3d,%3d",joystick.x_val,joystick.y_val,slider.l_val,slider.r_val,pin4,pin5);
    290a:	0f 2e       	mov	r0, r31
    290c:	fe e0       	ldi	r31, 0x0E	; 14
    290e:	cf 2e       	mov	r12, r31
    2910:	f1 e0       	ldi	r31, 0x01	; 1
    2912:	df 2e       	mov	r13, r31
    2914:	f0 2d       	mov	r31, r0
		printf("\n");
	}
	while(1){
		
		uint8_t val = 1;
		atmelMap->ADC[1] = 0x04; 
    2916:	f8 01       	movw	r30, r16
    2918:	b0 82       	st	Z, r11
		uint8_t valx = atmelMap->ADC[1];
    291a:	60 81       	ld	r22, Z
		uint8_t valy = atmelMap->ADC[1];
    291c:	40 81       	ld	r20, Z
		uint8_t vall = atmelMap->ADC[1];
    291e:	a0 80       	ld	r10, Z
		uint8_t valr = atmelMap->ADC[1];
    2920:	90 80       	ld	r9, Z
		
		uint8_t pin4 = PIND & (1<< PIND4);
    2922:	f0 b2       	in	r15, 0x10	; 16
		uint8_t pin5 = PIND & (1<< PIND5);
    2924:	e0 b2       	in	r14, 0x10	; 16
		
		
		//get_adc_data(atmelMap, &joystick, &slider);
		calc_pos(&joystick,valx,valy);
    2926:	50 e0       	ldi	r21, 0x00	; 0
    2928:	70 e0       	ldi	r23, 0x00	; 0
    292a:	ce 01       	movw	r24, r28
    292c:	01 96       	adiw	r24, 0x01	; 1
    292e:	0e 94 d7 13 	call	0x27ae	; 0x27ae <calc_pos>
		calc_pos_slider(&slider,vall,valr);
    2932:	49 2d       	mov	r20, r9
    2934:	6a 2d       	mov	r22, r10
    2936:	ce 01       	movw	r24, r28
    2938:	03 96       	adiw	r24, 0x03	; 3
    293a:	0e 94 27 14 	call	0x284e	; 0x284e <calc_pos_slider>
		printf("\r J_x: %4d, J_y: %4d, Slider 1: %3d, Slider 2: %3d |||| %3d,%3d",joystick.x_val,joystick.y_val,slider.l_val,slider.r_val,pin4,pin5);
    293e:	8e 2d       	mov	r24, r14
    2940:	80 72       	andi	r24, 0x20	; 32
    2942:	1f 92       	push	r1
    2944:	8f 93       	push	r24
    2946:	8f 2d       	mov	r24, r15
    2948:	80 71       	andi	r24, 0x10	; 16
    294a:	1f 92       	push	r1
    294c:	8f 93       	push	r24
    294e:	8c 81       	ldd	r24, Y+4	; 0x04
    2950:	1f 92       	push	r1
    2952:	8f 93       	push	r24
    2954:	8b 81       	ldd	r24, Y+3	; 0x03
    2956:	1f 92       	push	r1
    2958:	8f 93       	push	r24
    295a:	8a 81       	ldd	r24, Y+2	; 0x02
    295c:	28 2f       	mov	r18, r24
    295e:	08 2e       	mov	r0, r24
    2960:	00 0c       	add	r0, r0
    2962:	33 0b       	sbc	r19, r19
    2964:	3f 93       	push	r19
    2966:	8f 93       	push	r24
    2968:	89 81       	ldd	r24, Y+1	; 0x01
    296a:	28 2f       	mov	r18, r24
    296c:	08 2e       	mov	r0, r24
    296e:	00 0c       	add	r0, r0
    2970:	33 0b       	sbc	r19, r19
    2972:	3f 93       	push	r19
    2974:	8f 93       	push	r24
    2976:	df 92       	push	r13
    2978:	cf 92       	push	r12
    297a:	0e 94 fb 16 	call	0x2df6	; 0x2df6 <printf>
    297e:	0f b6       	in	r0, 0x3f	; 63
    2980:	f8 94       	cli
    2982:	de bf       	out	0x3e, r29	; 62
    2984:	0f be       	out	0x3f, r0	; 63
    2986:	cd bf       	out	0x3d, r28	; 61
    2988:	c6 cf       	rjmp	.-116    	; 0x2916 <main+0x9a>

0000298a <oled_init>:
	
	for (int i=0; i < 8; i++) {
		oled_write_data(pgm_read_byte(&(font8[character][i])));
	}
	
}
    298a:	e0 e0       	ldi	r30, 0x00	; 0
    298c:	f0 e1       	ldi	r31, 0x10	; 16
    298e:	8e ea       	ldi	r24, 0xAE	; 174
    2990:	80 83       	st	Z, r24
    2992:	81 ea       	ldi	r24, 0xA1	; 161
    2994:	80 83       	st	Z, r24
    2996:	8a ed       	ldi	r24, 0xDA	; 218
    2998:	80 83       	st	Z, r24
    299a:	82 e1       	ldi	r24, 0x12	; 18
    299c:	80 83       	st	Z, r24
    299e:	88 ec       	ldi	r24, 0xC8	; 200
    29a0:	80 83       	st	Z, r24
    29a2:	88 ea       	ldi	r24, 0xA8	; 168
    29a4:	80 83       	st	Z, r24
    29a6:	8f e3       	ldi	r24, 0x3F	; 63
    29a8:	80 83       	st	Z, r24
    29aa:	85 ed       	ldi	r24, 0xD5	; 213
    29ac:	80 83       	st	Z, r24
    29ae:	80 e8       	ldi	r24, 0x80	; 128
    29b0:	80 83       	st	Z, r24
    29b2:	81 e8       	ldi	r24, 0x81	; 129
    29b4:	80 83       	st	Z, r24
    29b6:	80 e5       	ldi	r24, 0x50	; 80
    29b8:	80 83       	st	Z, r24
    29ba:	89 ed       	ldi	r24, 0xD9	; 217
    29bc:	80 83       	st	Z, r24
    29be:	81 e2       	ldi	r24, 0x21	; 33
    29c0:	80 83       	st	Z, r24
    29c2:	80 e2       	ldi	r24, 0x20	; 32
    29c4:	80 83       	st	Z, r24
    29c6:	82 e0       	ldi	r24, 0x02	; 2
    29c8:	80 83       	st	Z, r24
    29ca:	8b ed       	ldi	r24, 0xDB	; 219
    29cc:	80 83       	st	Z, r24
    29ce:	80 e3       	ldi	r24, 0x30	; 48
    29d0:	80 83       	st	Z, r24
    29d2:	8d ea       	ldi	r24, 0xAD	; 173
    29d4:	80 83       	st	Z, r24
    29d6:	10 82       	st	Z, r1
    29d8:	84 ea       	ldi	r24, 0xA4	; 164
    29da:	80 83       	st	Z, r24
    29dc:	86 ea       	ldi	r24, 0xA6	; 166
    29de:	80 83       	st	Z, r24
    29e0:	8f ea       	ldi	r24, 0xAF	; 175
    29e2:	80 83       	st	Z, r24
    29e4:	08 95       	ret

000029e6 <go_to_line>:
    29e6:	60 55       	subi	r22, 0x50	; 80
    29e8:	60 93 00 10 	sts	0x1000, r22	; 0x801000 <__bss_end+0xe38>
    29ec:	08 95       	ret

000029ee <go_to_column>:
    29ee:	86 2f       	mov	r24, r22
    29f0:	8f 70       	andi	r24, 0x0F	; 15
    29f2:	e0 e0       	ldi	r30, 0x00	; 0
    29f4:	f0 e1       	ldi	r31, 0x10	; 16
    29f6:	80 83       	st	Z, r24
    29f8:	62 95       	swap	r22
    29fa:	6f 70       	andi	r22, 0x0F	; 15
    29fc:	60 5f       	subi	r22, 0xF0	; 240
    29fe:	60 83       	st	Z, r22
    2a00:	08 95       	ret

00002a02 <clear_oled>:
    2a02:	cf 92       	push	r12
    2a04:	df 92       	push	r13
    2a06:	ef 92       	push	r14
    2a08:	ff 92       	push	r15
    2a0a:	1f 93       	push	r17
    2a0c:	cf 93       	push	r28
    2a0e:	df 93       	push	r29
    2a10:	6c 01       	movw	r12, r24
    2a12:	10 eb       	ldi	r17, 0xB0	; 176
    2a14:	e1 2c       	mov	r14, r1
    2a16:	68 94       	set
    2a18:	ff 24       	eor	r15, r15
    2a1a:	f4 f8       	bld	r15, 4
    2a1c:	c0 e0       	ldi	r28, 0x00	; 0
    2a1e:	d2 e1       	ldi	r29, 0x12	; 18
    2a20:	f7 01       	movw	r30, r14
    2a22:	10 83       	st	Z, r17
    2a24:	60 e0       	ldi	r22, 0x00	; 0
    2a26:	c6 01       	movw	r24, r12
    2a28:	0e 94 f7 14 	call	0x29ee	; 0x29ee <go_to_column>
    2a2c:	80 e8       	ldi	r24, 0x80	; 128
    2a2e:	90 e0       	ldi	r25, 0x00	; 0
    2a30:	18 82       	st	Y, r1
    2a32:	01 97       	sbiw	r24, 0x01	; 1
    2a34:	e9 f7       	brne	.-6      	; 0x2a30 <clear_oled+0x2e>
    2a36:	1f 5f       	subi	r17, 0xFF	; 255
    2a38:	18 3b       	cpi	r17, 0xB8	; 184
    2a3a:	91 f7       	brne	.-28     	; 0x2a20 <clear_oled+0x1e>
    2a3c:	df 91       	pop	r29
    2a3e:	cf 91       	pop	r28
    2a40:	1f 91       	pop	r17
    2a42:	ff 90       	pop	r15
    2a44:	ef 90       	pop	r14
    2a46:	df 90       	pop	r13
    2a48:	cf 90       	pop	r12
    2a4a:	08 95       	ret

00002a4c <character_printer>:

//warning: array must have percieved height and width divisible by 8
void character_printer(amap* atmelMap, uint8_t arr[], int width, int height){
    2a4c:	2f 92       	push	r2
    2a4e:	3f 92       	push	r3
    2a50:	4f 92       	push	r4
    2a52:	5f 92       	push	r5
    2a54:	6f 92       	push	r6
    2a56:	7f 92       	push	r7
    2a58:	8f 92       	push	r8
    2a5a:	9f 92       	push	r9
    2a5c:	af 92       	push	r10
    2a5e:	bf 92       	push	r11
    2a60:	cf 92       	push	r12
    2a62:	df 92       	push	r13
    2a64:	ef 92       	push	r14
    2a66:	ff 92       	push	r15
    2a68:	0f 93       	push	r16
    2a6a:	1f 93       	push	r17
    2a6c:	cf 93       	push	r28
    2a6e:	df 93       	push	r29
    2a70:	cd b7       	in	r28, 0x3d	; 61
    2a72:	de b7       	in	r29, 0x3e	; 62
    2a74:	28 97       	sbiw	r28, 0x08	; 8
    2a76:	0f b6       	in	r0, 0x3f	; 63
    2a78:	f8 94       	cli
    2a7a:	de bf       	out	0x3e, r29	; 62
    2a7c:	0f be       	out	0x3f, r0	; 63
    2a7e:	cd bf       	out	0x3d, r28	; 61
    2a80:	9a 83       	std	Y+2, r25	; 0x02
    2a82:	89 83       	std	Y+1, r24	; 0x01
    2a84:	4b 01       	movw	r8, r22
    2a86:	6a 01       	movw	r12, r20
	//for(int p = 0; p < 88; p++){
		for (int line = 0; line < height/8; line++){
    2a88:	33 23       	and	r19, r19
    2a8a:	14 f4       	brge	.+4      	; 0x2a90 <character_printer+0x44>
    2a8c:	29 5f       	subi	r18, 0xF9	; 249
    2a8e:	3f 4f       	sbci	r19, 0xFF	; 255
    2a90:	c9 01       	movw	r24, r18
    2a92:	95 95       	asr	r25
    2a94:	87 95       	ror	r24
    2a96:	95 95       	asr	r25
    2a98:	87 95       	ror	r24
    2a9a:	95 95       	asr	r25
    2a9c:	87 95       	ror	r24
    2a9e:	9c 83       	std	Y+4, r25	; 0x04
    2aa0:	8b 83       	std	Y+3, r24	; 0x03
    2aa2:	18 16       	cp	r1, r24
    2aa4:	19 06       	cpc	r1, r25
    2aa6:	0c f0       	brlt	.+2      	; 0x2aaa <character_printer+0x5e>
    2aa8:	5a c0       	rjmp	.+180    	; 0x2b5e <character_printer+0x112>
    2aaa:	f6 01       	movw	r30, r12
    2aac:	ee 0f       	add	r30, r30
    2aae:	ff 1f       	adc	r31, r31
    2ab0:	ee 0f       	add	r30, r30
    2ab2:	ff 1f       	adc	r31, r31
    2ab4:	ee 0f       	add	r30, r30
    2ab6:	ff 1f       	adc	r31, r31
    2ab8:	fe 83       	std	Y+6, r31	; 0x06
    2aba:	ed 83       	std	Y+5, r30	; 0x05
    2abc:	e1 2c       	mov	r14, r1
    2abe:	f1 2c       	mov	r15, r1
    2ac0:	0f 2e       	mov	r0, r31
    2ac2:	f0 eb       	ldi	r31, 0xB0	; 176
    2ac4:	2f 2e       	mov	r2, r31
    2ac6:	f0 2d       	mov	r31, r0
    2ac8:	41 2c       	mov	r4, r1
    2aca:	51 2c       	mov	r5, r1
    2acc:	d8 86       	std	Y+8, r13	; 0x08
    2ace:	cf 82       	std	Y+7, r12	; 0x07


void oled_write_command(char c)
{
	volatile char *ext_ram = (char *) 0x1000;
	ext_ram[0] = c;
    2ad0:	a1 2c       	mov	r10, r1
    2ad2:	68 94       	set
    2ad4:	bb 24       	eor	r11, r11
    2ad6:	b4 f8       	bld	r11, 4
}
void oled_write_data(char c)
{
	volatile char *ext_ram = (char *) 0x1200;
	ext_ram[0] = c;
    2ad8:	0f 2e       	mov	r0, r31
    2ada:	61 2c       	mov	r6, r1
    2adc:	f2 e1       	ldi	r31, 0x12	; 18
    2ade:	7f 2e       	mov	r7, r31
    2ae0:	f0 2d       	mov	r31, r0
//warning: array must have percieved height and width divisible by 8
void character_printer(amap* atmelMap, uint8_t arr[], int width, int height){
	//for(int p = 0; p < 88; p++){
		for (int line = 0; line < height/8; line++){
			int offset = line*width*8;
			for (int col = 0; col < width; col++){
    2ae2:	1c 14       	cp	r1, r12
    2ae4:	1d 04       	cpc	r1, r13
    2ae6:	14 f1       	brlt	.+68     	; 0x2b2c <character_printer+0xe0>
    2ae8:	2c c0       	rjmp	.+88     	; 0x2b42 <character_printer+0xf6>
				unsigned char c = 0b00000000;
				for (int i = 0; i < 8; i++){
					c |= (pgm_read_byte(&(arr[i*width + col + offset])) << i);
    2aea:	84 91       	lpm	r24, Z
    2aec:	90 e0       	ldi	r25, 0x00	; 0
    2aee:	02 2e       	mov	r0, r18
    2af0:	02 c0       	rjmp	.+4      	; 0x2af6 <character_printer+0xaa>
    2af2:	88 0f       	add	r24, r24
    2af4:	99 1f       	adc	r25, r25
    2af6:	0a 94       	dec	r0
    2af8:	e2 f7       	brpl	.-8      	; 0x2af2 <character_printer+0xa6>
    2afa:	38 2a       	or	r3, r24
	//for(int p = 0; p < 88; p++){
		for (int line = 0; line < height/8; line++){
			int offset = line*width*8;
			for (int col = 0; col < width; col++){
				unsigned char c = 0b00000000;
				for (int i = 0; i < 8; i++){
    2afc:	2f 5f       	subi	r18, 0xFF	; 255
    2afe:	3f 4f       	sbci	r19, 0xFF	; 255
    2b00:	8f 81       	ldd	r24, Y+7	; 0x07
    2b02:	98 85       	ldd	r25, Y+8	; 0x08
    2b04:	e8 0f       	add	r30, r24
    2b06:	f9 1f       	adc	r31, r25
    2b08:	28 30       	cpi	r18, 0x08	; 8
    2b0a:	31 05       	cpc	r19, r1
    2b0c:	71 f7       	brne	.-36     	; 0x2aea <character_printer+0x9e>


void oled_write_command(char c)
{
	volatile char *ext_ram = (char *) 0x1000;
	ext_ram[0] = c;
    2b0e:	f5 01       	movw	r30, r10
    2b10:	20 82       	st	Z, r2
				unsigned char c = 0b00000000;
				for (int i = 0; i < 8; i++){
					c |= (pgm_read_byte(&(arr[i*width + col + offset])) << i);
				}
				go_to_line(atmelMap, line);
				go_to_column(atmelMap, col/*+p*/);
    2b12:	60 2f       	mov	r22, r16
    2b14:	89 81       	ldd	r24, Y+1	; 0x01
    2b16:	9a 81       	ldd	r25, Y+2	; 0x02
    2b18:	0e 94 f7 14 	call	0x29ee	; 0x29ee <go_to_column>
	ext_ram[0] = c;
}
void oled_write_data(char c)
{
	volatile char *ext_ram = (char *) 0x1200;
	ext_ram[0] = c;
    2b1c:	f3 01       	movw	r30, r6
    2b1e:	30 82       	st	Z, r3
//warning: array must have percieved height and width divisible by 8
void character_printer(amap* atmelMap, uint8_t arr[], int width, int height){
	//for(int p = 0; p < 88; p++){
		for (int line = 0; line < height/8; line++){
			int offset = line*width*8;
			for (int col = 0; col < width; col++){
    2b20:	0f 5f       	subi	r16, 0xFF	; 255
    2b22:	1f 4f       	sbci	r17, 0xFF	; 255
    2b24:	c0 16       	cp	r12, r16
    2b26:	d1 06       	cpc	r13, r17
    2b28:	19 f4       	brne	.+6      	; 0x2b30 <character_printer+0xe4>
    2b2a:	0b c0       	rjmp	.+22     	; 0x2b42 <character_printer+0xf6>
    2b2c:	00 e0       	ldi	r16, 0x00	; 0
    2b2e:	10 e0       	ldi	r17, 0x00	; 0
    2b30:	f8 01       	movw	r30, r16
    2b32:	ee 0d       	add	r30, r14
    2b34:	ff 1d       	adc	r31, r15
    2b36:	e8 0d       	add	r30, r8
    2b38:	f9 1d       	adc	r31, r9
}

//warning: array must have percieved height and width divisible by 8
void character_printer(amap* atmelMap, uint8_t arr[], int width, int height){
	//for(int p = 0; p < 88; p++){
		for (int line = 0; line < height/8; line++){
    2b3a:	20 e0       	ldi	r18, 0x00	; 0
    2b3c:	30 e0       	ldi	r19, 0x00	; 0
    2b3e:	31 2c       	mov	r3, r1
    2b40:	d4 cf       	rjmp	.-88     	; 0x2aea <character_printer+0x9e>
    2b42:	ff ef       	ldi	r31, 0xFF	; 255
    2b44:	4f 1a       	sub	r4, r31
    2b46:	5f 0a       	sbc	r5, r31
    2b48:	23 94       	inc	r2
    2b4a:	8d 81       	ldd	r24, Y+5	; 0x05
    2b4c:	9e 81       	ldd	r25, Y+6	; 0x06
    2b4e:	e8 0e       	add	r14, r24
    2b50:	f9 1e       	adc	r15, r25
    2b52:	eb 81       	ldd	r30, Y+3	; 0x03
    2b54:	fc 81       	ldd	r31, Y+4	; 0x04
    2b56:	4e 16       	cp	r4, r30
    2b58:	5f 06       	cpc	r5, r31
    2b5a:	09 f0       	breq	.+2      	; 0x2b5e <character_printer+0x112>
    2b5c:	c2 cf       	rjmp	.-124    	; 0x2ae2 <character_printer+0x96>
				oled_write_data(c);
			}
		}
		//clear_oled(atmelMap);
	//}
    2b5e:	28 96       	adiw	r28, 0x08	; 8
    2b60:	0f b6       	in	r0, 0x3f	; 63
    2b62:	f8 94       	cli
    2b64:	de bf       	out	0x3e, r29	; 62
    2b66:	0f be       	out	0x3f, r0	; 63
    2b68:	cd bf       	out	0x3d, r28	; 61
    2b6a:	df 91       	pop	r29
    2b6c:	cf 91       	pop	r28
    2b6e:	1f 91       	pop	r17
    2b70:	0f 91       	pop	r16
    2b72:	ff 90       	pop	r15
    2b74:	ef 90       	pop	r14
    2b76:	df 90       	pop	r13
    2b78:	cf 90       	pop	r12
    2b7a:	bf 90       	pop	r11
    2b7c:	af 90       	pop	r10
    2b7e:	9f 90       	pop	r9
    2b80:	8f 90       	pop	r8
    2b82:	7f 90       	pop	r7
    2b84:	6f 90       	pop	r6
    2b86:	5f 90       	pop	r5
    2b88:	4f 90       	pop	r4
    2b8a:	3f 90       	pop	r3
    2b8c:	2f 90       	pop	r2
    2b8e:	08 95       	ret

00002b90 <SRAM_test>:
#include "sram_test.h"
    void SRAM_test(void)
    {
    2b90:	ef 92       	push	r14
    2b92:	ff 92       	push	r15
    2b94:	0f 93       	push	r16
    2b96:	1f 93       	push	r17
    2b98:	cf 93       	push	r28
    2b9a:	df 93       	push	r29
		volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
        uint16_t ext_ram_size = 0x800;
        uint16_t write_errors = 0;
        uint16_t retrieval_errors = 0;
        printf("Starting SRAM test...\n");
    2b9c:	8e e4       	ldi	r24, 0x4E	; 78
    2b9e:	91 e0       	ldi	r25, 0x01	; 1
    2ba0:	0e 94 18 17 	call	0x2e30	; 0x2e30 <puts>
        // rand() stores some internal state, so calling this function in a loop will
        // yield different seeds each time (unless srand() is called before this function)
        uint16_t seed = rand();
    2ba4:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <rand>
    2ba8:	7c 01       	movw	r14, r24
        // Write phase: Immediately check that the correct value was stored
        srand(seed);
    2baa:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <srand>
    2bae:	c0 e0       	ldi	r28, 0x00	; 0
    2bb0:	d8 e1       	ldi	r29, 0x18	; 24
#include "sram_test.h"
    void SRAM_test(void)
    {
		volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
        uint16_t ext_ram_size = 0x800;
        uint16_t write_errors = 0;
    2bb2:	00 e0       	ldi	r16, 0x00	; 0
    2bb4:	10 e0       	ldi	r17, 0x00	; 0
        // yield different seeds each time (unless srand() is called before this function)
        uint16_t seed = rand();
        // Write phase: Immediately check that the correct value was stored
        srand(seed);
        for (uint16_t i = 0; i < ext_ram_size; i++) {
            uint8_t some_value = rand();
    2bb6:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <rand>
            ext_ram[i] = some_value;
    2bba:	88 83       	st	Y, r24
            uint8_t retreived_value = ext_ram[i];
    2bbc:	98 81       	ld	r25, Y
            if (retreived_value != some_value) {
    2bbe:	89 17       	cp	r24, r25
    2bc0:	11 f0       	breq	.+4      	; 0x2bc6 <SRAM_test+0x36>
                //printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
                write_errors++;
    2bc2:	0f 5f       	subi	r16, 0xFF	; 255
    2bc4:	1f 4f       	sbci	r17, 0xFF	; 255
    2bc6:	21 96       	adiw	r28, 0x01	; 1
        // rand() stores some internal state, so calling this function in a loop will
        // yield different seeds each time (unless srand() is called before this function)
        uint16_t seed = rand();
        // Write phase: Immediately check that the correct value was stored
        srand(seed);
        for (uint16_t i = 0; i < ext_ram_size; i++) {
    2bc8:	c1 15       	cp	r28, r1
    2bca:	80 e2       	ldi	r24, 0x20	; 32
    2bcc:	d8 07       	cpc	r29, r24
    2bce:	99 f7       	brne	.-26     	; 0x2bb6 <SRAM_test+0x26>
                //printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
                write_errors++;
            }
        }
        // Retrieval phase: Check that no values were changed during or after the write phase
        srand(seed);
    2bd0:	c7 01       	movw	r24, r14
    2bd2:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <srand>
    2bd6:	c0 e0       	ldi	r28, 0x00	; 0
    2bd8:	d8 e1       	ldi	r29, 0x18	; 24
    void SRAM_test(void)
    {
		volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
        uint16_t ext_ram_size = 0x800;
        uint16_t write_errors = 0;
        uint16_t retrieval_errors = 0;
    2bda:	e1 2c       	mov	r14, r1
    2bdc:	f1 2c       	mov	r15, r1
        }
        // Retrieval phase: Check that no values were changed during or after the write phase
        srand(seed);
        // reset the PRNG to the state it had before the write phase
        for (uint16_t i = 0; i < ext_ram_size; i++) {
            uint8_t some_value = rand();
    2bde:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <rand>
            uint8_t retreived_value = ext_ram[i];
    2be2:	98 81       	ld	r25, Y
            if (retreived_value != some_value) {
    2be4:	98 17       	cp	r25, r24
    2be6:	19 f0       	breq	.+6      	; 0x2bee <SRAM_test+0x5e>
               // printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
                retrieval_errors++;
    2be8:	8f ef       	ldi	r24, 0xFF	; 255
    2bea:	e8 1a       	sub	r14, r24
    2bec:	f8 0a       	sbc	r15, r24
    2bee:	21 96       	adiw	r28, 0x01	; 1
            }
        }
        // Retrieval phase: Check that no values were changed during or after the write phase
        srand(seed);
        // reset the PRNG to the state it had before the write phase
        for (uint16_t i = 0; i < ext_ram_size; i++) {
    2bf0:	c1 15       	cp	r28, r1
    2bf2:	80 e2       	ldi	r24, 0x20	; 32
    2bf4:	d8 07       	cpc	r29, r24
    2bf6:	99 f7       	brne	.-26     	; 0x2bde <SRAM_test+0x4e>
            if (retreived_value != some_value) {
               // printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
                retrieval_errors++;
            }
        }
        printf("SRAM test completed with \n%4d errors in write phase and \n%4d errors in retrieval phase\n\n", write_errors, retrieval_errors);
    2bf8:	ff 92       	push	r15
    2bfa:	ef 92       	push	r14
    2bfc:	1f 93       	push	r17
    2bfe:	0f 93       	push	r16
    2c00:	84 e6       	ldi	r24, 0x64	; 100
    2c02:	91 e0       	ldi	r25, 0x01	; 1
    2c04:	9f 93       	push	r25
    2c06:	8f 93       	push	r24
    2c08:	0e 94 fb 16 	call	0x2df6	; 0x2df6 <printf>
    2c0c:	0f 90       	pop	r0
    2c0e:	0f 90       	pop	r0
    2c10:	0f 90       	pop	r0
    2c12:	0f 90       	pop	r0
    2c14:	0f 90       	pop	r0
    2c16:	0f 90       	pop	r0
    2c18:	df 91       	pop	r29
    2c1a:	cf 91       	pop	r28
    2c1c:	1f 91       	pop	r17
    2c1e:	0f 91       	pop	r16
    2c20:	ff 90       	pop	r15
    2c22:	ef 90       	pop	r14
    2c24:	08 95       	ret

00002c26 <USART_Transmit>:
	UCSR1C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
	clear_bit(UCSR0C, 0); // Clock polarity
	fdevopen(USART_Transmit, USART_Receive);
}
void USART_Transmit(unsigned char data){
	while (!(UCSR0A & (1<<UDRE0)));
    2c26:	5d 9b       	sbis	0x0b, 5	; 11
    2c28:	fe cf       	rjmp	.-4      	; 0x2c26 <USART_Transmit>
	
	UDR0 = data;
    2c2a:	8c b9       	out	0x0c, r24	; 12
    2c2c:	08 95       	ret

00002c2e <USART_Receive>:
}

unsigned int USART_Receive(void)
{
	
	while (!(UCSR0A & (1<<RXC0)));
    2c2e:	5f 9b       	sbis	0x0b, 7	; 11
    2c30:	fe cf       	rjmp	.-4      	; 0x2c2e <USART_Receive>
	

	return UDR0;
    2c32:	8c b1       	in	r24, 0x0c	; 12
    2c34:	90 e0       	ldi	r25, 0x00	; 0
    2c36:	08 95       	ret

00002c38 <USART_Init>:
#include <stdio.h>
#define clear_bit( reg, bit ) (reg &= ~(1 << bit))

void USART_Init (unsigned int ubrr ){
	
	UBRR0H = (unsigned char)(ubrr>>8);
    2c38:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)ubrr;
    2c3a:	89 b9       	out	0x09, r24	; 9
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    2c3c:	88 e1       	ldi	r24, 0x18	; 24
    2c3e:	8a b9       	out	0x0a, r24	; 10
	
	UCSR1C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
    2c40:	8e e8       	ldi	r24, 0x8E	; 142
    2c42:	8c bf       	out	0x3c, r24	; 60
	clear_bit(UCSR0C, 0); // Clock polarity
    2c44:	80 b5       	in	r24, 0x20	; 32
    2c46:	8e 7f       	andi	r24, 0xFE	; 254
    2c48:	80 bd       	out	0x20, r24	; 32
	fdevopen(USART_Transmit, USART_Receive);
    2c4a:	67 e1       	ldi	r22, 0x17	; 23
    2c4c:	76 e1       	ldi	r23, 0x16	; 22
    2c4e:	83 e1       	ldi	r24, 0x13	; 19
    2c50:	96 e1       	ldi	r25, 0x16	; 22
    2c52:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <fdevopen>
    2c56:	08 95       	ret

00002c58 <__divmodhi4>:
    2c58:	97 fb       	bst	r25, 7
    2c5a:	07 2e       	mov	r0, r23
    2c5c:	16 f4       	brtc	.+4      	; 0x2c62 <__divmodhi4+0xa>
    2c5e:	00 94       	com	r0
    2c60:	07 d0       	rcall	.+14     	; 0x2c70 <__divmodhi4_neg1>
    2c62:	77 fd       	sbrc	r23, 7
    2c64:	09 d0       	rcall	.+18     	; 0x2c78 <__divmodhi4_neg2>
    2c66:	0e 94 40 16 	call	0x2c80	; 0x2c80 <__udivmodhi4>
    2c6a:	07 fc       	sbrc	r0, 7
    2c6c:	05 d0       	rcall	.+10     	; 0x2c78 <__divmodhi4_neg2>
    2c6e:	3e f4       	brtc	.+14     	; 0x2c7e <__divmodhi4_exit>

00002c70 <__divmodhi4_neg1>:
    2c70:	90 95       	com	r25
    2c72:	81 95       	neg	r24
    2c74:	9f 4f       	sbci	r25, 0xFF	; 255
    2c76:	08 95       	ret

00002c78 <__divmodhi4_neg2>:
    2c78:	70 95       	com	r23
    2c7a:	61 95       	neg	r22
    2c7c:	7f 4f       	sbci	r23, 0xFF	; 255

00002c7e <__divmodhi4_exit>:
    2c7e:	08 95       	ret

00002c80 <__udivmodhi4>:
    2c80:	aa 1b       	sub	r26, r26
    2c82:	bb 1b       	sub	r27, r27
    2c84:	51 e1       	ldi	r21, 0x11	; 17
    2c86:	07 c0       	rjmp	.+14     	; 0x2c96 <__udivmodhi4_ep>

00002c88 <__udivmodhi4_loop>:
    2c88:	aa 1f       	adc	r26, r26
    2c8a:	bb 1f       	adc	r27, r27
    2c8c:	a6 17       	cp	r26, r22
    2c8e:	b7 07       	cpc	r27, r23
    2c90:	10 f0       	brcs	.+4      	; 0x2c96 <__udivmodhi4_ep>
    2c92:	a6 1b       	sub	r26, r22
    2c94:	b7 0b       	sbc	r27, r23

00002c96 <__udivmodhi4_ep>:
    2c96:	88 1f       	adc	r24, r24
    2c98:	99 1f       	adc	r25, r25
    2c9a:	5a 95       	dec	r21
    2c9c:	a9 f7       	brne	.-22     	; 0x2c88 <__udivmodhi4_loop>
    2c9e:	80 95       	com	r24
    2ca0:	90 95       	com	r25
    2ca2:	bc 01       	movw	r22, r24
    2ca4:	cd 01       	movw	r24, r26
    2ca6:	08 95       	ret

00002ca8 <do_rand>:
    2ca8:	8f 92       	push	r8
    2caa:	9f 92       	push	r9
    2cac:	af 92       	push	r10
    2cae:	bf 92       	push	r11
    2cb0:	cf 92       	push	r12
    2cb2:	df 92       	push	r13
    2cb4:	ef 92       	push	r14
    2cb6:	ff 92       	push	r15
    2cb8:	cf 93       	push	r28
    2cba:	df 93       	push	r29
    2cbc:	ec 01       	movw	r28, r24
    2cbe:	68 81       	ld	r22, Y
    2cc0:	79 81       	ldd	r23, Y+1	; 0x01
    2cc2:	8a 81       	ldd	r24, Y+2	; 0x02
    2cc4:	9b 81       	ldd	r25, Y+3	; 0x03
    2cc6:	61 15       	cp	r22, r1
    2cc8:	71 05       	cpc	r23, r1
    2cca:	81 05       	cpc	r24, r1
    2ccc:	91 05       	cpc	r25, r1
    2cce:	21 f4       	brne	.+8      	; 0x2cd8 <do_rand+0x30>
    2cd0:	64 e2       	ldi	r22, 0x24	; 36
    2cd2:	79 ed       	ldi	r23, 0xD9	; 217
    2cd4:	8b e5       	ldi	r24, 0x5B	; 91
    2cd6:	97 e0       	ldi	r25, 0x07	; 7
    2cd8:	2d e1       	ldi	r18, 0x1D	; 29
    2cda:	33 ef       	ldi	r19, 0xF3	; 243
    2cdc:	41 e0       	ldi	r20, 0x01	; 1
    2cde:	50 e0       	ldi	r21, 0x00	; 0
    2ce0:	0e 94 1d 1b 	call	0x363a	; 0x363a <__divmodsi4>
    2ce4:	49 01       	movw	r8, r18
    2ce6:	5a 01       	movw	r10, r20
    2ce8:	9b 01       	movw	r18, r22
    2cea:	ac 01       	movw	r20, r24
    2cec:	a7 ea       	ldi	r26, 0xA7	; 167
    2cee:	b1 e4       	ldi	r27, 0x41	; 65
    2cf0:	0e 94 3c 1b 	call	0x3678	; 0x3678 <__muluhisi3>
    2cf4:	6b 01       	movw	r12, r22
    2cf6:	7c 01       	movw	r14, r24
    2cf8:	ac ee       	ldi	r26, 0xEC	; 236
    2cfa:	b4 ef       	ldi	r27, 0xF4	; 244
    2cfc:	a5 01       	movw	r20, r10
    2cfe:	94 01       	movw	r18, r8
    2d00:	0e 94 4a 1b 	call	0x3694	; 0x3694 <__mulohisi3>
    2d04:	dc 01       	movw	r26, r24
    2d06:	cb 01       	movw	r24, r22
    2d08:	8c 0d       	add	r24, r12
    2d0a:	9d 1d       	adc	r25, r13
    2d0c:	ae 1d       	adc	r26, r14
    2d0e:	bf 1d       	adc	r27, r15
    2d10:	b7 ff       	sbrs	r27, 7
    2d12:	03 c0       	rjmp	.+6      	; 0x2d1a <do_rand+0x72>
    2d14:	01 97       	sbiw	r24, 0x01	; 1
    2d16:	a1 09       	sbc	r26, r1
    2d18:	b0 48       	sbci	r27, 0x80	; 128
    2d1a:	88 83       	st	Y, r24
    2d1c:	99 83       	std	Y+1, r25	; 0x01
    2d1e:	aa 83       	std	Y+2, r26	; 0x02
    2d20:	bb 83       	std	Y+3, r27	; 0x03
    2d22:	9f 77       	andi	r25, 0x7F	; 127
    2d24:	df 91       	pop	r29
    2d26:	cf 91       	pop	r28
    2d28:	ff 90       	pop	r15
    2d2a:	ef 90       	pop	r14
    2d2c:	df 90       	pop	r13
    2d2e:	cf 90       	pop	r12
    2d30:	bf 90       	pop	r11
    2d32:	af 90       	pop	r10
    2d34:	9f 90       	pop	r9
    2d36:	8f 90       	pop	r8
    2d38:	08 95       	ret

00002d3a <rand_r>:
    2d3a:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <do_rand>
    2d3e:	08 95       	ret

00002d40 <rand>:
    2d40:	80 e0       	ldi	r24, 0x00	; 0
    2d42:	91 e0       	ldi	r25, 0x01	; 1
    2d44:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <do_rand>
    2d48:	08 95       	ret

00002d4a <srand>:
    2d4a:	a0 e0       	ldi	r26, 0x00	; 0
    2d4c:	b0 e0       	ldi	r27, 0x00	; 0
    2d4e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    2d52:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    2d56:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
    2d5a:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
    2d5e:	08 95       	ret

00002d60 <fdevopen>:
    2d60:	0f 93       	push	r16
    2d62:	1f 93       	push	r17
    2d64:	cf 93       	push	r28
    2d66:	df 93       	push	r29
    2d68:	00 97       	sbiw	r24, 0x00	; 0
    2d6a:	31 f4       	brne	.+12     	; 0x2d78 <fdevopen+0x18>
    2d6c:	61 15       	cp	r22, r1
    2d6e:	71 05       	cpc	r23, r1
    2d70:	19 f4       	brne	.+6      	; 0x2d78 <fdevopen+0x18>
    2d72:	80 e0       	ldi	r24, 0x00	; 0
    2d74:	90 e0       	ldi	r25, 0x00	; 0
    2d76:	3a c0       	rjmp	.+116    	; 0x2dec <fdevopen+0x8c>
    2d78:	8b 01       	movw	r16, r22
    2d7a:	ec 01       	movw	r28, r24
    2d7c:	6e e0       	ldi	r22, 0x0E	; 14
    2d7e:	70 e0       	ldi	r23, 0x00	; 0
    2d80:	81 e0       	ldi	r24, 0x01	; 1
    2d82:	90 e0       	ldi	r25, 0x00	; 0
    2d84:	0e 94 29 19 	call	0x3252	; 0x3252 <calloc>
    2d88:	fc 01       	movw	r30, r24
    2d8a:	89 2b       	or	r24, r25
    2d8c:	91 f3       	breq	.-28     	; 0x2d72 <fdevopen+0x12>
    2d8e:	80 e8       	ldi	r24, 0x80	; 128
    2d90:	83 83       	std	Z+3, r24	; 0x03
    2d92:	01 15       	cp	r16, r1
    2d94:	11 05       	cpc	r17, r1
    2d96:	71 f0       	breq	.+28     	; 0x2db4 <fdevopen+0x54>
    2d98:	13 87       	std	Z+11, r17	; 0x0b
    2d9a:	02 87       	std	Z+10, r16	; 0x0a
    2d9c:	81 e8       	ldi	r24, 0x81	; 129
    2d9e:	83 83       	std	Z+3, r24	; 0x03
    2da0:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <__data_end>
    2da4:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <__data_end+0x1>
    2da8:	89 2b       	or	r24, r25
    2daa:	21 f4       	brne	.+8      	; 0x2db4 <fdevopen+0x54>
    2dac:	f0 93 bf 01 	sts	0x01BF, r31	; 0x8001bf <__data_end+0x1>
    2db0:	e0 93 be 01 	sts	0x01BE, r30	; 0x8001be <__data_end>
    2db4:	20 97       	sbiw	r28, 0x00	; 0
    2db6:	c9 f0       	breq	.+50     	; 0x2dea <fdevopen+0x8a>
    2db8:	d1 87       	std	Z+9, r29	; 0x09
    2dba:	c0 87       	std	Z+8, r28	; 0x08
    2dbc:	83 81       	ldd	r24, Z+3	; 0x03
    2dbe:	82 60       	ori	r24, 0x02	; 2
    2dc0:	83 83       	std	Z+3, r24	; 0x03
    2dc2:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <__data_end+0x2>
    2dc6:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <__data_end+0x3>
    2dca:	89 2b       	or	r24, r25
    2dcc:	71 f4       	brne	.+28     	; 0x2dea <fdevopen+0x8a>
    2dce:	f0 93 c1 01 	sts	0x01C1, r31	; 0x8001c1 <__data_end+0x3>
    2dd2:	e0 93 c0 01 	sts	0x01C0, r30	; 0x8001c0 <__data_end+0x2>
    2dd6:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <__data_end+0x4>
    2dda:	90 91 c3 01 	lds	r25, 0x01C3	; 0x8001c3 <__data_end+0x5>
    2dde:	89 2b       	or	r24, r25
    2de0:	21 f4       	brne	.+8      	; 0x2dea <fdevopen+0x8a>
    2de2:	f0 93 c3 01 	sts	0x01C3, r31	; 0x8001c3 <__data_end+0x5>
    2de6:	e0 93 c2 01 	sts	0x01C2, r30	; 0x8001c2 <__data_end+0x4>
    2dea:	cf 01       	movw	r24, r30
    2dec:	df 91       	pop	r29
    2dee:	cf 91       	pop	r28
    2df0:	1f 91       	pop	r17
    2df2:	0f 91       	pop	r16
    2df4:	08 95       	ret

00002df6 <printf>:
    2df6:	a0 e0       	ldi	r26, 0x00	; 0
    2df8:	b0 e0       	ldi	r27, 0x00	; 0
    2dfa:	e1 e0       	ldi	r30, 0x01	; 1
    2dfc:	f7 e1       	ldi	r31, 0x17	; 23
    2dfe:	0c 94 5f 1b 	jmp	0x36be	; 0x36be <__prologue_saves__+0x20>
    2e02:	ae 01       	movw	r20, r28
    2e04:	4b 5f       	subi	r20, 0xFB	; 251
    2e06:	5f 4f       	sbci	r21, 0xFF	; 255
    2e08:	fa 01       	movw	r30, r20
    2e0a:	61 91       	ld	r22, Z+
    2e0c:	71 91       	ld	r23, Z+
    2e0e:	af 01       	movw	r20, r30
    2e10:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <__data_end+0x2>
    2e14:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <__data_end+0x3>
    2e18:	0e 94 48 17 	call	0x2e90	; 0x2e90 <vfprintf>
    2e1c:	e2 e0       	ldi	r30, 0x02	; 2
    2e1e:	0c 94 7b 1b 	jmp	0x36f6	; 0x36f6 <__epilogue_restores__+0x20>

00002e22 <putchar>:
    2e22:	60 91 c0 01 	lds	r22, 0x01C0	; 0x8001c0 <__data_end+0x2>
    2e26:	70 91 c1 01 	lds	r23, 0x01C1	; 0x8001c1 <__data_end+0x3>
    2e2a:	0e 94 83 1a 	call	0x3506	; 0x3506 <fputc>
    2e2e:	08 95       	ret

00002e30 <puts>:
    2e30:	0f 93       	push	r16
    2e32:	1f 93       	push	r17
    2e34:	cf 93       	push	r28
    2e36:	df 93       	push	r29
    2e38:	e0 91 c0 01 	lds	r30, 0x01C0	; 0x8001c0 <__data_end+0x2>
    2e3c:	f0 91 c1 01 	lds	r31, 0x01C1	; 0x8001c1 <__data_end+0x3>
    2e40:	23 81       	ldd	r18, Z+3	; 0x03
    2e42:	21 ff       	sbrs	r18, 1
    2e44:	1b c0       	rjmp	.+54     	; 0x2e7c <puts+0x4c>
    2e46:	8c 01       	movw	r16, r24
    2e48:	d0 e0       	ldi	r29, 0x00	; 0
    2e4a:	c0 e0       	ldi	r28, 0x00	; 0
    2e4c:	f8 01       	movw	r30, r16
    2e4e:	81 91       	ld	r24, Z+
    2e50:	8f 01       	movw	r16, r30
    2e52:	60 91 c0 01 	lds	r22, 0x01C0	; 0x8001c0 <__data_end+0x2>
    2e56:	70 91 c1 01 	lds	r23, 0x01C1	; 0x8001c1 <__data_end+0x3>
    2e5a:	db 01       	movw	r26, r22
    2e5c:	18 96       	adiw	r26, 0x08	; 8
    2e5e:	ed 91       	ld	r30, X+
    2e60:	fc 91       	ld	r31, X
    2e62:	19 97       	sbiw	r26, 0x09	; 9
    2e64:	88 23       	and	r24, r24
    2e66:	31 f0       	breq	.+12     	; 0x2e74 <puts+0x44>
    2e68:	09 95       	icall
    2e6a:	89 2b       	or	r24, r25
    2e6c:	79 f3       	breq	.-34     	; 0x2e4c <puts+0x1c>
    2e6e:	df ef       	ldi	r29, 0xFF	; 255
    2e70:	cf ef       	ldi	r28, 0xFF	; 255
    2e72:	ec cf       	rjmp	.-40     	; 0x2e4c <puts+0x1c>
    2e74:	8a e0       	ldi	r24, 0x0A	; 10
    2e76:	09 95       	icall
    2e78:	89 2b       	or	r24, r25
    2e7a:	19 f0       	breq	.+6      	; 0x2e82 <puts+0x52>
    2e7c:	8f ef       	ldi	r24, 0xFF	; 255
    2e7e:	9f ef       	ldi	r25, 0xFF	; 255
    2e80:	02 c0       	rjmp	.+4      	; 0x2e86 <puts+0x56>
    2e82:	8d 2f       	mov	r24, r29
    2e84:	9c 2f       	mov	r25, r28
    2e86:	df 91       	pop	r29
    2e88:	cf 91       	pop	r28
    2e8a:	1f 91       	pop	r17
    2e8c:	0f 91       	pop	r16
    2e8e:	08 95       	ret

00002e90 <vfprintf>:
    2e90:	ab e0       	ldi	r26, 0x0B	; 11
    2e92:	b0 e0       	ldi	r27, 0x00	; 0
    2e94:	ee e4       	ldi	r30, 0x4E	; 78
    2e96:	f7 e1       	ldi	r31, 0x17	; 23
    2e98:	0c 94 4f 1b 	jmp	0x369e	; 0x369e <__prologue_saves__>
    2e9c:	6c 01       	movw	r12, r24
    2e9e:	7b 01       	movw	r14, r22
    2ea0:	8a 01       	movw	r16, r20
    2ea2:	fc 01       	movw	r30, r24
    2ea4:	17 82       	std	Z+7, r1	; 0x07
    2ea6:	16 82       	std	Z+6, r1	; 0x06
    2ea8:	83 81       	ldd	r24, Z+3	; 0x03
    2eaa:	81 ff       	sbrs	r24, 1
    2eac:	cc c1       	rjmp	.+920    	; 0x3246 <vfprintf+0x3b6>
    2eae:	ce 01       	movw	r24, r28
    2eb0:	01 96       	adiw	r24, 0x01	; 1
    2eb2:	3c 01       	movw	r6, r24
    2eb4:	f6 01       	movw	r30, r12
    2eb6:	93 81       	ldd	r25, Z+3	; 0x03
    2eb8:	f7 01       	movw	r30, r14
    2eba:	93 fd       	sbrc	r25, 3
    2ebc:	85 91       	lpm	r24, Z+
    2ebe:	93 ff       	sbrs	r25, 3
    2ec0:	81 91       	ld	r24, Z+
    2ec2:	7f 01       	movw	r14, r30
    2ec4:	88 23       	and	r24, r24
    2ec6:	09 f4       	brne	.+2      	; 0x2eca <vfprintf+0x3a>
    2ec8:	ba c1       	rjmp	.+884    	; 0x323e <vfprintf+0x3ae>
    2eca:	85 32       	cpi	r24, 0x25	; 37
    2ecc:	39 f4       	brne	.+14     	; 0x2edc <vfprintf+0x4c>
    2ece:	93 fd       	sbrc	r25, 3
    2ed0:	85 91       	lpm	r24, Z+
    2ed2:	93 ff       	sbrs	r25, 3
    2ed4:	81 91       	ld	r24, Z+
    2ed6:	7f 01       	movw	r14, r30
    2ed8:	85 32       	cpi	r24, 0x25	; 37
    2eda:	29 f4       	brne	.+10     	; 0x2ee6 <vfprintf+0x56>
    2edc:	b6 01       	movw	r22, r12
    2ede:	90 e0       	ldi	r25, 0x00	; 0
    2ee0:	0e 94 83 1a 	call	0x3506	; 0x3506 <fputc>
    2ee4:	e7 cf       	rjmp	.-50     	; 0x2eb4 <vfprintf+0x24>
    2ee6:	91 2c       	mov	r9, r1
    2ee8:	21 2c       	mov	r2, r1
    2eea:	31 2c       	mov	r3, r1
    2eec:	ff e1       	ldi	r31, 0x1F	; 31
    2eee:	f3 15       	cp	r31, r3
    2ef0:	d8 f0       	brcs	.+54     	; 0x2f28 <vfprintf+0x98>
    2ef2:	8b 32       	cpi	r24, 0x2B	; 43
    2ef4:	79 f0       	breq	.+30     	; 0x2f14 <vfprintf+0x84>
    2ef6:	38 f4       	brcc	.+14     	; 0x2f06 <vfprintf+0x76>
    2ef8:	80 32       	cpi	r24, 0x20	; 32
    2efa:	79 f0       	breq	.+30     	; 0x2f1a <vfprintf+0x8a>
    2efc:	83 32       	cpi	r24, 0x23	; 35
    2efe:	a1 f4       	brne	.+40     	; 0x2f28 <vfprintf+0x98>
    2f00:	23 2d       	mov	r18, r3
    2f02:	20 61       	ori	r18, 0x10	; 16
    2f04:	1d c0       	rjmp	.+58     	; 0x2f40 <vfprintf+0xb0>
    2f06:	8d 32       	cpi	r24, 0x2D	; 45
    2f08:	61 f0       	breq	.+24     	; 0x2f22 <vfprintf+0x92>
    2f0a:	80 33       	cpi	r24, 0x30	; 48
    2f0c:	69 f4       	brne	.+26     	; 0x2f28 <vfprintf+0x98>
    2f0e:	23 2d       	mov	r18, r3
    2f10:	21 60       	ori	r18, 0x01	; 1
    2f12:	16 c0       	rjmp	.+44     	; 0x2f40 <vfprintf+0xb0>
    2f14:	83 2d       	mov	r24, r3
    2f16:	82 60       	ori	r24, 0x02	; 2
    2f18:	38 2e       	mov	r3, r24
    2f1a:	e3 2d       	mov	r30, r3
    2f1c:	e4 60       	ori	r30, 0x04	; 4
    2f1e:	3e 2e       	mov	r3, r30
    2f20:	2a c0       	rjmp	.+84     	; 0x2f76 <vfprintf+0xe6>
    2f22:	f3 2d       	mov	r31, r3
    2f24:	f8 60       	ori	r31, 0x08	; 8
    2f26:	1d c0       	rjmp	.+58     	; 0x2f62 <vfprintf+0xd2>
    2f28:	37 fc       	sbrc	r3, 7
    2f2a:	2d c0       	rjmp	.+90     	; 0x2f86 <vfprintf+0xf6>
    2f2c:	20 ed       	ldi	r18, 0xD0	; 208
    2f2e:	28 0f       	add	r18, r24
    2f30:	2a 30       	cpi	r18, 0x0A	; 10
    2f32:	40 f0       	brcs	.+16     	; 0x2f44 <vfprintf+0xb4>
    2f34:	8e 32       	cpi	r24, 0x2E	; 46
    2f36:	b9 f4       	brne	.+46     	; 0x2f66 <vfprintf+0xd6>
    2f38:	36 fc       	sbrc	r3, 6
    2f3a:	81 c1       	rjmp	.+770    	; 0x323e <vfprintf+0x3ae>
    2f3c:	23 2d       	mov	r18, r3
    2f3e:	20 64       	ori	r18, 0x40	; 64
    2f40:	32 2e       	mov	r3, r18
    2f42:	19 c0       	rjmp	.+50     	; 0x2f76 <vfprintf+0xe6>
    2f44:	36 fe       	sbrs	r3, 6
    2f46:	06 c0       	rjmp	.+12     	; 0x2f54 <vfprintf+0xc4>
    2f48:	8a e0       	ldi	r24, 0x0A	; 10
    2f4a:	98 9e       	mul	r9, r24
    2f4c:	20 0d       	add	r18, r0
    2f4e:	11 24       	eor	r1, r1
    2f50:	92 2e       	mov	r9, r18
    2f52:	11 c0       	rjmp	.+34     	; 0x2f76 <vfprintf+0xe6>
    2f54:	ea e0       	ldi	r30, 0x0A	; 10
    2f56:	2e 9e       	mul	r2, r30
    2f58:	20 0d       	add	r18, r0
    2f5a:	11 24       	eor	r1, r1
    2f5c:	22 2e       	mov	r2, r18
    2f5e:	f3 2d       	mov	r31, r3
    2f60:	f0 62       	ori	r31, 0x20	; 32
    2f62:	3f 2e       	mov	r3, r31
    2f64:	08 c0       	rjmp	.+16     	; 0x2f76 <vfprintf+0xe6>
    2f66:	8c 36       	cpi	r24, 0x6C	; 108
    2f68:	21 f4       	brne	.+8      	; 0x2f72 <vfprintf+0xe2>
    2f6a:	83 2d       	mov	r24, r3
    2f6c:	80 68       	ori	r24, 0x80	; 128
    2f6e:	38 2e       	mov	r3, r24
    2f70:	02 c0       	rjmp	.+4      	; 0x2f76 <vfprintf+0xe6>
    2f72:	88 36       	cpi	r24, 0x68	; 104
    2f74:	41 f4       	brne	.+16     	; 0x2f86 <vfprintf+0xf6>
    2f76:	f7 01       	movw	r30, r14
    2f78:	93 fd       	sbrc	r25, 3
    2f7a:	85 91       	lpm	r24, Z+
    2f7c:	93 ff       	sbrs	r25, 3
    2f7e:	81 91       	ld	r24, Z+
    2f80:	7f 01       	movw	r14, r30
    2f82:	81 11       	cpse	r24, r1
    2f84:	b3 cf       	rjmp	.-154    	; 0x2eec <vfprintf+0x5c>
    2f86:	98 2f       	mov	r25, r24
    2f88:	9f 7d       	andi	r25, 0xDF	; 223
    2f8a:	95 54       	subi	r25, 0x45	; 69
    2f8c:	93 30       	cpi	r25, 0x03	; 3
    2f8e:	28 f4       	brcc	.+10     	; 0x2f9a <vfprintf+0x10a>
    2f90:	0c 5f       	subi	r16, 0xFC	; 252
    2f92:	1f 4f       	sbci	r17, 0xFF	; 255
    2f94:	9f e3       	ldi	r25, 0x3F	; 63
    2f96:	99 83       	std	Y+1, r25	; 0x01
    2f98:	0d c0       	rjmp	.+26     	; 0x2fb4 <vfprintf+0x124>
    2f9a:	83 36       	cpi	r24, 0x63	; 99
    2f9c:	31 f0       	breq	.+12     	; 0x2faa <vfprintf+0x11a>
    2f9e:	83 37       	cpi	r24, 0x73	; 115
    2fa0:	71 f0       	breq	.+28     	; 0x2fbe <vfprintf+0x12e>
    2fa2:	83 35       	cpi	r24, 0x53	; 83
    2fa4:	09 f0       	breq	.+2      	; 0x2fa8 <vfprintf+0x118>
    2fa6:	59 c0       	rjmp	.+178    	; 0x305a <vfprintf+0x1ca>
    2fa8:	21 c0       	rjmp	.+66     	; 0x2fec <vfprintf+0x15c>
    2faa:	f8 01       	movw	r30, r16
    2fac:	80 81       	ld	r24, Z
    2fae:	89 83       	std	Y+1, r24	; 0x01
    2fb0:	0e 5f       	subi	r16, 0xFE	; 254
    2fb2:	1f 4f       	sbci	r17, 0xFF	; 255
    2fb4:	88 24       	eor	r8, r8
    2fb6:	83 94       	inc	r8
    2fb8:	91 2c       	mov	r9, r1
    2fba:	53 01       	movw	r10, r6
    2fbc:	13 c0       	rjmp	.+38     	; 0x2fe4 <vfprintf+0x154>
    2fbe:	28 01       	movw	r4, r16
    2fc0:	f2 e0       	ldi	r31, 0x02	; 2
    2fc2:	4f 0e       	add	r4, r31
    2fc4:	51 1c       	adc	r5, r1
    2fc6:	f8 01       	movw	r30, r16
    2fc8:	a0 80       	ld	r10, Z
    2fca:	b1 80       	ldd	r11, Z+1	; 0x01
    2fcc:	36 fe       	sbrs	r3, 6
    2fce:	03 c0       	rjmp	.+6      	; 0x2fd6 <vfprintf+0x146>
    2fd0:	69 2d       	mov	r22, r9
    2fd2:	70 e0       	ldi	r23, 0x00	; 0
    2fd4:	02 c0       	rjmp	.+4      	; 0x2fda <vfprintf+0x14a>
    2fd6:	6f ef       	ldi	r22, 0xFF	; 255
    2fd8:	7f ef       	ldi	r23, 0xFF	; 255
    2fda:	c5 01       	movw	r24, r10
    2fdc:	0e 94 78 1a 	call	0x34f0	; 0x34f0 <strnlen>
    2fe0:	4c 01       	movw	r8, r24
    2fe2:	82 01       	movw	r16, r4
    2fe4:	f3 2d       	mov	r31, r3
    2fe6:	ff 77       	andi	r31, 0x7F	; 127
    2fe8:	3f 2e       	mov	r3, r31
    2fea:	16 c0       	rjmp	.+44     	; 0x3018 <vfprintf+0x188>
    2fec:	28 01       	movw	r4, r16
    2fee:	22 e0       	ldi	r18, 0x02	; 2
    2ff0:	42 0e       	add	r4, r18
    2ff2:	51 1c       	adc	r5, r1
    2ff4:	f8 01       	movw	r30, r16
    2ff6:	a0 80       	ld	r10, Z
    2ff8:	b1 80       	ldd	r11, Z+1	; 0x01
    2ffa:	36 fe       	sbrs	r3, 6
    2ffc:	03 c0       	rjmp	.+6      	; 0x3004 <vfprintf+0x174>
    2ffe:	69 2d       	mov	r22, r9
    3000:	70 e0       	ldi	r23, 0x00	; 0
    3002:	02 c0       	rjmp	.+4      	; 0x3008 <vfprintf+0x178>
    3004:	6f ef       	ldi	r22, 0xFF	; 255
    3006:	7f ef       	ldi	r23, 0xFF	; 255
    3008:	c5 01       	movw	r24, r10
    300a:	0e 94 66 1a 	call	0x34cc	; 0x34cc <strnlen_P>
    300e:	4c 01       	movw	r8, r24
    3010:	f3 2d       	mov	r31, r3
    3012:	f0 68       	ori	r31, 0x80	; 128
    3014:	3f 2e       	mov	r3, r31
    3016:	82 01       	movw	r16, r4
    3018:	33 fc       	sbrc	r3, 3
    301a:	1b c0       	rjmp	.+54     	; 0x3052 <vfprintf+0x1c2>
    301c:	82 2d       	mov	r24, r2
    301e:	90 e0       	ldi	r25, 0x00	; 0
    3020:	88 16       	cp	r8, r24
    3022:	99 06       	cpc	r9, r25
    3024:	b0 f4       	brcc	.+44     	; 0x3052 <vfprintf+0x1c2>
    3026:	b6 01       	movw	r22, r12
    3028:	80 e2       	ldi	r24, 0x20	; 32
    302a:	90 e0       	ldi	r25, 0x00	; 0
    302c:	0e 94 83 1a 	call	0x3506	; 0x3506 <fputc>
    3030:	2a 94       	dec	r2
    3032:	f4 cf       	rjmp	.-24     	; 0x301c <vfprintf+0x18c>
    3034:	f5 01       	movw	r30, r10
    3036:	37 fc       	sbrc	r3, 7
    3038:	85 91       	lpm	r24, Z+
    303a:	37 fe       	sbrs	r3, 7
    303c:	81 91       	ld	r24, Z+
    303e:	5f 01       	movw	r10, r30
    3040:	b6 01       	movw	r22, r12
    3042:	90 e0       	ldi	r25, 0x00	; 0
    3044:	0e 94 83 1a 	call	0x3506	; 0x3506 <fputc>
    3048:	21 10       	cpse	r2, r1
    304a:	2a 94       	dec	r2
    304c:	21 e0       	ldi	r18, 0x01	; 1
    304e:	82 1a       	sub	r8, r18
    3050:	91 08       	sbc	r9, r1
    3052:	81 14       	cp	r8, r1
    3054:	91 04       	cpc	r9, r1
    3056:	71 f7       	brne	.-36     	; 0x3034 <vfprintf+0x1a4>
    3058:	e8 c0       	rjmp	.+464    	; 0x322a <vfprintf+0x39a>
    305a:	84 36       	cpi	r24, 0x64	; 100
    305c:	11 f0       	breq	.+4      	; 0x3062 <vfprintf+0x1d2>
    305e:	89 36       	cpi	r24, 0x69	; 105
    3060:	41 f5       	brne	.+80     	; 0x30b2 <vfprintf+0x222>
    3062:	f8 01       	movw	r30, r16
    3064:	37 fe       	sbrs	r3, 7
    3066:	07 c0       	rjmp	.+14     	; 0x3076 <vfprintf+0x1e6>
    3068:	60 81       	ld	r22, Z
    306a:	71 81       	ldd	r23, Z+1	; 0x01
    306c:	82 81       	ldd	r24, Z+2	; 0x02
    306e:	93 81       	ldd	r25, Z+3	; 0x03
    3070:	0c 5f       	subi	r16, 0xFC	; 252
    3072:	1f 4f       	sbci	r17, 0xFF	; 255
    3074:	08 c0       	rjmp	.+16     	; 0x3086 <vfprintf+0x1f6>
    3076:	60 81       	ld	r22, Z
    3078:	71 81       	ldd	r23, Z+1	; 0x01
    307a:	07 2e       	mov	r0, r23
    307c:	00 0c       	add	r0, r0
    307e:	88 0b       	sbc	r24, r24
    3080:	99 0b       	sbc	r25, r25
    3082:	0e 5f       	subi	r16, 0xFE	; 254
    3084:	1f 4f       	sbci	r17, 0xFF	; 255
    3086:	f3 2d       	mov	r31, r3
    3088:	ff 76       	andi	r31, 0x6F	; 111
    308a:	3f 2e       	mov	r3, r31
    308c:	97 ff       	sbrs	r25, 7
    308e:	09 c0       	rjmp	.+18     	; 0x30a2 <vfprintf+0x212>
    3090:	90 95       	com	r25
    3092:	80 95       	com	r24
    3094:	70 95       	com	r23
    3096:	61 95       	neg	r22
    3098:	7f 4f       	sbci	r23, 0xFF	; 255
    309a:	8f 4f       	sbci	r24, 0xFF	; 255
    309c:	9f 4f       	sbci	r25, 0xFF	; 255
    309e:	f0 68       	ori	r31, 0x80	; 128
    30a0:	3f 2e       	mov	r3, r31
    30a2:	2a e0       	ldi	r18, 0x0A	; 10
    30a4:	30 e0       	ldi	r19, 0x00	; 0
    30a6:	a3 01       	movw	r20, r6
    30a8:	0e 94 bf 1a 	call	0x357e	; 0x357e <__ultoa_invert>
    30ac:	88 2e       	mov	r8, r24
    30ae:	86 18       	sub	r8, r6
    30b0:	45 c0       	rjmp	.+138    	; 0x313c <vfprintf+0x2ac>
    30b2:	85 37       	cpi	r24, 0x75	; 117
    30b4:	31 f4       	brne	.+12     	; 0x30c2 <vfprintf+0x232>
    30b6:	23 2d       	mov	r18, r3
    30b8:	2f 7e       	andi	r18, 0xEF	; 239
    30ba:	b2 2e       	mov	r11, r18
    30bc:	2a e0       	ldi	r18, 0x0A	; 10
    30be:	30 e0       	ldi	r19, 0x00	; 0
    30c0:	25 c0       	rjmp	.+74     	; 0x310c <vfprintf+0x27c>
    30c2:	93 2d       	mov	r25, r3
    30c4:	99 7f       	andi	r25, 0xF9	; 249
    30c6:	b9 2e       	mov	r11, r25
    30c8:	8f 36       	cpi	r24, 0x6F	; 111
    30ca:	c1 f0       	breq	.+48     	; 0x30fc <vfprintf+0x26c>
    30cc:	18 f4       	brcc	.+6      	; 0x30d4 <vfprintf+0x244>
    30ce:	88 35       	cpi	r24, 0x58	; 88
    30d0:	79 f0       	breq	.+30     	; 0x30f0 <vfprintf+0x260>
    30d2:	b5 c0       	rjmp	.+362    	; 0x323e <vfprintf+0x3ae>
    30d4:	80 37       	cpi	r24, 0x70	; 112
    30d6:	19 f0       	breq	.+6      	; 0x30de <vfprintf+0x24e>
    30d8:	88 37       	cpi	r24, 0x78	; 120
    30da:	21 f0       	breq	.+8      	; 0x30e4 <vfprintf+0x254>
    30dc:	b0 c0       	rjmp	.+352    	; 0x323e <vfprintf+0x3ae>
    30de:	e9 2f       	mov	r30, r25
    30e0:	e0 61       	ori	r30, 0x10	; 16
    30e2:	be 2e       	mov	r11, r30
    30e4:	b4 fe       	sbrs	r11, 4
    30e6:	0d c0       	rjmp	.+26     	; 0x3102 <vfprintf+0x272>
    30e8:	fb 2d       	mov	r31, r11
    30ea:	f4 60       	ori	r31, 0x04	; 4
    30ec:	bf 2e       	mov	r11, r31
    30ee:	09 c0       	rjmp	.+18     	; 0x3102 <vfprintf+0x272>
    30f0:	34 fe       	sbrs	r3, 4
    30f2:	0a c0       	rjmp	.+20     	; 0x3108 <vfprintf+0x278>
    30f4:	29 2f       	mov	r18, r25
    30f6:	26 60       	ori	r18, 0x06	; 6
    30f8:	b2 2e       	mov	r11, r18
    30fa:	06 c0       	rjmp	.+12     	; 0x3108 <vfprintf+0x278>
    30fc:	28 e0       	ldi	r18, 0x08	; 8
    30fe:	30 e0       	ldi	r19, 0x00	; 0
    3100:	05 c0       	rjmp	.+10     	; 0x310c <vfprintf+0x27c>
    3102:	20 e1       	ldi	r18, 0x10	; 16
    3104:	30 e0       	ldi	r19, 0x00	; 0
    3106:	02 c0       	rjmp	.+4      	; 0x310c <vfprintf+0x27c>
    3108:	20 e1       	ldi	r18, 0x10	; 16
    310a:	32 e0       	ldi	r19, 0x02	; 2
    310c:	f8 01       	movw	r30, r16
    310e:	b7 fe       	sbrs	r11, 7
    3110:	07 c0       	rjmp	.+14     	; 0x3120 <vfprintf+0x290>
    3112:	60 81       	ld	r22, Z
    3114:	71 81       	ldd	r23, Z+1	; 0x01
    3116:	82 81       	ldd	r24, Z+2	; 0x02
    3118:	93 81       	ldd	r25, Z+3	; 0x03
    311a:	0c 5f       	subi	r16, 0xFC	; 252
    311c:	1f 4f       	sbci	r17, 0xFF	; 255
    311e:	06 c0       	rjmp	.+12     	; 0x312c <vfprintf+0x29c>
    3120:	60 81       	ld	r22, Z
    3122:	71 81       	ldd	r23, Z+1	; 0x01
    3124:	80 e0       	ldi	r24, 0x00	; 0
    3126:	90 e0       	ldi	r25, 0x00	; 0
    3128:	0e 5f       	subi	r16, 0xFE	; 254
    312a:	1f 4f       	sbci	r17, 0xFF	; 255
    312c:	a3 01       	movw	r20, r6
    312e:	0e 94 bf 1a 	call	0x357e	; 0x357e <__ultoa_invert>
    3132:	88 2e       	mov	r8, r24
    3134:	86 18       	sub	r8, r6
    3136:	fb 2d       	mov	r31, r11
    3138:	ff 77       	andi	r31, 0x7F	; 127
    313a:	3f 2e       	mov	r3, r31
    313c:	36 fe       	sbrs	r3, 6
    313e:	0d c0       	rjmp	.+26     	; 0x315a <vfprintf+0x2ca>
    3140:	23 2d       	mov	r18, r3
    3142:	2e 7f       	andi	r18, 0xFE	; 254
    3144:	a2 2e       	mov	r10, r18
    3146:	89 14       	cp	r8, r9
    3148:	58 f4       	brcc	.+22     	; 0x3160 <vfprintf+0x2d0>
    314a:	34 fe       	sbrs	r3, 4
    314c:	0b c0       	rjmp	.+22     	; 0x3164 <vfprintf+0x2d4>
    314e:	32 fc       	sbrc	r3, 2
    3150:	09 c0       	rjmp	.+18     	; 0x3164 <vfprintf+0x2d4>
    3152:	83 2d       	mov	r24, r3
    3154:	8e 7e       	andi	r24, 0xEE	; 238
    3156:	a8 2e       	mov	r10, r24
    3158:	05 c0       	rjmp	.+10     	; 0x3164 <vfprintf+0x2d4>
    315a:	b8 2c       	mov	r11, r8
    315c:	a3 2c       	mov	r10, r3
    315e:	03 c0       	rjmp	.+6      	; 0x3166 <vfprintf+0x2d6>
    3160:	b8 2c       	mov	r11, r8
    3162:	01 c0       	rjmp	.+2      	; 0x3166 <vfprintf+0x2d6>
    3164:	b9 2c       	mov	r11, r9
    3166:	a4 fe       	sbrs	r10, 4
    3168:	0f c0       	rjmp	.+30     	; 0x3188 <vfprintf+0x2f8>
    316a:	fe 01       	movw	r30, r28
    316c:	e8 0d       	add	r30, r8
    316e:	f1 1d       	adc	r31, r1
    3170:	80 81       	ld	r24, Z
    3172:	80 33       	cpi	r24, 0x30	; 48
    3174:	21 f4       	brne	.+8      	; 0x317e <vfprintf+0x2ee>
    3176:	9a 2d       	mov	r25, r10
    3178:	99 7e       	andi	r25, 0xE9	; 233
    317a:	a9 2e       	mov	r10, r25
    317c:	09 c0       	rjmp	.+18     	; 0x3190 <vfprintf+0x300>
    317e:	a2 fe       	sbrs	r10, 2
    3180:	06 c0       	rjmp	.+12     	; 0x318e <vfprintf+0x2fe>
    3182:	b3 94       	inc	r11
    3184:	b3 94       	inc	r11
    3186:	04 c0       	rjmp	.+8      	; 0x3190 <vfprintf+0x300>
    3188:	8a 2d       	mov	r24, r10
    318a:	86 78       	andi	r24, 0x86	; 134
    318c:	09 f0       	breq	.+2      	; 0x3190 <vfprintf+0x300>
    318e:	b3 94       	inc	r11
    3190:	a3 fc       	sbrc	r10, 3
    3192:	11 c0       	rjmp	.+34     	; 0x31b6 <vfprintf+0x326>
    3194:	a0 fe       	sbrs	r10, 0
    3196:	06 c0       	rjmp	.+12     	; 0x31a4 <vfprintf+0x314>
    3198:	b2 14       	cp	r11, r2
    319a:	88 f4       	brcc	.+34     	; 0x31be <vfprintf+0x32e>
    319c:	28 0c       	add	r2, r8
    319e:	92 2c       	mov	r9, r2
    31a0:	9b 18       	sub	r9, r11
    31a2:	0e c0       	rjmp	.+28     	; 0x31c0 <vfprintf+0x330>
    31a4:	b2 14       	cp	r11, r2
    31a6:	60 f4       	brcc	.+24     	; 0x31c0 <vfprintf+0x330>
    31a8:	b6 01       	movw	r22, r12
    31aa:	80 e2       	ldi	r24, 0x20	; 32
    31ac:	90 e0       	ldi	r25, 0x00	; 0
    31ae:	0e 94 83 1a 	call	0x3506	; 0x3506 <fputc>
    31b2:	b3 94       	inc	r11
    31b4:	f7 cf       	rjmp	.-18     	; 0x31a4 <vfprintf+0x314>
    31b6:	b2 14       	cp	r11, r2
    31b8:	18 f4       	brcc	.+6      	; 0x31c0 <vfprintf+0x330>
    31ba:	2b 18       	sub	r2, r11
    31bc:	02 c0       	rjmp	.+4      	; 0x31c2 <vfprintf+0x332>
    31be:	98 2c       	mov	r9, r8
    31c0:	21 2c       	mov	r2, r1
    31c2:	a4 fe       	sbrs	r10, 4
    31c4:	10 c0       	rjmp	.+32     	; 0x31e6 <vfprintf+0x356>
    31c6:	b6 01       	movw	r22, r12
    31c8:	80 e3       	ldi	r24, 0x30	; 48
    31ca:	90 e0       	ldi	r25, 0x00	; 0
    31cc:	0e 94 83 1a 	call	0x3506	; 0x3506 <fputc>
    31d0:	a2 fe       	sbrs	r10, 2
    31d2:	17 c0       	rjmp	.+46     	; 0x3202 <vfprintf+0x372>
    31d4:	a1 fc       	sbrc	r10, 1
    31d6:	03 c0       	rjmp	.+6      	; 0x31de <vfprintf+0x34e>
    31d8:	88 e7       	ldi	r24, 0x78	; 120
    31da:	90 e0       	ldi	r25, 0x00	; 0
    31dc:	02 c0       	rjmp	.+4      	; 0x31e2 <vfprintf+0x352>
    31de:	88 e5       	ldi	r24, 0x58	; 88
    31e0:	90 e0       	ldi	r25, 0x00	; 0
    31e2:	b6 01       	movw	r22, r12
    31e4:	0c c0       	rjmp	.+24     	; 0x31fe <vfprintf+0x36e>
    31e6:	8a 2d       	mov	r24, r10
    31e8:	86 78       	andi	r24, 0x86	; 134
    31ea:	59 f0       	breq	.+22     	; 0x3202 <vfprintf+0x372>
    31ec:	a1 fe       	sbrs	r10, 1
    31ee:	02 c0       	rjmp	.+4      	; 0x31f4 <vfprintf+0x364>
    31f0:	8b e2       	ldi	r24, 0x2B	; 43
    31f2:	01 c0       	rjmp	.+2      	; 0x31f6 <vfprintf+0x366>
    31f4:	80 e2       	ldi	r24, 0x20	; 32
    31f6:	a7 fc       	sbrc	r10, 7
    31f8:	8d e2       	ldi	r24, 0x2D	; 45
    31fa:	b6 01       	movw	r22, r12
    31fc:	90 e0       	ldi	r25, 0x00	; 0
    31fe:	0e 94 83 1a 	call	0x3506	; 0x3506 <fputc>
    3202:	89 14       	cp	r8, r9
    3204:	38 f4       	brcc	.+14     	; 0x3214 <vfprintf+0x384>
    3206:	b6 01       	movw	r22, r12
    3208:	80 e3       	ldi	r24, 0x30	; 48
    320a:	90 e0       	ldi	r25, 0x00	; 0
    320c:	0e 94 83 1a 	call	0x3506	; 0x3506 <fputc>
    3210:	9a 94       	dec	r9
    3212:	f7 cf       	rjmp	.-18     	; 0x3202 <vfprintf+0x372>
    3214:	8a 94       	dec	r8
    3216:	f3 01       	movw	r30, r6
    3218:	e8 0d       	add	r30, r8
    321a:	f1 1d       	adc	r31, r1
    321c:	80 81       	ld	r24, Z
    321e:	b6 01       	movw	r22, r12
    3220:	90 e0       	ldi	r25, 0x00	; 0
    3222:	0e 94 83 1a 	call	0x3506	; 0x3506 <fputc>
    3226:	81 10       	cpse	r8, r1
    3228:	f5 cf       	rjmp	.-22     	; 0x3214 <vfprintf+0x384>
    322a:	22 20       	and	r2, r2
    322c:	09 f4       	brne	.+2      	; 0x3230 <vfprintf+0x3a0>
    322e:	42 ce       	rjmp	.-892    	; 0x2eb4 <vfprintf+0x24>
    3230:	b6 01       	movw	r22, r12
    3232:	80 e2       	ldi	r24, 0x20	; 32
    3234:	90 e0       	ldi	r25, 0x00	; 0
    3236:	0e 94 83 1a 	call	0x3506	; 0x3506 <fputc>
    323a:	2a 94       	dec	r2
    323c:	f6 cf       	rjmp	.-20     	; 0x322a <vfprintf+0x39a>
    323e:	f6 01       	movw	r30, r12
    3240:	86 81       	ldd	r24, Z+6	; 0x06
    3242:	97 81       	ldd	r25, Z+7	; 0x07
    3244:	02 c0       	rjmp	.+4      	; 0x324a <vfprintf+0x3ba>
    3246:	8f ef       	ldi	r24, 0xFF	; 255
    3248:	9f ef       	ldi	r25, 0xFF	; 255
    324a:	2b 96       	adiw	r28, 0x0b	; 11
    324c:	e2 e1       	ldi	r30, 0x12	; 18
    324e:	0c 94 6b 1b 	jmp	0x36d6	; 0x36d6 <__epilogue_restores__>

00003252 <calloc>:
    3252:	0f 93       	push	r16
    3254:	1f 93       	push	r17
    3256:	cf 93       	push	r28
    3258:	df 93       	push	r29
    325a:	86 9f       	mul	r24, r22
    325c:	80 01       	movw	r16, r0
    325e:	87 9f       	mul	r24, r23
    3260:	10 0d       	add	r17, r0
    3262:	96 9f       	mul	r25, r22
    3264:	10 0d       	add	r17, r0
    3266:	11 24       	eor	r1, r1
    3268:	c8 01       	movw	r24, r16
    326a:	0e 94 45 19 	call	0x328a	; 0x328a <malloc>
    326e:	ec 01       	movw	r28, r24
    3270:	00 97       	sbiw	r24, 0x00	; 0
    3272:	29 f0       	breq	.+10     	; 0x327e <calloc+0x2c>
    3274:	a8 01       	movw	r20, r16
    3276:	60 e0       	ldi	r22, 0x00	; 0
    3278:	70 e0       	ldi	r23, 0x00	; 0
    327a:	0e 94 71 1a 	call	0x34e2	; 0x34e2 <memset>
    327e:	ce 01       	movw	r24, r28
    3280:	df 91       	pop	r29
    3282:	cf 91       	pop	r28
    3284:	1f 91       	pop	r17
    3286:	0f 91       	pop	r16
    3288:	08 95       	ret

0000328a <malloc>:
    328a:	0f 93       	push	r16
    328c:	1f 93       	push	r17
    328e:	cf 93       	push	r28
    3290:	df 93       	push	r29
    3292:	82 30       	cpi	r24, 0x02	; 2
    3294:	91 05       	cpc	r25, r1
    3296:	10 f4       	brcc	.+4      	; 0x329c <malloc+0x12>
    3298:	82 e0       	ldi	r24, 0x02	; 2
    329a:	90 e0       	ldi	r25, 0x00	; 0
    329c:	e0 91 c6 01 	lds	r30, 0x01C6	; 0x8001c6 <__flp>
    32a0:	f0 91 c7 01 	lds	r31, 0x01C7	; 0x8001c7 <__flp+0x1>
    32a4:	20 e0       	ldi	r18, 0x00	; 0
    32a6:	30 e0       	ldi	r19, 0x00	; 0
    32a8:	a0 e0       	ldi	r26, 0x00	; 0
    32aa:	b0 e0       	ldi	r27, 0x00	; 0
    32ac:	30 97       	sbiw	r30, 0x00	; 0
    32ae:	19 f1       	breq	.+70     	; 0x32f6 <malloc+0x6c>
    32b0:	40 81       	ld	r20, Z
    32b2:	51 81       	ldd	r21, Z+1	; 0x01
    32b4:	02 81       	ldd	r16, Z+2	; 0x02
    32b6:	13 81       	ldd	r17, Z+3	; 0x03
    32b8:	48 17       	cp	r20, r24
    32ba:	59 07       	cpc	r21, r25
    32bc:	c8 f0       	brcs	.+50     	; 0x32f0 <malloc+0x66>
    32be:	84 17       	cp	r24, r20
    32c0:	95 07       	cpc	r25, r21
    32c2:	69 f4       	brne	.+26     	; 0x32de <malloc+0x54>
    32c4:	10 97       	sbiw	r26, 0x00	; 0
    32c6:	31 f0       	breq	.+12     	; 0x32d4 <malloc+0x4a>
    32c8:	12 96       	adiw	r26, 0x02	; 2
    32ca:	0c 93       	st	X, r16
    32cc:	12 97       	sbiw	r26, 0x02	; 2
    32ce:	13 96       	adiw	r26, 0x03	; 3
    32d0:	1c 93       	st	X, r17
    32d2:	27 c0       	rjmp	.+78     	; 0x3322 <malloc+0x98>
    32d4:	00 93 c6 01 	sts	0x01C6, r16	; 0x8001c6 <__flp>
    32d8:	10 93 c7 01 	sts	0x01C7, r17	; 0x8001c7 <__flp+0x1>
    32dc:	22 c0       	rjmp	.+68     	; 0x3322 <malloc+0x98>
    32de:	21 15       	cp	r18, r1
    32e0:	31 05       	cpc	r19, r1
    32e2:	19 f0       	breq	.+6      	; 0x32ea <malloc+0x60>
    32e4:	42 17       	cp	r20, r18
    32e6:	53 07       	cpc	r21, r19
    32e8:	18 f4       	brcc	.+6      	; 0x32f0 <malloc+0x66>
    32ea:	9a 01       	movw	r18, r20
    32ec:	bd 01       	movw	r22, r26
    32ee:	ef 01       	movw	r28, r30
    32f0:	df 01       	movw	r26, r30
    32f2:	f8 01       	movw	r30, r16
    32f4:	db cf       	rjmp	.-74     	; 0x32ac <malloc+0x22>
    32f6:	21 15       	cp	r18, r1
    32f8:	31 05       	cpc	r19, r1
    32fa:	f9 f0       	breq	.+62     	; 0x333a <malloc+0xb0>
    32fc:	28 1b       	sub	r18, r24
    32fe:	39 0b       	sbc	r19, r25
    3300:	24 30       	cpi	r18, 0x04	; 4
    3302:	31 05       	cpc	r19, r1
    3304:	80 f4       	brcc	.+32     	; 0x3326 <malloc+0x9c>
    3306:	8a 81       	ldd	r24, Y+2	; 0x02
    3308:	9b 81       	ldd	r25, Y+3	; 0x03
    330a:	61 15       	cp	r22, r1
    330c:	71 05       	cpc	r23, r1
    330e:	21 f0       	breq	.+8      	; 0x3318 <malloc+0x8e>
    3310:	fb 01       	movw	r30, r22
    3312:	93 83       	std	Z+3, r25	; 0x03
    3314:	82 83       	std	Z+2, r24	; 0x02
    3316:	04 c0       	rjmp	.+8      	; 0x3320 <malloc+0x96>
    3318:	90 93 c7 01 	sts	0x01C7, r25	; 0x8001c7 <__flp+0x1>
    331c:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <__flp>
    3320:	fe 01       	movw	r30, r28
    3322:	32 96       	adiw	r30, 0x02	; 2
    3324:	44 c0       	rjmp	.+136    	; 0x33ae <malloc+0x124>
    3326:	fe 01       	movw	r30, r28
    3328:	e2 0f       	add	r30, r18
    332a:	f3 1f       	adc	r31, r19
    332c:	81 93       	st	Z+, r24
    332e:	91 93       	st	Z+, r25
    3330:	22 50       	subi	r18, 0x02	; 2
    3332:	31 09       	sbc	r19, r1
    3334:	39 83       	std	Y+1, r19	; 0x01
    3336:	28 83       	st	Y, r18
    3338:	3a c0       	rjmp	.+116    	; 0x33ae <malloc+0x124>
    333a:	20 91 c4 01 	lds	r18, 0x01C4	; 0x8001c4 <__brkval>
    333e:	30 91 c5 01 	lds	r19, 0x01C5	; 0x8001c5 <__brkval+0x1>
    3342:	23 2b       	or	r18, r19
    3344:	41 f4       	brne	.+16     	; 0x3356 <malloc+0xcc>
    3346:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__malloc_heap_start>
    334a:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__malloc_heap_start+0x1>
    334e:	30 93 c5 01 	sts	0x01C5, r19	; 0x8001c5 <__brkval+0x1>
    3352:	20 93 c4 01 	sts	0x01C4, r18	; 0x8001c4 <__brkval>
    3356:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <__malloc_heap_end>
    335a:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <__malloc_heap_end+0x1>
    335e:	21 15       	cp	r18, r1
    3360:	31 05       	cpc	r19, r1
    3362:	41 f4       	brne	.+16     	; 0x3374 <malloc+0xea>
    3364:	2d b7       	in	r18, 0x3d	; 61
    3366:	3e b7       	in	r19, 0x3e	; 62
    3368:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <__malloc_margin>
    336c:	50 91 09 01 	lds	r21, 0x0109	; 0x800109 <__malloc_margin+0x1>
    3370:	24 1b       	sub	r18, r20
    3372:	35 0b       	sbc	r19, r21
    3374:	e0 91 c4 01 	lds	r30, 0x01C4	; 0x8001c4 <__brkval>
    3378:	f0 91 c5 01 	lds	r31, 0x01C5	; 0x8001c5 <__brkval+0x1>
    337c:	e2 17       	cp	r30, r18
    337e:	f3 07       	cpc	r31, r19
    3380:	a0 f4       	brcc	.+40     	; 0x33aa <malloc+0x120>
    3382:	2e 1b       	sub	r18, r30
    3384:	3f 0b       	sbc	r19, r31
    3386:	28 17       	cp	r18, r24
    3388:	39 07       	cpc	r19, r25
    338a:	78 f0       	brcs	.+30     	; 0x33aa <malloc+0x120>
    338c:	ac 01       	movw	r20, r24
    338e:	4e 5f       	subi	r20, 0xFE	; 254
    3390:	5f 4f       	sbci	r21, 0xFF	; 255
    3392:	24 17       	cp	r18, r20
    3394:	35 07       	cpc	r19, r21
    3396:	48 f0       	brcs	.+18     	; 0x33aa <malloc+0x120>
    3398:	4e 0f       	add	r20, r30
    339a:	5f 1f       	adc	r21, r31
    339c:	50 93 c5 01 	sts	0x01C5, r21	; 0x8001c5 <__brkval+0x1>
    33a0:	40 93 c4 01 	sts	0x01C4, r20	; 0x8001c4 <__brkval>
    33a4:	81 93       	st	Z+, r24
    33a6:	91 93       	st	Z+, r25
    33a8:	02 c0       	rjmp	.+4      	; 0x33ae <malloc+0x124>
    33aa:	e0 e0       	ldi	r30, 0x00	; 0
    33ac:	f0 e0       	ldi	r31, 0x00	; 0
    33ae:	cf 01       	movw	r24, r30
    33b0:	df 91       	pop	r29
    33b2:	cf 91       	pop	r28
    33b4:	1f 91       	pop	r17
    33b6:	0f 91       	pop	r16
    33b8:	08 95       	ret

000033ba <free>:
    33ba:	cf 93       	push	r28
    33bc:	df 93       	push	r29
    33be:	00 97       	sbiw	r24, 0x00	; 0
    33c0:	09 f4       	brne	.+2      	; 0x33c4 <free+0xa>
    33c2:	81 c0       	rjmp	.+258    	; 0x34c6 <free+0x10c>
    33c4:	fc 01       	movw	r30, r24
    33c6:	32 97       	sbiw	r30, 0x02	; 2
    33c8:	13 82       	std	Z+3, r1	; 0x03
    33ca:	12 82       	std	Z+2, r1	; 0x02
    33cc:	a0 91 c6 01 	lds	r26, 0x01C6	; 0x8001c6 <__flp>
    33d0:	b0 91 c7 01 	lds	r27, 0x01C7	; 0x8001c7 <__flp+0x1>
    33d4:	10 97       	sbiw	r26, 0x00	; 0
    33d6:	81 f4       	brne	.+32     	; 0x33f8 <free+0x3e>
    33d8:	20 81       	ld	r18, Z
    33da:	31 81       	ldd	r19, Z+1	; 0x01
    33dc:	82 0f       	add	r24, r18
    33de:	93 1f       	adc	r25, r19
    33e0:	20 91 c4 01 	lds	r18, 0x01C4	; 0x8001c4 <__brkval>
    33e4:	30 91 c5 01 	lds	r19, 0x01C5	; 0x8001c5 <__brkval+0x1>
    33e8:	28 17       	cp	r18, r24
    33ea:	39 07       	cpc	r19, r25
    33ec:	51 f5       	brne	.+84     	; 0x3442 <free+0x88>
    33ee:	f0 93 c5 01 	sts	0x01C5, r31	; 0x8001c5 <__brkval+0x1>
    33f2:	e0 93 c4 01 	sts	0x01C4, r30	; 0x8001c4 <__brkval>
    33f6:	67 c0       	rjmp	.+206    	; 0x34c6 <free+0x10c>
    33f8:	ed 01       	movw	r28, r26
    33fa:	20 e0       	ldi	r18, 0x00	; 0
    33fc:	30 e0       	ldi	r19, 0x00	; 0
    33fe:	ce 17       	cp	r28, r30
    3400:	df 07       	cpc	r29, r31
    3402:	40 f4       	brcc	.+16     	; 0x3414 <free+0x5a>
    3404:	4a 81       	ldd	r20, Y+2	; 0x02
    3406:	5b 81       	ldd	r21, Y+3	; 0x03
    3408:	9e 01       	movw	r18, r28
    340a:	41 15       	cp	r20, r1
    340c:	51 05       	cpc	r21, r1
    340e:	f1 f0       	breq	.+60     	; 0x344c <free+0x92>
    3410:	ea 01       	movw	r28, r20
    3412:	f5 cf       	rjmp	.-22     	; 0x33fe <free+0x44>
    3414:	d3 83       	std	Z+3, r29	; 0x03
    3416:	c2 83       	std	Z+2, r28	; 0x02
    3418:	40 81       	ld	r20, Z
    341a:	51 81       	ldd	r21, Z+1	; 0x01
    341c:	84 0f       	add	r24, r20
    341e:	95 1f       	adc	r25, r21
    3420:	c8 17       	cp	r28, r24
    3422:	d9 07       	cpc	r29, r25
    3424:	59 f4       	brne	.+22     	; 0x343c <free+0x82>
    3426:	88 81       	ld	r24, Y
    3428:	99 81       	ldd	r25, Y+1	; 0x01
    342a:	84 0f       	add	r24, r20
    342c:	95 1f       	adc	r25, r21
    342e:	02 96       	adiw	r24, 0x02	; 2
    3430:	91 83       	std	Z+1, r25	; 0x01
    3432:	80 83       	st	Z, r24
    3434:	8a 81       	ldd	r24, Y+2	; 0x02
    3436:	9b 81       	ldd	r25, Y+3	; 0x03
    3438:	93 83       	std	Z+3, r25	; 0x03
    343a:	82 83       	std	Z+2, r24	; 0x02
    343c:	21 15       	cp	r18, r1
    343e:	31 05       	cpc	r19, r1
    3440:	29 f4       	brne	.+10     	; 0x344c <free+0x92>
    3442:	f0 93 c7 01 	sts	0x01C7, r31	; 0x8001c7 <__flp+0x1>
    3446:	e0 93 c6 01 	sts	0x01C6, r30	; 0x8001c6 <__flp>
    344a:	3d c0       	rjmp	.+122    	; 0x34c6 <free+0x10c>
    344c:	e9 01       	movw	r28, r18
    344e:	fb 83       	std	Y+3, r31	; 0x03
    3450:	ea 83       	std	Y+2, r30	; 0x02
    3452:	49 91       	ld	r20, Y+
    3454:	59 91       	ld	r21, Y+
    3456:	c4 0f       	add	r28, r20
    3458:	d5 1f       	adc	r29, r21
    345a:	ec 17       	cp	r30, r28
    345c:	fd 07       	cpc	r31, r29
    345e:	61 f4       	brne	.+24     	; 0x3478 <free+0xbe>
    3460:	80 81       	ld	r24, Z
    3462:	91 81       	ldd	r25, Z+1	; 0x01
    3464:	84 0f       	add	r24, r20
    3466:	95 1f       	adc	r25, r21
    3468:	02 96       	adiw	r24, 0x02	; 2
    346a:	e9 01       	movw	r28, r18
    346c:	99 83       	std	Y+1, r25	; 0x01
    346e:	88 83       	st	Y, r24
    3470:	82 81       	ldd	r24, Z+2	; 0x02
    3472:	93 81       	ldd	r25, Z+3	; 0x03
    3474:	9b 83       	std	Y+3, r25	; 0x03
    3476:	8a 83       	std	Y+2, r24	; 0x02
    3478:	e0 e0       	ldi	r30, 0x00	; 0
    347a:	f0 e0       	ldi	r31, 0x00	; 0
    347c:	12 96       	adiw	r26, 0x02	; 2
    347e:	8d 91       	ld	r24, X+
    3480:	9c 91       	ld	r25, X
    3482:	13 97       	sbiw	r26, 0x03	; 3
    3484:	00 97       	sbiw	r24, 0x00	; 0
    3486:	19 f0       	breq	.+6      	; 0x348e <free+0xd4>
    3488:	fd 01       	movw	r30, r26
    348a:	dc 01       	movw	r26, r24
    348c:	f7 cf       	rjmp	.-18     	; 0x347c <free+0xc2>
    348e:	8d 91       	ld	r24, X+
    3490:	9c 91       	ld	r25, X
    3492:	11 97       	sbiw	r26, 0x01	; 1
    3494:	9d 01       	movw	r18, r26
    3496:	2e 5f       	subi	r18, 0xFE	; 254
    3498:	3f 4f       	sbci	r19, 0xFF	; 255
    349a:	82 0f       	add	r24, r18
    349c:	93 1f       	adc	r25, r19
    349e:	20 91 c4 01 	lds	r18, 0x01C4	; 0x8001c4 <__brkval>
    34a2:	30 91 c5 01 	lds	r19, 0x01C5	; 0x8001c5 <__brkval+0x1>
    34a6:	28 17       	cp	r18, r24
    34a8:	39 07       	cpc	r19, r25
    34aa:	69 f4       	brne	.+26     	; 0x34c6 <free+0x10c>
    34ac:	30 97       	sbiw	r30, 0x00	; 0
    34ae:	29 f4       	brne	.+10     	; 0x34ba <free+0x100>
    34b0:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <__flp+0x1>
    34b4:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <__flp>
    34b8:	02 c0       	rjmp	.+4      	; 0x34be <free+0x104>
    34ba:	13 82       	std	Z+3, r1	; 0x03
    34bc:	12 82       	std	Z+2, r1	; 0x02
    34be:	b0 93 c5 01 	sts	0x01C5, r27	; 0x8001c5 <__brkval+0x1>
    34c2:	a0 93 c4 01 	sts	0x01C4, r26	; 0x8001c4 <__brkval>
    34c6:	df 91       	pop	r29
    34c8:	cf 91       	pop	r28
    34ca:	08 95       	ret

000034cc <strnlen_P>:
    34cc:	fc 01       	movw	r30, r24
    34ce:	05 90       	lpm	r0, Z+
    34d0:	61 50       	subi	r22, 0x01	; 1
    34d2:	70 40       	sbci	r23, 0x00	; 0
    34d4:	01 10       	cpse	r0, r1
    34d6:	d8 f7       	brcc	.-10     	; 0x34ce <strnlen_P+0x2>
    34d8:	80 95       	com	r24
    34da:	90 95       	com	r25
    34dc:	8e 0f       	add	r24, r30
    34de:	9f 1f       	adc	r25, r31
    34e0:	08 95       	ret

000034e2 <memset>:
    34e2:	dc 01       	movw	r26, r24
    34e4:	01 c0       	rjmp	.+2      	; 0x34e8 <memset+0x6>
    34e6:	6d 93       	st	X+, r22
    34e8:	41 50       	subi	r20, 0x01	; 1
    34ea:	50 40       	sbci	r21, 0x00	; 0
    34ec:	e0 f7       	brcc	.-8      	; 0x34e6 <memset+0x4>
    34ee:	08 95       	ret

000034f0 <strnlen>:
    34f0:	fc 01       	movw	r30, r24
    34f2:	61 50       	subi	r22, 0x01	; 1
    34f4:	70 40       	sbci	r23, 0x00	; 0
    34f6:	01 90       	ld	r0, Z+
    34f8:	01 10       	cpse	r0, r1
    34fa:	d8 f7       	brcc	.-10     	; 0x34f2 <strnlen+0x2>
    34fc:	80 95       	com	r24
    34fe:	90 95       	com	r25
    3500:	8e 0f       	add	r24, r30
    3502:	9f 1f       	adc	r25, r31
    3504:	08 95       	ret

00003506 <fputc>:
    3506:	0f 93       	push	r16
    3508:	1f 93       	push	r17
    350a:	cf 93       	push	r28
    350c:	df 93       	push	r29
    350e:	fb 01       	movw	r30, r22
    3510:	23 81       	ldd	r18, Z+3	; 0x03
    3512:	21 fd       	sbrc	r18, 1
    3514:	03 c0       	rjmp	.+6      	; 0x351c <fputc+0x16>
    3516:	8f ef       	ldi	r24, 0xFF	; 255
    3518:	9f ef       	ldi	r25, 0xFF	; 255
    351a:	2c c0       	rjmp	.+88     	; 0x3574 <fputc+0x6e>
    351c:	22 ff       	sbrs	r18, 2
    351e:	16 c0       	rjmp	.+44     	; 0x354c <fputc+0x46>
    3520:	46 81       	ldd	r20, Z+6	; 0x06
    3522:	57 81       	ldd	r21, Z+7	; 0x07
    3524:	24 81       	ldd	r18, Z+4	; 0x04
    3526:	35 81       	ldd	r19, Z+5	; 0x05
    3528:	42 17       	cp	r20, r18
    352a:	53 07       	cpc	r21, r19
    352c:	44 f4       	brge	.+16     	; 0x353e <fputc+0x38>
    352e:	a0 81       	ld	r26, Z
    3530:	b1 81       	ldd	r27, Z+1	; 0x01
    3532:	9d 01       	movw	r18, r26
    3534:	2f 5f       	subi	r18, 0xFF	; 255
    3536:	3f 4f       	sbci	r19, 0xFF	; 255
    3538:	31 83       	std	Z+1, r19	; 0x01
    353a:	20 83       	st	Z, r18
    353c:	8c 93       	st	X, r24
    353e:	26 81       	ldd	r18, Z+6	; 0x06
    3540:	37 81       	ldd	r19, Z+7	; 0x07
    3542:	2f 5f       	subi	r18, 0xFF	; 255
    3544:	3f 4f       	sbci	r19, 0xFF	; 255
    3546:	37 83       	std	Z+7, r19	; 0x07
    3548:	26 83       	std	Z+6, r18	; 0x06
    354a:	14 c0       	rjmp	.+40     	; 0x3574 <fputc+0x6e>
    354c:	8b 01       	movw	r16, r22
    354e:	ec 01       	movw	r28, r24
    3550:	fb 01       	movw	r30, r22
    3552:	00 84       	ldd	r0, Z+8	; 0x08
    3554:	f1 85       	ldd	r31, Z+9	; 0x09
    3556:	e0 2d       	mov	r30, r0
    3558:	09 95       	icall
    355a:	89 2b       	or	r24, r25
    355c:	e1 f6       	brne	.-72     	; 0x3516 <fputc+0x10>
    355e:	d8 01       	movw	r26, r16
    3560:	16 96       	adiw	r26, 0x06	; 6
    3562:	8d 91       	ld	r24, X+
    3564:	9c 91       	ld	r25, X
    3566:	17 97       	sbiw	r26, 0x07	; 7
    3568:	01 96       	adiw	r24, 0x01	; 1
    356a:	17 96       	adiw	r26, 0x07	; 7
    356c:	9c 93       	st	X, r25
    356e:	8e 93       	st	-X, r24
    3570:	16 97       	sbiw	r26, 0x06	; 6
    3572:	ce 01       	movw	r24, r28
    3574:	df 91       	pop	r29
    3576:	cf 91       	pop	r28
    3578:	1f 91       	pop	r17
    357a:	0f 91       	pop	r16
    357c:	08 95       	ret

0000357e <__ultoa_invert>:
    357e:	fa 01       	movw	r30, r20
    3580:	aa 27       	eor	r26, r26
    3582:	28 30       	cpi	r18, 0x08	; 8
    3584:	51 f1       	breq	.+84     	; 0x35da <__ultoa_invert+0x5c>
    3586:	20 31       	cpi	r18, 0x10	; 16
    3588:	81 f1       	breq	.+96     	; 0x35ea <__ultoa_invert+0x6c>
    358a:	e8 94       	clt
    358c:	6f 93       	push	r22
    358e:	6e 7f       	andi	r22, 0xFE	; 254
    3590:	6e 5f       	subi	r22, 0xFE	; 254
    3592:	7f 4f       	sbci	r23, 0xFF	; 255
    3594:	8f 4f       	sbci	r24, 0xFF	; 255
    3596:	9f 4f       	sbci	r25, 0xFF	; 255
    3598:	af 4f       	sbci	r26, 0xFF	; 255
    359a:	b1 e0       	ldi	r27, 0x01	; 1
    359c:	3e d0       	rcall	.+124    	; 0x361a <__ultoa_invert+0x9c>
    359e:	b4 e0       	ldi	r27, 0x04	; 4
    35a0:	3c d0       	rcall	.+120    	; 0x361a <__ultoa_invert+0x9c>
    35a2:	67 0f       	add	r22, r23
    35a4:	78 1f       	adc	r23, r24
    35a6:	89 1f       	adc	r24, r25
    35a8:	9a 1f       	adc	r25, r26
    35aa:	a1 1d       	adc	r26, r1
    35ac:	68 0f       	add	r22, r24
    35ae:	79 1f       	adc	r23, r25
    35b0:	8a 1f       	adc	r24, r26
    35b2:	91 1d       	adc	r25, r1
    35b4:	a1 1d       	adc	r26, r1
    35b6:	6a 0f       	add	r22, r26
    35b8:	71 1d       	adc	r23, r1
    35ba:	81 1d       	adc	r24, r1
    35bc:	91 1d       	adc	r25, r1
    35be:	a1 1d       	adc	r26, r1
    35c0:	20 d0       	rcall	.+64     	; 0x3602 <__ultoa_invert+0x84>
    35c2:	09 f4       	brne	.+2      	; 0x35c6 <__ultoa_invert+0x48>
    35c4:	68 94       	set
    35c6:	3f 91       	pop	r19
    35c8:	2a e0       	ldi	r18, 0x0A	; 10
    35ca:	26 9f       	mul	r18, r22
    35cc:	11 24       	eor	r1, r1
    35ce:	30 19       	sub	r19, r0
    35d0:	30 5d       	subi	r19, 0xD0	; 208
    35d2:	31 93       	st	Z+, r19
    35d4:	de f6       	brtc	.-74     	; 0x358c <__ultoa_invert+0xe>
    35d6:	cf 01       	movw	r24, r30
    35d8:	08 95       	ret
    35da:	46 2f       	mov	r20, r22
    35dc:	47 70       	andi	r20, 0x07	; 7
    35de:	40 5d       	subi	r20, 0xD0	; 208
    35e0:	41 93       	st	Z+, r20
    35e2:	b3 e0       	ldi	r27, 0x03	; 3
    35e4:	0f d0       	rcall	.+30     	; 0x3604 <__ultoa_invert+0x86>
    35e6:	c9 f7       	brne	.-14     	; 0x35da <__ultoa_invert+0x5c>
    35e8:	f6 cf       	rjmp	.-20     	; 0x35d6 <__ultoa_invert+0x58>
    35ea:	46 2f       	mov	r20, r22
    35ec:	4f 70       	andi	r20, 0x0F	; 15
    35ee:	40 5d       	subi	r20, 0xD0	; 208
    35f0:	4a 33       	cpi	r20, 0x3A	; 58
    35f2:	18 f0       	brcs	.+6      	; 0x35fa <__ultoa_invert+0x7c>
    35f4:	49 5d       	subi	r20, 0xD9	; 217
    35f6:	31 fd       	sbrc	r19, 1
    35f8:	40 52       	subi	r20, 0x20	; 32
    35fa:	41 93       	st	Z+, r20
    35fc:	02 d0       	rcall	.+4      	; 0x3602 <__ultoa_invert+0x84>
    35fe:	a9 f7       	brne	.-22     	; 0x35ea <__ultoa_invert+0x6c>
    3600:	ea cf       	rjmp	.-44     	; 0x35d6 <__ultoa_invert+0x58>
    3602:	b4 e0       	ldi	r27, 0x04	; 4
    3604:	a6 95       	lsr	r26
    3606:	97 95       	ror	r25
    3608:	87 95       	ror	r24
    360a:	77 95       	ror	r23
    360c:	67 95       	ror	r22
    360e:	ba 95       	dec	r27
    3610:	c9 f7       	brne	.-14     	; 0x3604 <__ultoa_invert+0x86>
    3612:	00 97       	sbiw	r24, 0x00	; 0
    3614:	61 05       	cpc	r22, r1
    3616:	71 05       	cpc	r23, r1
    3618:	08 95       	ret
    361a:	9b 01       	movw	r18, r22
    361c:	ac 01       	movw	r20, r24
    361e:	0a 2e       	mov	r0, r26
    3620:	06 94       	lsr	r0
    3622:	57 95       	ror	r21
    3624:	47 95       	ror	r20
    3626:	37 95       	ror	r19
    3628:	27 95       	ror	r18
    362a:	ba 95       	dec	r27
    362c:	c9 f7       	brne	.-14     	; 0x3620 <__ultoa_invert+0xa2>
    362e:	62 0f       	add	r22, r18
    3630:	73 1f       	adc	r23, r19
    3632:	84 1f       	adc	r24, r20
    3634:	95 1f       	adc	r25, r21
    3636:	a0 1d       	adc	r26, r0
    3638:	08 95       	ret

0000363a <__divmodsi4>:
    363a:	05 2e       	mov	r0, r21
    363c:	97 fb       	bst	r25, 7
    363e:	1e f4       	brtc	.+6      	; 0x3646 <__divmodsi4+0xc>
    3640:	00 94       	com	r0
    3642:	0e 94 34 1b 	call	0x3668	; 0x3668 <__negsi2>
    3646:	57 fd       	sbrc	r21, 7
    3648:	07 d0       	rcall	.+14     	; 0x3658 <__divmodsi4_neg2>
    364a:	0e 94 86 1b 	call	0x370c	; 0x370c <__udivmodsi4>
    364e:	07 fc       	sbrc	r0, 7
    3650:	03 d0       	rcall	.+6      	; 0x3658 <__divmodsi4_neg2>
    3652:	4e f4       	brtc	.+18     	; 0x3666 <__divmodsi4_exit>
    3654:	0c 94 34 1b 	jmp	0x3668	; 0x3668 <__negsi2>

00003658 <__divmodsi4_neg2>:
    3658:	50 95       	com	r21
    365a:	40 95       	com	r20
    365c:	30 95       	com	r19
    365e:	21 95       	neg	r18
    3660:	3f 4f       	sbci	r19, 0xFF	; 255
    3662:	4f 4f       	sbci	r20, 0xFF	; 255
    3664:	5f 4f       	sbci	r21, 0xFF	; 255

00003666 <__divmodsi4_exit>:
    3666:	08 95       	ret

00003668 <__negsi2>:
    3668:	90 95       	com	r25
    366a:	80 95       	com	r24
    366c:	70 95       	com	r23
    366e:	61 95       	neg	r22
    3670:	7f 4f       	sbci	r23, 0xFF	; 255
    3672:	8f 4f       	sbci	r24, 0xFF	; 255
    3674:	9f 4f       	sbci	r25, 0xFF	; 255
    3676:	08 95       	ret

00003678 <__muluhisi3>:
    3678:	0e 94 a8 1b 	call	0x3750	; 0x3750 <__umulhisi3>
    367c:	a5 9f       	mul	r26, r21
    367e:	90 0d       	add	r25, r0
    3680:	b4 9f       	mul	r27, r20
    3682:	90 0d       	add	r25, r0
    3684:	a4 9f       	mul	r26, r20
    3686:	80 0d       	add	r24, r0
    3688:	91 1d       	adc	r25, r1
    368a:	11 24       	eor	r1, r1
    368c:	08 95       	ret

0000368e <__mulshisi3>:
    368e:	b7 ff       	sbrs	r27, 7
    3690:	0c 94 3c 1b 	jmp	0x3678	; 0x3678 <__muluhisi3>

00003694 <__mulohisi3>:
    3694:	0e 94 3c 1b 	call	0x3678	; 0x3678 <__muluhisi3>
    3698:	82 1b       	sub	r24, r18
    369a:	93 0b       	sbc	r25, r19
    369c:	08 95       	ret

0000369e <__prologue_saves__>:
    369e:	2f 92       	push	r2
    36a0:	3f 92       	push	r3
    36a2:	4f 92       	push	r4
    36a4:	5f 92       	push	r5
    36a6:	6f 92       	push	r6
    36a8:	7f 92       	push	r7
    36aa:	8f 92       	push	r8
    36ac:	9f 92       	push	r9
    36ae:	af 92       	push	r10
    36b0:	bf 92       	push	r11
    36b2:	cf 92       	push	r12
    36b4:	df 92       	push	r13
    36b6:	ef 92       	push	r14
    36b8:	ff 92       	push	r15
    36ba:	0f 93       	push	r16
    36bc:	1f 93       	push	r17
    36be:	cf 93       	push	r28
    36c0:	df 93       	push	r29
    36c2:	cd b7       	in	r28, 0x3d	; 61
    36c4:	de b7       	in	r29, 0x3e	; 62
    36c6:	ca 1b       	sub	r28, r26
    36c8:	db 0b       	sbc	r29, r27
    36ca:	0f b6       	in	r0, 0x3f	; 63
    36cc:	f8 94       	cli
    36ce:	de bf       	out	0x3e, r29	; 62
    36d0:	0f be       	out	0x3f, r0	; 63
    36d2:	cd bf       	out	0x3d, r28	; 61
    36d4:	09 94       	ijmp

000036d6 <__epilogue_restores__>:
    36d6:	2a 88       	ldd	r2, Y+18	; 0x12
    36d8:	39 88       	ldd	r3, Y+17	; 0x11
    36da:	48 88       	ldd	r4, Y+16	; 0x10
    36dc:	5f 84       	ldd	r5, Y+15	; 0x0f
    36de:	6e 84       	ldd	r6, Y+14	; 0x0e
    36e0:	7d 84       	ldd	r7, Y+13	; 0x0d
    36e2:	8c 84       	ldd	r8, Y+12	; 0x0c
    36e4:	9b 84       	ldd	r9, Y+11	; 0x0b
    36e6:	aa 84       	ldd	r10, Y+10	; 0x0a
    36e8:	b9 84       	ldd	r11, Y+9	; 0x09
    36ea:	c8 84       	ldd	r12, Y+8	; 0x08
    36ec:	df 80       	ldd	r13, Y+7	; 0x07
    36ee:	ee 80       	ldd	r14, Y+6	; 0x06
    36f0:	fd 80       	ldd	r15, Y+5	; 0x05
    36f2:	0c 81       	ldd	r16, Y+4	; 0x04
    36f4:	1b 81       	ldd	r17, Y+3	; 0x03
    36f6:	aa 81       	ldd	r26, Y+2	; 0x02
    36f8:	b9 81       	ldd	r27, Y+1	; 0x01
    36fa:	ce 0f       	add	r28, r30
    36fc:	d1 1d       	adc	r29, r1
    36fe:	0f b6       	in	r0, 0x3f	; 63
    3700:	f8 94       	cli
    3702:	de bf       	out	0x3e, r29	; 62
    3704:	0f be       	out	0x3f, r0	; 63
    3706:	cd bf       	out	0x3d, r28	; 61
    3708:	ed 01       	movw	r28, r26
    370a:	08 95       	ret

0000370c <__udivmodsi4>:
    370c:	a1 e2       	ldi	r26, 0x21	; 33
    370e:	1a 2e       	mov	r1, r26
    3710:	aa 1b       	sub	r26, r26
    3712:	bb 1b       	sub	r27, r27
    3714:	fd 01       	movw	r30, r26
    3716:	0d c0       	rjmp	.+26     	; 0x3732 <__udivmodsi4_ep>

00003718 <__udivmodsi4_loop>:
    3718:	aa 1f       	adc	r26, r26
    371a:	bb 1f       	adc	r27, r27
    371c:	ee 1f       	adc	r30, r30
    371e:	ff 1f       	adc	r31, r31
    3720:	a2 17       	cp	r26, r18
    3722:	b3 07       	cpc	r27, r19
    3724:	e4 07       	cpc	r30, r20
    3726:	f5 07       	cpc	r31, r21
    3728:	20 f0       	brcs	.+8      	; 0x3732 <__udivmodsi4_ep>
    372a:	a2 1b       	sub	r26, r18
    372c:	b3 0b       	sbc	r27, r19
    372e:	e4 0b       	sbc	r30, r20
    3730:	f5 0b       	sbc	r31, r21

00003732 <__udivmodsi4_ep>:
    3732:	66 1f       	adc	r22, r22
    3734:	77 1f       	adc	r23, r23
    3736:	88 1f       	adc	r24, r24
    3738:	99 1f       	adc	r25, r25
    373a:	1a 94       	dec	r1
    373c:	69 f7       	brne	.-38     	; 0x3718 <__udivmodsi4_loop>
    373e:	60 95       	com	r22
    3740:	70 95       	com	r23
    3742:	80 95       	com	r24
    3744:	90 95       	com	r25
    3746:	9b 01       	movw	r18, r22
    3748:	ac 01       	movw	r20, r24
    374a:	bd 01       	movw	r22, r26
    374c:	cf 01       	movw	r24, r30
    374e:	08 95       	ret

00003750 <__umulhisi3>:
    3750:	a2 9f       	mul	r26, r18
    3752:	b0 01       	movw	r22, r0
    3754:	b3 9f       	mul	r27, r19
    3756:	c0 01       	movw	r24, r0
    3758:	a3 9f       	mul	r26, r19
    375a:	70 0d       	add	r23, r0
    375c:	81 1d       	adc	r24, r1
    375e:	11 24       	eor	r1, r1
    3760:	91 1d       	adc	r25, r1
    3762:	b2 9f       	mul	r27, r18
    3764:	70 0d       	add	r23, r0
    3766:	81 1d       	adc	r24, r1
    3768:	11 24       	eor	r1, r1
    376a:	91 1d       	adc	r25, r1
    376c:	08 95       	ret

0000376e <_exit>:
    376e:	f8 94       	cli

00003770 <__stop_program>:
    3770:	ff cf       	rjmp	.-2      	; 0x3770 <__stop_program>
